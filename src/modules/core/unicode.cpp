#include "unicode.h"

Unicode_Script unicode_script(uint32_t codepoint) {
	if (codepoint >= 0x0000 && codepoint <= 0x001F) return Unicode_Script_COMMON;
	if (codepoint == 0x0020) return Unicode_Script_COMMON;
	if (codepoint >= 0x0021 && codepoint <= 0x0023) return Unicode_Script_COMMON;
	if (codepoint == 0x0024) return Unicode_Script_COMMON;
	if (codepoint >= 0x0025 && codepoint <= 0x0027) return Unicode_Script_COMMON;
	if (codepoint == 0x0028) return Unicode_Script_COMMON;
	if (codepoint == 0x0029) return Unicode_Script_COMMON;
	if (codepoint == 0x002A) return Unicode_Script_COMMON;
	if (codepoint == 0x002B) return Unicode_Script_COMMON;
	if (codepoint == 0x002C) return Unicode_Script_COMMON;
	if (codepoint == 0x002D) return Unicode_Script_COMMON;
	if (codepoint >= 0x002E && codepoint <= 0x002F) return Unicode_Script_COMMON;
	if (codepoint >= 0x0030 && codepoint <= 0x0039) return Unicode_Script_COMMON;
	if (codepoint >= 0x003A && codepoint <= 0x003B) return Unicode_Script_COMMON;
	if (codepoint >= 0x003C && codepoint <= 0x003E) return Unicode_Script_COMMON;
	if (codepoint >= 0x003F && codepoint <= 0x0040) return Unicode_Script_COMMON;
	if (codepoint == 0x005B) return Unicode_Script_COMMON;
	if (codepoint == 0x005C) return Unicode_Script_COMMON;
	if (codepoint == 0x005D) return Unicode_Script_COMMON;
	if (codepoint == 0x005E) return Unicode_Script_COMMON;
	if (codepoint == 0x005F) return Unicode_Script_COMMON;
	if (codepoint == 0x0060) return Unicode_Script_COMMON;
	if (codepoint == 0x007B) return Unicode_Script_COMMON;
	if (codepoint == 0x007C) return Unicode_Script_COMMON;
	if (codepoint == 0x007D) return Unicode_Script_COMMON;
	if (codepoint == 0x007E) return Unicode_Script_COMMON;
	if (codepoint >= 0x007F && codepoint <= 0x009F) return Unicode_Script_COMMON;
	if (codepoint == 0x00A0) return Unicode_Script_COMMON;
	if (codepoint == 0x00A1) return Unicode_Script_COMMON;
	if (codepoint >= 0x00A2 && codepoint <= 0x00A5) return Unicode_Script_COMMON;
	if (codepoint == 0x00A6) return Unicode_Script_COMMON;
	if (codepoint == 0x00A7) return Unicode_Script_COMMON;
	if (codepoint == 0x00A8) return Unicode_Script_COMMON;
	if (codepoint == 0x00A9) return Unicode_Script_COMMON;
	if (codepoint == 0x00AB) return Unicode_Script_COMMON;
	if (codepoint == 0x00AC) return Unicode_Script_COMMON;
	if (codepoint == 0x00AD) return Unicode_Script_COMMON;
	if (codepoint == 0x00AE) return Unicode_Script_COMMON;
	if (codepoint == 0x00AF) return Unicode_Script_COMMON;
	if (codepoint == 0x00B0) return Unicode_Script_COMMON;
	if (codepoint == 0x00B1) return Unicode_Script_COMMON;
	if (codepoint >= 0x00B2 && codepoint <= 0x00B3) return Unicode_Script_COMMON;
	if (codepoint == 0x00B4) return Unicode_Script_COMMON;
	if (codepoint == 0x00B5) return Unicode_Script_COMMON;
	if (codepoint >= 0x00B6 && codepoint <= 0x00B7) return Unicode_Script_COMMON;
	if (codepoint == 0x00B8) return Unicode_Script_COMMON;
	if (codepoint == 0x00B9) return Unicode_Script_COMMON;
	if (codepoint == 0x00BB) return Unicode_Script_COMMON;
	if (codepoint >= 0x00BC && codepoint <= 0x00BE) return Unicode_Script_COMMON;
	if (codepoint == 0x00BF) return Unicode_Script_COMMON;
	if (codepoint == 0x00D7) return Unicode_Script_COMMON;
	if (codepoint == 0x00F7) return Unicode_Script_COMMON;
	if (codepoint >= 0x02B9 && codepoint <= 0x02C1) return Unicode_Script_COMMON;
	if (codepoint >= 0x02C2 && codepoint <= 0x02C5) return Unicode_Script_COMMON;
	if (codepoint >= 0x02C6 && codepoint <= 0x02D1) return Unicode_Script_COMMON;
	if (codepoint >= 0x02D2 && codepoint <= 0x02DF) return Unicode_Script_COMMON;
	if (codepoint >= 0x02E5 && codepoint <= 0x02E9) return Unicode_Script_COMMON;
	if (codepoint == 0x02EC) return Unicode_Script_COMMON;
	if (codepoint == 0x02ED) return Unicode_Script_COMMON;
	if (codepoint == 0x02EE) return Unicode_Script_COMMON;
	if (codepoint >= 0x02EF && codepoint <= 0x02FF) return Unicode_Script_COMMON;
	if (codepoint == 0x0374) return Unicode_Script_COMMON;
	if (codepoint == 0x037E) return Unicode_Script_COMMON;
	if (codepoint == 0x0385) return Unicode_Script_COMMON;
	if (codepoint == 0x0387) return Unicode_Script_COMMON;
	if (codepoint == 0x0605) return Unicode_Script_COMMON;
	if (codepoint == 0x060C) return Unicode_Script_COMMON;
	if (codepoint == 0x061B) return Unicode_Script_COMMON;
	if (codepoint == 0x061F) return Unicode_Script_COMMON;
	if (codepoint == 0x0640) return Unicode_Script_COMMON;
	if (codepoint == 0x06DD) return Unicode_Script_COMMON;
	if (codepoint == 0x08E2) return Unicode_Script_COMMON;
	if (codepoint >= 0x0964 && codepoint <= 0x0965) return Unicode_Script_COMMON;
	if (codepoint == 0x0E3F) return Unicode_Script_COMMON;
	if (codepoint >= 0x0FD5 && codepoint <= 0x0FD8) return Unicode_Script_COMMON;
	if (codepoint == 0x10FB) return Unicode_Script_COMMON;
	if (codepoint >= 0x16EB && codepoint <= 0x16ED) return Unicode_Script_COMMON;
	if (codepoint >= 0x1735 && codepoint <= 0x1736) return Unicode_Script_COMMON;
	if (codepoint >= 0x1802 && codepoint <= 0x1803) return Unicode_Script_COMMON;
	if (codepoint == 0x1805) return Unicode_Script_COMMON;
	if (codepoint == 0x1CD3) return Unicode_Script_COMMON;
	if (codepoint == 0x1CE1) return Unicode_Script_COMMON;
	if (codepoint >= 0x1CE9 && codepoint <= 0x1CEC) return Unicode_Script_COMMON;
	if (codepoint >= 0x1CEE && codepoint <= 0x1CF3) return Unicode_Script_COMMON;
	if (codepoint >= 0x1CF5 && codepoint <= 0x1CF6) return Unicode_Script_COMMON;
	if (codepoint == 0x1CF7) return Unicode_Script_COMMON;
	if (codepoint == 0x1CFA) return Unicode_Script_COMMON;
	if (codepoint >= 0x2000 && codepoint <= 0x200A) return Unicode_Script_COMMON;
	if (codepoint == 0x200B) return Unicode_Script_COMMON;
	if (codepoint >= 0x200E && codepoint <= 0x200F) return Unicode_Script_COMMON;
	if (codepoint >= 0x2010 && codepoint <= 0x2015) return Unicode_Script_COMMON;
	if (codepoint >= 0x2016 && codepoint <= 0x2017) return Unicode_Script_COMMON;
	if (codepoint == 0x2018) return Unicode_Script_COMMON;
	if (codepoint == 0x2019) return Unicode_Script_COMMON;
	if (codepoint == 0x201A) return Unicode_Script_COMMON;
	if (codepoint >= 0x201B && codepoint <= 0x201C) return Unicode_Script_COMMON;
	if (codepoint == 0x201D) return Unicode_Script_COMMON;
	if (codepoint == 0x201E) return Unicode_Script_COMMON;
	if (codepoint == 0x201F) return Unicode_Script_COMMON;
	if (codepoint >= 0x2020 && codepoint <= 0x2027) return Unicode_Script_COMMON;
	if (codepoint == 0x2028) return Unicode_Script_COMMON;
	if (codepoint == 0x2029) return Unicode_Script_COMMON;
	if (codepoint >= 0x202A && codepoint <= 0x202E) return Unicode_Script_COMMON;
	if (codepoint == 0x202F) return Unicode_Script_COMMON;
	if (codepoint >= 0x2030 && codepoint <= 0x2038) return Unicode_Script_COMMON;
	if (codepoint == 0x2039) return Unicode_Script_COMMON;
	if (codepoint == 0x203A) return Unicode_Script_COMMON;
	if (codepoint >= 0x203B && codepoint <= 0x203E) return Unicode_Script_COMMON;
	if (codepoint >= 0x203F && codepoint <= 0x2040) return Unicode_Script_COMMON;
	if (codepoint >= 0x2041 && codepoint <= 0x2043) return Unicode_Script_COMMON;
	if (codepoint == 0x2044) return Unicode_Script_COMMON;
	if (codepoint == 0x2045) return Unicode_Script_COMMON;
	if (codepoint == 0x2046) return Unicode_Script_COMMON;
	if (codepoint >= 0x2047 && codepoint <= 0x2051) return Unicode_Script_COMMON;
	if (codepoint == 0x2052) return Unicode_Script_COMMON;
	if (codepoint == 0x2053) return Unicode_Script_COMMON;
	if (codepoint == 0x2054) return Unicode_Script_COMMON;
	if (codepoint >= 0x2055 && codepoint <= 0x205E) return Unicode_Script_COMMON;
	if (codepoint == 0x205F) return Unicode_Script_COMMON;
	if (codepoint >= 0x2060 && codepoint <= 0x2064) return Unicode_Script_COMMON;
	if (codepoint >= 0x2066 && codepoint <= 0x206F) return Unicode_Script_COMMON;
	if (codepoint == 0x2070) return Unicode_Script_COMMON;
	if (codepoint >= 0x2074 && codepoint <= 0x2079) return Unicode_Script_COMMON;
	if (codepoint >= 0x207A && codepoint <= 0x207C) return Unicode_Script_COMMON;
	if (codepoint == 0x207D) return Unicode_Script_COMMON;
	if (codepoint == 0x207E) return Unicode_Script_COMMON;
	if (codepoint >= 0x2080 && codepoint <= 0x2089) return Unicode_Script_COMMON;
	if (codepoint >= 0x208A && codepoint <= 0x208C) return Unicode_Script_COMMON;
	if (codepoint == 0x208D) return Unicode_Script_COMMON;
	if (codepoint == 0x208E) return Unicode_Script_COMMON;
	if (codepoint >= 0x20A0 && codepoint <= 0x20BF) return Unicode_Script_COMMON;
	if (codepoint >= 0x2100 && codepoint <= 0x2101) return Unicode_Script_COMMON;
	if (codepoint == 0x2102) return Unicode_Script_COMMON;
	if (codepoint >= 0x2103 && codepoint <= 0x2106) return Unicode_Script_COMMON;
	if (codepoint == 0x2107) return Unicode_Script_COMMON;
	if (codepoint >= 0x2108 && codepoint <= 0x2109) return Unicode_Script_COMMON;
	if (codepoint >= 0x210A && codepoint <= 0x2113) return Unicode_Script_COMMON;
	if (codepoint == 0x2114) return Unicode_Script_COMMON;
	if (codepoint == 0x2115) return Unicode_Script_COMMON;
	if (codepoint >= 0x2116 && codepoint <= 0x2117) return Unicode_Script_COMMON;
	if (codepoint == 0x2118) return Unicode_Script_COMMON;
	if (codepoint >= 0x2119 && codepoint <= 0x211D) return Unicode_Script_COMMON;
	if (codepoint >= 0x211E && codepoint <= 0x2123) return Unicode_Script_COMMON;
	if (codepoint == 0x2124) return Unicode_Script_COMMON;
	if (codepoint == 0x2125) return Unicode_Script_COMMON;
	if (codepoint == 0x2127) return Unicode_Script_COMMON;
	if (codepoint == 0x2128) return Unicode_Script_COMMON;
	if (codepoint == 0x2129) return Unicode_Script_COMMON;
	if (codepoint >= 0x212C && codepoint <= 0x212D) return Unicode_Script_COMMON;
	if (codepoint == 0x212E) return Unicode_Script_COMMON;
	if (codepoint >= 0x212F && codepoint <= 0x2131) return Unicode_Script_COMMON;
	if (codepoint >= 0x2133 && codepoint <= 0x2134) return Unicode_Script_COMMON;
	if (codepoint >= 0x2135 && codepoint <= 0x2138) return Unicode_Script_COMMON;
	if (codepoint == 0x2139) return Unicode_Script_COMMON;
	if (codepoint >= 0x213A && codepoint <= 0x213B) return Unicode_Script_COMMON;
	if (codepoint >= 0x213C && codepoint <= 0x213F) return Unicode_Script_COMMON;
	if (codepoint >= 0x2140 && codepoint <= 0x2144) return Unicode_Script_COMMON;
	if (codepoint >= 0x2145 && codepoint <= 0x2149) return Unicode_Script_COMMON;
	if (codepoint == 0x214A) return Unicode_Script_COMMON;
	if (codepoint == 0x214B) return Unicode_Script_COMMON;
	if (codepoint >= 0x214C && codepoint <= 0x214D) return Unicode_Script_COMMON;
	if (codepoint == 0x214F) return Unicode_Script_COMMON;
	if (codepoint >= 0x2150 && codepoint <= 0x215F) return Unicode_Script_COMMON;
	if (codepoint == 0x2189) return Unicode_Script_COMMON;
	if (codepoint >= 0x218A && codepoint <= 0x218B) return Unicode_Script_COMMON;
	if (codepoint >= 0x2190 && codepoint <= 0x2194) return Unicode_Script_COMMON;
	if (codepoint >= 0x2195 && codepoint <= 0x2199) return Unicode_Script_COMMON;
	if (codepoint >= 0x219A && codepoint <= 0x219B) return Unicode_Script_COMMON;
	if (codepoint >= 0x219C && codepoint <= 0x219F) return Unicode_Script_COMMON;
	if (codepoint == 0x21A0) return Unicode_Script_COMMON;
	if (codepoint >= 0x21A1 && codepoint <= 0x21A2) return Unicode_Script_COMMON;
	if (codepoint == 0x21A3) return Unicode_Script_COMMON;
	if (codepoint >= 0x21A4 && codepoint <= 0x21A5) return Unicode_Script_COMMON;
	if (codepoint == 0x21A6) return Unicode_Script_COMMON;
	if (codepoint >= 0x21A7 && codepoint <= 0x21AD) return Unicode_Script_COMMON;
	if (codepoint == 0x21AE) return Unicode_Script_COMMON;
	if (codepoint >= 0x21AF && codepoint <= 0x21CD) return Unicode_Script_COMMON;
	if (codepoint >= 0x21CE && codepoint <= 0x21CF) return Unicode_Script_COMMON;
	if (codepoint >= 0x21D0 && codepoint <= 0x21D1) return Unicode_Script_COMMON;
	if (codepoint == 0x21D2) return Unicode_Script_COMMON;
	if (codepoint == 0x21D3) return Unicode_Script_COMMON;
	if (codepoint == 0x21D4) return Unicode_Script_COMMON;
	if (codepoint >= 0x21D5 && codepoint <= 0x21F3) return Unicode_Script_COMMON;
	if (codepoint >= 0x21F4 && codepoint <= 0x22FF) return Unicode_Script_COMMON;
	if (codepoint >= 0x2300 && codepoint <= 0x2307) return Unicode_Script_COMMON;
	if (codepoint == 0x2308) return Unicode_Script_COMMON;
	if (codepoint == 0x2309) return Unicode_Script_COMMON;
	if (codepoint == 0x230A) return Unicode_Script_COMMON;
	if (codepoint == 0x230B) return Unicode_Script_COMMON;
	if (codepoint >= 0x230C && codepoint <= 0x231F) return Unicode_Script_COMMON;
	if (codepoint >= 0x2320 && codepoint <= 0x2321) return Unicode_Script_COMMON;
	if (codepoint >= 0x2322 && codepoint <= 0x2328) return Unicode_Script_COMMON;
	if (codepoint == 0x2329) return Unicode_Script_COMMON;
	if (codepoint == 0x232A) return Unicode_Script_COMMON;
	if (codepoint >= 0x232B && codepoint <= 0x237B) return Unicode_Script_COMMON;
	if (codepoint == 0x237C) return Unicode_Script_COMMON;
	if (codepoint >= 0x237D && codepoint <= 0x239A) return Unicode_Script_COMMON;
	if (codepoint >= 0x239B && codepoint <= 0x23B3) return Unicode_Script_COMMON;
	if (codepoint >= 0x23B4 && codepoint <= 0x23DB) return Unicode_Script_COMMON;
	if (codepoint >= 0x23DC && codepoint <= 0x23E1) return Unicode_Script_COMMON;
	if (codepoint >= 0x23E2 && codepoint <= 0x2426) return Unicode_Script_COMMON;
	if (codepoint >= 0x2440 && codepoint <= 0x244A) return Unicode_Script_COMMON;
	if (codepoint >= 0x2460 && codepoint <= 0x249B) return Unicode_Script_COMMON;
	if (codepoint >= 0x249C && codepoint <= 0x24E9) return Unicode_Script_COMMON;
	if (codepoint >= 0x24EA && codepoint <= 0x24FF) return Unicode_Script_COMMON;
	if (codepoint >= 0x2500 && codepoint <= 0x25B6) return Unicode_Script_COMMON;
	if (codepoint == 0x25B7) return Unicode_Script_COMMON;
	if (codepoint >= 0x25B8 && codepoint <= 0x25C0) return Unicode_Script_COMMON;
	if (codepoint == 0x25C1) return Unicode_Script_COMMON;
	if (codepoint >= 0x25C2 && codepoint <= 0x25F7) return Unicode_Script_COMMON;
	if (codepoint >= 0x25F8 && codepoint <= 0x25FF) return Unicode_Script_COMMON;
	if (codepoint >= 0x2600 && codepoint <= 0x266E) return Unicode_Script_COMMON;
	if (codepoint == 0x266F) return Unicode_Script_COMMON;
	if (codepoint >= 0x2670 && codepoint <= 0x2767) return Unicode_Script_COMMON;
	if (codepoint == 0x2768) return Unicode_Script_COMMON;
	if (codepoint == 0x2769) return Unicode_Script_COMMON;
	if (codepoint == 0x276A) return Unicode_Script_COMMON;
	if (codepoint == 0x276B) return Unicode_Script_COMMON;
	if (codepoint == 0x276C) return Unicode_Script_COMMON;
	if (codepoint == 0x276D) return Unicode_Script_COMMON;
	if (codepoint == 0x276E) return Unicode_Script_COMMON;
	if (codepoint == 0x276F) return Unicode_Script_COMMON;
	if (codepoint == 0x2770) return Unicode_Script_COMMON;
	if (codepoint == 0x2771) return Unicode_Script_COMMON;
	if (codepoint == 0x2772) return Unicode_Script_COMMON;
	if (codepoint == 0x2773) return Unicode_Script_COMMON;
	if (codepoint == 0x2774) return Unicode_Script_COMMON;
	if (codepoint == 0x2775) return Unicode_Script_COMMON;
	if (codepoint >= 0x2776 && codepoint <= 0x2793) return Unicode_Script_COMMON;
	if (codepoint >= 0x2794 && codepoint <= 0x27BF) return Unicode_Script_COMMON;
	if (codepoint >= 0x27C0 && codepoint <= 0x27C4) return Unicode_Script_COMMON;
	if (codepoint == 0x27C5) return Unicode_Script_COMMON;
	if (codepoint == 0x27C6) return Unicode_Script_COMMON;
	if (codepoint >= 0x27C7 && codepoint <= 0x27E5) return Unicode_Script_COMMON;
	if (codepoint == 0x27E6) return Unicode_Script_COMMON;
	if (codepoint == 0x27E7) return Unicode_Script_COMMON;
	if (codepoint == 0x27E8) return Unicode_Script_COMMON;
	if (codepoint == 0x27E9) return Unicode_Script_COMMON;
	if (codepoint == 0x27EA) return Unicode_Script_COMMON;
	if (codepoint == 0x27EB) return Unicode_Script_COMMON;
	if (codepoint == 0x27EC) return Unicode_Script_COMMON;
	if (codepoint == 0x27ED) return Unicode_Script_COMMON;
	if (codepoint == 0x27EE) return Unicode_Script_COMMON;
	if (codepoint == 0x27EF) return Unicode_Script_COMMON;
	if (codepoint >= 0x27F0 && codepoint <= 0x27FF) return Unicode_Script_COMMON;
	if (codepoint >= 0x2900 && codepoint <= 0x2982) return Unicode_Script_COMMON;
	if (codepoint == 0x2983) return Unicode_Script_COMMON;
	if (codepoint == 0x2984) return Unicode_Script_COMMON;
	if (codepoint == 0x2985) return Unicode_Script_COMMON;
	if (codepoint == 0x2986) return Unicode_Script_COMMON;
	if (codepoint == 0x2987) return Unicode_Script_COMMON;
	if (codepoint == 0x2988) return Unicode_Script_COMMON;
	if (codepoint == 0x2989) return Unicode_Script_COMMON;
	if (codepoint == 0x298A) return Unicode_Script_COMMON;
	if (codepoint == 0x298B) return Unicode_Script_COMMON;
	if (codepoint == 0x298C) return Unicode_Script_COMMON;
	if (codepoint == 0x298D) return Unicode_Script_COMMON;
	if (codepoint == 0x298E) return Unicode_Script_COMMON;
	if (codepoint == 0x298F) return Unicode_Script_COMMON;
	if (codepoint == 0x2990) return Unicode_Script_COMMON;
	if (codepoint == 0x2991) return Unicode_Script_COMMON;
	if (codepoint == 0x2992) return Unicode_Script_COMMON;
	if (codepoint == 0x2993) return Unicode_Script_COMMON;
	if (codepoint == 0x2994) return Unicode_Script_COMMON;
	if (codepoint == 0x2995) return Unicode_Script_COMMON;
	if (codepoint == 0x2996) return Unicode_Script_COMMON;
	if (codepoint == 0x2997) return Unicode_Script_COMMON;
	if (codepoint == 0x2998) return Unicode_Script_COMMON;
	if (codepoint >= 0x2999 && codepoint <= 0x29D7) return Unicode_Script_COMMON;
	if (codepoint == 0x29D8) return Unicode_Script_COMMON;
	if (codepoint == 0x29D9) return Unicode_Script_COMMON;
	if (codepoint == 0x29DA) return Unicode_Script_COMMON;
	if (codepoint == 0x29DB) return Unicode_Script_COMMON;
	if (codepoint >= 0x29DC && codepoint <= 0x29FB) return Unicode_Script_COMMON;
	if (codepoint == 0x29FC) return Unicode_Script_COMMON;
	if (codepoint == 0x29FD) return Unicode_Script_COMMON;
	if (codepoint >= 0x29FE && codepoint <= 0x2AFF) return Unicode_Script_COMMON;
	if (codepoint >= 0x2B00 && codepoint <= 0x2B2F) return Unicode_Script_COMMON;
	if (codepoint >= 0x2B30 && codepoint <= 0x2B44) return Unicode_Script_COMMON;
	if (codepoint >= 0x2B45 && codepoint <= 0x2B46) return Unicode_Script_COMMON;
	if (codepoint >= 0x2B47 && codepoint <= 0x2B4C) return Unicode_Script_COMMON;
	if (codepoint >= 0x2B4D && codepoint <= 0x2B73) return Unicode_Script_COMMON;
	if (codepoint >= 0x2B76 && codepoint <= 0x2B95) return Unicode_Script_COMMON;
	if (codepoint >= 0x2B97 && codepoint <= 0x2BFF) return Unicode_Script_COMMON;
	if (codepoint >= 0x2E00 && codepoint <= 0x2E01) return Unicode_Script_COMMON;
	if (codepoint == 0x2E02) return Unicode_Script_COMMON;
	if (codepoint == 0x2E03) return Unicode_Script_COMMON;
	if (codepoint == 0x2E04) return Unicode_Script_COMMON;
	if (codepoint == 0x2E05) return Unicode_Script_COMMON;
	if (codepoint >= 0x2E06 && codepoint <= 0x2E08) return Unicode_Script_COMMON;
	if (codepoint == 0x2E09) return Unicode_Script_COMMON;
	if (codepoint == 0x2E0A) return Unicode_Script_COMMON;
	if (codepoint == 0x2E0B) return Unicode_Script_COMMON;
	if (codepoint == 0x2E0C) return Unicode_Script_COMMON;
	if (codepoint == 0x2E0D) return Unicode_Script_COMMON;
	if (codepoint >= 0x2E0E && codepoint <= 0x2E16) return Unicode_Script_COMMON;
	if (codepoint == 0x2E17) return Unicode_Script_COMMON;
	if (codepoint >= 0x2E18 && codepoint <= 0x2E19) return Unicode_Script_COMMON;
	if (codepoint == 0x2E1A) return Unicode_Script_COMMON;
	if (codepoint == 0x2E1B) return Unicode_Script_COMMON;
	if (codepoint == 0x2E1C) return Unicode_Script_COMMON;
	if (codepoint == 0x2E1D) return Unicode_Script_COMMON;
	if (codepoint >= 0x2E1E && codepoint <= 0x2E1F) return Unicode_Script_COMMON;
	if (codepoint == 0x2E20) return Unicode_Script_COMMON;
	if (codepoint == 0x2E21) return Unicode_Script_COMMON;
	if (codepoint == 0x2E22) return Unicode_Script_COMMON;
	if (codepoint == 0x2E23) return Unicode_Script_COMMON;
	if (codepoint == 0x2E24) return Unicode_Script_COMMON;
	if (codepoint == 0x2E25) return Unicode_Script_COMMON;
	if (codepoint == 0x2E26) return Unicode_Script_COMMON;
	if (codepoint == 0x2E27) return Unicode_Script_COMMON;
	if (codepoint == 0x2E28) return Unicode_Script_COMMON;
	if (codepoint == 0x2E29) return Unicode_Script_COMMON;
	if (codepoint >= 0x2E2A && codepoint <= 0x2E2E) return Unicode_Script_COMMON;
	if (codepoint == 0x2E2F) return Unicode_Script_COMMON;
	if (codepoint >= 0x2E30 && codepoint <= 0x2E39) return Unicode_Script_COMMON;
	if (codepoint >= 0x2E3A && codepoint <= 0x2E3B) return Unicode_Script_COMMON;
	if (codepoint >= 0x2E3C && codepoint <= 0x2E3F) return Unicode_Script_COMMON;
	if (codepoint == 0x2E40) return Unicode_Script_COMMON;
	if (codepoint == 0x2E41) return Unicode_Script_COMMON;
	if (codepoint == 0x2E42) return Unicode_Script_COMMON;
	if (codepoint >= 0x2E43 && codepoint <= 0x2E4F) return Unicode_Script_COMMON;
	if (codepoint >= 0x2E50 && codepoint <= 0x2E51) return Unicode_Script_COMMON;
	if (codepoint == 0x2E52) return Unicode_Script_COMMON;
	if (codepoint >= 0x2FF0 && codepoint <= 0x2FFB) return Unicode_Script_COMMON;
	if (codepoint == 0x3000) return Unicode_Script_COMMON;
	if (codepoint >= 0x3001 && codepoint <= 0x3003) return Unicode_Script_COMMON;
	if (codepoint == 0x3004) return Unicode_Script_COMMON;
	if (codepoint == 0x3006) return Unicode_Script_COMMON;
	if (codepoint == 0x3008) return Unicode_Script_COMMON;
	if (codepoint == 0x3009) return Unicode_Script_COMMON;
	if (codepoint == 0x300A) return Unicode_Script_COMMON;
	if (codepoint == 0x300B) return Unicode_Script_COMMON;
	if (codepoint == 0x300C) return Unicode_Script_COMMON;
	if (codepoint == 0x300D) return Unicode_Script_COMMON;
	if (codepoint == 0x300E) return Unicode_Script_COMMON;
	if (codepoint == 0x300F) return Unicode_Script_COMMON;
	if (codepoint == 0x3010) return Unicode_Script_COMMON;
	if (codepoint == 0x3011) return Unicode_Script_COMMON;
	if (codepoint >= 0x3012 && codepoint <= 0x3013) return Unicode_Script_COMMON;
	if (codepoint == 0x3014) return Unicode_Script_COMMON;
	if (codepoint == 0x3015) return Unicode_Script_COMMON;
	if (codepoint == 0x3016) return Unicode_Script_COMMON;
	if (codepoint == 0x3017) return Unicode_Script_COMMON;
	if (codepoint == 0x3018) return Unicode_Script_COMMON;
	if (codepoint == 0x3019) return Unicode_Script_COMMON;
	if (codepoint == 0x301A) return Unicode_Script_COMMON;
	if (codepoint == 0x301B) return Unicode_Script_COMMON;
	if (codepoint == 0x301C) return Unicode_Script_COMMON;
	if (codepoint == 0x301D) return Unicode_Script_COMMON;
	if (codepoint >= 0x301E && codepoint <= 0x301F) return Unicode_Script_COMMON;
	if (codepoint == 0x3020) return Unicode_Script_COMMON;
	if (codepoint == 0x3030) return Unicode_Script_COMMON;
	if (codepoint >= 0x3031 && codepoint <= 0x3035) return Unicode_Script_COMMON;
	if (codepoint >= 0x3036 && codepoint <= 0x3037) return Unicode_Script_COMMON;
	if (codepoint == 0x303C) return Unicode_Script_COMMON;
	if (codepoint == 0x303D) return Unicode_Script_COMMON;
	if (codepoint >= 0x303E && codepoint <= 0x303F) return Unicode_Script_COMMON;
	if (codepoint >= 0x309B && codepoint <= 0x309C) return Unicode_Script_COMMON;
	if (codepoint == 0x30A0) return Unicode_Script_COMMON;
	if (codepoint == 0x30FB) return Unicode_Script_COMMON;
	if (codepoint == 0x30FC) return Unicode_Script_COMMON;
	if (codepoint >= 0x3190 && codepoint <= 0x3191) return Unicode_Script_COMMON;
	if (codepoint >= 0x3192 && codepoint <= 0x3195) return Unicode_Script_COMMON;
	if (codepoint >= 0x3196 && codepoint <= 0x319F) return Unicode_Script_COMMON;
	if (codepoint >= 0x31C0 && codepoint <= 0x31E3) return Unicode_Script_COMMON;
	if (codepoint >= 0x3220 && codepoint <= 0x3229) return Unicode_Script_COMMON;
	if (codepoint >= 0x322A && codepoint <= 0x3247) return Unicode_Script_COMMON;
	if (codepoint >= 0x3248 && codepoint <= 0x324F) return Unicode_Script_COMMON;
	if (codepoint == 0x3250) return Unicode_Script_COMMON;
	if (codepoint >= 0x3251 && codepoint <= 0x325F) return Unicode_Script_COMMON;
	if (codepoint == 0x327F) return Unicode_Script_COMMON;
	if (codepoint >= 0x3280 && codepoint <= 0x3289) return Unicode_Script_COMMON;
	if (codepoint >= 0x328A && codepoint <= 0x32B0) return Unicode_Script_COMMON;
	if (codepoint >= 0x32B1 && codepoint <= 0x32BF) return Unicode_Script_COMMON;
	if (codepoint >= 0x32C0 && codepoint <= 0x32CF) return Unicode_Script_COMMON;
	if (codepoint == 0x32FF) return Unicode_Script_COMMON;
	if (codepoint >= 0x3358 && codepoint <= 0x33FF) return Unicode_Script_COMMON;
	if (codepoint >= 0x4DC0 && codepoint <= 0x4DFF) return Unicode_Script_COMMON;
	if (codepoint >= 0xA700 && codepoint <= 0xA716) return Unicode_Script_COMMON;
	if (codepoint >= 0xA717 && codepoint <= 0xA71F) return Unicode_Script_COMMON;
	if (codepoint >= 0xA720 && codepoint <= 0xA721) return Unicode_Script_COMMON;
	if (codepoint == 0xA788) return Unicode_Script_COMMON;
	if (codepoint >= 0xA789 && codepoint <= 0xA78A) return Unicode_Script_COMMON;
	if (codepoint >= 0xA830 && codepoint <= 0xA835) return Unicode_Script_COMMON;
	if (codepoint >= 0xA836 && codepoint <= 0xA837) return Unicode_Script_COMMON;
	if (codepoint == 0xA838) return Unicode_Script_COMMON;
	if (codepoint == 0xA839) return Unicode_Script_COMMON;
	if (codepoint == 0xA92E) return Unicode_Script_COMMON;
	if (codepoint == 0xA9CF) return Unicode_Script_COMMON;
	if (codepoint == 0xAB5B) return Unicode_Script_COMMON;
	if (codepoint >= 0xAB6A && codepoint <= 0xAB6B) return Unicode_Script_COMMON;
	if (codepoint == 0xFD3E) return Unicode_Script_COMMON;
	if (codepoint == 0xFD3F) return Unicode_Script_COMMON;
	if (codepoint >= 0xFE10 && codepoint <= 0xFE16) return Unicode_Script_COMMON;
	if (codepoint == 0xFE17) return Unicode_Script_COMMON;
	if (codepoint == 0xFE18) return Unicode_Script_COMMON;
	if (codepoint == 0xFE19) return Unicode_Script_COMMON;
	if (codepoint == 0xFE30) return Unicode_Script_COMMON;
	if (codepoint >= 0xFE31 && codepoint <= 0xFE32) return Unicode_Script_COMMON;
	if (codepoint >= 0xFE33 && codepoint <= 0xFE34) return Unicode_Script_COMMON;
	if (codepoint == 0xFE35) return Unicode_Script_COMMON;
	if (codepoint == 0xFE36) return Unicode_Script_COMMON;
	if (codepoint == 0xFE37) return Unicode_Script_COMMON;
	if (codepoint == 0xFE38) return Unicode_Script_COMMON;
	if (codepoint == 0xFE39) return Unicode_Script_COMMON;
	if (codepoint == 0xFE3A) return Unicode_Script_COMMON;
	if (codepoint == 0xFE3B) return Unicode_Script_COMMON;
	if (codepoint == 0xFE3C) return Unicode_Script_COMMON;
	if (codepoint == 0xFE3D) return Unicode_Script_COMMON;
	if (codepoint == 0xFE3E) return Unicode_Script_COMMON;
	if (codepoint == 0xFE3F) return Unicode_Script_COMMON;
	if (codepoint == 0xFE40) return Unicode_Script_COMMON;
	if (codepoint == 0xFE41) return Unicode_Script_COMMON;
	if (codepoint == 0xFE42) return Unicode_Script_COMMON;
	if (codepoint == 0xFE43) return Unicode_Script_COMMON;
	if (codepoint == 0xFE44) return Unicode_Script_COMMON;
	if (codepoint >= 0xFE45 && codepoint <= 0xFE46) return Unicode_Script_COMMON;
	if (codepoint == 0xFE47) return Unicode_Script_COMMON;
	if (codepoint == 0xFE48) return Unicode_Script_COMMON;
	if (codepoint >= 0xFE49 && codepoint <= 0xFE4C) return Unicode_Script_COMMON;
	if (codepoint >= 0xFE4D && codepoint <= 0xFE4F) return Unicode_Script_COMMON;
	if (codepoint >= 0xFE50 && codepoint <= 0xFE52) return Unicode_Script_COMMON;
	if (codepoint >= 0xFE54 && codepoint <= 0xFE57) return Unicode_Script_COMMON;
	if (codepoint == 0xFE58) return Unicode_Script_COMMON;
	if (codepoint == 0xFE59) return Unicode_Script_COMMON;
	if (codepoint == 0xFE5A) return Unicode_Script_COMMON;
	if (codepoint == 0xFE5B) return Unicode_Script_COMMON;
	if (codepoint == 0xFE5C) return Unicode_Script_COMMON;
	if (codepoint == 0xFE5D) return Unicode_Script_COMMON;
	if (codepoint == 0xFE5E) return Unicode_Script_COMMON;
	if (codepoint >= 0xFE5F && codepoint <= 0xFE61) return Unicode_Script_COMMON;
	if (codepoint == 0xFE62) return Unicode_Script_COMMON;
	if (codepoint == 0xFE63) return Unicode_Script_COMMON;
	if (codepoint >= 0xFE64 && codepoint <= 0xFE66) return Unicode_Script_COMMON;
	if (codepoint == 0xFE68) return Unicode_Script_COMMON;
	if (codepoint == 0xFE69) return Unicode_Script_COMMON;
	if (codepoint >= 0xFE6A && codepoint <= 0xFE6B) return Unicode_Script_COMMON;
	if (codepoint == 0xFEFF) return Unicode_Script_COMMON;
	if (codepoint >= 0xFF01 && codepoint <= 0xFF03) return Unicode_Script_COMMON;
	if (codepoint == 0xFF04) return Unicode_Script_COMMON;
	if (codepoint >= 0xFF05 && codepoint <= 0xFF07) return Unicode_Script_COMMON;
	if (codepoint == 0xFF08) return Unicode_Script_COMMON;
	if (codepoint == 0xFF09) return Unicode_Script_COMMON;
	if (codepoint == 0xFF0A) return Unicode_Script_COMMON;
	if (codepoint == 0xFF0B) return Unicode_Script_COMMON;
	if (codepoint == 0xFF0C) return Unicode_Script_COMMON;
	if (codepoint == 0xFF0D) return Unicode_Script_COMMON;
	if (codepoint >= 0xFF0E && codepoint <= 0xFF0F) return Unicode_Script_COMMON;
	if (codepoint >= 0xFF10 && codepoint <= 0xFF19) return Unicode_Script_COMMON;
	if (codepoint >= 0xFF1A && codepoint <= 0xFF1B) return Unicode_Script_COMMON;
	if (codepoint >= 0xFF1C && codepoint <= 0xFF1E) return Unicode_Script_COMMON;
	if (codepoint >= 0xFF1F && codepoint <= 0xFF20) return Unicode_Script_COMMON;
	if (codepoint == 0xFF3B) return Unicode_Script_COMMON;
	if (codepoint == 0xFF3C) return Unicode_Script_COMMON;
	if (codepoint == 0xFF3D) return Unicode_Script_COMMON;
	if (codepoint == 0xFF3E) return Unicode_Script_COMMON;
	if (codepoint == 0xFF3F) return Unicode_Script_COMMON;
	if (codepoint == 0xFF40) return Unicode_Script_COMMON;
	if (codepoint == 0xFF5B) return Unicode_Script_COMMON;
	if (codepoint == 0xFF5C) return Unicode_Script_COMMON;
	if (codepoint == 0xFF5D) return Unicode_Script_COMMON;
	if (codepoint == 0xFF5E) return Unicode_Script_COMMON;
	if (codepoint == 0xFF5F) return Unicode_Script_COMMON;
	if (codepoint == 0xFF60) return Unicode_Script_COMMON;
	if (codepoint == 0xFF61) return Unicode_Script_COMMON;
	if (codepoint == 0xFF62) return Unicode_Script_COMMON;
	if (codepoint == 0xFF63) return Unicode_Script_COMMON;
	if (codepoint >= 0xFF64 && codepoint <= 0xFF65) return Unicode_Script_COMMON;
	if (codepoint == 0xFF70) return Unicode_Script_COMMON;
	if (codepoint >= 0xFF9E && codepoint <= 0xFF9F) return Unicode_Script_COMMON;
	if (codepoint >= 0xFFE0 && codepoint <= 0xFFE1) return Unicode_Script_COMMON;
	if (codepoint == 0xFFE2) return Unicode_Script_COMMON;
	if (codepoint == 0xFFE3) return Unicode_Script_COMMON;
	if (codepoint == 0xFFE4) return Unicode_Script_COMMON;
	if (codepoint >= 0xFFE5 && codepoint <= 0xFFE6) return Unicode_Script_COMMON;
	if (codepoint == 0xFFE8) return Unicode_Script_COMMON;
	if (codepoint >= 0xFFE9 && codepoint <= 0xFFEC) return Unicode_Script_COMMON;
	if (codepoint >= 0xFFED && codepoint <= 0xFFEE) return Unicode_Script_COMMON;
	if (codepoint >= 0xFFF9 && codepoint <= 0xFFFB) return Unicode_Script_COMMON;
	if (codepoint >= 0xFFFC && codepoint <= 0xFFFD) return Unicode_Script_COMMON;
	if (codepoint >= 0x10100 && codepoint <= 0x10102) return Unicode_Script_COMMON;
	if (codepoint >= 0x10107 && codepoint <= 0x10133) return Unicode_Script_COMMON;
	if (codepoint >= 0x10137 && codepoint <= 0x1013F) return Unicode_Script_COMMON;
	if (codepoint >= 0x10190 && codepoint <= 0x1019C) return Unicode_Script_COMMON;
	if (codepoint >= 0x101D0 && codepoint <= 0x101FC) return Unicode_Script_COMMON;
	if (codepoint >= 0x102E1 && codepoint <= 0x102FB) return Unicode_Script_COMMON;
	if (codepoint == 0x16FE2) return Unicode_Script_COMMON;
	if (codepoint == 0x16FE3) return Unicode_Script_COMMON;
	if (codepoint >= 0x1BCA0 && codepoint <= 0x1BCA3) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D000 && codepoint <= 0x1D0F5) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D100 && codepoint <= 0x1D126) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D129 && codepoint <= 0x1D164) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D165 && codepoint <= 0x1D166) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D16A && codepoint <= 0x1D16C) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D16D && codepoint <= 0x1D172) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D173 && codepoint <= 0x1D17A) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D183 && codepoint <= 0x1D184) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D18C && codepoint <= 0x1D1A9) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D1AE && codepoint <= 0x1D1E8) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D2E0 && codepoint <= 0x1D2F3) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D300 && codepoint <= 0x1D356) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D360 && codepoint <= 0x1D378) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D400 && codepoint <= 0x1D454) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D456 && codepoint <= 0x1D49C) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D49E && codepoint <= 0x1D49F) return Unicode_Script_COMMON;
	if (codepoint == 0x1D4A2) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D4A5 && codepoint <= 0x1D4A6) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D4A9 && codepoint <= 0x1D4AC) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D4AE && codepoint <= 0x1D4B9) return Unicode_Script_COMMON;
	if (codepoint == 0x1D4BB) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D4BD && codepoint <= 0x1D4C3) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D4C5 && codepoint <= 0x1D505) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D507 && codepoint <= 0x1D50A) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D50D && codepoint <= 0x1D514) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D516 && codepoint <= 0x1D51C) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D51E && codepoint <= 0x1D539) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D53B && codepoint <= 0x1D53E) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D540 && codepoint <= 0x1D544) return Unicode_Script_COMMON;
	if (codepoint == 0x1D546) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D54A && codepoint <= 0x1D550) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D552 && codepoint <= 0x1D6A5) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D6A8 && codepoint <= 0x1D6C0) return Unicode_Script_COMMON;
	if (codepoint == 0x1D6C1) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D6C2 && codepoint <= 0x1D6DA) return Unicode_Script_COMMON;
	if (codepoint == 0x1D6DB) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D6DC && codepoint <= 0x1D6FA) return Unicode_Script_COMMON;
	if (codepoint == 0x1D6FB) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D6FC && codepoint <= 0x1D714) return Unicode_Script_COMMON;
	if (codepoint == 0x1D715) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D716 && codepoint <= 0x1D734) return Unicode_Script_COMMON;
	if (codepoint == 0x1D735) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D736 && codepoint <= 0x1D74E) return Unicode_Script_COMMON;
	if (codepoint == 0x1D74F) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D750 && codepoint <= 0x1D76E) return Unicode_Script_COMMON;
	if (codepoint == 0x1D76F) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D770 && codepoint <= 0x1D788) return Unicode_Script_COMMON;
	if (codepoint == 0x1D789) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D78A && codepoint <= 0x1D7A8) return Unicode_Script_COMMON;
	if (codepoint == 0x1D7A9) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D7AA && codepoint <= 0x1D7C2) return Unicode_Script_COMMON;
	if (codepoint == 0x1D7C3) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D7C4 && codepoint <= 0x1D7CB) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D7CE && codepoint <= 0x1D7FF) return Unicode_Script_COMMON;
	if (codepoint >= 0x1EC71 && codepoint <= 0x1ECAB) return Unicode_Script_COMMON;
	if (codepoint == 0x1ECAC) return Unicode_Script_COMMON;
	if (codepoint >= 0x1ECAD && codepoint <= 0x1ECAF) return Unicode_Script_COMMON;
	if (codepoint == 0x1ECB0) return Unicode_Script_COMMON;
	if (codepoint >= 0x1ECB1 && codepoint <= 0x1ECB4) return Unicode_Script_COMMON;
	if (codepoint >= 0x1ED01 && codepoint <= 0x1ED2D) return Unicode_Script_COMMON;
	if (codepoint == 0x1ED2E) return Unicode_Script_COMMON;
	if (codepoint >= 0x1ED2F && codepoint <= 0x1ED3D) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F000 && codepoint <= 0x1F02B) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F030 && codepoint <= 0x1F093) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F0A0 && codepoint <= 0x1F0AE) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F0B1 && codepoint <= 0x1F0BF) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F0C1 && codepoint <= 0x1F0CF) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F0D1 && codepoint <= 0x1F0F5) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F100 && codepoint <= 0x1F10C) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F10D && codepoint <= 0x1F1AD) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F1E6 && codepoint <= 0x1F1FF) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F201 && codepoint <= 0x1F202) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F210 && codepoint <= 0x1F23B) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F240 && codepoint <= 0x1F248) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F250 && codepoint <= 0x1F251) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F260 && codepoint <= 0x1F265) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F300 && codepoint <= 0x1F3FA) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F3FB && codepoint <= 0x1F3FF) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F400 && codepoint <= 0x1F6D7) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F6E0 && codepoint <= 0x1F6EC) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F6F0 && codepoint <= 0x1F6FC) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F700 && codepoint <= 0x1F773) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F780 && codepoint <= 0x1F7D8) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F7E0 && codepoint <= 0x1F7EB) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F800 && codepoint <= 0x1F80B) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F810 && codepoint <= 0x1F847) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F850 && codepoint <= 0x1F859) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F860 && codepoint <= 0x1F887) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F890 && codepoint <= 0x1F8AD) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F8B0 && codepoint <= 0x1F8B1) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F900 && codepoint <= 0x1F978) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F97A && codepoint <= 0x1F9CB) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F9CD && codepoint <= 0x1FA53) return Unicode_Script_COMMON;
	if (codepoint >= 0x1FA60 && codepoint <= 0x1FA6D) return Unicode_Script_COMMON;
	if (codepoint >= 0x1FA70 && codepoint <= 0x1FA74) return Unicode_Script_COMMON;
	if (codepoint >= 0x1FA78 && codepoint <= 0x1FA7A) return Unicode_Script_COMMON;
	if (codepoint >= 0x1FA80 && codepoint <= 0x1FA86) return Unicode_Script_COMMON;
	if (codepoint >= 0x1FA90 && codepoint <= 0x1FAA8) return Unicode_Script_COMMON;
	if (codepoint >= 0x1FAB0 && codepoint <= 0x1FAB6) return Unicode_Script_COMMON;
	if (codepoint >= 0x1FAC0 && codepoint <= 0x1FAC2) return Unicode_Script_COMMON;
	if (codepoint >= 0x1FAD0 && codepoint <= 0x1FAD6) return Unicode_Script_COMMON;
	if (codepoint >= 0x1FB00 && codepoint <= 0x1FB92) return Unicode_Script_COMMON;
	if (codepoint >= 0x1FB94 && codepoint <= 0x1FBCA) return Unicode_Script_COMMON;
	if (codepoint >= 0x1FBF0 && codepoint <= 0x1FBF9) return Unicode_Script_COMMON;
	if (codepoint == 0xE0001) return Unicode_Script_COMMON;
	if (codepoint >= 0xE0020 && codepoint <= 0xE007F) return Unicode_Script_COMMON;
	if (codepoint >= 0x0041 && codepoint <= 0x005A) return Unicode_Script_LATIN;
	if (codepoint >= 0x0061 && codepoint <= 0x007A) return Unicode_Script_LATIN;
	if (codepoint == 0x00AA) return Unicode_Script_LATIN;
	if (codepoint == 0x00BA) return Unicode_Script_LATIN;
	if (codepoint >= 0x00C0 && codepoint <= 0x00D6) return Unicode_Script_LATIN;
	if (codepoint >= 0x00D8 && codepoint <= 0x00F6) return Unicode_Script_LATIN;
	if (codepoint >= 0x00F8 && codepoint <= 0x01BA) return Unicode_Script_LATIN;
	if (codepoint == 0x01BB) return Unicode_Script_LATIN;
	if (codepoint >= 0x01BC && codepoint <= 0x01BF) return Unicode_Script_LATIN;
	if (codepoint >= 0x01C0 && codepoint <= 0x01C3) return Unicode_Script_LATIN;
	if (codepoint >= 0x01C4 && codepoint <= 0x0293) return Unicode_Script_LATIN;
	if (codepoint == 0x0294) return Unicode_Script_LATIN;
	if (codepoint >= 0x0295 && codepoint <= 0x02AF) return Unicode_Script_LATIN;
	if (codepoint >= 0x02B0 && codepoint <= 0x02B8) return Unicode_Script_LATIN;
	if (codepoint >= 0x02E0 && codepoint <= 0x02E4) return Unicode_Script_LATIN;
	if (codepoint >= 0x1D00 && codepoint <= 0x1D25) return Unicode_Script_LATIN;
	if (codepoint >= 0x1D2C && codepoint <= 0x1D5C) return Unicode_Script_LATIN;
	if (codepoint >= 0x1D62 && codepoint <= 0x1D65) return Unicode_Script_LATIN;
	if (codepoint >= 0x1D6B && codepoint <= 0x1D77) return Unicode_Script_LATIN;
	if (codepoint >= 0x1D79 && codepoint <= 0x1D9A) return Unicode_Script_LATIN;
	if (codepoint >= 0x1D9B && codepoint <= 0x1DBE) return Unicode_Script_LATIN;
	if (codepoint >= 0x1E00 && codepoint <= 0x1EFF) return Unicode_Script_LATIN;
	if (codepoint == 0x2071) return Unicode_Script_LATIN;
	if (codepoint == 0x207F) return Unicode_Script_LATIN;
	if (codepoint >= 0x2090 && codepoint <= 0x209C) return Unicode_Script_LATIN;
	if (codepoint >= 0x212A && codepoint <= 0x212B) return Unicode_Script_LATIN;
	if (codepoint == 0x2132) return Unicode_Script_LATIN;
	if (codepoint == 0x214E) return Unicode_Script_LATIN;
	if (codepoint >= 0x2160 && codepoint <= 0x2182) return Unicode_Script_LATIN;
	if (codepoint >= 0x2183 && codepoint <= 0x2184) return Unicode_Script_LATIN;
	if (codepoint >= 0x2185 && codepoint <= 0x2188) return Unicode_Script_LATIN;
	if (codepoint >= 0x2C60 && codepoint <= 0x2C7B) return Unicode_Script_LATIN;
	if (codepoint >= 0x2C7C && codepoint <= 0x2C7D) return Unicode_Script_LATIN;
	if (codepoint >= 0x2C7E && codepoint <= 0x2C7F) return Unicode_Script_LATIN;
	if (codepoint >= 0xA722 && codepoint <= 0xA76F) return Unicode_Script_LATIN;
	if (codepoint == 0xA770) return Unicode_Script_LATIN;
	if (codepoint >= 0xA771 && codepoint <= 0xA787) return Unicode_Script_LATIN;
	if (codepoint >= 0xA78B && codepoint <= 0xA78E) return Unicode_Script_LATIN;
	if (codepoint == 0xA78F) return Unicode_Script_LATIN;
	if (codepoint >= 0xA790 && codepoint <= 0xA7BF) return Unicode_Script_LATIN;
	if (codepoint >= 0xA7C2 && codepoint <= 0xA7CA) return Unicode_Script_LATIN;
	if (codepoint >= 0xA7F5 && codepoint <= 0xA7F6) return Unicode_Script_LATIN;
	if (codepoint == 0xA7F7) return Unicode_Script_LATIN;
	if (codepoint >= 0xA7F8 && codepoint <= 0xA7F9) return Unicode_Script_LATIN;
	if (codepoint == 0xA7FA) return Unicode_Script_LATIN;
	if (codepoint >= 0xA7FB && codepoint <= 0xA7FF) return Unicode_Script_LATIN;
	if (codepoint >= 0xAB30 && codepoint <= 0xAB5A) return Unicode_Script_LATIN;
	if (codepoint >= 0xAB5C && codepoint <= 0xAB5F) return Unicode_Script_LATIN;
	if (codepoint >= 0xAB60 && codepoint <= 0xAB64) return Unicode_Script_LATIN;
	if (codepoint >= 0xAB66 && codepoint <= 0xAB68) return Unicode_Script_LATIN;
	if (codepoint == 0xAB69) return Unicode_Script_LATIN;
	if (codepoint >= 0xFB00 && codepoint <= 0xFB06) return Unicode_Script_LATIN;
	if (codepoint >= 0xFF21 && codepoint <= 0xFF3A) return Unicode_Script_LATIN;
	if (codepoint >= 0xFF41 && codepoint <= 0xFF5A) return Unicode_Script_LATIN;
	if (codepoint >= 0x0370 && codepoint <= 0x0373) return Unicode_Script_GREEK;
	if (codepoint == 0x0375) return Unicode_Script_GREEK;
	if (codepoint >= 0x0376 && codepoint <= 0x0377) return Unicode_Script_GREEK;
	if (codepoint == 0x037A) return Unicode_Script_GREEK;
	if (codepoint >= 0x037B && codepoint <= 0x037D) return Unicode_Script_GREEK;
	if (codepoint == 0x037F) return Unicode_Script_GREEK;
	if (codepoint == 0x0384) return Unicode_Script_GREEK;
	if (codepoint == 0x0386) return Unicode_Script_GREEK;
	if (codepoint >= 0x0388 && codepoint <= 0x038A) return Unicode_Script_GREEK;
	if (codepoint == 0x038C) return Unicode_Script_GREEK;
	if (codepoint >= 0x038E && codepoint <= 0x03A1) return Unicode_Script_GREEK;
	if (codepoint >= 0x03A3 && codepoint <= 0x03E1) return Unicode_Script_GREEK;
	if (codepoint >= 0x03F0 && codepoint <= 0x03F5) return Unicode_Script_GREEK;
	if (codepoint == 0x03F6) return Unicode_Script_GREEK;
	if (codepoint >= 0x03F7 && codepoint <= 0x03FF) return Unicode_Script_GREEK;
	if (codepoint >= 0x1D26 && codepoint <= 0x1D2A) return Unicode_Script_GREEK;
	if (codepoint >= 0x1D5D && codepoint <= 0x1D61) return Unicode_Script_GREEK;
	if (codepoint >= 0x1D66 && codepoint <= 0x1D6A) return Unicode_Script_GREEK;
	if (codepoint == 0x1DBF) return Unicode_Script_GREEK;
	if (codepoint >= 0x1F00 && codepoint <= 0x1F15) return Unicode_Script_GREEK;
	if (codepoint >= 0x1F18 && codepoint <= 0x1F1D) return Unicode_Script_GREEK;
	if (codepoint >= 0x1F20 && codepoint <= 0x1F45) return Unicode_Script_GREEK;
	if (codepoint >= 0x1F48 && codepoint <= 0x1F4D) return Unicode_Script_GREEK;
	if (codepoint >= 0x1F50 && codepoint <= 0x1F57) return Unicode_Script_GREEK;
	if (codepoint == 0x1F59) return Unicode_Script_GREEK;
	if (codepoint == 0x1F5B) return Unicode_Script_GREEK;
	if (codepoint == 0x1F5D) return Unicode_Script_GREEK;
	if (codepoint >= 0x1F5F && codepoint <= 0x1F7D) return Unicode_Script_GREEK;
	if (codepoint >= 0x1F80 && codepoint <= 0x1FB4) return Unicode_Script_GREEK;
	if (codepoint >= 0x1FB6 && codepoint <= 0x1FBC) return Unicode_Script_GREEK;
	if (codepoint == 0x1FBD) return Unicode_Script_GREEK;
	if (codepoint == 0x1FBE) return Unicode_Script_GREEK;
	if (codepoint >= 0x1FBF && codepoint <= 0x1FC1) return Unicode_Script_GREEK;
	if (codepoint >= 0x1FC2 && codepoint <= 0x1FC4) return Unicode_Script_GREEK;
	if (codepoint >= 0x1FC6 && codepoint <= 0x1FCC) return Unicode_Script_GREEK;
	if (codepoint >= 0x1FCD && codepoint <= 0x1FCF) return Unicode_Script_GREEK;
	if (codepoint >= 0x1FD0 && codepoint <= 0x1FD3) return Unicode_Script_GREEK;
	if (codepoint >= 0x1FD6 && codepoint <= 0x1FDB) return Unicode_Script_GREEK;
	if (codepoint >= 0x1FDD && codepoint <= 0x1FDF) return Unicode_Script_GREEK;
	if (codepoint >= 0x1FE0 && codepoint <= 0x1FEC) return Unicode_Script_GREEK;
	if (codepoint >= 0x1FED && codepoint <= 0x1FEF) return Unicode_Script_GREEK;
	if (codepoint >= 0x1FF2 && codepoint <= 0x1FF4) return Unicode_Script_GREEK;
	if (codepoint >= 0x1FF6 && codepoint <= 0x1FFC) return Unicode_Script_GREEK;
	if (codepoint >= 0x1FFD && codepoint <= 0x1FFE) return Unicode_Script_GREEK;
	if (codepoint == 0x2126) return Unicode_Script_GREEK;
	if (codepoint == 0xAB65) return Unicode_Script_GREEK;
	if (codepoint >= 0x10140 && codepoint <= 0x10174) return Unicode_Script_GREEK;
	if (codepoint >= 0x10175 && codepoint <= 0x10178) return Unicode_Script_GREEK;
	if (codepoint >= 0x10179 && codepoint <= 0x10189) return Unicode_Script_GREEK;
	if (codepoint >= 0x1018A && codepoint <= 0x1018B) return Unicode_Script_GREEK;
	if (codepoint >= 0x1018C && codepoint <= 0x1018E) return Unicode_Script_GREEK;
	if (codepoint == 0x101A0) return Unicode_Script_GREEK;
	if (codepoint >= 0x1D200 && codepoint <= 0x1D241) return Unicode_Script_GREEK;
	if (codepoint >= 0x1D242 && codepoint <= 0x1D244) return Unicode_Script_GREEK;
	if (codepoint == 0x1D245) return Unicode_Script_GREEK;
	if (codepoint >= 0x0400 && codepoint <= 0x0481) return Unicode_Script_CYRILLIC;
	if (codepoint == 0x0482) return Unicode_Script_CYRILLIC;
	if (codepoint >= 0x0483 && codepoint <= 0x0484) return Unicode_Script_CYRILLIC;
	if (codepoint == 0x0487) return Unicode_Script_CYRILLIC;
	if (codepoint >= 0x0488 && codepoint <= 0x0489) return Unicode_Script_CYRILLIC;
	if (codepoint >= 0x048A && codepoint <= 0x052F) return Unicode_Script_CYRILLIC;
	if (codepoint >= 0x1C80 && codepoint <= 0x1C88) return Unicode_Script_CYRILLIC;
	if (codepoint == 0x1D2B) return Unicode_Script_CYRILLIC;
	if (codepoint == 0x1D78) return Unicode_Script_CYRILLIC;
	if (codepoint >= 0x2DE0 && codepoint <= 0x2DFF) return Unicode_Script_CYRILLIC;
	if (codepoint >= 0xA640 && codepoint <= 0xA66D) return Unicode_Script_CYRILLIC;
	if (codepoint == 0xA66E) return Unicode_Script_CYRILLIC;
	if (codepoint == 0xA66F) return Unicode_Script_CYRILLIC;
	if (codepoint >= 0xA670 && codepoint <= 0xA672) return Unicode_Script_CYRILLIC;
	if (codepoint == 0xA673) return Unicode_Script_CYRILLIC;
	if (codepoint >= 0xA674 && codepoint <= 0xA67D) return Unicode_Script_CYRILLIC;
	if (codepoint == 0xA67E) return Unicode_Script_CYRILLIC;
	if (codepoint == 0xA67F) return Unicode_Script_CYRILLIC;
	if (codepoint >= 0xA680 && codepoint <= 0xA69B) return Unicode_Script_CYRILLIC;
	if (codepoint >= 0xA69C && codepoint <= 0xA69D) return Unicode_Script_CYRILLIC;
	if (codepoint >= 0xA69E && codepoint <= 0xA69F) return Unicode_Script_CYRILLIC;
	if (codepoint >= 0xFE2E && codepoint <= 0xFE2F) return Unicode_Script_CYRILLIC;
	if (codepoint >= 0x0531 && codepoint <= 0x0556) return Unicode_Script_ARMENIAN;
	if (codepoint == 0x0559) return Unicode_Script_ARMENIAN;
	if (codepoint >= 0x055A && codepoint <= 0x055F) return Unicode_Script_ARMENIAN;
	if (codepoint >= 0x0560 && codepoint <= 0x0588) return Unicode_Script_ARMENIAN;
	if (codepoint == 0x0589) return Unicode_Script_ARMENIAN;
	if (codepoint == 0x058A) return Unicode_Script_ARMENIAN;
	if (codepoint >= 0x058D && codepoint <= 0x058E) return Unicode_Script_ARMENIAN;
	if (codepoint == 0x058F) return Unicode_Script_ARMENIAN;
	if (codepoint >= 0xFB13 && codepoint <= 0xFB17) return Unicode_Script_ARMENIAN;
	if (codepoint >= 0x0591 && codepoint <= 0x05BD) return Unicode_Script_HEBREW;
	if (codepoint == 0x05BE) return Unicode_Script_HEBREW;
	if (codepoint == 0x05BF) return Unicode_Script_HEBREW;
	if (codepoint == 0x05C0) return Unicode_Script_HEBREW;
	if (codepoint >= 0x05C1 && codepoint <= 0x05C2) return Unicode_Script_HEBREW;
	if (codepoint == 0x05C3) return Unicode_Script_HEBREW;
	if (codepoint >= 0x05C4 && codepoint <= 0x05C5) return Unicode_Script_HEBREW;
	if (codepoint == 0x05C6) return Unicode_Script_HEBREW;
	if (codepoint == 0x05C7) return Unicode_Script_HEBREW;
	if (codepoint >= 0x05D0 && codepoint <= 0x05EA) return Unicode_Script_HEBREW;
	if (codepoint >= 0x05EF && codepoint <= 0x05F2) return Unicode_Script_HEBREW;
	if (codepoint >= 0x05F3 && codepoint <= 0x05F4) return Unicode_Script_HEBREW;
	if (codepoint == 0xFB1D) return Unicode_Script_HEBREW;
	if (codepoint == 0xFB1E) return Unicode_Script_HEBREW;
	if (codepoint >= 0xFB1F && codepoint <= 0xFB28) return Unicode_Script_HEBREW;
	if (codepoint == 0xFB29) return Unicode_Script_HEBREW;
	if (codepoint >= 0xFB2A && codepoint <= 0xFB36) return Unicode_Script_HEBREW;
	if (codepoint >= 0xFB38 && codepoint <= 0xFB3C) return Unicode_Script_HEBREW;
	if (codepoint == 0xFB3E) return Unicode_Script_HEBREW;
	if (codepoint >= 0xFB40 && codepoint <= 0xFB41) return Unicode_Script_HEBREW;
	if (codepoint >= 0xFB43 && codepoint <= 0xFB44) return Unicode_Script_HEBREW;
	if (codepoint >= 0xFB46 && codepoint <= 0xFB4F) return Unicode_Script_HEBREW;
	if (codepoint >= 0x0600 && codepoint <= 0x0604) return Unicode_Script_ARABIC;
	if (codepoint >= 0x0606 && codepoint <= 0x0608) return Unicode_Script_ARABIC;
	if (codepoint >= 0x0609 && codepoint <= 0x060A) return Unicode_Script_ARABIC;
	if (codepoint == 0x060B) return Unicode_Script_ARABIC;
	if (codepoint == 0x060D) return Unicode_Script_ARABIC;
	if (codepoint >= 0x060E && codepoint <= 0x060F) return Unicode_Script_ARABIC;
	if (codepoint >= 0x0610 && codepoint <= 0x061A) return Unicode_Script_ARABIC;
	if (codepoint == 0x061C) return Unicode_Script_ARABIC;
	if (codepoint == 0x061E) return Unicode_Script_ARABIC;
	if (codepoint >= 0x0620 && codepoint <= 0x063F) return Unicode_Script_ARABIC;
	if (codepoint >= 0x0641 && codepoint <= 0x064A) return Unicode_Script_ARABIC;
	if (codepoint >= 0x0656 && codepoint <= 0x065F) return Unicode_Script_ARABIC;
	if (codepoint >= 0x0660 && codepoint <= 0x0669) return Unicode_Script_ARABIC;
	if (codepoint >= 0x066A && codepoint <= 0x066D) return Unicode_Script_ARABIC;
	if (codepoint >= 0x066E && codepoint <= 0x066F) return Unicode_Script_ARABIC;
	if (codepoint >= 0x0671 && codepoint <= 0x06D3) return Unicode_Script_ARABIC;
	if (codepoint == 0x06D4) return Unicode_Script_ARABIC;
	if (codepoint == 0x06D5) return Unicode_Script_ARABIC;
	if (codepoint >= 0x06D6 && codepoint <= 0x06DC) return Unicode_Script_ARABIC;
	if (codepoint == 0x06DE) return Unicode_Script_ARABIC;
	if (codepoint >= 0x06DF && codepoint <= 0x06E4) return Unicode_Script_ARABIC;
	if (codepoint >= 0x06E5 && codepoint <= 0x06E6) return Unicode_Script_ARABIC;
	if (codepoint >= 0x06E7 && codepoint <= 0x06E8) return Unicode_Script_ARABIC;
	if (codepoint == 0x06E9) return Unicode_Script_ARABIC;
	if (codepoint >= 0x06EA && codepoint <= 0x06ED) return Unicode_Script_ARABIC;
	if (codepoint >= 0x06EE && codepoint <= 0x06EF) return Unicode_Script_ARABIC;
	if (codepoint >= 0x06F0 && codepoint <= 0x06F9) return Unicode_Script_ARABIC;
	if (codepoint >= 0x06FA && codepoint <= 0x06FC) return Unicode_Script_ARABIC;
	if (codepoint >= 0x06FD && codepoint <= 0x06FE) return Unicode_Script_ARABIC;
	if (codepoint == 0x06FF) return Unicode_Script_ARABIC;
	if (codepoint >= 0x0750 && codepoint <= 0x077F) return Unicode_Script_ARABIC;
	if (codepoint >= 0x08A0 && codepoint <= 0x08B4) return Unicode_Script_ARABIC;
	if (codepoint >= 0x08B6 && codepoint <= 0x08C7) return Unicode_Script_ARABIC;
	if (codepoint >= 0x08D3 && codepoint <= 0x08E1) return Unicode_Script_ARABIC;
	if (codepoint >= 0x08E3 && codepoint <= 0x08FF) return Unicode_Script_ARABIC;
	if (codepoint >= 0xFB50 && codepoint <= 0xFBB1) return Unicode_Script_ARABIC;
	if (codepoint >= 0xFBB2 && codepoint <= 0xFBC1) return Unicode_Script_ARABIC;
	if (codepoint >= 0xFBD3 && codepoint <= 0xFD3D) return Unicode_Script_ARABIC;
	if (codepoint >= 0xFD50 && codepoint <= 0xFD8F) return Unicode_Script_ARABIC;
	if (codepoint >= 0xFD92 && codepoint <= 0xFDC7) return Unicode_Script_ARABIC;
	if (codepoint >= 0xFDF0 && codepoint <= 0xFDFB) return Unicode_Script_ARABIC;
	if (codepoint == 0xFDFC) return Unicode_Script_ARABIC;
	if (codepoint == 0xFDFD) return Unicode_Script_ARABIC;
	if (codepoint >= 0xFE70 && codepoint <= 0xFE74) return Unicode_Script_ARABIC;
	if (codepoint >= 0xFE76 && codepoint <= 0xFEFC) return Unicode_Script_ARABIC;
	if (codepoint >= 0x10E60 && codepoint <= 0x10E7E) return Unicode_Script_ARABIC;
	if (codepoint >= 0x1EE00 && codepoint <= 0x1EE03) return Unicode_Script_ARABIC;
	if (codepoint >= 0x1EE05 && codepoint <= 0x1EE1F) return Unicode_Script_ARABIC;
	if (codepoint >= 0x1EE21 && codepoint <= 0x1EE22) return Unicode_Script_ARABIC;
	if (codepoint == 0x1EE24) return Unicode_Script_ARABIC;
	if (codepoint == 0x1EE27) return Unicode_Script_ARABIC;
	if (codepoint >= 0x1EE29 && codepoint <= 0x1EE32) return Unicode_Script_ARABIC;
	if (codepoint >= 0x1EE34 && codepoint <= 0x1EE37) return Unicode_Script_ARABIC;
	if (codepoint == 0x1EE39) return Unicode_Script_ARABIC;
	if (codepoint == 0x1EE3B) return Unicode_Script_ARABIC;
	if (codepoint == 0x1EE42) return Unicode_Script_ARABIC;
	if (codepoint == 0x1EE47) return Unicode_Script_ARABIC;
	if (codepoint == 0x1EE49) return Unicode_Script_ARABIC;
	if (codepoint == 0x1EE4B) return Unicode_Script_ARABIC;
	if (codepoint >= 0x1EE4D && codepoint <= 0x1EE4F) return Unicode_Script_ARABIC;
	if (codepoint >= 0x1EE51 && codepoint <= 0x1EE52) return Unicode_Script_ARABIC;
	if (codepoint == 0x1EE54) return Unicode_Script_ARABIC;
	if (codepoint == 0x1EE57) return Unicode_Script_ARABIC;
	if (codepoint == 0x1EE59) return Unicode_Script_ARABIC;
	if (codepoint == 0x1EE5B) return Unicode_Script_ARABIC;
	if (codepoint == 0x1EE5D) return Unicode_Script_ARABIC;
	if (codepoint == 0x1EE5F) return Unicode_Script_ARABIC;
	if (codepoint >= 0x1EE61 && codepoint <= 0x1EE62) return Unicode_Script_ARABIC;
	if (codepoint == 0x1EE64) return Unicode_Script_ARABIC;
	if (codepoint >= 0x1EE67 && codepoint <= 0x1EE6A) return Unicode_Script_ARABIC;
	if (codepoint >= 0x1EE6C && codepoint <= 0x1EE72) return Unicode_Script_ARABIC;
	if (codepoint >= 0x1EE74 && codepoint <= 0x1EE77) return Unicode_Script_ARABIC;
	if (codepoint >= 0x1EE79 && codepoint <= 0x1EE7C) return Unicode_Script_ARABIC;
	if (codepoint == 0x1EE7E) return Unicode_Script_ARABIC;
	if (codepoint >= 0x1EE80 && codepoint <= 0x1EE89) return Unicode_Script_ARABIC;
	if (codepoint >= 0x1EE8B && codepoint <= 0x1EE9B) return Unicode_Script_ARABIC;
	if (codepoint >= 0x1EEA1 && codepoint <= 0x1EEA3) return Unicode_Script_ARABIC;
	if (codepoint >= 0x1EEA5 && codepoint <= 0x1EEA9) return Unicode_Script_ARABIC;
	if (codepoint >= 0x1EEAB && codepoint <= 0x1EEBB) return Unicode_Script_ARABIC;
	if (codepoint >= 0x1EEF0 && codepoint <= 0x1EEF1) return Unicode_Script_ARABIC;
	if (codepoint >= 0x0700 && codepoint <= 0x070D) return Unicode_Script_SYRIAC;
	if (codepoint == 0x070F) return Unicode_Script_SYRIAC;
	if (codepoint == 0x0710) return Unicode_Script_SYRIAC;
	if (codepoint == 0x0711) return Unicode_Script_SYRIAC;
	if (codepoint >= 0x0712 && codepoint <= 0x072F) return Unicode_Script_SYRIAC;
	if (codepoint >= 0x0730 && codepoint <= 0x074A) return Unicode_Script_SYRIAC;
	if (codepoint >= 0x074D && codepoint <= 0x074F) return Unicode_Script_SYRIAC;
	if (codepoint >= 0x0860 && codepoint <= 0x086A) return Unicode_Script_SYRIAC;
	if (codepoint >= 0x0780 && codepoint <= 0x07A5) return Unicode_Script_THAANA;
	if (codepoint >= 0x07A6 && codepoint <= 0x07B0) return Unicode_Script_THAANA;
	if (codepoint == 0x07B1) return Unicode_Script_THAANA;
	if (codepoint >= 0x0900 && codepoint <= 0x0902) return Unicode_Script_DEVANAGARI;
	if (codepoint == 0x0903) return Unicode_Script_DEVANAGARI;
	if (codepoint >= 0x0904 && codepoint <= 0x0939) return Unicode_Script_DEVANAGARI;
	if (codepoint == 0x093A) return Unicode_Script_DEVANAGARI;
	if (codepoint == 0x093B) return Unicode_Script_DEVANAGARI;
	if (codepoint == 0x093C) return Unicode_Script_DEVANAGARI;
	if (codepoint == 0x093D) return Unicode_Script_DEVANAGARI;
	if (codepoint >= 0x093E && codepoint <= 0x0940) return Unicode_Script_DEVANAGARI;
	if (codepoint >= 0x0941 && codepoint <= 0x0948) return Unicode_Script_DEVANAGARI;
	if (codepoint >= 0x0949 && codepoint <= 0x094C) return Unicode_Script_DEVANAGARI;
	if (codepoint == 0x094D) return Unicode_Script_DEVANAGARI;
	if (codepoint >= 0x094E && codepoint <= 0x094F) return Unicode_Script_DEVANAGARI;
	if (codepoint == 0x0950) return Unicode_Script_DEVANAGARI;
	if (codepoint >= 0x0955 && codepoint <= 0x0957) return Unicode_Script_DEVANAGARI;
	if (codepoint >= 0x0958 && codepoint <= 0x0961) return Unicode_Script_DEVANAGARI;
	if (codepoint >= 0x0962 && codepoint <= 0x0963) return Unicode_Script_DEVANAGARI;
	if (codepoint >= 0x0966 && codepoint <= 0x096F) return Unicode_Script_DEVANAGARI;
	if (codepoint == 0x0970) return Unicode_Script_DEVANAGARI;
	if (codepoint == 0x0971) return Unicode_Script_DEVANAGARI;
	if (codepoint >= 0x0972 && codepoint <= 0x097F) return Unicode_Script_DEVANAGARI;
	if (codepoint >= 0xA8E0 && codepoint <= 0xA8F1) return Unicode_Script_DEVANAGARI;
	if (codepoint >= 0xA8F2 && codepoint <= 0xA8F7) return Unicode_Script_DEVANAGARI;
	if (codepoint >= 0xA8F8 && codepoint <= 0xA8FA) return Unicode_Script_DEVANAGARI;
	if (codepoint == 0xA8FB) return Unicode_Script_DEVANAGARI;
	if (codepoint == 0xA8FC) return Unicode_Script_DEVANAGARI;
	if (codepoint >= 0xA8FD && codepoint <= 0xA8FE) return Unicode_Script_DEVANAGARI;
	if (codepoint == 0xA8FF) return Unicode_Script_DEVANAGARI;
	if (codepoint == 0x0980) return Unicode_Script_BENGALI;
	if (codepoint == 0x0981) return Unicode_Script_BENGALI;
	if (codepoint >= 0x0982 && codepoint <= 0x0983) return Unicode_Script_BENGALI;
	if (codepoint >= 0x0985 && codepoint <= 0x098C) return Unicode_Script_BENGALI;
	if (codepoint >= 0x098F && codepoint <= 0x0990) return Unicode_Script_BENGALI;
	if (codepoint >= 0x0993 && codepoint <= 0x09A8) return Unicode_Script_BENGALI;
	if (codepoint >= 0x09AA && codepoint <= 0x09B0) return Unicode_Script_BENGALI;
	if (codepoint == 0x09B2) return Unicode_Script_BENGALI;
	if (codepoint >= 0x09B6 && codepoint <= 0x09B9) return Unicode_Script_BENGALI;
	if (codepoint == 0x09BC) return Unicode_Script_BENGALI;
	if (codepoint == 0x09BD) return Unicode_Script_BENGALI;
	if (codepoint >= 0x09BE && codepoint <= 0x09C0) return Unicode_Script_BENGALI;
	if (codepoint >= 0x09C1 && codepoint <= 0x09C4) return Unicode_Script_BENGALI;
	if (codepoint >= 0x09C7 && codepoint <= 0x09C8) return Unicode_Script_BENGALI;
	if (codepoint >= 0x09CB && codepoint <= 0x09CC) return Unicode_Script_BENGALI;
	if (codepoint == 0x09CD) return Unicode_Script_BENGALI;
	if (codepoint == 0x09CE) return Unicode_Script_BENGALI;
	if (codepoint == 0x09D7) return Unicode_Script_BENGALI;
	if (codepoint >= 0x09DC && codepoint <= 0x09DD) return Unicode_Script_BENGALI;
	if (codepoint >= 0x09DF && codepoint <= 0x09E1) return Unicode_Script_BENGALI;
	if (codepoint >= 0x09E2 && codepoint <= 0x09E3) return Unicode_Script_BENGALI;
	if (codepoint >= 0x09E6 && codepoint <= 0x09EF) return Unicode_Script_BENGALI;
	if (codepoint >= 0x09F0 && codepoint <= 0x09F1) return Unicode_Script_BENGALI;
	if (codepoint >= 0x09F2 && codepoint <= 0x09F3) return Unicode_Script_BENGALI;
	if (codepoint >= 0x09F4 && codepoint <= 0x09F9) return Unicode_Script_BENGALI;
	if (codepoint == 0x09FA) return Unicode_Script_BENGALI;
	if (codepoint == 0x09FB) return Unicode_Script_BENGALI;
	if (codepoint == 0x09FC) return Unicode_Script_BENGALI;
	if (codepoint == 0x09FD) return Unicode_Script_BENGALI;
	if (codepoint == 0x09FE) return Unicode_Script_BENGALI;
	if (codepoint >= 0x0A01 && codepoint <= 0x0A02) return Unicode_Script_GURMUKHI;
	if (codepoint == 0x0A03) return Unicode_Script_GURMUKHI;
	if (codepoint >= 0x0A05 && codepoint <= 0x0A0A) return Unicode_Script_GURMUKHI;
	if (codepoint >= 0x0A0F && codepoint <= 0x0A10) return Unicode_Script_GURMUKHI;
	if (codepoint >= 0x0A13 && codepoint <= 0x0A28) return Unicode_Script_GURMUKHI;
	if (codepoint >= 0x0A2A && codepoint <= 0x0A30) return Unicode_Script_GURMUKHI;
	if (codepoint >= 0x0A32 && codepoint <= 0x0A33) return Unicode_Script_GURMUKHI;
	if (codepoint >= 0x0A35 && codepoint <= 0x0A36) return Unicode_Script_GURMUKHI;
	if (codepoint >= 0x0A38 && codepoint <= 0x0A39) return Unicode_Script_GURMUKHI;
	if (codepoint == 0x0A3C) return Unicode_Script_GURMUKHI;
	if (codepoint >= 0x0A3E && codepoint <= 0x0A40) return Unicode_Script_GURMUKHI;
	if (codepoint >= 0x0A41 && codepoint <= 0x0A42) return Unicode_Script_GURMUKHI;
	if (codepoint >= 0x0A47 && codepoint <= 0x0A48) return Unicode_Script_GURMUKHI;
	if (codepoint >= 0x0A4B && codepoint <= 0x0A4D) return Unicode_Script_GURMUKHI;
	if (codepoint == 0x0A51) return Unicode_Script_GURMUKHI;
	if (codepoint >= 0x0A59 && codepoint <= 0x0A5C) return Unicode_Script_GURMUKHI;
	if (codepoint == 0x0A5E) return Unicode_Script_GURMUKHI;
	if (codepoint >= 0x0A66 && codepoint <= 0x0A6F) return Unicode_Script_GURMUKHI;
	if (codepoint >= 0x0A70 && codepoint <= 0x0A71) return Unicode_Script_GURMUKHI;
	if (codepoint >= 0x0A72 && codepoint <= 0x0A74) return Unicode_Script_GURMUKHI;
	if (codepoint == 0x0A75) return Unicode_Script_GURMUKHI;
	if (codepoint == 0x0A76) return Unicode_Script_GURMUKHI;
	if (codepoint >= 0x0A81 && codepoint <= 0x0A82) return Unicode_Script_GUJARATI;
	if (codepoint == 0x0A83) return Unicode_Script_GUJARATI;
	if (codepoint >= 0x0A85 && codepoint <= 0x0A8D) return Unicode_Script_GUJARATI;
	if (codepoint >= 0x0A8F && codepoint <= 0x0A91) return Unicode_Script_GUJARATI;
	if (codepoint >= 0x0A93 && codepoint <= 0x0AA8) return Unicode_Script_GUJARATI;
	if (codepoint >= 0x0AAA && codepoint <= 0x0AB0) return Unicode_Script_GUJARATI;
	if (codepoint >= 0x0AB2 && codepoint <= 0x0AB3) return Unicode_Script_GUJARATI;
	if (codepoint >= 0x0AB5 && codepoint <= 0x0AB9) return Unicode_Script_GUJARATI;
	if (codepoint == 0x0ABC) return Unicode_Script_GUJARATI;
	if (codepoint == 0x0ABD) return Unicode_Script_GUJARATI;
	if (codepoint >= 0x0ABE && codepoint <= 0x0AC0) return Unicode_Script_GUJARATI;
	if (codepoint >= 0x0AC1 && codepoint <= 0x0AC5) return Unicode_Script_GUJARATI;
	if (codepoint >= 0x0AC7 && codepoint <= 0x0AC8) return Unicode_Script_GUJARATI;
	if (codepoint == 0x0AC9) return Unicode_Script_GUJARATI;
	if (codepoint >= 0x0ACB && codepoint <= 0x0ACC) return Unicode_Script_GUJARATI;
	if (codepoint == 0x0ACD) return Unicode_Script_GUJARATI;
	if (codepoint == 0x0AD0) return Unicode_Script_GUJARATI;
	if (codepoint >= 0x0AE0 && codepoint <= 0x0AE1) return Unicode_Script_GUJARATI;
	if (codepoint >= 0x0AE2 && codepoint <= 0x0AE3) return Unicode_Script_GUJARATI;
	if (codepoint >= 0x0AE6 && codepoint <= 0x0AEF) return Unicode_Script_GUJARATI;
	if (codepoint == 0x0AF0) return Unicode_Script_GUJARATI;
	if (codepoint == 0x0AF1) return Unicode_Script_GUJARATI;
	if (codepoint == 0x0AF9) return Unicode_Script_GUJARATI;
	if (codepoint >= 0x0AFA && codepoint <= 0x0AFF) return Unicode_Script_GUJARATI;
	if (codepoint == 0x0B01) return Unicode_Script_ORIYA;
	if (codepoint >= 0x0B02 && codepoint <= 0x0B03) return Unicode_Script_ORIYA;
	if (codepoint >= 0x0B05 && codepoint <= 0x0B0C) return Unicode_Script_ORIYA;
	if (codepoint >= 0x0B0F && codepoint <= 0x0B10) return Unicode_Script_ORIYA;
	if (codepoint >= 0x0B13 && codepoint <= 0x0B28) return Unicode_Script_ORIYA;
	if (codepoint >= 0x0B2A && codepoint <= 0x0B30) return Unicode_Script_ORIYA;
	if (codepoint >= 0x0B32 && codepoint <= 0x0B33) return Unicode_Script_ORIYA;
	if (codepoint >= 0x0B35 && codepoint <= 0x0B39) return Unicode_Script_ORIYA;
	if (codepoint == 0x0B3C) return Unicode_Script_ORIYA;
	if (codepoint == 0x0B3D) return Unicode_Script_ORIYA;
	if (codepoint == 0x0B3E) return Unicode_Script_ORIYA;
	if (codepoint == 0x0B3F) return Unicode_Script_ORIYA;
	if (codepoint == 0x0B40) return Unicode_Script_ORIYA;
	if (codepoint >= 0x0B41 && codepoint <= 0x0B44) return Unicode_Script_ORIYA;
	if (codepoint >= 0x0B47 && codepoint <= 0x0B48) return Unicode_Script_ORIYA;
	if (codepoint >= 0x0B4B && codepoint <= 0x0B4C) return Unicode_Script_ORIYA;
	if (codepoint == 0x0B4D) return Unicode_Script_ORIYA;
	if (codepoint >= 0x0B55 && codepoint <= 0x0B56) return Unicode_Script_ORIYA;
	if (codepoint == 0x0B57) return Unicode_Script_ORIYA;
	if (codepoint >= 0x0B5C && codepoint <= 0x0B5D) return Unicode_Script_ORIYA;
	if (codepoint >= 0x0B5F && codepoint <= 0x0B61) return Unicode_Script_ORIYA;
	if (codepoint >= 0x0B62 && codepoint <= 0x0B63) return Unicode_Script_ORIYA;
	if (codepoint >= 0x0B66 && codepoint <= 0x0B6F) return Unicode_Script_ORIYA;
	if (codepoint == 0x0B70) return Unicode_Script_ORIYA;
	if (codepoint == 0x0B71) return Unicode_Script_ORIYA;
	if (codepoint >= 0x0B72 && codepoint <= 0x0B77) return Unicode_Script_ORIYA;
	if (codepoint == 0x0B82) return Unicode_Script_TAMIL;
	if (codepoint == 0x0B83) return Unicode_Script_TAMIL;
	if (codepoint >= 0x0B85 && codepoint <= 0x0B8A) return Unicode_Script_TAMIL;
	if (codepoint >= 0x0B8E && codepoint <= 0x0B90) return Unicode_Script_TAMIL;
	if (codepoint >= 0x0B92 && codepoint <= 0x0B95) return Unicode_Script_TAMIL;
	if (codepoint >= 0x0B99 && codepoint <= 0x0B9A) return Unicode_Script_TAMIL;
	if (codepoint == 0x0B9C) return Unicode_Script_TAMIL;
	if (codepoint >= 0x0B9E && codepoint <= 0x0B9F) return Unicode_Script_TAMIL;
	if (codepoint >= 0x0BA3 && codepoint <= 0x0BA4) return Unicode_Script_TAMIL;
	if (codepoint >= 0x0BA8 && codepoint <= 0x0BAA) return Unicode_Script_TAMIL;
	if (codepoint >= 0x0BAE && codepoint <= 0x0BB9) return Unicode_Script_TAMIL;
	if (codepoint >= 0x0BBE && codepoint <= 0x0BBF) return Unicode_Script_TAMIL;
	if (codepoint == 0x0BC0) return Unicode_Script_TAMIL;
	if (codepoint >= 0x0BC1 && codepoint <= 0x0BC2) return Unicode_Script_TAMIL;
	if (codepoint >= 0x0BC6 && codepoint <= 0x0BC8) return Unicode_Script_TAMIL;
	if (codepoint >= 0x0BCA && codepoint <= 0x0BCC) return Unicode_Script_TAMIL;
	if (codepoint == 0x0BCD) return Unicode_Script_TAMIL;
	if (codepoint == 0x0BD0) return Unicode_Script_TAMIL;
	if (codepoint == 0x0BD7) return Unicode_Script_TAMIL;
	if (codepoint >= 0x0BE6 && codepoint <= 0x0BEF) return Unicode_Script_TAMIL;
	if (codepoint >= 0x0BF0 && codepoint <= 0x0BF2) return Unicode_Script_TAMIL;
	if (codepoint >= 0x0BF3 && codepoint <= 0x0BF8) return Unicode_Script_TAMIL;
	if (codepoint == 0x0BF9) return Unicode_Script_TAMIL;
	if (codepoint == 0x0BFA) return Unicode_Script_TAMIL;
	if (codepoint >= 0x11FC0 && codepoint <= 0x11FD4) return Unicode_Script_TAMIL;
	if (codepoint >= 0x11FD5 && codepoint <= 0x11FDC) return Unicode_Script_TAMIL;
	if (codepoint >= 0x11FDD && codepoint <= 0x11FE0) return Unicode_Script_TAMIL;
	if (codepoint >= 0x11FE1 && codepoint <= 0x11FF1) return Unicode_Script_TAMIL;
	if (codepoint == 0x11FFF) return Unicode_Script_TAMIL;
	if (codepoint == 0x0C00) return Unicode_Script_TELUGU;
	if (codepoint >= 0x0C01 && codepoint <= 0x0C03) return Unicode_Script_TELUGU;
	if (codepoint == 0x0C04) return Unicode_Script_TELUGU;
	if (codepoint >= 0x0C05 && codepoint <= 0x0C0C) return Unicode_Script_TELUGU;
	if (codepoint >= 0x0C0E && codepoint <= 0x0C10) return Unicode_Script_TELUGU;
	if (codepoint >= 0x0C12 && codepoint <= 0x0C28) return Unicode_Script_TELUGU;
	if (codepoint >= 0x0C2A && codepoint <= 0x0C39) return Unicode_Script_TELUGU;
	if (codepoint == 0x0C3D) return Unicode_Script_TELUGU;
	if (codepoint >= 0x0C3E && codepoint <= 0x0C40) return Unicode_Script_TELUGU;
	if (codepoint >= 0x0C41 && codepoint <= 0x0C44) return Unicode_Script_TELUGU;
	if (codepoint >= 0x0C46 && codepoint <= 0x0C48) return Unicode_Script_TELUGU;
	if (codepoint >= 0x0C4A && codepoint <= 0x0C4D) return Unicode_Script_TELUGU;
	if (codepoint >= 0x0C55 && codepoint <= 0x0C56) return Unicode_Script_TELUGU;
	if (codepoint >= 0x0C58 && codepoint <= 0x0C5A) return Unicode_Script_TELUGU;
	if (codepoint >= 0x0C60 && codepoint <= 0x0C61) return Unicode_Script_TELUGU;
	if (codepoint >= 0x0C62 && codepoint <= 0x0C63) return Unicode_Script_TELUGU;
	if (codepoint >= 0x0C66 && codepoint <= 0x0C6F) return Unicode_Script_TELUGU;
	if (codepoint == 0x0C77) return Unicode_Script_TELUGU;
	if (codepoint >= 0x0C78 && codepoint <= 0x0C7E) return Unicode_Script_TELUGU;
	if (codepoint == 0x0C7F) return Unicode_Script_TELUGU;
	if (codepoint == 0x0C80) return Unicode_Script_KANNADA;
	if (codepoint == 0x0C81) return Unicode_Script_KANNADA;
	if (codepoint >= 0x0C82 && codepoint <= 0x0C83) return Unicode_Script_KANNADA;
	if (codepoint == 0x0C84) return Unicode_Script_KANNADA;
	if (codepoint >= 0x0C85 && codepoint <= 0x0C8C) return Unicode_Script_KANNADA;
	if (codepoint >= 0x0C8E && codepoint <= 0x0C90) return Unicode_Script_KANNADA;
	if (codepoint >= 0x0C92 && codepoint <= 0x0CA8) return Unicode_Script_KANNADA;
	if (codepoint >= 0x0CAA && codepoint <= 0x0CB3) return Unicode_Script_KANNADA;
	if (codepoint >= 0x0CB5 && codepoint <= 0x0CB9) return Unicode_Script_KANNADA;
	if (codepoint == 0x0CBC) return Unicode_Script_KANNADA;
	if (codepoint == 0x0CBD) return Unicode_Script_KANNADA;
	if (codepoint == 0x0CBE) return Unicode_Script_KANNADA;
	if (codepoint == 0x0CBF) return Unicode_Script_KANNADA;
	if (codepoint >= 0x0CC0 && codepoint <= 0x0CC4) return Unicode_Script_KANNADA;
	if (codepoint == 0x0CC6) return Unicode_Script_KANNADA;
	if (codepoint >= 0x0CC7 && codepoint <= 0x0CC8) return Unicode_Script_KANNADA;
	if (codepoint >= 0x0CCA && codepoint <= 0x0CCB) return Unicode_Script_KANNADA;
	if (codepoint >= 0x0CCC && codepoint <= 0x0CCD) return Unicode_Script_KANNADA;
	if (codepoint >= 0x0CD5 && codepoint <= 0x0CD6) return Unicode_Script_KANNADA;
	if (codepoint == 0x0CDE) return Unicode_Script_KANNADA;
	if (codepoint >= 0x0CE0 && codepoint <= 0x0CE1) return Unicode_Script_KANNADA;
	if (codepoint >= 0x0CE2 && codepoint <= 0x0CE3) return Unicode_Script_KANNADA;
	if (codepoint >= 0x0CE6 && codepoint <= 0x0CEF) return Unicode_Script_KANNADA;
	if (codepoint >= 0x0CF1 && codepoint <= 0x0CF2) return Unicode_Script_KANNADA;
	if (codepoint >= 0x0D00 && codepoint <= 0x0D01) return Unicode_Script_MALAYALAM;
	if (codepoint >= 0x0D02 && codepoint <= 0x0D03) return Unicode_Script_MALAYALAM;
	if (codepoint >= 0x0D04 && codepoint <= 0x0D0C) return Unicode_Script_MALAYALAM;
	if (codepoint >= 0x0D0E && codepoint <= 0x0D10) return Unicode_Script_MALAYALAM;
	if (codepoint >= 0x0D12 && codepoint <= 0x0D3A) return Unicode_Script_MALAYALAM;
	if (codepoint >= 0x0D3B && codepoint <= 0x0D3C) return Unicode_Script_MALAYALAM;
	if (codepoint == 0x0D3D) return Unicode_Script_MALAYALAM;
	if (codepoint >= 0x0D3E && codepoint <= 0x0D40) return Unicode_Script_MALAYALAM;
	if (codepoint >= 0x0D41 && codepoint <= 0x0D44) return Unicode_Script_MALAYALAM;
	if (codepoint >= 0x0D46 && codepoint <= 0x0D48) return Unicode_Script_MALAYALAM;
	if (codepoint >= 0x0D4A && codepoint <= 0x0D4C) return Unicode_Script_MALAYALAM;
	if (codepoint == 0x0D4D) return Unicode_Script_MALAYALAM;
	if (codepoint == 0x0D4E) return Unicode_Script_MALAYALAM;
	if (codepoint == 0x0D4F) return Unicode_Script_MALAYALAM;
	if (codepoint >= 0x0D54 && codepoint <= 0x0D56) return Unicode_Script_MALAYALAM;
	if (codepoint == 0x0D57) return Unicode_Script_MALAYALAM;
	if (codepoint >= 0x0D58 && codepoint <= 0x0D5E) return Unicode_Script_MALAYALAM;
	if (codepoint >= 0x0D5F && codepoint <= 0x0D61) return Unicode_Script_MALAYALAM;
	if (codepoint >= 0x0D62 && codepoint <= 0x0D63) return Unicode_Script_MALAYALAM;
	if (codepoint >= 0x0D66 && codepoint <= 0x0D6F) return Unicode_Script_MALAYALAM;
	if (codepoint >= 0x0D70 && codepoint <= 0x0D78) return Unicode_Script_MALAYALAM;
	if (codepoint == 0x0D79) return Unicode_Script_MALAYALAM;
	if (codepoint >= 0x0D7A && codepoint <= 0x0D7F) return Unicode_Script_MALAYALAM;
	if (codepoint == 0x0D81) return Unicode_Script_SINHALA;
	if (codepoint >= 0x0D82 && codepoint <= 0x0D83) return Unicode_Script_SINHALA;
	if (codepoint >= 0x0D85 && codepoint <= 0x0D96) return Unicode_Script_SINHALA;
	if (codepoint >= 0x0D9A && codepoint <= 0x0DB1) return Unicode_Script_SINHALA;
	if (codepoint >= 0x0DB3 && codepoint <= 0x0DBB) return Unicode_Script_SINHALA;
	if (codepoint == 0x0DBD) return Unicode_Script_SINHALA;
	if (codepoint >= 0x0DC0 && codepoint <= 0x0DC6) return Unicode_Script_SINHALA;
	if (codepoint == 0x0DCA) return Unicode_Script_SINHALA;
	if (codepoint >= 0x0DCF && codepoint <= 0x0DD1) return Unicode_Script_SINHALA;
	if (codepoint >= 0x0DD2 && codepoint <= 0x0DD4) return Unicode_Script_SINHALA;
	if (codepoint == 0x0DD6) return Unicode_Script_SINHALA;
	if (codepoint >= 0x0DD8 && codepoint <= 0x0DDF) return Unicode_Script_SINHALA;
	if (codepoint >= 0x0DE6 && codepoint <= 0x0DEF) return Unicode_Script_SINHALA;
	if (codepoint >= 0x0DF2 && codepoint <= 0x0DF3) return Unicode_Script_SINHALA;
	if (codepoint == 0x0DF4) return Unicode_Script_SINHALA;
	if (codepoint >= 0x111E1 && codepoint <= 0x111F4) return Unicode_Script_SINHALA;
	if (codepoint >= 0x0E01 && codepoint <= 0x0E30) return Unicode_Script_THAI;
	if (codepoint == 0x0E31) return Unicode_Script_THAI;
	if (codepoint >= 0x0E32 && codepoint <= 0x0E33) return Unicode_Script_THAI;
	if (codepoint >= 0x0E34 && codepoint <= 0x0E3A) return Unicode_Script_THAI;
	if (codepoint >= 0x0E40 && codepoint <= 0x0E45) return Unicode_Script_THAI;
	if (codepoint == 0x0E46) return Unicode_Script_THAI;
	if (codepoint >= 0x0E47 && codepoint <= 0x0E4E) return Unicode_Script_THAI;
	if (codepoint == 0x0E4F) return Unicode_Script_THAI;
	if (codepoint >= 0x0E50 && codepoint <= 0x0E59) return Unicode_Script_THAI;
	if (codepoint >= 0x0E5A && codepoint <= 0x0E5B) return Unicode_Script_THAI;
	if (codepoint >= 0x0E81 && codepoint <= 0x0E82) return Unicode_Script_LAO;
	if (codepoint == 0x0E84) return Unicode_Script_LAO;
	if (codepoint >= 0x0E86 && codepoint <= 0x0E8A) return Unicode_Script_LAO;
	if (codepoint >= 0x0E8C && codepoint <= 0x0EA3) return Unicode_Script_LAO;
	if (codepoint == 0x0EA5) return Unicode_Script_LAO;
	if (codepoint >= 0x0EA7 && codepoint <= 0x0EB0) return Unicode_Script_LAO;
	if (codepoint == 0x0EB1) return Unicode_Script_LAO;
	if (codepoint >= 0x0EB2 && codepoint <= 0x0EB3) return Unicode_Script_LAO;
	if (codepoint >= 0x0EB4 && codepoint <= 0x0EBC) return Unicode_Script_LAO;
	if (codepoint == 0x0EBD) return Unicode_Script_LAO;
	if (codepoint >= 0x0EC0 && codepoint <= 0x0EC4) return Unicode_Script_LAO;
	if (codepoint == 0x0EC6) return Unicode_Script_LAO;
	if (codepoint >= 0x0EC8 && codepoint <= 0x0ECD) return Unicode_Script_LAO;
	if (codepoint >= 0x0ED0 && codepoint <= 0x0ED9) return Unicode_Script_LAO;
	if (codepoint >= 0x0EDC && codepoint <= 0x0EDF) return Unicode_Script_LAO;
	if (codepoint == 0x0F00) return Unicode_Script_TIBETAN;
	if (codepoint >= 0x0F01 && codepoint <= 0x0F03) return Unicode_Script_TIBETAN;
	if (codepoint >= 0x0F04 && codepoint <= 0x0F12) return Unicode_Script_TIBETAN;
	if (codepoint == 0x0F13) return Unicode_Script_TIBETAN;
	if (codepoint == 0x0F14) return Unicode_Script_TIBETAN;
	if (codepoint >= 0x0F15 && codepoint <= 0x0F17) return Unicode_Script_TIBETAN;
	if (codepoint >= 0x0F18 && codepoint <= 0x0F19) return Unicode_Script_TIBETAN;
	if (codepoint >= 0x0F1A && codepoint <= 0x0F1F) return Unicode_Script_TIBETAN;
	if (codepoint >= 0x0F20 && codepoint <= 0x0F29) return Unicode_Script_TIBETAN;
	if (codepoint >= 0x0F2A && codepoint <= 0x0F33) return Unicode_Script_TIBETAN;
	if (codepoint == 0x0F34) return Unicode_Script_TIBETAN;
	if (codepoint == 0x0F35) return Unicode_Script_TIBETAN;
	if (codepoint == 0x0F36) return Unicode_Script_TIBETAN;
	if (codepoint == 0x0F37) return Unicode_Script_TIBETAN;
	if (codepoint == 0x0F38) return Unicode_Script_TIBETAN;
	if (codepoint == 0x0F39) return Unicode_Script_TIBETAN;
	if (codepoint == 0x0F3A) return Unicode_Script_TIBETAN;
	if (codepoint == 0x0F3B) return Unicode_Script_TIBETAN;
	if (codepoint == 0x0F3C) return Unicode_Script_TIBETAN;
	if (codepoint == 0x0F3D) return Unicode_Script_TIBETAN;
	if (codepoint >= 0x0F3E && codepoint <= 0x0F3F) return Unicode_Script_TIBETAN;
	if (codepoint >= 0x0F40 && codepoint <= 0x0F47) return Unicode_Script_TIBETAN;
	if (codepoint >= 0x0F49 && codepoint <= 0x0F6C) return Unicode_Script_TIBETAN;
	if (codepoint >= 0x0F71 && codepoint <= 0x0F7E) return Unicode_Script_TIBETAN;
	if (codepoint == 0x0F7F) return Unicode_Script_TIBETAN;
	if (codepoint >= 0x0F80 && codepoint <= 0x0F84) return Unicode_Script_TIBETAN;
	if (codepoint == 0x0F85) return Unicode_Script_TIBETAN;
	if (codepoint >= 0x0F86 && codepoint <= 0x0F87) return Unicode_Script_TIBETAN;
	if (codepoint >= 0x0F88 && codepoint <= 0x0F8C) return Unicode_Script_TIBETAN;
	if (codepoint >= 0x0F8D && codepoint <= 0x0F97) return Unicode_Script_TIBETAN;
	if (codepoint >= 0x0F99 && codepoint <= 0x0FBC) return Unicode_Script_TIBETAN;
	if (codepoint >= 0x0FBE && codepoint <= 0x0FC5) return Unicode_Script_TIBETAN;
	if (codepoint == 0x0FC6) return Unicode_Script_TIBETAN;
	if (codepoint >= 0x0FC7 && codepoint <= 0x0FCC) return Unicode_Script_TIBETAN;
	if (codepoint >= 0x0FCE && codepoint <= 0x0FCF) return Unicode_Script_TIBETAN;
	if (codepoint >= 0x0FD0 && codepoint <= 0x0FD4) return Unicode_Script_TIBETAN;
	if (codepoint >= 0x0FD9 && codepoint <= 0x0FDA) return Unicode_Script_TIBETAN;
	if (codepoint >= 0x1000 && codepoint <= 0x102A) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x102B && codepoint <= 0x102C) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x102D && codepoint <= 0x1030) return Unicode_Script_MYANMAR;
	if (codepoint == 0x1031) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x1032 && codepoint <= 0x1037) return Unicode_Script_MYANMAR;
	if (codepoint == 0x1038) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x1039 && codepoint <= 0x103A) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x103B && codepoint <= 0x103C) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x103D && codepoint <= 0x103E) return Unicode_Script_MYANMAR;
	if (codepoint == 0x103F) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x1040 && codepoint <= 0x1049) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x104A && codepoint <= 0x104F) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x1050 && codepoint <= 0x1055) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x1056 && codepoint <= 0x1057) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x1058 && codepoint <= 0x1059) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x105A && codepoint <= 0x105D) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x105E && codepoint <= 0x1060) return Unicode_Script_MYANMAR;
	if (codepoint == 0x1061) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x1062 && codepoint <= 0x1064) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x1065 && codepoint <= 0x1066) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x1067 && codepoint <= 0x106D) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x106E && codepoint <= 0x1070) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x1071 && codepoint <= 0x1074) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x1075 && codepoint <= 0x1081) return Unicode_Script_MYANMAR;
	if (codepoint == 0x1082) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x1083 && codepoint <= 0x1084) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x1085 && codepoint <= 0x1086) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x1087 && codepoint <= 0x108C) return Unicode_Script_MYANMAR;
	if (codepoint == 0x108D) return Unicode_Script_MYANMAR;
	if (codepoint == 0x108E) return Unicode_Script_MYANMAR;
	if (codepoint == 0x108F) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x1090 && codepoint <= 0x1099) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x109A && codepoint <= 0x109C) return Unicode_Script_MYANMAR;
	if (codepoint == 0x109D) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x109E && codepoint <= 0x109F) return Unicode_Script_MYANMAR;
	if (codepoint >= 0xA9E0 && codepoint <= 0xA9E4) return Unicode_Script_MYANMAR;
	if (codepoint == 0xA9E5) return Unicode_Script_MYANMAR;
	if (codepoint == 0xA9E6) return Unicode_Script_MYANMAR;
	if (codepoint >= 0xA9E7 && codepoint <= 0xA9EF) return Unicode_Script_MYANMAR;
	if (codepoint >= 0xA9F0 && codepoint <= 0xA9F9) return Unicode_Script_MYANMAR;
	if (codepoint >= 0xA9FA && codepoint <= 0xA9FE) return Unicode_Script_MYANMAR;
	if (codepoint >= 0xAA60 && codepoint <= 0xAA6F) return Unicode_Script_MYANMAR;
	if (codepoint == 0xAA70) return Unicode_Script_MYANMAR;
	if (codepoint >= 0xAA71 && codepoint <= 0xAA76) return Unicode_Script_MYANMAR;
	if (codepoint >= 0xAA77 && codepoint <= 0xAA79) return Unicode_Script_MYANMAR;
	if (codepoint == 0xAA7A) return Unicode_Script_MYANMAR;
	if (codepoint == 0xAA7B) return Unicode_Script_MYANMAR;
	if (codepoint == 0xAA7C) return Unicode_Script_MYANMAR;
	if (codepoint == 0xAA7D) return Unicode_Script_MYANMAR;
	if (codepoint >= 0xAA7E && codepoint <= 0xAA7F) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x10A0 && codepoint <= 0x10C5) return Unicode_Script_GEORGIAN;
	if (codepoint == 0x10C7) return Unicode_Script_GEORGIAN;
	if (codepoint == 0x10CD) return Unicode_Script_GEORGIAN;
	if (codepoint >= 0x10D0 && codepoint <= 0x10FA) return Unicode_Script_GEORGIAN;
	if (codepoint == 0x10FC) return Unicode_Script_GEORGIAN;
	if (codepoint >= 0x10FD && codepoint <= 0x10FF) return Unicode_Script_GEORGIAN;
	if (codepoint >= 0x1C90 && codepoint <= 0x1CBA) return Unicode_Script_GEORGIAN;
	if (codepoint >= 0x1CBD && codepoint <= 0x1CBF) return Unicode_Script_GEORGIAN;
	if (codepoint >= 0x2D00 && codepoint <= 0x2D25) return Unicode_Script_GEORGIAN;
	if (codepoint == 0x2D27) return Unicode_Script_GEORGIAN;
	if (codepoint == 0x2D2D) return Unicode_Script_GEORGIAN;
	if (codepoint >= 0x1100 && codepoint <= 0x11FF) return Unicode_Script_HANGUL;
	if (codepoint >= 0x302E && codepoint <= 0x302F) return Unicode_Script_HANGUL;
	if (codepoint >= 0x3131 && codepoint <= 0x318E) return Unicode_Script_HANGUL;
	if (codepoint >= 0x3200 && codepoint <= 0x321E) return Unicode_Script_HANGUL;
	if (codepoint >= 0x3260 && codepoint <= 0x327E) return Unicode_Script_HANGUL;
	if (codepoint >= 0xA960 && codepoint <= 0xA97C) return Unicode_Script_HANGUL;
	if (codepoint >= 0xAC00 && codepoint <= 0xD7A3) return Unicode_Script_HANGUL;
	if (codepoint >= 0xD7B0 && codepoint <= 0xD7C6) return Unicode_Script_HANGUL;
	if (codepoint >= 0xD7CB && codepoint <= 0xD7FB) return Unicode_Script_HANGUL;
	if (codepoint >= 0xFFA0 && codepoint <= 0xFFBE) return Unicode_Script_HANGUL;
	if (codepoint >= 0xFFC2 && codepoint <= 0xFFC7) return Unicode_Script_HANGUL;
	if (codepoint >= 0xFFCA && codepoint <= 0xFFCF) return Unicode_Script_HANGUL;
	if (codepoint >= 0xFFD2 && codepoint <= 0xFFD7) return Unicode_Script_HANGUL;
	if (codepoint >= 0xFFDA && codepoint <= 0xFFDC) return Unicode_Script_HANGUL;
	if (codepoint >= 0x1200 && codepoint <= 0x1248) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x124A && codepoint <= 0x124D) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x1250 && codepoint <= 0x1256) return Unicode_Script_ETHIOPIC;
	if (codepoint == 0x1258) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x125A && codepoint <= 0x125D) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x1260 && codepoint <= 0x1288) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x128A && codepoint <= 0x128D) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x1290 && codepoint <= 0x12B0) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x12B2 && codepoint <= 0x12B5) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x12B8 && codepoint <= 0x12BE) return Unicode_Script_ETHIOPIC;
	if (codepoint == 0x12C0) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x12C2 && codepoint <= 0x12C5) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x12C8 && codepoint <= 0x12D6) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x12D8 && codepoint <= 0x1310) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x1312 && codepoint <= 0x1315) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x1318 && codepoint <= 0x135A) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x135D && codepoint <= 0x135F) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x1360 && codepoint <= 0x1368) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x1369 && codepoint <= 0x137C) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x1380 && codepoint <= 0x138F) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x1390 && codepoint <= 0x1399) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x2D80 && codepoint <= 0x2D96) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x2DA0 && codepoint <= 0x2DA6) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x2DA8 && codepoint <= 0x2DAE) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x2DB0 && codepoint <= 0x2DB6) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x2DB8 && codepoint <= 0x2DBE) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x2DC0 && codepoint <= 0x2DC6) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x2DC8 && codepoint <= 0x2DCE) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x2DD0 && codepoint <= 0x2DD6) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x2DD8 && codepoint <= 0x2DDE) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0xAB01 && codepoint <= 0xAB06) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0xAB09 && codepoint <= 0xAB0E) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0xAB11 && codepoint <= 0xAB16) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0xAB20 && codepoint <= 0xAB26) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0xAB28 && codepoint <= 0xAB2E) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x13A0 && codepoint <= 0x13F5) return Unicode_Script_CHEROKEE;
	if (codepoint >= 0x13F8 && codepoint <= 0x13FD) return Unicode_Script_CHEROKEE;
	if (codepoint >= 0xAB70 && codepoint <= 0xABBF) return Unicode_Script_CHEROKEE;
	if (codepoint == 0x1400) return Unicode_Script_CANADIAN_ABORIGINAL;
	if (codepoint >= 0x1401 && codepoint <= 0x166C) return Unicode_Script_CANADIAN_ABORIGINAL;
	if (codepoint == 0x166D) return Unicode_Script_CANADIAN_ABORIGINAL;
	if (codepoint == 0x166E) return Unicode_Script_CANADIAN_ABORIGINAL;
	if (codepoint >= 0x166F && codepoint <= 0x167F) return Unicode_Script_CANADIAN_ABORIGINAL;
	if (codepoint >= 0x18B0 && codepoint <= 0x18F5) return Unicode_Script_CANADIAN_ABORIGINAL;
	if (codepoint == 0x1680) return Unicode_Script_OGHAM;
	if (codepoint >= 0x1681 && codepoint <= 0x169A) return Unicode_Script_OGHAM;
	if (codepoint == 0x169B) return Unicode_Script_OGHAM;
	if (codepoint == 0x169C) return Unicode_Script_OGHAM;
	if (codepoint >= 0x16A0 && codepoint <= 0x16EA) return Unicode_Script_RUNIC;
	if (codepoint >= 0x16EE && codepoint <= 0x16F0) return Unicode_Script_RUNIC;
	if (codepoint >= 0x16F1 && codepoint <= 0x16F8) return Unicode_Script_RUNIC;
	if (codepoint >= 0x1780 && codepoint <= 0x17B3) return Unicode_Script_KHMER;
	if (codepoint >= 0x17B4 && codepoint <= 0x17B5) return Unicode_Script_KHMER;
	if (codepoint == 0x17B6) return Unicode_Script_KHMER;
	if (codepoint >= 0x17B7 && codepoint <= 0x17BD) return Unicode_Script_KHMER;
	if (codepoint >= 0x17BE && codepoint <= 0x17C5) return Unicode_Script_KHMER;
	if (codepoint == 0x17C6) return Unicode_Script_KHMER;
	if (codepoint >= 0x17C7 && codepoint <= 0x17C8) return Unicode_Script_KHMER;
	if (codepoint >= 0x17C9 && codepoint <= 0x17D3) return Unicode_Script_KHMER;
	if (codepoint >= 0x17D4 && codepoint <= 0x17D6) return Unicode_Script_KHMER;
	if (codepoint == 0x17D7) return Unicode_Script_KHMER;
	if (codepoint >= 0x17D8 && codepoint <= 0x17DA) return Unicode_Script_KHMER;
	if (codepoint == 0x17DB) return Unicode_Script_KHMER;
	if (codepoint == 0x17DC) return Unicode_Script_KHMER;
	if (codepoint == 0x17DD) return Unicode_Script_KHMER;
	if (codepoint >= 0x17E0 && codepoint <= 0x17E9) return Unicode_Script_KHMER;
	if (codepoint >= 0x17F0 && codepoint <= 0x17F9) return Unicode_Script_KHMER;
	if (codepoint >= 0x19E0 && codepoint <= 0x19FF) return Unicode_Script_KHMER;
	if (codepoint >= 0x1800 && codepoint <= 0x1801) return Unicode_Script_MONGOLIAN;
	if (codepoint == 0x1804) return Unicode_Script_MONGOLIAN;
	if (codepoint == 0x1806) return Unicode_Script_MONGOLIAN;
	if (codepoint >= 0x1807 && codepoint <= 0x180A) return Unicode_Script_MONGOLIAN;
	if (codepoint >= 0x180B && codepoint <= 0x180D) return Unicode_Script_MONGOLIAN;
	if (codepoint == 0x180E) return Unicode_Script_MONGOLIAN;
	if (codepoint >= 0x1810 && codepoint <= 0x1819) return Unicode_Script_MONGOLIAN;
	if (codepoint >= 0x1820 && codepoint <= 0x1842) return Unicode_Script_MONGOLIAN;
	if (codepoint == 0x1843) return Unicode_Script_MONGOLIAN;
	if (codepoint >= 0x1844 && codepoint <= 0x1878) return Unicode_Script_MONGOLIAN;
	if (codepoint >= 0x1880 && codepoint <= 0x1884) return Unicode_Script_MONGOLIAN;
	if (codepoint >= 0x1885 && codepoint <= 0x1886) return Unicode_Script_MONGOLIAN;
	if (codepoint >= 0x1887 && codepoint <= 0x18A8) return Unicode_Script_MONGOLIAN;
	if (codepoint == 0x18A9) return Unicode_Script_MONGOLIAN;
	if (codepoint == 0x18AA) return Unicode_Script_MONGOLIAN;
	if (codepoint >= 0x11660 && codepoint <= 0x1166C) return Unicode_Script_MONGOLIAN;
	if (codepoint >= 0x3041 && codepoint <= 0x3096) return Unicode_Script_HIRAGANA;
	if (codepoint >= 0x309D && codepoint <= 0x309E) return Unicode_Script_HIRAGANA;
	if (codepoint == 0x309F) return Unicode_Script_HIRAGANA;
	if (codepoint >= 0x1B001 && codepoint <= 0x1B11E) return Unicode_Script_HIRAGANA;
	if (codepoint >= 0x1B150 && codepoint <= 0x1B152) return Unicode_Script_HIRAGANA;
	if (codepoint == 0x1F200) return Unicode_Script_HIRAGANA;
	if (codepoint >= 0x30A1 && codepoint <= 0x30FA) return Unicode_Script_KATAKANA;
	if (codepoint >= 0x30FD && codepoint <= 0x30FE) return Unicode_Script_KATAKANA;
	if (codepoint == 0x30FF) return Unicode_Script_KATAKANA;
	if (codepoint >= 0x31F0 && codepoint <= 0x31FF) return Unicode_Script_KATAKANA;
	if (codepoint >= 0x32D0 && codepoint <= 0x32FE) return Unicode_Script_KATAKANA;
	if (codepoint >= 0x3300 && codepoint <= 0x3357) return Unicode_Script_KATAKANA;
	if (codepoint >= 0xFF66 && codepoint <= 0xFF6F) return Unicode_Script_KATAKANA;
	if (codepoint >= 0xFF71 && codepoint <= 0xFF9D) return Unicode_Script_KATAKANA;
	if (codepoint == 0x1B000) return Unicode_Script_KATAKANA;
	if (codepoint >= 0x1B164 && codepoint <= 0x1B167) return Unicode_Script_KATAKANA;
	if (codepoint >= 0x02EA && codepoint <= 0x02EB) return Unicode_Script_BOPOMOFO;
	if (codepoint >= 0x3105 && codepoint <= 0x312F) return Unicode_Script_BOPOMOFO;
	if (codepoint >= 0x31A0 && codepoint <= 0x31BF) return Unicode_Script_BOPOMOFO;
	if (codepoint >= 0x2E80 && codepoint <= 0x2E99) return Unicode_Script_HAN;
	if (codepoint >= 0x2E9B && codepoint <= 0x2EF3) return Unicode_Script_HAN;
	if (codepoint >= 0x2F00 && codepoint <= 0x2FD5) return Unicode_Script_HAN;
	if (codepoint == 0x3005) return Unicode_Script_HAN;
	if (codepoint == 0x3007) return Unicode_Script_HAN;
	if (codepoint >= 0x3021 && codepoint <= 0x3029) return Unicode_Script_HAN;
	if (codepoint >= 0x3038 && codepoint <= 0x303A) return Unicode_Script_HAN;
	if (codepoint == 0x303B) return Unicode_Script_HAN;
	if (codepoint >= 0x3400 && codepoint <= 0x4DBF) return Unicode_Script_HAN;
	if (codepoint >= 0x4E00 && codepoint <= 0x9FFC) return Unicode_Script_HAN;
	if (codepoint >= 0xF900 && codepoint <= 0xFA6D) return Unicode_Script_HAN;
	if (codepoint >= 0xFA70 && codepoint <= 0xFAD9) return Unicode_Script_HAN;
	if (codepoint >= 0x16FF0 && codepoint <= 0x16FF1) return Unicode_Script_HAN;
	if (codepoint >= 0x20000 && codepoint <= 0x2A6DD) return Unicode_Script_HAN;
	if (codepoint >= 0x2A700 && codepoint <= 0x2B734) return Unicode_Script_HAN;
	if (codepoint >= 0x2B740 && codepoint <= 0x2B81D) return Unicode_Script_HAN;
	if (codepoint >= 0x2B820 && codepoint <= 0x2CEA1) return Unicode_Script_HAN;
	if (codepoint >= 0x2CEB0 && codepoint <= 0x2EBE0) return Unicode_Script_HAN;
	if (codepoint >= 0x2F800 && codepoint <= 0x2FA1D) return Unicode_Script_HAN;
	if (codepoint >= 0x30000 && codepoint <= 0x3134A) return Unicode_Script_HAN;
	if (codepoint >= 0xA000 && codepoint <= 0xA014) return Unicode_Script_YI;
	if (codepoint == 0xA015) return Unicode_Script_YI;
	if (codepoint >= 0xA016 && codepoint <= 0xA48C) return Unicode_Script_YI;
	if (codepoint >= 0xA490 && codepoint <= 0xA4C6) return Unicode_Script_YI;
	if (codepoint >= 0x10300 && codepoint <= 0x1031F) return Unicode_Script_OLD_ITALIC;
	if (codepoint >= 0x10320 && codepoint <= 0x10323) return Unicode_Script_OLD_ITALIC;
	if (codepoint >= 0x1032D && codepoint <= 0x1032F) return Unicode_Script_OLD_ITALIC;
	if (codepoint >= 0x10330 && codepoint <= 0x10340) return Unicode_Script_GOTHIC;
	if (codepoint == 0x10341) return Unicode_Script_GOTHIC;
	if (codepoint >= 0x10342 && codepoint <= 0x10349) return Unicode_Script_GOTHIC;
	if (codepoint == 0x1034A) return Unicode_Script_GOTHIC;
	if (codepoint >= 0x10400 && codepoint <= 0x1044F) return Unicode_Script_DESERET;
	if (codepoint >= 0x0300 && codepoint <= 0x036F) return Unicode_Script_INHERITED;
	if (codepoint >= 0x0485 && codepoint <= 0x0486) return Unicode_Script_INHERITED;
	if (codepoint >= 0x064B && codepoint <= 0x0655) return Unicode_Script_INHERITED;
	if (codepoint == 0x0670) return Unicode_Script_INHERITED;
	if (codepoint >= 0x0951 && codepoint <= 0x0954) return Unicode_Script_INHERITED;
	if (codepoint >= 0x1AB0 && codepoint <= 0x1ABD) return Unicode_Script_INHERITED;
	if (codepoint == 0x1ABE) return Unicode_Script_INHERITED;
	if (codepoint >= 0x1ABF && codepoint <= 0x1AC0) return Unicode_Script_INHERITED;
	if (codepoint >= 0x1CD0 && codepoint <= 0x1CD2) return Unicode_Script_INHERITED;
	if (codepoint >= 0x1CD4 && codepoint <= 0x1CE0) return Unicode_Script_INHERITED;
	if (codepoint >= 0x1CE2 && codepoint <= 0x1CE8) return Unicode_Script_INHERITED;
	if (codepoint == 0x1CED) return Unicode_Script_INHERITED;
	if (codepoint == 0x1CF4) return Unicode_Script_INHERITED;
	if (codepoint >= 0x1CF8 && codepoint <= 0x1CF9) return Unicode_Script_INHERITED;
	if (codepoint >= 0x1DC0 && codepoint <= 0x1DF9) return Unicode_Script_INHERITED;
	if (codepoint >= 0x1DFB && codepoint <= 0x1DFF) return Unicode_Script_INHERITED;
	if (codepoint >= 0x200C && codepoint <= 0x200D) return Unicode_Script_INHERITED;
	if (codepoint >= 0x20D0 && codepoint <= 0x20DC) return Unicode_Script_INHERITED;
	if (codepoint >= 0x20DD && codepoint <= 0x20E0) return Unicode_Script_INHERITED;
	if (codepoint == 0x20E1) return Unicode_Script_INHERITED;
	if (codepoint >= 0x20E2 && codepoint <= 0x20E4) return Unicode_Script_INHERITED;
	if (codepoint >= 0x20E5 && codepoint <= 0x20F0) return Unicode_Script_INHERITED;
	if (codepoint >= 0x302A && codepoint <= 0x302D) return Unicode_Script_INHERITED;
	if (codepoint >= 0x3099 && codepoint <= 0x309A) return Unicode_Script_INHERITED;
	if (codepoint >= 0xFE00 && codepoint <= 0xFE0F) return Unicode_Script_INHERITED;
	if (codepoint >= 0xFE20 && codepoint <= 0xFE2D) return Unicode_Script_INHERITED;
	if (codepoint == 0x101FD) return Unicode_Script_INHERITED;
	if (codepoint == 0x102E0) return Unicode_Script_INHERITED;
	if (codepoint == 0x1133B) return Unicode_Script_INHERITED;
	if (codepoint >= 0x1D167 && codepoint <= 0x1D169) return Unicode_Script_INHERITED;
	if (codepoint >= 0x1D17B && codepoint <= 0x1D182) return Unicode_Script_INHERITED;
	if (codepoint >= 0x1D185 && codepoint <= 0x1D18B) return Unicode_Script_INHERITED;
	if (codepoint >= 0x1D1AA && codepoint <= 0x1D1AD) return Unicode_Script_INHERITED;
	if (codepoint >= 0xE0100 && codepoint <= 0xE01EF) return Unicode_Script_INHERITED;
	if (codepoint >= 0x1700 && codepoint <= 0x170C) return Unicode_Script_TAGALOG;
	if (codepoint >= 0x170E && codepoint <= 0x1711) return Unicode_Script_TAGALOG;
	if (codepoint >= 0x1712 && codepoint <= 0x1714) return Unicode_Script_TAGALOG;
	if (codepoint >= 0x1720 && codepoint <= 0x1731) return Unicode_Script_HANUNOO;
	if (codepoint >= 0x1732 && codepoint <= 0x1734) return Unicode_Script_HANUNOO;
	if (codepoint >= 0x1740 && codepoint <= 0x1751) return Unicode_Script_BUHID;
	if (codepoint >= 0x1752 && codepoint <= 0x1753) return Unicode_Script_BUHID;
	if (codepoint >= 0x1760 && codepoint <= 0x176C) return Unicode_Script_TAGBANWA;
	if (codepoint >= 0x176E && codepoint <= 0x1770) return Unicode_Script_TAGBANWA;
	if (codepoint >= 0x1772 && codepoint <= 0x1773) return Unicode_Script_TAGBANWA;
	if (codepoint >= 0x1900 && codepoint <= 0x191E) return Unicode_Script_LIMBU;
	if (codepoint >= 0x1920 && codepoint <= 0x1922) return Unicode_Script_LIMBU;
	if (codepoint >= 0x1923 && codepoint <= 0x1926) return Unicode_Script_LIMBU;
	if (codepoint >= 0x1927 && codepoint <= 0x1928) return Unicode_Script_LIMBU;
	if (codepoint >= 0x1929 && codepoint <= 0x192B) return Unicode_Script_LIMBU;
	if (codepoint >= 0x1930 && codepoint <= 0x1931) return Unicode_Script_LIMBU;
	if (codepoint == 0x1932) return Unicode_Script_LIMBU;
	if (codepoint >= 0x1933 && codepoint <= 0x1938) return Unicode_Script_LIMBU;
	if (codepoint >= 0x1939 && codepoint <= 0x193B) return Unicode_Script_LIMBU;
	if (codepoint == 0x1940) return Unicode_Script_LIMBU;
	if (codepoint >= 0x1944 && codepoint <= 0x1945) return Unicode_Script_LIMBU;
	if (codepoint >= 0x1946 && codepoint <= 0x194F) return Unicode_Script_LIMBU;
	if (codepoint >= 0x1950 && codepoint <= 0x196D) return Unicode_Script_TAI_LE;
	if (codepoint >= 0x1970 && codepoint <= 0x1974) return Unicode_Script_TAI_LE;
	if (codepoint >= 0x10000 && codepoint <= 0x1000B) return Unicode_Script_LINEAR_B;
	if (codepoint >= 0x1000D && codepoint <= 0x10026) return Unicode_Script_LINEAR_B;
	if (codepoint >= 0x10028 && codepoint <= 0x1003A) return Unicode_Script_LINEAR_B;
	if (codepoint >= 0x1003C && codepoint <= 0x1003D) return Unicode_Script_LINEAR_B;
	if (codepoint >= 0x1003F && codepoint <= 0x1004D) return Unicode_Script_LINEAR_B;
	if (codepoint >= 0x10050 && codepoint <= 0x1005D) return Unicode_Script_LINEAR_B;
	if (codepoint >= 0x10080 && codepoint <= 0x100FA) return Unicode_Script_LINEAR_B;
	if (codepoint >= 0x10380 && codepoint <= 0x1039D) return Unicode_Script_UGARITIC;
	if (codepoint == 0x1039F) return Unicode_Script_UGARITIC;
	if (codepoint >= 0x10450 && codepoint <= 0x1047F) return Unicode_Script_SHAVIAN;
	if (codepoint >= 0x10480 && codepoint <= 0x1049D) return Unicode_Script_OSMANYA;
	if (codepoint >= 0x104A0 && codepoint <= 0x104A9) return Unicode_Script_OSMANYA;
	if (codepoint >= 0x10800 && codepoint <= 0x10805) return Unicode_Script_CYPRIOT;
	if (codepoint == 0x10808) return Unicode_Script_CYPRIOT;
	if (codepoint >= 0x1080A && codepoint <= 0x10835) return Unicode_Script_CYPRIOT;
	if (codepoint >= 0x10837 && codepoint <= 0x10838) return Unicode_Script_CYPRIOT;
	if (codepoint == 0x1083C) return Unicode_Script_CYPRIOT;
	if (codepoint == 0x1083F) return Unicode_Script_CYPRIOT;
	if (codepoint >= 0x2800 && codepoint <= 0x28FF) return Unicode_Script_BRAILLE;
	if (codepoint >= 0x1A00 && codepoint <= 0x1A16) return Unicode_Script_BUGINESE;
	if (codepoint >= 0x1A17 && codepoint <= 0x1A18) return Unicode_Script_BUGINESE;
	if (codepoint >= 0x1A19 && codepoint <= 0x1A1A) return Unicode_Script_BUGINESE;
	if (codepoint == 0x1A1B) return Unicode_Script_BUGINESE;
	if (codepoint >= 0x1A1E && codepoint <= 0x1A1F) return Unicode_Script_BUGINESE;
	if (codepoint >= 0x03E2 && codepoint <= 0x03EF) return Unicode_Script_COPTIC;
	if (codepoint >= 0x2C80 && codepoint <= 0x2CE4) return Unicode_Script_COPTIC;
	if (codepoint >= 0x2CE5 && codepoint <= 0x2CEA) return Unicode_Script_COPTIC;
	if (codepoint >= 0x2CEB && codepoint <= 0x2CEE) return Unicode_Script_COPTIC;
	if (codepoint >= 0x2CEF && codepoint <= 0x2CF1) return Unicode_Script_COPTIC;
	if (codepoint >= 0x2CF2 && codepoint <= 0x2CF3) return Unicode_Script_COPTIC;
	if (codepoint >= 0x2CF9 && codepoint <= 0x2CFC) return Unicode_Script_COPTIC;
	if (codepoint == 0x2CFD) return Unicode_Script_COPTIC;
	if (codepoint >= 0x2CFE && codepoint <= 0x2CFF) return Unicode_Script_COPTIC;
	if (codepoint >= 0x1980 && codepoint <= 0x19AB) return Unicode_Script_NEW_TAI_LUE;
	if (codepoint >= 0x19B0 && codepoint <= 0x19C9) return Unicode_Script_NEW_TAI_LUE;
	if (codepoint >= 0x19D0 && codepoint <= 0x19D9) return Unicode_Script_NEW_TAI_LUE;
	if (codepoint == 0x19DA) return Unicode_Script_NEW_TAI_LUE;
	if (codepoint >= 0x19DE && codepoint <= 0x19DF) return Unicode_Script_NEW_TAI_LUE;
	if (codepoint >= 0x2C00 && codepoint <= 0x2C2E) return Unicode_Script_GLAGOLITIC;
	if (codepoint >= 0x2C30 && codepoint <= 0x2C5E) return Unicode_Script_GLAGOLITIC;
	if (codepoint >= 0x1E000 && codepoint <= 0x1E006) return Unicode_Script_GLAGOLITIC;
	if (codepoint >= 0x1E008 && codepoint <= 0x1E018) return Unicode_Script_GLAGOLITIC;
	if (codepoint >= 0x1E01B && codepoint <= 0x1E021) return Unicode_Script_GLAGOLITIC;
	if (codepoint >= 0x1E023 && codepoint <= 0x1E024) return Unicode_Script_GLAGOLITIC;
	if (codepoint >= 0x1E026 && codepoint <= 0x1E02A) return Unicode_Script_GLAGOLITIC;
	if (codepoint >= 0x2D30 && codepoint <= 0x2D67) return Unicode_Script_TIFINAGH;
	if (codepoint == 0x2D6F) return Unicode_Script_TIFINAGH;
	if (codepoint == 0x2D70) return Unicode_Script_TIFINAGH;
	if (codepoint == 0x2D7F) return Unicode_Script_TIFINAGH;
	if (codepoint >= 0xA800 && codepoint <= 0xA801) return Unicode_Script_SYLOTI_NAGRI;
	if (codepoint == 0xA802) return Unicode_Script_SYLOTI_NAGRI;
	if (codepoint >= 0xA803 && codepoint <= 0xA805) return Unicode_Script_SYLOTI_NAGRI;
	if (codepoint == 0xA806) return Unicode_Script_SYLOTI_NAGRI;
	if (codepoint >= 0xA807 && codepoint <= 0xA80A) return Unicode_Script_SYLOTI_NAGRI;
	if (codepoint == 0xA80B) return Unicode_Script_SYLOTI_NAGRI;
	if (codepoint >= 0xA80C && codepoint <= 0xA822) return Unicode_Script_SYLOTI_NAGRI;
	if (codepoint >= 0xA823 && codepoint <= 0xA824) return Unicode_Script_SYLOTI_NAGRI;
	if (codepoint >= 0xA825 && codepoint <= 0xA826) return Unicode_Script_SYLOTI_NAGRI;
	if (codepoint == 0xA827) return Unicode_Script_SYLOTI_NAGRI;
	if (codepoint >= 0xA828 && codepoint <= 0xA82B) return Unicode_Script_SYLOTI_NAGRI;
	if (codepoint == 0xA82C) return Unicode_Script_SYLOTI_NAGRI;
	if (codepoint >= 0x103A0 && codepoint <= 0x103C3) return Unicode_Script_OLD_PERSIAN;
	if (codepoint >= 0x103C8 && codepoint <= 0x103CF) return Unicode_Script_OLD_PERSIAN;
	if (codepoint == 0x103D0) return Unicode_Script_OLD_PERSIAN;
	if (codepoint >= 0x103D1 && codepoint <= 0x103D5) return Unicode_Script_OLD_PERSIAN;
	if (codepoint == 0x10A00) return Unicode_Script_KHAROSHTHI;
	if (codepoint >= 0x10A01 && codepoint <= 0x10A03) return Unicode_Script_KHAROSHTHI;
	if (codepoint >= 0x10A05 && codepoint <= 0x10A06) return Unicode_Script_KHAROSHTHI;
	if (codepoint >= 0x10A0C && codepoint <= 0x10A0F) return Unicode_Script_KHAROSHTHI;
	if (codepoint >= 0x10A10 && codepoint <= 0x10A13) return Unicode_Script_KHAROSHTHI;
	if (codepoint >= 0x10A15 && codepoint <= 0x10A17) return Unicode_Script_KHAROSHTHI;
	if (codepoint >= 0x10A19 && codepoint <= 0x10A35) return Unicode_Script_KHAROSHTHI;
	if (codepoint >= 0x10A38 && codepoint <= 0x10A3A) return Unicode_Script_KHAROSHTHI;
	if (codepoint == 0x10A3F) return Unicode_Script_KHAROSHTHI;
	if (codepoint >= 0x10A40 && codepoint <= 0x10A48) return Unicode_Script_KHAROSHTHI;
	if (codepoint >= 0x10A50 && codepoint <= 0x10A58) return Unicode_Script_KHAROSHTHI;
	if (codepoint >= 0x1B00 && codepoint <= 0x1B03) return Unicode_Script_BALINESE;
	if (codepoint == 0x1B04) return Unicode_Script_BALINESE;
	if (codepoint >= 0x1B05 && codepoint <= 0x1B33) return Unicode_Script_BALINESE;
	if (codepoint == 0x1B34) return Unicode_Script_BALINESE;
	if (codepoint == 0x1B35) return Unicode_Script_BALINESE;
	if (codepoint >= 0x1B36 && codepoint <= 0x1B3A) return Unicode_Script_BALINESE;
	if (codepoint == 0x1B3B) return Unicode_Script_BALINESE;
	if (codepoint == 0x1B3C) return Unicode_Script_BALINESE;
	if (codepoint >= 0x1B3D && codepoint <= 0x1B41) return Unicode_Script_BALINESE;
	if (codepoint == 0x1B42) return Unicode_Script_BALINESE;
	if (codepoint >= 0x1B43 && codepoint <= 0x1B44) return Unicode_Script_BALINESE;
	if (codepoint >= 0x1B45 && codepoint <= 0x1B4B) return Unicode_Script_BALINESE;
	if (codepoint >= 0x1B50 && codepoint <= 0x1B59) return Unicode_Script_BALINESE;
	if (codepoint >= 0x1B5A && codepoint <= 0x1B60) return Unicode_Script_BALINESE;
	if (codepoint >= 0x1B61 && codepoint <= 0x1B6A) return Unicode_Script_BALINESE;
	if (codepoint >= 0x1B6B && codepoint <= 0x1B73) return Unicode_Script_BALINESE;
	if (codepoint >= 0x1B74 && codepoint <= 0x1B7C) return Unicode_Script_BALINESE;
	if (codepoint >= 0x12000 && codepoint <= 0x12399) return Unicode_Script_CUNEIFORM;
	if (codepoint >= 0x12400 && codepoint <= 0x1246E) return Unicode_Script_CUNEIFORM;
	if (codepoint >= 0x12470 && codepoint <= 0x12474) return Unicode_Script_CUNEIFORM;
	if (codepoint >= 0x12480 && codepoint <= 0x12543) return Unicode_Script_CUNEIFORM;
	if (codepoint >= 0x10900 && codepoint <= 0x10915) return Unicode_Script_PHOENICIAN;
	if (codepoint >= 0x10916 && codepoint <= 0x1091B) return Unicode_Script_PHOENICIAN;
	if (codepoint == 0x1091F) return Unicode_Script_PHOENICIAN;
	if (codepoint >= 0xA840 && codepoint <= 0xA873) return Unicode_Script_PHAGS_PA;
	if (codepoint >= 0xA874 && codepoint <= 0xA877) return Unicode_Script_PHAGS_PA;
	if (codepoint >= 0x07C0 && codepoint <= 0x07C9) return Unicode_Script_NKO;
	if (codepoint >= 0x07CA && codepoint <= 0x07EA) return Unicode_Script_NKO;
	if (codepoint >= 0x07EB && codepoint <= 0x07F3) return Unicode_Script_NKO;
	if (codepoint >= 0x07F4 && codepoint <= 0x07F5) return Unicode_Script_NKO;
	if (codepoint == 0x07F6) return Unicode_Script_NKO;
	if (codepoint >= 0x07F7 && codepoint <= 0x07F9) return Unicode_Script_NKO;
	if (codepoint == 0x07FA) return Unicode_Script_NKO;
	if (codepoint == 0x07FD) return Unicode_Script_NKO;
	if (codepoint >= 0x07FE && codepoint <= 0x07FF) return Unicode_Script_NKO;
	if (codepoint >= 0x1B80 && codepoint <= 0x1B81) return Unicode_Script_SUNDANESE;
	if (codepoint == 0x1B82) return Unicode_Script_SUNDANESE;
	if (codepoint >= 0x1B83 && codepoint <= 0x1BA0) return Unicode_Script_SUNDANESE;
	if (codepoint == 0x1BA1) return Unicode_Script_SUNDANESE;
	if (codepoint >= 0x1BA2 && codepoint <= 0x1BA5) return Unicode_Script_SUNDANESE;
	if (codepoint >= 0x1BA6 && codepoint <= 0x1BA7) return Unicode_Script_SUNDANESE;
	if (codepoint >= 0x1BA8 && codepoint <= 0x1BA9) return Unicode_Script_SUNDANESE;
	if (codepoint == 0x1BAA) return Unicode_Script_SUNDANESE;
	if (codepoint >= 0x1BAB && codepoint <= 0x1BAD) return Unicode_Script_SUNDANESE;
	if (codepoint >= 0x1BAE && codepoint <= 0x1BAF) return Unicode_Script_SUNDANESE;
	if (codepoint >= 0x1BB0 && codepoint <= 0x1BB9) return Unicode_Script_SUNDANESE;
	if (codepoint >= 0x1BBA && codepoint <= 0x1BBF) return Unicode_Script_SUNDANESE;
	if (codepoint >= 0x1CC0 && codepoint <= 0x1CC7) return Unicode_Script_SUNDANESE;
	if (codepoint >= 0x1C00 && codepoint <= 0x1C23) return Unicode_Script_LEPCHA;
	if (codepoint >= 0x1C24 && codepoint <= 0x1C2B) return Unicode_Script_LEPCHA;
	if (codepoint >= 0x1C2C && codepoint <= 0x1C33) return Unicode_Script_LEPCHA;
	if (codepoint >= 0x1C34 && codepoint <= 0x1C35) return Unicode_Script_LEPCHA;
	if (codepoint >= 0x1C36 && codepoint <= 0x1C37) return Unicode_Script_LEPCHA;
	if (codepoint >= 0x1C3B && codepoint <= 0x1C3F) return Unicode_Script_LEPCHA;
	if (codepoint >= 0x1C40 && codepoint <= 0x1C49) return Unicode_Script_LEPCHA;
	if (codepoint >= 0x1C4D && codepoint <= 0x1C4F) return Unicode_Script_LEPCHA;
	if (codepoint >= 0x1C50 && codepoint <= 0x1C59) return Unicode_Script_OL_CHIKI;
	if (codepoint >= 0x1C5A && codepoint <= 0x1C77) return Unicode_Script_OL_CHIKI;
	if (codepoint >= 0x1C78 && codepoint <= 0x1C7D) return Unicode_Script_OL_CHIKI;
	if (codepoint >= 0x1C7E && codepoint <= 0x1C7F) return Unicode_Script_OL_CHIKI;
	if (codepoint >= 0xA500 && codepoint <= 0xA60B) return Unicode_Script_VAI;
	if (codepoint == 0xA60C) return Unicode_Script_VAI;
	if (codepoint >= 0xA60D && codepoint <= 0xA60F) return Unicode_Script_VAI;
	if (codepoint >= 0xA610 && codepoint <= 0xA61F) return Unicode_Script_VAI;
	if (codepoint >= 0xA620 && codepoint <= 0xA629) return Unicode_Script_VAI;
	if (codepoint >= 0xA62A && codepoint <= 0xA62B) return Unicode_Script_VAI;
	if (codepoint >= 0xA880 && codepoint <= 0xA881) return Unicode_Script_SAURASHTRA;
	if (codepoint >= 0xA882 && codepoint <= 0xA8B3) return Unicode_Script_SAURASHTRA;
	if (codepoint >= 0xA8B4 && codepoint <= 0xA8C3) return Unicode_Script_SAURASHTRA;
	if (codepoint >= 0xA8C4 && codepoint <= 0xA8C5) return Unicode_Script_SAURASHTRA;
	if (codepoint >= 0xA8CE && codepoint <= 0xA8CF) return Unicode_Script_SAURASHTRA;
	if (codepoint >= 0xA8D0 && codepoint <= 0xA8D9) return Unicode_Script_SAURASHTRA;
	if (codepoint >= 0xA900 && codepoint <= 0xA909) return Unicode_Script_KAYAH_LI;
	if (codepoint >= 0xA90A && codepoint <= 0xA925) return Unicode_Script_KAYAH_LI;
	if (codepoint >= 0xA926 && codepoint <= 0xA92D) return Unicode_Script_KAYAH_LI;
	if (codepoint == 0xA92F) return Unicode_Script_KAYAH_LI;
	if (codepoint >= 0xA930 && codepoint <= 0xA946) return Unicode_Script_REJANG;
	if (codepoint >= 0xA947 && codepoint <= 0xA951) return Unicode_Script_REJANG;
	if (codepoint >= 0xA952 && codepoint <= 0xA953) return Unicode_Script_REJANG;
	if (codepoint == 0xA95F) return Unicode_Script_REJANG;
	if (codepoint >= 0x10280 && codepoint <= 0x1029C) return Unicode_Script_LYCIAN;
	if (codepoint >= 0x102A0 && codepoint <= 0x102D0) return Unicode_Script_CARIAN;
	if (codepoint >= 0x10920 && codepoint <= 0x10939) return Unicode_Script_LYDIAN;
	if (codepoint == 0x1093F) return Unicode_Script_LYDIAN;
	if (codepoint >= 0xAA00 && codepoint <= 0xAA28) return Unicode_Script_CHAM;
	if (codepoint >= 0xAA29 && codepoint <= 0xAA2E) return Unicode_Script_CHAM;
	if (codepoint >= 0xAA2F && codepoint <= 0xAA30) return Unicode_Script_CHAM;
	if (codepoint >= 0xAA31 && codepoint <= 0xAA32) return Unicode_Script_CHAM;
	if (codepoint >= 0xAA33 && codepoint <= 0xAA34) return Unicode_Script_CHAM;
	if (codepoint >= 0xAA35 && codepoint <= 0xAA36) return Unicode_Script_CHAM;
	if (codepoint >= 0xAA40 && codepoint <= 0xAA42) return Unicode_Script_CHAM;
	if (codepoint == 0xAA43) return Unicode_Script_CHAM;
	if (codepoint >= 0xAA44 && codepoint <= 0xAA4B) return Unicode_Script_CHAM;
	if (codepoint == 0xAA4C) return Unicode_Script_CHAM;
	if (codepoint == 0xAA4D) return Unicode_Script_CHAM;
	if (codepoint >= 0xAA50 && codepoint <= 0xAA59) return Unicode_Script_CHAM;
	if (codepoint >= 0xAA5C && codepoint <= 0xAA5F) return Unicode_Script_CHAM;
	if (codepoint >= 0x1A20 && codepoint <= 0x1A54) return Unicode_Script_TAI_THAM;
	if (codepoint == 0x1A55) return Unicode_Script_TAI_THAM;
	if (codepoint == 0x1A56) return Unicode_Script_TAI_THAM;
	if (codepoint == 0x1A57) return Unicode_Script_TAI_THAM;
	if (codepoint >= 0x1A58 && codepoint <= 0x1A5E) return Unicode_Script_TAI_THAM;
	if (codepoint == 0x1A60) return Unicode_Script_TAI_THAM;
	if (codepoint == 0x1A61) return Unicode_Script_TAI_THAM;
	if (codepoint == 0x1A62) return Unicode_Script_TAI_THAM;
	if (codepoint >= 0x1A63 && codepoint <= 0x1A64) return Unicode_Script_TAI_THAM;
	if (codepoint >= 0x1A65 && codepoint <= 0x1A6C) return Unicode_Script_TAI_THAM;
	if (codepoint >= 0x1A6D && codepoint <= 0x1A72) return Unicode_Script_TAI_THAM;
	if (codepoint >= 0x1A73 && codepoint <= 0x1A7C) return Unicode_Script_TAI_THAM;
	if (codepoint == 0x1A7F) return Unicode_Script_TAI_THAM;
	if (codepoint >= 0x1A80 && codepoint <= 0x1A89) return Unicode_Script_TAI_THAM;
	if (codepoint >= 0x1A90 && codepoint <= 0x1A99) return Unicode_Script_TAI_THAM;
	if (codepoint >= 0x1AA0 && codepoint <= 0x1AA6) return Unicode_Script_TAI_THAM;
	if (codepoint == 0x1AA7) return Unicode_Script_TAI_THAM;
	if (codepoint >= 0x1AA8 && codepoint <= 0x1AAD) return Unicode_Script_TAI_THAM;
	if (codepoint >= 0xAA80 && codepoint <= 0xAAAF) return Unicode_Script_TAI_VIET;
	if (codepoint == 0xAAB0) return Unicode_Script_TAI_VIET;
	if (codepoint == 0xAAB1) return Unicode_Script_TAI_VIET;
	if (codepoint >= 0xAAB2 && codepoint <= 0xAAB4) return Unicode_Script_TAI_VIET;
	if (codepoint >= 0xAAB5 && codepoint <= 0xAAB6) return Unicode_Script_TAI_VIET;
	if (codepoint >= 0xAAB7 && codepoint <= 0xAAB8) return Unicode_Script_TAI_VIET;
	if (codepoint >= 0xAAB9 && codepoint <= 0xAABD) return Unicode_Script_TAI_VIET;
	if (codepoint >= 0xAABE && codepoint <= 0xAABF) return Unicode_Script_TAI_VIET;
	if (codepoint == 0xAAC0) return Unicode_Script_TAI_VIET;
	if (codepoint == 0xAAC1) return Unicode_Script_TAI_VIET;
	if (codepoint == 0xAAC2) return Unicode_Script_TAI_VIET;
	if (codepoint >= 0xAADB && codepoint <= 0xAADC) return Unicode_Script_TAI_VIET;
	if (codepoint == 0xAADD) return Unicode_Script_TAI_VIET;
	if (codepoint >= 0xAADE && codepoint <= 0xAADF) return Unicode_Script_TAI_VIET;
	if (codepoint >= 0x10B00 && codepoint <= 0x10B35) return Unicode_Script_AVESTAN;
	if (codepoint >= 0x10B39 && codepoint <= 0x10B3F) return Unicode_Script_AVESTAN;
	if (codepoint >= 0x13000 && codepoint <= 0x1342E) return Unicode_Script_EGYPTIAN_HIEROGLYPHS;
	if (codepoint >= 0x13430 && codepoint <= 0x13438) return Unicode_Script_EGYPTIAN_HIEROGLYPHS;
	if (codepoint >= 0x0800 && codepoint <= 0x0815) return Unicode_Script_SAMARITAN;
	if (codepoint >= 0x0816 && codepoint <= 0x0819) return Unicode_Script_SAMARITAN;
	if (codepoint == 0x081A) return Unicode_Script_SAMARITAN;
	if (codepoint >= 0x081B && codepoint <= 0x0823) return Unicode_Script_SAMARITAN;
	if (codepoint == 0x0824) return Unicode_Script_SAMARITAN;
	if (codepoint >= 0x0825 && codepoint <= 0x0827) return Unicode_Script_SAMARITAN;
	if (codepoint == 0x0828) return Unicode_Script_SAMARITAN;
	if (codepoint >= 0x0829 && codepoint <= 0x082D) return Unicode_Script_SAMARITAN;
	if (codepoint >= 0x0830 && codepoint <= 0x083E) return Unicode_Script_SAMARITAN;
	if (codepoint >= 0xA4D0 && codepoint <= 0xA4F7) return Unicode_Script_LISU;
	if (codepoint >= 0xA4F8 && codepoint <= 0xA4FD) return Unicode_Script_LISU;
	if (codepoint >= 0xA4FE && codepoint <= 0xA4FF) return Unicode_Script_LISU;
	if (codepoint == 0x11FB0) return Unicode_Script_LISU;
	if (codepoint >= 0xA6A0 && codepoint <= 0xA6E5) return Unicode_Script_BAMUM;
	if (codepoint >= 0xA6E6 && codepoint <= 0xA6EF) return Unicode_Script_BAMUM;
	if (codepoint >= 0xA6F0 && codepoint <= 0xA6F1) return Unicode_Script_BAMUM;
	if (codepoint >= 0xA6F2 && codepoint <= 0xA6F7) return Unicode_Script_BAMUM;
	if (codepoint >= 0x16800 && codepoint <= 0x16A38) return Unicode_Script_BAMUM;
	if (codepoint >= 0xA980 && codepoint <= 0xA982) return Unicode_Script_JAVANESE;
	if (codepoint == 0xA983) return Unicode_Script_JAVANESE;
	if (codepoint >= 0xA984 && codepoint <= 0xA9B2) return Unicode_Script_JAVANESE;
	if (codepoint == 0xA9B3) return Unicode_Script_JAVANESE;
	if (codepoint >= 0xA9B4 && codepoint <= 0xA9B5) return Unicode_Script_JAVANESE;
	if (codepoint >= 0xA9B6 && codepoint <= 0xA9B9) return Unicode_Script_JAVANESE;
	if (codepoint >= 0xA9BA && codepoint <= 0xA9BB) return Unicode_Script_JAVANESE;
	if (codepoint >= 0xA9BC && codepoint <= 0xA9BD) return Unicode_Script_JAVANESE;
	if (codepoint >= 0xA9BE && codepoint <= 0xA9C0) return Unicode_Script_JAVANESE;
	if (codepoint >= 0xA9C1 && codepoint <= 0xA9CD) return Unicode_Script_JAVANESE;
	if (codepoint >= 0xA9D0 && codepoint <= 0xA9D9) return Unicode_Script_JAVANESE;
	if (codepoint >= 0xA9DE && codepoint <= 0xA9DF) return Unicode_Script_JAVANESE;
	if (codepoint >= 0xAAE0 && codepoint <= 0xAAEA) return Unicode_Script_MEETEI_MAYEK;
	if (codepoint == 0xAAEB) return Unicode_Script_MEETEI_MAYEK;
	if (codepoint >= 0xAAEC && codepoint <= 0xAAED) return Unicode_Script_MEETEI_MAYEK;
	if (codepoint >= 0xAAEE && codepoint <= 0xAAEF) return Unicode_Script_MEETEI_MAYEK;
	if (codepoint >= 0xAAF0 && codepoint <= 0xAAF1) return Unicode_Script_MEETEI_MAYEK;
	if (codepoint == 0xAAF2) return Unicode_Script_MEETEI_MAYEK;
	if (codepoint >= 0xAAF3 && codepoint <= 0xAAF4) return Unicode_Script_MEETEI_MAYEK;
	if (codepoint == 0xAAF5) return Unicode_Script_MEETEI_MAYEK;
	if (codepoint == 0xAAF6) return Unicode_Script_MEETEI_MAYEK;
	if (codepoint >= 0xABC0 && codepoint <= 0xABE2) return Unicode_Script_MEETEI_MAYEK;
	if (codepoint >= 0xABE3 && codepoint <= 0xABE4) return Unicode_Script_MEETEI_MAYEK;
	if (codepoint == 0xABE5) return Unicode_Script_MEETEI_MAYEK;
	if (codepoint >= 0xABE6 && codepoint <= 0xABE7) return Unicode_Script_MEETEI_MAYEK;
	if (codepoint == 0xABE8) return Unicode_Script_MEETEI_MAYEK;
	if (codepoint >= 0xABE9 && codepoint <= 0xABEA) return Unicode_Script_MEETEI_MAYEK;
	if (codepoint == 0xABEB) return Unicode_Script_MEETEI_MAYEK;
	if (codepoint == 0xABEC) return Unicode_Script_MEETEI_MAYEK;
	if (codepoint == 0xABED) return Unicode_Script_MEETEI_MAYEK;
	if (codepoint >= 0xABF0 && codepoint <= 0xABF9) return Unicode_Script_MEETEI_MAYEK;
	if (codepoint >= 0x10840 && codepoint <= 0x10855) return Unicode_Script_IMPERIAL_ARAMAIC;
	if (codepoint == 0x10857) return Unicode_Script_IMPERIAL_ARAMAIC;
	if (codepoint >= 0x10858 && codepoint <= 0x1085F) return Unicode_Script_IMPERIAL_ARAMAIC;
	if (codepoint >= 0x10A60 && codepoint <= 0x10A7C) return Unicode_Script_OLD_SOUTH_ARABIAN;
	if (codepoint >= 0x10A7D && codepoint <= 0x10A7E) return Unicode_Script_OLD_SOUTH_ARABIAN;
	if (codepoint == 0x10A7F) return Unicode_Script_OLD_SOUTH_ARABIAN;
	if (codepoint >= 0x10B40 && codepoint <= 0x10B55) return Unicode_Script_INSCRIPTIONAL_PARTHIAN;
	if (codepoint >= 0x10B58 && codepoint <= 0x10B5F) return Unicode_Script_INSCRIPTIONAL_PARTHIAN;
	if (codepoint >= 0x10B60 && codepoint <= 0x10B72) return Unicode_Script_INSCRIPTIONAL_PAHLAVI;
	if (codepoint >= 0x10B78 && codepoint <= 0x10B7F) return Unicode_Script_INSCRIPTIONAL_PAHLAVI;
	if (codepoint >= 0x10C00 && codepoint <= 0x10C48) return Unicode_Script_OLD_TURKIC;
	if (codepoint >= 0x11080 && codepoint <= 0x11081) return Unicode_Script_KAITHI;
	if (codepoint == 0x11082) return Unicode_Script_KAITHI;
	if (codepoint >= 0x11083 && codepoint <= 0x110AF) return Unicode_Script_KAITHI;
	if (codepoint >= 0x110B0 && codepoint <= 0x110B2) return Unicode_Script_KAITHI;
	if (codepoint >= 0x110B3 && codepoint <= 0x110B6) return Unicode_Script_KAITHI;
	if (codepoint >= 0x110B7 && codepoint <= 0x110B8) return Unicode_Script_KAITHI;
	if (codepoint >= 0x110B9 && codepoint <= 0x110BA) return Unicode_Script_KAITHI;
	if (codepoint >= 0x110BB && codepoint <= 0x110BC) return Unicode_Script_KAITHI;
	if (codepoint == 0x110BD) return Unicode_Script_KAITHI;
	if (codepoint >= 0x110BE && codepoint <= 0x110C1) return Unicode_Script_KAITHI;
	if (codepoint == 0x110CD) return Unicode_Script_KAITHI;
	if (codepoint >= 0x1BC0 && codepoint <= 0x1BE5) return Unicode_Script_BATAK;
	if (codepoint == 0x1BE6) return Unicode_Script_BATAK;
	if (codepoint == 0x1BE7) return Unicode_Script_BATAK;
	if (codepoint >= 0x1BE8 && codepoint <= 0x1BE9) return Unicode_Script_BATAK;
	if (codepoint >= 0x1BEA && codepoint <= 0x1BEC) return Unicode_Script_BATAK;
	if (codepoint == 0x1BED) return Unicode_Script_BATAK;
	if (codepoint == 0x1BEE) return Unicode_Script_BATAK;
	if (codepoint >= 0x1BEF && codepoint <= 0x1BF1) return Unicode_Script_BATAK;
	if (codepoint >= 0x1BF2 && codepoint <= 0x1BF3) return Unicode_Script_BATAK;
	if (codepoint >= 0x1BFC && codepoint <= 0x1BFF) return Unicode_Script_BATAK;
	if (codepoint == 0x11000) return Unicode_Script_BRAHMI;
	if (codepoint == 0x11001) return Unicode_Script_BRAHMI;
	if (codepoint == 0x11002) return Unicode_Script_BRAHMI;
	if (codepoint >= 0x11003 && codepoint <= 0x11037) return Unicode_Script_BRAHMI;
	if (codepoint >= 0x11038 && codepoint <= 0x11046) return Unicode_Script_BRAHMI;
	if (codepoint >= 0x11047 && codepoint <= 0x1104D) return Unicode_Script_BRAHMI;
	if (codepoint >= 0x11052 && codepoint <= 0x11065) return Unicode_Script_BRAHMI;
	if (codepoint >= 0x11066 && codepoint <= 0x1106F) return Unicode_Script_BRAHMI;
	if (codepoint == 0x1107F) return Unicode_Script_BRAHMI;
	if (codepoint >= 0x0840 && codepoint <= 0x0858) return Unicode_Script_MANDAIC;
	if (codepoint >= 0x0859 && codepoint <= 0x085B) return Unicode_Script_MANDAIC;
	if (codepoint == 0x085E) return Unicode_Script_MANDAIC;
	if (codepoint >= 0x11100 && codepoint <= 0x11102) return Unicode_Script_CHAKMA;
	if (codepoint >= 0x11103 && codepoint <= 0x11126) return Unicode_Script_CHAKMA;
	if (codepoint >= 0x11127 && codepoint <= 0x1112B) return Unicode_Script_CHAKMA;
	if (codepoint == 0x1112C) return Unicode_Script_CHAKMA;
	if (codepoint >= 0x1112D && codepoint <= 0x11134) return Unicode_Script_CHAKMA;
	if (codepoint >= 0x11136 && codepoint <= 0x1113F) return Unicode_Script_CHAKMA;
	if (codepoint >= 0x11140 && codepoint <= 0x11143) return Unicode_Script_CHAKMA;
	if (codepoint == 0x11144) return Unicode_Script_CHAKMA;
	if (codepoint >= 0x11145 && codepoint <= 0x11146) return Unicode_Script_CHAKMA;
	if (codepoint == 0x11147) return Unicode_Script_CHAKMA;
	if (codepoint >= 0x109A0 && codepoint <= 0x109B7) return Unicode_Script_MEROITIC_CURSIVE;
	if (codepoint >= 0x109BC && codepoint <= 0x109BD) return Unicode_Script_MEROITIC_CURSIVE;
	if (codepoint >= 0x109BE && codepoint <= 0x109BF) return Unicode_Script_MEROITIC_CURSIVE;
	if (codepoint >= 0x109C0 && codepoint <= 0x109CF) return Unicode_Script_MEROITIC_CURSIVE;
	if (codepoint >= 0x109D2 && codepoint <= 0x109FF) return Unicode_Script_MEROITIC_CURSIVE;
	if (codepoint >= 0x10980 && codepoint <= 0x1099F) return Unicode_Script_MEROITIC_HIEROGLYPHS;
	if (codepoint >= 0x16F00 && codepoint <= 0x16F4A) return Unicode_Script_MIAO;
	if (codepoint == 0x16F4F) return Unicode_Script_MIAO;
	if (codepoint == 0x16F50) return Unicode_Script_MIAO;
	if (codepoint >= 0x16F51 && codepoint <= 0x16F87) return Unicode_Script_MIAO;
	if (codepoint >= 0x16F8F && codepoint <= 0x16F92) return Unicode_Script_MIAO;
	if (codepoint >= 0x16F93 && codepoint <= 0x16F9F) return Unicode_Script_MIAO;
	if (codepoint >= 0x11180 && codepoint <= 0x11181) return Unicode_Script_SHARADA;
	if (codepoint == 0x11182) return Unicode_Script_SHARADA;
	if (codepoint >= 0x11183 && codepoint <= 0x111B2) return Unicode_Script_SHARADA;
	if (codepoint >= 0x111B3 && codepoint <= 0x111B5) return Unicode_Script_SHARADA;
	if (codepoint >= 0x111B6 && codepoint <= 0x111BE) return Unicode_Script_SHARADA;
	if (codepoint >= 0x111BF && codepoint <= 0x111C0) return Unicode_Script_SHARADA;
	if (codepoint >= 0x111C1 && codepoint <= 0x111C4) return Unicode_Script_SHARADA;
	if (codepoint >= 0x111C5 && codepoint <= 0x111C8) return Unicode_Script_SHARADA;
	if (codepoint >= 0x111C9 && codepoint <= 0x111CC) return Unicode_Script_SHARADA;
	if (codepoint == 0x111CD) return Unicode_Script_SHARADA;
	if (codepoint == 0x111CE) return Unicode_Script_SHARADA;
	if (codepoint == 0x111CF) return Unicode_Script_SHARADA;
	if (codepoint >= 0x111D0 && codepoint <= 0x111D9) return Unicode_Script_SHARADA;
	if (codepoint == 0x111DA) return Unicode_Script_SHARADA;
	if (codepoint == 0x111DB) return Unicode_Script_SHARADA;
	if (codepoint == 0x111DC) return Unicode_Script_SHARADA;
	if (codepoint >= 0x111DD && codepoint <= 0x111DF) return Unicode_Script_SHARADA;
	if (codepoint >= 0x110D0 && codepoint <= 0x110E8) return Unicode_Script_SORA_SOMPENG;
	if (codepoint >= 0x110F0 && codepoint <= 0x110F9) return Unicode_Script_SORA_SOMPENG;
	if (codepoint >= 0x11680 && codepoint <= 0x116AA) return Unicode_Script_TAKRI;
	if (codepoint == 0x116AB) return Unicode_Script_TAKRI;
	if (codepoint == 0x116AC) return Unicode_Script_TAKRI;
	if (codepoint == 0x116AD) return Unicode_Script_TAKRI;
	if (codepoint >= 0x116AE && codepoint <= 0x116AF) return Unicode_Script_TAKRI;
	if (codepoint >= 0x116B0 && codepoint <= 0x116B5) return Unicode_Script_TAKRI;
	if (codepoint == 0x116B6) return Unicode_Script_TAKRI;
	if (codepoint == 0x116B7) return Unicode_Script_TAKRI;
	if (codepoint == 0x116B8) return Unicode_Script_TAKRI;
	if (codepoint >= 0x116C0 && codepoint <= 0x116C9) return Unicode_Script_TAKRI;
	if (codepoint >= 0x10530 && codepoint <= 0x10563) return Unicode_Script_CAUCASIAN_ALBANIAN;
	if (codepoint == 0x1056F) return Unicode_Script_CAUCASIAN_ALBANIAN;
	if (codepoint >= 0x16AD0 && codepoint <= 0x16AED) return Unicode_Script_BASSA_VAH;
	if (codepoint >= 0x16AF0 && codepoint <= 0x16AF4) return Unicode_Script_BASSA_VAH;
	if (codepoint == 0x16AF5) return Unicode_Script_BASSA_VAH;
	if (codepoint >= 0x1BC00 && codepoint <= 0x1BC6A) return Unicode_Script_DUPLOYAN;
	if (codepoint >= 0x1BC70 && codepoint <= 0x1BC7C) return Unicode_Script_DUPLOYAN;
	if (codepoint >= 0x1BC80 && codepoint <= 0x1BC88) return Unicode_Script_DUPLOYAN;
	if (codepoint >= 0x1BC90 && codepoint <= 0x1BC99) return Unicode_Script_DUPLOYAN;
	if (codepoint == 0x1BC9C) return Unicode_Script_DUPLOYAN;
	if (codepoint >= 0x1BC9D && codepoint <= 0x1BC9E) return Unicode_Script_DUPLOYAN;
	if (codepoint == 0x1BC9F) return Unicode_Script_DUPLOYAN;
	if (codepoint >= 0x10500 && codepoint <= 0x10527) return Unicode_Script_ELBASAN;
	if (codepoint >= 0x11300 && codepoint <= 0x11301) return Unicode_Script_GRANTHA;
	if (codepoint >= 0x11302 && codepoint <= 0x11303) return Unicode_Script_GRANTHA;
	if (codepoint >= 0x11305 && codepoint <= 0x1130C) return Unicode_Script_GRANTHA;
	if (codepoint >= 0x1130F && codepoint <= 0x11310) return Unicode_Script_GRANTHA;
	if (codepoint >= 0x11313 && codepoint <= 0x11328) return Unicode_Script_GRANTHA;
	if (codepoint >= 0x1132A && codepoint <= 0x11330) return Unicode_Script_GRANTHA;
	if (codepoint >= 0x11332 && codepoint <= 0x11333) return Unicode_Script_GRANTHA;
	if (codepoint >= 0x11335 && codepoint <= 0x11339) return Unicode_Script_GRANTHA;
	if (codepoint == 0x1133C) return Unicode_Script_GRANTHA;
	if (codepoint == 0x1133D) return Unicode_Script_GRANTHA;
	if (codepoint >= 0x1133E && codepoint <= 0x1133F) return Unicode_Script_GRANTHA;
	if (codepoint == 0x11340) return Unicode_Script_GRANTHA;
	if (codepoint >= 0x11341 && codepoint <= 0x11344) return Unicode_Script_GRANTHA;
	if (codepoint >= 0x11347 && codepoint <= 0x11348) return Unicode_Script_GRANTHA;
	if (codepoint >= 0x1134B && codepoint <= 0x1134D) return Unicode_Script_GRANTHA;
	if (codepoint == 0x11350) return Unicode_Script_GRANTHA;
	if (codepoint == 0x11357) return Unicode_Script_GRANTHA;
	if (codepoint >= 0x1135D && codepoint <= 0x11361) return Unicode_Script_GRANTHA;
	if (codepoint >= 0x11362 && codepoint <= 0x11363) return Unicode_Script_GRANTHA;
	if (codepoint >= 0x11366 && codepoint <= 0x1136C) return Unicode_Script_GRANTHA;
	if (codepoint >= 0x11370 && codepoint <= 0x11374) return Unicode_Script_GRANTHA;
	if (codepoint >= 0x16B00 && codepoint <= 0x16B2F) return Unicode_Script_PAHAWH_HMONG;
	if (codepoint >= 0x16B30 && codepoint <= 0x16B36) return Unicode_Script_PAHAWH_HMONG;
	if (codepoint >= 0x16B37 && codepoint <= 0x16B3B) return Unicode_Script_PAHAWH_HMONG;
	if (codepoint >= 0x16B3C && codepoint <= 0x16B3F) return Unicode_Script_PAHAWH_HMONG;
	if (codepoint >= 0x16B40 && codepoint <= 0x16B43) return Unicode_Script_PAHAWH_HMONG;
	if (codepoint == 0x16B44) return Unicode_Script_PAHAWH_HMONG;
	if (codepoint == 0x16B45) return Unicode_Script_PAHAWH_HMONG;
	if (codepoint >= 0x16B50 && codepoint <= 0x16B59) return Unicode_Script_PAHAWH_HMONG;
	if (codepoint >= 0x16B5B && codepoint <= 0x16B61) return Unicode_Script_PAHAWH_HMONG;
	if (codepoint >= 0x16B63 && codepoint <= 0x16B77) return Unicode_Script_PAHAWH_HMONG;
	if (codepoint >= 0x16B7D && codepoint <= 0x16B8F) return Unicode_Script_PAHAWH_HMONG;
	if (codepoint >= 0x11200 && codepoint <= 0x11211) return Unicode_Script_KHOJKI;
	if (codepoint >= 0x11213 && codepoint <= 0x1122B) return Unicode_Script_KHOJKI;
	if (codepoint >= 0x1122C && codepoint <= 0x1122E) return Unicode_Script_KHOJKI;
	if (codepoint >= 0x1122F && codepoint <= 0x11231) return Unicode_Script_KHOJKI;
	if (codepoint >= 0x11232 && codepoint <= 0x11233) return Unicode_Script_KHOJKI;
	if (codepoint == 0x11234) return Unicode_Script_KHOJKI;
	if (codepoint == 0x11235) return Unicode_Script_KHOJKI;
	if (codepoint >= 0x11236 && codepoint <= 0x11237) return Unicode_Script_KHOJKI;
	if (codepoint >= 0x11238 && codepoint <= 0x1123D) return Unicode_Script_KHOJKI;
	if (codepoint == 0x1123E) return Unicode_Script_KHOJKI;
	if (codepoint >= 0x10600 && codepoint <= 0x10736) return Unicode_Script_LINEAR_A;
	if (codepoint >= 0x10740 && codepoint <= 0x10755) return Unicode_Script_LINEAR_A;
	if (codepoint >= 0x10760 && codepoint <= 0x10767) return Unicode_Script_LINEAR_A;
	if (codepoint >= 0x11150 && codepoint <= 0x11172) return Unicode_Script_MAHAJANI;
	if (codepoint == 0x11173) return Unicode_Script_MAHAJANI;
	if (codepoint >= 0x11174 && codepoint <= 0x11175) return Unicode_Script_MAHAJANI;
	if (codepoint == 0x11176) return Unicode_Script_MAHAJANI;
	if (codepoint >= 0x10AC0 && codepoint <= 0x10AC7) return Unicode_Script_MANICHAEAN;
	if (codepoint == 0x10AC8) return Unicode_Script_MANICHAEAN;
	if (codepoint >= 0x10AC9 && codepoint <= 0x10AE4) return Unicode_Script_MANICHAEAN;
	if (codepoint >= 0x10AE5 && codepoint <= 0x10AE6) return Unicode_Script_MANICHAEAN;
	if (codepoint >= 0x10AEB && codepoint <= 0x10AEF) return Unicode_Script_MANICHAEAN;
	if (codepoint >= 0x10AF0 && codepoint <= 0x10AF6) return Unicode_Script_MANICHAEAN;
	if (codepoint >= 0x1E800 && codepoint <= 0x1E8C4) return Unicode_Script_MENDE_KIKAKUI;
	if (codepoint >= 0x1E8C7 && codepoint <= 0x1E8CF) return Unicode_Script_MENDE_KIKAKUI;
	if (codepoint >= 0x1E8D0 && codepoint <= 0x1E8D6) return Unicode_Script_MENDE_KIKAKUI;
	if (codepoint >= 0x11600 && codepoint <= 0x1162F) return Unicode_Script_MODI;
	if (codepoint >= 0x11630 && codepoint <= 0x11632) return Unicode_Script_MODI;
	if (codepoint >= 0x11633 && codepoint <= 0x1163A) return Unicode_Script_MODI;
	if (codepoint >= 0x1163B && codepoint <= 0x1163C) return Unicode_Script_MODI;
	if (codepoint == 0x1163D) return Unicode_Script_MODI;
	if (codepoint == 0x1163E) return Unicode_Script_MODI;
	if (codepoint >= 0x1163F && codepoint <= 0x11640) return Unicode_Script_MODI;
	if (codepoint >= 0x11641 && codepoint <= 0x11643) return Unicode_Script_MODI;
	if (codepoint == 0x11644) return Unicode_Script_MODI;
	if (codepoint >= 0x11650 && codepoint <= 0x11659) return Unicode_Script_MODI;
	if (codepoint >= 0x16A40 && codepoint <= 0x16A5E) return Unicode_Script_MRO;
	if (codepoint >= 0x16A60 && codepoint <= 0x16A69) return Unicode_Script_MRO;
	if (codepoint >= 0x16A6E && codepoint <= 0x16A6F) return Unicode_Script_MRO;
	if (codepoint >= 0x10A80 && codepoint <= 0x10A9C) return Unicode_Script_OLD_NORTH_ARABIAN;
	if (codepoint >= 0x10A9D && codepoint <= 0x10A9F) return Unicode_Script_OLD_NORTH_ARABIAN;
	if (codepoint >= 0x10880 && codepoint <= 0x1089E) return Unicode_Script_NABATAEAN;
	if (codepoint >= 0x108A7 && codepoint <= 0x108AF) return Unicode_Script_NABATAEAN;
	if (codepoint >= 0x10860 && codepoint <= 0x10876) return Unicode_Script_PALMYRENE;
	if (codepoint >= 0x10877 && codepoint <= 0x10878) return Unicode_Script_PALMYRENE;
	if (codepoint >= 0x10879 && codepoint <= 0x1087F) return Unicode_Script_PALMYRENE;
	if (codepoint >= 0x11AC0 && codepoint <= 0x11AF8) return Unicode_Script_PAU_CIN_HAU;
	if (codepoint >= 0x10350 && codepoint <= 0x10375) return Unicode_Script_OLD_PERMIC;
	if (codepoint >= 0x10376 && codepoint <= 0x1037A) return Unicode_Script_OLD_PERMIC;
	if (codepoint >= 0x10B80 && codepoint <= 0x10B91) return Unicode_Script_PSALTER_PAHLAVI;
	if (codepoint >= 0x10B99 && codepoint <= 0x10B9C) return Unicode_Script_PSALTER_PAHLAVI;
	if (codepoint >= 0x10BA9 && codepoint <= 0x10BAF) return Unicode_Script_PSALTER_PAHLAVI;
	if (codepoint >= 0x11580 && codepoint <= 0x115AE) return Unicode_Script_SIDDHAM;
	if (codepoint >= 0x115AF && codepoint <= 0x115B1) return Unicode_Script_SIDDHAM;
	if (codepoint >= 0x115B2 && codepoint <= 0x115B5) return Unicode_Script_SIDDHAM;
	if (codepoint >= 0x115B8 && codepoint <= 0x115BB) return Unicode_Script_SIDDHAM;
	if (codepoint >= 0x115BC && codepoint <= 0x115BD) return Unicode_Script_SIDDHAM;
	if (codepoint == 0x115BE) return Unicode_Script_SIDDHAM;
	if (codepoint >= 0x115BF && codepoint <= 0x115C0) return Unicode_Script_SIDDHAM;
	if (codepoint >= 0x115C1 && codepoint <= 0x115D7) return Unicode_Script_SIDDHAM;
	if (codepoint >= 0x115D8 && codepoint <= 0x115DB) return Unicode_Script_SIDDHAM;
	if (codepoint >= 0x115DC && codepoint <= 0x115DD) return Unicode_Script_SIDDHAM;
	if (codepoint >= 0x112B0 && codepoint <= 0x112DE) return Unicode_Script_KHUDAWADI;
	if (codepoint == 0x112DF) return Unicode_Script_KHUDAWADI;
	if (codepoint >= 0x112E0 && codepoint <= 0x112E2) return Unicode_Script_KHUDAWADI;
	if (codepoint >= 0x112E3 && codepoint <= 0x112EA) return Unicode_Script_KHUDAWADI;
	if (codepoint >= 0x112F0 && codepoint <= 0x112F9) return Unicode_Script_KHUDAWADI;
	if (codepoint >= 0x11480 && codepoint <= 0x114AF) return Unicode_Script_TIRHUTA;
	if (codepoint >= 0x114B0 && codepoint <= 0x114B2) return Unicode_Script_TIRHUTA;
	if (codepoint >= 0x114B3 && codepoint <= 0x114B8) return Unicode_Script_TIRHUTA;
	if (codepoint == 0x114B9) return Unicode_Script_TIRHUTA;
	if (codepoint == 0x114BA) return Unicode_Script_TIRHUTA;
	if (codepoint >= 0x114BB && codepoint <= 0x114BE) return Unicode_Script_TIRHUTA;
	if (codepoint >= 0x114BF && codepoint <= 0x114C0) return Unicode_Script_TIRHUTA;
	if (codepoint == 0x114C1) return Unicode_Script_TIRHUTA;
	if (codepoint >= 0x114C2 && codepoint <= 0x114C3) return Unicode_Script_TIRHUTA;
	if (codepoint >= 0x114C4 && codepoint <= 0x114C5) return Unicode_Script_TIRHUTA;
	if (codepoint == 0x114C6) return Unicode_Script_TIRHUTA;
	if (codepoint == 0x114C7) return Unicode_Script_TIRHUTA;
	if (codepoint >= 0x114D0 && codepoint <= 0x114D9) return Unicode_Script_TIRHUTA;
	if (codepoint >= 0x118A0 && codepoint <= 0x118DF) return Unicode_Script_WARANG_CITI;
	if (codepoint >= 0x118E0 && codepoint <= 0x118E9) return Unicode_Script_WARANG_CITI;
	if (codepoint >= 0x118EA && codepoint <= 0x118F2) return Unicode_Script_WARANG_CITI;
	if (codepoint == 0x118FF) return Unicode_Script_WARANG_CITI;
	if (codepoint >= 0x11700 && codepoint <= 0x1171A) return Unicode_Script_AHOM;
	if (codepoint >= 0x1171D && codepoint <= 0x1171F) return Unicode_Script_AHOM;
	if (codepoint >= 0x11720 && codepoint <= 0x11721) return Unicode_Script_AHOM;
	if (codepoint >= 0x11722 && codepoint <= 0x11725) return Unicode_Script_AHOM;
	if (codepoint == 0x11726) return Unicode_Script_AHOM;
	if (codepoint >= 0x11727 && codepoint <= 0x1172B) return Unicode_Script_AHOM;
	if (codepoint >= 0x11730 && codepoint <= 0x11739) return Unicode_Script_AHOM;
	if (codepoint >= 0x1173A && codepoint <= 0x1173B) return Unicode_Script_AHOM;
	if (codepoint >= 0x1173C && codepoint <= 0x1173E) return Unicode_Script_AHOM;
	if (codepoint == 0x1173F) return Unicode_Script_AHOM;
	if (codepoint >= 0x14400 && codepoint <= 0x14646) return Unicode_Script_ANATOLIAN_HIEROGLYPHS;
	if (codepoint >= 0x108E0 && codepoint <= 0x108F2) return Unicode_Script_HATRAN;
	if (codepoint >= 0x108F4 && codepoint <= 0x108F5) return Unicode_Script_HATRAN;
	if (codepoint >= 0x108FB && codepoint <= 0x108FF) return Unicode_Script_HATRAN;
	if (codepoint >= 0x11280 && codepoint <= 0x11286) return Unicode_Script_MULTANI;
	if (codepoint == 0x11288) return Unicode_Script_MULTANI;
	if (codepoint >= 0x1128A && codepoint <= 0x1128D) return Unicode_Script_MULTANI;
	if (codepoint >= 0x1128F && codepoint <= 0x1129D) return Unicode_Script_MULTANI;
	if (codepoint >= 0x1129F && codepoint <= 0x112A8) return Unicode_Script_MULTANI;
	if (codepoint == 0x112A9) return Unicode_Script_MULTANI;
	if (codepoint >= 0x10C80 && codepoint <= 0x10CB2) return Unicode_Script_OLD_HUNGARIAN;
	if (codepoint >= 0x10CC0 && codepoint <= 0x10CF2) return Unicode_Script_OLD_HUNGARIAN;
	if (codepoint >= 0x10CFA && codepoint <= 0x10CFF) return Unicode_Script_OLD_HUNGARIAN;
	if (codepoint >= 0x1D800 && codepoint <= 0x1D9FF) return Unicode_Script_SIGNWRITING;
	if (codepoint >= 0x1DA00 && codepoint <= 0x1DA36) return Unicode_Script_SIGNWRITING;
	if (codepoint >= 0x1DA37 && codepoint <= 0x1DA3A) return Unicode_Script_SIGNWRITING;
	if (codepoint >= 0x1DA3B && codepoint <= 0x1DA6C) return Unicode_Script_SIGNWRITING;
	if (codepoint >= 0x1DA6D && codepoint <= 0x1DA74) return Unicode_Script_SIGNWRITING;
	if (codepoint == 0x1DA75) return Unicode_Script_SIGNWRITING;
	if (codepoint >= 0x1DA76 && codepoint <= 0x1DA83) return Unicode_Script_SIGNWRITING;
	if (codepoint == 0x1DA84) return Unicode_Script_SIGNWRITING;
	if (codepoint >= 0x1DA85 && codepoint <= 0x1DA86) return Unicode_Script_SIGNWRITING;
	if (codepoint >= 0x1DA87 && codepoint <= 0x1DA8B) return Unicode_Script_SIGNWRITING;
	if (codepoint >= 0x1DA9B && codepoint <= 0x1DA9F) return Unicode_Script_SIGNWRITING;
	if (codepoint >= 0x1DAA1 && codepoint <= 0x1DAAF) return Unicode_Script_SIGNWRITING;
	if (codepoint >= 0x1E900 && codepoint <= 0x1E943) return Unicode_Script_ADLAM;
	if (codepoint >= 0x1E944 && codepoint <= 0x1E94A) return Unicode_Script_ADLAM;
	if (codepoint == 0x1E94B) return Unicode_Script_ADLAM;
	if (codepoint >= 0x1E950 && codepoint <= 0x1E959) return Unicode_Script_ADLAM;
	if (codepoint >= 0x1E95E && codepoint <= 0x1E95F) return Unicode_Script_ADLAM;
	if (codepoint >= 0x11C00 && codepoint <= 0x11C08) return Unicode_Script_BHAIKSUKI;
	if (codepoint >= 0x11C0A && codepoint <= 0x11C2E) return Unicode_Script_BHAIKSUKI;
	if (codepoint == 0x11C2F) return Unicode_Script_BHAIKSUKI;
	if (codepoint >= 0x11C30 && codepoint <= 0x11C36) return Unicode_Script_BHAIKSUKI;
	if (codepoint >= 0x11C38 && codepoint <= 0x11C3D) return Unicode_Script_BHAIKSUKI;
	if (codepoint == 0x11C3E) return Unicode_Script_BHAIKSUKI;
	if (codepoint == 0x11C3F) return Unicode_Script_BHAIKSUKI;
	if (codepoint == 0x11C40) return Unicode_Script_BHAIKSUKI;
	if (codepoint >= 0x11C41 && codepoint <= 0x11C45) return Unicode_Script_BHAIKSUKI;
	if (codepoint >= 0x11C50 && codepoint <= 0x11C59) return Unicode_Script_BHAIKSUKI;
	if (codepoint >= 0x11C5A && codepoint <= 0x11C6C) return Unicode_Script_BHAIKSUKI;
	if (codepoint >= 0x11C70 && codepoint <= 0x11C71) return Unicode_Script_MARCHEN;
	if (codepoint >= 0x11C72 && codepoint <= 0x11C8F) return Unicode_Script_MARCHEN;
	if (codepoint >= 0x11C92 && codepoint <= 0x11CA7) return Unicode_Script_MARCHEN;
	if (codepoint == 0x11CA9) return Unicode_Script_MARCHEN;
	if (codepoint >= 0x11CAA && codepoint <= 0x11CB0) return Unicode_Script_MARCHEN;
	if (codepoint == 0x11CB1) return Unicode_Script_MARCHEN;
	if (codepoint >= 0x11CB2 && codepoint <= 0x11CB3) return Unicode_Script_MARCHEN;
	if (codepoint == 0x11CB4) return Unicode_Script_MARCHEN;
	if (codepoint >= 0x11CB5 && codepoint <= 0x11CB6) return Unicode_Script_MARCHEN;
	if (codepoint >= 0x11400 && codepoint <= 0x11434) return Unicode_Script_NEWA;
	if (codepoint >= 0x11435 && codepoint <= 0x11437) return Unicode_Script_NEWA;
	if (codepoint >= 0x11438 && codepoint <= 0x1143F) return Unicode_Script_NEWA;
	if (codepoint >= 0x11440 && codepoint <= 0x11441) return Unicode_Script_NEWA;
	if (codepoint >= 0x11442 && codepoint <= 0x11444) return Unicode_Script_NEWA;
	if (codepoint == 0x11445) return Unicode_Script_NEWA;
	if (codepoint == 0x11446) return Unicode_Script_NEWA;
	if (codepoint >= 0x11447 && codepoint <= 0x1144A) return Unicode_Script_NEWA;
	if (codepoint >= 0x1144B && codepoint <= 0x1144F) return Unicode_Script_NEWA;
	if (codepoint >= 0x11450 && codepoint <= 0x11459) return Unicode_Script_NEWA;
	if (codepoint >= 0x1145A && codepoint <= 0x1145B) return Unicode_Script_NEWA;
	if (codepoint == 0x1145D) return Unicode_Script_NEWA;
	if (codepoint == 0x1145E) return Unicode_Script_NEWA;
	if (codepoint >= 0x1145F && codepoint <= 0x11461) return Unicode_Script_NEWA;
	if (codepoint >= 0x104B0 && codepoint <= 0x104D3) return Unicode_Script_OSAGE;
	if (codepoint >= 0x104D8 && codepoint <= 0x104FB) return Unicode_Script_OSAGE;
	if (codepoint == 0x16FE0) return Unicode_Script_TANGUT;
	if (codepoint >= 0x17000 && codepoint <= 0x187F7) return Unicode_Script_TANGUT;
	if (codepoint >= 0x18800 && codepoint <= 0x18AFF) return Unicode_Script_TANGUT;
	if (codepoint >= 0x18D00 && codepoint <= 0x18D08) return Unicode_Script_TANGUT;
	if (codepoint >= 0x11D00 && codepoint <= 0x11D06) return Unicode_Script_MASARAM_GONDI;
	if (codepoint >= 0x11D08 && codepoint <= 0x11D09) return Unicode_Script_MASARAM_GONDI;
	if (codepoint >= 0x11D0B && codepoint <= 0x11D30) return Unicode_Script_MASARAM_GONDI;
	if (codepoint >= 0x11D31 && codepoint <= 0x11D36) return Unicode_Script_MASARAM_GONDI;
	if (codepoint == 0x11D3A) return Unicode_Script_MASARAM_GONDI;
	if (codepoint >= 0x11D3C && codepoint <= 0x11D3D) return Unicode_Script_MASARAM_GONDI;
	if (codepoint >= 0x11D3F && codepoint <= 0x11D45) return Unicode_Script_MASARAM_GONDI;
	if (codepoint == 0x11D46) return Unicode_Script_MASARAM_GONDI;
	if (codepoint == 0x11D47) return Unicode_Script_MASARAM_GONDI;
	if (codepoint >= 0x11D50 && codepoint <= 0x11D59) return Unicode_Script_MASARAM_GONDI;
	if (codepoint == 0x16FE1) return Unicode_Script_NUSHU;
	if (codepoint >= 0x1B170 && codepoint <= 0x1B2FB) return Unicode_Script_NUSHU;
	if (codepoint == 0x11A50) return Unicode_Script_SOYOMBO;
	if (codepoint >= 0x11A51 && codepoint <= 0x11A56) return Unicode_Script_SOYOMBO;
	if (codepoint >= 0x11A57 && codepoint <= 0x11A58) return Unicode_Script_SOYOMBO;
	if (codepoint >= 0x11A59 && codepoint <= 0x11A5B) return Unicode_Script_SOYOMBO;
	if (codepoint >= 0x11A5C && codepoint <= 0x11A89) return Unicode_Script_SOYOMBO;
	if (codepoint >= 0x11A8A && codepoint <= 0x11A96) return Unicode_Script_SOYOMBO;
	if (codepoint == 0x11A97) return Unicode_Script_SOYOMBO;
	if (codepoint >= 0x11A98 && codepoint <= 0x11A99) return Unicode_Script_SOYOMBO;
	if (codepoint >= 0x11A9A && codepoint <= 0x11A9C) return Unicode_Script_SOYOMBO;
	if (codepoint == 0x11A9D) return Unicode_Script_SOYOMBO;
	if (codepoint >= 0x11A9E && codepoint <= 0x11AA2) return Unicode_Script_SOYOMBO;
	if (codepoint == 0x11A00) return Unicode_Script_ZANABAZAR_SQUARE;
	if (codepoint >= 0x11A01 && codepoint <= 0x11A0A) return Unicode_Script_ZANABAZAR_SQUARE;
	if (codepoint >= 0x11A0B && codepoint <= 0x11A32) return Unicode_Script_ZANABAZAR_SQUARE;
	if (codepoint >= 0x11A33 && codepoint <= 0x11A38) return Unicode_Script_ZANABAZAR_SQUARE;
	if (codepoint == 0x11A39) return Unicode_Script_ZANABAZAR_SQUARE;
	if (codepoint == 0x11A3A) return Unicode_Script_ZANABAZAR_SQUARE;
	if (codepoint >= 0x11A3B && codepoint <= 0x11A3E) return Unicode_Script_ZANABAZAR_SQUARE;
	if (codepoint >= 0x11A3F && codepoint <= 0x11A46) return Unicode_Script_ZANABAZAR_SQUARE;
	if (codepoint == 0x11A47) return Unicode_Script_ZANABAZAR_SQUARE;
	if (codepoint >= 0x11800 && codepoint <= 0x1182B) return Unicode_Script_DOGRA;
	if (codepoint >= 0x1182C && codepoint <= 0x1182E) return Unicode_Script_DOGRA;
	if (codepoint >= 0x1182F && codepoint <= 0x11837) return Unicode_Script_DOGRA;
	if (codepoint == 0x11838) return Unicode_Script_DOGRA;
	if (codepoint >= 0x11839 && codepoint <= 0x1183A) return Unicode_Script_DOGRA;
	if (codepoint == 0x1183B) return Unicode_Script_DOGRA;
	if (codepoint >= 0x11D60 && codepoint <= 0x11D65) return Unicode_Script_GUNJALA_GONDI;
	if (codepoint >= 0x11D67 && codepoint <= 0x11D68) return Unicode_Script_GUNJALA_GONDI;
	if (codepoint >= 0x11D6A && codepoint <= 0x11D89) return Unicode_Script_GUNJALA_GONDI;
	if (codepoint >= 0x11D8A && codepoint <= 0x11D8E) return Unicode_Script_GUNJALA_GONDI;
	if (codepoint >= 0x11D90 && codepoint <= 0x11D91) return Unicode_Script_GUNJALA_GONDI;
	if (codepoint >= 0x11D93 && codepoint <= 0x11D94) return Unicode_Script_GUNJALA_GONDI;
	if (codepoint == 0x11D95) return Unicode_Script_GUNJALA_GONDI;
	if (codepoint == 0x11D96) return Unicode_Script_GUNJALA_GONDI;
	if (codepoint == 0x11D97) return Unicode_Script_GUNJALA_GONDI;
	if (codepoint == 0x11D98) return Unicode_Script_GUNJALA_GONDI;
	if (codepoint >= 0x11DA0 && codepoint <= 0x11DA9) return Unicode_Script_GUNJALA_GONDI;
	if (codepoint >= 0x11EE0 && codepoint <= 0x11EF2) return Unicode_Script_MAKASAR;
	if (codepoint >= 0x11EF3 && codepoint <= 0x11EF4) return Unicode_Script_MAKASAR;
	if (codepoint >= 0x11EF5 && codepoint <= 0x11EF6) return Unicode_Script_MAKASAR;
	if (codepoint >= 0x11EF7 && codepoint <= 0x11EF8) return Unicode_Script_MAKASAR;
	if (codepoint >= 0x16E40 && codepoint <= 0x16E7F) return Unicode_Script_MEDEFAIDRIN;
	if (codepoint >= 0x16E80 && codepoint <= 0x16E96) return Unicode_Script_MEDEFAIDRIN;
	if (codepoint >= 0x16E97 && codepoint <= 0x16E9A) return Unicode_Script_MEDEFAIDRIN;
	if (codepoint >= 0x10D00 && codepoint <= 0x10D23) return Unicode_Script_HANIFI_ROHINGYA;
	if (codepoint >= 0x10D24 && codepoint <= 0x10D27) return Unicode_Script_HANIFI_ROHINGYA;
	if (codepoint >= 0x10D30 && codepoint <= 0x10D39) return Unicode_Script_HANIFI_ROHINGYA;
	if (codepoint >= 0x10F30 && codepoint <= 0x10F45) return Unicode_Script_SOGDIAN;
	if (codepoint >= 0x10F46 && codepoint <= 0x10F50) return Unicode_Script_SOGDIAN;
	if (codepoint >= 0x10F51 && codepoint <= 0x10F54) return Unicode_Script_SOGDIAN;
	if (codepoint >= 0x10F55 && codepoint <= 0x10F59) return Unicode_Script_SOGDIAN;
	if (codepoint >= 0x10F00 && codepoint <= 0x10F1C) return Unicode_Script_OLD_SOGDIAN;
	if (codepoint >= 0x10F1D && codepoint <= 0x10F26) return Unicode_Script_OLD_SOGDIAN;
	if (codepoint == 0x10F27) return Unicode_Script_OLD_SOGDIAN;
	if (codepoint >= 0x10FE0 && codepoint <= 0x10FF6) return Unicode_Script_ELYMAIC;
	if (codepoint >= 0x119A0 && codepoint <= 0x119A7) return Unicode_Script_NANDINAGARI;
	if (codepoint >= 0x119AA && codepoint <= 0x119D0) return Unicode_Script_NANDINAGARI;
	if (codepoint >= 0x119D1 && codepoint <= 0x119D3) return Unicode_Script_NANDINAGARI;
	if (codepoint >= 0x119D4 && codepoint <= 0x119D7) return Unicode_Script_NANDINAGARI;
	if (codepoint >= 0x119DA && codepoint <= 0x119DB) return Unicode_Script_NANDINAGARI;
	if (codepoint >= 0x119DC && codepoint <= 0x119DF) return Unicode_Script_NANDINAGARI;
	if (codepoint == 0x119E0) return Unicode_Script_NANDINAGARI;
	if (codepoint == 0x119E1) return Unicode_Script_NANDINAGARI;
	if (codepoint == 0x119E2) return Unicode_Script_NANDINAGARI;
	if (codepoint == 0x119E3) return Unicode_Script_NANDINAGARI;
	if (codepoint == 0x119E4) return Unicode_Script_NANDINAGARI;
	if (codepoint >= 0x1E100 && codepoint <= 0x1E12C) return Unicode_Script_NYIAKENG_PUACHUE_HMONG;
	if (codepoint >= 0x1E130 && codepoint <= 0x1E136) return Unicode_Script_NYIAKENG_PUACHUE_HMONG;
	if (codepoint >= 0x1E137 && codepoint <= 0x1E13D) return Unicode_Script_NYIAKENG_PUACHUE_HMONG;
	if (codepoint >= 0x1E140 && codepoint <= 0x1E149) return Unicode_Script_NYIAKENG_PUACHUE_HMONG;
	if (codepoint == 0x1E14E) return Unicode_Script_NYIAKENG_PUACHUE_HMONG;
	if (codepoint == 0x1E14F) return Unicode_Script_NYIAKENG_PUACHUE_HMONG;
	if (codepoint >= 0x1E2C0 && codepoint <= 0x1E2EB) return Unicode_Script_WANCHO;
	if (codepoint >= 0x1E2EC && codepoint <= 0x1E2EF) return Unicode_Script_WANCHO;
	if (codepoint >= 0x1E2F0 && codepoint <= 0x1E2F9) return Unicode_Script_WANCHO;
	if (codepoint == 0x1E2FF) return Unicode_Script_WANCHO;
	if (codepoint >= 0x10FB0 && codepoint <= 0x10FC4) return Unicode_Script_CHORASMIAN;
	if (codepoint >= 0x10FC5 && codepoint <= 0x10FCB) return Unicode_Script_CHORASMIAN;
	if (codepoint >= 0x11900 && codepoint <= 0x11906) return Unicode_Script_DIVES_AKURU;
	if (codepoint == 0x11909) return Unicode_Script_DIVES_AKURU;
	if (codepoint >= 0x1190C && codepoint <= 0x11913) return Unicode_Script_DIVES_AKURU;
	if (codepoint >= 0x11915 && codepoint <= 0x11916) return Unicode_Script_DIVES_AKURU;
	if (codepoint >= 0x11918 && codepoint <= 0x1192F) return Unicode_Script_DIVES_AKURU;
	if (codepoint >= 0x11930 && codepoint <= 0x11935) return Unicode_Script_DIVES_AKURU;
	if (codepoint >= 0x11937 && codepoint <= 0x11938) return Unicode_Script_DIVES_AKURU;
	if (codepoint >= 0x1193B && codepoint <= 0x1193C) return Unicode_Script_DIVES_AKURU;
	if (codepoint == 0x1193D) return Unicode_Script_DIVES_AKURU;
	if (codepoint == 0x1193E) return Unicode_Script_DIVES_AKURU;
	if (codepoint == 0x1193F) return Unicode_Script_DIVES_AKURU;
	if (codepoint == 0x11940) return Unicode_Script_DIVES_AKURU;
	if (codepoint == 0x11941) return Unicode_Script_DIVES_AKURU;
	if (codepoint == 0x11942) return Unicode_Script_DIVES_AKURU;
	if (codepoint == 0x11943) return Unicode_Script_DIVES_AKURU;
	if (codepoint >= 0x11944 && codepoint <= 0x11946) return Unicode_Script_DIVES_AKURU;
	if (codepoint >= 0x11950 && codepoint <= 0x11959) return Unicode_Script_DIVES_AKURU;
	if (codepoint == 0x16FE4) return Unicode_Script_KHITAN_SMALL_SCRIPT;
	if (codepoint >= 0x18B00 && codepoint <= 0x18CD5) return Unicode_Script_KHITAN_SMALL_SCRIPT;
	if (codepoint >= 0x10E80 && codepoint <= 0x10EA9) return Unicode_Script_YEZIDI;
	if (codepoint >= 0x10EAB && codepoint <= 0x10EAC) return Unicode_Script_YEZIDI;
	if (codepoint == 0x10EAD) return Unicode_Script_YEZIDI;
	if (codepoint >= 0x10EB0 && codepoint <= 0x10EB1) return Unicode_Script_YEZIDI;

	return Unicode_Script_UNKNOWN;
}

Unicode_Script_Ext unicode_script_ext(uint32_t codepoint) {
	if (codepoint == 0x1CF7) return Unicode_Script_Ext_BENG;
	if (codepoint == 0x1CD1) return Unicode_Script_Ext_DEVA;
	if (codepoint == 0x1CD4) return Unicode_Script_Ext_DEVA;
	if (codepoint == 0x1CDB) return Unicode_Script_Ext_DEVA;
	if (codepoint >= 0x1CDE && codepoint <= 0x1CDF) return Unicode_Script_Ext_DEVA;
	if (codepoint >= 0x1CE2 && codepoint <= 0x1CE8) return Unicode_Script_Ext_DEVA;
	if (codepoint >= 0x1CEB && codepoint <= 0x1CEC) return Unicode_Script_Ext_DEVA;
	if (codepoint >= 0x1CEE && codepoint <= 0x1CF1) return Unicode_Script_Ext_DEVA;
	if (codepoint >= 0x1BCA0 && codepoint <= 0x1BCA3) return Unicode_Script_Ext_DUPL;
	if (codepoint == 0x0342) return Unicode_Script_Ext_GREK;
	if (codepoint == 0x0345) return Unicode_Script_Ext_GREK;
	if (codepoint >= 0x1DC0 && codepoint <= 0x1DC1) return Unicode_Script_Ext_GREK;
	if (codepoint == 0x3006) return Unicode_Script_Ext_HANI;
	if (codepoint >= 0x303E && codepoint <= 0x303F) return Unicode_Script_Ext_HANI;
	if (codepoint >= 0x3190 && codepoint <= 0x3191) return Unicode_Script_Ext_HANI;
	if (codepoint >= 0x3192 && codepoint <= 0x3195) return Unicode_Script_Ext_HANI;
	if (codepoint >= 0x3196 && codepoint <= 0x319F) return Unicode_Script_Ext_HANI;
	if (codepoint >= 0x31C0 && codepoint <= 0x31E3) return Unicode_Script_Ext_HANI;
	if (codepoint >= 0x3220 && codepoint <= 0x3229) return Unicode_Script_Ext_HANI;
	if (codepoint >= 0x322A && codepoint <= 0x3247) return Unicode_Script_Ext_HANI;
	if (codepoint >= 0x3280 && codepoint <= 0x3289) return Unicode_Script_Ext_HANI;
	if (codepoint >= 0x328A && codepoint <= 0x32B0) return Unicode_Script_Ext_HANI;
	if (codepoint >= 0x32C0 && codepoint <= 0x32CB) return Unicode_Script_Ext_HANI;
	if (codepoint == 0x32FF) return Unicode_Script_Ext_HANI;
	if (codepoint >= 0x3358 && codepoint <= 0x3370) return Unicode_Script_Ext_HANI;
	if (codepoint >= 0x337B && codepoint <= 0x337F) return Unicode_Script_Ext_HANI;
	if (codepoint >= 0x33E0 && codepoint <= 0x33FE) return Unicode_Script_Ext_HANI;
	if (codepoint >= 0x1D360 && codepoint <= 0x1D371) return Unicode_Script_Ext_HANI;
	if (codepoint >= 0x1F250 && codepoint <= 0x1F251) return Unicode_Script_Ext_HANI;
	if (codepoint >= 0x0363 && codepoint <= 0x036F) return Unicode_Script_Ext_LATN;
	if (codepoint == 0x1CFA) return Unicode_Script_Ext_NAND;
	if (codepoint == 0x102E0) return Unicode_Script_Ext_ARAB_COPT;
	if (codepoint >= 0x102E1 && codepoint <= 0x102FB) return Unicode_Script_Ext_ARAB_COPT;
	if (codepoint == 0x06D4) return Unicode_Script_Ext_ARAB_ROHG;
	if (codepoint >= 0x064B && codepoint <= 0x0655) return Unicode_Script_Ext_ARAB_SYRC;
	if (codepoint == 0x0670) return Unicode_Script_Ext_ARAB_SYRC;
	if (codepoint == 0xFDF2) return Unicode_Script_Ext_ARAB_THAA;
	if (codepoint == 0xFDFD) return Unicode_Script_Ext_ARAB_THAA;
	if (codepoint >= 0x1CD5 && codepoint <= 0x1CD6) return Unicode_Script_Ext_BENG_DEVA;
	if (codepoint == 0x1CD8) return Unicode_Script_Ext_BENG_DEVA;
	if (codepoint == 0x1CE1) return Unicode_Script_Ext_BENG_DEVA;
	if (codepoint == 0x1CEA) return Unicode_Script_Ext_BENG_DEVA;
	if (codepoint == 0x1CED) return Unicode_Script_Ext_BENG_DEVA;
	if (codepoint >= 0x1CF5 && codepoint <= 0x1CF6) return Unicode_Script_Ext_BENG_DEVA;
	if (codepoint == 0xA8F1) return Unicode_Script_Ext_BENG_DEVA;
	if (codepoint >= 0x302A && codepoint <= 0x302D) return Unicode_Script_Ext_BOPO_HANI;
	if (codepoint == 0xA9CF) return Unicode_Script_Ext_BUGI_JAVA;
	if (codepoint >= 0x10100 && codepoint <= 0x10102) return Unicode_Script_Ext_CPRT_LINB;
	if (codepoint >= 0x10137 && codepoint <= 0x1013F) return Unicode_Script_Ext_CPRT_LINB;
	if (codepoint == 0x0484) return Unicode_Script_Ext_CYRL_GLAG;
	if (codepoint == 0x0487) return Unicode_Script_Ext_CYRL_GLAG;
	if (codepoint == 0x2E43) return Unicode_Script_Ext_CYRL_GLAG;
	if (codepoint == 0xA66F) return Unicode_Script_Ext_CYRL_GLAG;
	if (codepoint >= 0x0485 && codepoint <= 0x0486) return Unicode_Script_Ext_CYRL_LATN;
	if (codepoint == 0x0483) return Unicode_Script_Ext_CYRL_PERM;
	if (codepoint == 0x1DF8) return Unicode_Script_Ext_CYRL_SYRC;
	if (codepoint == 0x1CD3) return Unicode_Script_Ext_DEVA_GRAN;
	if (codepoint == 0x1CF3) return Unicode_Script_Ext_DEVA_GRAN;
	if (codepoint >= 0x1CF8 && codepoint <= 0x1CF9) return Unicode_Script_Ext_DEVA_GRAN;
	if (codepoint == 0x1CE9) return Unicode_Script_Ext_DEVA_NAND;
	if (codepoint == 0x1CD7) return Unicode_Script_Ext_DEVA_SHRD;
	if (codepoint == 0x1CD9) return Unicode_Script_Ext_DEVA_SHRD;
	if (codepoint >= 0x1CDC && codepoint <= 0x1CDD) return Unicode_Script_Ext_DEVA_SHRD;
	if (codepoint == 0x1CE0) return Unicode_Script_Ext_DEVA_SHRD;
	if (codepoint == 0xA8F3) return Unicode_Script_Ext_DEVA_TAML;
	if (codepoint == 0x10FB) return Unicode_Script_Ext_GEOR_LATN;
	if (codepoint >= 0x0BE6 && codepoint <= 0x0BEF) return Unicode_Script_Ext_GRAN_TAML;
	if (codepoint >= 0x0BF0 && codepoint <= 0x0BF2) return Unicode_Script_Ext_GRAN_TAML;
	if (codepoint == 0x0BF3) return Unicode_Script_Ext_GRAN_TAML;
	if (codepoint == 0x11301) return Unicode_Script_Ext_GRAN_TAML;
	if (codepoint == 0x11303) return Unicode_Script_Ext_GRAN_TAML;
	if (codepoint >= 0x1133B && codepoint <= 0x1133C) return Unicode_Script_Ext_GRAN_TAML;
	if (codepoint >= 0x11FD0 && codepoint <= 0x11FD1) return Unicode_Script_Ext_GRAN_TAML;
	if (codepoint == 0x11FD3) return Unicode_Script_Ext_GRAN_TAML;
	if (codepoint >= 0x0AE6 && codepoint <= 0x0AEF) return Unicode_Script_Ext_GUJR_KHOJ;
	if (codepoint >= 0x0A66 && codepoint <= 0x0A6F) return Unicode_Script_Ext_GURU_MULT;
	if (codepoint >= 0xA700 && codepoint <= 0xA707) return Unicode_Script_Ext_HANI_LATN;
	if (codepoint >= 0x3031 && codepoint <= 0x3035) return Unicode_Script_Ext_HIRA_KANA;
	if (codepoint >= 0x3099 && codepoint <= 0x309A) return Unicode_Script_Ext_HIRA_KANA;
	if (codepoint >= 0x309B && codepoint <= 0x309C) return Unicode_Script_Ext_HIRA_KANA;
	if (codepoint == 0x30A0) return Unicode_Script_Ext_HIRA_KANA;
	if (codepoint == 0x30FC) return Unicode_Script_Ext_HIRA_KANA;
	if (codepoint == 0xFF70) return Unicode_Script_Ext_HIRA_KANA;
	if (codepoint >= 0xFF9E && codepoint <= 0xFF9F) return Unicode_Script_Ext_HIRA_KANA;
	if (codepoint >= 0x0CE6 && codepoint <= 0x0CEF) return Unicode_Script_Ext_KNDA_NAND;
	if (codepoint == 0x202F) return Unicode_Script_Ext_LATN_MONG;
	if (codepoint >= 0x1802 && codepoint <= 0x1803) return Unicode_Script_Ext_MONG_PHAG;
	if (codepoint == 0x1805) return Unicode_Script_Ext_MONG_PHAG;
	if (codepoint == 0x061C) return Unicode_Script_Ext_ARAB_SYRC_THAA;
	if (codepoint >= 0x0660 && codepoint <= 0x0669) return Unicode_Script_Ext_ARAB_THAA_YEZI;
	if (codepoint >= 0x09E6 && codepoint <= 0x09EF) return Unicode_Script_Ext_BENG_CAKM_SYLO;
	if (codepoint >= 0x1040 && codepoint <= 0x1049) return Unicode_Script_Ext_CAKM_MYMR_TALE;
	if (codepoint >= 0x10107 && codepoint <= 0x10133) return Unicode_Script_Ext_CPRT_LINA_LINB;
	if (codepoint == 0x1CF4) return Unicode_Script_Ext_DEVA_GRAN_KNDA;
	if (codepoint == 0x20F0) return Unicode_Script_Ext_DEVA_GRAN_LATN;
	if (codepoint == 0x303C) return Unicode_Script_Ext_HANI_HIRA_KANA;
	if (codepoint == 0x303D) return Unicode_Script_Ext_HANI_HIRA_KANA;
	if (codepoint == 0xA92E) return Unicode_Script_Ext_KALI_LATN_MYMR;
	if (codepoint == 0x1CD0) return Unicode_Script_Ext_BENG_DEVA_GRAN_KNDA;
	if (codepoint == 0x1CD2) return Unicode_Script_Ext_BENG_DEVA_GRAN_KNDA;
	if (codepoint >= 0x1735 && codepoint <= 0x1736) return Unicode_Script_Ext_BUHD_HANO_TAGB_TGLG;
	if (codepoint >= 0x0966 && codepoint <= 0x096F) return Unicode_Script_Ext_DEVA_DOGR_KTHI_MAHJ;
	if (codepoint == 0x060C) return Unicode_Script_Ext_ARAB_ROHG_SYRC_THAA_YEZI;
	if (codepoint == 0x061B) return Unicode_Script_Ext_ARAB_ROHG_SYRC_THAA_YEZI;
	if (codepoint == 0x061F) return Unicode_Script_Ext_ARAB_ROHG_SYRC_THAA_YEZI;
	if (codepoint == 0x3003) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA;
	if (codepoint == 0x3013) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA;
	if (codepoint == 0x301C) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA;
	if (codepoint == 0x301D) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA;
	if (codepoint >= 0x301E && codepoint <= 0x301F) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA;
	if (codepoint == 0x3030) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA;
	if (codepoint == 0x3037) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA;
	if (codepoint >= 0xFE45 && codepoint <= 0xFE46) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA;
	if (codepoint >= 0x3001 && codepoint <= 0x3002) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint == 0x3008) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint == 0x3009) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint == 0x300A) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint == 0x300B) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint == 0x300C) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint == 0x300D) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint == 0x300E) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint == 0x300F) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint == 0x3010) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint == 0x3011) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint == 0x3014) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint == 0x3015) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint == 0x3016) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint == 0x3017) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint == 0x3018) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint == 0x3019) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint == 0x301A) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint == 0x301B) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint == 0x30FB) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint == 0xFF61) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint == 0xFF62) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint == 0xFF63) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint >= 0xFF64 && codepoint <= 0xFF65) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint == 0x1CDA) return Unicode_Script_Ext_DEVA_KNDA_MLYM_ORYA_TAML_TELU;
	if (codepoint == 0x0640) return Unicode_Script_Ext_ADLM_ARAB_MAND_MANI_PHLP_ROHG_SOGD_SYRC;
	if (codepoint == 0x1CF2) return Unicode_Script_Ext_BENG_DEVA_GRAN_KNDA_NAND_ORYA_TELU_TIRH;
	if (codepoint >= 0xA836 && codepoint <= 0xA837) return Unicode_Script_Ext_DEVA_DOGR_GUJR_GURU_KHOJ_KTHI_MAHJ_MODI_SIND_TAKR_TIRH;
	if (codepoint == 0xA838) return Unicode_Script_Ext_DEVA_DOGR_GUJR_GURU_KHOJ_KTHI_MAHJ_MODI_SIND_TAKR_TIRH;
	if (codepoint == 0xA839) return Unicode_Script_Ext_DEVA_DOGR_GUJR_GURU_KHOJ_KTHI_MAHJ_MODI_SIND_TAKR_TIRH;
	if (codepoint == 0x0952) return Unicode_Script_Ext_BENG_DEVA_GRAN_GUJR_GURU_KNDA_LATN_MLYM_ORYA_TAML_TELU_TIRH;
	if (codepoint == 0x0951) return Unicode_Script_Ext_BENG_DEVA_GRAN_GUJR_GURU_KNDA_LATN_MLYM_ORYA_SHRD_TAML_TELU_TIRH;
	if (codepoint >= 0xA833 && codepoint <= 0xA835) return Unicode_Script_Ext_DEVA_DOGR_GUJR_GURU_KHOJ_KNDA_KTHI_MAHJ_MODI_NAND_SIND_TAKR_TIRH;
	if (codepoint >= 0xA830 && codepoint <= 0xA832) return Unicode_Script_Ext_DEVA_DOGR_GUJR_GURU_KHOJ_KNDA_KTHI_MAHJ_MLYM_MODI_NAND_SIND_TAKR_TIRH;
	if (codepoint == 0x0964) return Unicode_Script_Ext_BENG_DEVA_DOGR_GONG_GONM_GRAN_GUJR_GURU_KNDA_MAHJ_MLYM_NAND_ORYA_SIND_SINH_SYLO_TAKR_TAML_TELU_TIRH;
	if (codepoint == 0x0965) return Unicode_Script_Ext_BENG_DEVA_DOGR_GONG_GONM_GRAN_GUJR_GURU_KNDA_LIMB_MAHJ_MLYM_NAND_ORYA_SIND_SINH_SYLO_TAKR_TAML_TELU_TIRH;

	return Unicode_Script_Ext_UNKNOWN;
}

Unicode_Block unicode_block(uint32_t codepoint) {
	if (codepoint >= 0x0000 && codepoint <= 0x007F) return Unicode_Block_BASIC_LATIN;
	if (codepoint >= 0x0080 && codepoint <= 0x00FF) return Unicode_Block_LATIN_1_SUPPLEMENT;
	if (codepoint >= 0x0100 && codepoint <= 0x017F) return Unicode_Block_LATIN_EXTENDED_A;
	if (codepoint >= 0x0180 && codepoint <= 0x024F) return Unicode_Block_LATIN_EXTENDED_B;
	if (codepoint >= 0x0250 && codepoint <= 0x02AF) return Unicode_Block_IPA_EXTENSIONS;
	if (codepoint >= 0x02B0 && codepoint <= 0x02FF) return Unicode_Block_SPACING_MODIFIER_LETTERS;
	if (codepoint >= 0x0300 && codepoint <= 0x036F) return Unicode_Block_COMBINING_DIACRITICAL_MARKS;
	if (codepoint >= 0x0370 && codepoint <= 0x03FF) return Unicode_Block_GREEK_AND_COPTIC;
	if (codepoint >= 0x0400 && codepoint <= 0x04FF) return Unicode_Block_CYRILLIC;
	if (codepoint >= 0x0500 && codepoint <= 0x052F) return Unicode_Block_CYRILLIC_SUPPLEMENT;
	if (codepoint >= 0x0530 && codepoint <= 0x058F) return Unicode_Block_ARMENIAN;
	if (codepoint >= 0x0590 && codepoint <= 0x05FF) return Unicode_Block_HEBREW;
	if (codepoint >= 0x0600 && codepoint <= 0x06FF) return Unicode_Block_ARABIC;
	if (codepoint >= 0x0700 && codepoint <= 0x074F) return Unicode_Block_SYRIAC;
	if (codepoint >= 0x0750 && codepoint <= 0x077F) return Unicode_Block_ARABIC_SUPPLEMENT;
	if (codepoint >= 0x0780 && codepoint <= 0x07BF) return Unicode_Block_THAANA;
	if (codepoint >= 0x07C0 && codepoint <= 0x07FF) return Unicode_Block_NKO;
	if (codepoint >= 0x0800 && codepoint <= 0x083F) return Unicode_Block_SAMARITAN;
	if (codepoint >= 0x0840 && codepoint <= 0x085F) return Unicode_Block_MANDAIC;
	if (codepoint >= 0x0860 && codepoint <= 0x086F) return Unicode_Block_SYRIAC_SUPPLEMENT;
	if (codepoint >= 0x08A0 && codepoint <= 0x08FF) return Unicode_Block_ARABIC_EXTENDED_A;
	if (codepoint >= 0x0900 && codepoint <= 0x097F) return Unicode_Block_DEVANAGARI;
	if (codepoint >= 0x0980 && codepoint <= 0x09FF) return Unicode_Block_BENGALI;
	if (codepoint >= 0x0A00 && codepoint <= 0x0A7F) return Unicode_Block_GURMUKHI;
	if (codepoint >= 0x0A80 && codepoint <= 0x0AFF) return Unicode_Block_GUJARATI;
	if (codepoint >= 0x0B00 && codepoint <= 0x0B7F) return Unicode_Block_ORIYA;
	if (codepoint >= 0x0B80 && codepoint <= 0x0BFF) return Unicode_Block_TAMIL;
	if (codepoint >= 0x0C00 && codepoint <= 0x0C7F) return Unicode_Block_TELUGU;
	if (codepoint >= 0x0C80 && codepoint <= 0x0CFF) return Unicode_Block_KANNADA;
	if (codepoint >= 0x0D00 && codepoint <= 0x0D7F) return Unicode_Block_MALAYALAM;
	if (codepoint >= 0x0D80 && codepoint <= 0x0DFF) return Unicode_Block_SINHALA;
	if (codepoint >= 0x0E00 && codepoint <= 0x0E7F) return Unicode_Block_THAI;
	if (codepoint >= 0x0E80 && codepoint <= 0x0EFF) return Unicode_Block_LAO;
	if (codepoint >= 0x0F00 && codepoint <= 0x0FFF) return Unicode_Block_TIBETAN;
	if (codepoint >= 0x1000 && codepoint <= 0x109F) return Unicode_Block_MYANMAR;
	if (codepoint >= 0x10A0 && codepoint <= 0x10FF) return Unicode_Block_GEORGIAN;
	if (codepoint >= 0x1100 && codepoint <= 0x11FF) return Unicode_Block_HANGUL_JAMO;
	if (codepoint >= 0x1200 && codepoint <= 0x137F) return Unicode_Block_ETHIOPIC;
	if (codepoint >= 0x1380 && codepoint <= 0x139F) return Unicode_Block_ETHIOPIC_SUPPLEMENT;
	if (codepoint >= 0x13A0 && codepoint <= 0x13FF) return Unicode_Block_CHEROKEE;
	if (codepoint >= 0x1400 && codepoint <= 0x167F) return Unicode_Block_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS;
	if (codepoint >= 0x1680 && codepoint <= 0x169F) return Unicode_Block_OGHAM;
	if (codepoint >= 0x16A0 && codepoint <= 0x16FF) return Unicode_Block_RUNIC;
	if (codepoint >= 0x1700 && codepoint <= 0x171F) return Unicode_Block_TAGALOG;
	if (codepoint >= 0x1720 && codepoint <= 0x173F) return Unicode_Block_HANUNOO;
	if (codepoint >= 0x1740 && codepoint <= 0x175F) return Unicode_Block_BUHID;
	if (codepoint >= 0x1760 && codepoint <= 0x177F) return Unicode_Block_TAGBANWA;
	if (codepoint >= 0x1780 && codepoint <= 0x17FF) return Unicode_Block_KHMER;
	if (codepoint >= 0x1800 && codepoint <= 0x18AF) return Unicode_Block_MONGOLIAN;
	if (codepoint >= 0x18B0 && codepoint <= 0x18FF) return Unicode_Block_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED;
	if (codepoint >= 0x1900 && codepoint <= 0x194F) return Unicode_Block_LIMBU;
	if (codepoint >= 0x1950 && codepoint <= 0x197F) return Unicode_Block_TAI_LE;
	if (codepoint >= 0x1980 && codepoint <= 0x19DF) return Unicode_Block_NEW_TAI_LUE;
	if (codepoint >= 0x19E0 && codepoint <= 0x19FF) return Unicode_Block_KHMER_SYMBOLS;
	if (codepoint >= 0x1A00 && codepoint <= 0x1A1F) return Unicode_Block_BUGINESE;
	if (codepoint >= 0x1A20 && codepoint <= 0x1AAF) return Unicode_Block_TAI_THAM;
	if (codepoint >= 0x1AB0 && codepoint <= 0x1AFF) return Unicode_Block_COMBINING_DIACRITICAL_MARKS_EXTENDED;
	if (codepoint >= 0x1B00 && codepoint <= 0x1B7F) return Unicode_Block_BALINESE;
	if (codepoint >= 0x1B80 && codepoint <= 0x1BBF) return Unicode_Block_SUNDANESE;
	if (codepoint >= 0x1BC0 && codepoint <= 0x1BFF) return Unicode_Block_BATAK;
	if (codepoint >= 0x1C00 && codepoint <= 0x1C4F) return Unicode_Block_LEPCHA;
	if (codepoint >= 0x1C50 && codepoint <= 0x1C7F) return Unicode_Block_OL_CHIKI;
	if (codepoint >= 0x1C80 && codepoint <= 0x1C8F) return Unicode_Block_CYRILLIC_EXTENDED_C;
	if (codepoint >= 0x1C90 && codepoint <= 0x1CBF) return Unicode_Block_GEORGIAN_EXTENDED;
	if (codepoint >= 0x1CC0 && codepoint <= 0x1CCF) return Unicode_Block_SUNDANESE_SUPPLEMENT;
	if (codepoint >= 0x1CD0 && codepoint <= 0x1CFF) return Unicode_Block_VEDIC_EXTENSIONS;
	if (codepoint >= 0x1D00 && codepoint <= 0x1D7F) return Unicode_Block_PHONETIC_EXTENSIONS;
	if (codepoint >= 0x1D80 && codepoint <= 0x1DBF) return Unicode_Block_PHONETIC_EXTENSIONS_SUPPLEMENT;
	if (codepoint >= 0x1DC0 && codepoint <= 0x1DFF) return Unicode_Block_COMBINING_DIACRITICAL_MARKS_SUPPLEMENT;
	if (codepoint >= 0x1E00 && codepoint <= 0x1EFF) return Unicode_Block_LATIN_EXTENDED_ADDITIONAL;
	if (codepoint >= 0x1F00 && codepoint <= 0x1FFF) return Unicode_Block_GREEK_EXTENDED;
	if (codepoint >= 0x2000 && codepoint <= 0x206F) return Unicode_Block_GENERAL_PUNCTUATION;
	if (codepoint >= 0x2070 && codepoint <= 0x209F) return Unicode_Block_SUPERSCRIPTS_AND_SUBSCRIPTS;
	if (codepoint >= 0x20A0 && codepoint <= 0x20CF) return Unicode_Block_CURRENCY_SYMBOLS;
	if (codepoint >= 0x20D0 && codepoint <= 0x20FF) return Unicode_Block_COMBINING_DIACRITICAL_MARKS_FOR_SYMBOLS;
	if (codepoint >= 0x2100 && codepoint <= 0x214F) return Unicode_Block_LETTERLIKE_SYMBOLS;
	if (codepoint >= 0x2150 && codepoint <= 0x218F) return Unicode_Block_NUMBER_FORMS;
	if (codepoint >= 0x2190 && codepoint <= 0x21FF) return Unicode_Block_ARROWS;
	if (codepoint >= 0x2200 && codepoint <= 0x22FF) return Unicode_Block_MATHEMATICAL_OPERATORS;
	if (codepoint >= 0x2300 && codepoint <= 0x23FF) return Unicode_Block_MISCELLANEOUS_TECHNICAL;
	if (codepoint >= 0x2400 && codepoint <= 0x243F) return Unicode_Block_CONTROL_PICTURES;
	if (codepoint >= 0x2440 && codepoint <= 0x245F) return Unicode_Block_OPTICAL_CHARACTER_RECOGNITION;
	if (codepoint >= 0x2460 && codepoint <= 0x24FF) return Unicode_Block_ENCLOSED_ALPHANUMERICS;
	if (codepoint >= 0x2500 && codepoint <= 0x257F) return Unicode_Block_BOX_DRAWING;
	if (codepoint >= 0x2580 && codepoint <= 0x259F) return Unicode_Block_BLOCK_ELEMENTS;
	if (codepoint >= 0x25A0 && codepoint <= 0x25FF) return Unicode_Block_GEOMETRIC_SHAPES;
	if (codepoint >= 0x2600 && codepoint <= 0x26FF) return Unicode_Block_MISCELLANEOUS_SYMBOLS;
	if (codepoint >= 0x2700 && codepoint <= 0x27BF) return Unicode_Block_DINGBATS;
	if (codepoint >= 0x27C0 && codepoint <= 0x27EF) return Unicode_Block_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A;
	if (codepoint >= 0x27F0 && codepoint <= 0x27FF) return Unicode_Block_SUPPLEMENTAL_ARROWS_A;
	if (codepoint >= 0x2800 && codepoint <= 0x28FF) return Unicode_Block_BRAILLE_PATTERNS;
	if (codepoint >= 0x2900 && codepoint <= 0x297F) return Unicode_Block_SUPPLEMENTAL_ARROWS_B;
	if (codepoint >= 0x2980 && codepoint <= 0x29FF) return Unicode_Block_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B;
	if (codepoint >= 0x2A00 && codepoint <= 0x2AFF) return Unicode_Block_SUPPLEMENTAL_MATHEMATICAL_OPERATORS;
	if (codepoint >= 0x2B00 && codepoint <= 0x2BFF) return Unicode_Block_MISCELLANEOUS_SYMBOLS_AND_ARROWS;
	if (codepoint >= 0x2C00 && codepoint <= 0x2C5F) return Unicode_Block_GLAGOLITIC;
	if (codepoint >= 0x2C60 && codepoint <= 0x2C7F) return Unicode_Block_LATIN_EXTENDED_C;
	if (codepoint >= 0x2C80 && codepoint <= 0x2CFF) return Unicode_Block_COPTIC;
	if (codepoint >= 0x2D00 && codepoint <= 0x2D2F) return Unicode_Block_GEORGIAN_SUPPLEMENT;
	if (codepoint >= 0x2D30 && codepoint <= 0x2D7F) return Unicode_Block_TIFINAGH;
	if (codepoint >= 0x2D80 && codepoint <= 0x2DDF) return Unicode_Block_ETHIOPIC_EXTENDED;
	if (codepoint >= 0x2DE0 && codepoint <= 0x2DFF) return Unicode_Block_CYRILLIC_EXTENDED_A;
	if (codepoint >= 0x2E00 && codepoint <= 0x2E7F) return Unicode_Block_SUPPLEMENTAL_PUNCTUATION;
	if (codepoint >= 0x2E80 && codepoint <= 0x2EFF) return Unicode_Block_CJK_RADICALS_SUPPLEMENT;
	if (codepoint >= 0x2F00 && codepoint <= 0x2FDF) return Unicode_Block_KANGXI_RADICALS;
	if (codepoint >= 0x2FF0 && codepoint <= 0x2FFF) return Unicode_Block_IDEOGRAPHIC_DESCRIPTION_CHARACTERS;
	if (codepoint >= 0x3000 && codepoint <= 0x303F) return Unicode_Block_CJK_SYMBOLS_AND_PUNCTUATION;
	if (codepoint >= 0x3040 && codepoint <= 0x309F) return Unicode_Block_HIRAGANA;
	if (codepoint >= 0x30A0 && codepoint <= 0x30FF) return Unicode_Block_KATAKANA;
	if (codepoint >= 0x3100 && codepoint <= 0x312F) return Unicode_Block_BOPOMOFO;
	if (codepoint >= 0x3130 && codepoint <= 0x318F) return Unicode_Block_HANGUL_COMPATIBILITY_JAMO;
	if (codepoint >= 0x3190 && codepoint <= 0x319F) return Unicode_Block_KANBUN;
	if (codepoint >= 0x31A0 && codepoint <= 0x31BF) return Unicode_Block_BOPOMOFO_EXTENDED;
	if (codepoint >= 0x31C0 && codepoint <= 0x31EF) return Unicode_Block_CJK_STROKES;
	if (codepoint >= 0x31F0 && codepoint <= 0x31FF) return Unicode_Block_KATAKANA_PHONETIC_EXTENSIONS;
	if (codepoint >= 0x3200 && codepoint <= 0x32FF) return Unicode_Block_ENCLOSED_CJK_LETTERS_AND_MONTHS;
	if (codepoint >= 0x3300 && codepoint <= 0x33FF) return Unicode_Block_CJK_COMPATIBILITY;
	if (codepoint >= 0x3400 && codepoint <= 0x4DBF) return Unicode_Block_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A;
	if (codepoint >= 0x4DC0 && codepoint <= 0x4DFF) return Unicode_Block_YIJING_HEXAGRAM_SYMBOLS;
	if (codepoint >= 0x4E00 && codepoint <= 0x9FFF) return Unicode_Block_CJK_UNIFIED_IDEOGRAPHS;
	if (codepoint >= 0xA000 && codepoint <= 0xA48F) return Unicode_Block_YI_SYLLABLES;
	if (codepoint >= 0xA490 && codepoint <= 0xA4CF) return Unicode_Block_YI_RADICALS;
	if (codepoint >= 0xA4D0 && codepoint <= 0xA4FF) return Unicode_Block_LISU;
	if (codepoint >= 0xA500 && codepoint <= 0xA63F) return Unicode_Block_VAI;
	if (codepoint >= 0xA640 && codepoint <= 0xA69F) return Unicode_Block_CYRILLIC_EXTENDED_B;
	if (codepoint >= 0xA6A0 && codepoint <= 0xA6FF) return Unicode_Block_BAMUM;
	if (codepoint >= 0xA700 && codepoint <= 0xA71F) return Unicode_Block_MODIFIER_TONE_LETTERS;
	if (codepoint >= 0xA720 && codepoint <= 0xA7FF) return Unicode_Block_LATIN_EXTENDED_D;
	if (codepoint >= 0xA800 && codepoint <= 0xA82F) return Unicode_Block_SYLOTI_NAGRI;
	if (codepoint >= 0xA830 && codepoint <= 0xA83F) return Unicode_Block_COMMON_INDIC_NUMBER_FORMS;
	if (codepoint >= 0xA840 && codepoint <= 0xA87F) return Unicode_Block_PHAGS_PA;
	if (codepoint >= 0xA880 && codepoint <= 0xA8DF) return Unicode_Block_SAURASHTRA;
	if (codepoint >= 0xA8E0 && codepoint <= 0xA8FF) return Unicode_Block_DEVANAGARI_EXTENDED;
	if (codepoint >= 0xA900 && codepoint <= 0xA92F) return Unicode_Block_KAYAH_LI;
	if (codepoint >= 0xA930 && codepoint <= 0xA95F) return Unicode_Block_REJANG;
	if (codepoint >= 0xA960 && codepoint <= 0xA97F) return Unicode_Block_HANGUL_JAMO_EXTENDED_A;
	if (codepoint >= 0xA980 && codepoint <= 0xA9DF) return Unicode_Block_JAVANESE;
	if (codepoint >= 0xA9E0 && codepoint <= 0xA9FF) return Unicode_Block_MYANMAR_EXTENDED_B;
	if (codepoint >= 0xAA00 && codepoint <= 0xAA5F) return Unicode_Block_CHAM;
	if (codepoint >= 0xAA60 && codepoint <= 0xAA7F) return Unicode_Block_MYANMAR_EXTENDED_A;
	if (codepoint >= 0xAA80 && codepoint <= 0xAADF) return Unicode_Block_TAI_VIET;
	if (codepoint >= 0xAAE0 && codepoint <= 0xAAFF) return Unicode_Block_MEETEI_MAYEK_EXTENSIONS;
	if (codepoint >= 0xAB00 && codepoint <= 0xAB2F) return Unicode_Block_ETHIOPIC_EXTENDED_A;
	if (codepoint >= 0xAB30 && codepoint <= 0xAB6F) return Unicode_Block_LATIN_EXTENDED_E;
	if (codepoint >= 0xAB70 && codepoint <= 0xABBF) return Unicode_Block_CHEROKEE_SUPPLEMENT;
	if (codepoint >= 0xABC0 && codepoint <= 0xABFF) return Unicode_Block_MEETEI_MAYEK;
	if (codepoint >= 0xAC00 && codepoint <= 0xD7AF) return Unicode_Block_HANGUL_SYLLABLES;
	if (codepoint >= 0xD7B0 && codepoint <= 0xD7FF) return Unicode_Block_HANGUL_JAMO_EXTENDED_B;
	if (codepoint >= 0xD800 && codepoint <= 0xDB7F) return Unicode_Block_HIGH_SURROGATES;
	if (codepoint >= 0xDB80 && codepoint <= 0xDBFF) return Unicode_Block_HIGH_PRIVATE_USE_SURROGATES;
	if (codepoint >= 0xDC00 && codepoint <= 0xDFFF) return Unicode_Block_LOW_SURROGATES;
	if (codepoint >= 0xE000 && codepoint <= 0xF8FF) return Unicode_Block_PRIVATE_USE_AREA;
	if (codepoint >= 0xF900 && codepoint <= 0xFAFF) return Unicode_Block_CJK_COMPATIBILITY_IDEOGRAPHS;
	if (codepoint >= 0xFB00 && codepoint <= 0xFB4F) return Unicode_Block_ALPHABETIC_PRESENTATION_FORMS;
	if (codepoint >= 0xFB50 && codepoint <= 0xFDFF) return Unicode_Block_ARABIC_PRESENTATION_FORMS_A;
	if (codepoint >= 0xFE00 && codepoint <= 0xFE0F) return Unicode_Block_VARIATION_SELECTORS;
	if (codepoint >= 0xFE10 && codepoint <= 0xFE1F) return Unicode_Block_VERTICAL_FORMS;
	if (codepoint >= 0xFE20 && codepoint <= 0xFE2F) return Unicode_Block_COMBINING_HALF_MARKS;
	if (codepoint >= 0xFE30 && codepoint <= 0xFE4F) return Unicode_Block_CJK_COMPATIBILITY_FORMS;
	if (codepoint >= 0xFE50 && codepoint <= 0xFE6F) return Unicode_Block_SMALL_FORM_VARIANTS;
	if (codepoint >= 0xFE70 && codepoint <= 0xFEFF) return Unicode_Block_ARABIC_PRESENTATION_FORMS_B;
	if (codepoint >= 0xFF00 && codepoint <= 0xFFEF) return Unicode_Block_HALFWIDTH_AND_FULLWIDTH_FORMS;
	if (codepoint >= 0xFFF0 && codepoint <= 0xFFFF) return Unicode_Block_SPECIALS;
	if (codepoint >= 0x10000 && codepoint <= 0x1007F) return Unicode_Block_LINEAR_B_SYLLABARY;
	if (codepoint >= 0x10080 && codepoint <= 0x100FF) return Unicode_Block_LINEAR_B_IDEOGRAMS;
	if (codepoint >= 0x10100 && codepoint <= 0x1013F) return Unicode_Block_AEGEAN_NUMBERS;
	if (codepoint >= 0x10140 && codepoint <= 0x1018F) return Unicode_Block_ANCIENT_GREEK_NUMBERS;
	if (codepoint >= 0x10190 && codepoint <= 0x101CF) return Unicode_Block_ANCIENT_SYMBOLS;
	if (codepoint >= 0x101D0 && codepoint <= 0x101FF) return Unicode_Block_PHAISTOS_DISC;
	if (codepoint >= 0x10280 && codepoint <= 0x1029F) return Unicode_Block_LYCIAN;
	if (codepoint >= 0x102A0 && codepoint <= 0x102DF) return Unicode_Block_CARIAN;
	if (codepoint >= 0x102E0 && codepoint <= 0x102FF) return Unicode_Block_COPTIC_EPACT_NUMBERS;
	if (codepoint >= 0x10300 && codepoint <= 0x1032F) return Unicode_Block_OLD_ITALIC;
	if (codepoint >= 0x10330 && codepoint <= 0x1034F) return Unicode_Block_GOTHIC;
	if (codepoint >= 0x10350 && codepoint <= 0x1037F) return Unicode_Block_OLD_PERMIC;
	if (codepoint >= 0x10380 && codepoint <= 0x1039F) return Unicode_Block_UGARITIC;
	if (codepoint >= 0x103A0 && codepoint <= 0x103DF) return Unicode_Block_OLD_PERSIAN;
	if (codepoint >= 0x10400 && codepoint <= 0x1044F) return Unicode_Block_DESERET;
	if (codepoint >= 0x10450 && codepoint <= 0x1047F) return Unicode_Block_SHAVIAN;
	if (codepoint >= 0x10480 && codepoint <= 0x104AF) return Unicode_Block_OSMANYA;
	if (codepoint >= 0x104B0 && codepoint <= 0x104FF) return Unicode_Block_OSAGE;
	if (codepoint >= 0x10500 && codepoint <= 0x1052F) return Unicode_Block_ELBASAN;
	if (codepoint >= 0x10530 && codepoint <= 0x1056F) return Unicode_Block_CAUCASIAN_ALBANIAN;
	if (codepoint >= 0x10600 && codepoint <= 0x1077F) return Unicode_Block_LINEAR_A;
	if (codepoint >= 0x10800 && codepoint <= 0x1083F) return Unicode_Block_CYPRIOT_SYLLABARY;
	if (codepoint >= 0x10840 && codepoint <= 0x1085F) return Unicode_Block_IMPERIAL_ARAMAIC;
	if (codepoint >= 0x10860 && codepoint <= 0x1087F) return Unicode_Block_PALMYRENE;
	if (codepoint >= 0x10880 && codepoint <= 0x108AF) return Unicode_Block_NABATAEAN;
	if (codepoint >= 0x108E0 && codepoint <= 0x108FF) return Unicode_Block_HATRAN;
	if (codepoint >= 0x10900 && codepoint <= 0x1091F) return Unicode_Block_PHOENICIAN;
	if (codepoint >= 0x10920 && codepoint <= 0x1093F) return Unicode_Block_LYDIAN;
	if (codepoint >= 0x10980 && codepoint <= 0x1099F) return Unicode_Block_MEROITIC_HIEROGLYPHS;
	if (codepoint >= 0x109A0 && codepoint <= 0x109FF) return Unicode_Block_MEROITIC_CURSIVE;
	if (codepoint >= 0x10A00 && codepoint <= 0x10A5F) return Unicode_Block_KHAROSHTHI;
	if (codepoint >= 0x10A60 && codepoint <= 0x10A7F) return Unicode_Block_OLD_SOUTH_ARABIAN;
	if (codepoint >= 0x10A80 && codepoint <= 0x10A9F) return Unicode_Block_OLD_NORTH_ARABIAN;
	if (codepoint >= 0x10AC0 && codepoint <= 0x10AFF) return Unicode_Block_MANICHAEAN;
	if (codepoint >= 0x10B00 && codepoint <= 0x10B3F) return Unicode_Block_AVESTAN;
	if (codepoint >= 0x10B40 && codepoint <= 0x10B5F) return Unicode_Block_INSCRIPTIONAL_PARTHIAN;
	if (codepoint >= 0x10B60 && codepoint <= 0x10B7F) return Unicode_Block_INSCRIPTIONAL_PAHLAVI;
	if (codepoint >= 0x10B80 && codepoint <= 0x10BAF) return Unicode_Block_PSALTER_PAHLAVI;
	if (codepoint >= 0x10C00 && codepoint <= 0x10C4F) return Unicode_Block_OLD_TURKIC;
	if (codepoint >= 0x10C80 && codepoint <= 0x10CFF) return Unicode_Block_OLD_HUNGARIAN;
	if (codepoint >= 0x10D00 && codepoint <= 0x10D3F) return Unicode_Block_HANIFI_ROHINGYA;
	if (codepoint >= 0x10E60 && codepoint <= 0x10E7F) return Unicode_Block_RUMI_NUMERAL_SYMBOLS;
	if (codepoint >= 0x10E80 && codepoint <= 0x10EBF) return Unicode_Block_YEZIDI;
	if (codepoint >= 0x10F00 && codepoint <= 0x10F2F) return Unicode_Block_OLD_SOGDIAN;
	if (codepoint >= 0x10F30 && codepoint <= 0x10F6F) return Unicode_Block_SOGDIAN;
	if (codepoint >= 0x10FB0 && codepoint <= 0x10FDF) return Unicode_Block_CHORASMIAN;
	if (codepoint >= 0x10FE0 && codepoint <= 0x10FFF) return Unicode_Block_ELYMAIC;
	if (codepoint >= 0x11000 && codepoint <= 0x1107F) return Unicode_Block_BRAHMI;
	if (codepoint >= 0x11080 && codepoint <= 0x110CF) return Unicode_Block_KAITHI;
	if (codepoint >= 0x110D0 && codepoint <= 0x110FF) return Unicode_Block_SORA_SOMPENG;
	if (codepoint >= 0x11100 && codepoint <= 0x1114F) return Unicode_Block_CHAKMA;
	if (codepoint >= 0x11150 && codepoint <= 0x1117F) return Unicode_Block_MAHAJANI;
	if (codepoint >= 0x11180 && codepoint <= 0x111DF) return Unicode_Block_SHARADA;
	if (codepoint >= 0x111E0 && codepoint <= 0x111FF) return Unicode_Block_SINHALA_ARCHAIC_NUMBERS;
	if (codepoint >= 0x11200 && codepoint <= 0x1124F) return Unicode_Block_KHOJKI;
	if (codepoint >= 0x11280 && codepoint <= 0x112AF) return Unicode_Block_MULTANI;
	if (codepoint >= 0x112B0 && codepoint <= 0x112FF) return Unicode_Block_KHUDAWADI;
	if (codepoint >= 0x11300 && codepoint <= 0x1137F) return Unicode_Block_GRANTHA;
	if (codepoint >= 0x11400 && codepoint <= 0x1147F) return Unicode_Block_NEWA;
	if (codepoint >= 0x11480 && codepoint <= 0x114DF) return Unicode_Block_TIRHUTA;
	if (codepoint >= 0x11580 && codepoint <= 0x115FF) return Unicode_Block_SIDDHAM;
	if (codepoint >= 0x11600 && codepoint <= 0x1165F) return Unicode_Block_MODI;
	if (codepoint >= 0x11660 && codepoint <= 0x1167F) return Unicode_Block_MONGOLIAN_SUPPLEMENT;
	if (codepoint >= 0x11680 && codepoint <= 0x116CF) return Unicode_Block_TAKRI;
	if (codepoint >= 0x11700 && codepoint <= 0x1173F) return Unicode_Block_AHOM;
	if (codepoint >= 0x11800 && codepoint <= 0x1184F) return Unicode_Block_DOGRA;
	if (codepoint >= 0x118A0 && codepoint <= 0x118FF) return Unicode_Block_WARANG_CITI;
	if (codepoint >= 0x11900 && codepoint <= 0x1195F) return Unicode_Block_DIVES_AKURU;
	if (codepoint >= 0x119A0 && codepoint <= 0x119FF) return Unicode_Block_NANDINAGARI;
	if (codepoint >= 0x11A00 && codepoint <= 0x11A4F) return Unicode_Block_ZANABAZAR_SQUARE;
	if (codepoint >= 0x11A50 && codepoint <= 0x11AAF) return Unicode_Block_SOYOMBO;
	if (codepoint >= 0x11AC0 && codepoint <= 0x11AFF) return Unicode_Block_PAU_CIN_HAU;
	if (codepoint >= 0x11C00 && codepoint <= 0x11C6F) return Unicode_Block_BHAIKSUKI;
	if (codepoint >= 0x11C70 && codepoint <= 0x11CBF) return Unicode_Block_MARCHEN;
	if (codepoint >= 0x11D00 && codepoint <= 0x11D5F) return Unicode_Block_MASARAM_GONDI;
	if (codepoint >= 0x11D60 && codepoint <= 0x11DAF) return Unicode_Block_GUNJALA_GONDI;
	if (codepoint >= 0x11EE0 && codepoint <= 0x11EFF) return Unicode_Block_MAKASAR;
	if (codepoint >= 0x11FB0 && codepoint <= 0x11FBF) return Unicode_Block_LISU_SUPPLEMENT;
	if (codepoint >= 0x11FC0 && codepoint <= 0x11FFF) return Unicode_Block_TAMIL_SUPPLEMENT;
	if (codepoint >= 0x12000 && codepoint <= 0x123FF) return Unicode_Block_CUNEIFORM;
	if (codepoint >= 0x12400 && codepoint <= 0x1247F) return Unicode_Block_CUNEIFORM_NUMBERS_AND_PUNCTUATION;
	if (codepoint >= 0x12480 && codepoint <= 0x1254F) return Unicode_Block_EARLY_DYNASTIC_CUNEIFORM;
	if (codepoint >= 0x13000 && codepoint <= 0x1342F) return Unicode_Block_EGYPTIAN_HIEROGLYPHS;
	if (codepoint >= 0x13430 && codepoint <= 0x1343F) return Unicode_Block_EGYPTIAN_HIEROGLYPH_FORMAT_CONTROLS;
	if (codepoint >= 0x14400 && codepoint <= 0x1467F) return Unicode_Block_ANATOLIAN_HIEROGLYPHS;
	if (codepoint >= 0x16800 && codepoint <= 0x16A3F) return Unicode_Block_BAMUM_SUPPLEMENT;
	if (codepoint >= 0x16A40 && codepoint <= 0x16A6F) return Unicode_Block_MRO;
	if (codepoint >= 0x16AD0 && codepoint <= 0x16AFF) return Unicode_Block_BASSA_VAH;
	if (codepoint >= 0x16B00 && codepoint <= 0x16B8F) return Unicode_Block_PAHAWH_HMONG;
	if (codepoint >= 0x16E40 && codepoint <= 0x16E9F) return Unicode_Block_MEDEFAIDRIN;
	if (codepoint >= 0x16F00 && codepoint <= 0x16F9F) return Unicode_Block_MIAO;
	if (codepoint >= 0x16FE0 && codepoint <= 0x16FFF) return Unicode_Block_IDEOGRAPHIC_SYMBOLS_AND_PUNCTUATION;
	if (codepoint >= 0x17000 && codepoint <= 0x187FF) return Unicode_Block_TANGUT;
	if (codepoint >= 0x18800 && codepoint <= 0x18AFF) return Unicode_Block_TANGUT_COMPONENTS;
	if (codepoint >= 0x18B00 && codepoint <= 0x18CFF) return Unicode_Block_KHITAN_SMALL_SCRIPT;
	if (codepoint >= 0x18D00 && codepoint <= 0x18D8F) return Unicode_Block_TANGUT_SUPPLEMENT;
	if (codepoint >= 0x1B000 && codepoint <= 0x1B0FF) return Unicode_Block_KANA_SUPPLEMENT;
	if (codepoint >= 0x1B100 && codepoint <= 0x1B12F) return Unicode_Block_KANA_EXTENDED_A;
	if (codepoint >= 0x1B130 && codepoint <= 0x1B16F) return Unicode_Block_SMALL_KANA_EXTENSION;
	if (codepoint >= 0x1B170 && codepoint <= 0x1B2FF) return Unicode_Block_NUSHU;
	if (codepoint >= 0x1BC00 && codepoint <= 0x1BC9F) return Unicode_Block_DUPLOYAN;
	if (codepoint >= 0x1BCA0 && codepoint <= 0x1BCAF) return Unicode_Block_SHORTHAND_FORMAT_CONTROLS;
	if (codepoint >= 0x1D000 && codepoint <= 0x1D0FF) return Unicode_Block_BYZANTINE_MUSICAL_SYMBOLS;
	if (codepoint >= 0x1D100 && codepoint <= 0x1D1FF) return Unicode_Block_MUSICAL_SYMBOLS;
	if (codepoint >= 0x1D200 && codepoint <= 0x1D24F) return Unicode_Block_ANCIENT_GREEK_MUSICAL_NOTATION;
	if (codepoint >= 0x1D2E0 && codepoint <= 0x1D2FF) return Unicode_Block_MAYAN_NUMERALS;
	if (codepoint >= 0x1D300 && codepoint <= 0x1D35F) return Unicode_Block_TAI_XUAN_JING_SYMBOLS;
	if (codepoint >= 0x1D360 && codepoint <= 0x1D37F) return Unicode_Block_COUNTING_ROD_NUMERALS;
	if (codepoint >= 0x1D400 && codepoint <= 0x1D7FF) return Unicode_Block_MATHEMATICAL_ALPHANUMERIC_SYMBOLS;
	if (codepoint >= 0x1D800 && codepoint <= 0x1DAAF) return Unicode_Block_SUTTON_SIGNWRITING;
	if (codepoint >= 0x1E000 && codepoint <= 0x1E02F) return Unicode_Block_GLAGOLITIC_SUPPLEMENT;
	if (codepoint >= 0x1E100 && codepoint <= 0x1E14F) return Unicode_Block_NYIAKENG_PUACHUE_HMONG;
	if (codepoint >= 0x1E2C0 && codepoint <= 0x1E2FF) return Unicode_Block_WANCHO;
	if (codepoint >= 0x1E800 && codepoint <= 0x1E8DF) return Unicode_Block_MENDE_KIKAKUI;
	if (codepoint >= 0x1E900 && codepoint <= 0x1E95F) return Unicode_Block_ADLAM;
	if (codepoint >= 0x1EC70 && codepoint <= 0x1ECBF) return Unicode_Block_INDIC_SIYAQ_NUMBERS;
	if (codepoint >= 0x1ED00 && codepoint <= 0x1ED4F) return Unicode_Block_OTTOMAN_SIYAQ_NUMBERS;
	if (codepoint >= 0x1EE00 && codepoint <= 0x1EEFF) return Unicode_Block_ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS;
	if (codepoint >= 0x1F000 && codepoint <= 0x1F02F) return Unicode_Block_MAHJONG_TILES;
	if (codepoint >= 0x1F030 && codepoint <= 0x1F09F) return Unicode_Block_DOMINO_TILES;
	if (codepoint >= 0x1F0A0 && codepoint <= 0x1F0FF) return Unicode_Block_PLAYING_CARDS;
	if (codepoint >= 0x1F100 && codepoint <= 0x1F1FF) return Unicode_Block_ENCLOSED_ALPHANUMERIC_SUPPLEMENT;
	if (codepoint >= 0x1F200 && codepoint <= 0x1F2FF) return Unicode_Block_ENCLOSED_IDEOGRAPHIC_SUPPLEMENT;
	if (codepoint >= 0x1F300 && codepoint <= 0x1F5FF) return Unicode_Block_MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS;
	if (codepoint >= 0x1F600 && codepoint <= 0x1F64F) return Unicode_Block_EMOTICONS;
	if (codepoint >= 0x1F650 && codepoint <= 0x1F67F) return Unicode_Block_ORNAMENTAL_DINGBATS;
	if (codepoint >= 0x1F680 && codepoint <= 0x1F6FF) return Unicode_Block_TRANSPORT_AND_MAP_SYMBOLS;
	if (codepoint >= 0x1F700 && codepoint <= 0x1F77F) return Unicode_Block_ALCHEMICAL_SYMBOLS;
	if (codepoint >= 0x1F780 && codepoint <= 0x1F7FF) return Unicode_Block_GEOMETRIC_SHAPES_EXTENDED;
	if (codepoint >= 0x1F800 && codepoint <= 0x1F8FF) return Unicode_Block_SUPPLEMENTAL_ARROWS_C;
	if (codepoint >= 0x1F900 && codepoint <= 0x1F9FF) return Unicode_Block_SUPPLEMENTAL_SYMBOLS_AND_PICTOGRAPHS;
	if (codepoint >= 0x1FA00 && codepoint <= 0x1FA6F) return Unicode_Block_CHESS_SYMBOLS;
	if (codepoint >= 0x1FA70 && codepoint <= 0x1FAFF) return Unicode_Block_SYMBOLS_AND_PICTOGRAPHS_EXTENDED_A;
	if (codepoint >= 0x1FB00 && codepoint <= 0x1FBFF) return Unicode_Block_SYMBOLS_FOR_LEGACY_COMPUTING;
	if (codepoint >= 0x20000 && codepoint <= 0x2A6DF) return Unicode_Block_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B;
	if (codepoint >= 0x2A700 && codepoint <= 0x2B73F) return Unicode_Block_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C;
	if (codepoint >= 0x2B740 && codepoint <= 0x2B81F) return Unicode_Block_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D;
	if (codepoint >= 0x2B820 && codepoint <= 0x2CEAF) return Unicode_Block_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_E;
	if (codepoint >= 0x2CEB0 && codepoint <= 0x2EBEF) return Unicode_Block_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_F;
	if (codepoint >= 0x2F800 && codepoint <= 0x2FA1F) return Unicode_Block_CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT;
	if (codepoint >= 0x30000 && codepoint <= 0x3134F) return Unicode_Block_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_G;
	if (codepoint >= 0xE0000 && codepoint <= 0xE007F) return Unicode_Block_TAGS;
	if (codepoint >= 0xE0100 && codepoint <= 0xE01EF) return Unicode_Block_VARIATION_SELECTORS_SUPPLEMENT;
	if (codepoint >= 0xF0000 && codepoint <= 0xFFFFF) return Unicode_Block_SUPPLEMENTARY_PRIVATE_USE_AREA_A;
	if (codepoint >= 0x100000 && codepoint <= 0x10FFFF) return Unicode_Block_SUPPLEMENTARY_PRIVATE_USE_AREA_B;

	return Unicode_Block_UNKNOWN;
}

Unicode_Prop unicode_prop(uint32_t codepoint) {
	if (codepoint >= 0x0009 && codepoint <= 0x000D) return Unicode_Prop_WHITE_SPACE;
	if (codepoint == 0x0020) return Unicode_Prop_WHITE_SPACE;
	if (codepoint == 0x0085) return Unicode_Prop_WHITE_SPACE;
	if (codepoint == 0x00A0) return Unicode_Prop_WHITE_SPACE;
	if (codepoint == 0x1680) return Unicode_Prop_WHITE_SPACE;
	if (codepoint >= 0x2000 && codepoint <= 0x200A) return Unicode_Prop_WHITE_SPACE;
	if (codepoint == 0x2028) return Unicode_Prop_WHITE_SPACE;
	if (codepoint == 0x2029) return Unicode_Prop_WHITE_SPACE;
	if (codepoint == 0x202F) return Unicode_Prop_WHITE_SPACE;
	if (codepoint == 0x205F) return Unicode_Prop_WHITE_SPACE;
	if (codepoint == 0x3000) return Unicode_Prop_WHITE_SPACE;
	if (codepoint == 0x061C) return Unicode_Prop_BIDI_CONTROL;
	if (codepoint >= 0x200E && codepoint <= 0x200F) return Unicode_Prop_BIDI_CONTROL;
	if (codepoint >= 0x202A && codepoint <= 0x202E) return Unicode_Prop_BIDI_CONTROL;
	if (codepoint >= 0x2066 && codepoint <= 0x2069) return Unicode_Prop_BIDI_CONTROL;
	if (codepoint >= 0x200C && codepoint <= 0x200D) return Unicode_Prop_JOIN_CONTROL;
	if (codepoint == 0x002D) return Unicode_Prop_DASH;
	if (codepoint == 0x058A) return Unicode_Prop_DASH;
	if (codepoint == 0x05BE) return Unicode_Prop_DASH;
	if (codepoint == 0x1400) return Unicode_Prop_DASH;
	if (codepoint == 0x1806) return Unicode_Prop_DASH;
	if (codepoint >= 0x2010 && codepoint <= 0x2015) return Unicode_Prop_DASH;
	if (codepoint == 0x2053) return Unicode_Prop_DASH;
	if (codepoint == 0x207B) return Unicode_Prop_DASH;
	if (codepoint == 0x208B) return Unicode_Prop_DASH;
	if (codepoint == 0x2212) return Unicode_Prop_DASH;
	if (codepoint == 0x2E17) return Unicode_Prop_DASH;
	if (codepoint == 0x2E1A) return Unicode_Prop_DASH;
	if (codepoint >= 0x2E3A && codepoint <= 0x2E3B) return Unicode_Prop_DASH;
	if (codepoint == 0x2E40) return Unicode_Prop_DASH;
	if (codepoint == 0x301C) return Unicode_Prop_DASH;
	if (codepoint == 0x3030) return Unicode_Prop_DASH;
	if (codepoint == 0x30A0) return Unicode_Prop_DASH;
	if (codepoint >= 0xFE31 && codepoint <= 0xFE32) return Unicode_Prop_DASH;
	if (codepoint == 0xFE58) return Unicode_Prop_DASH;
	if (codepoint == 0xFE63) return Unicode_Prop_DASH;
	if (codepoint == 0xFF0D) return Unicode_Prop_DASH;
	if (codepoint == 0x10EAD) return Unicode_Prop_DASH;
	if (codepoint == 0x002D) return Unicode_Prop_HYPHEN;
	if (codepoint == 0x00AD) return Unicode_Prop_HYPHEN;
	if (codepoint == 0x058A) return Unicode_Prop_HYPHEN;
	if (codepoint == 0x1806) return Unicode_Prop_HYPHEN;
	if (codepoint >= 0x2010 && codepoint <= 0x2011) return Unicode_Prop_HYPHEN;
	if (codepoint == 0x2E17) return Unicode_Prop_HYPHEN;
	if (codepoint == 0x30FB) return Unicode_Prop_HYPHEN;
	if (codepoint == 0xFE63) return Unicode_Prop_HYPHEN;
	if (codepoint == 0xFF0D) return Unicode_Prop_HYPHEN;
	if (codepoint == 0xFF65) return Unicode_Prop_HYPHEN;
	if (codepoint == 0x0022) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0x0027) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0x00AB) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0x00BB) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0x2018) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0x2019) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0x201A) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint >= 0x201B && codepoint <= 0x201C) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0x201D) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0x201E) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0x201F) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0x2039) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0x203A) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0x2E42) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0x300C) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0x300D) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0x300E) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0x300F) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0x301D) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint >= 0x301E && codepoint <= 0x301F) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0xFE41) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0xFE42) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0xFE43) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0xFE44) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0xFF02) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0xFF07) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0xFF62) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0xFF63) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0x0021) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x002C) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x002E) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x003A && codepoint <= 0x003B) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x003F) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x037E) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x0387) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x0589) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x05C3) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x060C) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x061B) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x061E && codepoint <= 0x061F) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x06D4) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x0700 && codepoint <= 0x070A) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x070C) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x07F8 && codepoint <= 0x07F9) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x0830 && codepoint <= 0x083E) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x085E) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x0964 && codepoint <= 0x0965) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x0E5A && codepoint <= 0x0E5B) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x0F08) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x0F0D && codepoint <= 0x0F12) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x104A && codepoint <= 0x104B) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x1361 && codepoint <= 0x1368) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x166E) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x16EB && codepoint <= 0x16ED) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x1735 && codepoint <= 0x1736) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x17D4 && codepoint <= 0x17D6) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x17DA) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x1802 && codepoint <= 0x1805) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x1808 && codepoint <= 0x1809) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x1944 && codepoint <= 0x1945) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x1AA8 && codepoint <= 0x1AAB) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x1B5A && codepoint <= 0x1B5B) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x1B5D && codepoint <= 0x1B5F) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x1C3B && codepoint <= 0x1C3F) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x1C7E && codepoint <= 0x1C7F) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x203C && codepoint <= 0x203D) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x2047 && codepoint <= 0x2049) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x2E2E) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x2E3C) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x2E41) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x2E4C) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x2E4E && codepoint <= 0x2E4F) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x3001 && codepoint <= 0x3002) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0xA4FE && codepoint <= 0xA4FF) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0xA60D && codepoint <= 0xA60F) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0xA6F3 && codepoint <= 0xA6F7) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0xA876 && codepoint <= 0xA877) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0xA8CE && codepoint <= 0xA8CF) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0xA92F) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0xA9C7 && codepoint <= 0xA9C9) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0xAA5D && codepoint <= 0xAA5F) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0xAADF) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0xAAF0 && codepoint <= 0xAAF1) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0xABEB) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0xFE50 && codepoint <= 0xFE52) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0xFE54 && codepoint <= 0xFE57) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0xFF01) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0xFF0C) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0xFF0E) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0xFF1A && codepoint <= 0xFF1B) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0xFF1F) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0xFF61) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0xFF64) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x1039F) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x103D0) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x10857) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x1091F) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x10A56 && codepoint <= 0x10A57) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x10AF0 && codepoint <= 0x10AF5) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x10B3A && codepoint <= 0x10B3F) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x10B99 && codepoint <= 0x10B9C) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x10F55 && codepoint <= 0x10F59) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x11047 && codepoint <= 0x1104D) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x110BE && codepoint <= 0x110C1) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x11141 && codepoint <= 0x11143) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x111C5 && codepoint <= 0x111C6) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x111CD) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x111DE && codepoint <= 0x111DF) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x11238 && codepoint <= 0x1123C) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x112A9) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x1144B && codepoint <= 0x1144D) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x1145A && codepoint <= 0x1145B) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x115C2 && codepoint <= 0x115C5) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x115C9 && codepoint <= 0x115D7) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x11641 && codepoint <= 0x11642) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x1173C && codepoint <= 0x1173E) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x11944) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x11946) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x11A42 && codepoint <= 0x11A43) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x11A9B && codepoint <= 0x11A9C) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x11AA1 && codepoint <= 0x11AA2) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x11C41 && codepoint <= 0x11C43) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x11C71) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x11EF7 && codepoint <= 0x11EF8) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x12470 && codepoint <= 0x12474) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x16A6E && codepoint <= 0x16A6F) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x16AF5) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x16B37 && codepoint <= 0x16B39) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x16B44) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x16E97 && codepoint <= 0x16E98) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x1BC9F) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x1DA87 && codepoint <= 0x1DA8A) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x005E) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x03D0 && codepoint <= 0x03D2) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x03D5) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x03F0 && codepoint <= 0x03F1) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x03F4 && codepoint <= 0x03F5) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2016) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x2032 && codepoint <= 0x2034) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2040) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x2061 && codepoint <= 0x2064) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x207D) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x207E) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x208D) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x208E) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x20D0 && codepoint <= 0x20DC) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x20E1) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x20E5 && codepoint <= 0x20E6) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x20EB && codepoint <= 0x20EF) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2102) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2107) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x210A && codepoint <= 0x2113) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2115) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x2119 && codepoint <= 0x211D) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2124) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2128) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2129) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x212C && codepoint <= 0x212D) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x212F && codepoint <= 0x2131) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x2133 && codepoint <= 0x2134) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x2135 && codepoint <= 0x2138) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x213C && codepoint <= 0x213F) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x2145 && codepoint <= 0x2149) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x2195 && codepoint <= 0x2199) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x219C && codepoint <= 0x219F) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x21A1 && codepoint <= 0x21A2) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x21A4 && codepoint <= 0x21A5) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x21A7) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x21A9 && codepoint <= 0x21AD) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x21B0 && codepoint <= 0x21B1) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x21B6 && codepoint <= 0x21B7) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x21BC && codepoint <= 0x21CD) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x21D0 && codepoint <= 0x21D1) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x21D3) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x21D5 && codepoint <= 0x21DB) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x21DD) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x21E4 && codepoint <= 0x21E5) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2308) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2309) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x230A) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x230B) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x23B4 && codepoint <= 0x23B5) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x23B7) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x23D0) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x23E2) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x25A0 && codepoint <= 0x25A1) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x25AE && codepoint <= 0x25B6) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x25BC && codepoint <= 0x25C0) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x25C6 && codepoint <= 0x25C7) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x25CA && codepoint <= 0x25CB) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x25CF && codepoint <= 0x25D3) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x25E2) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x25E4) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x25E7 && codepoint <= 0x25EC) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x2605 && codepoint <= 0x2606) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2640) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2642) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x2660 && codepoint <= 0x2663) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x266D && codepoint <= 0x266E) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x27C5) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x27C6) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x27E6) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x27E7) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x27E8) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x27E9) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x27EA) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x27EB) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x27EC) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x27ED) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x27EE) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x27EF) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2983) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2984) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2985) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2986) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2987) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2988) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2989) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x298A) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x298B) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x298C) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x298D) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x298E) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x298F) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2990) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2991) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2992) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2993) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2994) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2995) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2996) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2997) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2998) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x29D8) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x29D9) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x29DA) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x29DB) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x29FC) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x29FD) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0xFE61) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0xFE63) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0xFE68) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0xFF3C) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0xFF3E) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D400 && codepoint <= 0x1D454) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D456 && codepoint <= 0x1D49C) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D49E && codepoint <= 0x1D49F) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x1D4A2) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D4A5 && codepoint <= 0x1D4A6) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D4A9 && codepoint <= 0x1D4AC) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D4AE && codepoint <= 0x1D4B9) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x1D4BB) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D4BD && codepoint <= 0x1D4C3) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D4C5 && codepoint <= 0x1D505) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D507 && codepoint <= 0x1D50A) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D50D && codepoint <= 0x1D514) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D516 && codepoint <= 0x1D51C) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D51E && codepoint <= 0x1D539) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D53B && codepoint <= 0x1D53E) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D540 && codepoint <= 0x1D544) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x1D546) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D54A && codepoint <= 0x1D550) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D552 && codepoint <= 0x1D6A5) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D6A8 && codepoint <= 0x1D6C0) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D6C2 && codepoint <= 0x1D6DA) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D6DC && codepoint <= 0x1D6FA) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D6FC && codepoint <= 0x1D714) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D716 && codepoint <= 0x1D734) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D736 && codepoint <= 0x1D74E) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D750 && codepoint <= 0x1D76E) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D770 && codepoint <= 0x1D788) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D78A && codepoint <= 0x1D7A8) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D7AA && codepoint <= 0x1D7C2) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D7C4 && codepoint <= 0x1D7CB) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D7CE && codepoint <= 0x1D7FF) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1EE00 && codepoint <= 0x1EE03) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1EE05 && codepoint <= 0x1EE1F) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1EE21 && codepoint <= 0x1EE22) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x1EE24) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x1EE27) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1EE29 && codepoint <= 0x1EE32) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1EE34 && codepoint <= 0x1EE37) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x1EE39) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x1EE3B) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x1EE42) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x1EE47) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x1EE49) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x1EE4B) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1EE4D && codepoint <= 0x1EE4F) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1EE51 && codepoint <= 0x1EE52) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x1EE54) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x1EE57) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x1EE59) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x1EE5B) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x1EE5D) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x1EE5F) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1EE61 && codepoint <= 0x1EE62) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x1EE64) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1EE67 && codepoint <= 0x1EE6A) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1EE6C && codepoint <= 0x1EE72) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1EE74 && codepoint <= 0x1EE77) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1EE79 && codepoint <= 0x1EE7C) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x1EE7E) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1EE80 && codepoint <= 0x1EE89) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1EE8B && codepoint <= 0x1EE9B) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1EEA1 && codepoint <= 0x1EEA3) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1EEA5 && codepoint <= 0x1EEA9) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1EEAB && codepoint <= 0x1EEBB) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x0030 && codepoint <= 0x0039) return Unicode_Prop_HEX_DIGIT;
	if (codepoint >= 0x0041 && codepoint <= 0x0046) return Unicode_Prop_HEX_DIGIT;
	if (codepoint >= 0x0061 && codepoint <= 0x0066) return Unicode_Prop_HEX_DIGIT;
	if (codepoint >= 0xFF10 && codepoint <= 0xFF19) return Unicode_Prop_HEX_DIGIT;
	if (codepoint >= 0xFF21 && codepoint <= 0xFF26) return Unicode_Prop_HEX_DIGIT;
	if (codepoint >= 0xFF41 && codepoint <= 0xFF46) return Unicode_Prop_HEX_DIGIT;
	if (codepoint >= 0x0030 && codepoint <= 0x0039) return Unicode_Prop_ASCII_HEX_DIGIT;
	if (codepoint >= 0x0041 && codepoint <= 0x0046) return Unicode_Prop_ASCII_HEX_DIGIT;
	if (codepoint >= 0x0061 && codepoint <= 0x0066) return Unicode_Prop_ASCII_HEX_DIGIT;
	if (codepoint == 0x0345) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x05B0 && codepoint <= 0x05BD) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x05BF) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x05C1 && codepoint <= 0x05C2) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x05C4 && codepoint <= 0x05C5) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x05C7) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0610 && codepoint <= 0x061A) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x064B && codepoint <= 0x0657) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0659 && codepoint <= 0x065F) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0670) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x06D6 && codepoint <= 0x06DC) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x06E1 && codepoint <= 0x06E4) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x06E7 && codepoint <= 0x06E8) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x06ED) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0711) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0730 && codepoint <= 0x073F) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x07A6 && codepoint <= 0x07B0) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0816 && codepoint <= 0x0817) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x081B && codepoint <= 0x0823) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0825 && codepoint <= 0x0827) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0829 && codepoint <= 0x082C) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x08D4 && codepoint <= 0x08DF) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x08E3 && codepoint <= 0x08E9) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x08F0 && codepoint <= 0x0902) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0903) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x093A) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x093B) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x093E && codepoint <= 0x0940) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0941 && codepoint <= 0x0948) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0949 && codepoint <= 0x094C) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x094E && codepoint <= 0x094F) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0955 && codepoint <= 0x0957) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0962 && codepoint <= 0x0963) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0981) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0982 && codepoint <= 0x0983) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x09BE && codepoint <= 0x09C0) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x09C1 && codepoint <= 0x09C4) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x09C7 && codepoint <= 0x09C8) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x09CB && codepoint <= 0x09CC) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x09D7) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x09E2 && codepoint <= 0x09E3) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0A01 && codepoint <= 0x0A02) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0A03) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0A3E && codepoint <= 0x0A40) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0A41 && codepoint <= 0x0A42) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0A47 && codepoint <= 0x0A48) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0A4B && codepoint <= 0x0A4C) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0A51) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0A70 && codepoint <= 0x0A71) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0A75) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0A81 && codepoint <= 0x0A82) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0A83) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0ABE && codepoint <= 0x0AC0) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0AC1 && codepoint <= 0x0AC5) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0AC7 && codepoint <= 0x0AC8) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0AC9) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0ACB && codepoint <= 0x0ACC) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0AE2 && codepoint <= 0x0AE3) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0AFA && codepoint <= 0x0AFC) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0B01) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0B02 && codepoint <= 0x0B03) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0B3E) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0B3F) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0B40) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0B41 && codepoint <= 0x0B44) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0B47 && codepoint <= 0x0B48) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0B4B && codepoint <= 0x0B4C) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0B56) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0B57) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0B62 && codepoint <= 0x0B63) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0B82) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0BBE && codepoint <= 0x0BBF) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0BC0) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0BC1 && codepoint <= 0x0BC2) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0BC6 && codepoint <= 0x0BC8) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0BCA && codepoint <= 0x0BCC) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0BD7) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0C00) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0C01 && codepoint <= 0x0C03) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0C3E && codepoint <= 0x0C40) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0C41 && codepoint <= 0x0C44) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0C46 && codepoint <= 0x0C48) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0C4A && codepoint <= 0x0C4C) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0C55 && codepoint <= 0x0C56) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0C62 && codepoint <= 0x0C63) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0C81) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0C82 && codepoint <= 0x0C83) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0CBE) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0CBF) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0CC0 && codepoint <= 0x0CC4) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0CC6) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0CC7 && codepoint <= 0x0CC8) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0CCA && codepoint <= 0x0CCB) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0CCC) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0CD5 && codepoint <= 0x0CD6) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0CE2 && codepoint <= 0x0CE3) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0D00 && codepoint <= 0x0D01) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0D02 && codepoint <= 0x0D03) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0D3E && codepoint <= 0x0D40) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0D41 && codepoint <= 0x0D44) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0D46 && codepoint <= 0x0D48) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0D4A && codepoint <= 0x0D4C) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0D57) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0D62 && codepoint <= 0x0D63) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0D81) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0D82 && codepoint <= 0x0D83) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0DCF && codepoint <= 0x0DD1) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0DD2 && codepoint <= 0x0DD4) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0DD6) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0DD8 && codepoint <= 0x0DDF) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0DF2 && codepoint <= 0x0DF3) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0E31) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0E34 && codepoint <= 0x0E3A) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0E4D) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0EB1) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0EB4 && codepoint <= 0x0EB9) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0EBB && codepoint <= 0x0EBC) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0ECD) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0F71 && codepoint <= 0x0F7E) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0F7F) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0F80 && codepoint <= 0x0F81) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0F8D && codepoint <= 0x0F97) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0F99 && codepoint <= 0x0FBC) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x102B && codepoint <= 0x102C) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x102D && codepoint <= 0x1030) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1031) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1032 && codepoint <= 0x1036) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1038) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x103B && codepoint <= 0x103C) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x103D && codepoint <= 0x103E) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1056 && codepoint <= 0x1057) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1058 && codepoint <= 0x1059) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x105E && codepoint <= 0x1060) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1062 && codepoint <= 0x1064) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1067 && codepoint <= 0x106D) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1071 && codepoint <= 0x1074) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1082) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1083 && codepoint <= 0x1084) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1085 && codepoint <= 0x1086) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1087 && codepoint <= 0x108C) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x108D) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x108F) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x109A && codepoint <= 0x109C) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x109D) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1712 && codepoint <= 0x1713) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1732 && codepoint <= 0x1733) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1752 && codepoint <= 0x1753) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1772 && codepoint <= 0x1773) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x17B6) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x17B7 && codepoint <= 0x17BD) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x17BE && codepoint <= 0x17C5) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x17C6) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x17C7 && codepoint <= 0x17C8) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1885 && codepoint <= 0x1886) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x18A9) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1920 && codepoint <= 0x1922) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1923 && codepoint <= 0x1926) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1927 && codepoint <= 0x1928) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1929 && codepoint <= 0x192B) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1930 && codepoint <= 0x1931) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1932) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1933 && codepoint <= 0x1938) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1A17 && codepoint <= 0x1A18) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1A19 && codepoint <= 0x1A1A) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1A1B) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1A55) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1A56) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1A57) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1A58 && codepoint <= 0x1A5E) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1A61) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1A62) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1A63 && codepoint <= 0x1A64) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1A65 && codepoint <= 0x1A6C) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1A6D && codepoint <= 0x1A72) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1A73 && codepoint <= 0x1A74) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1ABF && codepoint <= 0x1AC0) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1B00 && codepoint <= 0x1B03) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1B04) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1B35) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1B36 && codepoint <= 0x1B3A) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1B3B) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1B3C) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1B3D && codepoint <= 0x1B41) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1B42) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1B43) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1B80 && codepoint <= 0x1B81) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1B82) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1BA1) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1BA2 && codepoint <= 0x1BA5) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1BA6 && codepoint <= 0x1BA7) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1BA8 && codepoint <= 0x1BA9) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1BAC && codepoint <= 0x1BAD) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1BE7) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1BE8 && codepoint <= 0x1BE9) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1BEA && codepoint <= 0x1BEC) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1BED) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1BEE) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1BEF && codepoint <= 0x1BF1) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1C24 && codepoint <= 0x1C2B) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1C2C && codepoint <= 0x1C33) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1C34 && codepoint <= 0x1C35) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1C36) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1DE7 && codepoint <= 0x1DF4) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x24B6 && codepoint <= 0x24E9) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x2DE0 && codepoint <= 0x2DFF) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xA674 && codepoint <= 0xA67B) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xA69E && codepoint <= 0xA69F) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0xA802) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0xA80B) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xA823 && codepoint <= 0xA824) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xA825 && codepoint <= 0xA826) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0xA827) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xA880 && codepoint <= 0xA881) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xA8B4 && codepoint <= 0xA8C3) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0xA8C5) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0xA8FF) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xA926 && codepoint <= 0xA92A) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xA947 && codepoint <= 0xA951) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0xA952) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xA980 && codepoint <= 0xA982) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0xA983) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xA9B4 && codepoint <= 0xA9B5) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xA9B6 && codepoint <= 0xA9B9) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xA9BA && codepoint <= 0xA9BB) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xA9BC && codepoint <= 0xA9BD) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xA9BE && codepoint <= 0xA9BF) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0xA9E5) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xAA29 && codepoint <= 0xAA2E) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xAA2F && codepoint <= 0xAA30) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xAA31 && codepoint <= 0xAA32) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xAA33 && codepoint <= 0xAA34) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xAA35 && codepoint <= 0xAA36) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0xAA43) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0xAA4C) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0xAA4D) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0xAA7B) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0xAA7C) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0xAA7D) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0xAAB0) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xAAB2 && codepoint <= 0xAAB4) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xAAB7 && codepoint <= 0xAAB8) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0xAABE) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0xAAEB) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xAAEC && codepoint <= 0xAAED) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xAAEE && codepoint <= 0xAAEF) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0xAAF5) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xABE3 && codepoint <= 0xABE4) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0xABE5) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xABE6 && codepoint <= 0xABE7) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0xABE8) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xABE9 && codepoint <= 0xABEA) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0xFB1E) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x10376 && codepoint <= 0x1037A) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x10A01 && codepoint <= 0x10A03) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x10A05 && codepoint <= 0x10A06) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x10A0C && codepoint <= 0x10A0F) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x10D24 && codepoint <= 0x10D27) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x10EAB && codepoint <= 0x10EAC) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11000) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11001) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11002) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11038 && codepoint <= 0x11045) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11082) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x110B0 && codepoint <= 0x110B2) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x110B3 && codepoint <= 0x110B6) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x110B7 && codepoint <= 0x110B8) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11100 && codepoint <= 0x11102) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11127 && codepoint <= 0x1112B) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1112C) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1112D && codepoint <= 0x11132) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11145 && codepoint <= 0x11146) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11180 && codepoint <= 0x11181) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11182) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x111B3 && codepoint <= 0x111B5) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x111B6 && codepoint <= 0x111BE) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x111BF) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x111CE) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x111CF) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1122C && codepoint <= 0x1122E) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1122F && codepoint <= 0x11231) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11232 && codepoint <= 0x11233) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11234) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11237) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1123E) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x112DF) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x112E0 && codepoint <= 0x112E2) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x112E3 && codepoint <= 0x112E8) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11300 && codepoint <= 0x11301) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11302 && codepoint <= 0x11303) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1133E && codepoint <= 0x1133F) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11340) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11341 && codepoint <= 0x11344) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11347 && codepoint <= 0x11348) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1134B && codepoint <= 0x1134C) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11357) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11362 && codepoint <= 0x11363) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11435 && codepoint <= 0x11437) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11438 && codepoint <= 0x1143F) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11440 && codepoint <= 0x11441) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11443 && codepoint <= 0x11444) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11445) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x114B0 && codepoint <= 0x114B2) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x114B3 && codepoint <= 0x114B8) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x114B9) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x114BA) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x114BB && codepoint <= 0x114BE) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x114BF && codepoint <= 0x114C0) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x114C1) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x115AF && codepoint <= 0x115B1) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x115B2 && codepoint <= 0x115B5) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x115B8 && codepoint <= 0x115BB) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x115BC && codepoint <= 0x115BD) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x115BE) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x115DC && codepoint <= 0x115DD) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11630 && codepoint <= 0x11632) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11633 && codepoint <= 0x1163A) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1163B && codepoint <= 0x1163C) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1163D) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1163E) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11640) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x116AB) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x116AC) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x116AD) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x116AE && codepoint <= 0x116AF) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x116B0 && codepoint <= 0x116B5) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1171D && codepoint <= 0x1171F) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11720 && codepoint <= 0x11721) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11722 && codepoint <= 0x11725) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11726) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11727 && codepoint <= 0x1172A) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1182C && codepoint <= 0x1182E) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1182F && codepoint <= 0x11837) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11838) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11930 && codepoint <= 0x11935) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11937 && codepoint <= 0x11938) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1193B && codepoint <= 0x1193C) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11940) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11942) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x119D1 && codepoint <= 0x119D3) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x119D4 && codepoint <= 0x119D7) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x119DA && codepoint <= 0x119DB) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x119DC && codepoint <= 0x119DF) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x119E4) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11A01 && codepoint <= 0x11A0A) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11A35 && codepoint <= 0x11A38) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11A39) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11A3B && codepoint <= 0x11A3E) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11A51 && codepoint <= 0x11A56) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11A57 && codepoint <= 0x11A58) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11A59 && codepoint <= 0x11A5B) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11A8A && codepoint <= 0x11A96) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11A97) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11C2F) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11C30 && codepoint <= 0x11C36) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11C38 && codepoint <= 0x11C3D) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11C3E) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11C92 && codepoint <= 0x11CA7) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11CA9) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11CAA && codepoint <= 0x11CB0) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11CB1) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11CB2 && codepoint <= 0x11CB3) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11CB4) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11CB5 && codepoint <= 0x11CB6) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11D31 && codepoint <= 0x11D36) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11D3A) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11D3C && codepoint <= 0x11D3D) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11D3F && codepoint <= 0x11D41) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11D43) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11D47) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11D8A && codepoint <= 0x11D8E) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11D90 && codepoint <= 0x11D91) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11D93 && codepoint <= 0x11D94) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11D95) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11D96) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11EF3 && codepoint <= 0x11EF4) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11EF5 && codepoint <= 0x11EF6) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x16F4F) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x16F51 && codepoint <= 0x16F87) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x16F8F && codepoint <= 0x16F92) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x16FF0 && codepoint <= 0x16FF1) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1BC9E) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1E000 && codepoint <= 0x1E006) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1E008 && codepoint <= 0x1E018) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1E01B && codepoint <= 0x1E021) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1E023 && codepoint <= 0x1E024) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1E026 && codepoint <= 0x1E02A) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1E947) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1F130 && codepoint <= 0x1F149) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1F150 && codepoint <= 0x1F169) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1F170 && codepoint <= 0x1F189) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x3006) return Unicode_Prop_IDEOGRAPHIC;
	if (codepoint == 0x3007) return Unicode_Prop_IDEOGRAPHIC;
	if (codepoint >= 0x3021 && codepoint <= 0x3029) return Unicode_Prop_IDEOGRAPHIC;
	if (codepoint >= 0x3038 && codepoint <= 0x303A) return Unicode_Prop_IDEOGRAPHIC;
	if (codepoint >= 0x3400 && codepoint <= 0x4DBF) return Unicode_Prop_IDEOGRAPHIC;
	if (codepoint >= 0x4E00 && codepoint <= 0x9FFC) return Unicode_Prop_IDEOGRAPHIC;
	if (codepoint >= 0xF900 && codepoint <= 0xFA6D) return Unicode_Prop_IDEOGRAPHIC;
	if (codepoint >= 0xFA70 && codepoint <= 0xFAD9) return Unicode_Prop_IDEOGRAPHIC;
	if (codepoint == 0x16FE4) return Unicode_Prop_IDEOGRAPHIC;
	if (codepoint >= 0x17000 && codepoint <= 0x187F7) return Unicode_Prop_IDEOGRAPHIC;
	if (codepoint >= 0x18800 && codepoint <= 0x18CD5) return Unicode_Prop_IDEOGRAPHIC;
	if (codepoint >= 0x18D00 && codepoint <= 0x18D08) return Unicode_Prop_IDEOGRAPHIC;
	if (codepoint >= 0x1B170 && codepoint <= 0x1B2FB) return Unicode_Prop_IDEOGRAPHIC;
	if (codepoint >= 0x20000 && codepoint <= 0x2A6DD) return Unicode_Prop_IDEOGRAPHIC;
	if (codepoint >= 0x2A700 && codepoint <= 0x2B734) return Unicode_Prop_IDEOGRAPHIC;
	if (codepoint >= 0x2B740 && codepoint <= 0x2B81D) return Unicode_Prop_IDEOGRAPHIC;
	if (codepoint >= 0x2B820 && codepoint <= 0x2CEA1) return Unicode_Prop_IDEOGRAPHIC;
	if (codepoint >= 0x2CEB0 && codepoint <= 0x2EBE0) return Unicode_Prop_IDEOGRAPHIC;
	if (codepoint >= 0x2F800 && codepoint <= 0x2FA1D) return Unicode_Prop_IDEOGRAPHIC;
	if (codepoint >= 0x30000 && codepoint <= 0x3134A) return Unicode_Prop_IDEOGRAPHIC;
	if (codepoint == 0x005E) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0060) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x00A8) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x00AF) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x00B4) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x00B7) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x00B8) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x02B0 && codepoint <= 0x02C1) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x02C2 && codepoint <= 0x02C5) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x02C6 && codepoint <= 0x02D1) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x02D2 && codepoint <= 0x02DF) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x02E0 && codepoint <= 0x02E4) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x02E5 && codepoint <= 0x02EB) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x02EC) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x02ED) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x02EE) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x02EF && codepoint <= 0x02FF) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x0300 && codepoint <= 0x034E) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x0350 && codepoint <= 0x0357) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x035D && codepoint <= 0x0362) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0374) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0375) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x037A) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x0384 && codepoint <= 0x0385) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x0483 && codepoint <= 0x0487) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0559) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x0591 && codepoint <= 0x05A1) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x05A3 && codepoint <= 0x05BD) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x05BF) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x05C1 && codepoint <= 0x05C2) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x05C4) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x064B && codepoint <= 0x0652) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x0657 && codepoint <= 0x0658) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x06DF && codepoint <= 0x06E0) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x06E5 && codepoint <= 0x06E6) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x06EA && codepoint <= 0x06EC) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x0730 && codepoint <= 0x074A) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x07A6 && codepoint <= 0x07B0) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x07EB && codepoint <= 0x07F3) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x07F4 && codepoint <= 0x07F5) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x0818 && codepoint <= 0x0819) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x08E3 && codepoint <= 0x08FE) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x093C) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x094D) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x0951 && codepoint <= 0x0954) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0971) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x09BC) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x09CD) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0A3C) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0A4D) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0ABC) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0ACD) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x0AFD && codepoint <= 0x0AFF) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0B3C) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0B4D) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0B55) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0BCD) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0C4D) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0CBC) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0CCD) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x0D3B && codepoint <= 0x0D3C) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0D4D) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0DCA) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x0E47 && codepoint <= 0x0E4C) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0E4E) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0EBA) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x0EC8 && codepoint <= 0x0ECC) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x0F18 && codepoint <= 0x0F19) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0F35) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0F37) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0F39) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x0F3E && codepoint <= 0x0F3F) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x0F82 && codepoint <= 0x0F84) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x0F86 && codepoint <= 0x0F87) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0FC6) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x1037) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1039 && codepoint <= 0x103A) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1063 && codepoint <= 0x1064) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1069 && codepoint <= 0x106D) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1087 && codepoint <= 0x108C) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x108D) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x108F) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x109A && codepoint <= 0x109B) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x135D && codepoint <= 0x135F) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x17C9 && codepoint <= 0x17D3) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x17DD) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1939 && codepoint <= 0x193B) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1A75 && codepoint <= 0x1A7C) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x1A7F) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1AB0 && codepoint <= 0x1ABD) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x1B34) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x1B44) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1B6B && codepoint <= 0x1B73) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x1BAA) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x1BAB) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1C36 && codepoint <= 0x1C37) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1C78 && codepoint <= 0x1C7D) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1CD0 && codepoint <= 0x1CD2) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x1CD3) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1CD4 && codepoint <= 0x1CE0) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x1CE1) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1CE2 && codepoint <= 0x1CE8) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x1CED) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x1CF4) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x1CF7) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1CF8 && codepoint <= 0x1CF9) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1D2C && codepoint <= 0x1D6A) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1DC4 && codepoint <= 0x1DCF) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1DF5 && codepoint <= 0x1DF9) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1DFD && codepoint <= 0x1DFF) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x1FBD) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1FBF && codepoint <= 0x1FC1) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1FCD && codepoint <= 0x1FCF) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1FDD && codepoint <= 0x1FDF) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1FED && codepoint <= 0x1FEF) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1FFD && codepoint <= 0x1FFE) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x2CEF && codepoint <= 0x2CF1) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x2E2F) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x302A && codepoint <= 0x302D) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x302E && codepoint <= 0x302F) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x3099 && codepoint <= 0x309A) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x309B && codepoint <= 0x309C) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x30FC) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xA66F) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0xA67C && codepoint <= 0xA67D) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xA67F) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0xA69C && codepoint <= 0xA69D) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0xA6F0 && codepoint <= 0xA6F1) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0xA700 && codepoint <= 0xA716) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0xA717 && codepoint <= 0xA71F) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0xA720 && codepoint <= 0xA721) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xA788) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0xA789 && codepoint <= 0xA78A) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0xA7F8 && codepoint <= 0xA7F9) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xA8C4) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0xA8E0 && codepoint <= 0xA8F1) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0xA92B && codepoint <= 0xA92D) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xA92E) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xA953) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xA9B3) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xA9C0) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xA9E5) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xAA7B) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xAA7C) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xAA7D) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xAABF) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xAAC0) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xAAC1) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xAAC2) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xAAF6) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xAB5B) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0xAB5C && codepoint <= 0xAB5F) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xAB69) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0xAB6A && codepoint <= 0xAB6B) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xABEC) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xABED) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xFB1E) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0xFE20 && codepoint <= 0xFE2F) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xFF3E) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xFF40) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xFF70) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0xFF9E && codepoint <= 0xFF9F) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xFFE3) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x102E0) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x10AE5 && codepoint <= 0x10AE6) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x10D22 && codepoint <= 0x10D23) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x10D24 && codepoint <= 0x10D27) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x10F46 && codepoint <= 0x10F50) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x110B9 && codepoint <= 0x110BA) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x11133 && codepoint <= 0x11134) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x11173) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x111C0) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x111CA && codepoint <= 0x111CC) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x11235) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x11236) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x112E9 && codepoint <= 0x112EA) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x1133C) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x1134D) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x11366 && codepoint <= 0x1136C) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x11370 && codepoint <= 0x11374) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x11442) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x11446) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x114C2 && codepoint <= 0x114C3) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x115BF && codepoint <= 0x115C0) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x1163F) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x116B6) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x116B7) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x1172B) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x11839 && codepoint <= 0x1183A) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x1193D) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x1193E) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x11943) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x119E0) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x11A34) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x11A47) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x11A99) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x11C3F) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x11D42) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x11D44 && codepoint <= 0x11D45) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x11D97) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x16AF0 && codepoint <= 0x16AF4) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x16B30 && codepoint <= 0x16B36) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x16F8F && codepoint <= 0x16F92) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x16F93 && codepoint <= 0x16F9F) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x16FF0 && codepoint <= 0x16FF1) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1D167 && codepoint <= 0x1D169) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1D16D && codepoint <= 0x1D172) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1D17B && codepoint <= 0x1D182) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1D185 && codepoint <= 0x1D18B) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1D1AA && codepoint <= 0x1D1AD) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1E130 && codepoint <= 0x1E136) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1E2EC && codepoint <= 0x1E2EF) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1E8D0 && codepoint <= 0x1E8D6) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1E944 && codepoint <= 0x1E946) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1E948 && codepoint <= 0x1E94A) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x00B7) return Unicode_Prop_EXTENDER;
	if (codepoint >= 0x02D0 && codepoint <= 0x02D1) return Unicode_Prop_EXTENDER;
	if (codepoint == 0x0640) return Unicode_Prop_EXTENDER;
	if (codepoint == 0x07FA) return Unicode_Prop_EXTENDER;
	if (codepoint == 0x0B55) return Unicode_Prop_EXTENDER;
	if (codepoint == 0x0E46) return Unicode_Prop_EXTENDER;
	if (codepoint == 0x0EC6) return Unicode_Prop_EXTENDER;
	if (codepoint == 0x180A) return Unicode_Prop_EXTENDER;
	if (codepoint == 0x1843) return Unicode_Prop_EXTENDER;
	if (codepoint == 0x1AA7) return Unicode_Prop_EXTENDER;
	if (codepoint == 0x1C36) return Unicode_Prop_EXTENDER;
	if (codepoint == 0x1C7B) return Unicode_Prop_EXTENDER;
	if (codepoint == 0x3005) return Unicode_Prop_EXTENDER;
	if (codepoint >= 0x3031 && codepoint <= 0x3035) return Unicode_Prop_EXTENDER;
	if (codepoint >= 0x309D && codepoint <= 0x309E) return Unicode_Prop_EXTENDER;
	if (codepoint >= 0x30FC && codepoint <= 0x30FE) return Unicode_Prop_EXTENDER;
	if (codepoint == 0xA015) return Unicode_Prop_EXTENDER;
	if (codepoint == 0xA60C) return Unicode_Prop_EXTENDER;
	if (codepoint == 0xA9CF) return Unicode_Prop_EXTENDER;
	if (codepoint == 0xA9E6) return Unicode_Prop_EXTENDER;
	if (codepoint == 0xAA70) return Unicode_Prop_EXTENDER;
	if (codepoint == 0xAADD) return Unicode_Prop_EXTENDER;
	if (codepoint >= 0xAAF3 && codepoint <= 0xAAF4) return Unicode_Prop_EXTENDER;
	if (codepoint == 0xFF70) return Unicode_Prop_EXTENDER;
	if (codepoint == 0x1135D) return Unicode_Prop_EXTENDER;
	if (codepoint >= 0x115C6 && codepoint <= 0x115C8) return Unicode_Prop_EXTENDER;
	if (codepoint == 0x11A98) return Unicode_Prop_EXTENDER;
	if (codepoint >= 0x16B42 && codepoint <= 0x16B43) return Unicode_Prop_EXTENDER;
	if (codepoint >= 0x16FE0 && codepoint <= 0x16FE1) return Unicode_Prop_EXTENDER;
	if (codepoint == 0x16FE3) return Unicode_Prop_EXTENDER;
	if (codepoint >= 0x1E13C && codepoint <= 0x1E13D) return Unicode_Prop_EXTENDER;
	if (codepoint >= 0x1E944 && codepoint <= 0x1E946) return Unicode_Prop_EXTENDER;
	if (codepoint == 0x00AA) return Unicode_Prop_OTHER_LOWERCASE;
	if (codepoint == 0x00BA) return Unicode_Prop_OTHER_LOWERCASE;
	if (codepoint >= 0x02B0 && codepoint <= 0x02B8) return Unicode_Prop_OTHER_LOWERCASE;
	if (codepoint >= 0x02C0 && codepoint <= 0x02C1) return Unicode_Prop_OTHER_LOWERCASE;
	if (codepoint >= 0x02E0 && codepoint <= 0x02E4) return Unicode_Prop_OTHER_LOWERCASE;
	if (codepoint == 0x0345) return Unicode_Prop_OTHER_LOWERCASE;
	if (codepoint == 0x037A) return Unicode_Prop_OTHER_LOWERCASE;
	if (codepoint >= 0x1D2C && codepoint <= 0x1D6A) return Unicode_Prop_OTHER_LOWERCASE;
	if (codepoint == 0x1D78) return Unicode_Prop_OTHER_LOWERCASE;
	if (codepoint >= 0x1D9B && codepoint <= 0x1DBF) return Unicode_Prop_OTHER_LOWERCASE;
	if (codepoint == 0x2071) return Unicode_Prop_OTHER_LOWERCASE;
	if (codepoint == 0x207F) return Unicode_Prop_OTHER_LOWERCASE;
	if (codepoint >= 0x2090 && codepoint <= 0x209C) return Unicode_Prop_OTHER_LOWERCASE;
	if (codepoint >= 0x2170 && codepoint <= 0x217F) return Unicode_Prop_OTHER_LOWERCASE;
	if (codepoint >= 0x24D0 && codepoint <= 0x24E9) return Unicode_Prop_OTHER_LOWERCASE;
	if (codepoint >= 0x2C7C && codepoint <= 0x2C7D) return Unicode_Prop_OTHER_LOWERCASE;
	if (codepoint >= 0xA69C && codepoint <= 0xA69D) return Unicode_Prop_OTHER_LOWERCASE;
	if (codepoint == 0xA770) return Unicode_Prop_OTHER_LOWERCASE;
	if (codepoint >= 0xA7F8 && codepoint <= 0xA7F9) return Unicode_Prop_OTHER_LOWERCASE;
	if (codepoint >= 0xAB5C && codepoint <= 0xAB5F) return Unicode_Prop_OTHER_LOWERCASE;
	if (codepoint >= 0x2160 && codepoint <= 0x216F) return Unicode_Prop_OTHER_UPPERCASE;
	if (codepoint >= 0x24B6 && codepoint <= 0x24CF) return Unicode_Prop_OTHER_UPPERCASE;
	if (codepoint >= 0x1F130 && codepoint <= 0x1F149) return Unicode_Prop_OTHER_UPPERCASE;
	if (codepoint >= 0x1F150 && codepoint <= 0x1F169) return Unicode_Prop_OTHER_UPPERCASE;
	if (codepoint >= 0x1F170 && codepoint <= 0x1F189) return Unicode_Prop_OTHER_UPPERCASE;
	if (codepoint >= 0xFDD0 && codepoint <= 0xFDEF) return Unicode_Prop_NONCHARACTER_CODE_POINT;
	if (codepoint >= 0xFFFE && codepoint <= 0xFFFF) return Unicode_Prop_NONCHARACTER_CODE_POINT;
	if (codepoint >= 0x1FFFE && codepoint <= 0x1FFFF) return Unicode_Prop_NONCHARACTER_CODE_POINT;
	if (codepoint >= 0x2FFFE && codepoint <= 0x2FFFF) return Unicode_Prop_NONCHARACTER_CODE_POINT;
	if (codepoint >= 0x3FFFE && codepoint <= 0x3FFFF) return Unicode_Prop_NONCHARACTER_CODE_POINT;
	if (codepoint >= 0x4FFFE && codepoint <= 0x4FFFF) return Unicode_Prop_NONCHARACTER_CODE_POINT;
	if (codepoint >= 0x5FFFE && codepoint <= 0x5FFFF) return Unicode_Prop_NONCHARACTER_CODE_POINT;
	if (codepoint >= 0x6FFFE && codepoint <= 0x6FFFF) return Unicode_Prop_NONCHARACTER_CODE_POINT;
	if (codepoint >= 0x7FFFE && codepoint <= 0x7FFFF) return Unicode_Prop_NONCHARACTER_CODE_POINT;
	if (codepoint >= 0x8FFFE && codepoint <= 0x8FFFF) return Unicode_Prop_NONCHARACTER_CODE_POINT;
	if (codepoint >= 0x9FFFE && codepoint <= 0x9FFFF) return Unicode_Prop_NONCHARACTER_CODE_POINT;
	if (codepoint >= 0xAFFFE && codepoint <= 0xAFFFF) return Unicode_Prop_NONCHARACTER_CODE_POINT;
	if (codepoint >= 0xBFFFE && codepoint <= 0xBFFFF) return Unicode_Prop_NONCHARACTER_CODE_POINT;
	if (codepoint >= 0xCFFFE && codepoint <= 0xCFFFF) return Unicode_Prop_NONCHARACTER_CODE_POINT;
	if (codepoint >= 0xDFFFE && codepoint <= 0xDFFFF) return Unicode_Prop_NONCHARACTER_CODE_POINT;
	if (codepoint >= 0xEFFFE && codepoint <= 0xEFFFF) return Unicode_Prop_NONCHARACTER_CODE_POINT;
	if (codepoint >= 0xFFFFE && codepoint <= 0xFFFFF) return Unicode_Prop_NONCHARACTER_CODE_POINT;
	if (codepoint >= 0x10FFFE && codepoint <= 0x10FFFF) return Unicode_Prop_NONCHARACTER_CODE_POINT;
	if (codepoint == 0x09BE) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint == 0x09D7) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint == 0x0B3E) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint == 0x0B57) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint == 0x0BBE) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint == 0x0BD7) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint == 0x0CC2) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint >= 0x0CD5 && codepoint <= 0x0CD6) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint == 0x0D3E) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint == 0x0D57) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint == 0x0DCF) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint == 0x0DDF) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint == 0x1B35) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint == 0x200C) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint >= 0x302E && codepoint <= 0x302F) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint >= 0xFF9E && codepoint <= 0xFF9F) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint == 0x1133E) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint == 0x11357) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint == 0x114B0) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint == 0x114BD) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint == 0x115AF) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint == 0x11930) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint == 0x1D165) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint >= 0x1D16E && codepoint <= 0x1D172) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint >= 0xE0020 && codepoint <= 0xE007F) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint >= 0x2FF0 && codepoint <= 0x2FF1) return Unicode_Prop_IDS_BINARY_OPERATOR;
	if (codepoint >= 0x2FF4 && codepoint <= 0x2FFB) return Unicode_Prop_IDS_BINARY_OPERATOR;
	if (codepoint >= 0x2FF2 && codepoint <= 0x2FF3) return Unicode_Prop_IDS_TRINARY_OPERATOR;
	if (codepoint >= 0x2E80 && codepoint <= 0x2E99) return Unicode_Prop_RADICAL;
	if (codepoint >= 0x2E9B && codepoint <= 0x2EF3) return Unicode_Prop_RADICAL;
	if (codepoint >= 0x2F00 && codepoint <= 0x2FD5) return Unicode_Prop_RADICAL;
	if (codepoint >= 0x3400 && codepoint <= 0x4DBF) return Unicode_Prop_UNIFIED_IDEOGRAPH;
	if (codepoint >= 0x4E00 && codepoint <= 0x9FFC) return Unicode_Prop_UNIFIED_IDEOGRAPH;
	if (codepoint >= 0xFA0E && codepoint <= 0xFA0F) return Unicode_Prop_UNIFIED_IDEOGRAPH;
	if (codepoint == 0xFA11) return Unicode_Prop_UNIFIED_IDEOGRAPH;
	if (codepoint >= 0xFA13 && codepoint <= 0xFA14) return Unicode_Prop_UNIFIED_IDEOGRAPH;
	if (codepoint == 0xFA1F) return Unicode_Prop_UNIFIED_IDEOGRAPH;
	if (codepoint == 0xFA21) return Unicode_Prop_UNIFIED_IDEOGRAPH;
	if (codepoint >= 0xFA23 && codepoint <= 0xFA24) return Unicode_Prop_UNIFIED_IDEOGRAPH;
	if (codepoint >= 0xFA27 && codepoint <= 0xFA29) return Unicode_Prop_UNIFIED_IDEOGRAPH;
	if (codepoint >= 0x20000 && codepoint <= 0x2A6DD) return Unicode_Prop_UNIFIED_IDEOGRAPH;
	if (codepoint >= 0x2A700 && codepoint <= 0x2B734) return Unicode_Prop_UNIFIED_IDEOGRAPH;
	if (codepoint >= 0x2B740 && codepoint <= 0x2B81D) return Unicode_Prop_UNIFIED_IDEOGRAPH;
	if (codepoint >= 0x2B820 && codepoint <= 0x2CEA1) return Unicode_Prop_UNIFIED_IDEOGRAPH;
	if (codepoint >= 0x2CEB0 && codepoint <= 0x2EBE0) return Unicode_Prop_UNIFIED_IDEOGRAPH;
	if (codepoint >= 0x30000 && codepoint <= 0x3134A) return Unicode_Prop_UNIFIED_IDEOGRAPH;
	if (codepoint == 0x034F) return Unicode_Prop_OTHER_DEFAULT_IGNORABLE_CODE_POINT;
	if (codepoint >= 0x115F && codepoint <= 0x1160) return Unicode_Prop_OTHER_DEFAULT_IGNORABLE_CODE_POINT;
	if (codepoint >= 0x17B4 && codepoint <= 0x17B5) return Unicode_Prop_OTHER_DEFAULT_IGNORABLE_CODE_POINT;
	if (codepoint == 0x2065) return Unicode_Prop_OTHER_DEFAULT_IGNORABLE_CODE_POINT;
	if (codepoint == 0x3164) return Unicode_Prop_OTHER_DEFAULT_IGNORABLE_CODE_POINT;
	if (codepoint == 0xFFA0) return Unicode_Prop_OTHER_DEFAULT_IGNORABLE_CODE_POINT;
	if (codepoint >= 0xFFF0 && codepoint <= 0xFFF8) return Unicode_Prop_OTHER_DEFAULT_IGNORABLE_CODE_POINT;
	if (codepoint == 0xE0000) return Unicode_Prop_OTHER_DEFAULT_IGNORABLE_CODE_POINT;
	if (codepoint >= 0xE0002 && codepoint <= 0xE001F) return Unicode_Prop_OTHER_DEFAULT_IGNORABLE_CODE_POINT;
	if (codepoint >= 0xE0080 && codepoint <= 0xE00FF) return Unicode_Prop_OTHER_DEFAULT_IGNORABLE_CODE_POINT;
	if (codepoint >= 0xE01F0 && codepoint <= 0xE0FFF) return Unicode_Prop_OTHER_DEFAULT_IGNORABLE_CODE_POINT;
	if (codepoint == 0x0149) return Unicode_Prop_DEPRECATED;
	if (codepoint == 0x0673) return Unicode_Prop_DEPRECATED;
	if (codepoint == 0x0F77) return Unicode_Prop_DEPRECATED;
	if (codepoint == 0x0F79) return Unicode_Prop_DEPRECATED;
	if (codepoint >= 0x17A3 && codepoint <= 0x17A4) return Unicode_Prop_DEPRECATED;
	if (codepoint >= 0x206A && codepoint <= 0x206F) return Unicode_Prop_DEPRECATED;
	if (codepoint == 0x2329) return Unicode_Prop_DEPRECATED;
	if (codepoint == 0x232A) return Unicode_Prop_DEPRECATED;
	if (codepoint == 0xE0001) return Unicode_Prop_DEPRECATED;
	if (codepoint >= 0x0069 && codepoint <= 0x006A) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint == 0x012F) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint == 0x0249) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint == 0x0268) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint == 0x029D) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint == 0x02B2) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint == 0x03F3) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint == 0x0456) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint == 0x0458) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint == 0x1D62) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint == 0x1D96) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint == 0x1DA4) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint == 0x1DA8) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint == 0x1E2D) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint == 0x1ECB) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint == 0x2071) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint >= 0x2148 && codepoint <= 0x2149) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint == 0x2C7C) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint >= 0x1D422 && codepoint <= 0x1D423) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint >= 0x1D456 && codepoint <= 0x1D457) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint >= 0x1D48A && codepoint <= 0x1D48B) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint >= 0x1D4BE && codepoint <= 0x1D4BF) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint >= 0x1D4F2 && codepoint <= 0x1D4F3) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint >= 0x1D526 && codepoint <= 0x1D527) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint >= 0x1D55A && codepoint <= 0x1D55B) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint >= 0x1D58E && codepoint <= 0x1D58F) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint >= 0x1D5C2 && codepoint <= 0x1D5C3) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint >= 0x1D5F6 && codepoint <= 0x1D5F7) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint >= 0x1D62A && codepoint <= 0x1D62B) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint >= 0x1D65E && codepoint <= 0x1D65F) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint >= 0x1D692 && codepoint <= 0x1D693) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint >= 0x0E40 && codepoint <= 0x0E44) return Unicode_Prop_LOGICAL_ORDER_EXCEPTION;
	if (codepoint >= 0x0EC0 && codepoint <= 0x0EC4) return Unicode_Prop_LOGICAL_ORDER_EXCEPTION;
	if (codepoint >= 0x19B5 && codepoint <= 0x19B7) return Unicode_Prop_LOGICAL_ORDER_EXCEPTION;
	if (codepoint == 0x19BA) return Unicode_Prop_LOGICAL_ORDER_EXCEPTION;
	if (codepoint >= 0xAAB5 && codepoint <= 0xAAB6) return Unicode_Prop_LOGICAL_ORDER_EXCEPTION;
	if (codepoint == 0xAAB9) return Unicode_Prop_LOGICAL_ORDER_EXCEPTION;
	if (codepoint >= 0xAABB && codepoint <= 0xAABC) return Unicode_Prop_LOGICAL_ORDER_EXCEPTION;
	if (codepoint >= 0x1885 && codepoint <= 0x1886) return Unicode_Prop_OTHER_ID_START;
	if (codepoint == 0x2118) return Unicode_Prop_OTHER_ID_START;
	if (codepoint == 0x212E) return Unicode_Prop_OTHER_ID_START;
	if (codepoint >= 0x309B && codepoint <= 0x309C) return Unicode_Prop_OTHER_ID_START;
	if (codepoint == 0x00B7) return Unicode_Prop_OTHER_ID_CONTINUE;
	if (codepoint == 0x0387) return Unicode_Prop_OTHER_ID_CONTINUE;
	if (codepoint >= 0x1369 && codepoint <= 0x1371) return Unicode_Prop_OTHER_ID_CONTINUE;
	if (codepoint == 0x19DA) return Unicode_Prop_OTHER_ID_CONTINUE;
	if (codepoint == 0x0021) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0x002E) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0x003F) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0x0589) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x061E && codepoint <= 0x061F) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0x06D4) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x0700 && codepoint <= 0x0702) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0x07F9) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0x0837) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0x0839) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x083D && codepoint <= 0x083E) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x0964 && codepoint <= 0x0965) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x104A && codepoint <= 0x104B) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0x1362) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x1367 && codepoint <= 0x1368) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0x166E) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x1735 && codepoint <= 0x1736) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0x1803) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0x1809) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x1944 && codepoint <= 0x1945) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x1AA8 && codepoint <= 0x1AAB) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x1B5A && codepoint <= 0x1B5B) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x1B5E && codepoint <= 0x1B5F) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x1C3B && codepoint <= 0x1C3C) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x1C7E && codepoint <= 0x1C7F) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x203C && codepoint <= 0x203D) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x2047 && codepoint <= 0x2049) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0x2E2E) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0x2E3C) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0x3002) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0xA4FF) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0xA60E && codepoint <= 0xA60F) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0xA6F3) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0xA6F7) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0xA876 && codepoint <= 0xA877) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0xA8CE && codepoint <= 0xA8CF) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0xA92F) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0xA9C8 && codepoint <= 0xA9C9) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0xAA5D && codepoint <= 0xAA5F) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0xAAF0 && codepoint <= 0xAAF1) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0xABEB) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0xFE52) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0xFE56 && codepoint <= 0xFE57) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0xFF01) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0xFF0E) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0xFF1F) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0xFF61) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x10A56 && codepoint <= 0x10A57) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x10F55 && codepoint <= 0x10F59) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x11047 && codepoint <= 0x11048) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x110BE && codepoint <= 0x110C1) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x11141 && codepoint <= 0x11143) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x111C5 && codepoint <= 0x111C6) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0x111CD) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x111DE && codepoint <= 0x111DF) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x11238 && codepoint <= 0x11239) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x1123B && codepoint <= 0x1123C) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0x112A9) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x1144B && codepoint <= 0x1144C) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x115C2 && codepoint <= 0x115C3) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x115C9 && codepoint <= 0x115D7) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x11641 && codepoint <= 0x11642) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x1173C && codepoint <= 0x1173E) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0x11944) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0x11946) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x11A42 && codepoint <= 0x11A43) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x11A9B && codepoint <= 0x11A9C) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x11C41 && codepoint <= 0x11C42) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x11EF7 && codepoint <= 0x11EF8) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x16A6E && codepoint <= 0x16A6F) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0x16AF5) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x16B37 && codepoint <= 0x16B38) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0x16B44) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0x16E98) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0x1BC9F) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0x1DA88) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x180B && codepoint <= 0x180D) return Unicode_Prop_VARIATION_SELECTOR;
	if (codepoint >= 0xFE00 && codepoint <= 0xFE0F) return Unicode_Prop_VARIATION_SELECTOR;
	if (codepoint >= 0xE0100 && codepoint <= 0xE01EF) return Unicode_Prop_VARIATION_SELECTOR;
	if (codepoint >= 0x0009 && codepoint <= 0x000D) return Unicode_Prop_PATTERN_WHITE_SPACE;
	if (codepoint == 0x0020) return Unicode_Prop_PATTERN_WHITE_SPACE;
	if (codepoint == 0x0085) return Unicode_Prop_PATTERN_WHITE_SPACE;
	if (codepoint >= 0x200E && codepoint <= 0x200F) return Unicode_Prop_PATTERN_WHITE_SPACE;
	if (codepoint == 0x2028) return Unicode_Prop_PATTERN_WHITE_SPACE;
	if (codepoint == 0x2029) return Unicode_Prop_PATTERN_WHITE_SPACE;
	if (codepoint >= 0x0021 && codepoint <= 0x0023) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x0024) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x0025 && codepoint <= 0x0027) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x0028) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x0029) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x002A) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x002B) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x002C) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x002D) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x002E && codepoint <= 0x002F) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x003A && codepoint <= 0x003B) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x003C && codepoint <= 0x003E) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x003F && codepoint <= 0x0040) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x005B) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x005C) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x005D) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x005E) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x0060) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x007B) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x007C) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x007D) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x007E) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x00A1) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x00A2 && codepoint <= 0x00A5) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x00A6) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x00A7) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x00A9) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x00AB) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x00AC) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x00AE) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x00B0) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x00B1) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x00B6) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x00BB) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x00BF) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x00D7) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x00F7) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2010 && codepoint <= 0x2015) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2016 && codepoint <= 0x2017) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2018) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2019) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x201A) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x201B && codepoint <= 0x201C) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x201D) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x201E) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x201F) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2020 && codepoint <= 0x2027) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2030 && codepoint <= 0x2038) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2039) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x203A) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x203B && codepoint <= 0x203E) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2041 && codepoint <= 0x2043) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2044) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2045) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2046) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2047 && codepoint <= 0x2051) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2052) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2053) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2055 && codepoint <= 0x205E) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2190 && codepoint <= 0x2194) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2195 && codepoint <= 0x2199) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x219A && codepoint <= 0x219B) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x219C && codepoint <= 0x219F) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x21A0) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x21A1 && codepoint <= 0x21A2) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x21A3) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x21A4 && codepoint <= 0x21A5) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x21A6) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x21A7 && codepoint <= 0x21AD) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x21AE) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x21AF && codepoint <= 0x21CD) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x21CE && codepoint <= 0x21CF) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x21D0 && codepoint <= 0x21D1) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x21D2) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x21D3) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x21D4) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x21D5 && codepoint <= 0x21F3) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x21F4 && codepoint <= 0x22FF) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2300 && codepoint <= 0x2307) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2308) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2309) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x230A) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x230B) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x230C && codepoint <= 0x231F) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2320 && codepoint <= 0x2321) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2322 && codepoint <= 0x2328) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2329) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x232A) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x232B && codepoint <= 0x237B) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x237C) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x237D && codepoint <= 0x239A) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x239B && codepoint <= 0x23B3) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x23B4 && codepoint <= 0x23DB) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x23DC && codepoint <= 0x23E1) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x23E2 && codepoint <= 0x2426) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2427 && codepoint <= 0x243F) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2440 && codepoint <= 0x244A) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x244B && codepoint <= 0x245F) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2500 && codepoint <= 0x25B6) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x25B7) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x25B8 && codepoint <= 0x25C0) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x25C1) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x25C2 && codepoint <= 0x25F7) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x25F8 && codepoint <= 0x25FF) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2600 && codepoint <= 0x266E) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x266F) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2670 && codepoint <= 0x2767) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2768) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2769) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x276A) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x276B) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x276C) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x276D) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x276E) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x276F) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2770) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2771) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2772) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2773) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2774) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2775) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2794 && codepoint <= 0x27BF) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x27C0 && codepoint <= 0x27C4) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x27C5) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x27C6) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x27C7 && codepoint <= 0x27E5) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x27E6) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x27E7) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x27E8) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x27E9) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x27EA) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x27EB) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x27EC) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x27ED) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x27EE) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x27EF) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x27F0 && codepoint <= 0x27FF) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2800 && codepoint <= 0x28FF) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2900 && codepoint <= 0x2982) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2983) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2984) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2985) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2986) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2987) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2988) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2989) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x298A) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x298B) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x298C) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x298D) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x298E) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x298F) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2990) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2991) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2992) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2993) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2994) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2995) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2996) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2997) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2998) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2999 && codepoint <= 0x29D7) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x29D8) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x29D9) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x29DA) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x29DB) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x29DC && codepoint <= 0x29FB) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x29FC) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x29FD) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x29FE && codepoint <= 0x2AFF) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2B00 && codepoint <= 0x2B2F) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2B30 && codepoint <= 0x2B44) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2B45 && codepoint <= 0x2B46) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2B47 && codepoint <= 0x2B4C) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2B4D && codepoint <= 0x2B73) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2B74 && codepoint <= 0x2B75) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2B76 && codepoint <= 0x2B95) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2B96) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2B97 && codepoint <= 0x2BFF) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2E00 && codepoint <= 0x2E01) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E02) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E03) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E04) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E05) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2E06 && codepoint <= 0x2E08) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E09) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E0A) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E0B) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E0C) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E0D) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2E0E && codepoint <= 0x2E16) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E17) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2E18 && codepoint <= 0x2E19) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E1A) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E1B) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E1C) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E1D) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2E1E && codepoint <= 0x2E1F) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E20) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E21) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E22) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E23) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E24) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E25) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E26) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E27) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E28) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E29) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2E2A && codepoint <= 0x2E2E) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E2F) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2E30 && codepoint <= 0x2E39) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2E3A && codepoint <= 0x2E3B) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2E3C && codepoint <= 0x2E3F) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E40) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E41) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E42) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2E43 && codepoint <= 0x2E4F) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2E50 && codepoint <= 0x2E51) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E52) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2E53 && codepoint <= 0x2E7F) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x3001 && codepoint <= 0x3003) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x3008) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x3009) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x300A) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x300B) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x300C) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x300D) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x300E) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x300F) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x3010) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x3011) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x3012 && codepoint <= 0x3013) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x3014) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x3015) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x3016) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x3017) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x3018) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x3019) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x301A) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x301B) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x301C) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x301D) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x301E && codepoint <= 0x301F) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x3020) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x3030) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0xFD3E) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0xFD3F) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0xFE45 && codepoint <= 0xFE46) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x0600 && codepoint <= 0x0605) return Unicode_Prop_PREPENDED_CONCATENATION_MARK;
	if (codepoint == 0x06DD) return Unicode_Prop_PREPENDED_CONCATENATION_MARK;
	if (codepoint == 0x070F) return Unicode_Prop_PREPENDED_CONCATENATION_MARK;
	if (codepoint == 0x08E2) return Unicode_Prop_PREPENDED_CONCATENATION_MARK;
	if (codepoint == 0x110BD) return Unicode_Prop_PREPENDED_CONCATENATION_MARK;
	if (codepoint == 0x110CD) return Unicode_Prop_PREPENDED_CONCATENATION_MARK;
	if (codepoint >= 0x1F1E6 && codepoint <= 0x1F1FF) return Unicode_Prop_REGIONAL_INDICATOR;

	return Unicode_Prop_UNKNOWN;
}

Unicode_Indic_Syllable unicode_indic_syllable(uint32_t codepoint) {
	if (codepoint >= 0x0900 && codepoint <= 0x0902) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x0981) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x0982) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x09FC) return Unicode_Indic_Syllable_BINDU;
	if (codepoint >= 0x0A01 && codepoint <= 0x0A02) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x0A70) return Unicode_Indic_Syllable_BINDU;
	if (codepoint >= 0x0A81 && codepoint <= 0x0A82) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x0B01) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x0B02) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x0B82) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x0C00) return Unicode_Indic_Syllable_BINDU;
	if (codepoint >= 0x0C01 && codepoint <= 0x0C02) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x0C04) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x0C80) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x0C81) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x0C82) return Unicode_Indic_Syllable_BINDU;
	if (codepoint >= 0x0D00 && codepoint <= 0x0D01) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x0D02) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x0D04) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x0D81) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x0D82) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x0E4D) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x0ECD) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x0F7E) return Unicode_Indic_Syllable_BINDU;
	if (codepoint >= 0x0F82 && codepoint <= 0x0F83) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x1036) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x17C6) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x1932) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x1A74) return Unicode_Indic_Syllable_BINDU;
	if (codepoint >= 0x1B00 && codepoint <= 0x1B02) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x1B80) return Unicode_Indic_Syllable_BINDU;
	if (codepoint >= 0x1C34 && codepoint <= 0x1C35) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0xA80B) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0xA873) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0xA880) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0xA8C5) return Unicode_Indic_Syllable_BINDU;
	if (codepoint >= 0xA8F2 && codepoint <= 0xA8F3) return Unicode_Indic_Syllable_BINDU;
	if (codepoint >= 0xA980 && codepoint <= 0xA981) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x10A0E) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x11000) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x11001) return Unicode_Indic_Syllable_BINDU;
	if (codepoint >= 0x11080 && codepoint <= 0x11081) return Unicode_Indic_Syllable_BINDU;
	if (codepoint >= 0x11100 && codepoint <= 0x11101) return Unicode_Indic_Syllable_BINDU;
	if (codepoint >= 0x11180 && codepoint <= 0x11181) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x111CF) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x11234) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x112DF) return Unicode_Indic_Syllable_BINDU;
	if (codepoint >= 0x11300 && codepoint <= 0x11301) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x11302) return Unicode_Indic_Syllable_BINDU;
	if (codepoint >= 0x1135E && codepoint <= 0x1135F) return Unicode_Indic_Syllable_BINDU;
	if (codepoint >= 0x11443 && codepoint <= 0x11444) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x1145F) return Unicode_Indic_Syllable_BINDU;
	if (codepoint >= 0x114BF && codepoint <= 0x114C0) return Unicode_Indic_Syllable_BINDU;
	if (codepoint >= 0x115BC && codepoint <= 0x115BD) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x1163D) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x116AB) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x11837) return Unicode_Indic_Syllable_BINDU;
	if (codepoint >= 0x1193B && codepoint <= 0x1193C) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x119DE) return Unicode_Indic_Syllable_BINDU;
	if (codepoint >= 0x11A35 && codepoint <= 0x11A38) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x11A96) return Unicode_Indic_Syllable_BINDU;
	if (codepoint >= 0x11C3C && codepoint <= 0x11C3D) return Unicode_Indic_Syllable_BINDU;
	if (codepoint >= 0x11CB5 && codepoint <= 0x11CB6) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x11D40) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x11D95) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x0903) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x0983) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x0A03) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x0A83) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x0B03) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x0C03) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x0C83) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x0D03) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x0D83) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x0F7F) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x1038) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x17C7) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x1B04) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x1B82) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0xA881) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0xA983) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0xAAF5) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x10A0F) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x11002) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x11082) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x11102) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x11182) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x11303) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x11445) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x114C1) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x115BE) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x1163E) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x116AC) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x11838) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x119DF) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x11A39) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x11A97) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x11C3E) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x11D41) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x11D96) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x093D) return Unicode_Indic_Syllable_AVAGRAHA;
	if (codepoint == 0x09BD) return Unicode_Indic_Syllable_AVAGRAHA;
	if (codepoint == 0x0ABD) return Unicode_Indic_Syllable_AVAGRAHA;
	if (codepoint == 0x0B3D) return Unicode_Indic_Syllable_AVAGRAHA;
	if (codepoint == 0x0C3D) return Unicode_Indic_Syllable_AVAGRAHA;
	if (codepoint == 0x0CBD) return Unicode_Indic_Syllable_AVAGRAHA;
	if (codepoint == 0x0D3D) return Unicode_Indic_Syllable_AVAGRAHA;
	if (codepoint == 0x0F85) return Unicode_Indic_Syllable_AVAGRAHA;
	if (codepoint == 0x17DC) return Unicode_Indic_Syllable_AVAGRAHA;
	if (codepoint == 0x1BBA) return Unicode_Indic_Syllable_AVAGRAHA;
	if (codepoint == 0x111C1) return Unicode_Indic_Syllable_AVAGRAHA;
	if (codepoint == 0x1133D) return Unicode_Indic_Syllable_AVAGRAHA;
	if (codepoint == 0x11447) return Unicode_Indic_Syllable_AVAGRAHA;
	if (codepoint == 0x114C4) return Unicode_Indic_Syllable_AVAGRAHA;
	if (codepoint == 0x119E1) return Unicode_Indic_Syllable_AVAGRAHA;
	if (codepoint == 0x11A9D) return Unicode_Indic_Syllable_AVAGRAHA;
	if (codepoint == 0x11C40) return Unicode_Indic_Syllable_AVAGRAHA;
	if (codepoint == 0x093C) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint == 0x09BC) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint == 0x0A3C) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint == 0x0ABC) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint >= 0x0AFD && codepoint <= 0x0AFF) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint == 0x0B3C) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint == 0x0CBC) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint == 0x0F39) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint == 0x1B34) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint == 0x1BE6) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint == 0x1C37) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint == 0xA9B3) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint >= 0x10A38 && codepoint <= 0x10A3A) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint == 0x110BA) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint == 0x11173) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint == 0x111CA) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint == 0x11236) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint == 0x112E9) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint >= 0x1133B && codepoint <= 0x1133C) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint == 0x11446) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint == 0x114C3) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint == 0x115C0) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint == 0x116B7) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint == 0x1183A) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint == 0x11943) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint == 0x11D42) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint == 0x094D) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0x09CD) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0x0A4D) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0x0ACD) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0x0B4D) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0x0BCD) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0x0C4D) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0x0CCD) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0x0D4D) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0x0DCA) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0x1B44) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0xA806) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0xA8C4) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0xA9C0) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0x11046) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0x110B9) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0x111C0) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0x11235) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0x1134D) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0x11442) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0x114C2) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0x115BF) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0x1163F) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0x116B6) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0x11839) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0x119E0) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0x11C3F) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint >= 0x0D3B && codepoint <= 0x0D3C) return Unicode_Indic_Syllable_PURE_KILLER;
	if (codepoint == 0x0E3A) return Unicode_Indic_Syllable_PURE_KILLER;
	if (codepoint == 0x0E4E) return Unicode_Indic_Syllable_PURE_KILLER;
	if (codepoint == 0x0EBA) return Unicode_Indic_Syllable_PURE_KILLER;
	if (codepoint == 0x0F84) return Unicode_Indic_Syllable_PURE_KILLER;
	if (codepoint == 0x103A) return Unicode_Indic_Syllable_PURE_KILLER;
	if (codepoint == 0x1714) return Unicode_Indic_Syllable_PURE_KILLER;
	if (codepoint == 0x1734) return Unicode_Indic_Syllable_PURE_KILLER;
	if (codepoint == 0x17D1) return Unicode_Indic_Syllable_PURE_KILLER;
	if (codepoint == 0x1A7A) return Unicode_Indic_Syllable_PURE_KILLER;
	if (codepoint == 0x1BAA) return Unicode_Indic_Syllable_PURE_KILLER;
	if (codepoint >= 0x1BF2 && codepoint <= 0x1BF3) return Unicode_Indic_Syllable_PURE_KILLER;
	if (codepoint == 0xA82C) return Unicode_Indic_Syllable_PURE_KILLER;
	if (codepoint == 0xA953) return Unicode_Indic_Syllable_PURE_KILLER;
	if (codepoint == 0xABED) return Unicode_Indic_Syllable_PURE_KILLER;
	if (codepoint == 0x11134) return Unicode_Indic_Syllable_PURE_KILLER;
	if (codepoint == 0x112EA) return Unicode_Indic_Syllable_PURE_KILLER;
	if (codepoint == 0x1172B) return Unicode_Indic_Syllable_PURE_KILLER;
	if (codepoint == 0x1193D) return Unicode_Indic_Syllable_PURE_KILLER;
	if (codepoint == 0x11A34) return Unicode_Indic_Syllable_PURE_KILLER;
	if (codepoint == 0x11D44) return Unicode_Indic_Syllable_PURE_KILLER;
	if (codepoint == 0x1039) return Unicode_Indic_Syllable_INVISIBLE_STACKER;
	if (codepoint == 0x17D2) return Unicode_Indic_Syllable_INVISIBLE_STACKER;
	if (codepoint == 0x1A60) return Unicode_Indic_Syllable_INVISIBLE_STACKER;
	if (codepoint == 0x1BAB) return Unicode_Indic_Syllable_INVISIBLE_STACKER;
	if (codepoint == 0xAAF6) return Unicode_Indic_Syllable_INVISIBLE_STACKER;
	if (codepoint == 0x10A3F) return Unicode_Indic_Syllable_INVISIBLE_STACKER;
	if (codepoint == 0x11133) return Unicode_Indic_Syllable_INVISIBLE_STACKER;
	if (codepoint == 0x1193E) return Unicode_Indic_Syllable_INVISIBLE_STACKER;
	if (codepoint == 0x11A47) return Unicode_Indic_Syllable_INVISIBLE_STACKER;
	if (codepoint == 0x11A99) return Unicode_Indic_Syllable_INVISIBLE_STACKER;
	if (codepoint == 0x11D45) return Unicode_Indic_Syllable_INVISIBLE_STACKER;
	if (codepoint == 0x11D97) return Unicode_Indic_Syllable_INVISIBLE_STACKER;
	if (codepoint >= 0x0904 && codepoint <= 0x0914) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0960 && codepoint <= 0x0961) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0972 && codepoint <= 0x0977) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0985 && codepoint <= 0x098C) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x098F && codepoint <= 0x0990) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0993 && codepoint <= 0x0994) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x09E0 && codepoint <= 0x09E1) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0A05 && codepoint <= 0x0A0A) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0A0F && codepoint <= 0x0A10) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0A13 && codepoint <= 0x0A14) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0A85 && codepoint <= 0x0A8D) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0A8F && codepoint <= 0x0A91) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0A93 && codepoint <= 0x0A94) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0AE0 && codepoint <= 0x0AE1) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0B05 && codepoint <= 0x0B0C) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0B0F && codepoint <= 0x0B10) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0B13 && codepoint <= 0x0B14) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0B60 && codepoint <= 0x0B61) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0B85 && codepoint <= 0x0B8A) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0B8E && codepoint <= 0x0B90) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0B92 && codepoint <= 0x0B94) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0C05 && codepoint <= 0x0C0C) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0C0E && codepoint <= 0x0C10) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0C12 && codepoint <= 0x0C14) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0C60 && codepoint <= 0x0C61) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0C85 && codepoint <= 0x0C8C) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0C8E && codepoint <= 0x0C90) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0C92 && codepoint <= 0x0C94) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0CE0 && codepoint <= 0x0CE1) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0D05 && codepoint <= 0x0D0C) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0D0E && codepoint <= 0x0D10) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0D12 && codepoint <= 0x0D14) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0D5F && codepoint <= 0x0D61) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0D85 && codepoint <= 0x0D96) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x1021 && codepoint <= 0x102A) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x1052 && codepoint <= 0x1055) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x1700 && codepoint <= 0x1702) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x1720 && codepoint <= 0x1722) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x1740 && codepoint <= 0x1742) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x1760 && codepoint <= 0x1762) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x17A3 && codepoint <= 0x17B3) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x1A4D && codepoint <= 0x1A52) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x1B05 && codepoint <= 0x1B12) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x1B83 && codepoint <= 0x1B89) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x1BE4 && codepoint <= 0x1BE5) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0xA800 && codepoint <= 0xA801) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0xA803 && codepoint <= 0xA805) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0xA882 && codepoint <= 0xA891) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint == 0xA8FE) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0xA984 && codepoint <= 0xA988) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0xA98C && codepoint <= 0xA98E) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0xAA00 && codepoint <= 0xAA05) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0xAAE0 && codepoint <= 0xAAE1) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0xABCE && codepoint <= 0xABCF) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint == 0xABD1) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x11005 && codepoint <= 0x11012) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x11083 && codepoint <= 0x1108C) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x11103 && codepoint <= 0x11106) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x11183 && codepoint <= 0x11190) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x11200 && codepoint <= 0x11207) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x11280 && codepoint <= 0x11283) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x112B0 && codepoint <= 0x112B9) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x11305 && codepoint <= 0x1130C) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x1130F && codepoint <= 0x11310) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x11313 && codepoint <= 0x11314) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x11360 && codepoint <= 0x11361) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x11400 && codepoint <= 0x1140D) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x11481 && codepoint <= 0x1148E) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x11580 && codepoint <= 0x1158D) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x115D8 && codepoint <= 0x115DB) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x11600 && codepoint <= 0x1160D) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x11680 && codepoint <= 0x11689) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x11800 && codepoint <= 0x11809) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x11900 && codepoint <= 0x11906) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint == 0x11909) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x119A0 && codepoint <= 0x119A7) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x119AA && codepoint <= 0x119AD) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint == 0x11A00) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint == 0x11A50) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x11C00 && codepoint <= 0x11C08) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x11C0A && codepoint <= 0x11C0D) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x11D00 && codepoint <= 0x11D06) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x11D08 && codepoint <= 0x11D09) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint == 0x11D0B) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x11D60 && codepoint <= 0x11D65) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x11D67 && codepoint <= 0x11D68) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x11D6A && codepoint <= 0x11D6B) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint == 0x093A) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x093B) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x093E && codepoint <= 0x0940) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0941 && codepoint <= 0x0948) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0949 && codepoint <= 0x094C) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x094E && codepoint <= 0x094F) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0955 && codepoint <= 0x0957) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0962 && codepoint <= 0x0963) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x09BE && codepoint <= 0x09C0) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x09C1 && codepoint <= 0x09C4) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x09C7 && codepoint <= 0x09C8) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x09CB && codepoint <= 0x09CC) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x09D7) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x09E2 && codepoint <= 0x09E3) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0A3E && codepoint <= 0x0A40) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0A41 && codepoint <= 0x0A42) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0A47 && codepoint <= 0x0A48) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0A4B && codepoint <= 0x0A4C) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0ABE && codepoint <= 0x0AC0) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0AC1 && codepoint <= 0x0AC5) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0AC7 && codepoint <= 0x0AC8) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x0AC9) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0ACB && codepoint <= 0x0ACC) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0AE2 && codepoint <= 0x0AE3) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x0B3E) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x0B3F) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x0B40) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0B41 && codepoint <= 0x0B44) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0B47 && codepoint <= 0x0B48) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0B4B && codepoint <= 0x0B4C) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0B55 && codepoint <= 0x0B56) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x0B57) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0B62 && codepoint <= 0x0B63) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0BBE && codepoint <= 0x0BBF) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x0BC0) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0BC1 && codepoint <= 0x0BC2) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0BC6 && codepoint <= 0x0BC8) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0BCA && codepoint <= 0x0BCC) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x0BD7) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0C3E && codepoint <= 0x0C40) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0C41 && codepoint <= 0x0C44) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0C46 && codepoint <= 0x0C48) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0C4A && codepoint <= 0x0C4C) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0C55 && codepoint <= 0x0C56) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0C62 && codepoint <= 0x0C63) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x0CBE) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x0CBF) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0CC0 && codepoint <= 0x0CC4) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x0CC6) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0CC7 && codepoint <= 0x0CC8) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0CCA && codepoint <= 0x0CCB) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x0CCC) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0CD5 && codepoint <= 0x0CD6) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0CE2 && codepoint <= 0x0CE3) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0D3E && codepoint <= 0x0D40) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0D41 && codepoint <= 0x0D44) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0D46 && codepoint <= 0x0D48) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0D4A && codepoint <= 0x0D4C) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x0D57) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0D62 && codepoint <= 0x0D63) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0DCF && codepoint <= 0x0DD1) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0DD2 && codepoint <= 0x0DD4) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x0DD6) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0DD8 && codepoint <= 0x0DDF) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0DF2 && codepoint <= 0x0DF3) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x0E30) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x0E31) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0E32 && codepoint <= 0x0E33) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0E34 && codepoint <= 0x0E39) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0E40 && codepoint <= 0x0E45) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x0E47) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x0EB0) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x0EB1) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0EB2 && codepoint <= 0x0EB3) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0EB4 && codepoint <= 0x0EB9) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x0EBB) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0EC0 && codepoint <= 0x0EC4) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0F71 && codepoint <= 0x0F7D) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0F80 && codepoint <= 0x0F81) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x102B && codepoint <= 0x102C) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x102D && codepoint <= 0x1030) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x1031) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1032 && codepoint <= 0x1035) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1056 && codepoint <= 0x1057) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1058 && codepoint <= 0x1059) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x1062) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1067 && codepoint <= 0x1068) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1071 && codepoint <= 0x1074) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1083 && codepoint <= 0x1084) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1085 && codepoint <= 0x1086) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x109C) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x109D) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1712 && codepoint <= 0x1713) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1732 && codepoint <= 0x1733) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1752 && codepoint <= 0x1753) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1772 && codepoint <= 0x1773) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x17B6) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x17B7 && codepoint <= 0x17BD) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x17BE && codepoint <= 0x17C5) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x17C8) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1920 && codepoint <= 0x1922) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1923 && codepoint <= 0x1926) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1927 && codepoint <= 0x1928) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x193A) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x19B0 && codepoint <= 0x19C0) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1A17 && codepoint <= 0x1A18) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1A19 && codepoint <= 0x1A1A) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x1A1B) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x1A61) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x1A62) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1A63 && codepoint <= 0x1A64) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1A65 && codepoint <= 0x1A6C) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1A6D && codepoint <= 0x1A72) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x1A73) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x1B35) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1B36 && codepoint <= 0x1B3A) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x1B3B) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x1B3C) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1B3D && codepoint <= 0x1B41) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x1B42) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x1B43) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1BA4 && codepoint <= 0x1BA5) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1BA6 && codepoint <= 0x1BA7) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1BA8 && codepoint <= 0x1BA9) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x1BE7) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1BE8 && codepoint <= 0x1BE9) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1BEA && codepoint <= 0x1BEC) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x1BED) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x1BEE) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x1BEF) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1C26 && codepoint <= 0x1C2B) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x1C2C) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0xA802) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0xA823 && codepoint <= 0xA824) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0xA825 && codepoint <= 0xA826) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0xA827) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0xA8B5 && codepoint <= 0xA8C3) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0xA8FF) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0xA947 && codepoint <= 0xA94E) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0xA9B4 && codepoint <= 0xA9B5) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0xA9B6 && codepoint <= 0xA9B9) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0xA9BA && codepoint <= 0xA9BB) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0xA9BC) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0xA9E5) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0xAA29 && codepoint <= 0xAA2E) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0xAA2F && codepoint <= 0xAA30) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0xAA31 && codepoint <= 0xAA32) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0xAAB0) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0xAAB1) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0xAAB2 && codepoint <= 0xAAB4) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0xAAB5 && codepoint <= 0xAAB6) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0xAAB7 && codepoint <= 0xAAB8) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0xAAB9 && codepoint <= 0xAABD) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0xAABE) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0xAAEB) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0xAAEC && codepoint <= 0xAAED) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0xAAEE && codepoint <= 0xAAEF) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0xABE3 && codepoint <= 0xABE4) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0xABE5) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0xABE6 && codepoint <= 0xABE7) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0xABE8) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0xABE9 && codepoint <= 0xABEA) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x10A01 && codepoint <= 0x10A03) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x10A05 && codepoint <= 0x10A06) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x10A0C && codepoint <= 0x10A0D) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11038 && codepoint <= 0x11045) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x110B0 && codepoint <= 0x110B2) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x110B3 && codepoint <= 0x110B6) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x110B7 && codepoint <= 0x110B8) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11127 && codepoint <= 0x1112B) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x1112C) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1112D && codepoint <= 0x11132) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11145 && codepoint <= 0x11146) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x111B3 && codepoint <= 0x111B5) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x111B6 && codepoint <= 0x111BE) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x111BF) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x111CB && codepoint <= 0x111CC) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x111CE) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1122C && codepoint <= 0x1122E) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1122F && codepoint <= 0x11231) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11232 && codepoint <= 0x11233) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x112E0 && codepoint <= 0x112E2) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x112E3 && codepoint <= 0x112E8) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1133E && codepoint <= 0x1133F) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x11340) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11341 && codepoint <= 0x11344) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11347 && codepoint <= 0x11348) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1134B && codepoint <= 0x1134C) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x11357) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11362 && codepoint <= 0x11363) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11435 && codepoint <= 0x11437) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11438 && codepoint <= 0x1143F) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11440 && codepoint <= 0x11441) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x114B0 && codepoint <= 0x114B2) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x114B3 && codepoint <= 0x114B8) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x114B9) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x114BA) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x114BB && codepoint <= 0x114BE) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x115AF && codepoint <= 0x115B1) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x115B2 && codepoint <= 0x115B5) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x115B8 && codepoint <= 0x115BB) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x115DC && codepoint <= 0x115DD) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11630 && codepoint <= 0x11632) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11633 && codepoint <= 0x1163A) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1163B && codepoint <= 0x1163C) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x11640) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x116AD) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x116AE && codepoint <= 0x116AF) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x116B0 && codepoint <= 0x116B5) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11720 && codepoint <= 0x11721) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11722 && codepoint <= 0x11725) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x11726) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11727 && codepoint <= 0x1172A) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1182C && codepoint <= 0x1182E) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1182F && codepoint <= 0x11836) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11930 && codepoint <= 0x11935) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11937 && codepoint <= 0x11938) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x119D1 && codepoint <= 0x119D3) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x119D4 && codepoint <= 0x119D7) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x119DA && codepoint <= 0x119DB) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x119DC && codepoint <= 0x119DD) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x119E4) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11A01 && codepoint <= 0x11A0A) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11A51 && codepoint <= 0x11A56) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11A57 && codepoint <= 0x11A58) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11A59 && codepoint <= 0x11A5B) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x11C2F) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11C30 && codepoint <= 0x11C36) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11C38 && codepoint <= 0x11C3B) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x11CB0) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x11CB1) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11CB2 && codepoint <= 0x11CB3) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x11CB4) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11D31 && codepoint <= 0x11D36) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x11D3A) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11D3C && codepoint <= 0x11D3D) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x11D3F) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x11D43) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11D8A && codepoint <= 0x11D8E) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11D90 && codepoint <= 0x11D91) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11D93 && codepoint <= 0x11D94) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11EF3 && codepoint <= 0x11EF4) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11EF5 && codepoint <= 0x11EF6) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1963 && codepoint <= 0x196D) return Unicode_Indic_Syllable_VOWEL;
	if (codepoint >= 0xA85E && codepoint <= 0xA861) return Unicode_Indic_Syllable_VOWEL;
	if (codepoint == 0xA866) return Unicode_Indic_Syllable_VOWEL;
	if (codepoint >= 0xA922 && codepoint <= 0xA925) return Unicode_Indic_Syllable_VOWEL;
	if (codepoint >= 0xA926 && codepoint <= 0xA92A) return Unicode_Indic_Syllable_VOWEL;
	if (codepoint >= 0x11150 && codepoint <= 0x11154) return Unicode_Indic_Syllable_VOWEL;
	if (codepoint == 0x002D) return Unicode_Indic_Syllable_CONSONANT_PLACEHOLDER;
	if (codepoint == 0x00A0) return Unicode_Indic_Syllable_CONSONANT_PLACEHOLDER;
	if (codepoint == 0x00D7) return Unicode_Indic_Syllable_CONSONANT_PLACEHOLDER;
	if (codepoint == 0x0980) return Unicode_Indic_Syllable_CONSONANT_PLACEHOLDER;
	if (codepoint >= 0x0A72 && codepoint <= 0x0A73) return Unicode_Indic_Syllable_CONSONANT_PLACEHOLDER;
	if (codepoint == 0x104B) return Unicode_Indic_Syllable_CONSONANT_PLACEHOLDER;
	if (codepoint == 0x104E) return Unicode_Indic_Syllable_CONSONANT_PLACEHOLDER;
	if (codepoint == 0x1900) return Unicode_Indic_Syllable_CONSONANT_PLACEHOLDER;
	if (codepoint == 0x1CFA) return Unicode_Indic_Syllable_CONSONANT_PLACEHOLDER;
	if (codepoint >= 0x2010 && codepoint <= 0x2014) return Unicode_Indic_Syllable_CONSONANT_PLACEHOLDER;
	if (codepoint == 0x25CC) return Unicode_Indic_Syllable_CONSONANT_PLACEHOLDER;
	if (codepoint >= 0xAA74 && codepoint <= 0xAA76) return Unicode_Indic_Syllable_CONSONANT_PLACEHOLDER;
	if (codepoint == 0x11A3F) return Unicode_Indic_Syllable_CONSONANT_PLACEHOLDER;
	if (codepoint == 0x11A45) return Unicode_Indic_Syllable_CONSONANT_PLACEHOLDER;
	if (codepoint == 0x11EF2) return Unicode_Indic_Syllable_CONSONANT_PLACEHOLDER;
	if (codepoint >= 0x0915 && codepoint <= 0x0939) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0958 && codepoint <= 0x095F) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0978 && codepoint <= 0x097F) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0995 && codepoint <= 0x09A8) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x09AA && codepoint <= 0x09B0) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0x09B2) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x09B6 && codepoint <= 0x09B9) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x09DC && codepoint <= 0x09DD) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0x09DF) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x09F0 && codepoint <= 0x09F1) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0A15 && codepoint <= 0x0A28) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0A2A && codepoint <= 0x0A30) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0A32 && codepoint <= 0x0A33) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0A35 && codepoint <= 0x0A36) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0A38 && codepoint <= 0x0A39) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0A59 && codepoint <= 0x0A5C) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0x0A5E) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0A95 && codepoint <= 0x0AA8) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0AAA && codepoint <= 0x0AB0) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0AB2 && codepoint <= 0x0AB3) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0AB5 && codepoint <= 0x0AB9) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0x0AF9) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0B15 && codepoint <= 0x0B28) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0B2A && codepoint <= 0x0B30) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0B32 && codepoint <= 0x0B33) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0B35 && codepoint <= 0x0B39) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0B5C && codepoint <= 0x0B5D) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0x0B5F) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0x0B71) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0x0B95) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0B99 && codepoint <= 0x0B9A) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0x0B9C) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0B9E && codepoint <= 0x0B9F) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0BA3 && codepoint <= 0x0BA4) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0BA8 && codepoint <= 0x0BAA) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0BAE && codepoint <= 0x0BB9) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0C15 && codepoint <= 0x0C28) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0C2A && codepoint <= 0x0C39) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0C58 && codepoint <= 0x0C5A) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0C95 && codepoint <= 0x0CA8) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0CAA && codepoint <= 0x0CB3) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0CB5 && codepoint <= 0x0CB9) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0x0CDE) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0D15 && codepoint <= 0x0D3A) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0D9A && codepoint <= 0x0DB1) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0DB3 && codepoint <= 0x0DBB) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0x0DBD) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0DC0 && codepoint <= 0x0DC6) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0E01 && codepoint <= 0x0E2E) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0E81 && codepoint <= 0x0E82) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0x0E84) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0E86 && codepoint <= 0x0E8A) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0E8C && codepoint <= 0x0EA3) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0x0EA5) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0EA7 && codepoint <= 0x0EAE) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0EDC && codepoint <= 0x0EDF) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0F40 && codepoint <= 0x0F47) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0F49 && codepoint <= 0x0F6C) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1000 && codepoint <= 0x1020) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0x103F) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1050 && codepoint <= 0x1051) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x105A && codepoint <= 0x105D) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0x1061) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1065 && codepoint <= 0x1066) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x106E && codepoint <= 0x1070) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1075 && codepoint <= 0x1081) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0x108E) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1703 && codepoint <= 0x170C) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x170E && codepoint <= 0x1711) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1723 && codepoint <= 0x1731) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1743 && codepoint <= 0x1751) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1763 && codepoint <= 0x176C) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x176E && codepoint <= 0x1770) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1780 && codepoint <= 0x17A2) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1901 && codepoint <= 0x191E) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1950 && codepoint <= 0x1962) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1980 && codepoint <= 0x19AB) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1A00 && codepoint <= 0x1A16) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1A20 && codepoint <= 0x1A4C) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1A53 && codepoint <= 0x1A54) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1B13 && codepoint <= 0x1B33) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1B45 && codepoint <= 0x1B4B) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1B8A && codepoint <= 0x1BA0) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1BAE && codepoint <= 0x1BAF) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1BBB && codepoint <= 0x1BBD) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1BC0 && codepoint <= 0x1BE3) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1C00 && codepoint <= 0x1C23) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1C4D && codepoint <= 0x1C4F) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0xA807 && codepoint <= 0xA80A) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0xA80C && codepoint <= 0xA822) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0xA840 && codepoint <= 0xA85D) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0xA862 && codepoint <= 0xA865) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0xA869 && codepoint <= 0xA870) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0xA872) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0xA892 && codepoint <= 0xA8B3) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0xA90A && codepoint <= 0xA921) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0xA930 && codepoint <= 0xA946) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0xA989 && codepoint <= 0xA98B) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0xA98F && codepoint <= 0xA9B2) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0xA9E0 && codepoint <= 0xA9E4) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0xA9E7 && codepoint <= 0xA9EF) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0xA9FA && codepoint <= 0xA9FE) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0xAA06 && codepoint <= 0xAA28) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0xAA60 && codepoint <= 0xAA6F) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0xAA71 && codepoint <= 0xAA73) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0xAA7A) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0xAA7E && codepoint <= 0xAA7F) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0xAA80 && codepoint <= 0xAAAF) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0xAAE2 && codepoint <= 0xAAEA) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0xABC0 && codepoint <= 0xABCD) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0xABD0) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0xABD2 && codepoint <= 0xABDA) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0x10A00) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x10A10 && codepoint <= 0x10A13) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x10A15 && codepoint <= 0x10A17) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x10A19 && codepoint <= 0x10A35) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x11013 && codepoint <= 0x11037) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1108D && codepoint <= 0x110AF) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x11107 && codepoint <= 0x11126) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0x11144) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0x11147) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x11155 && codepoint <= 0x11172) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x11191 && codepoint <= 0x111B2) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x11208 && codepoint <= 0x11211) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x11213 && codepoint <= 0x1122B) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x11284 && codepoint <= 0x11286) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0x11288) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1128A && codepoint <= 0x1128D) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1128F && codepoint <= 0x1129D) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1129F && codepoint <= 0x112A8) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x112BA && codepoint <= 0x112DE) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x11315 && codepoint <= 0x11328) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1132A && codepoint <= 0x11330) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x11332 && codepoint <= 0x11333) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x11335 && codepoint <= 0x11339) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1140E && codepoint <= 0x11434) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1148F && codepoint <= 0x114AF) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1158E && codepoint <= 0x115AE) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1160E && codepoint <= 0x1162F) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1168A && codepoint <= 0x116AA) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0x116B8) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x11700 && codepoint <= 0x1171A) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1180A && codepoint <= 0x1182B) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1190C && codepoint <= 0x11913) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x11915 && codepoint <= 0x11916) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x11918 && codepoint <= 0x1192F) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x119AE && codepoint <= 0x119D0) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x11A0B && codepoint <= 0x11A32) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x11A5C && codepoint <= 0x11A83) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x11C0E && codepoint <= 0x11C2E) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x11C72 && codepoint <= 0x11C8F) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x11D0C && codepoint <= 0x11D30) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x11D6C && codepoint <= 0x11D89) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x11EE0 && codepoint <= 0x11EF1) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0x09CE) return Unicode_Indic_Syllable_CONSONANT_DEAD;
	if (codepoint >= 0x0D54 && codepoint <= 0x0D56) return Unicode_Indic_Syllable_CONSONANT_DEAD;
	if (codepoint >= 0x0D7A && codepoint <= 0x0D7F) return Unicode_Indic_Syllable_CONSONANT_DEAD;
	if (codepoint >= 0x1CF2 && codepoint <= 0x1CF3) return Unicode_Indic_Syllable_CONSONANT_DEAD;
	if (codepoint >= 0x0CF1 && codepoint <= 0x0CF2) return Unicode_Indic_Syllable_CONSONANT_WITH_STACKER;
	if (codepoint >= 0x1CF5 && codepoint <= 0x1CF6) return Unicode_Indic_Syllable_CONSONANT_WITH_STACKER;
	if (codepoint >= 0x11003 && codepoint <= 0x11004) return Unicode_Indic_Syllable_CONSONANT_WITH_STACKER;
	if (codepoint >= 0x11460 && codepoint <= 0x11461) return Unicode_Indic_Syllable_CONSONANT_WITH_STACKER;
	if (codepoint >= 0x111C2 && codepoint <= 0x111C3) return Unicode_Indic_Syllable_CONSONANT_PREFIXED;
	if (codepoint == 0x1193F) return Unicode_Indic_Syllable_CONSONANT_PREFIXED;
	if (codepoint == 0x11A3A) return Unicode_Indic_Syllable_CONSONANT_PREFIXED;
	if (codepoint >= 0x11A84 && codepoint <= 0x11A89) return Unicode_Indic_Syllable_CONSONANT_PREFIXED;
	if (codepoint == 0x0D4E) return Unicode_Indic_Syllable_CONSONANT_PRECEDING_REPHA;
	if (codepoint == 0x11941) return Unicode_Indic_Syllable_CONSONANT_PRECEDING_REPHA;
	if (codepoint == 0x11D46) return Unicode_Indic_Syllable_CONSONANT_PRECEDING_REPHA;
	if (codepoint == 0x1A5A) return Unicode_Indic_Syllable_CONSONANT_INITIAL_POSTFIXED;
	if (codepoint == 0x17CC) return Unicode_Indic_Syllable_CONSONANT_SUCCEEDING_REPHA;
	if (codepoint == 0x1B03) return Unicode_Indic_Syllable_CONSONANT_SUCCEEDING_REPHA;
	if (codepoint == 0x1B81) return Unicode_Indic_Syllable_CONSONANT_SUCCEEDING_REPHA;
	if (codepoint == 0xA982) return Unicode_Indic_Syllable_CONSONANT_SUCCEEDING_REPHA;
	if (codepoint >= 0x0F8D && codepoint <= 0x0F97) return Unicode_Indic_Syllable_CONSONANT_SUBJOINED;
	if (codepoint >= 0x0F99 && codepoint <= 0x0FBC) return Unicode_Indic_Syllable_CONSONANT_SUBJOINED;
	if (codepoint >= 0x1929 && codepoint <= 0x192B) return Unicode_Indic_Syllable_CONSONANT_SUBJOINED;
	if (codepoint == 0x1A57) return Unicode_Indic_Syllable_CONSONANT_SUBJOINED;
	if (codepoint >= 0x1A5B && codepoint <= 0x1A5E) return Unicode_Indic_Syllable_CONSONANT_SUBJOINED;
	if (codepoint == 0x1BA1) return Unicode_Indic_Syllable_CONSONANT_SUBJOINED;
	if (codepoint >= 0x1BA2 && codepoint <= 0x1BA3) return Unicode_Indic_Syllable_CONSONANT_SUBJOINED;
	if (codepoint >= 0x1BAC && codepoint <= 0x1BAD) return Unicode_Indic_Syllable_CONSONANT_SUBJOINED;
	if (codepoint >= 0x1C24 && codepoint <= 0x1C25) return Unicode_Indic_Syllable_CONSONANT_SUBJOINED;
	if (codepoint >= 0xA867 && codepoint <= 0xA868) return Unicode_Indic_Syllable_CONSONANT_SUBJOINED;
	if (codepoint == 0xA871) return Unicode_Indic_Syllable_CONSONANT_SUBJOINED;
	if (codepoint >= 0x11C92 && codepoint <= 0x11CA7) return Unicode_Indic_Syllable_CONSONANT_SUBJOINED;
	if (codepoint == 0x11CA9) return Unicode_Indic_Syllable_CONSONANT_SUBJOINED;
	if (codepoint >= 0x11CAA && codepoint <= 0x11CAF) return Unicode_Indic_Syllable_CONSONANT_SUBJOINED;
	if (codepoint == 0x0A75) return Unicode_Indic_Syllable_CONSONANT_MEDIAL;
	if (codepoint == 0x0EBC) return Unicode_Indic_Syllable_CONSONANT_MEDIAL;
	if (codepoint == 0x0EBD) return Unicode_Indic_Syllable_CONSONANT_MEDIAL;
	if (codepoint >= 0x103B && codepoint <= 0x103C) return Unicode_Indic_Syllable_CONSONANT_MEDIAL;
	if (codepoint >= 0x103D && codepoint <= 0x103E) return Unicode_Indic_Syllable_CONSONANT_MEDIAL;
	if (codepoint >= 0x105E && codepoint <= 0x1060) return Unicode_Indic_Syllable_CONSONANT_MEDIAL;
	if (codepoint == 0x1082) return Unicode_Indic_Syllable_CONSONANT_MEDIAL;
	if (codepoint == 0x1A55) return Unicode_Indic_Syllable_CONSONANT_MEDIAL;
	if (codepoint == 0x1A56) return Unicode_Indic_Syllable_CONSONANT_MEDIAL;
	if (codepoint == 0xA8B4) return Unicode_Indic_Syllable_CONSONANT_MEDIAL;
	if (codepoint == 0xA9BD) return Unicode_Indic_Syllable_CONSONANT_MEDIAL;
	if (codepoint >= 0xA9BE && codepoint <= 0xA9BF) return Unicode_Indic_Syllable_CONSONANT_MEDIAL;
	if (codepoint >= 0xAA33 && codepoint <= 0xAA34) return Unicode_Indic_Syllable_CONSONANT_MEDIAL;
	if (codepoint >= 0xAA35 && codepoint <= 0xAA36) return Unicode_Indic_Syllable_CONSONANT_MEDIAL;
	if (codepoint >= 0x1171D && codepoint <= 0x1171F) return Unicode_Indic_Syllable_CONSONANT_MEDIAL;
	if (codepoint == 0x11940) return Unicode_Indic_Syllable_CONSONANT_MEDIAL;
	if (codepoint == 0x11942) return Unicode_Indic_Syllable_CONSONANT_MEDIAL;
	if (codepoint >= 0x11A3B && codepoint <= 0x11A3E) return Unicode_Indic_Syllable_CONSONANT_MEDIAL;
	if (codepoint == 0x11D47) return Unicode_Indic_Syllable_CONSONANT_MEDIAL;
	if (codepoint >= 0x1930 && codepoint <= 0x1931) return Unicode_Indic_Syllable_CONSONANT_FINAL;
	if (codepoint >= 0x1933 && codepoint <= 0x1938) return Unicode_Indic_Syllable_CONSONANT_FINAL;
	if (codepoint == 0x1939) return Unicode_Indic_Syllable_CONSONANT_FINAL;
	if (codepoint >= 0x19C1 && codepoint <= 0x19C7) return Unicode_Indic_Syllable_CONSONANT_FINAL;
	if (codepoint >= 0x1A58 && codepoint <= 0x1A59) return Unicode_Indic_Syllable_CONSONANT_FINAL;
	if (codepoint >= 0x1BBE && codepoint <= 0x1BBF) return Unicode_Indic_Syllable_CONSONANT_FINAL;
	if (codepoint >= 0x1BF0 && codepoint <= 0x1BF1) return Unicode_Indic_Syllable_CONSONANT_FINAL;
	if (codepoint >= 0x1C2D && codepoint <= 0x1C33) return Unicode_Indic_Syllable_CONSONANT_FINAL;
	if (codepoint >= 0xA94F && codepoint <= 0xA951) return Unicode_Indic_Syllable_CONSONANT_FINAL;
	if (codepoint == 0xA952) return Unicode_Indic_Syllable_CONSONANT_FINAL;
	if (codepoint >= 0xAA40 && codepoint <= 0xAA42) return Unicode_Indic_Syllable_CONSONANT_FINAL;
	if (codepoint == 0xAA43) return Unicode_Indic_Syllable_CONSONANT_FINAL;
	if (codepoint >= 0xAA44 && codepoint <= 0xAA4B) return Unicode_Indic_Syllable_CONSONANT_FINAL;
	if (codepoint == 0xAA4C) return Unicode_Indic_Syllable_CONSONANT_FINAL;
	if (codepoint == 0xAA4D) return Unicode_Indic_Syllable_CONSONANT_FINAL;
	if (codepoint >= 0xABDB && codepoint <= 0xABE2) return Unicode_Indic_Syllable_CONSONANT_FINAL;
	if (codepoint >= 0x11A8A && codepoint <= 0x11A95) return Unicode_Indic_Syllable_CONSONANT_FINAL;
	if (codepoint >= 0x0F88 && codepoint <= 0x0F8C) return Unicode_Indic_Syllable_CONSONANT_HEAD_LETTER;
	if (codepoint == 0x0B83) return Unicode_Indic_Syllable_MODIFYING_LETTER;
	if (codepoint >= 0x1970 && codepoint <= 0x1974) return Unicode_Indic_Syllable_TONE_LETTER;
	if (codepoint == 0xAAC0) return Unicode_Indic_Syllable_TONE_LETTER;
	if (codepoint == 0xAAC2) return Unicode_Indic_Syllable_TONE_LETTER;
	if (codepoint >= 0x0E48 && codepoint <= 0x0E4B) return Unicode_Indic_Syllable_TONE_MARK;
	if (codepoint >= 0x0EC8 && codepoint <= 0x0ECB) return Unicode_Indic_Syllable_TONE_MARK;
	if (codepoint == 0x1037) return Unicode_Indic_Syllable_TONE_MARK;
	if (codepoint >= 0x1063 && codepoint <= 0x1064) return Unicode_Indic_Syllable_TONE_MARK;
	if (codepoint >= 0x1069 && codepoint <= 0x106D) return Unicode_Indic_Syllable_TONE_MARK;
	if (codepoint >= 0x1087 && codepoint <= 0x108C) return Unicode_Indic_Syllable_TONE_MARK;
	if (codepoint == 0x108D) return Unicode_Indic_Syllable_TONE_MARK;
	if (codepoint == 0x108F) return Unicode_Indic_Syllable_TONE_MARK;
	if (codepoint >= 0x109A && codepoint <= 0x109B) return Unicode_Indic_Syllable_TONE_MARK;
	if (codepoint >= 0x19C8 && codepoint <= 0x19C9) return Unicode_Indic_Syllable_TONE_MARK;
	if (codepoint >= 0x1A75 && codepoint <= 0x1A79) return Unicode_Indic_Syllable_TONE_MARK;
	if (codepoint >= 0xA92B && codepoint <= 0xA92D) return Unicode_Indic_Syllable_TONE_MARK;
	if (codepoint == 0xAA7B) return Unicode_Indic_Syllable_TONE_MARK;
	if (codepoint == 0xAA7C) return Unicode_Indic_Syllable_TONE_MARK;
	if (codepoint == 0xAA7D) return Unicode_Indic_Syllable_TONE_MARK;
	if (codepoint == 0xAABF) return Unicode_Indic_Syllable_TONE_MARK;
	if (codepoint == 0xAAC1) return Unicode_Indic_Syllable_TONE_MARK;
	if (codepoint == 0xABEC) return Unicode_Indic_Syllable_TONE_MARK;
	if (codepoint == 0x0A71) return Unicode_Indic_Syllable_GEMINATION_MARK;
	if (codepoint == 0x11237) return Unicode_Indic_Syllable_GEMINATION_MARK;
	if (codepoint == 0x11A98) return Unicode_Indic_Syllable_GEMINATION_MARK;
	if (codepoint >= 0x0951 && codepoint <= 0x0952) return Unicode_Indic_Syllable_CANTILLATION_MARK;
	if (codepoint == 0x0A51) return Unicode_Indic_Syllable_CANTILLATION_MARK;
	if (codepoint >= 0x0AFA && codepoint <= 0x0AFC) return Unicode_Indic_Syllable_CANTILLATION_MARK;
	if (codepoint >= 0x1CD0 && codepoint <= 0x1CD2) return Unicode_Indic_Syllable_CANTILLATION_MARK;
	if (codepoint >= 0x1CD4 && codepoint <= 0x1CE0) return Unicode_Indic_Syllable_CANTILLATION_MARK;
	if (codepoint == 0x1CE1) return Unicode_Indic_Syllable_CANTILLATION_MARK;
	if (codepoint == 0x1CF4) return Unicode_Indic_Syllable_CANTILLATION_MARK;
	if (codepoint == 0x1CF7) return Unicode_Indic_Syllable_CANTILLATION_MARK;
	if (codepoint >= 0x1CF8 && codepoint <= 0x1CF9) return Unicode_Indic_Syllable_CANTILLATION_MARK;
	if (codepoint == 0x20F0) return Unicode_Indic_Syllable_CANTILLATION_MARK;
	if (codepoint >= 0xA8E0 && codepoint <= 0xA8F1) return Unicode_Indic_Syllable_CANTILLATION_MARK;
	if (codepoint == 0x1123E) return Unicode_Indic_Syllable_CANTILLATION_MARK;
	if (codepoint >= 0x11366 && codepoint <= 0x1136C) return Unicode_Indic_Syllable_CANTILLATION_MARK;
	if (codepoint >= 0x11370 && codepoint <= 0x11374) return Unicode_Indic_Syllable_CANTILLATION_MARK;
	if (codepoint >= 0x17C9 && codepoint <= 0x17CA) return Unicode_Indic_Syllable_REGISTER_SHIFTER;
	if (codepoint >= 0x00B2 && codepoint <= 0x00B3) return Unicode_Indic_Syllable_SYLLABLE_MODIFIER;
	if (codepoint == 0x09FE) return Unicode_Indic_Syllable_SYLLABLE_MODIFIER;
	if (codepoint == 0x0F35) return Unicode_Indic_Syllable_SYLLABLE_MODIFIER;
	if (codepoint == 0x0F37) return Unicode_Indic_Syllable_SYLLABLE_MODIFIER;
	if (codepoint == 0x0FC6) return Unicode_Indic_Syllable_SYLLABLE_MODIFIER;
	if (codepoint == 0x17CB) return Unicode_Indic_Syllable_SYLLABLE_MODIFIER;
	if (codepoint >= 0x17CE && codepoint <= 0x17D0) return Unicode_Indic_Syllable_SYLLABLE_MODIFIER;
	if (codepoint == 0x17D3) return Unicode_Indic_Syllable_SYLLABLE_MODIFIER;
	if (codepoint == 0x17DD) return Unicode_Indic_Syllable_SYLLABLE_MODIFIER;
	if (codepoint == 0x193B) return Unicode_Indic_Syllable_SYLLABLE_MODIFIER;
	if (codepoint >= 0x1A7B && codepoint <= 0x1A7C) return Unicode_Indic_Syllable_SYLLABLE_MODIFIER;
	if (codepoint == 0x1A7F) return Unicode_Indic_Syllable_SYLLABLE_MODIFIER;
	if (codepoint == 0x1C36) return Unicode_Indic_Syllable_SYLLABLE_MODIFIER;
	if (codepoint == 0x1DFB) return Unicode_Indic_Syllable_SYLLABLE_MODIFIER;
	if (codepoint == 0x2074) return Unicode_Indic_Syllable_SYLLABLE_MODIFIER;
	if (codepoint >= 0x2082 && codepoint <= 0x2084) return Unicode_Indic_Syllable_SYLLABLE_MODIFIER;
	if (codepoint == 0x111C9) return Unicode_Indic_Syllable_SYLLABLE_MODIFIER;
	if (codepoint == 0x1145E) return Unicode_Indic_Syllable_SYLLABLE_MODIFIER;
	if (codepoint == 0x11A33) return Unicode_Indic_Syllable_SYLLABLE_MODIFIER;
	if (codepoint == 0x0E4C) return Unicode_Indic_Syllable_CONSONANT_KILLER;
	if (codepoint == 0x17CD) return Unicode_Indic_Syllable_CONSONANT_KILLER;
	if (codepoint == 0x200C) return Unicode_Indic_Syllable_NON_JOINER;
	if (codepoint == 0x200D) return Unicode_Indic_Syllable_JOINER;
	if (codepoint == 0x1107F) return Unicode_Indic_Syllable_NUMBER_JOINER;
	if (codepoint >= 0x0030 && codepoint <= 0x0039) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x0966 && codepoint <= 0x096F) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x09E6 && codepoint <= 0x09EF) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x0A66 && codepoint <= 0x0A6F) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x0AE6 && codepoint <= 0x0AEF) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x0B66 && codepoint <= 0x0B6F) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x0BE6 && codepoint <= 0x0BEF) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x0C66 && codepoint <= 0x0C6F) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x0CE6 && codepoint <= 0x0CEF) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x0D66 && codepoint <= 0x0D6F) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x0DE6 && codepoint <= 0x0DEF) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x0E50 && codepoint <= 0x0E59) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x0ED0 && codepoint <= 0x0ED9) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x0F20 && codepoint <= 0x0F29) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x0F2A && codepoint <= 0x0F33) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x1040 && codepoint <= 0x1049) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x1090 && codepoint <= 0x1099) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x17E0 && codepoint <= 0x17E9) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x1946 && codepoint <= 0x194F) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x19D0 && codepoint <= 0x19D9) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint == 0x19DA) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x1A80 && codepoint <= 0x1A89) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x1A90 && codepoint <= 0x1A99) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x1B50 && codepoint <= 0x1B59) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x1BB0 && codepoint <= 0x1BB9) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x1C40 && codepoint <= 0x1C49) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0xA8D0 && codepoint <= 0xA8D9) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0xA900 && codepoint <= 0xA909) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0xA9D0 && codepoint <= 0xA9D9) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0xA9F0 && codepoint <= 0xA9F9) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0xAA50 && codepoint <= 0xAA59) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0xABF0 && codepoint <= 0xABF9) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x10A40 && codepoint <= 0x10A48) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x11066 && codepoint <= 0x1106F) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x11136 && codepoint <= 0x1113F) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x111D0 && codepoint <= 0x111D9) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x111E1 && codepoint <= 0x111F4) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x112F0 && codepoint <= 0x112F9) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x11450 && codepoint <= 0x11459) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x114D0 && codepoint <= 0x114D9) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x11650 && codepoint <= 0x11659) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x116C0 && codepoint <= 0x116C9) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x11730 && codepoint <= 0x11739) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x1173A && codepoint <= 0x1173B) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x11950 && codepoint <= 0x11959) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x11C50 && codepoint <= 0x11C59) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x11C5A && codepoint <= 0x11C6C) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x11D50 && codepoint <= 0x11D59) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x11DA0 && codepoint <= 0x11DA9) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x11052 && codepoint <= 0x11065) return Unicode_Indic_Syllable_BRAHMI_JOINING_NUMBER;

	return Unicode_Indic_Syllable_UNKNOWN;
}

Unicode_Indic_Position unicode_indic_position(uint32_t codepoint) {
	if (codepoint == 0x0903) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x093B) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x093E) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x0940) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x0949 && codepoint <= 0x094C) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x094F) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x0982 && codepoint <= 0x0983) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x09BE) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x09C0) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x09D7) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x0A03) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x0A3E) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x0A40) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x0A83) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x0ABE) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x0AC0) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x0ACB && codepoint <= 0x0ACC) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x0B02 && codepoint <= 0x0B03) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x0B3E) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x0B40) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x0BBE && codepoint <= 0x0BBF) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x0BC1 && codepoint <= 0x0BC2) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x0BD7) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x0C01 && codepoint <= 0x0C03) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x0C41 && codepoint <= 0x0C44) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x0C82 && codepoint <= 0x0C83) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x0CBE) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x0CC1 && codepoint <= 0x0CC4) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x0CD5 && codepoint <= 0x0CD6) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x0D02 && codepoint <= 0x0D03) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x0D3E && codepoint <= 0x0D40) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x0D41 && codepoint <= 0x0D42) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x0D57) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x0D82 && codepoint <= 0x0D83) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x0DCF && codepoint <= 0x0DD1) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x0DD8) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x0DDF) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x0DF2 && codepoint <= 0x0DF3) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x0E30) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x0E32 && codepoint <= 0x0E33) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x0E45) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x0EB0) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x0EB2 && codepoint <= 0x0EB3) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x0F3E) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x0F7F) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x102B && codepoint <= 0x102C) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x1038) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x103B) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x1056 && codepoint <= 0x1057) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x1062 && codepoint <= 0x1064) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x1067 && codepoint <= 0x106D) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x1083) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x1087 && codepoint <= 0x108C) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x108F) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x109A && codepoint <= 0x109C) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x17B6) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x17C7 && codepoint <= 0x17C8) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x1923 && codepoint <= 0x1924) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x1929 && codepoint <= 0x192B) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x1930 && codepoint <= 0x1931) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x1933 && codepoint <= 0x1938) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x19B0 && codepoint <= 0x19B4) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x19B8 && codepoint <= 0x19B9) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x19BB && codepoint <= 0x19C0) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x19C8 && codepoint <= 0x19C9) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x1A1A) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x1A57) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x1A61) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x1A63 && codepoint <= 0x1A64) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x1A6D) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x1B04) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x1B35) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x1B44) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x1B82) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x1BA1) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x1BA7) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x1BAA) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x1BE7) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x1BEA && codepoint <= 0x1BEC) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x1BEE) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x1BF2 && codepoint <= 0x1BF3) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x1C24 && codepoint <= 0x1C26) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x1C2A && codepoint <= 0x1C2B) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x1CE1) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x1CF7) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0xA823 && codepoint <= 0xA824) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0xA827) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0xA880 && codepoint <= 0xA881) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0xA8B4 && codepoint <= 0xA8C3) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0xA952 && codepoint <= 0xA953) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0xA983) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0xA9B4 && codepoint <= 0xA9B5) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0xAA33) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0xAA4D) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0xAA7B) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0xAA7D) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0xAAB1) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0xAABA) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0xAABD) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0xAAEF) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0xAAF5) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0xABE3 && codepoint <= 0xABE4) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0xABE6 && codepoint <= 0xABE7) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0xABE9 && codepoint <= 0xABEA) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0xABEC) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x11000) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x11002) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x11082) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x110B0) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x110B2) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x110B7 && codepoint <= 0x110B8) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x11145 && codepoint <= 0x11146) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x11182) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x111B3) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x111B5) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x111C0) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x1122C && codepoint <= 0x1122E) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x11235) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x112E0) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x112E2) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x11302 && codepoint <= 0x11303) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x1133E && codepoint <= 0x1133F) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x11341 && codepoint <= 0x11344) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x1134D) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x11357) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x11362 && codepoint <= 0x11363) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x11435) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x11437) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x11440 && codepoint <= 0x11441) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x11445) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x114B0) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x114B2) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x114BD) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x114C1) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x115AF) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x115B1) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x115BE) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x11630 && codepoint <= 0x11632) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x1163B && codepoint <= 0x1163C) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x1163E) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x116AC) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x116AF) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x116B6) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x11720 && codepoint <= 0x11721) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x1182C) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x1182E) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x11838) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x11930 && codepoint <= 0x11934) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x1193D) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x11940) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x119D1) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x119D3) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x119DC && codepoint <= 0x119DF) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x11A39) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x11A57 && codepoint <= 0x11A58) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x11A97) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x11C2F) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x11C3E) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x11CA9) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x11CB4) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x11D46) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x11D8A && codepoint <= 0x11D8E) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x11D93 && codepoint <= 0x11D94) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x11D96) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x11EF6) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x093F) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x094E) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x09BF) return Unicode_Indic_Position_LEFT;
	if (codepoint >= 0x09C7 && codepoint <= 0x09C8) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x0A3F) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x0ABF) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x0B47) return Unicode_Indic_Position_LEFT;
	if (codepoint >= 0x0BC6 && codepoint <= 0x0BC8) return Unicode_Indic_Position_LEFT;
	if (codepoint >= 0x0D46 && codepoint <= 0x0D48) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x0DD9) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x0DDB) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x0F3F) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x1031) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x1084) return Unicode_Indic_Position_LEFT;
	if (codepoint >= 0x17C1 && codepoint <= 0x17C3) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x1A19) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x1A55) return Unicode_Indic_Position_LEFT;
	if (codepoint >= 0x1A6E && codepoint <= 0x1A72) return Unicode_Indic_Position_LEFT;
	if (codepoint >= 0x1B3E && codepoint <= 0x1B3F) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x1BA6) return Unicode_Indic_Position_LEFT;
	if (codepoint >= 0x1C27 && codepoint <= 0x1C28) return Unicode_Indic_Position_LEFT;
	if (codepoint >= 0x1C34 && codepoint <= 0x1C35) return Unicode_Indic_Position_LEFT;
	if (codepoint >= 0xA9BA && codepoint <= 0xA9BB) return Unicode_Indic_Position_LEFT;
	if (codepoint >= 0xAA2F && codepoint <= 0xAA30) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0xAA34) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0xAAEB) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0xAAEE) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x110B1) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x1112C) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x111B4) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x111CE) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x112E1) return Unicode_Indic_Position_LEFT;
	if (codepoint >= 0x11347 && codepoint <= 0x11348) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x11436) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x114B1) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x114B9) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x115B0) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x115B8) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x116AE) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x11726) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x1182D) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x11935) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x11937) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x119D2) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x119E4) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x11CB1) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x11EF5) return Unicode_Indic_Position_LEFT;
	if (codepoint >= 0x0E40 && codepoint <= 0x0E44) return Unicode_Indic_Position_VISUAL_ORDER_LEFT;
	if (codepoint >= 0x0EC0 && codepoint <= 0x0EC4) return Unicode_Indic_Position_VISUAL_ORDER_LEFT;
	if (codepoint >= 0x19B5 && codepoint <= 0x19B7) return Unicode_Indic_Position_VISUAL_ORDER_LEFT;
	if (codepoint == 0x19BA) return Unicode_Indic_Position_VISUAL_ORDER_LEFT;
	if (codepoint >= 0xAAB5 && codepoint <= 0xAAB6) return Unicode_Indic_Position_VISUAL_ORDER_LEFT;
	if (codepoint == 0xAAB9) return Unicode_Indic_Position_VISUAL_ORDER_LEFT;
	if (codepoint >= 0xAABB && codepoint <= 0xAABC) return Unicode_Indic_Position_VISUAL_ORDER_LEFT;
	if (codepoint >= 0x09CB && codepoint <= 0x09CC) return Unicode_Indic_Position_LEFT_AND_RIGHT;
	if (codepoint == 0x0B4B) return Unicode_Indic_Position_LEFT_AND_RIGHT;
	if (codepoint >= 0x0BCA && codepoint <= 0x0BCC) return Unicode_Indic_Position_LEFT_AND_RIGHT;
	if (codepoint >= 0x0D4A && codepoint <= 0x0D4C) return Unicode_Indic_Position_LEFT_AND_RIGHT;
	if (codepoint == 0x0DDC) return Unicode_Indic_Position_LEFT_AND_RIGHT;
	if (codepoint == 0x0DDE) return Unicode_Indic_Position_LEFT_AND_RIGHT;
	if (codepoint == 0x17C0) return Unicode_Indic_Position_LEFT_AND_RIGHT;
	if (codepoint >= 0x17C4 && codepoint <= 0x17C5) return Unicode_Indic_Position_LEFT_AND_RIGHT;
	if (codepoint >= 0x1B40 && codepoint <= 0x1B41) return Unicode_Indic_Position_LEFT_AND_RIGHT;
	if (codepoint >= 0x1134B && codepoint <= 0x1134C) return Unicode_Indic_Position_LEFT_AND_RIGHT;
	if (codepoint == 0x114BC) return Unicode_Indic_Position_LEFT_AND_RIGHT;
	if (codepoint == 0x114BE) return Unicode_Indic_Position_LEFT_AND_RIGHT;
	if (codepoint == 0x115BA) return Unicode_Indic_Position_LEFT_AND_RIGHT;
	if (codepoint == 0x11938) return Unicode_Indic_Position_LEFT_AND_RIGHT;
	if (codepoint >= 0x0900 && codepoint <= 0x0902) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x093A) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0945 && codepoint <= 0x0948) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0951) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0953 && codepoint <= 0x0955) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0981) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x09FE) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0A01 && codepoint <= 0x0A02) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0A47 && codepoint <= 0x0A48) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0A4B && codepoint <= 0x0A4C) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0A70 && codepoint <= 0x0A71) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0A81 && codepoint <= 0x0A82) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0AC5) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0AC7 && codepoint <= 0x0AC8) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0AFA && codepoint <= 0x0AFF) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0B01) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0B3F) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0B55 && codepoint <= 0x0B56) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0B82) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0BC0) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0BCD) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0C00) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0C04) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0C3E && codepoint <= 0x0C40) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0C46 && codepoint <= 0x0C47) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0C4A && codepoint <= 0x0C4D) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0C55) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0C81) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0CBF) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0CC6) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0CCC && codepoint <= 0x0CCD) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0D00 && codepoint <= 0x0D01) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0D3B && codepoint <= 0x0D3C) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0D4D) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0D4E) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0D81) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0DCA) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0DD2 && codepoint <= 0x0DD3) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0E31) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0E34 && codepoint <= 0x0E37) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0E47 && codepoint <= 0x0E4E) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0EB1) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0EB4 && codepoint <= 0x0EB7) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0EBB) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0EC8 && codepoint <= 0x0ECD) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0F39) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0F72) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0F7A && codepoint <= 0x0F7E) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0F80) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0F82 && codepoint <= 0x0F83) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0F86 && codepoint <= 0x0F87) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x102D && codepoint <= 0x102E) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x1032 && codepoint <= 0x1036) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x103A) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x1071 && codepoint <= 0x1074) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x1085 && codepoint <= 0x1086) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x109D) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1712) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1732) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1752) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1772) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x17B7 && codepoint <= 0x17BA) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x17C6) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x17C9 && codepoint <= 0x17D1) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x17D3) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x17DD) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x1920 && codepoint <= 0x1921) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x1927 && codepoint <= 0x1928) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x193A) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1A17) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1A1B) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x1A58 && codepoint <= 0x1A5A) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1A62) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x1A65 && codepoint <= 0x1A68) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1A6B) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x1A73 && codepoint <= 0x1A7C) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x1B00 && codepoint <= 0x1B03) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1B34) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x1B36 && codepoint <= 0x1B37) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1B42) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1B6B) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x1B6D && codepoint <= 0x1B73) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x1B80 && codepoint <= 0x1B81) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1BA4) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x1BA8 && codepoint <= 0x1BA9) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1BE6) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x1BE8 && codepoint <= 0x1BE9) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1BED) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x1BEF && codepoint <= 0x1BF1) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x1C2D && codepoint <= 0x1C33) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1C36) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x1CD0 && codepoint <= 0x1CD2) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x1CDA && codepoint <= 0x1CDB) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1CE0) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1CF4) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1DFB) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x20F0) return Unicode_Indic_Position_TOP;
	if (codepoint == 0xA802) return Unicode_Indic_Position_TOP;
	if (codepoint == 0xA806) return Unicode_Indic_Position_TOP;
	if (codepoint == 0xA80B) return Unicode_Indic_Position_TOP;
	if (codepoint == 0xA826) return Unicode_Indic_Position_TOP;
	if (codepoint == 0xA8C5) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0xA8E0 && codepoint <= 0xA8F1) return Unicode_Indic_Position_TOP;
	if (codepoint == 0xA8FF) return Unicode_Indic_Position_TOP;
	if (codepoint == 0xA94A) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0xA94F && codepoint <= 0xA951) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0xA980 && codepoint <= 0xA982) return Unicode_Indic_Position_TOP;
	if (codepoint == 0xA9B3) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0xA9B6 && codepoint <= 0xA9B7) return Unicode_Indic_Position_TOP;
	if (codepoint == 0xA9BC) return Unicode_Indic_Position_TOP;
	if (codepoint == 0xA9E5) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0xAA29 && codepoint <= 0xAA2C) return Unicode_Indic_Position_TOP;
	if (codepoint == 0xAA2E) return Unicode_Indic_Position_TOP;
	if (codepoint == 0xAA31) return Unicode_Indic_Position_TOP;
	if (codepoint == 0xAA43) return Unicode_Indic_Position_TOP;
	if (codepoint == 0xAA4C) return Unicode_Indic_Position_TOP;
	if (codepoint == 0xAA7C) return Unicode_Indic_Position_TOP;
	if (codepoint == 0xAAB0) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0xAAB2 && codepoint <= 0xAAB3) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0xAAB7 && codepoint <= 0xAAB8) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0xAABE && codepoint <= 0xAABF) return Unicode_Indic_Position_TOP;
	if (codepoint == 0xAAC1) return Unicode_Indic_Position_TOP;
	if (codepoint == 0xAAED) return Unicode_Indic_Position_TOP;
	if (codepoint == 0xABE5) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x10A05) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x10A0F) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x10A38) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x11001) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11038 && codepoint <= 0x1103B) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11042 && codepoint <= 0x11046) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11080 && codepoint <= 0x11081) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x110B5 && codepoint <= 0x110B6) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11100 && codepoint <= 0x11102) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11127 && codepoint <= 0x11129) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1112D) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x11130) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x11134) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11180 && codepoint <= 0x11181) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x111BC && codepoint <= 0x111BE) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x111C2 && codepoint <= 0x111C3) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x111CB) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x111CF) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11230 && codepoint <= 0x11231) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x11234) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11236 && codepoint <= 0x11237) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1123E) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x112DF) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x112E5 && codepoint <= 0x112E8) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11300 && codepoint <= 0x11301) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x11340) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11366 && codepoint <= 0x1136C) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11370 && codepoint <= 0x11374) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x1143E && codepoint <= 0x1143F) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11443 && codepoint <= 0x11444) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1145E) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x114BA) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x114BF && codepoint <= 0x114C0) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x115BC && codepoint <= 0x115BD) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11639 && codepoint <= 0x1163A) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1163D) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x11640) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x116AB) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x116AD) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x116B2 && codepoint <= 0x116B5) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1171F) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11722 && codepoint <= 0x11723) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x11727) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11729 && codepoint <= 0x1172B) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11833 && codepoint <= 0x11837) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x1193B && codepoint <= 0x1193C) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1193F) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x11941) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x119DA && codepoint <= 0x119DB) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x11A01) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11A04 && codepoint <= 0x11A09) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11A35 && codepoint <= 0x11A38) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x11A3A) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x11A51) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11A54 && codepoint <= 0x11A56) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11A84 && codepoint <= 0x11A89) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x11A96) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x11A98) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11C30 && codepoint <= 0x11C31) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11C38 && codepoint <= 0x11C3D) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x11CB3) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11CB5 && codepoint <= 0x11CB6) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11D31 && codepoint <= 0x11D35) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x11D3A) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11D3C && codepoint <= 0x11D3D) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11D3F && codepoint <= 0x11D41) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x11D43) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11D90 && codepoint <= 0x11D91) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x11D95) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x11EF3) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x093C) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x0941 && codepoint <= 0x0944) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x094D) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x0952) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x0956 && codepoint <= 0x0957) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x0962 && codepoint <= 0x0963) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x09BC) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x09C1 && codepoint <= 0x09C4) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x09CD) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x09E2 && codepoint <= 0x09E3) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x0A3C) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x0A41 && codepoint <= 0x0A42) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x0A4D) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x0A51) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x0A75) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x0ABC) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x0AC1 && codepoint <= 0x0AC4) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x0ACD) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x0AE2 && codepoint <= 0x0AE3) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x0B3C) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x0B41 && codepoint <= 0x0B44) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x0B4D) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x0B62 && codepoint <= 0x0B63) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x0C56) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x0C62 && codepoint <= 0x0C63) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x0CBC) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x0CE2 && codepoint <= 0x0CE3) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x0D43 && codepoint <= 0x0D44) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x0D62 && codepoint <= 0x0D63) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x0DD4) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x0DD6) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x0E38 && codepoint <= 0x0E3A) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x0EB8 && codepoint <= 0x0EBA) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x0EBC) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x0F18 && codepoint <= 0x0F19) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x0F35) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x0F37) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x0F71) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x0F74 && codepoint <= 0x0F75) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x0F84) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x0F8D && codepoint <= 0x0F97) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x0F99 && codepoint <= 0x0FBC) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x0FC6) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x102F && codepoint <= 0x1030) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x1037) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x103D && codepoint <= 0x103E) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x1058 && codepoint <= 0x1059) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x105E && codepoint <= 0x1060) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x1082) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x108D) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x1713 && codepoint <= 0x1714) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x1733 && codepoint <= 0x1734) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x1753) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x1773) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x17BB && codepoint <= 0x17BD) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x1922) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x1932) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x1939) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x193B) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x1A18) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x1A56) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x1A5B && codepoint <= 0x1A5E) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x1A69 && codepoint <= 0x1A6A) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x1A6C) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x1A7F) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x1B38 && codepoint <= 0x1B3A) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x1B6C) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x1BA2 && codepoint <= 0x1BA3) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x1BA5) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x1BAC && codepoint <= 0x1BAD) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x1C2C) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x1C37) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x1CD5 && codepoint <= 0x1CD9) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x1CDC && codepoint <= 0x1CDF) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x1CED) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0xA825) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0xA82C) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0xA8C4) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0xA92B && codepoint <= 0xA92D) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0xA947 && codepoint <= 0xA949) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0xA94B && codepoint <= 0xA94E) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0xA9B8 && codepoint <= 0xA9B9) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0xA9BD) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0xAA2D) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0xAA32) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0xAA35 && codepoint <= 0xAA36) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0xAAB4) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0xAAEC) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0xABE8) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0xABED) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x10A02 && codepoint <= 0x10A03) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x10A0C && codepoint <= 0x10A0E) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x10A39 && codepoint <= 0x10A3A) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x1103C && codepoint <= 0x11041) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x110B3 && codepoint <= 0x110B4) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x110B9 && codepoint <= 0x110BA) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x1112A && codepoint <= 0x1112B) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x11131 && codepoint <= 0x11132) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x11173) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x111B6 && codepoint <= 0x111BB) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x111C9 && codepoint <= 0x111CA) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x111CC) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x1122F) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x112E3 && codepoint <= 0x112E4) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x112E9 && codepoint <= 0x112EA) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x1133B && codepoint <= 0x1133C) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x11438 && codepoint <= 0x1143D) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x11442) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x11446) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x114B3 && codepoint <= 0x114B8) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x114C2 && codepoint <= 0x114C3) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x115B2 && codepoint <= 0x115B5) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x115BF && codepoint <= 0x115C0) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x115DC && codepoint <= 0x115DD) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x11633 && codepoint <= 0x11638) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x1163F) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x116B0 && codepoint <= 0x116B1) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x116B7) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x1171D) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x11724 && codepoint <= 0x11725) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x11728) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x1182F && codepoint <= 0x11832) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x11839 && codepoint <= 0x1183A) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x11943) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x119D4 && codepoint <= 0x119D7) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x119E0) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x11A02 && codepoint <= 0x11A03) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x11A0A) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x11A33 && codepoint <= 0x11A34) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x11A3B && codepoint <= 0x11A3E) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x11A52 && codepoint <= 0x11A53) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x11A59 && codepoint <= 0x11A5B) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x11A8A && codepoint <= 0x11A95) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x11C32 && codepoint <= 0x11C36) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x11C3F) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x11C92 && codepoint <= 0x11CA7) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x11CAA && codepoint <= 0x11CB0) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x11CB2) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x11D36) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x11D42) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x11D44) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x11D47) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x11EF4) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x0C48) return Unicode_Indic_Position_TOP_AND_BOTTOM;
	if (codepoint == 0x0F73) return Unicode_Indic_Position_TOP_AND_BOTTOM;
	if (codepoint >= 0x0F76 && codepoint <= 0x0F79) return Unicode_Indic_Position_TOP_AND_BOTTOM;
	if (codepoint == 0x0F81) return Unicode_Indic_Position_TOP_AND_BOTTOM;
	if (codepoint == 0x1B3C) return Unicode_Indic_Position_TOP_AND_BOTTOM;
	if (codepoint >= 0x1112E && codepoint <= 0x1112F) return Unicode_Indic_Position_TOP_AND_BOTTOM;
	if (codepoint == 0x0AC9) return Unicode_Indic_Position_TOP_AND_RIGHT;
	if (codepoint == 0x0B57) return Unicode_Indic_Position_TOP_AND_RIGHT;
	if (codepoint == 0x0CC0) return Unicode_Indic_Position_TOP_AND_RIGHT;
	if (codepoint >= 0x0CC7 && codepoint <= 0x0CC8) return Unicode_Indic_Position_TOP_AND_RIGHT;
	if (codepoint >= 0x0CCA && codepoint <= 0x0CCB) return Unicode_Indic_Position_TOP_AND_RIGHT;
	if (codepoint >= 0x1925 && codepoint <= 0x1926) return Unicode_Indic_Position_TOP_AND_RIGHT;
	if (codepoint == 0x1B43) return Unicode_Indic_Position_TOP_AND_RIGHT;
	if (codepoint == 0x111BF) return Unicode_Indic_Position_TOP_AND_RIGHT;
	if (codepoint >= 0x11232 && codepoint <= 0x11233) return Unicode_Indic_Position_TOP_AND_RIGHT;
	if (codepoint == 0x0B48) return Unicode_Indic_Position_TOP_AND_LEFT;
	if (codepoint == 0x0DDA) return Unicode_Indic_Position_TOP_AND_LEFT;
	if (codepoint == 0x17BE) return Unicode_Indic_Position_TOP_AND_LEFT;
	if (codepoint == 0x1C29) return Unicode_Indic_Position_TOP_AND_LEFT;
	if (codepoint == 0x114BB) return Unicode_Indic_Position_TOP_AND_LEFT;
	if (codepoint == 0x115B9) return Unicode_Indic_Position_TOP_AND_LEFT;
	if (codepoint == 0x0B4C) return Unicode_Indic_Position_TOP_AND_LEFT_AND_RIGHT;
	if (codepoint == 0x0DDD) return Unicode_Indic_Position_TOP_AND_LEFT_AND_RIGHT;
	if (codepoint == 0x17BF) return Unicode_Indic_Position_TOP_AND_LEFT_AND_RIGHT;
	if (codepoint == 0x115BB) return Unicode_Indic_Position_TOP_AND_LEFT_AND_RIGHT;
	if (codepoint == 0x1B3B) return Unicode_Indic_Position_BOTTOM_AND_RIGHT;
	if (codepoint == 0xA9BE) return Unicode_Indic_Position_BOTTOM_AND_RIGHT;
	if (codepoint == 0xA9C0) return Unicode_Indic_Position_BOTTOM_AND_RIGHT;
	if (codepoint == 0x11942) return Unicode_Indic_Position_BOTTOM_AND_RIGHT;
	if (codepoint == 0xA9BF) return Unicode_Indic_Position_BOTTOM_AND_LEFT;
	if (codepoint == 0x1B3D) return Unicode_Indic_Position_TOP_AND_BOTTOM_AND_RIGHT;
	if (codepoint == 0x103C) return Unicode_Indic_Position_TOP_AND_BOTTOM_AND_LEFT;
	if (codepoint == 0x1171E) return Unicode_Indic_Position_TOP_AND_BOTTOM_AND_LEFT;
	if (codepoint == 0x1CD4) return Unicode_Indic_Position_OVERSTRUCK;
	if (codepoint >= 0x1CE2 && codepoint <= 0x1CE8) return Unicode_Indic_Position_OVERSTRUCK;
	if (codepoint == 0x10A01) return Unicode_Indic_Position_OVERSTRUCK;
	if (codepoint == 0x10A06) return Unicode_Indic_Position_OVERSTRUCK;

	return Unicode_Indic_Position_UNKNOWN;
}

Unicode_Grapheme_Property unicode_grapheme_property(uint32_t codepoint) {
	if (codepoint >= 0x0600 && codepoint <= 0x0605) return Unicode_Grapheme_Property_PREPEND;
	if (codepoint == 0x06DD) return Unicode_Grapheme_Property_PREPEND;
	if (codepoint == 0x070F) return Unicode_Grapheme_Property_PREPEND;
	if (codepoint == 0x08E2) return Unicode_Grapheme_Property_PREPEND;
	if (codepoint == 0x0D4E) return Unicode_Grapheme_Property_PREPEND;
	if (codepoint == 0x110BD) return Unicode_Grapheme_Property_PREPEND;
	if (codepoint == 0x110CD) return Unicode_Grapheme_Property_PREPEND;
	if (codepoint >= 0x111C2 && codepoint <= 0x111C3) return Unicode_Grapheme_Property_PREPEND;
	if (codepoint == 0x1193F) return Unicode_Grapheme_Property_PREPEND;
	if (codepoint == 0x11941) return Unicode_Grapheme_Property_PREPEND;
	if (codepoint == 0x11A3A) return Unicode_Grapheme_Property_PREPEND;
	if (codepoint >= 0x11A84 && codepoint <= 0x11A89) return Unicode_Grapheme_Property_PREPEND;
	if (codepoint == 0x11D46) return Unicode_Grapheme_Property_PREPEND;
	if (codepoint == 0x000D) return Unicode_Grapheme_Property_CR;
	if (codepoint == 0x000A) return Unicode_Grapheme_Property_LF;
	if (codepoint >= 0x0000 && codepoint <= 0x0009) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint >= 0x000B && codepoint <= 0x000C) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint >= 0x000E && codepoint <= 0x001F) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint >= 0x007F && codepoint <= 0x009F) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint == 0x00AD) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint == 0x061C) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint == 0x180E) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint == 0x200B) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint >= 0x200E && codepoint <= 0x200F) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint == 0x2028) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint == 0x2029) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint >= 0x202A && codepoint <= 0x202E) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint >= 0x2060 && codepoint <= 0x2064) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint == 0x2065) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint >= 0x2066 && codepoint <= 0x206F) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint == 0xFEFF) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint >= 0xFFF0 && codepoint <= 0xFFF8) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint >= 0xFFF9 && codepoint <= 0xFFFB) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint >= 0x13430 && codepoint <= 0x13438) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint >= 0x1BCA0 && codepoint <= 0x1BCA3) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint >= 0x1D173 && codepoint <= 0x1D17A) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint == 0xE0000) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint == 0xE0001) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint >= 0xE0002 && codepoint <= 0xE001F) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint >= 0xE0080 && codepoint <= 0xE00FF) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint >= 0xE01F0 && codepoint <= 0xE0FFF) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint >= 0x0300 && codepoint <= 0x036F) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0483 && codepoint <= 0x0487) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0488 && codepoint <= 0x0489) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0591 && codepoint <= 0x05BD) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x05BF) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x05C1 && codepoint <= 0x05C2) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x05C4 && codepoint <= 0x05C5) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x05C7) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0610 && codepoint <= 0x061A) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x064B && codepoint <= 0x065F) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0670) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x06D6 && codepoint <= 0x06DC) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x06DF && codepoint <= 0x06E4) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x06E7 && codepoint <= 0x06E8) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x06EA && codepoint <= 0x06ED) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0711) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0730 && codepoint <= 0x074A) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x07A6 && codepoint <= 0x07B0) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x07EB && codepoint <= 0x07F3) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x07FD) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0816 && codepoint <= 0x0819) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x081B && codepoint <= 0x0823) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0825 && codepoint <= 0x0827) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0829 && codepoint <= 0x082D) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0859 && codepoint <= 0x085B) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x08D3 && codepoint <= 0x08E1) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x08E3 && codepoint <= 0x0902) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x093A) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x093C) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0941 && codepoint <= 0x0948) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x094D) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0951 && codepoint <= 0x0957) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0962 && codepoint <= 0x0963) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0981) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x09BC) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x09BE) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x09C1 && codepoint <= 0x09C4) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x09CD) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x09D7) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x09E2 && codepoint <= 0x09E3) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x09FE) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0A01 && codepoint <= 0x0A02) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0A3C) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0A41 && codepoint <= 0x0A42) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0A47 && codepoint <= 0x0A48) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0A4B && codepoint <= 0x0A4D) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0A51) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0A70 && codepoint <= 0x0A71) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0A75) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0A81 && codepoint <= 0x0A82) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0ABC) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0AC1 && codepoint <= 0x0AC5) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0AC7 && codepoint <= 0x0AC8) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0ACD) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0AE2 && codepoint <= 0x0AE3) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0AFA && codepoint <= 0x0AFF) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0B01) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0B3C) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0B3E) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0B3F) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0B41 && codepoint <= 0x0B44) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0B4D) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0B55 && codepoint <= 0x0B56) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0B57) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0B62 && codepoint <= 0x0B63) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0B82) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0BBE) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0BC0) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0BCD) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0BD7) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0C00) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0C04) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0C3E && codepoint <= 0x0C40) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0C46 && codepoint <= 0x0C48) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0C4A && codepoint <= 0x0C4D) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0C55 && codepoint <= 0x0C56) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0C62 && codepoint <= 0x0C63) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0C81) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0CBC) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0CBF) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0CC2) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0CC6) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0CCC && codepoint <= 0x0CCD) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0CD5 && codepoint <= 0x0CD6) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0CE2 && codepoint <= 0x0CE3) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0D00 && codepoint <= 0x0D01) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0D3B && codepoint <= 0x0D3C) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0D3E) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0D41 && codepoint <= 0x0D44) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0D4D) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0D57) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0D62 && codepoint <= 0x0D63) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0D81) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0DCA) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0DCF) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0DD2 && codepoint <= 0x0DD4) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0DD6) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0DDF) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0E31) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0E34 && codepoint <= 0x0E3A) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0E47 && codepoint <= 0x0E4E) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0EB1) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0EB4 && codepoint <= 0x0EBC) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0EC8 && codepoint <= 0x0ECD) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0F18 && codepoint <= 0x0F19) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0F35) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0F37) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0F39) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0F71 && codepoint <= 0x0F7E) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0F80 && codepoint <= 0x0F84) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0F86 && codepoint <= 0x0F87) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0F8D && codepoint <= 0x0F97) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0F99 && codepoint <= 0x0FBC) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0FC6) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x102D && codepoint <= 0x1030) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1032 && codepoint <= 0x1037) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1039 && codepoint <= 0x103A) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x103D && codepoint <= 0x103E) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1058 && codepoint <= 0x1059) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x105E && codepoint <= 0x1060) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1071 && codepoint <= 0x1074) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1082) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1085 && codepoint <= 0x1086) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x108D) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x109D) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x135D && codepoint <= 0x135F) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1712 && codepoint <= 0x1714) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1732 && codepoint <= 0x1734) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1752 && codepoint <= 0x1753) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1772 && codepoint <= 0x1773) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x17B4 && codepoint <= 0x17B5) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x17B7 && codepoint <= 0x17BD) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x17C6) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x17C9 && codepoint <= 0x17D3) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x17DD) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x180B && codepoint <= 0x180D) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1885 && codepoint <= 0x1886) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x18A9) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1920 && codepoint <= 0x1922) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1927 && codepoint <= 0x1928) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1932) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1939 && codepoint <= 0x193B) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1A17 && codepoint <= 0x1A18) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1A1B) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1A56) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1A58 && codepoint <= 0x1A5E) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1A60) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1A62) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1A65 && codepoint <= 0x1A6C) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1A73 && codepoint <= 0x1A7C) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1A7F) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1AB0 && codepoint <= 0x1ABD) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1ABE) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1ABF && codepoint <= 0x1AC0) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1B00 && codepoint <= 0x1B03) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1B34) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1B35) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1B36 && codepoint <= 0x1B3A) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1B3C) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1B42) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1B6B && codepoint <= 0x1B73) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1B80 && codepoint <= 0x1B81) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1BA2 && codepoint <= 0x1BA5) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1BA8 && codepoint <= 0x1BA9) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1BAB && codepoint <= 0x1BAD) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1BE6) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1BE8 && codepoint <= 0x1BE9) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1BED) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1BEF && codepoint <= 0x1BF1) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1C2C && codepoint <= 0x1C33) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1C36 && codepoint <= 0x1C37) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1CD0 && codepoint <= 0x1CD2) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1CD4 && codepoint <= 0x1CE0) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1CE2 && codepoint <= 0x1CE8) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1CED) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1CF4) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1CF8 && codepoint <= 0x1CF9) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1DC0 && codepoint <= 0x1DF9) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1DFB && codepoint <= 0x1DFF) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x200C) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x20D0 && codepoint <= 0x20DC) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x20DD && codepoint <= 0x20E0) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x20E1) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x20E2 && codepoint <= 0x20E4) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x20E5 && codepoint <= 0x20F0) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x2CEF && codepoint <= 0x2CF1) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x2D7F) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x2DE0 && codepoint <= 0x2DFF) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x302A && codepoint <= 0x302D) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x302E && codepoint <= 0x302F) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x3099 && codepoint <= 0x309A) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0xA66F) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xA670 && codepoint <= 0xA672) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xA674 && codepoint <= 0xA67D) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xA69E && codepoint <= 0xA69F) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xA6F0 && codepoint <= 0xA6F1) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0xA802) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0xA806) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0xA80B) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xA825 && codepoint <= 0xA826) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0xA82C) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xA8C4 && codepoint <= 0xA8C5) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xA8E0 && codepoint <= 0xA8F1) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0xA8FF) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xA926 && codepoint <= 0xA92D) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xA947 && codepoint <= 0xA951) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xA980 && codepoint <= 0xA982) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0xA9B3) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xA9B6 && codepoint <= 0xA9B9) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xA9BC && codepoint <= 0xA9BD) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0xA9E5) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xAA29 && codepoint <= 0xAA2E) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xAA31 && codepoint <= 0xAA32) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xAA35 && codepoint <= 0xAA36) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0xAA43) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0xAA4C) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0xAA7C) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0xAAB0) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xAAB2 && codepoint <= 0xAAB4) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xAAB7 && codepoint <= 0xAAB8) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xAABE && codepoint <= 0xAABF) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0xAAC1) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xAAEC && codepoint <= 0xAAED) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0xAAF6) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0xABE5) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0xABE8) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0xABED) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0xFB1E) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xFE00 && codepoint <= 0xFE0F) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xFE20 && codepoint <= 0xFE2F) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xFF9E && codepoint <= 0xFF9F) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x101FD) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x102E0) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x10376 && codepoint <= 0x1037A) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x10A01 && codepoint <= 0x10A03) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x10A05 && codepoint <= 0x10A06) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x10A0C && codepoint <= 0x10A0F) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x10A38 && codepoint <= 0x10A3A) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x10A3F) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x10AE5 && codepoint <= 0x10AE6) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x10D24 && codepoint <= 0x10D27) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x10EAB && codepoint <= 0x10EAC) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x10F46 && codepoint <= 0x10F50) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x11001) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11038 && codepoint <= 0x11046) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1107F && codepoint <= 0x11081) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x110B3 && codepoint <= 0x110B6) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x110B9 && codepoint <= 0x110BA) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11100 && codepoint <= 0x11102) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11127 && codepoint <= 0x1112B) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1112D && codepoint <= 0x11134) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x11173) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11180 && codepoint <= 0x11181) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x111B6 && codepoint <= 0x111BE) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x111C9 && codepoint <= 0x111CC) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x111CF) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1122F && codepoint <= 0x11231) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x11234) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11236 && codepoint <= 0x11237) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1123E) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x112DF) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x112E3 && codepoint <= 0x112EA) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11300 && codepoint <= 0x11301) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1133B && codepoint <= 0x1133C) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1133E) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x11340) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x11357) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11366 && codepoint <= 0x1136C) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11370 && codepoint <= 0x11374) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11438 && codepoint <= 0x1143F) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11442 && codepoint <= 0x11444) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x11446) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1145E) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x114B0) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x114B3 && codepoint <= 0x114B8) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x114BA) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x114BD) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x114BF && codepoint <= 0x114C0) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x114C2 && codepoint <= 0x114C3) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x115AF) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x115B2 && codepoint <= 0x115B5) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x115BC && codepoint <= 0x115BD) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x115BF && codepoint <= 0x115C0) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x115DC && codepoint <= 0x115DD) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11633 && codepoint <= 0x1163A) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1163D) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1163F && codepoint <= 0x11640) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x116AB) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x116AD) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x116B0 && codepoint <= 0x116B5) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x116B7) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1171D && codepoint <= 0x1171F) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11722 && codepoint <= 0x11725) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11727 && codepoint <= 0x1172B) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1182F && codepoint <= 0x11837) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11839 && codepoint <= 0x1183A) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x11930) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1193B && codepoint <= 0x1193C) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1193E) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x11943) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x119D4 && codepoint <= 0x119D7) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x119DA && codepoint <= 0x119DB) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x119E0) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11A01 && codepoint <= 0x11A0A) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11A33 && codepoint <= 0x11A38) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11A3B && codepoint <= 0x11A3E) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x11A47) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11A51 && codepoint <= 0x11A56) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11A59 && codepoint <= 0x11A5B) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11A8A && codepoint <= 0x11A96) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11A98 && codepoint <= 0x11A99) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11C30 && codepoint <= 0x11C36) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11C38 && codepoint <= 0x11C3D) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x11C3F) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11C92 && codepoint <= 0x11CA7) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11CAA && codepoint <= 0x11CB0) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11CB2 && codepoint <= 0x11CB3) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11CB5 && codepoint <= 0x11CB6) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11D31 && codepoint <= 0x11D36) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x11D3A) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11D3C && codepoint <= 0x11D3D) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11D3F && codepoint <= 0x11D45) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x11D47) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11D90 && codepoint <= 0x11D91) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x11D95) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x11D97) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11EF3 && codepoint <= 0x11EF4) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x16AF0 && codepoint <= 0x16AF4) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x16B30 && codepoint <= 0x16B36) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x16F4F) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x16F8F && codepoint <= 0x16F92) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x16FE4) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1BC9D && codepoint <= 0x1BC9E) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1D165) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1D167 && codepoint <= 0x1D169) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1D16E && codepoint <= 0x1D172) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1D17B && codepoint <= 0x1D182) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1D185 && codepoint <= 0x1D18B) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1D1AA && codepoint <= 0x1D1AD) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1D242 && codepoint <= 0x1D244) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1DA00 && codepoint <= 0x1DA36) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1DA3B && codepoint <= 0x1DA6C) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1DA75) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1DA84) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1DA9B && codepoint <= 0x1DA9F) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1DAA1 && codepoint <= 0x1DAAF) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1E000 && codepoint <= 0x1E006) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1E008 && codepoint <= 0x1E018) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1E01B && codepoint <= 0x1E021) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1E023 && codepoint <= 0x1E024) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1E026 && codepoint <= 0x1E02A) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1E130 && codepoint <= 0x1E136) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1E2EC && codepoint <= 0x1E2EF) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1E8D0 && codepoint <= 0x1E8D6) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1E944 && codepoint <= 0x1E94A) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1F3FB && codepoint <= 0x1F3FF) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xE0020 && codepoint <= 0xE007F) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xE0100 && codepoint <= 0xE01EF) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1F1E6 && codepoint <= 0x1F1FF) return Unicode_Grapheme_Property_REGIONAL_INDICATOR;
	if (codepoint == 0x0903) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x093B) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x093E && codepoint <= 0x0940) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0949 && codepoint <= 0x094C) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x094E && codepoint <= 0x094F) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0982 && codepoint <= 0x0983) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x09BF && codepoint <= 0x09C0) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x09C7 && codepoint <= 0x09C8) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x09CB && codepoint <= 0x09CC) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x0A03) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0A3E && codepoint <= 0x0A40) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x0A83) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0ABE && codepoint <= 0x0AC0) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x0AC9) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0ACB && codepoint <= 0x0ACC) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0B02 && codepoint <= 0x0B03) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x0B40) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0B47 && codepoint <= 0x0B48) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0B4B && codepoint <= 0x0B4C) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x0BBF) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0BC1 && codepoint <= 0x0BC2) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0BC6 && codepoint <= 0x0BC8) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0BCA && codepoint <= 0x0BCC) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0C01 && codepoint <= 0x0C03) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0C41 && codepoint <= 0x0C44) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0C82 && codepoint <= 0x0C83) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x0CBE) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0CC0 && codepoint <= 0x0CC1) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0CC3 && codepoint <= 0x0CC4) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0CC7 && codepoint <= 0x0CC8) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0CCA && codepoint <= 0x0CCB) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0D02 && codepoint <= 0x0D03) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0D3F && codepoint <= 0x0D40) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0D46 && codepoint <= 0x0D48) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0D4A && codepoint <= 0x0D4C) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0D82 && codepoint <= 0x0D83) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0DD0 && codepoint <= 0x0DD1) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0DD8 && codepoint <= 0x0DDE) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0DF2 && codepoint <= 0x0DF3) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x0E33) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x0EB3) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0F3E && codepoint <= 0x0F3F) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x0F7F) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x1031) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x103B && codepoint <= 0x103C) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x1056 && codepoint <= 0x1057) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x1084) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x17B6) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x17BE && codepoint <= 0x17C5) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x17C7 && codepoint <= 0x17C8) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x1923 && codepoint <= 0x1926) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x1929 && codepoint <= 0x192B) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x1930 && codepoint <= 0x1931) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x1933 && codepoint <= 0x1938) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x1A19 && codepoint <= 0x1A1A) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x1A55) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x1A57) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x1A6D && codepoint <= 0x1A72) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x1B04) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x1B3B) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x1B3D && codepoint <= 0x1B41) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x1B43 && codepoint <= 0x1B44) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x1B82) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x1BA1) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x1BA6 && codepoint <= 0x1BA7) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x1BAA) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x1BE7) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x1BEA && codepoint <= 0x1BEC) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x1BEE) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x1BF2 && codepoint <= 0x1BF3) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x1C24 && codepoint <= 0x1C2B) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x1C34 && codepoint <= 0x1C35) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x1CE1) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x1CF7) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0xA823 && codepoint <= 0xA824) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0xA827) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0xA880 && codepoint <= 0xA881) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0xA8B4 && codepoint <= 0xA8C3) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0xA952 && codepoint <= 0xA953) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0xA983) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0xA9B4 && codepoint <= 0xA9B5) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0xA9BA && codepoint <= 0xA9BB) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0xA9BE && codepoint <= 0xA9C0) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0xAA2F && codepoint <= 0xAA30) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0xAA33 && codepoint <= 0xAA34) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0xAA4D) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0xAAEB) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0xAAEE && codepoint <= 0xAAEF) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0xAAF5) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0xABE3 && codepoint <= 0xABE4) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0xABE6 && codepoint <= 0xABE7) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0xABE9 && codepoint <= 0xABEA) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0xABEC) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x11000) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x11002) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x11082) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x110B0 && codepoint <= 0x110B2) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x110B7 && codepoint <= 0x110B8) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x1112C) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x11145 && codepoint <= 0x11146) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x11182) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x111B3 && codepoint <= 0x111B5) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x111BF && codepoint <= 0x111C0) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x111CE) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x1122C && codepoint <= 0x1122E) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x11232 && codepoint <= 0x11233) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x11235) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x112E0 && codepoint <= 0x112E2) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x11302 && codepoint <= 0x11303) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x1133F) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x11341 && codepoint <= 0x11344) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x11347 && codepoint <= 0x11348) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x1134B && codepoint <= 0x1134D) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x11362 && codepoint <= 0x11363) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x11435 && codepoint <= 0x11437) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x11440 && codepoint <= 0x11441) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x11445) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x114B1 && codepoint <= 0x114B2) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x114B9) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x114BB && codepoint <= 0x114BC) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x114BE) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x114C1) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x115B0 && codepoint <= 0x115B1) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x115B8 && codepoint <= 0x115BB) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x115BE) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x11630 && codepoint <= 0x11632) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x1163B && codepoint <= 0x1163C) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x1163E) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x116AC) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x116AE && codepoint <= 0x116AF) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x116B6) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x11720 && codepoint <= 0x11721) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x11726) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x1182C && codepoint <= 0x1182E) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x11838) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x11931 && codepoint <= 0x11935) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x11937 && codepoint <= 0x11938) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x1193D) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x11940) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x11942) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x119D1 && codepoint <= 0x119D3) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x119DC && codepoint <= 0x119DF) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x119E4) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x11A39) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x11A57 && codepoint <= 0x11A58) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x11A97) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x11C2F) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x11C3E) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x11CA9) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x11CB1) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x11CB4) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x11D8A && codepoint <= 0x11D8E) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x11D93 && codepoint <= 0x11D94) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x11D96) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x11EF5 && codepoint <= 0x11EF6) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x16F51 && codepoint <= 0x16F87) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x16FF0 && codepoint <= 0x16FF1) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x1D166) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x1D16D) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x1100 && codepoint <= 0x115F) return Unicode_Grapheme_Property_L;
	if (codepoint >= 0xA960 && codepoint <= 0xA97C) return Unicode_Grapheme_Property_L;
	if (codepoint >= 0x1160 && codepoint <= 0x11A7) return Unicode_Grapheme_Property_V;
	if (codepoint >= 0xD7B0 && codepoint <= 0xD7C6) return Unicode_Grapheme_Property_V;
	if (codepoint >= 0x11A8 && codepoint <= 0x11FF) return Unicode_Grapheme_Property_T;
	if (codepoint >= 0xD7CB && codepoint <= 0xD7FB) return Unicode_Grapheme_Property_T;
	if (codepoint == 0xAC00) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAC1C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAC38) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAC54) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAC70) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAC8C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xACA8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xACC4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xACE0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xACFC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAD18) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAD34) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAD50) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAD6C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAD88) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xADA4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xADC0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xADDC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xADF8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAE14) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAE30) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAE4C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAE68) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAE84) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAEA0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAEBC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAED8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAEF4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAF10) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAF2C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAF48) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAF64) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAF80) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAF9C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAFB8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAFD4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAFF0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB00C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB028) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB044) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB060) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB07C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB098) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB0B4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB0D0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB0EC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB108) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB124) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB140) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB15C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB178) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB194) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB1B0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB1CC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB1E8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB204) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB220) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB23C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB258) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB274) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB290) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB2AC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB2C8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB2E4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB300) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB31C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB338) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB354) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB370) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB38C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB3A8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB3C4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB3E0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB3FC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB418) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB434) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB450) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB46C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB488) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB4A4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB4C0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB4DC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB4F8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB514) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB530) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB54C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB568) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB584) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB5A0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB5BC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB5D8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB5F4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB610) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB62C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB648) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB664) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB680) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB69C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB6B8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB6D4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB6F0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB70C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB728) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB744) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB760) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB77C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB798) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB7B4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB7D0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB7EC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB808) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB824) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB840) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB85C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB878) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB894) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB8B0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB8CC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB8E8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB904) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB920) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB93C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB958) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB974) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB990) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB9AC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB9C8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB9E4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBA00) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBA1C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBA38) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBA54) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBA70) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBA8C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBAA8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBAC4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBAE0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBAFC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBB18) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBB34) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBB50) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBB6C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBB88) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBBA4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBBC0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBBDC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBBF8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBC14) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBC30) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBC4C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBC68) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBC84) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBCA0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBCBC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBCD8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBCF4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBD10) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBD2C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBD48) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBD64) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBD80) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBD9C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBDB8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBDD4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBDF0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBE0C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBE28) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBE44) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBE60) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBE7C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBE98) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBEB4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBED0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBEEC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBF08) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBF24) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBF40) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBF5C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBF78) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBF94) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBFB0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBFCC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBFE8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC004) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC020) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC03C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC058) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC074) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC090) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC0AC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC0C8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC0E4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC100) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC11C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC138) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC154) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC170) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC18C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC1A8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC1C4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC1E0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC1FC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC218) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC234) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC250) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC26C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC288) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC2A4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC2C0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC2DC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC2F8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC314) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC330) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC34C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC368) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC384) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC3A0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC3BC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC3D8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC3F4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC410) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC42C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC448) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC464) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC480) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC49C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC4B8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC4D4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC4F0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC50C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC528) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC544) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC560) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC57C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC598) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC5B4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC5D0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC5EC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC608) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC624) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC640) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC65C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC678) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC694) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC6B0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC6CC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC6E8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC704) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC720) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC73C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC758) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC774) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC790) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC7AC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC7C8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC7E4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC800) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC81C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC838) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC854) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC870) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC88C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC8A8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC8C4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC8E0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC8FC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC918) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC934) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC950) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC96C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC988) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC9A4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC9C0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC9DC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC9F8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCA14) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCA30) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCA4C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCA68) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCA84) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCAA0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCABC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCAD8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCAF4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCB10) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCB2C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCB48) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCB64) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCB80) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCB9C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCBB8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCBD4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCBF0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCC0C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCC28) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCC44) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCC60) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCC7C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCC98) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCCB4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCCD0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCCEC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCD08) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCD24) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCD40) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCD5C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCD78) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCD94) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCDB0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCDCC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCDE8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCE04) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCE20) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCE3C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCE58) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCE74) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCE90) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCEAC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCEC8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCEE4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCF00) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCF1C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCF38) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCF54) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCF70) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCF8C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCFA8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCFC4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCFE0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCFFC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD018) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD034) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD050) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD06C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD088) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD0A4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD0C0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD0DC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD0F8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD114) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD130) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD14C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD168) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD184) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD1A0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD1BC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD1D8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD1F4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD210) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD22C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD248) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD264) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD280) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD29C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD2B8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD2D4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD2F0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD30C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD328) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD344) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD360) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD37C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD398) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD3B4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD3D0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD3EC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD408) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD424) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD440) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD45C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD478) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD494) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD4B0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD4CC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD4E8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD504) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD520) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD53C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD558) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD574) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD590) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD5AC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD5C8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD5E4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD600) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD61C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD638) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD654) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD670) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD68C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD6A8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD6C4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD6E0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD6FC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD718) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD734) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD750) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD76C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD788) return Unicode_Grapheme_Property_LV;
	if (codepoint >= 0xAC01 && codepoint <= 0xAC1B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAC1D && codepoint <= 0xAC37) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAC39 && codepoint <= 0xAC53) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAC55 && codepoint <= 0xAC6F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAC71 && codepoint <= 0xAC8B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAC8D && codepoint <= 0xACA7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xACA9 && codepoint <= 0xACC3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xACC5 && codepoint <= 0xACDF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xACE1 && codepoint <= 0xACFB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xACFD && codepoint <= 0xAD17) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAD19 && codepoint <= 0xAD33) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAD35 && codepoint <= 0xAD4F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAD51 && codepoint <= 0xAD6B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAD6D && codepoint <= 0xAD87) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAD89 && codepoint <= 0xADA3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xADA5 && codepoint <= 0xADBF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xADC1 && codepoint <= 0xADDB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xADDD && codepoint <= 0xADF7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xADF9 && codepoint <= 0xAE13) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAE15 && codepoint <= 0xAE2F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAE31 && codepoint <= 0xAE4B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAE4D && codepoint <= 0xAE67) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAE69 && codepoint <= 0xAE83) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAE85 && codepoint <= 0xAE9F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAEA1 && codepoint <= 0xAEBB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAEBD && codepoint <= 0xAED7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAED9 && codepoint <= 0xAEF3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAEF5 && codepoint <= 0xAF0F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAF11 && codepoint <= 0xAF2B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAF2D && codepoint <= 0xAF47) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAF49 && codepoint <= 0xAF63) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAF65 && codepoint <= 0xAF7F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAF81 && codepoint <= 0xAF9B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAF9D && codepoint <= 0xAFB7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAFB9 && codepoint <= 0xAFD3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAFD5 && codepoint <= 0xAFEF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAFF1 && codepoint <= 0xB00B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB00D && codepoint <= 0xB027) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB029 && codepoint <= 0xB043) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB045 && codepoint <= 0xB05F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB061 && codepoint <= 0xB07B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB07D && codepoint <= 0xB097) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB099 && codepoint <= 0xB0B3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB0B5 && codepoint <= 0xB0CF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB0D1 && codepoint <= 0xB0EB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB0ED && codepoint <= 0xB107) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB109 && codepoint <= 0xB123) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB125 && codepoint <= 0xB13F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB141 && codepoint <= 0xB15B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB15D && codepoint <= 0xB177) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB179 && codepoint <= 0xB193) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB195 && codepoint <= 0xB1AF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB1B1 && codepoint <= 0xB1CB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB1CD && codepoint <= 0xB1E7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB1E9 && codepoint <= 0xB203) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB205 && codepoint <= 0xB21F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB221 && codepoint <= 0xB23B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB23D && codepoint <= 0xB257) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB259 && codepoint <= 0xB273) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB275 && codepoint <= 0xB28F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB291 && codepoint <= 0xB2AB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB2AD && codepoint <= 0xB2C7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB2C9 && codepoint <= 0xB2E3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB2E5 && codepoint <= 0xB2FF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB301 && codepoint <= 0xB31B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB31D && codepoint <= 0xB337) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB339 && codepoint <= 0xB353) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB355 && codepoint <= 0xB36F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB371 && codepoint <= 0xB38B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB38D && codepoint <= 0xB3A7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB3A9 && codepoint <= 0xB3C3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB3C5 && codepoint <= 0xB3DF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB3E1 && codepoint <= 0xB3FB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB3FD && codepoint <= 0xB417) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB419 && codepoint <= 0xB433) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB435 && codepoint <= 0xB44F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB451 && codepoint <= 0xB46B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB46D && codepoint <= 0xB487) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB489 && codepoint <= 0xB4A3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB4A5 && codepoint <= 0xB4BF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB4C1 && codepoint <= 0xB4DB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB4DD && codepoint <= 0xB4F7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB4F9 && codepoint <= 0xB513) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB515 && codepoint <= 0xB52F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB531 && codepoint <= 0xB54B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB54D && codepoint <= 0xB567) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB569 && codepoint <= 0xB583) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB585 && codepoint <= 0xB59F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB5A1 && codepoint <= 0xB5BB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB5BD && codepoint <= 0xB5D7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB5D9 && codepoint <= 0xB5F3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB5F5 && codepoint <= 0xB60F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB611 && codepoint <= 0xB62B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB62D && codepoint <= 0xB647) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB649 && codepoint <= 0xB663) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB665 && codepoint <= 0xB67F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB681 && codepoint <= 0xB69B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB69D && codepoint <= 0xB6B7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB6B9 && codepoint <= 0xB6D3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB6D5 && codepoint <= 0xB6EF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB6F1 && codepoint <= 0xB70B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB70D && codepoint <= 0xB727) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB729 && codepoint <= 0xB743) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB745 && codepoint <= 0xB75F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB761 && codepoint <= 0xB77B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB77D && codepoint <= 0xB797) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB799 && codepoint <= 0xB7B3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB7B5 && codepoint <= 0xB7CF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB7D1 && codepoint <= 0xB7EB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB7ED && codepoint <= 0xB807) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB809 && codepoint <= 0xB823) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB825 && codepoint <= 0xB83F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB841 && codepoint <= 0xB85B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB85D && codepoint <= 0xB877) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB879 && codepoint <= 0xB893) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB895 && codepoint <= 0xB8AF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB8B1 && codepoint <= 0xB8CB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB8CD && codepoint <= 0xB8E7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB8E9 && codepoint <= 0xB903) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB905 && codepoint <= 0xB91F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB921 && codepoint <= 0xB93B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB93D && codepoint <= 0xB957) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB959 && codepoint <= 0xB973) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB975 && codepoint <= 0xB98F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB991 && codepoint <= 0xB9AB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB9AD && codepoint <= 0xB9C7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB9C9 && codepoint <= 0xB9E3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB9E5 && codepoint <= 0xB9FF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBA01 && codepoint <= 0xBA1B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBA1D && codepoint <= 0xBA37) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBA39 && codepoint <= 0xBA53) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBA55 && codepoint <= 0xBA6F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBA71 && codepoint <= 0xBA8B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBA8D && codepoint <= 0xBAA7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBAA9 && codepoint <= 0xBAC3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBAC5 && codepoint <= 0xBADF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBAE1 && codepoint <= 0xBAFB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBAFD && codepoint <= 0xBB17) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBB19 && codepoint <= 0xBB33) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBB35 && codepoint <= 0xBB4F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBB51 && codepoint <= 0xBB6B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBB6D && codepoint <= 0xBB87) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBB89 && codepoint <= 0xBBA3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBBA5 && codepoint <= 0xBBBF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBBC1 && codepoint <= 0xBBDB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBBDD && codepoint <= 0xBBF7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBBF9 && codepoint <= 0xBC13) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBC15 && codepoint <= 0xBC2F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBC31 && codepoint <= 0xBC4B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBC4D && codepoint <= 0xBC67) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBC69 && codepoint <= 0xBC83) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBC85 && codepoint <= 0xBC9F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBCA1 && codepoint <= 0xBCBB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBCBD && codepoint <= 0xBCD7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBCD9 && codepoint <= 0xBCF3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBCF5 && codepoint <= 0xBD0F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBD11 && codepoint <= 0xBD2B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBD2D && codepoint <= 0xBD47) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBD49 && codepoint <= 0xBD63) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBD65 && codepoint <= 0xBD7F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBD81 && codepoint <= 0xBD9B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBD9D && codepoint <= 0xBDB7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBDB9 && codepoint <= 0xBDD3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBDD5 && codepoint <= 0xBDEF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBDF1 && codepoint <= 0xBE0B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBE0D && codepoint <= 0xBE27) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBE29 && codepoint <= 0xBE43) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBE45 && codepoint <= 0xBE5F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBE61 && codepoint <= 0xBE7B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBE7D && codepoint <= 0xBE97) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBE99 && codepoint <= 0xBEB3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBEB5 && codepoint <= 0xBECF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBED1 && codepoint <= 0xBEEB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBEED && codepoint <= 0xBF07) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBF09 && codepoint <= 0xBF23) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBF25 && codepoint <= 0xBF3F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBF41 && codepoint <= 0xBF5B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBF5D && codepoint <= 0xBF77) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBF79 && codepoint <= 0xBF93) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBF95 && codepoint <= 0xBFAF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBFB1 && codepoint <= 0xBFCB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBFCD && codepoint <= 0xBFE7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBFE9 && codepoint <= 0xC003) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC005 && codepoint <= 0xC01F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC021 && codepoint <= 0xC03B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC03D && codepoint <= 0xC057) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC059 && codepoint <= 0xC073) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC075 && codepoint <= 0xC08F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC091 && codepoint <= 0xC0AB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC0AD && codepoint <= 0xC0C7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC0C9 && codepoint <= 0xC0E3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC0E5 && codepoint <= 0xC0FF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC101 && codepoint <= 0xC11B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC11D && codepoint <= 0xC137) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC139 && codepoint <= 0xC153) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC155 && codepoint <= 0xC16F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC171 && codepoint <= 0xC18B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC18D && codepoint <= 0xC1A7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC1A9 && codepoint <= 0xC1C3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC1C5 && codepoint <= 0xC1DF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC1E1 && codepoint <= 0xC1FB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC1FD && codepoint <= 0xC217) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC219 && codepoint <= 0xC233) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC235 && codepoint <= 0xC24F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC251 && codepoint <= 0xC26B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC26D && codepoint <= 0xC287) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC289 && codepoint <= 0xC2A3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC2A5 && codepoint <= 0xC2BF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC2C1 && codepoint <= 0xC2DB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC2DD && codepoint <= 0xC2F7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC2F9 && codepoint <= 0xC313) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC315 && codepoint <= 0xC32F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC331 && codepoint <= 0xC34B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC34D && codepoint <= 0xC367) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC369 && codepoint <= 0xC383) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC385 && codepoint <= 0xC39F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC3A1 && codepoint <= 0xC3BB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC3BD && codepoint <= 0xC3D7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC3D9 && codepoint <= 0xC3F3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC3F5 && codepoint <= 0xC40F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC411 && codepoint <= 0xC42B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC42D && codepoint <= 0xC447) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC449 && codepoint <= 0xC463) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC465 && codepoint <= 0xC47F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC481 && codepoint <= 0xC49B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC49D && codepoint <= 0xC4B7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC4B9 && codepoint <= 0xC4D3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC4D5 && codepoint <= 0xC4EF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC4F1 && codepoint <= 0xC50B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC50D && codepoint <= 0xC527) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC529 && codepoint <= 0xC543) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC545 && codepoint <= 0xC55F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC561 && codepoint <= 0xC57B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC57D && codepoint <= 0xC597) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC599 && codepoint <= 0xC5B3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC5B5 && codepoint <= 0xC5CF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC5D1 && codepoint <= 0xC5EB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC5ED && codepoint <= 0xC607) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC609 && codepoint <= 0xC623) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC625 && codepoint <= 0xC63F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC641 && codepoint <= 0xC65B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC65D && codepoint <= 0xC677) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC679 && codepoint <= 0xC693) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC695 && codepoint <= 0xC6AF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC6B1 && codepoint <= 0xC6CB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC6CD && codepoint <= 0xC6E7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC6E9 && codepoint <= 0xC703) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC705 && codepoint <= 0xC71F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC721 && codepoint <= 0xC73B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC73D && codepoint <= 0xC757) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC759 && codepoint <= 0xC773) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC775 && codepoint <= 0xC78F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC791 && codepoint <= 0xC7AB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC7AD && codepoint <= 0xC7C7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC7C9 && codepoint <= 0xC7E3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC7E5 && codepoint <= 0xC7FF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC801 && codepoint <= 0xC81B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC81D && codepoint <= 0xC837) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC839 && codepoint <= 0xC853) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC855 && codepoint <= 0xC86F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC871 && codepoint <= 0xC88B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC88D && codepoint <= 0xC8A7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC8A9 && codepoint <= 0xC8C3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC8C5 && codepoint <= 0xC8DF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC8E1 && codepoint <= 0xC8FB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC8FD && codepoint <= 0xC917) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC919 && codepoint <= 0xC933) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC935 && codepoint <= 0xC94F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC951 && codepoint <= 0xC96B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC96D && codepoint <= 0xC987) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC989 && codepoint <= 0xC9A3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC9A5 && codepoint <= 0xC9BF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC9C1 && codepoint <= 0xC9DB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC9DD && codepoint <= 0xC9F7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC9F9 && codepoint <= 0xCA13) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCA15 && codepoint <= 0xCA2F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCA31 && codepoint <= 0xCA4B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCA4D && codepoint <= 0xCA67) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCA69 && codepoint <= 0xCA83) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCA85 && codepoint <= 0xCA9F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCAA1 && codepoint <= 0xCABB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCABD && codepoint <= 0xCAD7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCAD9 && codepoint <= 0xCAF3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCAF5 && codepoint <= 0xCB0F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCB11 && codepoint <= 0xCB2B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCB2D && codepoint <= 0xCB47) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCB49 && codepoint <= 0xCB63) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCB65 && codepoint <= 0xCB7F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCB81 && codepoint <= 0xCB9B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCB9D && codepoint <= 0xCBB7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCBB9 && codepoint <= 0xCBD3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCBD5 && codepoint <= 0xCBEF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCBF1 && codepoint <= 0xCC0B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCC0D && codepoint <= 0xCC27) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCC29 && codepoint <= 0xCC43) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCC45 && codepoint <= 0xCC5F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCC61 && codepoint <= 0xCC7B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCC7D && codepoint <= 0xCC97) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCC99 && codepoint <= 0xCCB3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCCB5 && codepoint <= 0xCCCF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCCD1 && codepoint <= 0xCCEB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCCED && codepoint <= 0xCD07) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCD09 && codepoint <= 0xCD23) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCD25 && codepoint <= 0xCD3F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCD41 && codepoint <= 0xCD5B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCD5D && codepoint <= 0xCD77) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCD79 && codepoint <= 0xCD93) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCD95 && codepoint <= 0xCDAF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCDB1 && codepoint <= 0xCDCB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCDCD && codepoint <= 0xCDE7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCDE9 && codepoint <= 0xCE03) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCE05 && codepoint <= 0xCE1F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCE21 && codepoint <= 0xCE3B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCE3D && codepoint <= 0xCE57) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCE59 && codepoint <= 0xCE73) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCE75 && codepoint <= 0xCE8F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCE91 && codepoint <= 0xCEAB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCEAD && codepoint <= 0xCEC7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCEC9 && codepoint <= 0xCEE3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCEE5 && codepoint <= 0xCEFF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCF01 && codepoint <= 0xCF1B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCF1D && codepoint <= 0xCF37) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCF39 && codepoint <= 0xCF53) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCF55 && codepoint <= 0xCF6F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCF71 && codepoint <= 0xCF8B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCF8D && codepoint <= 0xCFA7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCFA9 && codepoint <= 0xCFC3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCFC5 && codepoint <= 0xCFDF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCFE1 && codepoint <= 0xCFFB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCFFD && codepoint <= 0xD017) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD019 && codepoint <= 0xD033) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD035 && codepoint <= 0xD04F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD051 && codepoint <= 0xD06B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD06D && codepoint <= 0xD087) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD089 && codepoint <= 0xD0A3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD0A5 && codepoint <= 0xD0BF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD0C1 && codepoint <= 0xD0DB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD0DD && codepoint <= 0xD0F7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD0F9 && codepoint <= 0xD113) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD115 && codepoint <= 0xD12F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD131 && codepoint <= 0xD14B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD14D && codepoint <= 0xD167) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD169 && codepoint <= 0xD183) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD185 && codepoint <= 0xD19F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD1A1 && codepoint <= 0xD1BB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD1BD && codepoint <= 0xD1D7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD1D9 && codepoint <= 0xD1F3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD1F5 && codepoint <= 0xD20F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD211 && codepoint <= 0xD22B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD22D && codepoint <= 0xD247) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD249 && codepoint <= 0xD263) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD265 && codepoint <= 0xD27F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD281 && codepoint <= 0xD29B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD29D && codepoint <= 0xD2B7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD2B9 && codepoint <= 0xD2D3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD2D5 && codepoint <= 0xD2EF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD2F1 && codepoint <= 0xD30B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD30D && codepoint <= 0xD327) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD329 && codepoint <= 0xD343) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD345 && codepoint <= 0xD35F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD361 && codepoint <= 0xD37B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD37D && codepoint <= 0xD397) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD399 && codepoint <= 0xD3B3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD3B5 && codepoint <= 0xD3CF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD3D1 && codepoint <= 0xD3EB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD3ED && codepoint <= 0xD407) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD409 && codepoint <= 0xD423) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD425 && codepoint <= 0xD43F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD441 && codepoint <= 0xD45B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD45D && codepoint <= 0xD477) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD479 && codepoint <= 0xD493) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD495 && codepoint <= 0xD4AF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD4B1 && codepoint <= 0xD4CB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD4CD && codepoint <= 0xD4E7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD4E9 && codepoint <= 0xD503) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD505 && codepoint <= 0xD51F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD521 && codepoint <= 0xD53B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD53D && codepoint <= 0xD557) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD559 && codepoint <= 0xD573) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD575 && codepoint <= 0xD58F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD591 && codepoint <= 0xD5AB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD5AD && codepoint <= 0xD5C7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD5C9 && codepoint <= 0xD5E3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD5E5 && codepoint <= 0xD5FF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD601 && codepoint <= 0xD61B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD61D && codepoint <= 0xD637) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD639 && codepoint <= 0xD653) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD655 && codepoint <= 0xD66F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD671 && codepoint <= 0xD68B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD68D && codepoint <= 0xD6A7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD6A9 && codepoint <= 0xD6C3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD6C5 && codepoint <= 0xD6DF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD6E1 && codepoint <= 0xD6FB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD6FD && codepoint <= 0xD717) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD719 && codepoint <= 0xD733) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD735 && codepoint <= 0xD74F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD751 && codepoint <= 0xD76B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD76D && codepoint <= 0xD787) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD789 && codepoint <= 0xD7A3) return Unicode_Grapheme_Property_LVT;
	if (codepoint == 0x200D) return Unicode_Grapheme_Property_ZWJ;

	return Unicode_Grapheme_Property_UNKNOWN;
}

int unicode_normalize(uint32_t codepoint, uint32_t **normals) {
	static uint32_t no_break_space [] = { 0x0020 };
	static uint32_t diaeresis [] = { 0x0020, 0x0308 };
	static uint32_t feminine_ordinal_indicator [] = { 0x0061 };
	static uint32_t macron [] = { 0x0020, 0x0304 };
	static uint32_t superscript_two [] = { 0x0032 };
	static uint32_t superscript_three [] = { 0x0033 };
	static uint32_t acute_accent [] = { 0x0020, 0x0301 };
	static uint32_t micro_sign [] = { 0x03BC };
	static uint32_t cedilla [] = { 0x0020, 0x0327 };
	static uint32_t superscript_one [] = { 0x0031 };
	static uint32_t masculine_ordinal_indicator [] = { 0x006F };
	static uint32_t vulgar_fraction_one_quarter [] = { 0x0031, 0x2044, 0x0034 };
	static uint32_t vulgar_fraction_one_half [] = { 0x0031, 0x2044, 0x0032 };
	static uint32_t vulgar_fraction_three_quarters [] = { 0x0033, 0x2044, 0x0034 };
	static uint32_t latin_capital_letter_a_with_grave [] = { 0x0041, 0x0300 };
	static uint32_t latin_capital_letter_a_with_acute [] = { 0x0041, 0x0301 };
	static uint32_t latin_capital_letter_a_with_circumflex [] = { 0x0041, 0x0302 };
	static uint32_t latin_capital_letter_a_with_tilde [] = { 0x0041, 0x0303 };
	static uint32_t latin_capital_letter_a_with_diaeresis [] = { 0x0041, 0x0308 };
	static uint32_t latin_capital_letter_a_with_ring_above [] = { 0x0041, 0x030A };
	static uint32_t latin_capital_letter_c_with_cedilla [] = { 0x0043, 0x0327 };
	static uint32_t latin_capital_letter_e_with_grave [] = { 0x0045, 0x0300 };
	static uint32_t latin_capital_letter_e_with_acute [] = { 0x0045, 0x0301 };
	static uint32_t latin_capital_letter_e_with_circumflex [] = { 0x0045, 0x0302 };
	static uint32_t latin_capital_letter_e_with_diaeresis [] = { 0x0045, 0x0308 };
	static uint32_t latin_capital_letter_i_with_grave [] = { 0x0049, 0x0300 };
	static uint32_t latin_capital_letter_i_with_acute [] = { 0x0049, 0x0301 };
	static uint32_t latin_capital_letter_i_with_circumflex [] = { 0x0049, 0x0302 };
	static uint32_t latin_capital_letter_i_with_diaeresis [] = { 0x0049, 0x0308 };
	static uint32_t latin_capital_letter_n_with_tilde [] = { 0x004E, 0x0303 };
	static uint32_t latin_capital_letter_o_with_grave [] = { 0x004F, 0x0300 };
	static uint32_t latin_capital_letter_o_with_acute [] = { 0x004F, 0x0301 };
	static uint32_t latin_capital_letter_o_with_circumflex [] = { 0x004F, 0x0302 };
	static uint32_t latin_capital_letter_o_with_tilde [] = { 0x004F, 0x0303 };
	static uint32_t latin_capital_letter_o_with_diaeresis [] = { 0x004F, 0x0308 };
	static uint32_t latin_capital_letter_u_with_grave [] = { 0x0055, 0x0300 };
	static uint32_t latin_capital_letter_u_with_acute [] = { 0x0055, 0x0301 };
	static uint32_t latin_capital_letter_u_with_circumflex [] = { 0x0055, 0x0302 };
	static uint32_t latin_capital_letter_u_with_diaeresis [] = { 0x0055, 0x0308 };
	static uint32_t latin_capital_letter_y_with_acute [] = { 0x0059, 0x0301 };
	static uint32_t latin_small_letter_a_with_grave [] = { 0x0061, 0x0300 };
	static uint32_t latin_small_letter_a_with_acute [] = { 0x0061, 0x0301 };
	static uint32_t latin_small_letter_a_with_circumflex [] = { 0x0061, 0x0302 };
	static uint32_t latin_small_letter_a_with_tilde [] = { 0x0061, 0x0303 };
	static uint32_t latin_small_letter_a_with_diaeresis [] = { 0x0061, 0x0308 };
	static uint32_t latin_small_letter_a_with_ring_above [] = { 0x0061, 0x030A };
	static uint32_t latin_small_letter_c_with_cedilla [] = { 0x0063, 0x0327 };
	static uint32_t latin_small_letter_e_with_grave [] = { 0x0065, 0x0300 };
	static uint32_t latin_small_letter_e_with_acute [] = { 0x0065, 0x0301 };
	static uint32_t latin_small_letter_e_with_circumflex [] = { 0x0065, 0x0302 };
	static uint32_t latin_small_letter_e_with_diaeresis [] = { 0x0065, 0x0308 };
	static uint32_t latin_small_letter_i_with_grave [] = { 0x0069, 0x0300 };
	static uint32_t latin_small_letter_i_with_acute [] = { 0x0069, 0x0301 };
	static uint32_t latin_small_letter_i_with_circumflex [] = { 0x0069, 0x0302 };
	static uint32_t latin_small_letter_i_with_diaeresis [] = { 0x0069, 0x0308 };
	static uint32_t latin_small_letter_n_with_tilde [] = { 0x006E, 0x0303 };
	static uint32_t latin_small_letter_o_with_grave [] = { 0x006F, 0x0300 };
	static uint32_t latin_small_letter_o_with_acute [] = { 0x006F, 0x0301 };
	static uint32_t latin_small_letter_o_with_circumflex [] = { 0x006F, 0x0302 };
	static uint32_t latin_small_letter_o_with_tilde [] = { 0x006F, 0x0303 };
	static uint32_t latin_small_letter_o_with_diaeresis [] = { 0x006F, 0x0308 };
	static uint32_t latin_small_letter_u_with_grave [] = { 0x0075, 0x0300 };
	static uint32_t latin_small_letter_u_with_acute [] = { 0x0075, 0x0301 };
	static uint32_t latin_small_letter_u_with_circumflex [] = { 0x0075, 0x0302 };
	static uint32_t latin_small_letter_u_with_diaeresis [] = { 0x0075, 0x0308 };
	static uint32_t latin_small_letter_y_with_acute [] = { 0x0079, 0x0301 };
	static uint32_t latin_small_letter_y_with_diaeresis [] = { 0x0079, 0x0308 };
	static uint32_t latin_capital_letter_a_with_macron [] = { 0x0041, 0x0304 };
	static uint32_t latin_small_letter_a_with_macron [] = { 0x0061, 0x0304 };
	static uint32_t latin_capital_letter_a_with_breve [] = { 0x0041, 0x0306 };
	static uint32_t latin_small_letter_a_with_breve [] = { 0x0061, 0x0306 };
	static uint32_t latin_capital_letter_a_with_ogonek [] = { 0x0041, 0x0328 };
	static uint32_t latin_small_letter_a_with_ogonek [] = { 0x0061, 0x0328 };
	static uint32_t latin_capital_letter_c_with_acute [] = { 0x0043, 0x0301 };
	static uint32_t latin_small_letter_c_with_acute [] = { 0x0063, 0x0301 };
	static uint32_t latin_capital_letter_c_with_circumflex [] = { 0x0043, 0x0302 };
	static uint32_t latin_small_letter_c_with_circumflex [] = { 0x0063, 0x0302 };
	static uint32_t latin_capital_letter_c_with_dot_above [] = { 0x0043, 0x0307 };
	static uint32_t latin_small_letter_c_with_dot_above [] = { 0x0063, 0x0307 };
	static uint32_t latin_capital_letter_c_with_caron [] = { 0x0043, 0x030C };
	static uint32_t latin_small_letter_c_with_caron [] = { 0x0063, 0x030C };
	static uint32_t latin_capital_letter_d_with_caron [] = { 0x0044, 0x030C };
	static uint32_t latin_small_letter_d_with_caron [] = { 0x0064, 0x030C };
	static uint32_t latin_capital_letter_e_with_macron [] = { 0x0045, 0x0304 };
	static uint32_t latin_small_letter_e_with_macron [] = { 0x0065, 0x0304 };
	static uint32_t latin_capital_letter_e_with_breve [] = { 0x0045, 0x0306 };
	static uint32_t latin_small_letter_e_with_breve [] = { 0x0065, 0x0306 };
	static uint32_t latin_capital_letter_e_with_dot_above [] = { 0x0045, 0x0307 };
	static uint32_t latin_small_letter_e_with_dot_above [] = { 0x0065, 0x0307 };
	static uint32_t latin_capital_letter_e_with_ogonek [] = { 0x0045, 0x0328 };
	static uint32_t latin_small_letter_e_with_ogonek [] = { 0x0065, 0x0328 };
	static uint32_t latin_capital_letter_e_with_caron [] = { 0x0045, 0x030C };
	static uint32_t latin_small_letter_e_with_caron [] = { 0x0065, 0x030C };
	static uint32_t latin_capital_letter_g_with_circumflex [] = { 0x0047, 0x0302 };
	static uint32_t latin_small_letter_g_with_circumflex [] = { 0x0067, 0x0302 };
	static uint32_t latin_capital_letter_g_with_breve [] = { 0x0047, 0x0306 };
	static uint32_t latin_small_letter_g_with_breve [] = { 0x0067, 0x0306 };
	static uint32_t latin_capital_letter_g_with_dot_above [] = { 0x0047, 0x0307 };
	static uint32_t latin_small_letter_g_with_dot_above [] = { 0x0067, 0x0307 };
	static uint32_t latin_capital_letter_g_with_cedilla [] = { 0x0047, 0x0327 };
	static uint32_t latin_small_letter_g_with_cedilla [] = { 0x0067, 0x0327 };
	static uint32_t latin_capital_letter_h_with_circumflex [] = { 0x0048, 0x0302 };
	static uint32_t latin_small_letter_h_with_circumflex [] = { 0x0068, 0x0302 };
	static uint32_t latin_capital_letter_i_with_tilde [] = { 0x0049, 0x0303 };
	static uint32_t latin_small_letter_i_with_tilde [] = { 0x0069, 0x0303 };
	static uint32_t latin_capital_letter_i_with_macron [] = { 0x0049, 0x0304 };
	static uint32_t latin_small_letter_i_with_macron [] = { 0x0069, 0x0304 };
	static uint32_t latin_capital_letter_i_with_breve [] = { 0x0049, 0x0306 };
	static uint32_t latin_small_letter_i_with_breve [] = { 0x0069, 0x0306 };
	static uint32_t latin_capital_letter_i_with_ogonek [] = { 0x0049, 0x0328 };
	static uint32_t latin_small_letter_i_with_ogonek [] = { 0x0069, 0x0328 };
	static uint32_t latin_capital_letter_i_with_dot_above [] = { 0x0049, 0x0307 };
	static uint32_t latin_capital_ligature_ij [] = { 0x0049, 0x004A };
	static uint32_t latin_small_ligature_ij [] = { 0x0069, 0x006A };
	static uint32_t latin_capital_letter_j_with_circumflex [] = { 0x004A, 0x0302 };
	static uint32_t latin_small_letter_j_with_circumflex [] = { 0x006A, 0x0302 };
	static uint32_t latin_capital_letter_k_with_cedilla [] = { 0x004B, 0x0327 };
	static uint32_t latin_small_letter_k_with_cedilla [] = { 0x006B, 0x0327 };
	static uint32_t latin_capital_letter_l_with_acute [] = { 0x004C, 0x0301 };
	static uint32_t latin_small_letter_l_with_acute [] = { 0x006C, 0x0301 };
	static uint32_t latin_capital_letter_l_with_cedilla [] = { 0x004C, 0x0327 };
	static uint32_t latin_small_letter_l_with_cedilla [] = { 0x006C, 0x0327 };
	static uint32_t latin_capital_letter_l_with_caron [] = { 0x004C, 0x030C };
	static uint32_t latin_small_letter_l_with_caron [] = { 0x006C, 0x030C };
	static uint32_t latin_capital_letter_l_with_middle_dot [] = { 0x004C, 0x00B7 };
	static uint32_t latin_small_letter_l_with_middle_dot [] = { 0x006C, 0x00B7 };
	static uint32_t latin_capital_letter_n_with_acute [] = { 0x004E, 0x0301 };
	static uint32_t latin_small_letter_n_with_acute [] = { 0x006E, 0x0301 };
	static uint32_t latin_capital_letter_n_with_cedilla [] = { 0x004E, 0x0327 };
	static uint32_t latin_small_letter_n_with_cedilla [] = { 0x006E, 0x0327 };
	static uint32_t latin_capital_letter_n_with_caron [] = { 0x004E, 0x030C };
	static uint32_t latin_small_letter_n_with_caron [] = { 0x006E, 0x030C };
	static uint32_t latin_small_letter_n_preceded_by_apostrophe [] = { 0x02BC, 0x006E };
	static uint32_t latin_capital_letter_o_with_macron [] = { 0x004F, 0x0304 };
	static uint32_t latin_small_letter_o_with_macron [] = { 0x006F, 0x0304 };
	static uint32_t latin_capital_letter_o_with_breve [] = { 0x004F, 0x0306 };
	static uint32_t latin_small_letter_o_with_breve [] = { 0x006F, 0x0306 };
	static uint32_t latin_capital_letter_o_with_double_acute [] = { 0x004F, 0x030B };
	static uint32_t latin_small_letter_o_with_double_acute [] = { 0x006F, 0x030B };
	static uint32_t latin_capital_letter_r_with_acute [] = { 0x0052, 0x0301 };
	static uint32_t latin_small_letter_r_with_acute [] = { 0x0072, 0x0301 };
	static uint32_t latin_capital_letter_r_with_cedilla [] = { 0x0052, 0x0327 };
	static uint32_t latin_small_letter_r_with_cedilla [] = { 0x0072, 0x0327 };
	static uint32_t latin_capital_letter_r_with_caron [] = { 0x0052, 0x030C };
	static uint32_t latin_small_letter_r_with_caron [] = { 0x0072, 0x030C };
	static uint32_t latin_capital_letter_s_with_acute [] = { 0x0053, 0x0301 };
	static uint32_t latin_small_letter_s_with_acute [] = { 0x0073, 0x0301 };
	static uint32_t latin_capital_letter_s_with_circumflex [] = { 0x0053, 0x0302 };
	static uint32_t latin_small_letter_s_with_circumflex [] = { 0x0073, 0x0302 };
	static uint32_t latin_capital_letter_s_with_cedilla [] = { 0x0053, 0x0327 };
	static uint32_t latin_small_letter_s_with_cedilla [] = { 0x0073, 0x0327 };
	static uint32_t latin_capital_letter_s_with_caron [] = { 0x0053, 0x030C };
	static uint32_t latin_small_letter_s_with_caron [] = { 0x0073, 0x030C };
	static uint32_t latin_capital_letter_t_with_cedilla [] = { 0x0054, 0x0327 };
	static uint32_t latin_small_letter_t_with_cedilla [] = { 0x0074, 0x0327 };
	static uint32_t latin_capital_letter_t_with_caron [] = { 0x0054, 0x030C };
	static uint32_t latin_small_letter_t_with_caron [] = { 0x0074, 0x030C };
	static uint32_t latin_capital_letter_u_with_tilde [] = { 0x0055, 0x0303 };
	static uint32_t latin_small_letter_u_with_tilde [] = { 0x0075, 0x0303 };
	static uint32_t latin_capital_letter_u_with_macron [] = { 0x0055, 0x0304 };
	static uint32_t latin_small_letter_u_with_macron [] = { 0x0075, 0x0304 };
	static uint32_t latin_capital_letter_u_with_breve [] = { 0x0055, 0x0306 };
	static uint32_t latin_small_letter_u_with_breve [] = { 0x0075, 0x0306 };
	static uint32_t latin_capital_letter_u_with_ring_above [] = { 0x0055, 0x030A };
	static uint32_t latin_small_letter_u_with_ring_above [] = { 0x0075, 0x030A };
	static uint32_t latin_capital_letter_u_with_double_acute [] = { 0x0055, 0x030B };
	static uint32_t latin_small_letter_u_with_double_acute [] = { 0x0075, 0x030B };
	static uint32_t latin_capital_letter_u_with_ogonek [] = { 0x0055, 0x0328 };
	static uint32_t latin_small_letter_u_with_ogonek [] = { 0x0075, 0x0328 };
	static uint32_t latin_capital_letter_w_with_circumflex [] = { 0x0057, 0x0302 };
	static uint32_t latin_small_letter_w_with_circumflex [] = { 0x0077, 0x0302 };
	static uint32_t latin_capital_letter_y_with_circumflex [] = { 0x0059, 0x0302 };
	static uint32_t latin_small_letter_y_with_circumflex [] = { 0x0079, 0x0302 };
	static uint32_t latin_capital_letter_y_with_diaeresis [] = { 0x0059, 0x0308 };
	static uint32_t latin_capital_letter_z_with_acute [] = { 0x005A, 0x0301 };
	static uint32_t latin_small_letter_z_with_acute [] = { 0x007A, 0x0301 };
	static uint32_t latin_capital_letter_z_with_dot_above [] = { 0x005A, 0x0307 };
	static uint32_t latin_small_letter_z_with_dot_above [] = { 0x007A, 0x0307 };
	static uint32_t latin_capital_letter_z_with_caron [] = { 0x005A, 0x030C };
	static uint32_t latin_small_letter_z_with_caron [] = { 0x007A, 0x030C };
	static uint32_t latin_small_letter_long_s [] = { 0x0073 };
	static uint32_t latin_capital_letter_o_with_horn [] = { 0x004F, 0x031B };
	static uint32_t latin_small_letter_o_with_horn [] = { 0x006F, 0x031B };
	static uint32_t latin_capital_letter_u_with_horn [] = { 0x0055, 0x031B };
	static uint32_t latin_small_letter_u_with_horn [] = { 0x0075, 0x031B };
	static uint32_t latin_capital_letter_dz_with_caron [] = { 0x0044, 0x017D };
	static uint32_t latin_capital_letter_d_with_small_letter_z_with_caron [] = { 0x0044, 0x017E };
	static uint32_t latin_small_letter_dz_with_caron [] = { 0x0064, 0x017E };
	static uint32_t latin_capital_letter_lj [] = { 0x004C, 0x004A };
	static uint32_t latin_capital_letter_l_with_small_letter_j [] = { 0x004C, 0x006A };
	static uint32_t latin_small_letter_lj [] = { 0x006C, 0x006A };
	static uint32_t latin_capital_letter_nj [] = { 0x004E, 0x004A };
	static uint32_t latin_capital_letter_n_with_small_letter_j [] = { 0x004E, 0x006A };
	static uint32_t latin_small_letter_nj [] = { 0x006E, 0x006A };
	static uint32_t latin_capital_letter_a_with_caron [] = { 0x0041, 0x030C };
	static uint32_t latin_small_letter_a_with_caron [] = { 0x0061, 0x030C };
	static uint32_t latin_capital_letter_i_with_caron [] = { 0x0049, 0x030C };
	static uint32_t latin_small_letter_i_with_caron [] = { 0x0069, 0x030C };
	static uint32_t latin_capital_letter_o_with_caron [] = { 0x004F, 0x030C };
	static uint32_t latin_small_letter_o_with_caron [] = { 0x006F, 0x030C };
	static uint32_t latin_capital_letter_u_with_caron [] = { 0x0055, 0x030C };
	static uint32_t latin_small_letter_u_with_caron [] = { 0x0075, 0x030C };
	static uint32_t latin_capital_letter_u_with_diaeresis_and_macron [] = { 0x00DC, 0x0304 };
	static uint32_t latin_small_letter_u_with_diaeresis_and_macron [] = { 0x00FC, 0x0304 };
	static uint32_t latin_capital_letter_u_with_diaeresis_and_acute [] = { 0x00DC, 0x0301 };
	static uint32_t latin_small_letter_u_with_diaeresis_and_acute [] = { 0x00FC, 0x0301 };
	static uint32_t latin_capital_letter_u_with_diaeresis_and_caron [] = { 0x00DC, 0x030C };
	static uint32_t latin_small_letter_u_with_diaeresis_and_caron [] = { 0x00FC, 0x030C };
	static uint32_t latin_capital_letter_u_with_diaeresis_and_grave [] = { 0x00DC, 0x0300 };
	static uint32_t latin_small_letter_u_with_diaeresis_and_grave [] = { 0x00FC, 0x0300 };
	static uint32_t latin_capital_letter_a_with_diaeresis_and_macron [] = { 0x00C4, 0x0304 };
	static uint32_t latin_small_letter_a_with_diaeresis_and_macron [] = { 0x00E4, 0x0304 };
	static uint32_t latin_capital_letter_a_with_dot_above_and_macron [] = { 0x0226, 0x0304 };
	static uint32_t latin_small_letter_a_with_dot_above_and_macron [] = { 0x0227, 0x0304 };
	static uint32_t latin_capital_letter_ae_with_macron [] = { 0x00C6, 0x0304 };
	static uint32_t latin_small_letter_ae_with_macron [] = { 0x00E6, 0x0304 };
	static uint32_t latin_capital_letter_g_with_caron [] = { 0x0047, 0x030C };
	static uint32_t latin_small_letter_g_with_caron [] = { 0x0067, 0x030C };
	static uint32_t latin_capital_letter_k_with_caron [] = { 0x004B, 0x030C };
	static uint32_t latin_small_letter_k_with_caron [] = { 0x006B, 0x030C };
	static uint32_t latin_capital_letter_o_with_ogonek [] = { 0x004F, 0x0328 };
	static uint32_t latin_small_letter_o_with_ogonek [] = { 0x006F, 0x0328 };
	static uint32_t latin_capital_letter_o_with_ogonek_and_macron [] = { 0x01EA, 0x0304 };
	static uint32_t latin_small_letter_o_with_ogonek_and_macron [] = { 0x01EB, 0x0304 };
	static uint32_t latin_capital_letter_ezh_with_caron [] = { 0x01B7, 0x030C };
	static uint32_t latin_small_letter_ezh_with_caron [] = { 0x0292, 0x030C };
	static uint32_t latin_small_letter_j_with_caron [] = { 0x006A, 0x030C };
	static uint32_t latin_capital_letter_dz [] = { 0x0044, 0x005A };
	static uint32_t latin_capital_letter_d_with_small_letter_z [] = { 0x0044, 0x007A };
	static uint32_t latin_small_letter_dz [] = { 0x0064, 0x007A };
	static uint32_t latin_capital_letter_g_with_acute [] = { 0x0047, 0x0301 };
	static uint32_t latin_small_letter_g_with_acute [] = { 0x0067, 0x0301 };
	static uint32_t latin_capital_letter_n_with_grave [] = { 0x004E, 0x0300 };
	static uint32_t latin_small_letter_n_with_grave [] = { 0x006E, 0x0300 };
	static uint32_t latin_capital_letter_a_with_ring_above_and_acute [] = { 0x00C5, 0x0301 };
	static uint32_t latin_small_letter_a_with_ring_above_and_acute [] = { 0x00E5, 0x0301 };
	static uint32_t latin_capital_letter_ae_with_acute [] = { 0x00C6, 0x0301 };
	static uint32_t latin_small_letter_ae_with_acute [] = { 0x00E6, 0x0301 };
	static uint32_t latin_capital_letter_o_with_stroke_and_acute [] = { 0x00D8, 0x0301 };
	static uint32_t latin_small_letter_o_with_stroke_and_acute [] = { 0x00F8, 0x0301 };
	static uint32_t latin_capital_letter_a_with_double_grave [] = { 0x0041, 0x030F };
	static uint32_t latin_small_letter_a_with_double_grave [] = { 0x0061, 0x030F };
	static uint32_t latin_capital_letter_a_with_inverted_breve [] = { 0x0041, 0x0311 };
	static uint32_t latin_small_letter_a_with_inverted_breve [] = { 0x0061, 0x0311 };
	static uint32_t latin_capital_letter_e_with_double_grave [] = { 0x0045, 0x030F };
	static uint32_t latin_small_letter_e_with_double_grave [] = { 0x0065, 0x030F };
	static uint32_t latin_capital_letter_e_with_inverted_breve [] = { 0x0045, 0x0311 };
	static uint32_t latin_small_letter_e_with_inverted_breve [] = { 0x0065, 0x0311 };
	static uint32_t latin_capital_letter_i_with_double_grave [] = { 0x0049, 0x030F };
	static uint32_t latin_small_letter_i_with_double_grave [] = { 0x0069, 0x030F };
	static uint32_t latin_capital_letter_i_with_inverted_breve [] = { 0x0049, 0x0311 };
	static uint32_t latin_small_letter_i_with_inverted_breve [] = { 0x0069, 0x0311 };
	static uint32_t latin_capital_letter_o_with_double_grave [] = { 0x004F, 0x030F };
	static uint32_t latin_small_letter_o_with_double_grave [] = { 0x006F, 0x030F };
	static uint32_t latin_capital_letter_o_with_inverted_breve [] = { 0x004F, 0x0311 };
	static uint32_t latin_small_letter_o_with_inverted_breve [] = { 0x006F, 0x0311 };
	static uint32_t latin_capital_letter_r_with_double_grave [] = { 0x0052, 0x030F };
	static uint32_t latin_small_letter_r_with_double_grave [] = { 0x0072, 0x030F };
	static uint32_t latin_capital_letter_r_with_inverted_breve [] = { 0x0052, 0x0311 };
	static uint32_t latin_small_letter_r_with_inverted_breve [] = { 0x0072, 0x0311 };
	static uint32_t latin_capital_letter_u_with_double_grave [] = { 0x0055, 0x030F };
	static uint32_t latin_small_letter_u_with_double_grave [] = { 0x0075, 0x030F };
	static uint32_t latin_capital_letter_u_with_inverted_breve [] = { 0x0055, 0x0311 };
	static uint32_t latin_small_letter_u_with_inverted_breve [] = { 0x0075, 0x0311 };
	static uint32_t latin_capital_letter_s_with_comma_below [] = { 0x0053, 0x0326 };
	static uint32_t latin_small_letter_s_with_comma_below [] = { 0x0073, 0x0326 };
	static uint32_t latin_capital_letter_t_with_comma_below [] = { 0x0054, 0x0326 };
	static uint32_t latin_small_letter_t_with_comma_below [] = { 0x0074, 0x0326 };
	static uint32_t latin_capital_letter_h_with_caron [] = { 0x0048, 0x030C };
	static uint32_t latin_small_letter_h_with_caron [] = { 0x0068, 0x030C };
	static uint32_t latin_capital_letter_a_with_dot_above [] = { 0x0041, 0x0307 };
	static uint32_t latin_small_letter_a_with_dot_above [] = { 0x0061, 0x0307 };
	static uint32_t latin_capital_letter_e_with_cedilla [] = { 0x0045, 0x0327 };
	static uint32_t latin_small_letter_e_with_cedilla [] = { 0x0065, 0x0327 };
	static uint32_t latin_capital_letter_o_with_diaeresis_and_macron [] = { 0x00D6, 0x0304 };
	static uint32_t latin_small_letter_o_with_diaeresis_and_macron [] = { 0x00F6, 0x0304 };
	static uint32_t latin_capital_letter_o_with_tilde_and_macron [] = { 0x00D5, 0x0304 };
	static uint32_t latin_small_letter_o_with_tilde_and_macron [] = { 0x00F5, 0x0304 };
	static uint32_t latin_capital_letter_o_with_dot_above [] = { 0x004F, 0x0307 };
	static uint32_t latin_small_letter_o_with_dot_above [] = { 0x006F, 0x0307 };
	static uint32_t latin_capital_letter_o_with_dot_above_and_macron [] = { 0x022E, 0x0304 };
	static uint32_t latin_small_letter_o_with_dot_above_and_macron [] = { 0x022F, 0x0304 };
	static uint32_t latin_capital_letter_y_with_macron [] = { 0x0059, 0x0304 };
	static uint32_t latin_small_letter_y_with_macron [] = { 0x0079, 0x0304 };
	static uint32_t modifier_letter_small_h [] = { 0x0068 };
	static uint32_t modifier_letter_small_h_with_hook [] = { 0x0266 };
	static uint32_t modifier_letter_small_j [] = { 0x006A };
	static uint32_t modifier_letter_small_r [] = { 0x0072 };
	static uint32_t modifier_letter_small_turned_r [] = { 0x0279 };
	static uint32_t modifier_letter_small_turned_r_with_hook [] = { 0x027B };
	static uint32_t modifier_letter_small_capital_inverted_r [] = { 0x0281 };
	static uint32_t modifier_letter_small_w [] = { 0x0077 };
	static uint32_t modifier_letter_small_y [] = { 0x0079 };
	static uint32_t breve [] = { 0x0020, 0x0306 };
	static uint32_t dot_above [] = { 0x0020, 0x0307 };
	static uint32_t ring_above [] = { 0x0020, 0x030A };
	static uint32_t ogonek [] = { 0x0020, 0x0328 };
	static uint32_t small_tilde [] = { 0x0020, 0x0303 };
	static uint32_t double_acute_accent [] = { 0x0020, 0x030B };
	static uint32_t modifier_letter_small_gamma [] = { 0x0263 };
	static uint32_t modifier_letter_small_l [] = { 0x006C };
	static uint32_t modifier_letter_small_s [] = { 0x0073 };
	static uint32_t modifier_letter_small_x [] = { 0x0078 };
	static uint32_t modifier_letter_small_reversed_glottal_stop [] = { 0x0295 };
	static uint32_t combining_grave_tone_mark [] = { 0x0300 };
	static uint32_t combining_acute_tone_mark [] = { 0x0301 };
	static uint32_t combining_greek_koronis [] = { 0x0313 };
	static uint32_t combining_greek_dialytika_tonos [] = { 0x0308, 0x0301 };
	static uint32_t greek_numeral_sign [] = { 0x02B9 };
	static uint32_t greek_ypogegrammeni [] = { 0x0020, 0x0345 };
	static uint32_t greek_question_mark [] = { 0x003B };
	static uint32_t greek_tonos [] = { 0x0020, 0x0301 };
	static uint32_t greek_dialytika_tonos [] = { 0x00A8, 0x0301 };
	static uint32_t greek_capital_letter_alpha_with_tonos [] = { 0x0391, 0x0301 };
	static uint32_t greek_ano_teleia [] = { 0x00B7 };
	static uint32_t greek_capital_letter_epsilon_with_tonos [] = { 0x0395, 0x0301 };
	static uint32_t greek_capital_letter_eta_with_tonos [] = { 0x0397, 0x0301 };
	static uint32_t greek_capital_letter_iota_with_tonos [] = { 0x0399, 0x0301 };
	static uint32_t greek_capital_letter_omicron_with_tonos [] = { 0x039F, 0x0301 };
	static uint32_t greek_capital_letter_upsilon_with_tonos [] = { 0x03A5, 0x0301 };
	static uint32_t greek_capital_letter_omega_with_tonos [] = { 0x03A9, 0x0301 };
	static uint32_t greek_small_letter_iota_with_dialytika_and_tonos [] = { 0x03CA, 0x0301 };
	static uint32_t greek_capital_letter_iota_with_dialytika [] = { 0x0399, 0x0308 };
	static uint32_t greek_capital_letter_upsilon_with_dialytika [] = { 0x03A5, 0x0308 };
	static uint32_t greek_small_letter_alpha_with_tonos [] = { 0x03B1, 0x0301 };
	static uint32_t greek_small_letter_epsilon_with_tonos [] = { 0x03B5, 0x0301 };
	static uint32_t greek_small_letter_eta_with_tonos [] = { 0x03B7, 0x0301 };
	static uint32_t greek_small_letter_iota_with_tonos [] = { 0x03B9, 0x0301 };
	static uint32_t greek_small_letter_upsilon_with_dialytika_and_tonos [] = { 0x03CB, 0x0301 };
	static uint32_t greek_small_letter_iota_with_dialytika [] = { 0x03B9, 0x0308 };
	static uint32_t greek_small_letter_upsilon_with_dialytika [] = { 0x03C5, 0x0308 };
	static uint32_t greek_small_letter_omicron_with_tonos [] = { 0x03BF, 0x0301 };
	static uint32_t greek_small_letter_upsilon_with_tonos [] = { 0x03C5, 0x0301 };
	static uint32_t greek_small_letter_omega_with_tonos [] = { 0x03C9, 0x0301 };
	static uint32_t greek_beta_symbol [] = { 0x03B2 };
	static uint32_t greek_theta_symbol [] = { 0x03B8 };
	static uint32_t greek_upsilon_with_hook_symbol [] = { 0x03A5 };
	static uint32_t greek_upsilon_with_acute_and_hook_symbol [] = { 0x03D2, 0x0301 };
	static uint32_t greek_upsilon_with_diaeresis_and_hook_symbol [] = { 0x03D2, 0x0308 };
	static uint32_t greek_phi_symbol [] = { 0x03C6 };
	static uint32_t greek_pi_symbol [] = { 0x03C0 };
	static uint32_t greek_kappa_symbol [] = { 0x03BA };
	static uint32_t greek_rho_symbol [] = { 0x03C1 };
	static uint32_t greek_lunate_sigma_symbol [] = { 0x03C2 };
	static uint32_t greek_capital_theta_symbol [] = { 0x0398 };
	static uint32_t greek_lunate_epsilon_symbol [] = { 0x03B5 };
	static uint32_t greek_capital_lunate_sigma_symbol [] = { 0x03A3 };
	static uint32_t cyrillic_capital_letter_ie_with_grave [] = { 0x0415, 0x0300 };
	static uint32_t cyrillic_capital_letter_io [] = { 0x0415, 0x0308 };
	static uint32_t cyrillic_capital_letter_gje [] = { 0x0413, 0x0301 };
	static uint32_t cyrillic_capital_letter_yi [] = { 0x0406, 0x0308 };
	static uint32_t cyrillic_capital_letter_kje [] = { 0x041A, 0x0301 };
	static uint32_t cyrillic_capital_letter_i_with_grave [] = { 0x0418, 0x0300 };
	static uint32_t cyrillic_capital_letter_short_u [] = { 0x0423, 0x0306 };
	static uint32_t cyrillic_capital_letter_short_i [] = { 0x0418, 0x0306 };
	static uint32_t cyrillic_small_letter_short_i [] = { 0x0438, 0x0306 };
	static uint32_t cyrillic_small_letter_ie_with_grave [] = { 0x0435, 0x0300 };
	static uint32_t cyrillic_small_letter_io [] = { 0x0435, 0x0308 };
	static uint32_t cyrillic_small_letter_gje [] = { 0x0433, 0x0301 };
	static uint32_t cyrillic_small_letter_yi [] = { 0x0456, 0x0308 };
	static uint32_t cyrillic_small_letter_kje [] = { 0x043A, 0x0301 };
	static uint32_t cyrillic_small_letter_i_with_grave [] = { 0x0438, 0x0300 };
	static uint32_t cyrillic_small_letter_short_u [] = { 0x0443, 0x0306 };
	static uint32_t cyrillic_capital_letter_izhitsa_with_double_grave_accent [] = { 0x0474, 0x030F };
	static uint32_t cyrillic_small_letter_izhitsa_with_double_grave_accent [] = { 0x0475, 0x030F };
	static uint32_t cyrillic_capital_letter_zhe_with_breve [] = { 0x0416, 0x0306 };
	static uint32_t cyrillic_small_letter_zhe_with_breve [] = { 0x0436, 0x0306 };
	static uint32_t cyrillic_capital_letter_a_with_breve [] = { 0x0410, 0x0306 };
	static uint32_t cyrillic_small_letter_a_with_breve [] = { 0x0430, 0x0306 };
	static uint32_t cyrillic_capital_letter_a_with_diaeresis [] = { 0x0410, 0x0308 };
	static uint32_t cyrillic_small_letter_a_with_diaeresis [] = { 0x0430, 0x0308 };
	static uint32_t cyrillic_capital_letter_ie_with_breve [] = { 0x0415, 0x0306 };
	static uint32_t cyrillic_small_letter_ie_with_breve [] = { 0x0435, 0x0306 };
	static uint32_t cyrillic_capital_letter_schwa_with_diaeresis [] = { 0x04D8, 0x0308 };
	static uint32_t cyrillic_small_letter_schwa_with_diaeresis [] = { 0x04D9, 0x0308 };
	static uint32_t cyrillic_capital_letter_zhe_with_diaeresis [] = { 0x0416, 0x0308 };
	static uint32_t cyrillic_small_letter_zhe_with_diaeresis [] = { 0x0436, 0x0308 };
	static uint32_t cyrillic_capital_letter_ze_with_diaeresis [] = { 0x0417, 0x0308 };
	static uint32_t cyrillic_small_letter_ze_with_diaeresis [] = { 0x0437, 0x0308 };
	static uint32_t cyrillic_capital_letter_i_with_macron [] = { 0x0418, 0x0304 };
	static uint32_t cyrillic_small_letter_i_with_macron [] = { 0x0438, 0x0304 };
	static uint32_t cyrillic_capital_letter_i_with_diaeresis [] = { 0x0418, 0x0308 };
	static uint32_t cyrillic_small_letter_i_with_diaeresis [] = { 0x0438, 0x0308 };
	static uint32_t cyrillic_capital_letter_o_with_diaeresis [] = { 0x041E, 0x0308 };
	static uint32_t cyrillic_small_letter_o_with_diaeresis [] = { 0x043E, 0x0308 };
	static uint32_t cyrillic_capital_letter_barred_o_with_diaeresis [] = { 0x04E8, 0x0308 };
	static uint32_t cyrillic_small_letter_barred_o_with_diaeresis [] = { 0x04E9, 0x0308 };
	static uint32_t cyrillic_capital_letter_e_with_diaeresis [] = { 0x042D, 0x0308 };
	static uint32_t cyrillic_small_letter_e_with_diaeresis [] = { 0x044D, 0x0308 };
	static uint32_t cyrillic_capital_letter_u_with_macron [] = { 0x0423, 0x0304 };
	static uint32_t cyrillic_small_letter_u_with_macron [] = { 0x0443, 0x0304 };
	static uint32_t cyrillic_capital_letter_u_with_diaeresis [] = { 0x0423, 0x0308 };
	static uint32_t cyrillic_small_letter_u_with_diaeresis [] = { 0x0443, 0x0308 };
	static uint32_t cyrillic_capital_letter_u_with_double_acute [] = { 0x0423, 0x030B };
	static uint32_t cyrillic_small_letter_u_with_double_acute [] = { 0x0443, 0x030B };
	static uint32_t cyrillic_capital_letter_che_with_diaeresis [] = { 0x0427, 0x0308 };
	static uint32_t cyrillic_small_letter_che_with_diaeresis [] = { 0x0447, 0x0308 };
	static uint32_t cyrillic_capital_letter_yeru_with_diaeresis [] = { 0x042B, 0x0308 };
	static uint32_t cyrillic_small_letter_yeru_with_diaeresis [] = { 0x044B, 0x0308 };
	static uint32_t armenian_small_ligature_ech_yiwn [] = { 0x0565, 0x0582 };
	static uint32_t arabic_letter_alef_with_madda_above [] = { 0x0627, 0x0653 };
	static uint32_t arabic_letter_alef_with_hamza_above [] = { 0x0627, 0x0654 };
	static uint32_t arabic_letter_waw_with_hamza_above [] = { 0x0648, 0x0654 };
	static uint32_t arabic_letter_alef_with_hamza_below [] = { 0x0627, 0x0655 };
	static uint32_t arabic_letter_yeh_with_hamza_above [] = { 0x064A, 0x0654 };
	static uint32_t arabic_letter_high_hamza_alef [] = { 0x0627, 0x0674 };
	static uint32_t arabic_letter_high_hamza_waw [] = { 0x0648, 0x0674 };
	static uint32_t arabic_letter_u_with_hamza_above [] = { 0x06C7, 0x0674 };
	static uint32_t arabic_letter_high_hamza_yeh [] = { 0x064A, 0x0674 };
	static uint32_t arabic_letter_heh_with_yeh_above [] = { 0x06D5, 0x0654 };
	static uint32_t arabic_letter_heh_goal_with_hamza_above [] = { 0x06C1, 0x0654 };
	static uint32_t arabic_letter_yeh_barree_with_hamza_above [] = { 0x06D2, 0x0654 };
	static uint32_t devanagari_letter_nnna [] = { 0x0928, 0x093C };
	static uint32_t devanagari_letter_rra [] = { 0x0930, 0x093C };
	static uint32_t devanagari_letter_llla [] = { 0x0933, 0x093C };
	static uint32_t devanagari_letter_qa [] = { 0x0915, 0x093C };
	static uint32_t devanagari_letter_khha [] = { 0x0916, 0x093C };
	static uint32_t devanagari_letter_ghha [] = { 0x0917, 0x093C };
	static uint32_t devanagari_letter_za [] = { 0x091C, 0x093C };
	static uint32_t devanagari_letter_dddha [] = { 0x0921, 0x093C };
	static uint32_t devanagari_letter_rha [] = { 0x0922, 0x093C };
	static uint32_t devanagari_letter_fa [] = { 0x092B, 0x093C };
	static uint32_t devanagari_letter_yya [] = { 0x092F, 0x093C };
	static uint32_t bengali_vowel_sign_o [] = { 0x09C7, 0x09BE };
	static uint32_t bengali_vowel_sign_au [] = { 0x09C7, 0x09D7 };
	static uint32_t bengali_letter_rra [] = { 0x09A1, 0x09BC };
	static uint32_t bengali_letter_rha [] = { 0x09A2, 0x09BC };
	static uint32_t bengali_letter_yya [] = { 0x09AF, 0x09BC };
	static uint32_t gurmukhi_letter_lla [] = { 0x0A32, 0x0A3C };
	static uint32_t gurmukhi_letter_sha [] = { 0x0A38, 0x0A3C };
	static uint32_t gurmukhi_letter_khha [] = { 0x0A16, 0x0A3C };
	static uint32_t gurmukhi_letter_ghha [] = { 0x0A17, 0x0A3C };
	static uint32_t gurmukhi_letter_za [] = { 0x0A1C, 0x0A3C };
	static uint32_t gurmukhi_letter_fa [] = { 0x0A2B, 0x0A3C };
	static uint32_t oriya_vowel_sign_ai [] = { 0x0B47, 0x0B56 };
	static uint32_t oriya_vowel_sign_o [] = { 0x0B47, 0x0B3E };
	static uint32_t oriya_vowel_sign_au [] = { 0x0B47, 0x0B57 };
	static uint32_t oriya_letter_rra [] = { 0x0B21, 0x0B3C };
	static uint32_t oriya_letter_rha [] = { 0x0B22, 0x0B3C };
	static uint32_t tamil_letter_au [] = { 0x0B92, 0x0BD7 };
	static uint32_t tamil_vowel_sign_o [] = { 0x0BC6, 0x0BBE };
	static uint32_t tamil_vowel_sign_oo [] = { 0x0BC7, 0x0BBE };
	static uint32_t tamil_vowel_sign_au [] = { 0x0BC6, 0x0BD7 };
	static uint32_t telugu_vowel_sign_ai [] = { 0x0C46, 0x0C56 };
	static uint32_t kannada_vowel_sign_ii [] = { 0x0CBF, 0x0CD5 };
	static uint32_t kannada_vowel_sign_ee [] = { 0x0CC6, 0x0CD5 };
	static uint32_t kannada_vowel_sign_ai [] = { 0x0CC6, 0x0CD6 };
	static uint32_t kannada_vowel_sign_o [] = { 0x0CC6, 0x0CC2 };
	static uint32_t kannada_vowel_sign_oo [] = { 0x0CCA, 0x0CD5 };
	static uint32_t malayalam_vowel_sign_o [] = { 0x0D46, 0x0D3E };
	static uint32_t malayalam_vowel_sign_oo [] = { 0x0D47, 0x0D3E };
	static uint32_t malayalam_vowel_sign_au [] = { 0x0D46, 0x0D57 };
	static uint32_t sinhala_vowel_sign_diga_kombuva [] = { 0x0DD9, 0x0DCA };
	static uint32_t sinhala_vowel_sign_kombuva_haa_aela_pilla [] = { 0x0DD9, 0x0DCF };
	static uint32_t sinhala_vowel_sign_kombuva_haa_diga_aela_pilla [] = { 0x0DDC, 0x0DCA };
	static uint32_t sinhala_vowel_sign_kombuva_haa_gayanukitta [] = { 0x0DD9, 0x0DDF };
	static uint32_t thai_character_sara_am [] = { 0x0E4D, 0x0E32 };
	static uint32_t lao_vowel_sign_am [] = { 0x0ECD, 0x0EB2 };
	static uint32_t lao_ho_no [] = { 0x0EAB, 0x0E99 };
	static uint32_t lao_ho_mo [] = { 0x0EAB, 0x0EA1 };
	static uint32_t tibetan_mark_delimiter_tsheg_bstar [] = { 0x0F0B };
	static uint32_t tibetan_letter_gha [] = { 0x0F42, 0x0FB7 };
	static uint32_t tibetan_letter_ddha [] = { 0x0F4C, 0x0FB7 };
	static uint32_t tibetan_letter_dha [] = { 0x0F51, 0x0FB7 };
	static uint32_t tibetan_letter_bha [] = { 0x0F56, 0x0FB7 };
	static uint32_t tibetan_letter_dzha [] = { 0x0F5B, 0x0FB7 };
	static uint32_t tibetan_letter_kssa [] = { 0x0F40, 0x0FB5 };
	static uint32_t tibetan_vowel_sign_ii [] = { 0x0F71, 0x0F72 };
	static uint32_t tibetan_vowel_sign_uu [] = { 0x0F71, 0x0F74 };
	static uint32_t tibetan_vowel_sign_vocalic_r [] = { 0x0FB2, 0x0F80 };
	static uint32_t tibetan_vowel_sign_vocalic_rr [] = { 0x0FB2, 0x0F81 };
	static uint32_t tibetan_vowel_sign_vocalic_l [] = { 0x0FB3, 0x0F80 };
	static uint32_t tibetan_vowel_sign_vocalic_ll [] = { 0x0FB3, 0x0F81 };
	static uint32_t tibetan_vowel_sign_reversed_ii [] = { 0x0F71, 0x0F80 };
	static uint32_t tibetan_subjoined_letter_gha [] = { 0x0F92, 0x0FB7 };
	static uint32_t tibetan_subjoined_letter_ddha [] = { 0x0F9C, 0x0FB7 };
	static uint32_t tibetan_subjoined_letter_dha [] = { 0x0FA1, 0x0FB7 };
	static uint32_t tibetan_subjoined_letter_bha [] = { 0x0FA6, 0x0FB7 };
	static uint32_t tibetan_subjoined_letter_dzha [] = { 0x0FAB, 0x0FB7 };
	static uint32_t tibetan_subjoined_letter_kssa [] = { 0x0F90, 0x0FB5 };
	static uint32_t myanmar_letter_uu [] = { 0x1025, 0x102E };
	static uint32_t modifier_letter_georgian_nar [] = { 0x10DC };
	static uint32_t balinese_letter_akara_tedung [] = { 0x1B05, 0x1B35 };
	static uint32_t balinese_letter_ikara_tedung [] = { 0x1B07, 0x1B35 };
	static uint32_t balinese_letter_ukara_tedung [] = { 0x1B09, 0x1B35 };
	static uint32_t balinese_letter_ra_repa_tedung [] = { 0x1B0B, 0x1B35 };
	static uint32_t balinese_letter_la_lenga_tedung [] = { 0x1B0D, 0x1B35 };
	static uint32_t balinese_letter_okara_tedung [] = { 0x1B11, 0x1B35 };
	static uint32_t balinese_vowel_sign_ra_repa_tedung [] = { 0x1B3A, 0x1B35 };
	static uint32_t balinese_vowel_sign_la_lenga_tedung [] = { 0x1B3C, 0x1B35 };
	static uint32_t balinese_vowel_sign_taling_tedung [] = { 0x1B3E, 0x1B35 };
	static uint32_t balinese_vowel_sign_taling_repa_tedung [] = { 0x1B3F, 0x1B35 };
	static uint32_t balinese_vowel_sign_pepet_tedung [] = { 0x1B42, 0x1B35 };
	static uint32_t modifier_letter_capital_a [] = { 0x0041 };
	static uint32_t modifier_letter_capital_ae [] = { 0x00C6 };
	static uint32_t modifier_letter_capital_b [] = { 0x0042 };
	static uint32_t modifier_letter_capital_d [] = { 0x0044 };
	static uint32_t modifier_letter_capital_e [] = { 0x0045 };
	static uint32_t modifier_letter_capital_reversed_e [] = { 0x018E };
	static uint32_t modifier_letter_capital_g [] = { 0x0047 };
	static uint32_t modifier_letter_capital_h [] = { 0x0048 };
	static uint32_t modifier_letter_capital_i [] = { 0x0049 };
	static uint32_t modifier_letter_capital_j [] = { 0x004A };
	static uint32_t modifier_letter_capital_k [] = { 0x004B };
	static uint32_t modifier_letter_capital_l [] = { 0x004C };
	static uint32_t modifier_letter_capital_m [] = { 0x004D };
	static uint32_t modifier_letter_capital_n [] = { 0x004E };
	static uint32_t modifier_letter_capital_o [] = { 0x004F };
	static uint32_t modifier_letter_capital_ou [] = { 0x0222 };
	static uint32_t modifier_letter_capital_p [] = { 0x0050 };
	static uint32_t modifier_letter_capital_r [] = { 0x0052 };
	static uint32_t modifier_letter_capital_t [] = { 0x0054 };
	static uint32_t modifier_letter_capital_u [] = { 0x0055 };
	static uint32_t modifier_letter_capital_w [] = { 0x0057 };
	static uint32_t modifier_letter_small_a [] = { 0x0061 };
	static uint32_t modifier_letter_small_turned_a [] = { 0x0250 };
	static uint32_t modifier_letter_small_alpha [] = { 0x0251 };
	static uint32_t modifier_letter_small_turned_ae [] = { 0x1D02 };
	static uint32_t modifier_letter_small_b [] = { 0x0062 };
	static uint32_t modifier_letter_small_d [] = { 0x0064 };
	static uint32_t modifier_letter_small_e [] = { 0x0065 };
	static uint32_t modifier_letter_small_schwa [] = { 0x0259 };
	static uint32_t modifier_letter_small_open_e [] = { 0x025B };
	static uint32_t modifier_letter_small_turned_open_e [] = { 0x025C };
	static uint32_t modifier_letter_small_g [] = { 0x0067 };
	static uint32_t modifier_letter_small_k [] = { 0x006B };
	static uint32_t modifier_letter_small_m [] = { 0x006D };
	static uint32_t modifier_letter_small_eng [] = { 0x014B };
	static uint32_t modifier_letter_small_o [] = { 0x006F };
	static uint32_t modifier_letter_small_open_o [] = { 0x0254 };
	static uint32_t modifier_letter_small_top_half_o [] = { 0x1D16 };
	static uint32_t modifier_letter_small_bottom_half_o [] = { 0x1D17 };
	static uint32_t modifier_letter_small_p [] = { 0x0070 };
	static uint32_t modifier_letter_small_t [] = { 0x0074 };
	static uint32_t modifier_letter_small_u [] = { 0x0075 };
	static uint32_t modifier_letter_small_sideways_u [] = { 0x1D1D };
	static uint32_t modifier_letter_small_turned_m [] = { 0x026F };
	static uint32_t modifier_letter_small_v [] = { 0x0076 };
	static uint32_t modifier_letter_small_ain [] = { 0x1D25 };
	static uint32_t modifier_letter_small_beta [] = { 0x03B2 };
	static uint32_t modifier_letter_small_greek_gamma [] = { 0x03B3 };
	static uint32_t modifier_letter_small_delta [] = { 0x03B4 };
	static uint32_t modifier_letter_small_greek_phi [] = { 0x03C6 };
	static uint32_t modifier_letter_small_chi [] = { 0x03C7 };
	static uint32_t latin_subscript_small_letter_i [] = { 0x0069 };
	static uint32_t latin_subscript_small_letter_r [] = { 0x0072 };
	static uint32_t latin_subscript_small_letter_u [] = { 0x0075 };
	static uint32_t latin_subscript_small_letter_v [] = { 0x0076 };
	static uint32_t greek_subscript_small_letter_beta [] = { 0x03B2 };
	static uint32_t greek_subscript_small_letter_gamma [] = { 0x03B3 };
	static uint32_t greek_subscript_small_letter_rho [] = { 0x03C1 };
	static uint32_t greek_subscript_small_letter_phi [] = { 0x03C6 };
	static uint32_t greek_subscript_small_letter_chi [] = { 0x03C7 };
	static uint32_t modifier_letter_cyrillic_en [] = { 0x043D };
	static uint32_t modifier_letter_small_turned_alpha [] = { 0x0252 };
	static uint32_t modifier_letter_small_c [] = { 0x0063 };
	static uint32_t modifier_letter_small_c_with_curl [] = { 0x0255 };
	static uint32_t modifier_letter_small_eth [] = { 0x00F0 };
	static uint32_t modifier_letter_small_reversed_open_e [] = { 0x025C };
	static uint32_t modifier_letter_small_f [] = { 0x0066 };
	static uint32_t modifier_letter_small_dotless_j_with_stroke [] = { 0x025F };
	static uint32_t modifier_letter_small_script_g [] = { 0x0261 };
	static uint32_t modifier_letter_small_turned_h [] = { 0x0265 };
	static uint32_t modifier_letter_small_i_with_stroke [] = { 0x0268 };
	static uint32_t modifier_letter_small_iota [] = { 0x0269 };
	static uint32_t modifier_letter_small_capital_i [] = { 0x026A };
	static uint32_t modifier_letter_small_capital_i_with_stroke [] = { 0x1D7B };
	static uint32_t modifier_letter_small_j_with_crossed_tail [] = { 0x029D };
	static uint32_t modifier_letter_small_l_with_retroflex_hook [] = { 0x026D };
	static uint32_t modifier_letter_small_l_with_palatal_hook [] = { 0x1D85 };
	static uint32_t modifier_letter_small_capital_l [] = { 0x029F };
	static uint32_t modifier_letter_small_m_with_hook [] = { 0x0271 };
	static uint32_t modifier_letter_small_turned_m_with_long_leg [] = { 0x0270 };
	static uint32_t modifier_letter_small_n_with_left_hook [] = { 0x0272 };
	static uint32_t modifier_letter_small_n_with_retroflex_hook [] = { 0x0273 };
	static uint32_t modifier_letter_small_capital_n [] = { 0x0274 };
	static uint32_t modifier_letter_small_barred_o [] = { 0x0275 };
	static uint32_t modifier_letter_small_phi [] = { 0x0278 };
	static uint32_t modifier_letter_small_s_with_hook [] = { 0x0282 };
	static uint32_t modifier_letter_small_esh [] = { 0x0283 };
	static uint32_t modifier_letter_small_t_with_palatal_hook [] = { 0x01AB };
	static uint32_t modifier_letter_small_u_bar [] = { 0x0289 };
	static uint32_t modifier_letter_small_upsilon [] = { 0x028A };
	static uint32_t modifier_letter_small_capital_u [] = { 0x1D1C };
	static uint32_t modifier_letter_small_v_with_hook [] = { 0x028B };
	static uint32_t modifier_letter_small_turned_v [] = { 0x028C };
	static uint32_t modifier_letter_small_z [] = { 0x007A };
	static uint32_t modifier_letter_small_z_with_retroflex_hook [] = { 0x0290 };
	static uint32_t modifier_letter_small_z_with_curl [] = { 0x0291 };
	static uint32_t modifier_letter_small_ezh [] = { 0x0292 };
	static uint32_t modifier_letter_small_theta [] = { 0x03B8 };
	static uint32_t latin_capital_letter_a_with_ring_below [] = { 0x0041, 0x0325 };
	static uint32_t latin_small_letter_a_with_ring_below [] = { 0x0061, 0x0325 };
	static uint32_t latin_capital_letter_b_with_dot_above [] = { 0x0042, 0x0307 };
	static uint32_t latin_small_letter_b_with_dot_above [] = { 0x0062, 0x0307 };
	static uint32_t latin_capital_letter_b_with_dot_below [] = { 0x0042, 0x0323 };
	static uint32_t latin_small_letter_b_with_dot_below [] = { 0x0062, 0x0323 };
	static uint32_t latin_capital_letter_b_with_line_below [] = { 0x0042, 0x0331 };
	static uint32_t latin_small_letter_b_with_line_below [] = { 0x0062, 0x0331 };
	static uint32_t latin_capital_letter_c_with_cedilla_and_acute [] = { 0x00C7, 0x0301 };
	static uint32_t latin_small_letter_c_with_cedilla_and_acute [] = { 0x00E7, 0x0301 };
	static uint32_t latin_capital_letter_d_with_dot_above [] = { 0x0044, 0x0307 };
	static uint32_t latin_small_letter_d_with_dot_above [] = { 0x0064, 0x0307 };
	static uint32_t latin_capital_letter_d_with_dot_below [] = { 0x0044, 0x0323 };
	static uint32_t latin_small_letter_d_with_dot_below [] = { 0x0064, 0x0323 };
	static uint32_t latin_capital_letter_d_with_line_below [] = { 0x0044, 0x0331 };
	static uint32_t latin_small_letter_d_with_line_below [] = { 0x0064, 0x0331 };
	static uint32_t latin_capital_letter_d_with_cedilla [] = { 0x0044, 0x0327 };
	static uint32_t latin_small_letter_d_with_cedilla [] = { 0x0064, 0x0327 };
	static uint32_t latin_capital_letter_d_with_circumflex_below [] = { 0x0044, 0x032D };
	static uint32_t latin_small_letter_d_with_circumflex_below [] = { 0x0064, 0x032D };
	static uint32_t latin_capital_letter_e_with_macron_and_grave [] = { 0x0112, 0x0300 };
	static uint32_t latin_small_letter_e_with_macron_and_grave [] = { 0x0113, 0x0300 };
	static uint32_t latin_capital_letter_e_with_macron_and_acute [] = { 0x0112, 0x0301 };
	static uint32_t latin_small_letter_e_with_macron_and_acute [] = { 0x0113, 0x0301 };
	static uint32_t latin_capital_letter_e_with_circumflex_below [] = { 0x0045, 0x032D };
	static uint32_t latin_small_letter_e_with_circumflex_below [] = { 0x0065, 0x032D };
	static uint32_t latin_capital_letter_e_with_tilde_below [] = { 0x0045, 0x0330 };
	static uint32_t latin_small_letter_e_with_tilde_below [] = { 0x0065, 0x0330 };
	static uint32_t latin_capital_letter_e_with_cedilla_and_breve [] = { 0x0228, 0x0306 };
	static uint32_t latin_small_letter_e_with_cedilla_and_breve [] = { 0x0229, 0x0306 };
	static uint32_t latin_capital_letter_f_with_dot_above [] = { 0x0046, 0x0307 };
	static uint32_t latin_small_letter_f_with_dot_above [] = { 0x0066, 0x0307 };
	static uint32_t latin_capital_letter_g_with_macron [] = { 0x0047, 0x0304 };
	static uint32_t latin_small_letter_g_with_macron [] = { 0x0067, 0x0304 };
	static uint32_t latin_capital_letter_h_with_dot_above [] = { 0x0048, 0x0307 };
	static uint32_t latin_small_letter_h_with_dot_above [] = { 0x0068, 0x0307 };
	static uint32_t latin_capital_letter_h_with_dot_below [] = { 0x0048, 0x0323 };
	static uint32_t latin_small_letter_h_with_dot_below [] = { 0x0068, 0x0323 };
	static uint32_t latin_capital_letter_h_with_diaeresis [] = { 0x0048, 0x0308 };
	static uint32_t latin_small_letter_h_with_diaeresis [] = { 0x0068, 0x0308 };
	static uint32_t latin_capital_letter_h_with_cedilla [] = { 0x0048, 0x0327 };
	static uint32_t latin_small_letter_h_with_cedilla [] = { 0x0068, 0x0327 };
	static uint32_t latin_capital_letter_h_with_breve_below [] = { 0x0048, 0x032E };
	static uint32_t latin_small_letter_h_with_breve_below [] = { 0x0068, 0x032E };
	static uint32_t latin_capital_letter_i_with_tilde_below [] = { 0x0049, 0x0330 };
	static uint32_t latin_small_letter_i_with_tilde_below [] = { 0x0069, 0x0330 };
	static uint32_t latin_capital_letter_i_with_diaeresis_and_acute [] = { 0x00CF, 0x0301 };
	static uint32_t latin_small_letter_i_with_diaeresis_and_acute [] = { 0x00EF, 0x0301 };
	static uint32_t latin_capital_letter_k_with_acute [] = { 0x004B, 0x0301 };
	static uint32_t latin_small_letter_k_with_acute [] = { 0x006B, 0x0301 };
	static uint32_t latin_capital_letter_k_with_dot_below [] = { 0x004B, 0x0323 };
	static uint32_t latin_small_letter_k_with_dot_below [] = { 0x006B, 0x0323 };
	static uint32_t latin_capital_letter_k_with_line_below [] = { 0x004B, 0x0331 };
	static uint32_t latin_small_letter_k_with_line_below [] = { 0x006B, 0x0331 };
	static uint32_t latin_capital_letter_l_with_dot_below [] = { 0x004C, 0x0323 };
	static uint32_t latin_small_letter_l_with_dot_below [] = { 0x006C, 0x0323 };
	static uint32_t latin_capital_letter_l_with_dot_below_and_macron [] = { 0x1E36, 0x0304 };
	static uint32_t latin_small_letter_l_with_dot_below_and_macron [] = { 0x1E37, 0x0304 };
	static uint32_t latin_capital_letter_l_with_line_below [] = { 0x004C, 0x0331 };
	static uint32_t latin_small_letter_l_with_line_below [] = { 0x006C, 0x0331 };
	static uint32_t latin_capital_letter_l_with_circumflex_below [] = { 0x004C, 0x032D };
	static uint32_t latin_small_letter_l_with_circumflex_below [] = { 0x006C, 0x032D };
	static uint32_t latin_capital_letter_m_with_acute [] = { 0x004D, 0x0301 };
	static uint32_t latin_small_letter_m_with_acute [] = { 0x006D, 0x0301 };
	static uint32_t latin_capital_letter_m_with_dot_above [] = { 0x004D, 0x0307 };
	static uint32_t latin_small_letter_m_with_dot_above [] = { 0x006D, 0x0307 };
	static uint32_t latin_capital_letter_m_with_dot_below [] = { 0x004D, 0x0323 };
	static uint32_t latin_small_letter_m_with_dot_below [] = { 0x006D, 0x0323 };
	static uint32_t latin_capital_letter_n_with_dot_above [] = { 0x004E, 0x0307 };
	static uint32_t latin_small_letter_n_with_dot_above [] = { 0x006E, 0x0307 };
	static uint32_t latin_capital_letter_n_with_dot_below [] = { 0x004E, 0x0323 };
	static uint32_t latin_small_letter_n_with_dot_below [] = { 0x006E, 0x0323 };
	static uint32_t latin_capital_letter_n_with_line_below [] = { 0x004E, 0x0331 };
	static uint32_t latin_small_letter_n_with_line_below [] = { 0x006E, 0x0331 };
	static uint32_t latin_capital_letter_n_with_circumflex_below [] = { 0x004E, 0x032D };
	static uint32_t latin_small_letter_n_with_circumflex_below [] = { 0x006E, 0x032D };
	static uint32_t latin_capital_letter_o_with_tilde_and_acute [] = { 0x00D5, 0x0301 };
	static uint32_t latin_small_letter_o_with_tilde_and_acute [] = { 0x00F5, 0x0301 };
	static uint32_t latin_capital_letter_o_with_tilde_and_diaeresis [] = { 0x00D5, 0x0308 };
	static uint32_t latin_small_letter_o_with_tilde_and_diaeresis [] = { 0x00F5, 0x0308 };
	static uint32_t latin_capital_letter_o_with_macron_and_grave [] = { 0x014C, 0x0300 };
	static uint32_t latin_small_letter_o_with_macron_and_grave [] = { 0x014D, 0x0300 };
	static uint32_t latin_capital_letter_o_with_macron_and_acute [] = { 0x014C, 0x0301 };
	static uint32_t latin_small_letter_o_with_macron_and_acute [] = { 0x014D, 0x0301 };
	static uint32_t latin_capital_letter_p_with_acute [] = { 0x0050, 0x0301 };
	static uint32_t latin_small_letter_p_with_acute [] = { 0x0070, 0x0301 };
	static uint32_t latin_capital_letter_p_with_dot_above [] = { 0x0050, 0x0307 };
	static uint32_t latin_small_letter_p_with_dot_above [] = { 0x0070, 0x0307 };
	static uint32_t latin_capital_letter_r_with_dot_above [] = { 0x0052, 0x0307 };
	static uint32_t latin_small_letter_r_with_dot_above [] = { 0x0072, 0x0307 };
	static uint32_t latin_capital_letter_r_with_dot_below [] = { 0x0052, 0x0323 };
	static uint32_t latin_small_letter_r_with_dot_below [] = { 0x0072, 0x0323 };
	static uint32_t latin_capital_letter_r_with_dot_below_and_macron [] = { 0x1E5A, 0x0304 };
	static uint32_t latin_small_letter_r_with_dot_below_and_macron [] = { 0x1E5B, 0x0304 };
	static uint32_t latin_capital_letter_r_with_line_below [] = { 0x0052, 0x0331 };
	static uint32_t latin_small_letter_r_with_line_below [] = { 0x0072, 0x0331 };
	static uint32_t latin_capital_letter_s_with_dot_above [] = { 0x0053, 0x0307 };
	static uint32_t latin_small_letter_s_with_dot_above [] = { 0x0073, 0x0307 };
	static uint32_t latin_capital_letter_s_with_dot_below [] = { 0x0053, 0x0323 };
	static uint32_t latin_small_letter_s_with_dot_below [] = { 0x0073, 0x0323 };
	static uint32_t latin_capital_letter_s_with_acute_and_dot_above [] = { 0x015A, 0x0307 };
	static uint32_t latin_small_letter_s_with_acute_and_dot_above [] = { 0x015B, 0x0307 };
	static uint32_t latin_capital_letter_s_with_caron_and_dot_above [] = { 0x0160, 0x0307 };
	static uint32_t latin_small_letter_s_with_caron_and_dot_above [] = { 0x0161, 0x0307 };
	static uint32_t latin_capital_letter_s_with_dot_below_and_dot_above [] = { 0x1E62, 0x0307 };
	static uint32_t latin_small_letter_s_with_dot_below_and_dot_above [] = { 0x1E63, 0x0307 };
	static uint32_t latin_capital_letter_t_with_dot_above [] = { 0x0054, 0x0307 };
	static uint32_t latin_small_letter_t_with_dot_above [] = { 0x0074, 0x0307 };
	static uint32_t latin_capital_letter_t_with_dot_below [] = { 0x0054, 0x0323 };
	static uint32_t latin_small_letter_t_with_dot_below [] = { 0x0074, 0x0323 };
	static uint32_t latin_capital_letter_t_with_line_below [] = { 0x0054, 0x0331 };
	static uint32_t latin_small_letter_t_with_line_below [] = { 0x0074, 0x0331 };
	static uint32_t latin_capital_letter_t_with_circumflex_below [] = { 0x0054, 0x032D };
	static uint32_t latin_small_letter_t_with_circumflex_below [] = { 0x0074, 0x032D };
	static uint32_t latin_capital_letter_u_with_diaeresis_below [] = { 0x0055, 0x0324 };
	static uint32_t latin_small_letter_u_with_diaeresis_below [] = { 0x0075, 0x0324 };
	static uint32_t latin_capital_letter_u_with_tilde_below [] = { 0x0055, 0x0330 };
	static uint32_t latin_small_letter_u_with_tilde_below [] = { 0x0075, 0x0330 };
	static uint32_t latin_capital_letter_u_with_circumflex_below [] = { 0x0055, 0x032D };
	static uint32_t latin_small_letter_u_with_circumflex_below [] = { 0x0075, 0x032D };
	static uint32_t latin_capital_letter_u_with_tilde_and_acute [] = { 0x0168, 0x0301 };
	static uint32_t latin_small_letter_u_with_tilde_and_acute [] = { 0x0169, 0x0301 };
	static uint32_t latin_capital_letter_u_with_macron_and_diaeresis [] = { 0x016A, 0x0308 };
	static uint32_t latin_small_letter_u_with_macron_and_diaeresis [] = { 0x016B, 0x0308 };
	static uint32_t latin_capital_letter_v_with_tilde [] = { 0x0056, 0x0303 };
	static uint32_t latin_small_letter_v_with_tilde [] = { 0x0076, 0x0303 };
	static uint32_t latin_capital_letter_v_with_dot_below [] = { 0x0056, 0x0323 };
	static uint32_t latin_small_letter_v_with_dot_below [] = { 0x0076, 0x0323 };
	static uint32_t latin_capital_letter_w_with_grave [] = { 0x0057, 0x0300 };
	static uint32_t latin_small_letter_w_with_grave [] = { 0x0077, 0x0300 };
	static uint32_t latin_capital_letter_w_with_acute [] = { 0x0057, 0x0301 };
	static uint32_t latin_small_letter_w_with_acute [] = { 0x0077, 0x0301 };
	static uint32_t latin_capital_letter_w_with_diaeresis [] = { 0x0057, 0x0308 };
	static uint32_t latin_small_letter_w_with_diaeresis [] = { 0x0077, 0x0308 };
	static uint32_t latin_capital_letter_w_with_dot_above [] = { 0x0057, 0x0307 };
	static uint32_t latin_small_letter_w_with_dot_above [] = { 0x0077, 0x0307 };
	static uint32_t latin_capital_letter_w_with_dot_below [] = { 0x0057, 0x0323 };
	static uint32_t latin_small_letter_w_with_dot_below [] = { 0x0077, 0x0323 };
	static uint32_t latin_capital_letter_x_with_dot_above [] = { 0x0058, 0x0307 };
	static uint32_t latin_small_letter_x_with_dot_above [] = { 0x0078, 0x0307 };
	static uint32_t latin_capital_letter_x_with_diaeresis [] = { 0x0058, 0x0308 };
	static uint32_t latin_small_letter_x_with_diaeresis [] = { 0x0078, 0x0308 };
	static uint32_t latin_capital_letter_y_with_dot_above [] = { 0x0059, 0x0307 };
	static uint32_t latin_small_letter_y_with_dot_above [] = { 0x0079, 0x0307 };
	static uint32_t latin_capital_letter_z_with_circumflex [] = { 0x005A, 0x0302 };
	static uint32_t latin_small_letter_z_with_circumflex [] = { 0x007A, 0x0302 };
	static uint32_t latin_capital_letter_z_with_dot_below [] = { 0x005A, 0x0323 };
	static uint32_t latin_small_letter_z_with_dot_below [] = { 0x007A, 0x0323 };
	static uint32_t latin_capital_letter_z_with_line_below [] = { 0x005A, 0x0331 };
	static uint32_t latin_small_letter_z_with_line_below [] = { 0x007A, 0x0331 };
	static uint32_t latin_small_letter_h_with_line_below [] = { 0x0068, 0x0331 };
	static uint32_t latin_small_letter_t_with_diaeresis [] = { 0x0074, 0x0308 };
	static uint32_t latin_small_letter_w_with_ring_above [] = { 0x0077, 0x030A };
	static uint32_t latin_small_letter_y_with_ring_above [] = { 0x0079, 0x030A };
	static uint32_t latin_small_letter_a_with_right_half_ring [] = { 0x0061, 0x02BE };
	static uint32_t latin_small_letter_long_s_with_dot_above [] = { 0x017F, 0x0307 };
	static uint32_t latin_capital_letter_a_with_dot_below [] = { 0x0041, 0x0323 };
	static uint32_t latin_small_letter_a_with_dot_below [] = { 0x0061, 0x0323 };
	static uint32_t latin_capital_letter_a_with_hook_above [] = { 0x0041, 0x0309 };
	static uint32_t latin_small_letter_a_with_hook_above [] = { 0x0061, 0x0309 };
	static uint32_t latin_capital_letter_a_with_circumflex_and_acute [] = { 0x00C2, 0x0301 };
	static uint32_t latin_small_letter_a_with_circumflex_and_acute [] = { 0x00E2, 0x0301 };
	static uint32_t latin_capital_letter_a_with_circumflex_and_grave [] = { 0x00C2, 0x0300 };
	static uint32_t latin_small_letter_a_with_circumflex_and_grave [] = { 0x00E2, 0x0300 };
	static uint32_t latin_capital_letter_a_with_circumflex_and_hook_above [] = { 0x00C2, 0x0309 };
	static uint32_t latin_small_letter_a_with_circumflex_and_hook_above [] = { 0x00E2, 0x0309 };
	static uint32_t latin_capital_letter_a_with_circumflex_and_tilde [] = { 0x00C2, 0x0303 };
	static uint32_t latin_small_letter_a_with_circumflex_and_tilde [] = { 0x00E2, 0x0303 };
	static uint32_t latin_capital_letter_a_with_circumflex_and_dot_below [] = { 0x1EA0, 0x0302 };
	static uint32_t latin_small_letter_a_with_circumflex_and_dot_below [] = { 0x1EA1, 0x0302 };
	static uint32_t latin_capital_letter_a_with_breve_and_acute [] = { 0x0102, 0x0301 };
	static uint32_t latin_small_letter_a_with_breve_and_acute [] = { 0x0103, 0x0301 };
	static uint32_t latin_capital_letter_a_with_breve_and_grave [] = { 0x0102, 0x0300 };
	static uint32_t latin_small_letter_a_with_breve_and_grave [] = { 0x0103, 0x0300 };
	static uint32_t latin_capital_letter_a_with_breve_and_hook_above [] = { 0x0102, 0x0309 };
	static uint32_t latin_small_letter_a_with_breve_and_hook_above [] = { 0x0103, 0x0309 };
	static uint32_t latin_capital_letter_a_with_breve_and_tilde [] = { 0x0102, 0x0303 };
	static uint32_t latin_small_letter_a_with_breve_and_tilde [] = { 0x0103, 0x0303 };
	static uint32_t latin_capital_letter_a_with_breve_and_dot_below [] = { 0x1EA0, 0x0306 };
	static uint32_t latin_small_letter_a_with_breve_and_dot_below [] = { 0x1EA1, 0x0306 };
	static uint32_t latin_capital_letter_e_with_dot_below [] = { 0x0045, 0x0323 };
	static uint32_t latin_small_letter_e_with_dot_below [] = { 0x0065, 0x0323 };
	static uint32_t latin_capital_letter_e_with_hook_above [] = { 0x0045, 0x0309 };
	static uint32_t latin_small_letter_e_with_hook_above [] = { 0x0065, 0x0309 };
	static uint32_t latin_capital_letter_e_with_tilde [] = { 0x0045, 0x0303 };
	static uint32_t latin_small_letter_e_with_tilde [] = { 0x0065, 0x0303 };
	static uint32_t latin_capital_letter_e_with_circumflex_and_acute [] = { 0x00CA, 0x0301 };
	static uint32_t latin_small_letter_e_with_circumflex_and_acute [] = { 0x00EA, 0x0301 };
	static uint32_t latin_capital_letter_e_with_circumflex_and_grave [] = { 0x00CA, 0x0300 };
	static uint32_t latin_small_letter_e_with_circumflex_and_grave [] = { 0x00EA, 0x0300 };
	static uint32_t latin_capital_letter_e_with_circumflex_and_hook_above [] = { 0x00CA, 0x0309 };
	static uint32_t latin_small_letter_e_with_circumflex_and_hook_above [] = { 0x00EA, 0x0309 };
	static uint32_t latin_capital_letter_e_with_circumflex_and_tilde [] = { 0x00CA, 0x0303 };
	static uint32_t latin_small_letter_e_with_circumflex_and_tilde [] = { 0x00EA, 0x0303 };
	static uint32_t latin_capital_letter_e_with_circumflex_and_dot_below [] = { 0x1EB8, 0x0302 };
	static uint32_t latin_small_letter_e_with_circumflex_and_dot_below [] = { 0x1EB9, 0x0302 };
	static uint32_t latin_capital_letter_i_with_hook_above [] = { 0x0049, 0x0309 };
	static uint32_t latin_small_letter_i_with_hook_above [] = { 0x0069, 0x0309 };
	static uint32_t latin_capital_letter_i_with_dot_below [] = { 0x0049, 0x0323 };
	static uint32_t latin_small_letter_i_with_dot_below [] = { 0x0069, 0x0323 };
	static uint32_t latin_capital_letter_o_with_dot_below [] = { 0x004F, 0x0323 };
	static uint32_t latin_small_letter_o_with_dot_below [] = { 0x006F, 0x0323 };
	static uint32_t latin_capital_letter_o_with_hook_above [] = { 0x004F, 0x0309 };
	static uint32_t latin_small_letter_o_with_hook_above [] = { 0x006F, 0x0309 };
	static uint32_t latin_capital_letter_o_with_circumflex_and_acute [] = { 0x00D4, 0x0301 };
	static uint32_t latin_small_letter_o_with_circumflex_and_acute [] = { 0x00F4, 0x0301 };
	static uint32_t latin_capital_letter_o_with_circumflex_and_grave [] = { 0x00D4, 0x0300 };
	static uint32_t latin_small_letter_o_with_circumflex_and_grave [] = { 0x00F4, 0x0300 };
	static uint32_t latin_capital_letter_o_with_circumflex_and_hook_above [] = { 0x00D4, 0x0309 };
	static uint32_t latin_small_letter_o_with_circumflex_and_hook_above [] = { 0x00F4, 0x0309 };
	static uint32_t latin_capital_letter_o_with_circumflex_and_tilde [] = { 0x00D4, 0x0303 };
	static uint32_t latin_small_letter_o_with_circumflex_and_tilde [] = { 0x00F4, 0x0303 };
	static uint32_t latin_capital_letter_o_with_circumflex_and_dot_below [] = { 0x1ECC, 0x0302 };
	static uint32_t latin_small_letter_o_with_circumflex_and_dot_below [] = { 0x1ECD, 0x0302 };
	static uint32_t latin_capital_letter_o_with_horn_and_acute [] = { 0x01A0, 0x0301 };
	static uint32_t latin_small_letter_o_with_horn_and_acute [] = { 0x01A1, 0x0301 };
	static uint32_t latin_capital_letter_o_with_horn_and_grave [] = { 0x01A0, 0x0300 };
	static uint32_t latin_small_letter_o_with_horn_and_grave [] = { 0x01A1, 0x0300 };
	static uint32_t latin_capital_letter_o_with_horn_and_hook_above [] = { 0x01A0, 0x0309 };
	static uint32_t latin_small_letter_o_with_horn_and_hook_above [] = { 0x01A1, 0x0309 };
	static uint32_t latin_capital_letter_o_with_horn_and_tilde [] = { 0x01A0, 0x0303 };
	static uint32_t latin_small_letter_o_with_horn_and_tilde [] = { 0x01A1, 0x0303 };
	static uint32_t latin_capital_letter_o_with_horn_and_dot_below [] = { 0x01A0, 0x0323 };
	static uint32_t latin_small_letter_o_with_horn_and_dot_below [] = { 0x01A1, 0x0323 };
	static uint32_t latin_capital_letter_u_with_dot_below [] = { 0x0055, 0x0323 };
	static uint32_t latin_small_letter_u_with_dot_below [] = { 0x0075, 0x0323 };
	static uint32_t latin_capital_letter_u_with_hook_above [] = { 0x0055, 0x0309 };
	static uint32_t latin_small_letter_u_with_hook_above [] = { 0x0075, 0x0309 };
	static uint32_t latin_capital_letter_u_with_horn_and_acute [] = { 0x01AF, 0x0301 };
	static uint32_t latin_small_letter_u_with_horn_and_acute [] = { 0x01B0, 0x0301 };
	static uint32_t latin_capital_letter_u_with_horn_and_grave [] = { 0x01AF, 0x0300 };
	static uint32_t latin_small_letter_u_with_horn_and_grave [] = { 0x01B0, 0x0300 };
	static uint32_t latin_capital_letter_u_with_horn_and_hook_above [] = { 0x01AF, 0x0309 };
	static uint32_t latin_small_letter_u_with_horn_and_hook_above [] = { 0x01B0, 0x0309 };
	static uint32_t latin_capital_letter_u_with_horn_and_tilde [] = { 0x01AF, 0x0303 };
	static uint32_t latin_small_letter_u_with_horn_and_tilde [] = { 0x01B0, 0x0303 };
	static uint32_t latin_capital_letter_u_with_horn_and_dot_below [] = { 0x01AF, 0x0323 };
	static uint32_t latin_small_letter_u_with_horn_and_dot_below [] = { 0x01B0, 0x0323 };
	static uint32_t latin_capital_letter_y_with_grave [] = { 0x0059, 0x0300 };
	static uint32_t latin_small_letter_y_with_grave [] = { 0x0079, 0x0300 };
	static uint32_t latin_capital_letter_y_with_dot_below [] = { 0x0059, 0x0323 };
	static uint32_t latin_small_letter_y_with_dot_below [] = { 0x0079, 0x0323 };
	static uint32_t latin_capital_letter_y_with_hook_above [] = { 0x0059, 0x0309 };
	static uint32_t latin_small_letter_y_with_hook_above [] = { 0x0079, 0x0309 };
	static uint32_t latin_capital_letter_y_with_tilde [] = { 0x0059, 0x0303 };
	static uint32_t latin_small_letter_y_with_tilde [] = { 0x0079, 0x0303 };
	static uint32_t greek_small_letter_alpha_with_psili [] = { 0x03B1, 0x0313 };
	static uint32_t greek_small_letter_alpha_with_dasia [] = { 0x03B1, 0x0314 };
	static uint32_t greek_small_letter_alpha_with_psili_and_varia [] = { 0x1F00, 0x0300 };
	static uint32_t greek_small_letter_alpha_with_dasia_and_varia [] = { 0x1F01, 0x0300 };
	static uint32_t greek_small_letter_alpha_with_psili_and_oxia [] = { 0x1F00, 0x0301 };
	static uint32_t greek_small_letter_alpha_with_dasia_and_oxia [] = { 0x1F01, 0x0301 };
	static uint32_t greek_small_letter_alpha_with_psili_and_perispomeni [] = { 0x1F00, 0x0342 };
	static uint32_t greek_small_letter_alpha_with_dasia_and_perispomeni [] = { 0x1F01, 0x0342 };
	static uint32_t greek_capital_letter_alpha_with_psili [] = { 0x0391, 0x0313 };
	static uint32_t greek_capital_letter_alpha_with_dasia [] = { 0x0391, 0x0314 };
	static uint32_t greek_capital_letter_alpha_with_psili_and_varia [] = { 0x1F08, 0x0300 };
	static uint32_t greek_capital_letter_alpha_with_dasia_and_varia [] = { 0x1F09, 0x0300 };
	static uint32_t greek_capital_letter_alpha_with_psili_and_oxia [] = { 0x1F08, 0x0301 };
	static uint32_t greek_capital_letter_alpha_with_dasia_and_oxia [] = { 0x1F09, 0x0301 };
	static uint32_t greek_capital_letter_alpha_with_psili_and_perispomeni [] = { 0x1F08, 0x0342 };
	static uint32_t greek_capital_letter_alpha_with_dasia_and_perispomeni [] = { 0x1F09, 0x0342 };
	static uint32_t greek_small_letter_epsilon_with_psili [] = { 0x03B5, 0x0313 };
	static uint32_t greek_small_letter_epsilon_with_dasia [] = { 0x03B5, 0x0314 };
	static uint32_t greek_small_letter_epsilon_with_psili_and_varia [] = { 0x1F10, 0x0300 };
	static uint32_t greek_small_letter_epsilon_with_dasia_and_varia [] = { 0x1F11, 0x0300 };
	static uint32_t greek_small_letter_epsilon_with_psili_and_oxia [] = { 0x1F10, 0x0301 };
	static uint32_t greek_small_letter_epsilon_with_dasia_and_oxia [] = { 0x1F11, 0x0301 };
	static uint32_t greek_capital_letter_epsilon_with_psili [] = { 0x0395, 0x0313 };
	static uint32_t greek_capital_letter_epsilon_with_dasia [] = { 0x0395, 0x0314 };
	static uint32_t greek_capital_letter_epsilon_with_psili_and_varia [] = { 0x1F18, 0x0300 };
	static uint32_t greek_capital_letter_epsilon_with_dasia_and_varia [] = { 0x1F19, 0x0300 };
	static uint32_t greek_capital_letter_epsilon_with_psili_and_oxia [] = { 0x1F18, 0x0301 };
	static uint32_t greek_capital_letter_epsilon_with_dasia_and_oxia [] = { 0x1F19, 0x0301 };
	static uint32_t greek_small_letter_eta_with_psili [] = { 0x03B7, 0x0313 };
	static uint32_t greek_small_letter_eta_with_dasia [] = { 0x03B7, 0x0314 };
	static uint32_t greek_small_letter_eta_with_psili_and_varia [] = { 0x1F20, 0x0300 };
	static uint32_t greek_small_letter_eta_with_dasia_and_varia [] = { 0x1F21, 0x0300 };
	static uint32_t greek_small_letter_eta_with_psili_and_oxia [] = { 0x1F20, 0x0301 };
	static uint32_t greek_small_letter_eta_with_dasia_and_oxia [] = { 0x1F21, 0x0301 };
	static uint32_t greek_small_letter_eta_with_psili_and_perispomeni [] = { 0x1F20, 0x0342 };
	static uint32_t greek_small_letter_eta_with_dasia_and_perispomeni [] = { 0x1F21, 0x0342 };
	static uint32_t greek_capital_letter_eta_with_psili [] = { 0x0397, 0x0313 };
	static uint32_t greek_capital_letter_eta_with_dasia [] = { 0x0397, 0x0314 };
	static uint32_t greek_capital_letter_eta_with_psili_and_varia [] = { 0x1F28, 0x0300 };
	static uint32_t greek_capital_letter_eta_with_dasia_and_varia [] = { 0x1F29, 0x0300 };
	static uint32_t greek_capital_letter_eta_with_psili_and_oxia [] = { 0x1F28, 0x0301 };
	static uint32_t greek_capital_letter_eta_with_dasia_and_oxia [] = { 0x1F29, 0x0301 };
	static uint32_t greek_capital_letter_eta_with_psili_and_perispomeni [] = { 0x1F28, 0x0342 };
	static uint32_t greek_capital_letter_eta_with_dasia_and_perispomeni [] = { 0x1F29, 0x0342 };
	static uint32_t greek_small_letter_iota_with_psili [] = { 0x03B9, 0x0313 };
	static uint32_t greek_small_letter_iota_with_dasia [] = { 0x03B9, 0x0314 };
	static uint32_t greek_small_letter_iota_with_psili_and_varia [] = { 0x1F30, 0x0300 };
	static uint32_t greek_small_letter_iota_with_dasia_and_varia [] = { 0x1F31, 0x0300 };
	static uint32_t greek_small_letter_iota_with_psili_and_oxia [] = { 0x1F30, 0x0301 };
	static uint32_t greek_small_letter_iota_with_dasia_and_oxia [] = { 0x1F31, 0x0301 };
	static uint32_t greek_small_letter_iota_with_psili_and_perispomeni [] = { 0x1F30, 0x0342 };
	static uint32_t greek_small_letter_iota_with_dasia_and_perispomeni [] = { 0x1F31, 0x0342 };
	static uint32_t greek_capital_letter_iota_with_psili [] = { 0x0399, 0x0313 };
	static uint32_t greek_capital_letter_iota_with_dasia [] = { 0x0399, 0x0314 };
	static uint32_t greek_capital_letter_iota_with_psili_and_varia [] = { 0x1F38, 0x0300 };
	static uint32_t greek_capital_letter_iota_with_dasia_and_varia [] = { 0x1F39, 0x0300 };
	static uint32_t greek_capital_letter_iota_with_psili_and_oxia [] = { 0x1F38, 0x0301 };
	static uint32_t greek_capital_letter_iota_with_dasia_and_oxia [] = { 0x1F39, 0x0301 };
	static uint32_t greek_capital_letter_iota_with_psili_and_perispomeni [] = { 0x1F38, 0x0342 };
	static uint32_t greek_capital_letter_iota_with_dasia_and_perispomeni [] = { 0x1F39, 0x0342 };
	static uint32_t greek_small_letter_omicron_with_psili [] = { 0x03BF, 0x0313 };
	static uint32_t greek_small_letter_omicron_with_dasia [] = { 0x03BF, 0x0314 };
	static uint32_t greek_small_letter_omicron_with_psili_and_varia [] = { 0x1F40, 0x0300 };
	static uint32_t greek_small_letter_omicron_with_dasia_and_varia [] = { 0x1F41, 0x0300 };
	static uint32_t greek_small_letter_omicron_with_psili_and_oxia [] = { 0x1F40, 0x0301 };
	static uint32_t greek_small_letter_omicron_with_dasia_and_oxia [] = { 0x1F41, 0x0301 };
	static uint32_t greek_capital_letter_omicron_with_psili [] = { 0x039F, 0x0313 };
	static uint32_t greek_capital_letter_omicron_with_dasia [] = { 0x039F, 0x0314 };
	static uint32_t greek_capital_letter_omicron_with_psili_and_varia [] = { 0x1F48, 0x0300 };
	static uint32_t greek_capital_letter_omicron_with_dasia_and_varia [] = { 0x1F49, 0x0300 };
	static uint32_t greek_capital_letter_omicron_with_psili_and_oxia [] = { 0x1F48, 0x0301 };
	static uint32_t greek_capital_letter_omicron_with_dasia_and_oxia [] = { 0x1F49, 0x0301 };
	static uint32_t greek_small_letter_upsilon_with_psili [] = { 0x03C5, 0x0313 };
	static uint32_t greek_small_letter_upsilon_with_dasia [] = { 0x03C5, 0x0314 };
	static uint32_t greek_small_letter_upsilon_with_psili_and_varia [] = { 0x1F50, 0x0300 };
	static uint32_t greek_small_letter_upsilon_with_dasia_and_varia [] = { 0x1F51, 0x0300 };
	static uint32_t greek_small_letter_upsilon_with_psili_and_oxia [] = { 0x1F50, 0x0301 };
	static uint32_t greek_small_letter_upsilon_with_dasia_and_oxia [] = { 0x1F51, 0x0301 };
	static uint32_t greek_small_letter_upsilon_with_psili_and_perispomeni [] = { 0x1F50, 0x0342 };
	static uint32_t greek_small_letter_upsilon_with_dasia_and_perispomeni [] = { 0x1F51, 0x0342 };
	static uint32_t greek_capital_letter_upsilon_with_dasia [] = { 0x03A5, 0x0314 };
	static uint32_t greek_capital_letter_upsilon_with_dasia_and_varia [] = { 0x1F59, 0x0300 };
	static uint32_t greek_capital_letter_upsilon_with_dasia_and_oxia [] = { 0x1F59, 0x0301 };
	static uint32_t greek_capital_letter_upsilon_with_dasia_and_perispomeni [] = { 0x1F59, 0x0342 };
	static uint32_t greek_small_letter_omega_with_psili [] = { 0x03C9, 0x0313 };
	static uint32_t greek_small_letter_omega_with_dasia [] = { 0x03C9, 0x0314 };
	static uint32_t greek_small_letter_omega_with_psili_and_varia [] = { 0x1F60, 0x0300 };
	static uint32_t greek_small_letter_omega_with_dasia_and_varia [] = { 0x1F61, 0x0300 };
	static uint32_t greek_small_letter_omega_with_psili_and_oxia [] = { 0x1F60, 0x0301 };
	static uint32_t greek_small_letter_omega_with_dasia_and_oxia [] = { 0x1F61, 0x0301 };
	static uint32_t greek_small_letter_omega_with_psili_and_perispomeni [] = { 0x1F60, 0x0342 };
	static uint32_t greek_small_letter_omega_with_dasia_and_perispomeni [] = { 0x1F61, 0x0342 };
	static uint32_t greek_capital_letter_omega_with_psili [] = { 0x03A9, 0x0313 };
	static uint32_t greek_capital_letter_omega_with_dasia [] = { 0x03A9, 0x0314 };
	static uint32_t greek_capital_letter_omega_with_psili_and_varia [] = { 0x1F68, 0x0300 };
	static uint32_t greek_capital_letter_omega_with_dasia_and_varia [] = { 0x1F69, 0x0300 };
	static uint32_t greek_capital_letter_omega_with_psili_and_oxia [] = { 0x1F68, 0x0301 };
	static uint32_t greek_capital_letter_omega_with_dasia_and_oxia [] = { 0x1F69, 0x0301 };
	static uint32_t greek_capital_letter_omega_with_psili_and_perispomeni [] = { 0x1F68, 0x0342 };
	static uint32_t greek_capital_letter_omega_with_dasia_and_perispomeni [] = { 0x1F69, 0x0342 };
	static uint32_t greek_small_letter_alpha_with_varia [] = { 0x03B1, 0x0300 };
	static uint32_t greek_small_letter_alpha_with_oxia [] = { 0x03AC };
	static uint32_t greek_small_letter_epsilon_with_varia [] = { 0x03B5, 0x0300 };
	static uint32_t greek_small_letter_epsilon_with_oxia [] = { 0x03AD };
	static uint32_t greek_small_letter_eta_with_varia [] = { 0x03B7, 0x0300 };
	static uint32_t greek_small_letter_eta_with_oxia [] = { 0x03AE };
	static uint32_t greek_small_letter_iota_with_varia [] = { 0x03B9, 0x0300 };
	static uint32_t greek_small_letter_iota_with_oxia [] = { 0x03AF };
	static uint32_t greek_small_letter_omicron_with_varia [] = { 0x03BF, 0x0300 };
	static uint32_t greek_small_letter_omicron_with_oxia [] = { 0x03CC };
	static uint32_t greek_small_letter_upsilon_with_varia [] = { 0x03C5, 0x0300 };
	static uint32_t greek_small_letter_upsilon_with_oxia [] = { 0x03CD };
	static uint32_t greek_small_letter_omega_with_varia [] = { 0x03C9, 0x0300 };
	static uint32_t greek_small_letter_omega_with_oxia [] = { 0x03CE };
	static uint32_t greek_small_letter_alpha_with_psili_and_ypogegrammeni [] = { 0x1F00, 0x0345 };
	static uint32_t greek_small_letter_alpha_with_dasia_and_ypogegrammeni [] = { 0x1F01, 0x0345 };
	static uint32_t greek_small_letter_alpha_with_psili_and_varia_and_ypogegrammeni [] = { 0x1F02, 0x0345 };
	static uint32_t greek_small_letter_alpha_with_dasia_and_varia_and_ypogegrammeni [] = { 0x1F03, 0x0345 };
	static uint32_t greek_small_letter_alpha_with_psili_and_oxia_and_ypogegrammeni [] = { 0x1F04, 0x0345 };
	static uint32_t greek_small_letter_alpha_with_dasia_and_oxia_and_ypogegrammeni [] = { 0x1F05, 0x0345 };
	static uint32_t greek_small_letter_alpha_with_psili_and_perispomeni_and_ypogegrammeni [] = { 0x1F06, 0x0345 };
	static uint32_t greek_small_letter_alpha_with_dasia_and_perispomeni_and_ypogegrammeni [] = { 0x1F07, 0x0345 };
	static uint32_t greek_capital_letter_alpha_with_psili_and_prosgegrammeni [] = { 0x1F08, 0x0345 };
	static uint32_t greek_capital_letter_alpha_with_dasia_and_prosgegrammeni [] = { 0x1F09, 0x0345 };
	static uint32_t greek_capital_letter_alpha_with_psili_and_varia_and_prosgegrammeni [] = { 0x1F0A, 0x0345 };
	static uint32_t greek_capital_letter_alpha_with_dasia_and_varia_and_prosgegrammeni [] = { 0x1F0B, 0x0345 };
	static uint32_t greek_capital_letter_alpha_with_psili_and_oxia_and_prosgegrammeni [] = { 0x1F0C, 0x0345 };
	static uint32_t greek_capital_letter_alpha_with_dasia_and_oxia_and_prosgegrammeni [] = { 0x1F0D, 0x0345 };
	static uint32_t greek_capital_letter_alpha_with_psili_and_perispomeni_and_prosgegrammeni [] = { 0x1F0E, 0x0345 };
	static uint32_t greek_capital_letter_alpha_with_dasia_and_perispomeni_and_prosgegrammeni [] = { 0x1F0F, 0x0345 };
	static uint32_t greek_small_letter_eta_with_psili_and_ypogegrammeni [] = { 0x1F20, 0x0345 };
	static uint32_t greek_small_letter_eta_with_dasia_and_ypogegrammeni [] = { 0x1F21, 0x0345 };
	static uint32_t greek_small_letter_eta_with_psili_and_varia_and_ypogegrammeni [] = { 0x1F22, 0x0345 };
	static uint32_t greek_small_letter_eta_with_dasia_and_varia_and_ypogegrammeni [] = { 0x1F23, 0x0345 };
	static uint32_t greek_small_letter_eta_with_psili_and_oxia_and_ypogegrammeni [] = { 0x1F24, 0x0345 };
	static uint32_t greek_small_letter_eta_with_dasia_and_oxia_and_ypogegrammeni [] = { 0x1F25, 0x0345 };
	static uint32_t greek_small_letter_eta_with_psili_and_perispomeni_and_ypogegrammeni [] = { 0x1F26, 0x0345 };
	static uint32_t greek_small_letter_eta_with_dasia_and_perispomeni_and_ypogegrammeni [] = { 0x1F27, 0x0345 };
	static uint32_t greek_capital_letter_eta_with_psili_and_prosgegrammeni [] = { 0x1F28, 0x0345 };
	static uint32_t greek_capital_letter_eta_with_dasia_and_prosgegrammeni [] = { 0x1F29, 0x0345 };
	static uint32_t greek_capital_letter_eta_with_psili_and_varia_and_prosgegrammeni [] = { 0x1F2A, 0x0345 };
	static uint32_t greek_capital_letter_eta_with_dasia_and_varia_and_prosgegrammeni [] = { 0x1F2B, 0x0345 };
	static uint32_t greek_capital_letter_eta_with_psili_and_oxia_and_prosgegrammeni [] = { 0x1F2C, 0x0345 };
	static uint32_t greek_capital_letter_eta_with_dasia_and_oxia_and_prosgegrammeni [] = { 0x1F2D, 0x0345 };
	static uint32_t greek_capital_letter_eta_with_psili_and_perispomeni_and_prosgegrammeni [] = { 0x1F2E, 0x0345 };
	static uint32_t greek_capital_letter_eta_with_dasia_and_perispomeni_and_prosgegrammeni [] = { 0x1F2F, 0x0345 };
	static uint32_t greek_small_letter_omega_with_psili_and_ypogegrammeni [] = { 0x1F60, 0x0345 };
	static uint32_t greek_small_letter_omega_with_dasia_and_ypogegrammeni [] = { 0x1F61, 0x0345 };
	static uint32_t greek_small_letter_omega_with_psili_and_varia_and_ypogegrammeni [] = { 0x1F62, 0x0345 };
	static uint32_t greek_small_letter_omega_with_dasia_and_varia_and_ypogegrammeni [] = { 0x1F63, 0x0345 };
	static uint32_t greek_small_letter_omega_with_psili_and_oxia_and_ypogegrammeni [] = { 0x1F64, 0x0345 };
	static uint32_t greek_small_letter_omega_with_dasia_and_oxia_and_ypogegrammeni [] = { 0x1F65, 0x0345 };
	static uint32_t greek_small_letter_omega_with_psili_and_perispomeni_and_ypogegrammeni [] = { 0x1F66, 0x0345 };
	static uint32_t greek_small_letter_omega_with_dasia_and_perispomeni_and_ypogegrammeni [] = { 0x1F67, 0x0345 };
	static uint32_t greek_capital_letter_omega_with_psili_and_prosgegrammeni [] = { 0x1F68, 0x0345 };
	static uint32_t greek_capital_letter_omega_with_dasia_and_prosgegrammeni [] = { 0x1F69, 0x0345 };
	static uint32_t greek_capital_letter_omega_with_psili_and_varia_and_prosgegrammeni [] = { 0x1F6A, 0x0345 };
	static uint32_t greek_capital_letter_omega_with_dasia_and_varia_and_prosgegrammeni [] = { 0x1F6B, 0x0345 };
	static uint32_t greek_capital_letter_omega_with_psili_and_oxia_and_prosgegrammeni [] = { 0x1F6C, 0x0345 };
	static uint32_t greek_capital_letter_omega_with_dasia_and_oxia_and_prosgegrammeni [] = { 0x1F6D, 0x0345 };
	static uint32_t greek_capital_letter_omega_with_psili_and_perispomeni_and_prosgegrammeni [] = { 0x1F6E, 0x0345 };
	static uint32_t greek_capital_letter_omega_with_dasia_and_perispomeni_and_prosgegrammeni [] = { 0x1F6F, 0x0345 };
	static uint32_t greek_small_letter_alpha_with_vrachy [] = { 0x03B1, 0x0306 };
	static uint32_t greek_small_letter_alpha_with_macron [] = { 0x03B1, 0x0304 };
	static uint32_t greek_small_letter_alpha_with_varia_and_ypogegrammeni [] = { 0x1F70, 0x0345 };
	static uint32_t greek_small_letter_alpha_with_ypogegrammeni [] = { 0x03B1, 0x0345 };
	static uint32_t greek_small_letter_alpha_with_oxia_and_ypogegrammeni [] = { 0x03AC, 0x0345 };
	static uint32_t greek_small_letter_alpha_with_perispomeni [] = { 0x03B1, 0x0342 };
	static uint32_t greek_small_letter_alpha_with_perispomeni_and_ypogegrammeni [] = { 0x1FB6, 0x0345 };
	static uint32_t greek_capital_letter_alpha_with_vrachy [] = { 0x0391, 0x0306 };
	static uint32_t greek_capital_letter_alpha_with_macron [] = { 0x0391, 0x0304 };
	static uint32_t greek_capital_letter_alpha_with_varia [] = { 0x0391, 0x0300 };
	static uint32_t greek_capital_letter_alpha_with_oxia [] = { 0x0386 };
	static uint32_t greek_capital_letter_alpha_with_prosgegrammeni [] = { 0x0391, 0x0345 };
	static uint32_t greek_koronis [] = { 0x0020, 0x0313 };
	static uint32_t greek_prosgegrammeni [] = { 0x03B9 };
	static uint32_t greek_psili [] = { 0x0020, 0x0313 };
	static uint32_t greek_perispomeni [] = { 0x0020, 0x0342 };
	static uint32_t greek_dialytika_and_perispomeni [] = { 0x00A8, 0x0342 };
	static uint32_t greek_small_letter_eta_with_varia_and_ypogegrammeni [] = { 0x1F74, 0x0345 };
	static uint32_t greek_small_letter_eta_with_ypogegrammeni [] = { 0x03B7, 0x0345 };
	static uint32_t greek_small_letter_eta_with_oxia_and_ypogegrammeni [] = { 0x03AE, 0x0345 };
	static uint32_t greek_small_letter_eta_with_perispomeni [] = { 0x03B7, 0x0342 };
	static uint32_t greek_small_letter_eta_with_perispomeni_and_ypogegrammeni [] = { 0x1FC6, 0x0345 };
	static uint32_t greek_capital_letter_epsilon_with_varia [] = { 0x0395, 0x0300 };
	static uint32_t greek_capital_letter_epsilon_with_oxia [] = { 0x0388 };
	static uint32_t greek_capital_letter_eta_with_varia [] = { 0x0397, 0x0300 };
	static uint32_t greek_capital_letter_eta_with_oxia [] = { 0x0389 };
	static uint32_t greek_capital_letter_eta_with_prosgegrammeni [] = { 0x0397, 0x0345 };
	static uint32_t greek_psili_and_varia [] = { 0x1FBF, 0x0300 };
	static uint32_t greek_psili_and_oxia [] = { 0x1FBF, 0x0301 };
	static uint32_t greek_psili_and_perispomeni [] = { 0x1FBF, 0x0342 };
	static uint32_t greek_small_letter_iota_with_vrachy [] = { 0x03B9, 0x0306 };
	static uint32_t greek_small_letter_iota_with_macron [] = { 0x03B9, 0x0304 };
	static uint32_t greek_small_letter_iota_with_dialytika_and_varia [] = { 0x03CA, 0x0300 };
	static uint32_t greek_small_letter_iota_with_dialytika_and_oxia [] = { 0x0390 };
	static uint32_t greek_small_letter_iota_with_perispomeni [] = { 0x03B9, 0x0342 };
	static uint32_t greek_small_letter_iota_with_dialytika_and_perispomeni [] = { 0x03CA, 0x0342 };
	static uint32_t greek_capital_letter_iota_with_vrachy [] = { 0x0399, 0x0306 };
	static uint32_t greek_capital_letter_iota_with_macron [] = { 0x0399, 0x0304 };
	static uint32_t greek_capital_letter_iota_with_varia [] = { 0x0399, 0x0300 };
	static uint32_t greek_capital_letter_iota_with_oxia [] = { 0x038A };
	static uint32_t greek_dasia_and_varia [] = { 0x1FFE, 0x0300 };
	static uint32_t greek_dasia_and_oxia [] = { 0x1FFE, 0x0301 };
	static uint32_t greek_dasia_and_perispomeni [] = { 0x1FFE, 0x0342 };
	static uint32_t greek_small_letter_upsilon_with_vrachy [] = { 0x03C5, 0x0306 };
	static uint32_t greek_small_letter_upsilon_with_macron [] = { 0x03C5, 0x0304 };
	static uint32_t greek_small_letter_upsilon_with_dialytika_and_varia [] = { 0x03CB, 0x0300 };
	static uint32_t greek_small_letter_upsilon_with_dialytika_and_oxia [] = { 0x03B0 };
	static uint32_t greek_small_letter_rho_with_psili [] = { 0x03C1, 0x0313 };
	static uint32_t greek_small_letter_rho_with_dasia [] = { 0x03C1, 0x0314 };
	static uint32_t greek_small_letter_upsilon_with_perispomeni [] = { 0x03C5, 0x0342 };
	static uint32_t greek_small_letter_upsilon_with_dialytika_and_perispomeni [] = { 0x03CB, 0x0342 };
	static uint32_t greek_capital_letter_upsilon_with_vrachy [] = { 0x03A5, 0x0306 };
	static uint32_t greek_capital_letter_upsilon_with_macron [] = { 0x03A5, 0x0304 };
	static uint32_t greek_capital_letter_upsilon_with_varia [] = { 0x03A5, 0x0300 };
	static uint32_t greek_capital_letter_upsilon_with_oxia [] = { 0x038E };
	static uint32_t greek_capital_letter_rho_with_dasia [] = { 0x03A1, 0x0314 };
	static uint32_t greek_dialytika_and_varia [] = { 0x00A8, 0x0300 };
	static uint32_t greek_dialytika_and_oxia [] = { 0x0385 };
	static uint32_t greek_varia [] = { 0x0060 };
	static uint32_t greek_small_letter_omega_with_varia_and_ypogegrammeni [] = { 0x1F7C, 0x0345 };
	static uint32_t greek_small_letter_omega_with_ypogegrammeni [] = { 0x03C9, 0x0345 };
	static uint32_t greek_small_letter_omega_with_oxia_and_ypogegrammeni [] = { 0x03CE, 0x0345 };
	static uint32_t greek_small_letter_omega_with_perispomeni [] = { 0x03C9, 0x0342 };
	static uint32_t greek_small_letter_omega_with_perispomeni_and_ypogegrammeni [] = { 0x1FF6, 0x0345 };
	static uint32_t greek_capital_letter_omicron_with_varia [] = { 0x039F, 0x0300 };
	static uint32_t greek_capital_letter_omicron_with_oxia [] = { 0x038C };
	static uint32_t greek_capital_letter_omega_with_varia [] = { 0x03A9, 0x0300 };
	static uint32_t greek_capital_letter_omega_with_oxia [] = { 0x038F };
	static uint32_t greek_capital_letter_omega_with_prosgegrammeni [] = { 0x03A9, 0x0345 };
	static uint32_t greek_oxia [] = { 0x00B4 };
	static uint32_t greek_dasia [] = { 0x0020, 0x0314 };
	static uint32_t en_quad [] = { 0x2002 };
	static uint32_t em_quad [] = { 0x2003 };
	static uint32_t en_space [] = { 0x0020 };
	static uint32_t em_space [] = { 0x0020 };
	static uint32_t three_per_em_space [] = { 0x0020 };
	static uint32_t four_per_em_space [] = { 0x0020 };
	static uint32_t six_per_em_space [] = { 0x0020 };
	static uint32_t figure_space [] = { 0x0020 };
	static uint32_t punctuation_space [] = { 0x0020 };
	static uint32_t thin_space [] = { 0x0020 };
	static uint32_t hair_space [] = { 0x0020 };
	static uint32_t non_breaking_hyphen [] = { 0x2010 };
	static uint32_t double_low_line [] = { 0x0020, 0x0333 };
	static uint32_t one_dot_leader [] = { 0x002E };
	static uint32_t two_dot_leader [] = { 0x002E, 0x002E };
	static uint32_t horizontal_ellipsis [] = { 0x002E, 0x002E, 0x002E };
	static uint32_t narrow_no_break_space [] = { 0x0020 };
	static uint32_t double_prime [] = { 0x2032, 0x2032 };
	static uint32_t triple_prime [] = { 0x2032, 0x2032, 0x2032 };
	static uint32_t reversed_double_prime [] = { 0x2035, 0x2035 };
	static uint32_t reversed_triple_prime [] = { 0x2035, 0x2035, 0x2035 };
	static uint32_t double_exclamation_mark [] = { 0x0021, 0x0021 };
	static uint32_t overline [] = { 0x0020, 0x0305 };
	static uint32_t double_question_mark [] = { 0x003F, 0x003F };
	static uint32_t question_exclamation_mark [] = { 0x003F, 0x0021 };
	static uint32_t exclamation_question_mark [] = { 0x0021, 0x003F };
	static uint32_t quadruple_prime [] = { 0x2032, 0x2032, 0x2032, 0x2032 };
	static uint32_t medium_mathematical_space [] = { 0x0020 };
	static uint32_t superscript_zero [] = { 0x0030 };
	static uint32_t superscript_latin_small_letter_i [] = { 0x0069 };
	static uint32_t superscript_four [] = { 0x0034 };
	static uint32_t superscript_five [] = { 0x0035 };
	static uint32_t superscript_six [] = { 0x0036 };
	static uint32_t superscript_seven [] = { 0x0037 };
	static uint32_t superscript_eight [] = { 0x0038 };
	static uint32_t superscript_nine [] = { 0x0039 };
	static uint32_t superscript_plus_sign [] = { 0x002B };
	static uint32_t superscript_minus [] = { 0x2212 };
	static uint32_t superscript_equals_sign [] = { 0x003D };
	static uint32_t superscript_left_parenthesis [] = { 0x0028 };
	static uint32_t superscript_right_parenthesis [] = { 0x0029 };
	static uint32_t superscript_latin_small_letter_n [] = { 0x006E };
	static uint32_t subscript_zero [] = { 0x0030 };
	static uint32_t subscript_one [] = { 0x0031 };
	static uint32_t subscript_two [] = { 0x0032 };
	static uint32_t subscript_three [] = { 0x0033 };
	static uint32_t subscript_four [] = { 0x0034 };
	static uint32_t subscript_five [] = { 0x0035 };
	static uint32_t subscript_six [] = { 0x0036 };
	static uint32_t subscript_seven [] = { 0x0037 };
	static uint32_t subscript_eight [] = { 0x0038 };
	static uint32_t subscript_nine [] = { 0x0039 };
	static uint32_t subscript_plus_sign [] = { 0x002B };
	static uint32_t subscript_minus [] = { 0x2212 };
	static uint32_t subscript_equals_sign [] = { 0x003D };
	static uint32_t subscript_left_parenthesis [] = { 0x0028 };
	static uint32_t subscript_right_parenthesis [] = { 0x0029 };
	static uint32_t latin_subscript_small_letter_a [] = { 0x0061 };
	static uint32_t latin_subscript_small_letter_e [] = { 0x0065 };
	static uint32_t latin_subscript_small_letter_o [] = { 0x006F };
	static uint32_t latin_subscript_small_letter_x [] = { 0x0078 };
	static uint32_t latin_subscript_small_letter_schwa [] = { 0x0259 };
	static uint32_t latin_subscript_small_letter_h [] = { 0x0068 };
	static uint32_t latin_subscript_small_letter_k [] = { 0x006B };
	static uint32_t latin_subscript_small_letter_l [] = { 0x006C };
	static uint32_t latin_subscript_small_letter_m [] = { 0x006D };
	static uint32_t latin_subscript_small_letter_n [] = { 0x006E };
	static uint32_t latin_subscript_small_letter_p [] = { 0x0070 };
	static uint32_t latin_subscript_small_letter_s [] = { 0x0073 };
	static uint32_t latin_subscript_small_letter_t [] = { 0x0074 };
	static uint32_t rupee_sign [] = { 0x0052, 0x0073 };
	static uint32_t account_of [] = { 0x0061, 0x002F, 0x0063 };
	static uint32_t addressed_to_the_subject [] = { 0x0061, 0x002F, 0x0073 };
	static uint32_t double_struck_capital_c [] = { 0x0043 };
	static uint32_t degree_celsius [] = { 0x00B0, 0x0043 };
	static uint32_t care_of [] = { 0x0063, 0x002F, 0x006F };
	static uint32_t cada_una [] = { 0x0063, 0x002F, 0x0075 };
	static uint32_t euler_constant [] = { 0x0190 };
	static uint32_t degree_fahrenheit [] = { 0x00B0, 0x0046 };
	static uint32_t script_small_g [] = { 0x0067 };
	static uint32_t script_capital_h [] = { 0x0048 };
	static uint32_t black_letter_capital_h [] = { 0x0048 };
	static uint32_t double_struck_capital_h [] = { 0x0048 };
	static uint32_t planck_constant [] = { 0x0068 };
	static uint32_t planck_constant_over_two_pi [] = { 0x0127 };
	static uint32_t script_capital_i [] = { 0x0049 };
	static uint32_t black_letter_capital_i [] = { 0x0049 };
	static uint32_t script_capital_l [] = { 0x004C };
	static uint32_t script_small_l [] = { 0x006C };
	static uint32_t double_struck_capital_n [] = { 0x004E };
	static uint32_t numero_sign [] = { 0x004E, 0x006F };
	static uint32_t double_struck_capital_p [] = { 0x0050 };
	static uint32_t double_struck_capital_q [] = { 0x0051 };
	static uint32_t script_capital_r [] = { 0x0052 };
	static uint32_t black_letter_capital_r [] = { 0x0052 };
	static uint32_t double_struck_capital_r [] = { 0x0052 };
	static uint32_t service_mark [] = { 0x0053, 0x004D };
	static uint32_t telephone_sign [] = { 0x0054, 0x0045, 0x004C };
	static uint32_t trade_mark_sign [] = { 0x0054, 0x004D };
	static uint32_t double_struck_capital_z [] = { 0x005A };
	static uint32_t ohm_sign [] = { 0x03A9 };
	static uint32_t black_letter_capital_z [] = { 0x005A };
	static uint32_t kelvin_sign [] = { 0x004B };
	static uint32_t angstrom_sign [] = { 0x00C5 };
	static uint32_t script_capital_b [] = { 0x0042 };
	static uint32_t black_letter_capital_c [] = { 0x0043 };
	static uint32_t script_small_e [] = { 0x0065 };
	static uint32_t script_capital_e [] = { 0x0045 };
	static uint32_t script_capital_f [] = { 0x0046 };
	static uint32_t script_capital_m [] = { 0x004D };
	static uint32_t script_small_o [] = { 0x006F };
	static uint32_t alef_symbol [] = { 0x05D0 };
	static uint32_t bet_symbol [] = { 0x05D1 };
	static uint32_t gimel_symbol [] = { 0x05D2 };
	static uint32_t dalet_symbol [] = { 0x05D3 };
	static uint32_t information_source [] = { 0x0069 };
	static uint32_t facsimile_sign [] = { 0x0046, 0x0041, 0x0058 };
	static uint32_t double_struck_small_pi [] = { 0x03C0 };
	static uint32_t double_struck_small_gamma [] = { 0x03B3 };
	static uint32_t double_struck_capital_gamma [] = { 0x0393 };
	static uint32_t double_struck_capital_pi [] = { 0x03A0 };
	static uint32_t double_struck_n_ary_summation [] = { 0x2211 };
	static uint32_t double_struck_italic_capital_d [] = { 0x0044 };
	static uint32_t double_struck_italic_small_d [] = { 0x0064 };
	static uint32_t double_struck_italic_small_e [] = { 0x0065 };
	static uint32_t double_struck_italic_small_i [] = { 0x0069 };
	static uint32_t double_struck_italic_small_j [] = { 0x006A };
	static uint32_t vulgar_fraction_one_seventh [] = { 0x0031, 0x2044, 0x0037 };
	static uint32_t vulgar_fraction_one_ninth [] = { 0x0031, 0x2044, 0x0039 };
	static uint32_t vulgar_fraction_one_tenth [] = { 0x0031, 0x2044, 0x0031, 0x0030 };
	static uint32_t vulgar_fraction_one_third [] = { 0x0031, 0x2044, 0x0033 };
	static uint32_t vulgar_fraction_two_thirds [] = { 0x0032, 0x2044, 0x0033 };
	static uint32_t vulgar_fraction_one_fifth [] = { 0x0031, 0x2044, 0x0035 };
	static uint32_t vulgar_fraction_two_fifths [] = { 0x0032, 0x2044, 0x0035 };
	static uint32_t vulgar_fraction_three_fifths [] = { 0x0033, 0x2044, 0x0035 };
	static uint32_t vulgar_fraction_four_fifths [] = { 0x0034, 0x2044, 0x0035 };
	static uint32_t vulgar_fraction_one_sixth [] = { 0x0031, 0x2044, 0x0036 };
	static uint32_t vulgar_fraction_five_sixths [] = { 0x0035, 0x2044, 0x0036 };
	static uint32_t vulgar_fraction_one_eighth [] = { 0x0031, 0x2044, 0x0038 };
	static uint32_t vulgar_fraction_three_eighths [] = { 0x0033, 0x2044, 0x0038 };
	static uint32_t vulgar_fraction_five_eighths [] = { 0x0035, 0x2044, 0x0038 };
	static uint32_t vulgar_fraction_seven_eighths [] = { 0x0037, 0x2044, 0x0038 };
	static uint32_t fraction_numerator_one [] = { 0x0031, 0x2044 };
	static uint32_t roman_numeral_one [] = { 0x0049 };
	static uint32_t roman_numeral_two [] = { 0x0049, 0x0049 };
	static uint32_t roman_numeral_three [] = { 0x0049, 0x0049, 0x0049 };
	static uint32_t roman_numeral_four [] = { 0x0049, 0x0056 };
	static uint32_t roman_numeral_five [] = { 0x0056 };
	static uint32_t roman_numeral_six [] = { 0x0056, 0x0049 };
	static uint32_t roman_numeral_seven [] = { 0x0056, 0x0049, 0x0049 };
	static uint32_t roman_numeral_eight [] = { 0x0056, 0x0049, 0x0049, 0x0049 };
	static uint32_t roman_numeral_nine [] = { 0x0049, 0x0058 };
	static uint32_t roman_numeral_ten [] = { 0x0058 };
	static uint32_t roman_numeral_eleven [] = { 0x0058, 0x0049 };
	static uint32_t roman_numeral_twelve [] = { 0x0058, 0x0049, 0x0049 };
	static uint32_t roman_numeral_fifty [] = { 0x004C };
	static uint32_t roman_numeral_one_hundred [] = { 0x0043 };
	static uint32_t roman_numeral_five_hundred [] = { 0x0044 };
	static uint32_t roman_numeral_one_thousand [] = { 0x004D };
	static uint32_t small_roman_numeral_one [] = { 0x0069 };
	static uint32_t small_roman_numeral_two [] = { 0x0069, 0x0069 };
	static uint32_t small_roman_numeral_three [] = { 0x0069, 0x0069, 0x0069 };
	static uint32_t small_roman_numeral_four [] = { 0x0069, 0x0076 };
	static uint32_t small_roman_numeral_five [] = { 0x0076 };
	static uint32_t small_roman_numeral_six [] = { 0x0076, 0x0069 };
	static uint32_t small_roman_numeral_seven [] = { 0x0076, 0x0069, 0x0069 };
	static uint32_t small_roman_numeral_eight [] = { 0x0076, 0x0069, 0x0069, 0x0069 };
	static uint32_t small_roman_numeral_nine [] = { 0x0069, 0x0078 };
	static uint32_t small_roman_numeral_ten [] = { 0x0078 };
	static uint32_t small_roman_numeral_eleven [] = { 0x0078, 0x0069 };
	static uint32_t small_roman_numeral_twelve [] = { 0x0078, 0x0069, 0x0069 };
	static uint32_t small_roman_numeral_fifty [] = { 0x006C };
	static uint32_t small_roman_numeral_one_hundred [] = { 0x0063 };
	static uint32_t small_roman_numeral_five_hundred [] = { 0x0064 };
	static uint32_t small_roman_numeral_one_thousand [] = { 0x006D };
	static uint32_t vulgar_fraction_zero_thirds [] = { 0x0030, 0x2044, 0x0033 };
	static uint32_t leftwards_arrow_with_stroke [] = { 0x2190, 0x0338 };
	static uint32_t rightwards_arrow_with_stroke [] = { 0x2192, 0x0338 };
	static uint32_t left_right_arrow_with_stroke [] = { 0x2194, 0x0338 };
	static uint32_t leftwards_double_arrow_with_stroke [] = { 0x21D0, 0x0338 };
	static uint32_t left_right_double_arrow_with_stroke [] = { 0x21D4, 0x0338 };
	static uint32_t rightwards_double_arrow_with_stroke [] = { 0x21D2, 0x0338 };
	static uint32_t there_does_not_exist [] = { 0x2203, 0x0338 };
	static uint32_t not_an_element_of [] = { 0x2208, 0x0338 };
	static uint32_t does_not_contain_as_member [] = { 0x220B, 0x0338 };
	static uint32_t does_not_divide [] = { 0x2223, 0x0338 };
	static uint32_t not_parallel_to [] = { 0x2225, 0x0338 };
	static uint32_t double_integral [] = { 0x222B, 0x222B };
	static uint32_t triple_integral [] = { 0x222B, 0x222B, 0x222B };
	static uint32_t surface_integral [] = { 0x222E, 0x222E };
	static uint32_t volume_integral [] = { 0x222E, 0x222E, 0x222E };
	static uint32_t not_tilde [] = { 0x223C, 0x0338 };
	static uint32_t not_asymptotically_equal_to [] = { 0x2243, 0x0338 };
	static uint32_t neither_approximately_nor_actually_equal_to [] = { 0x2245, 0x0338 };
	static uint32_t not_almost_equal_to [] = { 0x2248, 0x0338 };
	static uint32_t not_equal_to [] = { 0x003D, 0x0338 };
	static uint32_t not_identical_to [] = { 0x2261, 0x0338 };
	static uint32_t not_equivalent_to [] = { 0x224D, 0x0338 };
	static uint32_t not_less_than [] = { 0x003C, 0x0338 };
	static uint32_t not_greater_than [] = { 0x003E, 0x0338 };
	static uint32_t neither_less_than_nor_equal_to [] = { 0x2264, 0x0338 };
	static uint32_t neither_greater_than_nor_equal_to [] = { 0x2265, 0x0338 };
	static uint32_t neither_less_than_nor_equivalent_to [] = { 0x2272, 0x0338 };
	static uint32_t neither_greater_than_nor_equivalent_to [] = { 0x2273, 0x0338 };
	static uint32_t neither_less_than_nor_greater_than [] = { 0x2276, 0x0338 };
	static uint32_t neither_greater_than_nor_less_than [] = { 0x2277, 0x0338 };
	static uint32_t does_not_precede [] = { 0x227A, 0x0338 };
	static uint32_t does_not_succeed [] = { 0x227B, 0x0338 };
	static uint32_t not_a_subset_of [] = { 0x2282, 0x0338 };
	static uint32_t not_a_superset_of [] = { 0x2283, 0x0338 };
	static uint32_t neither_a_subset_of_nor_equal_to [] = { 0x2286, 0x0338 };
	static uint32_t neither_a_superset_of_nor_equal_to [] = { 0x2287, 0x0338 };
	static uint32_t does_not_prove [] = { 0x22A2, 0x0338 };
	static uint32_t not_true [] = { 0x22A8, 0x0338 };
	static uint32_t does_not_force [] = { 0x22A9, 0x0338 };
	static uint32_t negated_double_vertical_bar_double_right_turnstile [] = { 0x22AB, 0x0338 };
	static uint32_t does_not_precede_or_equal [] = { 0x227C, 0x0338 };
	static uint32_t does_not_succeed_or_equal [] = { 0x227D, 0x0338 };
	static uint32_t not_square_image_of_or_equal_to [] = { 0x2291, 0x0338 };
	static uint32_t not_square_original_of_or_equal_to [] = { 0x2292, 0x0338 };
	static uint32_t not_normal_subgroup_of [] = { 0x22B2, 0x0338 };
	static uint32_t does_not_contain_as_normal_subgroup [] = { 0x22B3, 0x0338 };
	static uint32_t not_normal_subgroup_of_or_equal_to [] = { 0x22B4, 0x0338 };
	static uint32_t does_not_contain_as_normal_subgroup_or_equal [] = { 0x22B5, 0x0338 };
	static uint32_t left_pointing_angle_bracket [] = { 0x3008 };
	static uint32_t right_pointing_angle_bracket [] = { 0x3009 };
	static uint32_t circled_digit_one [] = { 0x0031 };
	static uint32_t circled_digit_two [] = { 0x0032 };
	static uint32_t circled_digit_three [] = { 0x0033 };
	static uint32_t circled_digit_four [] = { 0x0034 };
	static uint32_t circled_digit_five [] = { 0x0035 };
	static uint32_t circled_digit_six [] = { 0x0036 };
	static uint32_t circled_digit_seven [] = { 0x0037 };
	static uint32_t circled_digit_eight [] = { 0x0038 };
	static uint32_t circled_digit_nine [] = { 0x0039 };
	static uint32_t circled_number_ten [] = { 0x0031, 0x0030 };
	static uint32_t circled_number_eleven [] = { 0x0031, 0x0031 };
	static uint32_t circled_number_twelve [] = { 0x0031, 0x0032 };
	static uint32_t circled_number_thirteen [] = { 0x0031, 0x0033 };
	static uint32_t circled_number_fourteen [] = { 0x0031, 0x0034 };
	static uint32_t circled_number_fifteen [] = { 0x0031, 0x0035 };
	static uint32_t circled_number_sixteen [] = { 0x0031, 0x0036 };
	static uint32_t circled_number_seventeen [] = { 0x0031, 0x0037 };
	static uint32_t circled_number_eighteen [] = { 0x0031, 0x0038 };
	static uint32_t circled_number_nineteen [] = { 0x0031, 0x0039 };
	static uint32_t circled_number_twenty [] = { 0x0032, 0x0030 };
	static uint32_t parenthesized_digit_one [] = { 0x0028, 0x0031, 0x0029 };
	static uint32_t parenthesized_digit_two [] = { 0x0028, 0x0032, 0x0029 };
	static uint32_t parenthesized_digit_three [] = { 0x0028, 0x0033, 0x0029 };
	static uint32_t parenthesized_digit_four [] = { 0x0028, 0x0034, 0x0029 };
	static uint32_t parenthesized_digit_five [] = { 0x0028, 0x0035, 0x0029 };
	static uint32_t parenthesized_digit_six [] = { 0x0028, 0x0036, 0x0029 };
	static uint32_t parenthesized_digit_seven [] = { 0x0028, 0x0037, 0x0029 };
	static uint32_t parenthesized_digit_eight [] = { 0x0028, 0x0038, 0x0029 };
	static uint32_t parenthesized_digit_nine [] = { 0x0028, 0x0039, 0x0029 };
	static uint32_t parenthesized_number_ten [] = { 0x0028, 0x0031, 0x0030, 0x0029 };
	static uint32_t parenthesized_number_eleven [] = { 0x0028, 0x0031, 0x0031, 0x0029 };
	static uint32_t parenthesized_number_twelve [] = { 0x0028, 0x0031, 0x0032, 0x0029 };
	static uint32_t parenthesized_number_thirteen [] = { 0x0028, 0x0031, 0x0033, 0x0029 };
	static uint32_t parenthesized_number_fourteen [] = { 0x0028, 0x0031, 0x0034, 0x0029 };
	static uint32_t parenthesized_number_fifteen [] = { 0x0028, 0x0031, 0x0035, 0x0029 };
	static uint32_t parenthesized_number_sixteen [] = { 0x0028, 0x0031, 0x0036, 0x0029 };
	static uint32_t parenthesized_number_seventeen [] = { 0x0028, 0x0031, 0x0037, 0x0029 };
	static uint32_t parenthesized_number_eighteen [] = { 0x0028, 0x0031, 0x0038, 0x0029 };
	static uint32_t parenthesized_number_nineteen [] = { 0x0028, 0x0031, 0x0039, 0x0029 };
	static uint32_t parenthesized_number_twenty [] = { 0x0028, 0x0032, 0x0030, 0x0029 };
	static uint32_t digit_one_full_stop [] = { 0x0031, 0x002E };
	static uint32_t digit_two_full_stop [] = { 0x0032, 0x002E };
	static uint32_t digit_three_full_stop [] = { 0x0033, 0x002E };
	static uint32_t digit_four_full_stop [] = { 0x0034, 0x002E };
	static uint32_t digit_five_full_stop [] = { 0x0035, 0x002E };
	static uint32_t digit_six_full_stop [] = { 0x0036, 0x002E };
	static uint32_t digit_seven_full_stop [] = { 0x0037, 0x002E };
	static uint32_t digit_eight_full_stop [] = { 0x0038, 0x002E };
	static uint32_t digit_nine_full_stop [] = { 0x0039, 0x002E };
	static uint32_t number_ten_full_stop [] = { 0x0031, 0x0030, 0x002E };
	static uint32_t number_eleven_full_stop [] = { 0x0031, 0x0031, 0x002E };
	static uint32_t number_twelve_full_stop [] = { 0x0031, 0x0032, 0x002E };
	static uint32_t number_thirteen_full_stop [] = { 0x0031, 0x0033, 0x002E };
	static uint32_t number_fourteen_full_stop [] = { 0x0031, 0x0034, 0x002E };
	static uint32_t number_fifteen_full_stop [] = { 0x0031, 0x0035, 0x002E };
	static uint32_t number_sixteen_full_stop [] = { 0x0031, 0x0036, 0x002E };
	static uint32_t number_seventeen_full_stop [] = { 0x0031, 0x0037, 0x002E };
	static uint32_t number_eighteen_full_stop [] = { 0x0031, 0x0038, 0x002E };
	static uint32_t number_nineteen_full_stop [] = { 0x0031, 0x0039, 0x002E };
	static uint32_t number_twenty_full_stop [] = { 0x0032, 0x0030, 0x002E };
	static uint32_t parenthesized_latin_small_letter_a [] = { 0x0028, 0x0061, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_b [] = { 0x0028, 0x0062, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_c [] = { 0x0028, 0x0063, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_d [] = { 0x0028, 0x0064, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_e [] = { 0x0028, 0x0065, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_f [] = { 0x0028, 0x0066, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_g [] = { 0x0028, 0x0067, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_h [] = { 0x0028, 0x0068, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_i [] = { 0x0028, 0x0069, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_j [] = { 0x0028, 0x006A, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_k [] = { 0x0028, 0x006B, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_l [] = { 0x0028, 0x006C, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_m [] = { 0x0028, 0x006D, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_n [] = { 0x0028, 0x006E, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_o [] = { 0x0028, 0x006F, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_p [] = { 0x0028, 0x0070, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_q [] = { 0x0028, 0x0071, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_r [] = { 0x0028, 0x0072, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_s [] = { 0x0028, 0x0073, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_t [] = { 0x0028, 0x0074, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_u [] = { 0x0028, 0x0075, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_v [] = { 0x0028, 0x0076, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_w [] = { 0x0028, 0x0077, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_x [] = { 0x0028, 0x0078, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_y [] = { 0x0028, 0x0079, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_z [] = { 0x0028, 0x007A, 0x0029 };
	static uint32_t circled_latin_capital_letter_a [] = { 0x0041 };
	static uint32_t circled_latin_capital_letter_b [] = { 0x0042 };
	static uint32_t circled_latin_capital_letter_c [] = { 0x0043 };
	static uint32_t circled_latin_capital_letter_d [] = { 0x0044 };
	static uint32_t circled_latin_capital_letter_e [] = { 0x0045 };
	static uint32_t circled_latin_capital_letter_f [] = { 0x0046 };
	static uint32_t circled_latin_capital_letter_g [] = { 0x0047 };
	static uint32_t circled_latin_capital_letter_h [] = { 0x0048 };
	static uint32_t circled_latin_capital_letter_i [] = { 0x0049 };
	static uint32_t circled_latin_capital_letter_j [] = { 0x004A };
	static uint32_t circled_latin_capital_letter_k [] = { 0x004B };
	static uint32_t circled_latin_capital_letter_l [] = { 0x004C };
	static uint32_t circled_latin_capital_letter_m [] = { 0x004D };
	static uint32_t circled_latin_capital_letter_n [] = { 0x004E };
	static uint32_t circled_latin_capital_letter_o [] = { 0x004F };
	static uint32_t circled_latin_capital_letter_p [] = { 0x0050 };
	static uint32_t circled_latin_capital_letter_q [] = { 0x0051 };
	static uint32_t circled_latin_capital_letter_r [] = { 0x0052 };
	static uint32_t circled_latin_capital_letter_s [] = { 0x0053 };
	static uint32_t circled_latin_capital_letter_t [] = { 0x0054 };
	static uint32_t circled_latin_capital_letter_u [] = { 0x0055 };
	static uint32_t circled_latin_capital_letter_v [] = { 0x0056 };
	static uint32_t circled_latin_capital_letter_w [] = { 0x0057 };
	static uint32_t circled_latin_capital_letter_x [] = { 0x0058 };
	static uint32_t circled_latin_capital_letter_y [] = { 0x0059 };
	static uint32_t circled_latin_capital_letter_z [] = { 0x005A };
	static uint32_t circled_latin_small_letter_a [] = { 0x0061 };
	static uint32_t circled_latin_small_letter_b [] = { 0x0062 };
	static uint32_t circled_latin_small_letter_c [] = { 0x0063 };
	static uint32_t circled_latin_small_letter_d [] = { 0x0064 };
	static uint32_t circled_latin_small_letter_e [] = { 0x0065 };
	static uint32_t circled_latin_small_letter_f [] = { 0x0066 };
	static uint32_t circled_latin_small_letter_g [] = { 0x0067 };
	static uint32_t circled_latin_small_letter_h [] = { 0x0068 };
	static uint32_t circled_latin_small_letter_i [] = { 0x0069 };
	static uint32_t circled_latin_small_letter_j [] = { 0x006A };
	static uint32_t circled_latin_small_letter_k [] = { 0x006B };
	static uint32_t circled_latin_small_letter_l [] = { 0x006C };
	static uint32_t circled_latin_small_letter_m [] = { 0x006D };
	static uint32_t circled_latin_small_letter_n [] = { 0x006E };
	static uint32_t circled_latin_small_letter_o [] = { 0x006F };
	static uint32_t circled_latin_small_letter_p [] = { 0x0070 };
	static uint32_t circled_latin_small_letter_q [] = { 0x0071 };
	static uint32_t circled_latin_small_letter_r [] = { 0x0072 };
	static uint32_t circled_latin_small_letter_s [] = { 0x0073 };
	static uint32_t circled_latin_small_letter_t [] = { 0x0074 };
	static uint32_t circled_latin_small_letter_u [] = { 0x0075 };
	static uint32_t circled_latin_small_letter_v [] = { 0x0076 };
	static uint32_t circled_latin_small_letter_w [] = { 0x0077 };
	static uint32_t circled_latin_small_letter_x [] = { 0x0078 };
	static uint32_t circled_latin_small_letter_y [] = { 0x0079 };
	static uint32_t circled_latin_small_letter_z [] = { 0x007A };
	static uint32_t circled_digit_zero [] = { 0x0030 };
	static uint32_t quadruple_integral_operator [] = { 0x222B, 0x222B, 0x222B, 0x222B };
	static uint32_t double_colon_equal [] = { 0x003A, 0x003A, 0x003D };
	static uint32_t two_consecutive_equals_signs [] = { 0x003D, 0x003D };
	static uint32_t three_consecutive_equals_signs [] = { 0x003D, 0x003D, 0x003D };
	static uint32_t forking [] = { 0x2ADD, 0x0338 };
	static uint32_t latin_subscript_small_letter_j [] = { 0x006A };
	static uint32_t modifier_letter_capital_v [] = { 0x0056 };
	static uint32_t tifinagh_modifier_letter_labialization_mark [] = { 0x2D61 };
	static uint32_t cjk_radical_mother [] = { 0x6BCD };
	static uint32_t cjk_radical_c_simplified_turtle [] = { 0x9F9F };
	static uint32_t kangxi_radical_one [] = { 0x4E00 };
	static uint32_t kangxi_radical_line [] = { 0x4E28 };
	static uint32_t kangxi_radical_dot [] = { 0x4E36 };
	static uint32_t kangxi_radical_slash [] = { 0x4E3F };
	static uint32_t kangxi_radical_second [] = { 0x4E59 };
	static uint32_t kangxi_radical_hook [] = { 0x4E85 };
	static uint32_t kangxi_radical_two [] = { 0x4E8C };
	static uint32_t kangxi_radical_lid [] = { 0x4EA0 };
	static uint32_t kangxi_radical_man [] = { 0x4EBA };
	static uint32_t kangxi_radical_legs [] = { 0x513F };
	static uint32_t kangxi_radical_enter [] = { 0x5165 };
	static uint32_t kangxi_radical_eight [] = { 0x516B };
	static uint32_t kangxi_radical_down_box [] = { 0x5182 };
	static uint32_t kangxi_radical_cover [] = { 0x5196 };
	static uint32_t kangxi_radical_ice [] = { 0x51AB };
	static uint32_t kangxi_radical_table [] = { 0x51E0 };
	static uint32_t kangxi_radical_open_box [] = { 0x51F5 };
	static uint32_t kangxi_radical_knife [] = { 0x5200 };
	static uint32_t kangxi_radical_power [] = { 0x529B };
	static uint32_t kangxi_radical_wrap [] = { 0x52F9 };
	static uint32_t kangxi_radical_spoon [] = { 0x5315 };
	static uint32_t kangxi_radical_right_open_box [] = { 0x531A };
	static uint32_t kangxi_radical_hiding_enclosure [] = { 0x5338 };
	static uint32_t kangxi_radical_ten [] = { 0x5341 };
	static uint32_t kangxi_radical_divination [] = { 0x535C };
	static uint32_t kangxi_radical_seal [] = { 0x5369 };
	static uint32_t kangxi_radical_cliff [] = { 0x5382 };
	static uint32_t kangxi_radical_private [] = { 0x53B6 };
	static uint32_t kangxi_radical_again [] = { 0x53C8 };
	static uint32_t kangxi_radical_mouth [] = { 0x53E3 };
	static uint32_t kangxi_radical_enclosure [] = { 0x56D7 };
	static uint32_t kangxi_radical_earth [] = { 0x571F };
	static uint32_t kangxi_radical_scholar [] = { 0x58EB };
	static uint32_t kangxi_radical_go [] = { 0x5902 };
	static uint32_t kangxi_radical_go_slowly [] = { 0x590A };
	static uint32_t kangxi_radical_evening [] = { 0x5915 };
	static uint32_t kangxi_radical_big [] = { 0x5927 };
	static uint32_t kangxi_radical_woman [] = { 0x5973 };
	static uint32_t kangxi_radical_child [] = { 0x5B50 };
	static uint32_t kangxi_radical_roof [] = { 0x5B80 };
	static uint32_t kangxi_radical_inch [] = { 0x5BF8 };
	static uint32_t kangxi_radical_small [] = { 0x5C0F };
	static uint32_t kangxi_radical_lame [] = { 0x5C22 };
	static uint32_t kangxi_radical_corpse [] = { 0x5C38 };
	static uint32_t kangxi_radical_sprout [] = { 0x5C6E };
	static uint32_t kangxi_radical_mountain [] = { 0x5C71 };
	static uint32_t kangxi_radical_river [] = { 0x5DDB };
	static uint32_t kangxi_radical_work [] = { 0x5DE5 };
	static uint32_t kangxi_radical_oneself [] = { 0x5DF1 };
	static uint32_t kangxi_radical_turban [] = { 0x5DFE };
	static uint32_t kangxi_radical_dry [] = { 0x5E72 };
	static uint32_t kangxi_radical_short_thread [] = { 0x5E7A };
	static uint32_t kangxi_radical_dotted_cliff [] = { 0x5E7F };
	static uint32_t kangxi_radical_long_stride [] = { 0x5EF4 };
	static uint32_t kangxi_radical_two_hands [] = { 0x5EFE };
	static uint32_t kangxi_radical_shoot [] = { 0x5F0B };
	static uint32_t kangxi_radical_bow [] = { 0x5F13 };
	static uint32_t kangxi_radical_snout [] = { 0x5F50 };
	static uint32_t kangxi_radical_bristle [] = { 0x5F61 };
	static uint32_t kangxi_radical_step [] = { 0x5F73 };
	static uint32_t kangxi_radical_heart [] = { 0x5FC3 };
	static uint32_t kangxi_radical_halberd [] = { 0x6208 };
	static uint32_t kangxi_radical_door [] = { 0x6236 };
	static uint32_t kangxi_radical_hand [] = { 0x624B };
	static uint32_t kangxi_radical_branch [] = { 0x652F };
	static uint32_t kangxi_radical_rap [] = { 0x6534 };
	static uint32_t kangxi_radical_script [] = { 0x6587 };
	static uint32_t kangxi_radical_dipper [] = { 0x6597 };
	static uint32_t kangxi_radical_axe [] = { 0x65A4 };
	static uint32_t kangxi_radical_square [] = { 0x65B9 };
	static uint32_t kangxi_radical_not [] = { 0x65E0 };
	static uint32_t kangxi_radical_sun [] = { 0x65E5 };
	static uint32_t kangxi_radical_say [] = { 0x66F0 };
	static uint32_t kangxi_radical_moon [] = { 0x6708 };
	static uint32_t kangxi_radical_tree [] = { 0x6728 };
	static uint32_t kangxi_radical_lack [] = { 0x6B20 };
	static uint32_t kangxi_radical_stop [] = { 0x6B62 };
	static uint32_t kangxi_radical_death [] = { 0x6B79 };
	static uint32_t kangxi_radical_weapon [] = { 0x6BB3 };
	static uint32_t kangxi_radical_do_not [] = { 0x6BCB };
	static uint32_t kangxi_radical_compare [] = { 0x6BD4 };
	static uint32_t kangxi_radical_fur [] = { 0x6BDB };
	static uint32_t kangxi_radical_clan [] = { 0x6C0F };
	static uint32_t kangxi_radical_steam [] = { 0x6C14 };
	static uint32_t kangxi_radical_water [] = { 0x6C34 };
	static uint32_t kangxi_radical_fire [] = { 0x706B };
	static uint32_t kangxi_radical_claw [] = { 0x722A };
	static uint32_t kangxi_radical_father [] = { 0x7236 };
	static uint32_t kangxi_radical_double_x [] = { 0x723B };
	static uint32_t kangxi_radical_half_tree_trunk [] = { 0x723F };
	static uint32_t kangxi_radical_slice [] = { 0x7247 };
	static uint32_t kangxi_radical_fang [] = { 0x7259 };
	static uint32_t kangxi_radical_cow [] = { 0x725B };
	static uint32_t kangxi_radical_dog [] = { 0x72AC };
	static uint32_t kangxi_radical_profound [] = { 0x7384 };
	static uint32_t kangxi_radical_jade [] = { 0x7389 };
	static uint32_t kangxi_radical_melon [] = { 0x74DC };
	static uint32_t kangxi_radical_tile [] = { 0x74E6 };
	static uint32_t kangxi_radical_sweet [] = { 0x7518 };
	static uint32_t kangxi_radical_life [] = { 0x751F };
	static uint32_t kangxi_radical_use [] = { 0x7528 };
	static uint32_t kangxi_radical_field [] = { 0x7530 };
	static uint32_t kangxi_radical_bolt_of_cloth [] = { 0x758B };
	static uint32_t kangxi_radical_sickness [] = { 0x7592 };
	static uint32_t kangxi_radical_dotted_tent [] = { 0x7676 };
	static uint32_t kangxi_radical_white [] = { 0x767D };
	static uint32_t kangxi_radical_skin [] = { 0x76AE };
	static uint32_t kangxi_radical_dish [] = { 0x76BF };
	static uint32_t kangxi_radical_eye [] = { 0x76EE };
	static uint32_t kangxi_radical_spear [] = { 0x77DB };
	static uint32_t kangxi_radical_arrow [] = { 0x77E2 };
	static uint32_t kangxi_radical_stone [] = { 0x77F3 };
	static uint32_t kangxi_radical_spirit [] = { 0x793A };
	static uint32_t kangxi_radical_track [] = { 0x79B8 };
	static uint32_t kangxi_radical_grain [] = { 0x79BE };
	static uint32_t kangxi_radical_cave [] = { 0x7A74 };
	static uint32_t kangxi_radical_stand [] = { 0x7ACB };
	static uint32_t kangxi_radical_bamboo [] = { 0x7AF9 };
	static uint32_t kangxi_radical_rice [] = { 0x7C73 };
	static uint32_t kangxi_radical_silk [] = { 0x7CF8 };
	static uint32_t kangxi_radical_jar [] = { 0x7F36 };
	static uint32_t kangxi_radical_net [] = { 0x7F51 };
	static uint32_t kangxi_radical_sheep [] = { 0x7F8A };
	static uint32_t kangxi_radical_feather [] = { 0x7FBD };
	static uint32_t kangxi_radical_old [] = { 0x8001 };
	static uint32_t kangxi_radical_and [] = { 0x800C };
	static uint32_t kangxi_radical_plow [] = { 0x8012 };
	static uint32_t kangxi_radical_ear [] = { 0x8033 };
	static uint32_t kangxi_radical_brush [] = { 0x807F };
	static uint32_t kangxi_radical_meat [] = { 0x8089 };
	static uint32_t kangxi_radical_minister [] = { 0x81E3 };
	static uint32_t kangxi_radical_self [] = { 0x81EA };
	static uint32_t kangxi_radical_arrive [] = { 0x81F3 };
	static uint32_t kangxi_radical_mortar [] = { 0x81FC };
	static uint32_t kangxi_radical_tongue [] = { 0x820C };
	static uint32_t kangxi_radical_oppose [] = { 0x821B };
	static uint32_t kangxi_radical_boat [] = { 0x821F };
	static uint32_t kangxi_radical_stopping [] = { 0x826E };
	static uint32_t kangxi_radical_color [] = { 0x8272 };
	static uint32_t kangxi_radical_grass [] = { 0x8278 };
	static uint32_t kangxi_radical_tiger [] = { 0x864D };
	static uint32_t kangxi_radical_insect [] = { 0x866B };
	static uint32_t kangxi_radical_blood [] = { 0x8840 };
	static uint32_t kangxi_radical_walk_enclosure [] = { 0x884C };
	static uint32_t kangxi_radical_clothes [] = { 0x8863 };
	static uint32_t kangxi_radical_west [] = { 0x897E };
	static uint32_t kangxi_radical_see [] = { 0x898B };
	static uint32_t kangxi_radical_horn [] = { 0x89D2 };
	static uint32_t kangxi_radical_speech [] = { 0x8A00 };
	static uint32_t kangxi_radical_valley [] = { 0x8C37 };
	static uint32_t kangxi_radical_bean [] = { 0x8C46 };
	static uint32_t kangxi_radical_pig [] = { 0x8C55 };
	static uint32_t kangxi_radical_badger [] = { 0x8C78 };
	static uint32_t kangxi_radical_shell [] = { 0x8C9D };
	static uint32_t kangxi_radical_red [] = { 0x8D64 };
	static uint32_t kangxi_radical_run [] = { 0x8D70 };
	static uint32_t kangxi_radical_foot [] = { 0x8DB3 };
	static uint32_t kangxi_radical_body [] = { 0x8EAB };
	static uint32_t kangxi_radical_cart [] = { 0x8ECA };
	static uint32_t kangxi_radical_bitter [] = { 0x8F9B };
	static uint32_t kangxi_radical_morning [] = { 0x8FB0 };
	static uint32_t kangxi_radical_walk [] = { 0x8FB5 };
	static uint32_t kangxi_radical_city [] = { 0x9091 };
	static uint32_t kangxi_radical_wine [] = { 0x9149 };
	static uint32_t kangxi_radical_distinguish [] = { 0x91C6 };
	static uint32_t kangxi_radical_village [] = { 0x91CC };
	static uint32_t kangxi_radical_gold [] = { 0x91D1 };
	static uint32_t kangxi_radical_long [] = { 0x9577 };
	static uint32_t kangxi_radical_gate [] = { 0x9580 };
	static uint32_t kangxi_radical_mound [] = { 0x961C };
	static uint32_t kangxi_radical_slave [] = { 0x96B6 };
	static uint32_t kangxi_radical_short_tailed_bird [] = { 0x96B9 };
	static uint32_t kangxi_radical_rain [] = { 0x96E8 };
	static uint32_t kangxi_radical_blue [] = { 0x9751 };
	static uint32_t kangxi_radical_wrong [] = { 0x975E };
	static uint32_t kangxi_radical_face [] = { 0x9762 };
	static uint32_t kangxi_radical_leather [] = { 0x9769 };
	static uint32_t kangxi_radical_tanned_leather [] = { 0x97CB };
	static uint32_t kangxi_radical_leek [] = { 0x97ED };
	static uint32_t kangxi_radical_sound [] = { 0x97F3 };
	static uint32_t kangxi_radical_leaf [] = { 0x9801 };
	static uint32_t kangxi_radical_wind [] = { 0x98A8 };
	static uint32_t kangxi_radical_fly [] = { 0x98DB };
	static uint32_t kangxi_radical_eat [] = { 0x98DF };
	static uint32_t kangxi_radical_head [] = { 0x9996 };
	static uint32_t kangxi_radical_fragrant [] = { 0x9999 };
	static uint32_t kangxi_radical_horse [] = { 0x99AC };
	static uint32_t kangxi_radical_bone [] = { 0x9AA8 };
	static uint32_t kangxi_radical_tall [] = { 0x9AD8 };
	static uint32_t kangxi_radical_hair [] = { 0x9ADF };
	static uint32_t kangxi_radical_fight [] = { 0x9B25 };
	static uint32_t kangxi_radical_sacrificial_wine [] = { 0x9B2F };
	static uint32_t kangxi_radical_cauldron [] = { 0x9B32 };
	static uint32_t kangxi_radical_ghost [] = { 0x9B3C };
	static uint32_t kangxi_radical_fish [] = { 0x9B5A };
	static uint32_t kangxi_radical_bird [] = { 0x9CE5 };
	static uint32_t kangxi_radical_salt [] = { 0x9E75 };
	static uint32_t kangxi_radical_deer [] = { 0x9E7F };
	static uint32_t kangxi_radical_wheat [] = { 0x9EA5 };
	static uint32_t kangxi_radical_hemp [] = { 0x9EBB };
	static uint32_t kangxi_radical_yellow [] = { 0x9EC3 };
	static uint32_t kangxi_radical_millet [] = { 0x9ECD };
	static uint32_t kangxi_radical_black [] = { 0x9ED1 };
	static uint32_t kangxi_radical_embroidery [] = { 0x9EF9 };
	static uint32_t kangxi_radical_frog [] = { 0x9EFD };
	static uint32_t kangxi_radical_tripod [] = { 0x9F0E };
	static uint32_t kangxi_radical_drum [] = { 0x9F13 };
	static uint32_t kangxi_radical_rat [] = { 0x9F20 };
	static uint32_t kangxi_radical_nose [] = { 0x9F3B };
	static uint32_t kangxi_radical_even [] = { 0x9F4A };
	static uint32_t kangxi_radical_tooth [] = { 0x9F52 };
	static uint32_t kangxi_radical_dragon [] = { 0x9F8D };
	static uint32_t kangxi_radical_turtle [] = { 0x9F9C };
	static uint32_t kangxi_radical_flute [] = { 0x9FA0 };
	static uint32_t ideographic_space [] = { 0x0020 };
	static uint32_t circled_postal_mark [] = { 0x3012 };
	static uint32_t hangzhou_numeral_ten [] = { 0x5341 };
	static uint32_t hangzhou_numeral_twenty [] = { 0x5344 };
	static uint32_t hangzhou_numeral_thirty [] = { 0x5345 };
	static uint32_t hiragana_letter_ga [] = { 0x304B, 0x3099 };
	static uint32_t hiragana_letter_gi [] = { 0x304D, 0x3099 };
	static uint32_t hiragana_letter_gu [] = { 0x304F, 0x3099 };
	static uint32_t hiragana_letter_ge [] = { 0x3051, 0x3099 };
	static uint32_t hiragana_letter_go [] = { 0x3053, 0x3099 };
	static uint32_t hiragana_letter_za [] = { 0x3055, 0x3099 };
	static uint32_t hiragana_letter_zi [] = { 0x3057, 0x3099 };
	static uint32_t hiragana_letter_zu [] = { 0x3059, 0x3099 };
	static uint32_t hiragana_letter_ze [] = { 0x305B, 0x3099 };
	static uint32_t hiragana_letter_zo [] = { 0x305D, 0x3099 };
	static uint32_t hiragana_letter_da [] = { 0x305F, 0x3099 };
	static uint32_t hiragana_letter_di [] = { 0x3061, 0x3099 };
	static uint32_t hiragana_letter_du [] = { 0x3064, 0x3099 };
	static uint32_t hiragana_letter_de [] = { 0x3066, 0x3099 };
	static uint32_t hiragana_letter_do [] = { 0x3068, 0x3099 };
	static uint32_t hiragana_letter_ba [] = { 0x306F, 0x3099 };
	static uint32_t hiragana_letter_pa [] = { 0x306F, 0x309A };
	static uint32_t hiragana_letter_bi [] = { 0x3072, 0x3099 };
	static uint32_t hiragana_letter_pi [] = { 0x3072, 0x309A };
	static uint32_t hiragana_letter_bu [] = { 0x3075, 0x3099 };
	static uint32_t hiragana_letter_pu [] = { 0x3075, 0x309A };
	static uint32_t hiragana_letter_be [] = { 0x3078, 0x3099 };
	static uint32_t hiragana_letter_pe [] = { 0x3078, 0x309A };
	static uint32_t hiragana_letter_bo [] = { 0x307B, 0x3099 };
	static uint32_t hiragana_letter_po [] = { 0x307B, 0x309A };
	static uint32_t hiragana_letter_vu [] = { 0x3046, 0x3099 };
	static uint32_t katakana_hiragana_voiced_sound_mark [] = { 0x0020, 0x3099 };
	static uint32_t katakana_hiragana_semi_voiced_sound_mark [] = { 0x0020, 0x309A };
	static uint32_t hiragana_voiced_iteration_mark [] = { 0x309D, 0x3099 };
	static uint32_t hiragana_digraph_yori [] = { 0x3088, 0x308A };
	static uint32_t katakana_letter_ga [] = { 0x30AB, 0x3099 };
	static uint32_t katakana_letter_gi [] = { 0x30AD, 0x3099 };
	static uint32_t katakana_letter_gu [] = { 0x30AF, 0x3099 };
	static uint32_t katakana_letter_ge [] = { 0x30B1, 0x3099 };
	static uint32_t katakana_letter_go [] = { 0x30B3, 0x3099 };
	static uint32_t katakana_letter_za [] = { 0x30B5, 0x3099 };
	static uint32_t katakana_letter_zi [] = { 0x30B7, 0x3099 };
	static uint32_t katakana_letter_zu [] = { 0x30B9, 0x3099 };
	static uint32_t katakana_letter_ze [] = { 0x30BB, 0x3099 };
	static uint32_t katakana_letter_zo [] = { 0x30BD, 0x3099 };
	static uint32_t katakana_letter_da [] = { 0x30BF, 0x3099 };
	static uint32_t katakana_letter_di [] = { 0x30C1, 0x3099 };
	static uint32_t katakana_letter_du [] = { 0x30C4, 0x3099 };
	static uint32_t katakana_letter_de [] = { 0x30C6, 0x3099 };
	static uint32_t katakana_letter_do [] = { 0x30C8, 0x3099 };
	static uint32_t katakana_letter_ba [] = { 0x30CF, 0x3099 };
	static uint32_t katakana_letter_pa [] = { 0x30CF, 0x309A };
	static uint32_t katakana_letter_bi [] = { 0x30D2, 0x3099 };
	static uint32_t katakana_letter_pi [] = { 0x30D2, 0x309A };
	static uint32_t katakana_letter_bu [] = { 0x30D5, 0x3099 };
	static uint32_t katakana_letter_pu [] = { 0x30D5, 0x309A };
	static uint32_t katakana_letter_be [] = { 0x30D8, 0x3099 };
	static uint32_t katakana_letter_pe [] = { 0x30D8, 0x309A };
	static uint32_t katakana_letter_bo [] = { 0x30DB, 0x3099 };
	static uint32_t katakana_letter_po [] = { 0x30DB, 0x309A };
	static uint32_t katakana_letter_vu [] = { 0x30A6, 0x3099 };
	static uint32_t katakana_letter_va [] = { 0x30EF, 0x3099 };
	static uint32_t katakana_letter_vi [] = { 0x30F0, 0x3099 };
	static uint32_t katakana_letter_ve [] = { 0x30F1, 0x3099 };
	static uint32_t katakana_letter_vo [] = { 0x30F2, 0x3099 };
	static uint32_t katakana_voiced_iteration_mark [] = { 0x30FD, 0x3099 };
	static uint32_t katakana_digraph_koto [] = { 0x30B3, 0x30C8 };
	static uint32_t hangul_letter_kiyeok [] = { 0x1100 };
	static uint32_t hangul_letter_ssangkiyeok [] = { 0x1101 };
	static uint32_t hangul_letter_kiyeok_sios [] = { 0x11AA };
	static uint32_t hangul_letter_nieun [] = { 0x1102 };
	static uint32_t hangul_letter_nieun_cieuc [] = { 0x11AC };
	static uint32_t hangul_letter_nieun_hieuh [] = { 0x11AD };
	static uint32_t hangul_letter_tikeut [] = { 0x1103 };
	static uint32_t hangul_letter_ssangtikeut [] = { 0x1104 };
	static uint32_t hangul_letter_rieul [] = { 0x1105 };
	static uint32_t hangul_letter_rieul_kiyeok [] = { 0x11B0 };
	static uint32_t hangul_letter_rieul_mieum [] = { 0x11B1 };
	static uint32_t hangul_letter_rieul_pieup [] = { 0x11B2 };
	static uint32_t hangul_letter_rieul_sios [] = { 0x11B3 };
	static uint32_t hangul_letter_rieul_thieuth [] = { 0x11B4 };
	static uint32_t hangul_letter_rieul_phieuph [] = { 0x11B5 };
	static uint32_t hangul_letter_rieul_hieuh [] = { 0x111A };
	static uint32_t hangul_letter_mieum [] = { 0x1106 };
	static uint32_t hangul_letter_pieup [] = { 0x1107 };
	static uint32_t hangul_letter_ssangpieup [] = { 0x1108 };
	static uint32_t hangul_letter_pieup_sios [] = { 0x1121 };
	static uint32_t hangul_letter_sios [] = { 0x1109 };
	static uint32_t hangul_letter_ssangsios [] = { 0x110A };
	static uint32_t hangul_letter_ieung [] = { 0x110B };
	static uint32_t hangul_letter_cieuc [] = { 0x110C };
	static uint32_t hangul_letter_ssangcieuc [] = { 0x110D };
	static uint32_t hangul_letter_chieuch [] = { 0x110E };
	static uint32_t hangul_letter_khieukh [] = { 0x110F };
	static uint32_t hangul_letter_thieuth [] = { 0x1110 };
	static uint32_t hangul_letter_phieuph [] = { 0x1111 };
	static uint32_t hangul_letter_hieuh [] = { 0x1112 };
	static uint32_t hangul_letter_a [] = { 0x1161 };
	static uint32_t hangul_letter_ae [] = { 0x1162 };
	static uint32_t hangul_letter_ya [] = { 0x1163 };
	static uint32_t hangul_letter_yae [] = { 0x1164 };
	static uint32_t hangul_letter_eo [] = { 0x1165 };
	static uint32_t hangul_letter_e [] = { 0x1166 };
	static uint32_t hangul_letter_yeo [] = { 0x1167 };
	static uint32_t hangul_letter_ye [] = { 0x1168 };
	static uint32_t hangul_letter_o [] = { 0x1169 };
	static uint32_t hangul_letter_wa [] = { 0x116A };
	static uint32_t hangul_letter_wae [] = { 0x116B };
	static uint32_t hangul_letter_oe [] = { 0x116C };
	static uint32_t hangul_letter_yo [] = { 0x116D };
	static uint32_t hangul_letter_u [] = { 0x116E };
	static uint32_t hangul_letter_weo [] = { 0x116F };
	static uint32_t hangul_letter_we [] = { 0x1170 };
	static uint32_t hangul_letter_wi [] = { 0x1171 };
	static uint32_t hangul_letter_yu [] = { 0x1172 };
	static uint32_t hangul_letter_eu [] = { 0x1173 };
	static uint32_t hangul_letter_yi [] = { 0x1174 };
	static uint32_t hangul_letter_i [] = { 0x1175 };
	static uint32_t hangul_filler [] = { 0x1160 };
	static uint32_t hangul_letter_ssangnieun [] = { 0x1114 };
	static uint32_t hangul_letter_nieun_tikeut [] = { 0x1115 };
	static uint32_t hangul_letter_nieun_sios [] = { 0x11C7 };
	static uint32_t hangul_letter_nieun_pansios [] = { 0x11C8 };
	static uint32_t hangul_letter_rieul_kiyeok_sios [] = { 0x11CC };
	static uint32_t hangul_letter_rieul_tikeut [] = { 0x11CE };
	static uint32_t hangul_letter_rieul_pieup_sios [] = { 0x11D3 };
	static uint32_t hangul_letter_rieul_pansios [] = { 0x11D7 };
	static uint32_t hangul_letter_rieul_yeorinhieuh [] = { 0x11D9 };
	static uint32_t hangul_letter_mieum_pieup [] = { 0x111C };
	static uint32_t hangul_letter_mieum_sios [] = { 0x11DD };
	static uint32_t hangul_letter_mieum_pansios [] = { 0x11DF };
	static uint32_t hangul_letter_kapyeounmieum [] = { 0x111D };
	static uint32_t hangul_letter_pieup_kiyeok [] = { 0x111E };
	static uint32_t hangul_letter_pieup_tikeut [] = { 0x1120 };
	static uint32_t hangul_letter_pieup_sios_kiyeok [] = { 0x1122 };
	static uint32_t hangul_letter_pieup_sios_tikeut [] = { 0x1123 };
	static uint32_t hangul_letter_pieup_cieuc [] = { 0x1127 };
	static uint32_t hangul_letter_pieup_thieuth [] = { 0x1129 };
	static uint32_t hangul_letter_kapyeounpieup [] = { 0x112B };
	static uint32_t hangul_letter_kapyeounssangpieup [] = { 0x112C };
	static uint32_t hangul_letter_sios_kiyeok [] = { 0x112D };
	static uint32_t hangul_letter_sios_nieun [] = { 0x112E };
	static uint32_t hangul_letter_sios_tikeut [] = { 0x112F };
	static uint32_t hangul_letter_sios_pieup [] = { 0x1132 };
	static uint32_t hangul_letter_sios_cieuc [] = { 0x1136 };
	static uint32_t hangul_letter_pansios [] = { 0x1140 };
	static uint32_t hangul_letter_ssangieung [] = { 0x1147 };
	static uint32_t hangul_letter_yesieung [] = { 0x114C };
	static uint32_t hangul_letter_yesieung_sios [] = { 0x11F1 };
	static uint32_t hangul_letter_yesieung_pansios [] = { 0x11F2 };
	static uint32_t hangul_letter_kapyeounphieuph [] = { 0x1157 };
	static uint32_t hangul_letter_ssanghieuh [] = { 0x1158 };
	static uint32_t hangul_letter_yeorinhieuh [] = { 0x1159 };
	static uint32_t hangul_letter_yo_ya [] = { 0x1184 };
	static uint32_t hangul_letter_yo_yae [] = { 0x1185 };
	static uint32_t hangul_letter_yo_i [] = { 0x1188 };
	static uint32_t hangul_letter_yu_yeo [] = { 0x1191 };
	static uint32_t hangul_letter_yu_ye [] = { 0x1192 };
	static uint32_t hangul_letter_yu_i [] = { 0x1194 };
	static uint32_t hangul_letter_araea [] = { 0x119E };
	static uint32_t hangul_letter_araeae [] = { 0x11A1 };
	static uint32_t ideographic_annotation_one_mark [] = { 0x4E00 };
	static uint32_t ideographic_annotation_two_mark [] = { 0x4E8C };
	static uint32_t ideographic_annotation_three_mark [] = { 0x4E09 };
	static uint32_t ideographic_annotation_four_mark [] = { 0x56DB };
	static uint32_t ideographic_annotation_top_mark [] = { 0x4E0A };
	static uint32_t ideographic_annotation_middle_mark [] = { 0x4E2D };
	static uint32_t ideographic_annotation_bottom_mark [] = { 0x4E0B };
	static uint32_t ideographic_annotation_first_mark [] = { 0x7532 };
	static uint32_t ideographic_annotation_second_mark [] = { 0x4E59 };
	static uint32_t ideographic_annotation_third_mark [] = { 0x4E19 };
	static uint32_t ideographic_annotation_fourth_mark [] = { 0x4E01 };
	static uint32_t ideographic_annotation_heaven_mark [] = { 0x5929 };
	static uint32_t ideographic_annotation_earth_mark [] = { 0x5730 };
	static uint32_t ideographic_annotation_man_mark [] = { 0x4EBA };
	static uint32_t parenthesized_hangul_kiyeok [] = { 0x0028, 0x1100, 0x0029 };
	static uint32_t parenthesized_hangul_nieun [] = { 0x0028, 0x1102, 0x0029 };
	static uint32_t parenthesized_hangul_tikeut [] = { 0x0028, 0x1103, 0x0029 };
	static uint32_t parenthesized_hangul_rieul [] = { 0x0028, 0x1105, 0x0029 };
	static uint32_t parenthesized_hangul_mieum [] = { 0x0028, 0x1106, 0x0029 };
	static uint32_t parenthesized_hangul_pieup [] = { 0x0028, 0x1107, 0x0029 };
	static uint32_t parenthesized_hangul_sios [] = { 0x0028, 0x1109, 0x0029 };
	static uint32_t parenthesized_hangul_ieung [] = { 0x0028, 0x110B, 0x0029 };
	static uint32_t parenthesized_hangul_cieuc [] = { 0x0028, 0x110C, 0x0029 };
	static uint32_t parenthesized_hangul_chieuch [] = { 0x0028, 0x110E, 0x0029 };
	static uint32_t parenthesized_hangul_khieukh [] = { 0x0028, 0x110F, 0x0029 };
	static uint32_t parenthesized_hangul_thieuth [] = { 0x0028, 0x1110, 0x0029 };
	static uint32_t parenthesized_hangul_phieuph [] = { 0x0028, 0x1111, 0x0029 };
	static uint32_t parenthesized_hangul_hieuh [] = { 0x0028, 0x1112, 0x0029 };
	static uint32_t parenthesized_hangul_kiyeok_a [] = { 0x0028, 0x1100, 0x1161, 0x0029 };
	static uint32_t parenthesized_hangul_nieun_a [] = { 0x0028, 0x1102, 0x1161, 0x0029 };
	static uint32_t parenthesized_hangul_tikeut_a [] = { 0x0028, 0x1103, 0x1161, 0x0029 };
	static uint32_t parenthesized_hangul_rieul_a [] = { 0x0028, 0x1105, 0x1161, 0x0029 };
	static uint32_t parenthesized_hangul_mieum_a [] = { 0x0028, 0x1106, 0x1161, 0x0029 };
	static uint32_t parenthesized_hangul_pieup_a [] = { 0x0028, 0x1107, 0x1161, 0x0029 };
	static uint32_t parenthesized_hangul_sios_a [] = { 0x0028, 0x1109, 0x1161, 0x0029 };
	static uint32_t parenthesized_hangul_ieung_a [] = { 0x0028, 0x110B, 0x1161, 0x0029 };
	static uint32_t parenthesized_hangul_cieuc_a [] = { 0x0028, 0x110C, 0x1161, 0x0029 };
	static uint32_t parenthesized_hangul_chieuch_a [] = { 0x0028, 0x110E, 0x1161, 0x0029 };
	static uint32_t parenthesized_hangul_khieukh_a [] = { 0x0028, 0x110F, 0x1161, 0x0029 };
	static uint32_t parenthesized_hangul_thieuth_a [] = { 0x0028, 0x1110, 0x1161, 0x0029 };
	static uint32_t parenthesized_hangul_phieuph_a [] = { 0x0028, 0x1111, 0x1161, 0x0029 };
	static uint32_t parenthesized_hangul_hieuh_a [] = { 0x0028, 0x1112, 0x1161, 0x0029 };
	static uint32_t parenthesized_hangul_cieuc_u [] = { 0x0028, 0x110C, 0x116E, 0x0029 };
	static uint32_t parenthesized_korean_character_ojeon [] = { 0x0028, 0x110B, 0x1169, 0x110C, 0x1165, 0x11AB, 0x0029 };
	static uint32_t parenthesized_korean_character_o_hu [] = { 0x0028, 0x110B, 0x1169, 0x1112, 0x116E, 0x0029 };
	static uint32_t parenthesized_ideograph_one [] = { 0x0028, 0x4E00, 0x0029 };
	static uint32_t parenthesized_ideograph_two [] = { 0x0028, 0x4E8C, 0x0029 };
	static uint32_t parenthesized_ideograph_three [] = { 0x0028, 0x4E09, 0x0029 };
	static uint32_t parenthesized_ideograph_four [] = { 0x0028, 0x56DB, 0x0029 };
	static uint32_t parenthesized_ideograph_five [] = { 0x0028, 0x4E94, 0x0029 };
	static uint32_t parenthesized_ideograph_six [] = { 0x0028, 0x516D, 0x0029 };
	static uint32_t parenthesized_ideograph_seven [] = { 0x0028, 0x4E03, 0x0029 };
	static uint32_t parenthesized_ideograph_eight [] = { 0x0028, 0x516B, 0x0029 };
	static uint32_t parenthesized_ideograph_nine [] = { 0x0028, 0x4E5D, 0x0029 };
	static uint32_t parenthesized_ideograph_ten [] = { 0x0028, 0x5341, 0x0029 };
	static uint32_t parenthesized_ideograph_moon [] = { 0x0028, 0x6708, 0x0029 };
	static uint32_t parenthesized_ideograph_fire [] = { 0x0028, 0x706B, 0x0029 };
	static uint32_t parenthesized_ideograph_water [] = { 0x0028, 0x6C34, 0x0029 };
	static uint32_t parenthesized_ideograph_wood [] = { 0x0028, 0x6728, 0x0029 };
	static uint32_t parenthesized_ideograph_metal [] = { 0x0028, 0x91D1, 0x0029 };
	static uint32_t parenthesized_ideograph_earth [] = { 0x0028, 0x571F, 0x0029 };
	static uint32_t parenthesized_ideograph_sun [] = { 0x0028, 0x65E5, 0x0029 };
	static uint32_t parenthesized_ideograph_stock [] = { 0x0028, 0x682A, 0x0029 };
	static uint32_t parenthesized_ideograph_have [] = { 0x0028, 0x6709, 0x0029 };
	static uint32_t parenthesized_ideograph_society [] = { 0x0028, 0x793E, 0x0029 };
	static uint32_t parenthesized_ideograph_name [] = { 0x0028, 0x540D, 0x0029 };
	static uint32_t parenthesized_ideograph_special [] = { 0x0028, 0x7279, 0x0029 };
	static uint32_t parenthesized_ideograph_financial [] = { 0x0028, 0x8CA1, 0x0029 };
	static uint32_t parenthesized_ideograph_congratulation [] = { 0x0028, 0x795D, 0x0029 };
	static uint32_t parenthesized_ideograph_labor [] = { 0x0028, 0x52B4, 0x0029 };
	static uint32_t parenthesized_ideograph_represent [] = { 0x0028, 0x4EE3, 0x0029 };
	static uint32_t parenthesized_ideograph_call [] = { 0x0028, 0x547C, 0x0029 };
	static uint32_t parenthesized_ideograph_study [] = { 0x0028, 0x5B66, 0x0029 };
	static uint32_t parenthesized_ideograph_supervise [] = { 0x0028, 0x76E3, 0x0029 };
	static uint32_t parenthesized_ideograph_enterprise [] = { 0x0028, 0x4F01, 0x0029 };
	static uint32_t parenthesized_ideograph_resource [] = { 0x0028, 0x8CC7, 0x0029 };
	static uint32_t parenthesized_ideograph_alliance [] = { 0x0028, 0x5354, 0x0029 };
	static uint32_t parenthesized_ideograph_festival [] = { 0x0028, 0x796D, 0x0029 };
	static uint32_t parenthesized_ideograph_rest [] = { 0x0028, 0x4F11, 0x0029 };
	static uint32_t parenthesized_ideograph_self [] = { 0x0028, 0x81EA, 0x0029 };
	static uint32_t parenthesized_ideograph_reach [] = { 0x0028, 0x81F3, 0x0029 };
	static uint32_t circled_ideograph_question [] = { 0x554F };
	static uint32_t circled_ideograph_kindergarten [] = { 0x5E7C };
	static uint32_t circled_ideograph_school [] = { 0x6587 };
	static uint32_t circled_ideograph_koto [] = { 0x7B8F };
	static uint32_t partnership_sign [] = { 0x0050, 0x0054, 0x0045 };
	static uint32_t circled_number_twenty_one [] = { 0x0032, 0x0031 };
	static uint32_t circled_number_twenty_two [] = { 0x0032, 0x0032 };
	static uint32_t circled_number_twenty_three [] = { 0x0032, 0x0033 };
	static uint32_t circled_number_twenty_four [] = { 0x0032, 0x0034 };
	static uint32_t circled_number_twenty_five [] = { 0x0032, 0x0035 };
	static uint32_t circled_number_twenty_six [] = { 0x0032, 0x0036 };
	static uint32_t circled_number_twenty_seven [] = { 0x0032, 0x0037 };
	static uint32_t circled_number_twenty_eight [] = { 0x0032, 0x0038 };
	static uint32_t circled_number_twenty_nine [] = { 0x0032, 0x0039 };
	static uint32_t circled_number_thirty [] = { 0x0033, 0x0030 };
	static uint32_t circled_number_thirty_one [] = { 0x0033, 0x0031 };
	static uint32_t circled_number_thirty_two [] = { 0x0033, 0x0032 };
	static uint32_t circled_number_thirty_three [] = { 0x0033, 0x0033 };
	static uint32_t circled_number_thirty_four [] = { 0x0033, 0x0034 };
	static uint32_t circled_number_thirty_five [] = { 0x0033, 0x0035 };
	static uint32_t circled_hangul_kiyeok [] = { 0x1100 };
	static uint32_t circled_hangul_nieun [] = { 0x1102 };
	static uint32_t circled_hangul_tikeut [] = { 0x1103 };
	static uint32_t circled_hangul_rieul [] = { 0x1105 };
	static uint32_t circled_hangul_mieum [] = { 0x1106 };
	static uint32_t circled_hangul_pieup [] = { 0x1107 };
	static uint32_t circled_hangul_sios [] = { 0x1109 };
	static uint32_t circled_hangul_ieung [] = { 0x110B };
	static uint32_t circled_hangul_cieuc [] = { 0x110C };
	static uint32_t circled_hangul_chieuch [] = { 0x110E };
	static uint32_t circled_hangul_khieukh [] = { 0x110F };
	static uint32_t circled_hangul_thieuth [] = { 0x1110 };
	static uint32_t circled_hangul_phieuph [] = { 0x1111 };
	static uint32_t circled_hangul_hieuh [] = { 0x1112 };
	static uint32_t circled_hangul_kiyeok_a [] = { 0x1100, 0x1161 };
	static uint32_t circled_hangul_nieun_a [] = { 0x1102, 0x1161 };
	static uint32_t circled_hangul_tikeut_a [] = { 0x1103, 0x1161 };
	static uint32_t circled_hangul_rieul_a [] = { 0x1105, 0x1161 };
	static uint32_t circled_hangul_mieum_a [] = { 0x1106, 0x1161 };
	static uint32_t circled_hangul_pieup_a [] = { 0x1107, 0x1161 };
	static uint32_t circled_hangul_sios_a [] = { 0x1109, 0x1161 };
	static uint32_t circled_hangul_ieung_a [] = { 0x110B, 0x1161 };
	static uint32_t circled_hangul_cieuc_a [] = { 0x110C, 0x1161 };
	static uint32_t circled_hangul_chieuch_a [] = { 0x110E, 0x1161 };
	static uint32_t circled_hangul_khieukh_a [] = { 0x110F, 0x1161 };
	static uint32_t circled_hangul_thieuth_a [] = { 0x1110, 0x1161 };
	static uint32_t circled_hangul_phieuph_a [] = { 0x1111, 0x1161 };
	static uint32_t circled_hangul_hieuh_a [] = { 0x1112, 0x1161 };
	static uint32_t circled_korean_character_chamko [] = { 0x110E, 0x1161, 0x11B7, 0x1100, 0x1169 };
	static uint32_t circled_korean_character_jueui [] = { 0x110C, 0x116E, 0x110B, 0x1174 };
	static uint32_t circled_hangul_ieung_u [] = { 0x110B, 0x116E };
	static uint32_t circled_ideograph_one [] = { 0x4E00 };
	static uint32_t circled_ideograph_two [] = { 0x4E8C };
	static uint32_t circled_ideograph_three [] = { 0x4E09 };
	static uint32_t circled_ideograph_four [] = { 0x56DB };
	static uint32_t circled_ideograph_five [] = { 0x4E94 };
	static uint32_t circled_ideograph_six [] = { 0x516D };
	static uint32_t circled_ideograph_seven [] = { 0x4E03 };
	static uint32_t circled_ideograph_eight [] = { 0x516B };
	static uint32_t circled_ideograph_nine [] = { 0x4E5D };
	static uint32_t circled_ideograph_ten [] = { 0x5341 };
	static uint32_t circled_ideograph_moon [] = { 0x6708 };
	static uint32_t circled_ideograph_fire [] = { 0x706B };
	static uint32_t circled_ideograph_water [] = { 0x6C34 };
	static uint32_t circled_ideograph_wood [] = { 0x6728 };
	static uint32_t circled_ideograph_metal [] = { 0x91D1 };
	static uint32_t circled_ideograph_earth [] = { 0x571F };
	static uint32_t circled_ideograph_sun [] = { 0x65E5 };
	static uint32_t circled_ideograph_stock [] = { 0x682A };
	static uint32_t circled_ideograph_have [] = { 0x6709 };
	static uint32_t circled_ideograph_society [] = { 0x793E };
	static uint32_t circled_ideograph_name [] = { 0x540D };
	static uint32_t circled_ideograph_special [] = { 0x7279 };
	static uint32_t circled_ideograph_financial [] = { 0x8CA1 };
	static uint32_t circled_ideograph_congratulation [] = { 0x795D };
	static uint32_t circled_ideograph_labor [] = { 0x52B4 };
	static uint32_t circled_ideograph_secret [] = { 0x79D8 };
	static uint32_t circled_ideograph_male [] = { 0x7537 };
	static uint32_t circled_ideograph_female [] = { 0x5973 };
	static uint32_t circled_ideograph_suitable [] = { 0x9069 };
	static uint32_t circled_ideograph_excellent [] = { 0x512A };
	static uint32_t circled_ideograph_print [] = { 0x5370 };
	static uint32_t circled_ideograph_attention [] = { 0x6CE8 };
	static uint32_t circled_ideograph_item [] = { 0x9805 };
	static uint32_t circled_ideograph_rest [] = { 0x4F11 };
	static uint32_t circled_ideograph_copy [] = { 0x5199 };
	static uint32_t circled_ideograph_correct [] = { 0x6B63 };
	static uint32_t circled_ideograph_high [] = { 0x4E0A };
	static uint32_t circled_ideograph_centre [] = { 0x4E2D };
	static uint32_t circled_ideograph_low [] = { 0x4E0B };
	static uint32_t circled_ideograph_left [] = { 0x5DE6 };
	static uint32_t circled_ideograph_right [] = { 0x53F3 };
	static uint32_t circled_ideograph_medicine [] = { 0x533B };
	static uint32_t circled_ideograph_religion [] = { 0x5B97 };
	static uint32_t circled_ideograph_study [] = { 0x5B66 };
	static uint32_t circled_ideograph_supervise [] = { 0x76E3 };
	static uint32_t circled_ideograph_enterprise [] = { 0x4F01 };
	static uint32_t circled_ideograph_resource [] = { 0x8CC7 };
	static uint32_t circled_ideograph_alliance [] = { 0x5354 };
	static uint32_t circled_ideograph_night [] = { 0x591C };
	static uint32_t circled_number_thirty_six [] = { 0x0033, 0x0036 };
	static uint32_t circled_number_thirty_seven [] = { 0x0033, 0x0037 };
	static uint32_t circled_number_thirty_eight [] = { 0x0033, 0x0038 };
	static uint32_t circled_number_thirty_nine [] = { 0x0033, 0x0039 };
	static uint32_t circled_number_forty [] = { 0x0034, 0x0030 };
	static uint32_t circled_number_forty_one [] = { 0x0034, 0x0031 };
	static uint32_t circled_number_forty_two [] = { 0x0034, 0x0032 };
	static uint32_t circled_number_forty_three [] = { 0x0034, 0x0033 };
	static uint32_t circled_number_forty_four [] = { 0x0034, 0x0034 };
	static uint32_t circled_number_forty_five [] = { 0x0034, 0x0035 };
	static uint32_t circled_number_forty_six [] = { 0x0034, 0x0036 };
	static uint32_t circled_number_forty_seven [] = { 0x0034, 0x0037 };
	static uint32_t circled_number_forty_eight [] = { 0x0034, 0x0038 };
	static uint32_t circled_number_forty_nine [] = { 0x0034, 0x0039 };
	static uint32_t circled_number_fifty [] = { 0x0035, 0x0030 };
	static uint32_t ideographic_telegraph_symbol_for_january [] = { 0x0031, 0x6708 };
	static uint32_t ideographic_telegraph_symbol_for_february [] = { 0x0032, 0x6708 };
	static uint32_t ideographic_telegraph_symbol_for_march [] = { 0x0033, 0x6708 };
	static uint32_t ideographic_telegraph_symbol_for_april [] = { 0x0034, 0x6708 };
	static uint32_t ideographic_telegraph_symbol_for_may [] = { 0x0035, 0x6708 };
	static uint32_t ideographic_telegraph_symbol_for_june [] = { 0x0036, 0x6708 };
	static uint32_t ideographic_telegraph_symbol_for_july [] = { 0x0037, 0x6708 };
	static uint32_t ideographic_telegraph_symbol_for_august [] = { 0x0038, 0x6708 };
	static uint32_t ideographic_telegraph_symbol_for_september [] = { 0x0039, 0x6708 };
	static uint32_t ideographic_telegraph_symbol_for_october [] = { 0x0031, 0x0030, 0x6708 };
	static uint32_t ideographic_telegraph_symbol_for_november [] = { 0x0031, 0x0031, 0x6708 };
	static uint32_t ideographic_telegraph_symbol_for_december [] = { 0x0031, 0x0032, 0x6708 };
	static uint32_t square_hg [] = { 0x0048, 0x0067 };
	static uint32_t square_erg [] = { 0x0065, 0x0072, 0x0067 };
	static uint32_t square_ev [] = { 0x0065, 0x0056 };
	static uint32_t limited_liability_sign [] = { 0x004C, 0x0054, 0x0044 };
	static uint32_t circled_katakana_a [] = { 0x30A2 };
	static uint32_t circled_katakana_i [] = { 0x30A4 };
	static uint32_t circled_katakana_u [] = { 0x30A6 };
	static uint32_t circled_katakana_e [] = { 0x30A8 };
	static uint32_t circled_katakana_o [] = { 0x30AA };
	static uint32_t circled_katakana_ka [] = { 0x30AB };
	static uint32_t circled_katakana_ki [] = { 0x30AD };
	static uint32_t circled_katakana_ku [] = { 0x30AF };
	static uint32_t circled_katakana_ke [] = { 0x30B1 };
	static uint32_t circled_katakana_ko [] = { 0x30B3 };
	static uint32_t circled_katakana_sa [] = { 0x30B5 };
	static uint32_t circled_katakana_si [] = { 0x30B7 };
	static uint32_t circled_katakana_su [] = { 0x30B9 };
	static uint32_t circled_katakana_se [] = { 0x30BB };
	static uint32_t circled_katakana_so [] = { 0x30BD };
	static uint32_t circled_katakana_ta [] = { 0x30BF };
	static uint32_t circled_katakana_ti [] = { 0x30C1 };
	static uint32_t circled_katakana_tu [] = { 0x30C4 };
	static uint32_t circled_katakana_te [] = { 0x30C6 };
	static uint32_t circled_katakana_to [] = { 0x30C8 };
	static uint32_t circled_katakana_na [] = { 0x30CA };
	static uint32_t circled_katakana_ni [] = { 0x30CB };
	static uint32_t circled_katakana_nu [] = { 0x30CC };
	static uint32_t circled_katakana_ne [] = { 0x30CD };
	static uint32_t circled_katakana_no [] = { 0x30CE };
	static uint32_t circled_katakana_ha [] = { 0x30CF };
	static uint32_t circled_katakana_hi [] = { 0x30D2 };
	static uint32_t circled_katakana_hu [] = { 0x30D5 };
	static uint32_t circled_katakana_he [] = { 0x30D8 };
	static uint32_t circled_katakana_ho [] = { 0x30DB };
	static uint32_t circled_katakana_ma [] = { 0x30DE };
	static uint32_t circled_katakana_mi [] = { 0x30DF };
	static uint32_t circled_katakana_mu [] = { 0x30E0 };
	static uint32_t circled_katakana_me [] = { 0x30E1 };
	static uint32_t circled_katakana_mo [] = { 0x30E2 };
	static uint32_t circled_katakana_ya [] = { 0x30E4 };
	static uint32_t circled_katakana_yu [] = { 0x30E6 };
	static uint32_t circled_katakana_yo [] = { 0x30E8 };
	static uint32_t circled_katakana_ra [] = { 0x30E9 };
	static uint32_t circled_katakana_ri [] = { 0x30EA };
	static uint32_t circled_katakana_ru [] = { 0x30EB };
	static uint32_t circled_katakana_re [] = { 0x30EC };
	static uint32_t circled_katakana_ro [] = { 0x30ED };
	static uint32_t circled_katakana_wa [] = { 0x30EF };
	static uint32_t circled_katakana_wi [] = { 0x30F0 };
	static uint32_t circled_katakana_we [] = { 0x30F1 };
	static uint32_t circled_katakana_wo [] = { 0x30F2 };
	static uint32_t square_era_name_reiwa [] = { 0x4EE4, 0x548C };
	static uint32_t square_apaato [] = { 0x30A2, 0x30D1, 0x30FC, 0x30C8 };
	static uint32_t square_aruhua [] = { 0x30A2, 0x30EB, 0x30D5, 0x30A1 };
	static uint32_t square_anpea [] = { 0x30A2, 0x30F3, 0x30DA, 0x30A2 };
	static uint32_t square_aaru [] = { 0x30A2, 0x30FC, 0x30EB };
	static uint32_t square_iningu [] = { 0x30A4, 0x30CB, 0x30F3, 0x30B0 };
	static uint32_t square_inti [] = { 0x30A4, 0x30F3, 0x30C1 };
	static uint32_t square_uon [] = { 0x30A6, 0x30A9, 0x30F3 };
	static uint32_t square_esukuudo [] = { 0x30A8, 0x30B9, 0x30AF, 0x30FC, 0x30C9 };
	static uint32_t square_eekaa [] = { 0x30A8, 0x30FC, 0x30AB, 0x30FC };
	static uint32_t square_onsu [] = { 0x30AA, 0x30F3, 0x30B9 };
	static uint32_t square_oomu [] = { 0x30AA, 0x30FC, 0x30E0 };
	static uint32_t square_kairi [] = { 0x30AB, 0x30A4, 0x30EA };
	static uint32_t square_karatto [] = { 0x30AB, 0x30E9, 0x30C3, 0x30C8 };
	static uint32_t square_karorii [] = { 0x30AB, 0x30ED, 0x30EA, 0x30FC };
	static uint32_t square_garon [] = { 0x30AC, 0x30ED, 0x30F3 };
	static uint32_t square_ganma [] = { 0x30AC, 0x30F3, 0x30DE };
	static uint32_t square_giga [] = { 0x30AE, 0x30AC };
	static uint32_t square_ginii [] = { 0x30AE, 0x30CB, 0x30FC };
	static uint32_t square_kyurii [] = { 0x30AD, 0x30E5, 0x30EA, 0x30FC };
	static uint32_t square_girudaa [] = { 0x30AE, 0x30EB, 0x30C0, 0x30FC };
	static uint32_t square_kiro [] = { 0x30AD, 0x30ED };
	static uint32_t square_kiroguramu [] = { 0x30AD, 0x30ED, 0x30B0, 0x30E9, 0x30E0 };
	static uint32_t square_kiromeetoru [] = { 0x30AD, 0x30ED, 0x30E1, 0x30FC, 0x30C8, 0x30EB };
	static uint32_t square_kirowatto [] = { 0x30AD, 0x30ED, 0x30EF, 0x30C3, 0x30C8 };
	static uint32_t square_guramu [] = { 0x30B0, 0x30E9, 0x30E0 };
	static uint32_t square_guramuton [] = { 0x30B0, 0x30E9, 0x30E0, 0x30C8, 0x30F3 };
	static uint32_t square_kuruzeiro [] = { 0x30AF, 0x30EB, 0x30BC, 0x30A4, 0x30ED };
	static uint32_t square_kuroone [] = { 0x30AF, 0x30ED, 0x30FC, 0x30CD };
	static uint32_t square_keesu [] = { 0x30B1, 0x30FC, 0x30B9 };
	static uint32_t square_koruna [] = { 0x30B3, 0x30EB, 0x30CA };
	static uint32_t square_koopo [] = { 0x30B3, 0x30FC, 0x30DD };
	static uint32_t square_saikuru [] = { 0x30B5, 0x30A4, 0x30AF, 0x30EB };
	static uint32_t square_santiimu [] = { 0x30B5, 0x30F3, 0x30C1, 0x30FC, 0x30E0 };
	static uint32_t square_siringu [] = { 0x30B7, 0x30EA, 0x30F3, 0x30B0 };
	static uint32_t square_senti [] = { 0x30BB, 0x30F3, 0x30C1 };
	static uint32_t square_sento [] = { 0x30BB, 0x30F3, 0x30C8 };
	static uint32_t square_daasu [] = { 0x30C0, 0x30FC, 0x30B9 };
	static uint32_t square_desi [] = { 0x30C7, 0x30B7 };
	static uint32_t square_doru [] = { 0x30C9, 0x30EB };
	static uint32_t square_ton [] = { 0x30C8, 0x30F3 };
	static uint32_t square_nano [] = { 0x30CA, 0x30CE };
	static uint32_t square_notto [] = { 0x30CE, 0x30C3, 0x30C8 };
	static uint32_t square_haitu [] = { 0x30CF, 0x30A4, 0x30C4 };
	static uint32_t square_paasento [] = { 0x30D1, 0x30FC, 0x30BB, 0x30F3, 0x30C8 };
	static uint32_t square_paatu [] = { 0x30D1, 0x30FC, 0x30C4 };
	static uint32_t square_baareru [] = { 0x30D0, 0x30FC, 0x30EC, 0x30EB };
	static uint32_t square_piasutoru [] = { 0x30D4, 0x30A2, 0x30B9, 0x30C8, 0x30EB };
	static uint32_t square_pikuru [] = { 0x30D4, 0x30AF, 0x30EB };
	static uint32_t square_piko [] = { 0x30D4, 0x30B3 };
	static uint32_t square_biru [] = { 0x30D3, 0x30EB };
	static uint32_t square_huaraddo [] = { 0x30D5, 0x30A1, 0x30E9, 0x30C3, 0x30C9 };
	static uint32_t square_huiito [] = { 0x30D5, 0x30A3, 0x30FC, 0x30C8 };
	static uint32_t square_bussyeru [] = { 0x30D6, 0x30C3, 0x30B7, 0x30A7, 0x30EB };
	static uint32_t square_huran [] = { 0x30D5, 0x30E9, 0x30F3 };
	static uint32_t square_hekutaaru [] = { 0x30D8, 0x30AF, 0x30BF, 0x30FC, 0x30EB };
	static uint32_t square_peso [] = { 0x30DA, 0x30BD };
	static uint32_t square_penihi [] = { 0x30DA, 0x30CB, 0x30D2 };
	static uint32_t square_herutu [] = { 0x30D8, 0x30EB, 0x30C4 };
	static uint32_t square_pensu [] = { 0x30DA, 0x30F3, 0x30B9 };
	static uint32_t square_peezi [] = { 0x30DA, 0x30FC, 0x30B8 };
	static uint32_t square_beeta [] = { 0x30D9, 0x30FC, 0x30BF };
	static uint32_t square_pointo [] = { 0x30DD, 0x30A4, 0x30F3, 0x30C8 };
	static uint32_t square_boruto [] = { 0x30DC, 0x30EB, 0x30C8 };
	static uint32_t square_hon [] = { 0x30DB, 0x30F3 };
	static uint32_t square_pondo [] = { 0x30DD, 0x30F3, 0x30C9 };
	static uint32_t square_hooru [] = { 0x30DB, 0x30FC, 0x30EB };
	static uint32_t square_hoon [] = { 0x30DB, 0x30FC, 0x30F3 };
	static uint32_t square_maikuro [] = { 0x30DE, 0x30A4, 0x30AF, 0x30ED };
	static uint32_t square_mairu [] = { 0x30DE, 0x30A4, 0x30EB };
	static uint32_t square_mahha [] = { 0x30DE, 0x30C3, 0x30CF };
	static uint32_t square_maruku [] = { 0x30DE, 0x30EB, 0x30AF };
	static uint32_t square_mansyon [] = { 0x30DE, 0x30F3, 0x30B7, 0x30E7, 0x30F3 };
	static uint32_t square_mikuron [] = { 0x30DF, 0x30AF, 0x30ED, 0x30F3 };
	static uint32_t square_miri [] = { 0x30DF, 0x30EA };
	static uint32_t square_miribaaru [] = { 0x30DF, 0x30EA, 0x30D0, 0x30FC, 0x30EB };
	static uint32_t square_mega [] = { 0x30E1, 0x30AC };
	static uint32_t square_megaton [] = { 0x30E1, 0x30AC, 0x30C8, 0x30F3 };
	static uint32_t square_meetoru [] = { 0x30E1, 0x30FC, 0x30C8, 0x30EB };
	static uint32_t square_yaado [] = { 0x30E4, 0x30FC, 0x30C9 };
	static uint32_t square_yaaru [] = { 0x30E4, 0x30FC, 0x30EB };
	static uint32_t square_yuan [] = { 0x30E6, 0x30A2, 0x30F3 };
	static uint32_t square_rittoru [] = { 0x30EA, 0x30C3, 0x30C8, 0x30EB };
	static uint32_t square_rira [] = { 0x30EA, 0x30E9 };
	static uint32_t square_rupii [] = { 0x30EB, 0x30D4, 0x30FC };
	static uint32_t square_ruuburu [] = { 0x30EB, 0x30FC, 0x30D6, 0x30EB };
	static uint32_t square_remu [] = { 0x30EC, 0x30E0 };
	static uint32_t square_rentogen [] = { 0x30EC, 0x30F3, 0x30C8, 0x30B2, 0x30F3 };
	static uint32_t square_watto [] = { 0x30EF, 0x30C3, 0x30C8 };
	static uint32_t ideographic_telegraph_symbol_for_hour_zero [] = { 0x0030, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_one [] = { 0x0031, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_two [] = { 0x0032, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_three [] = { 0x0033, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_four [] = { 0x0034, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_five [] = { 0x0035, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_six [] = { 0x0036, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_seven [] = { 0x0037, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_eight [] = { 0x0038, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_nine [] = { 0x0039, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_ten [] = { 0x0031, 0x0030, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_eleven [] = { 0x0031, 0x0031, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_twelve [] = { 0x0031, 0x0032, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_thirteen [] = { 0x0031, 0x0033, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_fourteen [] = { 0x0031, 0x0034, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_fifteen [] = { 0x0031, 0x0035, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_sixteen [] = { 0x0031, 0x0036, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_seventeen [] = { 0x0031, 0x0037, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_eighteen [] = { 0x0031, 0x0038, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_nineteen [] = { 0x0031, 0x0039, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_twenty [] = { 0x0032, 0x0030, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_twenty_one [] = { 0x0032, 0x0031, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_twenty_two [] = { 0x0032, 0x0032, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_twenty_three [] = { 0x0032, 0x0033, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_twenty_four [] = { 0x0032, 0x0034, 0x70B9 };
	static uint32_t square_hpa [] = { 0x0068, 0x0050, 0x0061 };
	static uint32_t square_da [] = { 0x0064, 0x0061 };
	static uint32_t square_au [] = { 0x0041, 0x0055 };
	static uint32_t square_bar [] = { 0x0062, 0x0061, 0x0072 };
	static uint32_t square_ov [] = { 0x006F, 0x0056 };
	static uint32_t square_pc [] = { 0x0070, 0x0063 };
	static uint32_t square_dm [] = { 0x0064, 0x006D };
	static uint32_t square_dm_squared [] = { 0x0064, 0x006D, 0x00B2 };
	static uint32_t square_dm_cubed [] = { 0x0064, 0x006D, 0x00B3 };
	static uint32_t square_iu [] = { 0x0049, 0x0055 };
	static uint32_t square_era_name_heisei [] = { 0x5E73, 0x6210 };
	static uint32_t square_era_name_syouwa [] = { 0x662D, 0x548C };
	static uint32_t square_era_name_taisyou [] = { 0x5927, 0x6B63 };
	static uint32_t square_era_name_meizi [] = { 0x660E, 0x6CBB };
	static uint32_t square_corporation [] = { 0x682A, 0x5F0F, 0x4F1A, 0x793E };
	static uint32_t square_pa_amps [] = { 0x0070, 0x0041 };
	static uint32_t square_na [] = { 0x006E, 0x0041 };
	static uint32_t square_mu_a [] = { 0x03BC, 0x0041 };
	static uint32_t square_ma [] = { 0x006D, 0x0041 };
	static uint32_t square_ka [] = { 0x006B, 0x0041 };
	static uint32_t square_kb [] = { 0x004B, 0x0042 };
	static uint32_t square_mb [] = { 0x004D, 0x0042 };
	static uint32_t square_gb [] = { 0x0047, 0x0042 };
	static uint32_t square_cal [] = { 0x0063, 0x0061, 0x006C };
	static uint32_t square_kcal [] = { 0x006B, 0x0063, 0x0061, 0x006C };
	static uint32_t square_pf [] = { 0x0070, 0x0046 };
	static uint32_t square_nf [] = { 0x006E, 0x0046 };
	static uint32_t square_mu_f [] = { 0x03BC, 0x0046 };
	static uint32_t square_mu_g [] = { 0x03BC, 0x0067 };
	static uint32_t square_mg [] = { 0x006D, 0x0067 };
	static uint32_t square_kg [] = { 0x006B, 0x0067 };
	static uint32_t square_hz [] = { 0x0048, 0x007A };
	static uint32_t square_khz [] = { 0x006B, 0x0048, 0x007A };
	static uint32_t square_mhz [] = { 0x004D, 0x0048, 0x007A };
	static uint32_t square_ghz [] = { 0x0047, 0x0048, 0x007A };
	static uint32_t square_thz [] = { 0x0054, 0x0048, 0x007A };
	static uint32_t square_mu_l [] = { 0x03BC, 0x2113 };
	static uint32_t square_ml [] = { 0x006D, 0x2113 };
	static uint32_t square_dl [] = { 0x0064, 0x2113 };
	static uint32_t square_kl [] = { 0x006B, 0x2113 };
	static uint32_t square_fm [] = { 0x0066, 0x006D };
	static uint32_t square_nm [] = { 0x006E, 0x006D };
	static uint32_t square_mu_m [] = { 0x03BC, 0x006D };
	static uint32_t square_mm [] = { 0x006D, 0x006D };
	static uint32_t square_cm [] = { 0x0063, 0x006D };
	static uint32_t square_km [] = { 0x006B, 0x006D };
	static uint32_t square_mm_squared [] = { 0x006D, 0x006D, 0x00B2 };
	static uint32_t square_cm_squared [] = { 0x0063, 0x006D, 0x00B2 };
	static uint32_t square_m_squared [] = { 0x006D, 0x00B2 };
	static uint32_t square_km_squared [] = { 0x006B, 0x006D, 0x00B2 };
	static uint32_t square_mm_cubed [] = { 0x006D, 0x006D, 0x00B3 };
	static uint32_t square_cm_cubed [] = { 0x0063, 0x006D, 0x00B3 };
	static uint32_t square_m_cubed [] = { 0x006D, 0x00B3 };
	static uint32_t square_km_cubed [] = { 0x006B, 0x006D, 0x00B3 };
	static uint32_t square_m_over_s [] = { 0x006D, 0x2215, 0x0073 };
	static uint32_t square_m_over_s_squared [] = { 0x006D, 0x2215, 0x0073, 0x00B2 };
	static uint32_t square_pa [] = { 0x0050, 0x0061 };
	static uint32_t square_kpa [] = { 0x006B, 0x0050, 0x0061 };
	static uint32_t square_mpa [] = { 0x004D, 0x0050, 0x0061 };
	static uint32_t square_gpa [] = { 0x0047, 0x0050, 0x0061 };
	static uint32_t square_rad [] = { 0x0072, 0x0061, 0x0064 };
	static uint32_t square_rad_over_s [] = { 0x0072, 0x0061, 0x0064, 0x2215, 0x0073 };
	static uint32_t square_rad_over_s_squared [] = { 0x0072, 0x0061, 0x0064, 0x2215, 0x0073, 0x00B2 };
	static uint32_t square_ps [] = { 0x0070, 0x0073 };
	static uint32_t square_ns [] = { 0x006E, 0x0073 };
	static uint32_t square_mu_s [] = { 0x03BC, 0x0073 };
	static uint32_t square_ms [] = { 0x006D, 0x0073 };
	static uint32_t square_pv [] = { 0x0070, 0x0056 };
	static uint32_t square_nv [] = { 0x006E, 0x0056 };
	static uint32_t square_mu_v [] = { 0x03BC, 0x0056 };
	static uint32_t square_mv [] = { 0x006D, 0x0056 };
	static uint32_t square_kv [] = { 0x006B, 0x0056 };
	static uint32_t square_mv_mega [] = { 0x004D, 0x0056 };
	static uint32_t square_pw [] = { 0x0070, 0x0057 };
	static uint32_t square_nw [] = { 0x006E, 0x0057 };
	static uint32_t square_mu_w [] = { 0x03BC, 0x0057 };
	static uint32_t square_mw [] = { 0x006D, 0x0057 };
	static uint32_t square_kw [] = { 0x006B, 0x0057 };
	static uint32_t square_mw_mega [] = { 0x004D, 0x0057 };
	static uint32_t square_k_ohm [] = { 0x006B, 0x03A9 };
	static uint32_t square_m_ohm [] = { 0x004D, 0x03A9 };
	static uint32_t square_am [] = { 0x0061, 0x002E, 0x006D, 0x002E };
	static uint32_t square_bq [] = { 0x0042, 0x0071 };
	static uint32_t square_cc [] = { 0x0063, 0x0063 };
	static uint32_t square_cd [] = { 0x0063, 0x0064 };
	static uint32_t square_c_over_kg [] = { 0x0043, 0x2215, 0x006B, 0x0067 };
	static uint32_t square_co [] = { 0x0043, 0x006F, 0x002E };
	static uint32_t square_db [] = { 0x0064, 0x0042 };
	static uint32_t square_gy [] = { 0x0047, 0x0079 };
	static uint32_t square_ha [] = { 0x0068, 0x0061 };
	static uint32_t square_hp [] = { 0x0048, 0x0050 };
	static uint32_t square_in [] = { 0x0069, 0x006E };
	static uint32_t square_kk [] = { 0x004B, 0x004B };
	static uint32_t square_km_capital [] = { 0x004B, 0x004D };
	static uint32_t square_kt [] = { 0x006B, 0x0074 };
	static uint32_t square_lm [] = { 0x006C, 0x006D };
	static uint32_t square_ln [] = { 0x006C, 0x006E };
	static uint32_t square_log [] = { 0x006C, 0x006F, 0x0067 };
	static uint32_t square_lx [] = { 0x006C, 0x0078 };
	static uint32_t square_mb_small [] = { 0x006D, 0x0062 };
	static uint32_t square_mil [] = { 0x006D, 0x0069, 0x006C };
	static uint32_t square_mol [] = { 0x006D, 0x006F, 0x006C };
	static uint32_t square_ph [] = { 0x0050, 0x0048 };
	static uint32_t square_pm [] = { 0x0070, 0x002E, 0x006D, 0x002E };
	static uint32_t square_ppm [] = { 0x0050, 0x0050, 0x004D };
	static uint32_t square_pr [] = { 0x0050, 0x0052 };
	static uint32_t square_sr [] = { 0x0073, 0x0072 };
	static uint32_t square_sv [] = { 0x0053, 0x0076 };
	static uint32_t square_wb [] = { 0x0057, 0x0062 };
	static uint32_t square_v_over_m [] = { 0x0056, 0x2215, 0x006D };
	static uint32_t square_a_over_m [] = { 0x0041, 0x2215, 0x006D };
	static uint32_t ideographic_telegraph_symbol_for_day_one [] = { 0x0031, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_two [] = { 0x0032, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_three [] = { 0x0033, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_four [] = { 0x0034, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_five [] = { 0x0035, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_six [] = { 0x0036, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_seven [] = { 0x0037, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_eight [] = { 0x0038, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_nine [] = { 0x0039, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_ten [] = { 0x0031, 0x0030, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_eleven [] = { 0x0031, 0x0031, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_twelve [] = { 0x0031, 0x0032, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_thirteen [] = { 0x0031, 0x0033, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_fourteen [] = { 0x0031, 0x0034, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_fifteen [] = { 0x0031, 0x0035, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_sixteen [] = { 0x0031, 0x0036, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_seventeen [] = { 0x0031, 0x0037, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_eighteen [] = { 0x0031, 0x0038, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_nineteen [] = { 0x0031, 0x0039, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_twenty [] = { 0x0032, 0x0030, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_twenty_one [] = { 0x0032, 0x0031, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_twenty_two [] = { 0x0032, 0x0032, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_twenty_three [] = { 0x0032, 0x0033, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_twenty_four [] = { 0x0032, 0x0034, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_twenty_five [] = { 0x0032, 0x0035, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_twenty_six [] = { 0x0032, 0x0036, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_twenty_seven [] = { 0x0032, 0x0037, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_twenty_eight [] = { 0x0032, 0x0038, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_twenty_nine [] = { 0x0032, 0x0039, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_thirty [] = { 0x0033, 0x0030, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_thirty_one [] = { 0x0033, 0x0031, 0x65E5 };
	static uint32_t square_gal [] = { 0x0067, 0x0061, 0x006C };
	static uint32_t modifier_letter_cyrillic_hard_sign [] = { 0x044A };
	static uint32_t modifier_letter_cyrillic_soft_sign [] = { 0x044C };
	static uint32_t modifier_letter_us [] = { 0xA76F };
	static uint32_t modifier_letter_capital_h_with_stroke [] = { 0x0126 };
	static uint32_t modifier_letter_small_ligature_oe [] = { 0x0153 };
	static uint32_t modifier_letter_small_heng [] = { 0xA727 };
	static uint32_t modifier_letter_small_l_with_inverted_lazy_s [] = { 0xAB37 };
	static uint32_t modifier_letter_small_l_with_middle_tilde [] = { 0x026B };
	static uint32_t modifier_letter_small_u_with_left_hook [] = { 0xAB52 };
	static uint32_t modifier_letter_small_turned_w [] = { 0x028D };
	static uint32_t cjk_compatibility_ideograph_f900 [] = { 0x8C48 };
	static uint32_t cjk_compatibility_ideograph_f901 [] = { 0x66F4 };
	static uint32_t cjk_compatibility_ideograph_f902 [] = { 0x8ECA };
	static uint32_t cjk_compatibility_ideograph_f903 [] = { 0x8CC8 };
	static uint32_t cjk_compatibility_ideograph_f904 [] = { 0x6ED1 };
	static uint32_t cjk_compatibility_ideograph_f905 [] = { 0x4E32 };
	static uint32_t cjk_compatibility_ideograph_f906 [] = { 0x53E5 };
	static uint32_t cjk_compatibility_ideograph_f907 [] = { 0x9F9C };
	static uint32_t cjk_compatibility_ideograph_f908 [] = { 0x9F9C };
	static uint32_t cjk_compatibility_ideograph_f909 [] = { 0x5951 };
	static uint32_t cjk_compatibility_ideograph_f90a [] = { 0x91D1 };
	static uint32_t cjk_compatibility_ideograph_f90b [] = { 0x5587 };
	static uint32_t cjk_compatibility_ideograph_f90c [] = { 0x5948 };
	static uint32_t cjk_compatibility_ideograph_f90d [] = { 0x61F6 };
	static uint32_t cjk_compatibility_ideograph_f90e [] = { 0x7669 };
	static uint32_t cjk_compatibility_ideograph_f90f [] = { 0x7F85 };
	static uint32_t cjk_compatibility_ideograph_f910 [] = { 0x863F };
	static uint32_t cjk_compatibility_ideograph_f911 [] = { 0x87BA };
	static uint32_t cjk_compatibility_ideograph_f912 [] = { 0x88F8 };
	static uint32_t cjk_compatibility_ideograph_f913 [] = { 0x908F };
	static uint32_t cjk_compatibility_ideograph_f914 [] = { 0x6A02 };
	static uint32_t cjk_compatibility_ideograph_f915 [] = { 0x6D1B };
	static uint32_t cjk_compatibility_ideograph_f916 [] = { 0x70D9 };
	static uint32_t cjk_compatibility_ideograph_f917 [] = { 0x73DE };
	static uint32_t cjk_compatibility_ideograph_f918 [] = { 0x843D };
	static uint32_t cjk_compatibility_ideograph_f919 [] = { 0x916A };
	static uint32_t cjk_compatibility_ideograph_f91a [] = { 0x99F1 };
	static uint32_t cjk_compatibility_ideograph_f91b [] = { 0x4E82 };
	static uint32_t cjk_compatibility_ideograph_f91c [] = { 0x5375 };
	static uint32_t cjk_compatibility_ideograph_f91d [] = { 0x6B04 };
	static uint32_t cjk_compatibility_ideograph_f91e [] = { 0x721B };
	static uint32_t cjk_compatibility_ideograph_f91f [] = { 0x862D };
	static uint32_t cjk_compatibility_ideograph_f920 [] = { 0x9E1E };
	static uint32_t cjk_compatibility_ideograph_f921 [] = { 0x5D50 };
	static uint32_t cjk_compatibility_ideograph_f922 [] = { 0x6FEB };
	static uint32_t cjk_compatibility_ideograph_f923 [] = { 0x85CD };
	static uint32_t cjk_compatibility_ideograph_f924 [] = { 0x8964 };
	static uint32_t cjk_compatibility_ideograph_f925 [] = { 0x62C9 };
	static uint32_t cjk_compatibility_ideograph_f926 [] = { 0x81D8 };
	static uint32_t cjk_compatibility_ideograph_f927 [] = { 0x881F };
	static uint32_t cjk_compatibility_ideograph_f928 [] = { 0x5ECA };
	static uint32_t cjk_compatibility_ideograph_f929 [] = { 0x6717 };
	static uint32_t cjk_compatibility_ideograph_f92a [] = { 0x6D6A };
	static uint32_t cjk_compatibility_ideograph_f92b [] = { 0x72FC };
	static uint32_t cjk_compatibility_ideograph_f92c [] = { 0x90CE };
	static uint32_t cjk_compatibility_ideograph_f92d [] = { 0x4F86 };
	static uint32_t cjk_compatibility_ideograph_f92e [] = { 0x51B7 };
	static uint32_t cjk_compatibility_ideograph_f92f [] = { 0x52DE };
	static uint32_t cjk_compatibility_ideograph_f930 [] = { 0x64C4 };
	static uint32_t cjk_compatibility_ideograph_f931 [] = { 0x6AD3 };
	static uint32_t cjk_compatibility_ideograph_f932 [] = { 0x7210 };
	static uint32_t cjk_compatibility_ideograph_f933 [] = { 0x76E7 };
	static uint32_t cjk_compatibility_ideograph_f934 [] = { 0x8001 };
	static uint32_t cjk_compatibility_ideograph_f935 [] = { 0x8606 };
	static uint32_t cjk_compatibility_ideograph_f936 [] = { 0x865C };
	static uint32_t cjk_compatibility_ideograph_f937 [] = { 0x8DEF };
	static uint32_t cjk_compatibility_ideograph_f938 [] = { 0x9732 };
	static uint32_t cjk_compatibility_ideograph_f939 [] = { 0x9B6F };
	static uint32_t cjk_compatibility_ideograph_f93a [] = { 0x9DFA };
	static uint32_t cjk_compatibility_ideograph_f93b [] = { 0x788C };
	static uint32_t cjk_compatibility_ideograph_f93c [] = { 0x797F };
	static uint32_t cjk_compatibility_ideograph_f93d [] = { 0x7DA0 };
	static uint32_t cjk_compatibility_ideograph_f93e [] = { 0x83C9 };
	static uint32_t cjk_compatibility_ideograph_f93f [] = { 0x9304 };
	static uint32_t cjk_compatibility_ideograph_f940 [] = { 0x9E7F };
	static uint32_t cjk_compatibility_ideograph_f941 [] = { 0x8AD6 };
	static uint32_t cjk_compatibility_ideograph_f942 [] = { 0x58DF };
	static uint32_t cjk_compatibility_ideograph_f943 [] = { 0x5F04 };
	static uint32_t cjk_compatibility_ideograph_f944 [] = { 0x7C60 };
	static uint32_t cjk_compatibility_ideograph_f945 [] = { 0x807E };
	static uint32_t cjk_compatibility_ideograph_f946 [] = { 0x7262 };
	static uint32_t cjk_compatibility_ideograph_f947 [] = { 0x78CA };
	static uint32_t cjk_compatibility_ideograph_f948 [] = { 0x8CC2 };
	static uint32_t cjk_compatibility_ideograph_f949 [] = { 0x96F7 };
	static uint32_t cjk_compatibility_ideograph_f94a [] = { 0x58D8 };
	static uint32_t cjk_compatibility_ideograph_f94b [] = { 0x5C62 };
	static uint32_t cjk_compatibility_ideograph_f94c [] = { 0x6A13 };
	static uint32_t cjk_compatibility_ideograph_f94d [] = { 0x6DDA };
	static uint32_t cjk_compatibility_ideograph_f94e [] = { 0x6F0F };
	static uint32_t cjk_compatibility_ideograph_f94f [] = { 0x7D2F };
	static uint32_t cjk_compatibility_ideograph_f950 [] = { 0x7E37 };
	static uint32_t cjk_compatibility_ideograph_f951 [] = { 0x964B };
	static uint32_t cjk_compatibility_ideograph_f952 [] = { 0x52D2 };
	static uint32_t cjk_compatibility_ideograph_f953 [] = { 0x808B };
	static uint32_t cjk_compatibility_ideograph_f954 [] = { 0x51DC };
	static uint32_t cjk_compatibility_ideograph_f955 [] = { 0x51CC };
	static uint32_t cjk_compatibility_ideograph_f956 [] = { 0x7A1C };
	static uint32_t cjk_compatibility_ideograph_f957 [] = { 0x7DBE };
	static uint32_t cjk_compatibility_ideograph_f958 [] = { 0x83F1 };
	static uint32_t cjk_compatibility_ideograph_f959 [] = { 0x9675 };
	static uint32_t cjk_compatibility_ideograph_f95a [] = { 0x8B80 };
	static uint32_t cjk_compatibility_ideograph_f95b [] = { 0x62CF };
	static uint32_t cjk_compatibility_ideograph_f95c [] = { 0x6A02 };
	static uint32_t cjk_compatibility_ideograph_f95d [] = { 0x8AFE };
	static uint32_t cjk_compatibility_ideograph_f95e [] = { 0x4E39 };
	static uint32_t cjk_compatibility_ideograph_f95f [] = { 0x5BE7 };
	static uint32_t cjk_compatibility_ideograph_f960 [] = { 0x6012 };
	static uint32_t cjk_compatibility_ideograph_f961 [] = { 0x7387 };
	static uint32_t cjk_compatibility_ideograph_f962 [] = { 0x7570 };
	static uint32_t cjk_compatibility_ideograph_f963 [] = { 0x5317 };
	static uint32_t cjk_compatibility_ideograph_f964 [] = { 0x78FB };
	static uint32_t cjk_compatibility_ideograph_f965 [] = { 0x4FBF };
	static uint32_t cjk_compatibility_ideograph_f966 [] = { 0x5FA9 };
	static uint32_t cjk_compatibility_ideograph_f967 [] = { 0x4E0D };
	static uint32_t cjk_compatibility_ideograph_f968 [] = { 0x6CCC };
	static uint32_t cjk_compatibility_ideograph_f969 [] = { 0x6578 };
	static uint32_t cjk_compatibility_ideograph_f96a [] = { 0x7D22 };
	static uint32_t cjk_compatibility_ideograph_f96b [] = { 0x53C3 };
	static uint32_t cjk_compatibility_ideograph_f96c [] = { 0x585E };
	static uint32_t cjk_compatibility_ideograph_f96d [] = { 0x7701 };
	static uint32_t cjk_compatibility_ideograph_f96e [] = { 0x8449 };
	static uint32_t cjk_compatibility_ideograph_f96f [] = { 0x8AAA };
	static uint32_t cjk_compatibility_ideograph_f970 [] = { 0x6BBA };
	static uint32_t cjk_compatibility_ideograph_f971 [] = { 0x8FB0 };
	static uint32_t cjk_compatibility_ideograph_f972 [] = { 0x6C88 };
	static uint32_t cjk_compatibility_ideograph_f973 [] = { 0x62FE };
	static uint32_t cjk_compatibility_ideograph_f974 [] = { 0x82E5 };
	static uint32_t cjk_compatibility_ideograph_f975 [] = { 0x63A0 };
	static uint32_t cjk_compatibility_ideograph_f976 [] = { 0x7565 };
	static uint32_t cjk_compatibility_ideograph_f977 [] = { 0x4EAE };
	static uint32_t cjk_compatibility_ideograph_f978 [] = { 0x5169 };
	static uint32_t cjk_compatibility_ideograph_f979 [] = { 0x51C9 };
	static uint32_t cjk_compatibility_ideograph_f97a [] = { 0x6881 };
	static uint32_t cjk_compatibility_ideograph_f97b [] = { 0x7CE7 };
	static uint32_t cjk_compatibility_ideograph_f97c [] = { 0x826F };
	static uint32_t cjk_compatibility_ideograph_f97d [] = { 0x8AD2 };
	static uint32_t cjk_compatibility_ideograph_f97e [] = { 0x91CF };
	static uint32_t cjk_compatibility_ideograph_f97f [] = { 0x52F5 };
	static uint32_t cjk_compatibility_ideograph_f980 [] = { 0x5442 };
	static uint32_t cjk_compatibility_ideograph_f981 [] = { 0x5973 };
	static uint32_t cjk_compatibility_ideograph_f982 [] = { 0x5EEC };
	static uint32_t cjk_compatibility_ideograph_f983 [] = { 0x65C5 };
	static uint32_t cjk_compatibility_ideograph_f984 [] = { 0x6FFE };
	static uint32_t cjk_compatibility_ideograph_f985 [] = { 0x792A };
	static uint32_t cjk_compatibility_ideograph_f986 [] = { 0x95AD };
	static uint32_t cjk_compatibility_ideograph_f987 [] = { 0x9A6A };
	static uint32_t cjk_compatibility_ideograph_f988 [] = { 0x9E97 };
	static uint32_t cjk_compatibility_ideograph_f989 [] = { 0x9ECE };
	static uint32_t cjk_compatibility_ideograph_f98a [] = { 0x529B };
	static uint32_t cjk_compatibility_ideograph_f98b [] = { 0x66C6 };
	static uint32_t cjk_compatibility_ideograph_f98c [] = { 0x6B77 };
	static uint32_t cjk_compatibility_ideograph_f98d [] = { 0x8F62 };
	static uint32_t cjk_compatibility_ideograph_f98e [] = { 0x5E74 };
	static uint32_t cjk_compatibility_ideograph_f98f [] = { 0x6190 };
	static uint32_t cjk_compatibility_ideograph_f990 [] = { 0x6200 };
	static uint32_t cjk_compatibility_ideograph_f991 [] = { 0x649A };
	static uint32_t cjk_compatibility_ideograph_f992 [] = { 0x6F23 };
	static uint32_t cjk_compatibility_ideograph_f993 [] = { 0x7149 };
	static uint32_t cjk_compatibility_ideograph_f994 [] = { 0x7489 };
	static uint32_t cjk_compatibility_ideograph_f995 [] = { 0x79CA };
	static uint32_t cjk_compatibility_ideograph_f996 [] = { 0x7DF4 };
	static uint32_t cjk_compatibility_ideograph_f997 [] = { 0x806F };
	static uint32_t cjk_compatibility_ideograph_f998 [] = { 0x8F26 };
	static uint32_t cjk_compatibility_ideograph_f999 [] = { 0x84EE };
	static uint32_t cjk_compatibility_ideograph_f99a [] = { 0x9023 };
	static uint32_t cjk_compatibility_ideograph_f99b [] = { 0x934A };
	static uint32_t cjk_compatibility_ideograph_f99c [] = { 0x5217 };
	static uint32_t cjk_compatibility_ideograph_f99d [] = { 0x52A3 };
	static uint32_t cjk_compatibility_ideograph_f99e [] = { 0x54BD };
	static uint32_t cjk_compatibility_ideograph_f99f [] = { 0x70C8 };
	static uint32_t cjk_compatibility_ideograph_f9a0 [] = { 0x88C2 };
	static uint32_t cjk_compatibility_ideograph_f9a1 [] = { 0x8AAA };
	static uint32_t cjk_compatibility_ideograph_f9a2 [] = { 0x5EC9 };
	static uint32_t cjk_compatibility_ideograph_f9a3 [] = { 0x5FF5 };
	static uint32_t cjk_compatibility_ideograph_f9a4 [] = { 0x637B };
	static uint32_t cjk_compatibility_ideograph_f9a5 [] = { 0x6BAE };
	static uint32_t cjk_compatibility_ideograph_f9a6 [] = { 0x7C3E };
	static uint32_t cjk_compatibility_ideograph_f9a7 [] = { 0x7375 };
	static uint32_t cjk_compatibility_ideograph_f9a8 [] = { 0x4EE4 };
	static uint32_t cjk_compatibility_ideograph_f9a9 [] = { 0x56F9 };
	static uint32_t cjk_compatibility_ideograph_f9aa [] = { 0x5BE7 };
	static uint32_t cjk_compatibility_ideograph_f9ab [] = { 0x5DBA };
	static uint32_t cjk_compatibility_ideograph_f9ac [] = { 0x601C };
	static uint32_t cjk_compatibility_ideograph_f9ad [] = { 0x73B2 };
	static uint32_t cjk_compatibility_ideograph_f9ae [] = { 0x7469 };
	static uint32_t cjk_compatibility_ideograph_f9af [] = { 0x7F9A };
	static uint32_t cjk_compatibility_ideograph_f9b0 [] = { 0x8046 };
	static uint32_t cjk_compatibility_ideograph_f9b1 [] = { 0x9234 };
	static uint32_t cjk_compatibility_ideograph_f9b2 [] = { 0x96F6 };
	static uint32_t cjk_compatibility_ideograph_f9b3 [] = { 0x9748 };
	static uint32_t cjk_compatibility_ideograph_f9b4 [] = { 0x9818 };
	static uint32_t cjk_compatibility_ideograph_f9b5 [] = { 0x4F8B };
	static uint32_t cjk_compatibility_ideograph_f9b6 [] = { 0x79AE };
	static uint32_t cjk_compatibility_ideograph_f9b7 [] = { 0x91B4 };
	static uint32_t cjk_compatibility_ideograph_f9b8 [] = { 0x96B8 };
	static uint32_t cjk_compatibility_ideograph_f9b9 [] = { 0x60E1 };
	static uint32_t cjk_compatibility_ideograph_f9ba [] = { 0x4E86 };
	static uint32_t cjk_compatibility_ideograph_f9bb [] = { 0x50DA };
	static uint32_t cjk_compatibility_ideograph_f9bc [] = { 0x5BEE };
	static uint32_t cjk_compatibility_ideograph_f9bd [] = { 0x5C3F };
	static uint32_t cjk_compatibility_ideograph_f9be [] = { 0x6599 };
	static uint32_t cjk_compatibility_ideograph_f9bf [] = { 0x6A02 };
	static uint32_t cjk_compatibility_ideograph_f9c0 [] = { 0x71CE };
	static uint32_t cjk_compatibility_ideograph_f9c1 [] = { 0x7642 };
	static uint32_t cjk_compatibility_ideograph_f9c2 [] = { 0x84FC };
	static uint32_t cjk_compatibility_ideograph_f9c3 [] = { 0x907C };
	static uint32_t cjk_compatibility_ideograph_f9c4 [] = { 0x9F8D };
	static uint32_t cjk_compatibility_ideograph_f9c5 [] = { 0x6688 };
	static uint32_t cjk_compatibility_ideograph_f9c6 [] = { 0x962E };
	static uint32_t cjk_compatibility_ideograph_f9c7 [] = { 0x5289 };
	static uint32_t cjk_compatibility_ideograph_f9c8 [] = { 0x677B };
	static uint32_t cjk_compatibility_ideograph_f9c9 [] = { 0x67F3 };
	static uint32_t cjk_compatibility_ideograph_f9ca [] = { 0x6D41 };
	static uint32_t cjk_compatibility_ideograph_f9cb [] = { 0x6E9C };
	static uint32_t cjk_compatibility_ideograph_f9cc [] = { 0x7409 };
	static uint32_t cjk_compatibility_ideograph_f9cd [] = { 0x7559 };
	static uint32_t cjk_compatibility_ideograph_f9ce [] = { 0x786B };
	static uint32_t cjk_compatibility_ideograph_f9cf [] = { 0x7D10 };
	static uint32_t cjk_compatibility_ideograph_f9d0 [] = { 0x985E };
	static uint32_t cjk_compatibility_ideograph_f9d1 [] = { 0x516D };
	static uint32_t cjk_compatibility_ideograph_f9d2 [] = { 0x622E };
	static uint32_t cjk_compatibility_ideograph_f9d3 [] = { 0x9678 };
	static uint32_t cjk_compatibility_ideograph_f9d4 [] = { 0x502B };
	static uint32_t cjk_compatibility_ideograph_f9d5 [] = { 0x5D19 };
	static uint32_t cjk_compatibility_ideograph_f9d6 [] = { 0x6DEA };
	static uint32_t cjk_compatibility_ideograph_f9d7 [] = { 0x8F2A };
	static uint32_t cjk_compatibility_ideograph_f9d8 [] = { 0x5F8B };
	static uint32_t cjk_compatibility_ideograph_f9d9 [] = { 0x6144 };
	static uint32_t cjk_compatibility_ideograph_f9da [] = { 0x6817 };
	static uint32_t cjk_compatibility_ideograph_f9db [] = { 0x7387 };
	static uint32_t cjk_compatibility_ideograph_f9dc [] = { 0x9686 };
	static uint32_t cjk_compatibility_ideograph_f9dd [] = { 0x5229 };
	static uint32_t cjk_compatibility_ideograph_f9de [] = { 0x540F };
	static uint32_t cjk_compatibility_ideograph_f9df [] = { 0x5C65 };
	static uint32_t cjk_compatibility_ideograph_f9e0 [] = { 0x6613 };
	static uint32_t cjk_compatibility_ideograph_f9e1 [] = { 0x674E };
	static uint32_t cjk_compatibility_ideograph_f9e2 [] = { 0x68A8 };
	static uint32_t cjk_compatibility_ideograph_f9e3 [] = { 0x6CE5 };
	static uint32_t cjk_compatibility_ideograph_f9e4 [] = { 0x7406 };
	static uint32_t cjk_compatibility_ideograph_f9e5 [] = { 0x75E2 };
	static uint32_t cjk_compatibility_ideograph_f9e6 [] = { 0x7F79 };
	static uint32_t cjk_compatibility_ideograph_f9e7 [] = { 0x88CF };
	static uint32_t cjk_compatibility_ideograph_f9e8 [] = { 0x88E1 };
	static uint32_t cjk_compatibility_ideograph_f9e9 [] = { 0x91CC };
	static uint32_t cjk_compatibility_ideograph_f9ea [] = { 0x96E2 };
	static uint32_t cjk_compatibility_ideograph_f9eb [] = { 0x533F };
	static uint32_t cjk_compatibility_ideograph_f9ec [] = { 0x6EBA };
	static uint32_t cjk_compatibility_ideograph_f9ed [] = { 0x541D };
	static uint32_t cjk_compatibility_ideograph_f9ee [] = { 0x71D0 };
	static uint32_t cjk_compatibility_ideograph_f9ef [] = { 0x7498 };
	static uint32_t cjk_compatibility_ideograph_f9f0 [] = { 0x85FA };
	static uint32_t cjk_compatibility_ideograph_f9f1 [] = { 0x96A3 };
	static uint32_t cjk_compatibility_ideograph_f9f2 [] = { 0x9C57 };
	static uint32_t cjk_compatibility_ideograph_f9f3 [] = { 0x9E9F };
	static uint32_t cjk_compatibility_ideograph_f9f4 [] = { 0x6797 };
	static uint32_t cjk_compatibility_ideograph_f9f5 [] = { 0x6DCB };
	static uint32_t cjk_compatibility_ideograph_f9f6 [] = { 0x81E8 };
	static uint32_t cjk_compatibility_ideograph_f9f7 [] = { 0x7ACB };
	static uint32_t cjk_compatibility_ideograph_f9f8 [] = { 0x7B20 };
	static uint32_t cjk_compatibility_ideograph_f9f9 [] = { 0x7C92 };
	static uint32_t cjk_compatibility_ideograph_f9fa [] = { 0x72C0 };
	static uint32_t cjk_compatibility_ideograph_f9fb [] = { 0x7099 };
	static uint32_t cjk_compatibility_ideograph_f9fc [] = { 0x8B58 };
	static uint32_t cjk_compatibility_ideograph_f9fd [] = { 0x4EC0 };
	static uint32_t cjk_compatibility_ideograph_f9fe [] = { 0x8336 };
	static uint32_t cjk_compatibility_ideograph_f9ff [] = { 0x523A };
	static uint32_t cjk_compatibility_ideograph_fa00 [] = { 0x5207 };
	static uint32_t cjk_compatibility_ideograph_fa01 [] = { 0x5EA6 };
	static uint32_t cjk_compatibility_ideograph_fa02 [] = { 0x62D3 };
	static uint32_t cjk_compatibility_ideograph_fa03 [] = { 0x7CD6 };
	static uint32_t cjk_compatibility_ideograph_fa04 [] = { 0x5B85 };
	static uint32_t cjk_compatibility_ideograph_fa05 [] = { 0x6D1E };
	static uint32_t cjk_compatibility_ideograph_fa06 [] = { 0x66B4 };
	static uint32_t cjk_compatibility_ideograph_fa07 [] = { 0x8F3B };
	static uint32_t cjk_compatibility_ideograph_fa08 [] = { 0x884C };
	static uint32_t cjk_compatibility_ideograph_fa09 [] = { 0x964D };
	static uint32_t cjk_compatibility_ideograph_fa0a [] = { 0x898B };
	static uint32_t cjk_compatibility_ideograph_fa0b [] = { 0x5ED3 };
	static uint32_t cjk_compatibility_ideograph_fa0c [] = { 0x5140 };
	static uint32_t cjk_compatibility_ideograph_fa0d [] = { 0x55C0 };
	static uint32_t cjk_compatibility_ideograph_fa10 [] = { 0x585A };
	static uint32_t cjk_compatibility_ideograph_fa12 [] = { 0x6674 };
	static uint32_t cjk_compatibility_ideograph_fa15 [] = { 0x51DE };
	static uint32_t cjk_compatibility_ideograph_fa16 [] = { 0x732A };
	static uint32_t cjk_compatibility_ideograph_fa17 [] = { 0x76CA };
	static uint32_t cjk_compatibility_ideograph_fa18 [] = { 0x793C };
	static uint32_t cjk_compatibility_ideograph_fa19 [] = { 0x795E };
	static uint32_t cjk_compatibility_ideograph_fa1a [] = { 0x7965 };
	static uint32_t cjk_compatibility_ideograph_fa1b [] = { 0x798F };
	static uint32_t cjk_compatibility_ideograph_fa1c [] = { 0x9756 };
	static uint32_t cjk_compatibility_ideograph_fa1d [] = { 0x7CBE };
	static uint32_t cjk_compatibility_ideograph_fa1e [] = { 0x7FBD };
	static uint32_t cjk_compatibility_ideograph_fa20 [] = { 0x8612 };
	static uint32_t cjk_compatibility_ideograph_fa22 [] = { 0x8AF8 };
	static uint32_t cjk_compatibility_ideograph_fa25 [] = { 0x9038 };
	static uint32_t cjk_compatibility_ideograph_fa26 [] = { 0x90FD };
	static uint32_t cjk_compatibility_ideograph_fa2a [] = { 0x98EF };
	static uint32_t cjk_compatibility_ideograph_fa2b [] = { 0x98FC };
	static uint32_t cjk_compatibility_ideograph_fa2c [] = { 0x9928 };
	static uint32_t cjk_compatibility_ideograph_fa2d [] = { 0x9DB4 };
	static uint32_t cjk_compatibility_ideograph_fa2e [] = { 0x90DE };
	static uint32_t cjk_compatibility_ideograph_fa2f [] = { 0x96B7 };
	static uint32_t cjk_compatibility_ideograph_fa30 [] = { 0x4FAE };
	static uint32_t cjk_compatibility_ideograph_fa31 [] = { 0x50E7 };
	static uint32_t cjk_compatibility_ideograph_fa32 [] = { 0x514D };
	static uint32_t cjk_compatibility_ideograph_fa33 [] = { 0x52C9 };
	static uint32_t cjk_compatibility_ideograph_fa34 [] = { 0x52E4 };
	static uint32_t cjk_compatibility_ideograph_fa35 [] = { 0x5351 };
	static uint32_t cjk_compatibility_ideograph_fa36 [] = { 0x559D };
	static uint32_t cjk_compatibility_ideograph_fa37 [] = { 0x5606 };
	static uint32_t cjk_compatibility_ideograph_fa38 [] = { 0x5668 };
	static uint32_t cjk_compatibility_ideograph_fa39 [] = { 0x5840 };
	static uint32_t cjk_compatibility_ideograph_fa3a [] = { 0x58A8 };
	static uint32_t cjk_compatibility_ideograph_fa3b [] = { 0x5C64 };
	static uint32_t cjk_compatibility_ideograph_fa3c [] = { 0x5C6E };
	static uint32_t cjk_compatibility_ideograph_fa3d [] = { 0x6094 };
	static uint32_t cjk_compatibility_ideograph_fa3e [] = { 0x6168 };
	static uint32_t cjk_compatibility_ideograph_fa3f [] = { 0x618E };
	static uint32_t cjk_compatibility_ideograph_fa40 [] = { 0x61F2 };
	static uint32_t cjk_compatibility_ideograph_fa41 [] = { 0x654F };
	static uint32_t cjk_compatibility_ideograph_fa42 [] = { 0x65E2 };
	static uint32_t cjk_compatibility_ideograph_fa43 [] = { 0x6691 };
	static uint32_t cjk_compatibility_ideograph_fa44 [] = { 0x6885 };
	static uint32_t cjk_compatibility_ideograph_fa45 [] = { 0x6D77 };
	static uint32_t cjk_compatibility_ideograph_fa46 [] = { 0x6E1A };
	static uint32_t cjk_compatibility_ideograph_fa47 [] = { 0x6F22 };
	static uint32_t cjk_compatibility_ideograph_fa48 [] = { 0x716E };
	static uint32_t cjk_compatibility_ideograph_fa49 [] = { 0x722B };
	static uint32_t cjk_compatibility_ideograph_fa4a [] = { 0x7422 };
	static uint32_t cjk_compatibility_ideograph_fa4b [] = { 0x7891 };
	static uint32_t cjk_compatibility_ideograph_fa4c [] = { 0x793E };
	static uint32_t cjk_compatibility_ideograph_fa4d [] = { 0x7949 };
	static uint32_t cjk_compatibility_ideograph_fa4e [] = { 0x7948 };
	static uint32_t cjk_compatibility_ideograph_fa4f [] = { 0x7950 };
	static uint32_t cjk_compatibility_ideograph_fa50 [] = { 0x7956 };
	static uint32_t cjk_compatibility_ideograph_fa51 [] = { 0x795D };
	static uint32_t cjk_compatibility_ideograph_fa52 [] = { 0x798D };
	static uint32_t cjk_compatibility_ideograph_fa53 [] = { 0x798E };
	static uint32_t cjk_compatibility_ideograph_fa54 [] = { 0x7A40 };
	static uint32_t cjk_compatibility_ideograph_fa55 [] = { 0x7A81 };
	static uint32_t cjk_compatibility_ideograph_fa56 [] = { 0x7BC0 };
	static uint32_t cjk_compatibility_ideograph_fa57 [] = { 0x7DF4 };
	static uint32_t cjk_compatibility_ideograph_fa58 [] = { 0x7E09 };
	static uint32_t cjk_compatibility_ideograph_fa59 [] = { 0x7E41 };
	static uint32_t cjk_compatibility_ideograph_fa5a [] = { 0x7F72 };
	static uint32_t cjk_compatibility_ideograph_fa5b [] = { 0x8005 };
	static uint32_t cjk_compatibility_ideograph_fa5c [] = { 0x81ED };
	static uint32_t cjk_compatibility_ideograph_fa5d [] = { 0x8279 };
	static uint32_t cjk_compatibility_ideograph_fa5e [] = { 0x8279 };
	static uint32_t cjk_compatibility_ideograph_fa5f [] = { 0x8457 };
	static uint32_t cjk_compatibility_ideograph_fa60 [] = { 0x8910 };
	static uint32_t cjk_compatibility_ideograph_fa61 [] = { 0x8996 };
	static uint32_t cjk_compatibility_ideograph_fa62 [] = { 0x8B01 };
	static uint32_t cjk_compatibility_ideograph_fa63 [] = { 0x8B39 };
	static uint32_t cjk_compatibility_ideograph_fa64 [] = { 0x8CD3 };
	static uint32_t cjk_compatibility_ideograph_fa65 [] = { 0x8D08 };
	static uint32_t cjk_compatibility_ideograph_fa66 [] = { 0x8FB6 };
	static uint32_t cjk_compatibility_ideograph_fa67 [] = { 0x9038 };
	static uint32_t cjk_compatibility_ideograph_fa68 [] = { 0x96E3 };
	static uint32_t cjk_compatibility_ideograph_fa69 [] = { 0x97FF };
	static uint32_t cjk_compatibility_ideograph_fa6a [] = { 0x983B };
	static uint32_t cjk_compatibility_ideograph_fa6b [] = { 0x6075 };
	static uint32_t cjk_compatibility_ideograph_fa6c [] = { 0x242EE };
	static uint32_t cjk_compatibility_ideograph_fa6d [] = { 0x8218 };
	static uint32_t cjk_compatibility_ideograph_fa70 [] = { 0x4E26 };
	static uint32_t cjk_compatibility_ideograph_fa71 [] = { 0x51B5 };
	static uint32_t cjk_compatibility_ideograph_fa72 [] = { 0x5168 };
	static uint32_t cjk_compatibility_ideograph_fa73 [] = { 0x4F80 };
	static uint32_t cjk_compatibility_ideograph_fa74 [] = { 0x5145 };
	static uint32_t cjk_compatibility_ideograph_fa75 [] = { 0x5180 };
	static uint32_t cjk_compatibility_ideograph_fa76 [] = { 0x52C7 };
	static uint32_t cjk_compatibility_ideograph_fa77 [] = { 0x52FA };
	static uint32_t cjk_compatibility_ideograph_fa78 [] = { 0x559D };
	static uint32_t cjk_compatibility_ideograph_fa79 [] = { 0x5555 };
	static uint32_t cjk_compatibility_ideograph_fa7a [] = { 0x5599 };
	static uint32_t cjk_compatibility_ideograph_fa7b [] = { 0x55E2 };
	static uint32_t cjk_compatibility_ideograph_fa7c [] = { 0x585A };
	static uint32_t cjk_compatibility_ideograph_fa7d [] = { 0x58B3 };
	static uint32_t cjk_compatibility_ideograph_fa7e [] = { 0x5944 };
	static uint32_t cjk_compatibility_ideograph_fa7f [] = { 0x5954 };
	static uint32_t cjk_compatibility_ideograph_fa80 [] = { 0x5A62 };
	static uint32_t cjk_compatibility_ideograph_fa81 [] = { 0x5B28 };
	static uint32_t cjk_compatibility_ideograph_fa82 [] = { 0x5ED2 };
	static uint32_t cjk_compatibility_ideograph_fa83 [] = { 0x5ED9 };
	static uint32_t cjk_compatibility_ideograph_fa84 [] = { 0x5F69 };
	static uint32_t cjk_compatibility_ideograph_fa85 [] = { 0x5FAD };
	static uint32_t cjk_compatibility_ideograph_fa86 [] = { 0x60D8 };
	static uint32_t cjk_compatibility_ideograph_fa87 [] = { 0x614E };
	static uint32_t cjk_compatibility_ideograph_fa88 [] = { 0x6108 };
	static uint32_t cjk_compatibility_ideograph_fa89 [] = { 0x618E };
	static uint32_t cjk_compatibility_ideograph_fa8a [] = { 0x6160 };
	static uint32_t cjk_compatibility_ideograph_fa8b [] = { 0x61F2 };
	static uint32_t cjk_compatibility_ideograph_fa8c [] = { 0x6234 };
	static uint32_t cjk_compatibility_ideograph_fa8d [] = { 0x63C4 };
	static uint32_t cjk_compatibility_ideograph_fa8e [] = { 0x641C };
	static uint32_t cjk_compatibility_ideograph_fa8f [] = { 0x6452 };
	static uint32_t cjk_compatibility_ideograph_fa90 [] = { 0x6556 };
	static uint32_t cjk_compatibility_ideograph_fa91 [] = { 0x6674 };
	static uint32_t cjk_compatibility_ideograph_fa92 [] = { 0x6717 };
	static uint32_t cjk_compatibility_ideograph_fa93 [] = { 0x671B };
	static uint32_t cjk_compatibility_ideograph_fa94 [] = { 0x6756 };
	static uint32_t cjk_compatibility_ideograph_fa95 [] = { 0x6B79 };
	static uint32_t cjk_compatibility_ideograph_fa96 [] = { 0x6BBA };
	static uint32_t cjk_compatibility_ideograph_fa97 [] = { 0x6D41 };
	static uint32_t cjk_compatibility_ideograph_fa98 [] = { 0x6EDB };
	static uint32_t cjk_compatibility_ideograph_fa99 [] = { 0x6ECB };
	static uint32_t cjk_compatibility_ideograph_fa9a [] = { 0x6F22 };
	static uint32_t cjk_compatibility_ideograph_fa9b [] = { 0x701E };
	static uint32_t cjk_compatibility_ideograph_fa9c [] = { 0x716E };
	static uint32_t cjk_compatibility_ideograph_fa9d [] = { 0x77A7 };
	static uint32_t cjk_compatibility_ideograph_fa9e [] = { 0x7235 };
	static uint32_t cjk_compatibility_ideograph_fa9f [] = { 0x72AF };
	static uint32_t cjk_compatibility_ideograph_faa0 [] = { 0x732A };
	static uint32_t cjk_compatibility_ideograph_faa1 [] = { 0x7471 };
	static uint32_t cjk_compatibility_ideograph_faa2 [] = { 0x7506 };
	static uint32_t cjk_compatibility_ideograph_faa3 [] = { 0x753B };
	static uint32_t cjk_compatibility_ideograph_faa4 [] = { 0x761D };
	static uint32_t cjk_compatibility_ideograph_faa5 [] = { 0x761F };
	static uint32_t cjk_compatibility_ideograph_faa6 [] = { 0x76CA };
	static uint32_t cjk_compatibility_ideograph_faa7 [] = { 0x76DB };
	static uint32_t cjk_compatibility_ideograph_faa8 [] = { 0x76F4 };
	static uint32_t cjk_compatibility_ideograph_faa9 [] = { 0x774A };
	static uint32_t cjk_compatibility_ideograph_faaa [] = { 0x7740 };
	static uint32_t cjk_compatibility_ideograph_faab [] = { 0x78CC };
	static uint32_t cjk_compatibility_ideograph_faac [] = { 0x7AB1 };
	static uint32_t cjk_compatibility_ideograph_faad [] = { 0x7BC0 };
	static uint32_t cjk_compatibility_ideograph_faae [] = { 0x7C7B };
	static uint32_t cjk_compatibility_ideograph_faaf [] = { 0x7D5B };
	static uint32_t cjk_compatibility_ideograph_fab0 [] = { 0x7DF4 };
	static uint32_t cjk_compatibility_ideograph_fab1 [] = { 0x7F3E };
	static uint32_t cjk_compatibility_ideograph_fab2 [] = { 0x8005 };
	static uint32_t cjk_compatibility_ideograph_fab3 [] = { 0x8352 };
	static uint32_t cjk_compatibility_ideograph_fab4 [] = { 0x83EF };
	static uint32_t cjk_compatibility_ideograph_fab5 [] = { 0x8779 };
	static uint32_t cjk_compatibility_ideograph_fab6 [] = { 0x8941 };
	static uint32_t cjk_compatibility_ideograph_fab7 [] = { 0x8986 };
	static uint32_t cjk_compatibility_ideograph_fab8 [] = { 0x8996 };
	static uint32_t cjk_compatibility_ideograph_fab9 [] = { 0x8ABF };
	static uint32_t cjk_compatibility_ideograph_faba [] = { 0x8AF8 };
	static uint32_t cjk_compatibility_ideograph_fabb [] = { 0x8ACB };
	static uint32_t cjk_compatibility_ideograph_fabc [] = { 0x8B01 };
	static uint32_t cjk_compatibility_ideograph_fabd [] = { 0x8AFE };
	static uint32_t cjk_compatibility_ideograph_fabe [] = { 0x8AED };
	static uint32_t cjk_compatibility_ideograph_fabf [] = { 0x8B39 };
	static uint32_t cjk_compatibility_ideograph_fac0 [] = { 0x8B8A };
	static uint32_t cjk_compatibility_ideograph_fac1 [] = { 0x8D08 };
	static uint32_t cjk_compatibility_ideograph_fac2 [] = { 0x8F38 };
	static uint32_t cjk_compatibility_ideograph_fac3 [] = { 0x9072 };
	static uint32_t cjk_compatibility_ideograph_fac4 [] = { 0x9199 };
	static uint32_t cjk_compatibility_ideograph_fac5 [] = { 0x9276 };
	static uint32_t cjk_compatibility_ideograph_fac6 [] = { 0x967C };
	static uint32_t cjk_compatibility_ideograph_fac7 [] = { 0x96E3 };
	static uint32_t cjk_compatibility_ideograph_fac8 [] = { 0x9756 };
	static uint32_t cjk_compatibility_ideograph_fac9 [] = { 0x97DB };
	static uint32_t cjk_compatibility_ideograph_faca [] = { 0x97FF };
	static uint32_t cjk_compatibility_ideograph_facb [] = { 0x980B };
	static uint32_t cjk_compatibility_ideograph_facc [] = { 0x983B };
	static uint32_t cjk_compatibility_ideograph_facd [] = { 0x9B12 };
	static uint32_t cjk_compatibility_ideograph_face [] = { 0x9F9C };
	static uint32_t cjk_compatibility_ideograph_facf [] = { 0x2284A };
	static uint32_t cjk_compatibility_ideograph_fad0 [] = { 0x22844 };
	static uint32_t cjk_compatibility_ideograph_fad1 [] = { 0x233D5 };
	static uint32_t cjk_compatibility_ideograph_fad2 [] = { 0x3B9D };
	static uint32_t cjk_compatibility_ideograph_fad3 [] = { 0x4018 };
	static uint32_t cjk_compatibility_ideograph_fad4 [] = { 0x4039 };
	static uint32_t cjk_compatibility_ideograph_fad5 [] = { 0x25249 };
	static uint32_t cjk_compatibility_ideograph_fad6 [] = { 0x25CD0 };
	static uint32_t cjk_compatibility_ideograph_fad7 [] = { 0x27ED3 };
	static uint32_t cjk_compatibility_ideograph_fad8 [] = { 0x9F43 };
	static uint32_t cjk_compatibility_ideograph_fad9 [] = { 0x9F8E };
	static uint32_t latin_small_ligature_ff [] = { 0x0066, 0x0066 };
	static uint32_t latin_small_ligature_fi [] = { 0x0066, 0x0069 };
	static uint32_t latin_small_ligature_fl [] = { 0x0066, 0x006C };
	static uint32_t latin_small_ligature_ffi [] = { 0x0066, 0x0066, 0x0069 };
	static uint32_t latin_small_ligature_ffl [] = { 0x0066, 0x0066, 0x006C };
	static uint32_t latin_small_ligature_long_s_t [] = { 0x017F, 0x0074 };
	static uint32_t latin_small_ligature_st [] = { 0x0073, 0x0074 };
	static uint32_t armenian_small_ligature_men_now [] = { 0x0574, 0x0576 };
	static uint32_t armenian_small_ligature_men_ech [] = { 0x0574, 0x0565 };
	static uint32_t armenian_small_ligature_men_ini [] = { 0x0574, 0x056B };
	static uint32_t armenian_small_ligature_vew_now [] = { 0x057E, 0x0576 };
	static uint32_t armenian_small_ligature_men_xeh [] = { 0x0574, 0x056D };
	static uint32_t hebrew_letter_yod_with_hiriq [] = { 0x05D9, 0x05B4 };
	static uint32_t hebrew_ligature_yiddish_yod_yod_patah [] = { 0x05F2, 0x05B7 };
	static uint32_t hebrew_letter_alternative_ayin [] = { 0x05E2 };
	static uint32_t hebrew_letter_wide_alef [] = { 0x05D0 };
	static uint32_t hebrew_letter_wide_dalet [] = { 0x05D3 };
	static uint32_t hebrew_letter_wide_he [] = { 0x05D4 };
	static uint32_t hebrew_letter_wide_kaf [] = { 0x05DB };
	static uint32_t hebrew_letter_wide_lamed [] = { 0x05DC };
	static uint32_t hebrew_letter_wide_final_mem [] = { 0x05DD };
	static uint32_t hebrew_letter_wide_resh [] = { 0x05E8 };
	static uint32_t hebrew_letter_wide_tav [] = { 0x05EA };
	static uint32_t hebrew_letter_alternative_plus_sign [] = { 0x002B };
	static uint32_t hebrew_letter_shin_with_shin_dot [] = { 0x05E9, 0x05C1 };
	static uint32_t hebrew_letter_shin_with_sin_dot [] = { 0x05E9, 0x05C2 };
	static uint32_t hebrew_letter_shin_with_dagesh_and_shin_dot [] = { 0xFB49, 0x05C1 };
	static uint32_t hebrew_letter_shin_with_dagesh_and_sin_dot [] = { 0xFB49, 0x05C2 };
	static uint32_t hebrew_letter_alef_with_patah [] = { 0x05D0, 0x05B7 };
	static uint32_t hebrew_letter_alef_with_qamats [] = { 0x05D0, 0x05B8 };
	static uint32_t hebrew_letter_alef_with_mapiq [] = { 0x05D0, 0x05BC };
	static uint32_t hebrew_letter_bet_with_dagesh [] = { 0x05D1, 0x05BC };
	static uint32_t hebrew_letter_gimel_with_dagesh [] = { 0x05D2, 0x05BC };
	static uint32_t hebrew_letter_dalet_with_dagesh [] = { 0x05D3, 0x05BC };
	static uint32_t hebrew_letter_he_with_mapiq [] = { 0x05D4, 0x05BC };
	static uint32_t hebrew_letter_vav_with_dagesh [] = { 0x05D5, 0x05BC };
	static uint32_t hebrew_letter_zayin_with_dagesh [] = { 0x05D6, 0x05BC };
	static uint32_t hebrew_letter_tet_with_dagesh [] = { 0x05D8, 0x05BC };
	static uint32_t hebrew_letter_yod_with_dagesh [] = { 0x05D9, 0x05BC };
	static uint32_t hebrew_letter_final_kaf_with_dagesh [] = { 0x05DA, 0x05BC };
	static uint32_t hebrew_letter_kaf_with_dagesh [] = { 0x05DB, 0x05BC };
	static uint32_t hebrew_letter_lamed_with_dagesh [] = { 0x05DC, 0x05BC };
	static uint32_t hebrew_letter_mem_with_dagesh [] = { 0x05DE, 0x05BC };
	static uint32_t hebrew_letter_nun_with_dagesh [] = { 0x05E0, 0x05BC };
	static uint32_t hebrew_letter_samekh_with_dagesh [] = { 0x05E1, 0x05BC };
	static uint32_t hebrew_letter_final_pe_with_dagesh [] = { 0x05E3, 0x05BC };
	static uint32_t hebrew_letter_pe_with_dagesh [] = { 0x05E4, 0x05BC };
	static uint32_t hebrew_letter_tsadi_with_dagesh [] = { 0x05E6, 0x05BC };
	static uint32_t hebrew_letter_qof_with_dagesh [] = { 0x05E7, 0x05BC };
	static uint32_t hebrew_letter_resh_with_dagesh [] = { 0x05E8, 0x05BC };
	static uint32_t hebrew_letter_shin_with_dagesh [] = { 0x05E9, 0x05BC };
	static uint32_t hebrew_letter_tav_with_dagesh [] = { 0x05EA, 0x05BC };
	static uint32_t hebrew_letter_vav_with_holam [] = { 0x05D5, 0x05B9 };
	static uint32_t hebrew_letter_bet_with_rafe [] = { 0x05D1, 0x05BF };
	static uint32_t hebrew_letter_kaf_with_rafe [] = { 0x05DB, 0x05BF };
	static uint32_t hebrew_letter_pe_with_rafe [] = { 0x05E4, 0x05BF };
	static uint32_t hebrew_ligature_alef_lamed [] = { 0x05D0, 0x05DC };
	static uint32_t arabic_letter_alef_wasla_isolated_form [] = { 0x0671 };
	static uint32_t arabic_letter_alef_wasla_final_form [] = { 0x0671 };
	static uint32_t arabic_letter_beeh_isolated_form [] = { 0x067B };
	static uint32_t arabic_letter_beeh_final_form [] = { 0x067B };
	static uint32_t arabic_letter_beeh_initial_form [] = { 0x067B };
	static uint32_t arabic_letter_beeh_medial_form [] = { 0x067B };
	static uint32_t arabic_letter_peh_isolated_form [] = { 0x067E };
	static uint32_t arabic_letter_peh_final_form [] = { 0x067E };
	static uint32_t arabic_letter_peh_initial_form [] = { 0x067E };
	static uint32_t arabic_letter_peh_medial_form [] = { 0x067E };
	static uint32_t arabic_letter_beheh_isolated_form [] = { 0x0680 };
	static uint32_t arabic_letter_beheh_final_form [] = { 0x0680 };
	static uint32_t arabic_letter_beheh_initial_form [] = { 0x0680 };
	static uint32_t arabic_letter_beheh_medial_form [] = { 0x0680 };
	static uint32_t arabic_letter_tteheh_isolated_form [] = { 0x067A };
	static uint32_t arabic_letter_tteheh_final_form [] = { 0x067A };
	static uint32_t arabic_letter_tteheh_initial_form [] = { 0x067A };
	static uint32_t arabic_letter_tteheh_medial_form [] = { 0x067A };
	static uint32_t arabic_letter_teheh_isolated_form [] = { 0x067F };
	static uint32_t arabic_letter_teheh_final_form [] = { 0x067F };
	static uint32_t arabic_letter_teheh_initial_form [] = { 0x067F };
	static uint32_t arabic_letter_teheh_medial_form [] = { 0x067F };
	static uint32_t arabic_letter_tteh_isolated_form [] = { 0x0679 };
	static uint32_t arabic_letter_tteh_final_form [] = { 0x0679 };
	static uint32_t arabic_letter_tteh_initial_form [] = { 0x0679 };
	static uint32_t arabic_letter_tteh_medial_form [] = { 0x0679 };
	static uint32_t arabic_letter_veh_isolated_form [] = { 0x06A4 };
	static uint32_t arabic_letter_veh_final_form [] = { 0x06A4 };
	static uint32_t arabic_letter_veh_initial_form [] = { 0x06A4 };
	static uint32_t arabic_letter_veh_medial_form [] = { 0x06A4 };
	static uint32_t arabic_letter_peheh_isolated_form [] = { 0x06A6 };
	static uint32_t arabic_letter_peheh_final_form [] = { 0x06A6 };
	static uint32_t arabic_letter_peheh_initial_form [] = { 0x06A6 };
	static uint32_t arabic_letter_peheh_medial_form [] = { 0x06A6 };
	static uint32_t arabic_letter_dyeh_isolated_form [] = { 0x0684 };
	static uint32_t arabic_letter_dyeh_final_form [] = { 0x0684 };
	static uint32_t arabic_letter_dyeh_initial_form [] = { 0x0684 };
	static uint32_t arabic_letter_dyeh_medial_form [] = { 0x0684 };
	static uint32_t arabic_letter_nyeh_isolated_form [] = { 0x0683 };
	static uint32_t arabic_letter_nyeh_final_form [] = { 0x0683 };
	static uint32_t arabic_letter_nyeh_initial_form [] = { 0x0683 };
	static uint32_t arabic_letter_nyeh_medial_form [] = { 0x0683 };
	static uint32_t arabic_letter_tcheh_isolated_form [] = { 0x0686 };
	static uint32_t arabic_letter_tcheh_final_form [] = { 0x0686 };
	static uint32_t arabic_letter_tcheh_initial_form [] = { 0x0686 };
	static uint32_t arabic_letter_tcheh_medial_form [] = { 0x0686 };
	static uint32_t arabic_letter_tcheheh_isolated_form [] = { 0x0687 };
	static uint32_t arabic_letter_tcheheh_final_form [] = { 0x0687 };
	static uint32_t arabic_letter_tcheheh_initial_form [] = { 0x0687 };
	static uint32_t arabic_letter_tcheheh_medial_form [] = { 0x0687 };
	static uint32_t arabic_letter_ddahal_isolated_form [] = { 0x068D };
	static uint32_t arabic_letter_ddahal_final_form [] = { 0x068D };
	static uint32_t arabic_letter_dahal_isolated_form [] = { 0x068C };
	static uint32_t arabic_letter_dahal_final_form [] = { 0x068C };
	static uint32_t arabic_letter_dul_isolated_form [] = { 0x068E };
	static uint32_t arabic_letter_dul_final_form [] = { 0x068E };
	static uint32_t arabic_letter_ddal_isolated_form [] = { 0x0688 };
	static uint32_t arabic_letter_ddal_final_form [] = { 0x0688 };
	static uint32_t arabic_letter_jeh_isolated_form [] = { 0x0698 };
	static uint32_t arabic_letter_jeh_final_form [] = { 0x0698 };
	static uint32_t arabic_letter_rreh_isolated_form [] = { 0x0691 };
	static uint32_t arabic_letter_rreh_final_form [] = { 0x0691 };
	static uint32_t arabic_letter_keheh_isolated_form [] = { 0x06A9 };
	static uint32_t arabic_letter_keheh_final_form [] = { 0x06A9 };
	static uint32_t arabic_letter_keheh_initial_form [] = { 0x06A9 };
	static uint32_t arabic_letter_keheh_medial_form [] = { 0x06A9 };
	static uint32_t arabic_letter_gaf_isolated_form [] = { 0x06AF };
	static uint32_t arabic_letter_gaf_final_form [] = { 0x06AF };
	static uint32_t arabic_letter_gaf_initial_form [] = { 0x06AF };
	static uint32_t arabic_letter_gaf_medial_form [] = { 0x06AF };
	static uint32_t arabic_letter_gueh_isolated_form [] = { 0x06B3 };
	static uint32_t arabic_letter_gueh_final_form [] = { 0x06B3 };
	static uint32_t arabic_letter_gueh_initial_form [] = { 0x06B3 };
	static uint32_t arabic_letter_gueh_medial_form [] = { 0x06B3 };
	static uint32_t arabic_letter_ngoeh_isolated_form [] = { 0x06B1 };
	static uint32_t arabic_letter_ngoeh_final_form [] = { 0x06B1 };
	static uint32_t arabic_letter_ngoeh_initial_form [] = { 0x06B1 };
	static uint32_t arabic_letter_ngoeh_medial_form [] = { 0x06B1 };
	static uint32_t arabic_letter_noon_ghunna_isolated_form [] = { 0x06BA };
	static uint32_t arabic_letter_noon_ghunna_final_form [] = { 0x06BA };
	static uint32_t arabic_letter_rnoon_isolated_form [] = { 0x06BB };
	static uint32_t arabic_letter_rnoon_final_form [] = { 0x06BB };
	static uint32_t arabic_letter_rnoon_initial_form [] = { 0x06BB };
	static uint32_t arabic_letter_rnoon_medial_form [] = { 0x06BB };
	static uint32_t arabic_letter_heh_with_yeh_above_isolated_form [] = { 0x06C0 };
	static uint32_t arabic_letter_heh_with_yeh_above_final_form [] = { 0x06C0 };
	static uint32_t arabic_letter_heh_goal_isolated_form [] = { 0x06C1 };
	static uint32_t arabic_letter_heh_goal_final_form [] = { 0x06C1 };
	static uint32_t arabic_letter_heh_goal_initial_form [] = { 0x06C1 };
	static uint32_t arabic_letter_heh_goal_medial_form [] = { 0x06C1 };
	static uint32_t arabic_letter_heh_doachashmee_isolated_form [] = { 0x06BE };
	static uint32_t arabic_letter_heh_doachashmee_final_form [] = { 0x06BE };
	static uint32_t arabic_letter_heh_doachashmee_initial_form [] = { 0x06BE };
	static uint32_t arabic_letter_heh_doachashmee_medial_form [] = { 0x06BE };
	static uint32_t arabic_letter_yeh_barree_isolated_form [] = { 0x06D2 };
	static uint32_t arabic_letter_yeh_barree_final_form [] = { 0x06D2 };
	static uint32_t arabic_letter_yeh_barree_with_hamza_above_isolated_form [] = { 0x06D3 };
	static uint32_t arabic_letter_yeh_barree_with_hamza_above_final_form [] = { 0x06D3 };
	static uint32_t arabic_letter_ng_isolated_form [] = { 0x06AD };
	static uint32_t arabic_letter_ng_final_form [] = { 0x06AD };
	static uint32_t arabic_letter_ng_initial_form [] = { 0x06AD };
	static uint32_t arabic_letter_ng_medial_form [] = { 0x06AD };
	static uint32_t arabic_letter_u_isolated_form [] = { 0x06C7 };
	static uint32_t arabic_letter_u_final_form [] = { 0x06C7 };
	static uint32_t arabic_letter_oe_isolated_form [] = { 0x06C6 };
	static uint32_t arabic_letter_oe_final_form [] = { 0x06C6 };
	static uint32_t arabic_letter_yu_isolated_form [] = { 0x06C8 };
	static uint32_t arabic_letter_yu_final_form [] = { 0x06C8 };
	static uint32_t arabic_letter_u_with_hamza_above_isolated_form [] = { 0x0677 };
	static uint32_t arabic_letter_ve_isolated_form [] = { 0x06CB };
	static uint32_t arabic_letter_ve_final_form [] = { 0x06CB };
	static uint32_t arabic_letter_kirghiz_oe_isolated_form [] = { 0x06C5 };
	static uint32_t arabic_letter_kirghiz_oe_final_form [] = { 0x06C5 };
	static uint32_t arabic_letter_kirghiz_yu_isolated_form [] = { 0x06C9 };
	static uint32_t arabic_letter_kirghiz_yu_final_form [] = { 0x06C9 };
	static uint32_t arabic_letter_e_isolated_form [] = { 0x06D0 };
	static uint32_t arabic_letter_e_final_form [] = { 0x06D0 };
	static uint32_t arabic_letter_e_initial_form [] = { 0x06D0 };
	static uint32_t arabic_letter_e_medial_form [] = { 0x06D0 };
	static uint32_t arabic_letter_uighur_kazakh_kirghiz_alef_maksura_initial_form [] = { 0x0649 };
	static uint32_t arabic_letter_uighur_kazakh_kirghiz_alef_maksura_medial_form [] = { 0x0649 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_alef_isolated_form [] = { 0x0626, 0x0627 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_alef_final_form [] = { 0x0626, 0x0627 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_ae_isolated_form [] = { 0x0626, 0x06D5 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_ae_final_form [] = { 0x0626, 0x06D5 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_waw_isolated_form [] = { 0x0626, 0x0648 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_waw_final_form [] = { 0x0626, 0x0648 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_u_isolated_form [] = { 0x0626, 0x06C7 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_u_final_form [] = { 0x0626, 0x06C7 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_oe_isolated_form [] = { 0x0626, 0x06C6 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_oe_final_form [] = { 0x0626, 0x06C6 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_yu_isolated_form [] = { 0x0626, 0x06C8 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_yu_final_form [] = { 0x0626, 0x06C8 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_e_isolated_form [] = { 0x0626, 0x06D0 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_e_final_form [] = { 0x0626, 0x06D0 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_e_initial_form [] = { 0x0626, 0x06D0 };
	static uint32_t arabic_ligature_uighur_kirghiz_yeh_with_hamza_above_with_alef_maksura_isolated_form [] = { 0x0626, 0x0649 };
	static uint32_t arabic_ligature_uighur_kirghiz_yeh_with_hamza_above_with_alef_maksura_final_form [] = { 0x0626, 0x0649 };
	static uint32_t arabic_ligature_uighur_kirghiz_yeh_with_hamza_above_with_alef_maksura_initial_form [] = { 0x0626, 0x0649 };
	static uint32_t arabic_letter_farsi_yeh_isolated_form [] = { 0x06CC };
	static uint32_t arabic_letter_farsi_yeh_final_form [] = { 0x06CC };
	static uint32_t arabic_letter_farsi_yeh_initial_form [] = { 0x06CC };
	static uint32_t arabic_letter_farsi_yeh_medial_form [] = { 0x06CC };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_jeem_isolated_form [] = { 0x0626, 0x062C };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_hah_isolated_form [] = { 0x0626, 0x062D };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_meem_isolated_form [] = { 0x0626, 0x0645 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_alef_maksura_isolated_form [] = { 0x0626, 0x0649 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_yeh_isolated_form [] = { 0x0626, 0x064A };
	static uint32_t arabic_ligature_beh_with_jeem_isolated_form [] = { 0x0628, 0x062C };
	static uint32_t arabic_ligature_beh_with_hah_isolated_form [] = { 0x0628, 0x062D };
	static uint32_t arabic_ligature_beh_with_khah_isolated_form [] = { 0x0628, 0x062E };
	static uint32_t arabic_ligature_beh_with_meem_isolated_form [] = { 0x0628, 0x0645 };
	static uint32_t arabic_ligature_beh_with_alef_maksura_isolated_form [] = { 0x0628, 0x0649 };
	static uint32_t arabic_ligature_beh_with_yeh_isolated_form [] = { 0x0628, 0x064A };
	static uint32_t arabic_ligature_teh_with_jeem_isolated_form [] = { 0x062A, 0x062C };
	static uint32_t arabic_ligature_teh_with_hah_isolated_form [] = { 0x062A, 0x062D };
	static uint32_t arabic_ligature_teh_with_khah_isolated_form [] = { 0x062A, 0x062E };
	static uint32_t arabic_ligature_teh_with_meem_isolated_form [] = { 0x062A, 0x0645 };
	static uint32_t arabic_ligature_teh_with_alef_maksura_isolated_form [] = { 0x062A, 0x0649 };
	static uint32_t arabic_ligature_teh_with_yeh_isolated_form [] = { 0x062A, 0x064A };
	static uint32_t arabic_ligature_theh_with_jeem_isolated_form [] = { 0x062B, 0x062C };
	static uint32_t arabic_ligature_theh_with_meem_isolated_form [] = { 0x062B, 0x0645 };
	static uint32_t arabic_ligature_theh_with_alef_maksura_isolated_form [] = { 0x062B, 0x0649 };
	static uint32_t arabic_ligature_theh_with_yeh_isolated_form [] = { 0x062B, 0x064A };
	static uint32_t arabic_ligature_jeem_with_hah_isolated_form [] = { 0x062C, 0x062D };
	static uint32_t arabic_ligature_jeem_with_meem_isolated_form [] = { 0x062C, 0x0645 };
	static uint32_t arabic_ligature_hah_with_jeem_isolated_form [] = { 0x062D, 0x062C };
	static uint32_t arabic_ligature_hah_with_meem_isolated_form [] = { 0x062D, 0x0645 };
	static uint32_t arabic_ligature_khah_with_jeem_isolated_form [] = { 0x062E, 0x062C };
	static uint32_t arabic_ligature_khah_with_hah_isolated_form [] = { 0x062E, 0x062D };
	static uint32_t arabic_ligature_khah_with_meem_isolated_form [] = { 0x062E, 0x0645 };
	static uint32_t arabic_ligature_seen_with_jeem_isolated_form [] = { 0x0633, 0x062C };
	static uint32_t arabic_ligature_seen_with_hah_isolated_form [] = { 0x0633, 0x062D };
	static uint32_t arabic_ligature_seen_with_khah_isolated_form [] = { 0x0633, 0x062E };
	static uint32_t arabic_ligature_seen_with_meem_isolated_form [] = { 0x0633, 0x0645 };
	static uint32_t arabic_ligature_sad_with_hah_isolated_form [] = { 0x0635, 0x062D };
	static uint32_t arabic_ligature_sad_with_meem_isolated_form [] = { 0x0635, 0x0645 };
	static uint32_t arabic_ligature_dad_with_jeem_isolated_form [] = { 0x0636, 0x062C };
	static uint32_t arabic_ligature_dad_with_hah_isolated_form [] = { 0x0636, 0x062D };
	static uint32_t arabic_ligature_dad_with_khah_isolated_form [] = { 0x0636, 0x062E };
	static uint32_t arabic_ligature_dad_with_meem_isolated_form [] = { 0x0636, 0x0645 };
	static uint32_t arabic_ligature_tah_with_hah_isolated_form [] = { 0x0637, 0x062D };
	static uint32_t arabic_ligature_tah_with_meem_isolated_form [] = { 0x0637, 0x0645 };
	static uint32_t arabic_ligature_zah_with_meem_isolated_form [] = { 0x0638, 0x0645 };
	static uint32_t arabic_ligature_ain_with_jeem_isolated_form [] = { 0x0639, 0x062C };
	static uint32_t arabic_ligature_ain_with_meem_isolated_form [] = { 0x0639, 0x0645 };
	static uint32_t arabic_ligature_ghain_with_jeem_isolated_form [] = { 0x063A, 0x062C };
	static uint32_t arabic_ligature_ghain_with_meem_isolated_form [] = { 0x063A, 0x0645 };
	static uint32_t arabic_ligature_feh_with_jeem_isolated_form [] = { 0x0641, 0x062C };
	static uint32_t arabic_ligature_feh_with_hah_isolated_form [] = { 0x0641, 0x062D };
	static uint32_t arabic_ligature_feh_with_khah_isolated_form [] = { 0x0641, 0x062E };
	static uint32_t arabic_ligature_feh_with_meem_isolated_form [] = { 0x0641, 0x0645 };
	static uint32_t arabic_ligature_feh_with_alef_maksura_isolated_form [] = { 0x0641, 0x0649 };
	static uint32_t arabic_ligature_feh_with_yeh_isolated_form [] = { 0x0641, 0x064A };
	static uint32_t arabic_ligature_qaf_with_hah_isolated_form [] = { 0x0642, 0x062D };
	static uint32_t arabic_ligature_qaf_with_meem_isolated_form [] = { 0x0642, 0x0645 };
	static uint32_t arabic_ligature_qaf_with_alef_maksura_isolated_form [] = { 0x0642, 0x0649 };
	static uint32_t arabic_ligature_qaf_with_yeh_isolated_form [] = { 0x0642, 0x064A };
	static uint32_t arabic_ligature_kaf_with_alef_isolated_form [] = { 0x0643, 0x0627 };
	static uint32_t arabic_ligature_kaf_with_jeem_isolated_form [] = { 0x0643, 0x062C };
	static uint32_t arabic_ligature_kaf_with_hah_isolated_form [] = { 0x0643, 0x062D };
	static uint32_t arabic_ligature_kaf_with_khah_isolated_form [] = { 0x0643, 0x062E };
	static uint32_t arabic_ligature_kaf_with_lam_isolated_form [] = { 0x0643, 0x0644 };
	static uint32_t arabic_ligature_kaf_with_meem_isolated_form [] = { 0x0643, 0x0645 };
	static uint32_t arabic_ligature_kaf_with_alef_maksura_isolated_form [] = { 0x0643, 0x0649 };
	static uint32_t arabic_ligature_kaf_with_yeh_isolated_form [] = { 0x0643, 0x064A };
	static uint32_t arabic_ligature_lam_with_jeem_isolated_form [] = { 0x0644, 0x062C };
	static uint32_t arabic_ligature_lam_with_hah_isolated_form [] = { 0x0644, 0x062D };
	static uint32_t arabic_ligature_lam_with_khah_isolated_form [] = { 0x0644, 0x062E };
	static uint32_t arabic_ligature_lam_with_meem_isolated_form [] = { 0x0644, 0x0645 };
	static uint32_t arabic_ligature_lam_with_alef_maksura_isolated_form [] = { 0x0644, 0x0649 };
	static uint32_t arabic_ligature_lam_with_yeh_isolated_form [] = { 0x0644, 0x064A };
	static uint32_t arabic_ligature_meem_with_jeem_isolated_form [] = { 0x0645, 0x062C };
	static uint32_t arabic_ligature_meem_with_hah_isolated_form [] = { 0x0645, 0x062D };
	static uint32_t arabic_ligature_meem_with_khah_isolated_form [] = { 0x0645, 0x062E };
	static uint32_t arabic_ligature_meem_with_meem_isolated_form [] = { 0x0645, 0x0645 };
	static uint32_t arabic_ligature_meem_with_alef_maksura_isolated_form [] = { 0x0645, 0x0649 };
	static uint32_t arabic_ligature_meem_with_yeh_isolated_form [] = { 0x0645, 0x064A };
	static uint32_t arabic_ligature_noon_with_jeem_isolated_form [] = { 0x0646, 0x062C };
	static uint32_t arabic_ligature_noon_with_hah_isolated_form [] = { 0x0646, 0x062D };
	static uint32_t arabic_ligature_noon_with_khah_isolated_form [] = { 0x0646, 0x062E };
	static uint32_t arabic_ligature_noon_with_meem_isolated_form [] = { 0x0646, 0x0645 };
	static uint32_t arabic_ligature_noon_with_alef_maksura_isolated_form [] = { 0x0646, 0x0649 };
	static uint32_t arabic_ligature_noon_with_yeh_isolated_form [] = { 0x0646, 0x064A };
	static uint32_t arabic_ligature_heh_with_jeem_isolated_form [] = { 0x0647, 0x062C };
	static uint32_t arabic_ligature_heh_with_meem_isolated_form [] = { 0x0647, 0x0645 };
	static uint32_t arabic_ligature_heh_with_alef_maksura_isolated_form [] = { 0x0647, 0x0649 };
	static uint32_t arabic_ligature_heh_with_yeh_isolated_form [] = { 0x0647, 0x064A };
	static uint32_t arabic_ligature_yeh_with_jeem_isolated_form [] = { 0x064A, 0x062C };
	static uint32_t arabic_ligature_yeh_with_hah_isolated_form [] = { 0x064A, 0x062D };
	static uint32_t arabic_ligature_yeh_with_khah_isolated_form [] = { 0x064A, 0x062E };
	static uint32_t arabic_ligature_yeh_with_meem_isolated_form [] = { 0x064A, 0x0645 };
	static uint32_t arabic_ligature_yeh_with_alef_maksura_isolated_form [] = { 0x064A, 0x0649 };
	static uint32_t arabic_ligature_yeh_with_yeh_isolated_form [] = { 0x064A, 0x064A };
	static uint32_t arabic_ligature_thal_with_superscript_alef_isolated_form [] = { 0x0630, 0x0670 };
	static uint32_t arabic_ligature_reh_with_superscript_alef_isolated_form [] = { 0x0631, 0x0670 };
	static uint32_t arabic_ligature_alef_maksura_with_superscript_alef_isolated_form [] = { 0x0649, 0x0670 };
	static uint32_t arabic_ligature_shadda_with_dammatan_isolated_form [] = { 0x0020, 0x064C, 0x0651 };
	static uint32_t arabic_ligature_shadda_with_kasratan_isolated_form [] = { 0x0020, 0x064D, 0x0651 };
	static uint32_t arabic_ligature_shadda_with_fatha_isolated_form [] = { 0x0020, 0x064E, 0x0651 };
	static uint32_t arabic_ligature_shadda_with_damma_isolated_form [] = { 0x0020, 0x064F, 0x0651 };
	static uint32_t arabic_ligature_shadda_with_kasra_isolated_form [] = { 0x0020, 0x0650, 0x0651 };
	static uint32_t arabic_ligature_shadda_with_superscript_alef_isolated_form [] = { 0x0020, 0x0651, 0x0670 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_reh_final_form [] = { 0x0626, 0x0631 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_zain_final_form [] = { 0x0626, 0x0632 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_meem_final_form [] = { 0x0626, 0x0645 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_noon_final_form [] = { 0x0626, 0x0646 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_alef_maksura_final_form [] = { 0x0626, 0x0649 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_yeh_final_form [] = { 0x0626, 0x064A };
	static uint32_t arabic_ligature_beh_with_reh_final_form [] = { 0x0628, 0x0631 };
	static uint32_t arabic_ligature_beh_with_zain_final_form [] = { 0x0628, 0x0632 };
	static uint32_t arabic_ligature_beh_with_meem_final_form [] = { 0x0628, 0x0645 };
	static uint32_t arabic_ligature_beh_with_noon_final_form [] = { 0x0628, 0x0646 };
	static uint32_t arabic_ligature_beh_with_alef_maksura_final_form [] = { 0x0628, 0x0649 };
	static uint32_t arabic_ligature_beh_with_yeh_final_form [] = { 0x0628, 0x064A };
	static uint32_t arabic_ligature_teh_with_reh_final_form [] = { 0x062A, 0x0631 };
	static uint32_t arabic_ligature_teh_with_zain_final_form [] = { 0x062A, 0x0632 };
	static uint32_t arabic_ligature_teh_with_meem_final_form [] = { 0x062A, 0x0645 };
	static uint32_t arabic_ligature_teh_with_noon_final_form [] = { 0x062A, 0x0646 };
	static uint32_t arabic_ligature_teh_with_alef_maksura_final_form [] = { 0x062A, 0x0649 };
	static uint32_t arabic_ligature_teh_with_yeh_final_form [] = { 0x062A, 0x064A };
	static uint32_t arabic_ligature_theh_with_reh_final_form [] = { 0x062B, 0x0631 };
	static uint32_t arabic_ligature_theh_with_zain_final_form [] = { 0x062B, 0x0632 };
	static uint32_t arabic_ligature_theh_with_meem_final_form [] = { 0x062B, 0x0645 };
	static uint32_t arabic_ligature_theh_with_noon_final_form [] = { 0x062B, 0x0646 };
	static uint32_t arabic_ligature_theh_with_alef_maksura_final_form [] = { 0x062B, 0x0649 };
	static uint32_t arabic_ligature_theh_with_yeh_final_form [] = { 0x062B, 0x064A };
	static uint32_t arabic_ligature_feh_with_alef_maksura_final_form [] = { 0x0641, 0x0649 };
	static uint32_t arabic_ligature_feh_with_yeh_final_form [] = { 0x0641, 0x064A };
	static uint32_t arabic_ligature_qaf_with_alef_maksura_final_form [] = { 0x0642, 0x0649 };
	static uint32_t arabic_ligature_qaf_with_yeh_final_form [] = { 0x0642, 0x064A };
	static uint32_t arabic_ligature_kaf_with_alef_final_form [] = { 0x0643, 0x0627 };
	static uint32_t arabic_ligature_kaf_with_lam_final_form [] = { 0x0643, 0x0644 };
	static uint32_t arabic_ligature_kaf_with_meem_final_form [] = { 0x0643, 0x0645 };
	static uint32_t arabic_ligature_kaf_with_alef_maksura_final_form [] = { 0x0643, 0x0649 };
	static uint32_t arabic_ligature_kaf_with_yeh_final_form [] = { 0x0643, 0x064A };
	static uint32_t arabic_ligature_lam_with_meem_final_form [] = { 0x0644, 0x0645 };
	static uint32_t arabic_ligature_lam_with_alef_maksura_final_form [] = { 0x0644, 0x0649 };
	static uint32_t arabic_ligature_lam_with_yeh_final_form [] = { 0x0644, 0x064A };
	static uint32_t arabic_ligature_meem_with_alef_final_form [] = { 0x0645, 0x0627 };
	static uint32_t arabic_ligature_meem_with_meem_final_form [] = { 0x0645, 0x0645 };
	static uint32_t arabic_ligature_noon_with_reh_final_form [] = { 0x0646, 0x0631 };
	static uint32_t arabic_ligature_noon_with_zain_final_form [] = { 0x0646, 0x0632 };
	static uint32_t arabic_ligature_noon_with_meem_final_form [] = { 0x0646, 0x0645 };
	static uint32_t arabic_ligature_noon_with_noon_final_form [] = { 0x0646, 0x0646 };
	static uint32_t arabic_ligature_noon_with_alef_maksura_final_form [] = { 0x0646, 0x0649 };
	static uint32_t arabic_ligature_noon_with_yeh_final_form [] = { 0x0646, 0x064A };
	static uint32_t arabic_ligature_alef_maksura_with_superscript_alef_final_form [] = { 0x0649, 0x0670 };
	static uint32_t arabic_ligature_yeh_with_reh_final_form [] = { 0x064A, 0x0631 };
	static uint32_t arabic_ligature_yeh_with_zain_final_form [] = { 0x064A, 0x0632 };
	static uint32_t arabic_ligature_yeh_with_meem_final_form [] = { 0x064A, 0x0645 };
	static uint32_t arabic_ligature_yeh_with_noon_final_form [] = { 0x064A, 0x0646 };
	static uint32_t arabic_ligature_yeh_with_alef_maksura_final_form [] = { 0x064A, 0x0649 };
	static uint32_t arabic_ligature_yeh_with_yeh_final_form [] = { 0x064A, 0x064A };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_jeem_initial_form [] = { 0x0626, 0x062C };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_hah_initial_form [] = { 0x0626, 0x062D };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_khah_initial_form [] = { 0x0626, 0x062E };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_meem_initial_form [] = { 0x0626, 0x0645 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_heh_initial_form [] = { 0x0626, 0x0647 };
	static uint32_t arabic_ligature_beh_with_jeem_initial_form [] = { 0x0628, 0x062C };
	static uint32_t arabic_ligature_beh_with_hah_initial_form [] = { 0x0628, 0x062D };
	static uint32_t arabic_ligature_beh_with_khah_initial_form [] = { 0x0628, 0x062E };
	static uint32_t arabic_ligature_beh_with_meem_initial_form [] = { 0x0628, 0x0645 };
	static uint32_t arabic_ligature_beh_with_heh_initial_form [] = { 0x0628, 0x0647 };
	static uint32_t arabic_ligature_teh_with_jeem_initial_form [] = { 0x062A, 0x062C };
	static uint32_t arabic_ligature_teh_with_hah_initial_form [] = { 0x062A, 0x062D };
	static uint32_t arabic_ligature_teh_with_khah_initial_form [] = { 0x062A, 0x062E };
	static uint32_t arabic_ligature_teh_with_meem_initial_form [] = { 0x062A, 0x0645 };
	static uint32_t arabic_ligature_teh_with_heh_initial_form [] = { 0x062A, 0x0647 };
	static uint32_t arabic_ligature_theh_with_meem_initial_form [] = { 0x062B, 0x0645 };
	static uint32_t arabic_ligature_jeem_with_hah_initial_form [] = { 0x062C, 0x062D };
	static uint32_t arabic_ligature_jeem_with_meem_initial_form [] = { 0x062C, 0x0645 };
	static uint32_t arabic_ligature_hah_with_jeem_initial_form [] = { 0x062D, 0x062C };
	static uint32_t arabic_ligature_hah_with_meem_initial_form [] = { 0x062D, 0x0645 };
	static uint32_t arabic_ligature_khah_with_jeem_initial_form [] = { 0x062E, 0x062C };
	static uint32_t arabic_ligature_khah_with_meem_initial_form [] = { 0x062E, 0x0645 };
	static uint32_t arabic_ligature_seen_with_jeem_initial_form [] = { 0x0633, 0x062C };
	static uint32_t arabic_ligature_seen_with_hah_initial_form [] = { 0x0633, 0x062D };
	static uint32_t arabic_ligature_seen_with_khah_initial_form [] = { 0x0633, 0x062E };
	static uint32_t arabic_ligature_seen_with_meem_initial_form [] = { 0x0633, 0x0645 };
	static uint32_t arabic_ligature_sad_with_hah_initial_form [] = { 0x0635, 0x062D };
	static uint32_t arabic_ligature_sad_with_khah_initial_form [] = { 0x0635, 0x062E };
	static uint32_t arabic_ligature_sad_with_meem_initial_form [] = { 0x0635, 0x0645 };
	static uint32_t arabic_ligature_dad_with_jeem_initial_form [] = { 0x0636, 0x062C };
	static uint32_t arabic_ligature_dad_with_hah_initial_form [] = { 0x0636, 0x062D };
	static uint32_t arabic_ligature_dad_with_khah_initial_form [] = { 0x0636, 0x062E };
	static uint32_t arabic_ligature_dad_with_meem_initial_form [] = { 0x0636, 0x0645 };
	static uint32_t arabic_ligature_tah_with_hah_initial_form [] = { 0x0637, 0x062D };
	static uint32_t arabic_ligature_zah_with_meem_initial_form [] = { 0x0638, 0x0645 };
	static uint32_t arabic_ligature_ain_with_jeem_initial_form [] = { 0x0639, 0x062C };
	static uint32_t arabic_ligature_ain_with_meem_initial_form [] = { 0x0639, 0x0645 };
	static uint32_t arabic_ligature_ghain_with_jeem_initial_form [] = { 0x063A, 0x062C };
	static uint32_t arabic_ligature_ghain_with_meem_initial_form [] = { 0x063A, 0x0645 };
	static uint32_t arabic_ligature_feh_with_jeem_initial_form [] = { 0x0641, 0x062C };
	static uint32_t arabic_ligature_feh_with_hah_initial_form [] = { 0x0641, 0x062D };
	static uint32_t arabic_ligature_feh_with_khah_initial_form [] = { 0x0641, 0x062E };
	static uint32_t arabic_ligature_feh_with_meem_initial_form [] = { 0x0641, 0x0645 };
	static uint32_t arabic_ligature_qaf_with_hah_initial_form [] = { 0x0642, 0x062D };
	static uint32_t arabic_ligature_qaf_with_meem_initial_form [] = { 0x0642, 0x0645 };
	static uint32_t arabic_ligature_kaf_with_jeem_initial_form [] = { 0x0643, 0x062C };
	static uint32_t arabic_ligature_kaf_with_hah_initial_form [] = { 0x0643, 0x062D };
	static uint32_t arabic_ligature_kaf_with_khah_initial_form [] = { 0x0643, 0x062E };
	static uint32_t arabic_ligature_kaf_with_lam_initial_form [] = { 0x0643, 0x0644 };
	static uint32_t arabic_ligature_kaf_with_meem_initial_form [] = { 0x0643, 0x0645 };
	static uint32_t arabic_ligature_lam_with_jeem_initial_form [] = { 0x0644, 0x062C };
	static uint32_t arabic_ligature_lam_with_hah_initial_form [] = { 0x0644, 0x062D };
	static uint32_t arabic_ligature_lam_with_khah_initial_form [] = { 0x0644, 0x062E };
	static uint32_t arabic_ligature_lam_with_meem_initial_form [] = { 0x0644, 0x0645 };
	static uint32_t arabic_ligature_lam_with_heh_initial_form [] = { 0x0644, 0x0647 };
	static uint32_t arabic_ligature_meem_with_jeem_initial_form [] = { 0x0645, 0x062C };
	static uint32_t arabic_ligature_meem_with_hah_initial_form [] = { 0x0645, 0x062D };
	static uint32_t arabic_ligature_meem_with_khah_initial_form [] = { 0x0645, 0x062E };
	static uint32_t arabic_ligature_meem_with_meem_initial_form [] = { 0x0645, 0x0645 };
	static uint32_t arabic_ligature_noon_with_jeem_initial_form [] = { 0x0646, 0x062C };
	static uint32_t arabic_ligature_noon_with_hah_initial_form [] = { 0x0646, 0x062D };
	static uint32_t arabic_ligature_noon_with_khah_initial_form [] = { 0x0646, 0x062E };
	static uint32_t arabic_ligature_noon_with_meem_initial_form [] = { 0x0646, 0x0645 };
	static uint32_t arabic_ligature_noon_with_heh_initial_form [] = { 0x0646, 0x0647 };
	static uint32_t arabic_ligature_heh_with_jeem_initial_form [] = { 0x0647, 0x062C };
	static uint32_t arabic_ligature_heh_with_meem_initial_form [] = { 0x0647, 0x0645 };
	static uint32_t arabic_ligature_heh_with_superscript_alef_initial_form [] = { 0x0647, 0x0670 };
	static uint32_t arabic_ligature_yeh_with_jeem_initial_form [] = { 0x064A, 0x062C };
	static uint32_t arabic_ligature_yeh_with_hah_initial_form [] = { 0x064A, 0x062D };
	static uint32_t arabic_ligature_yeh_with_khah_initial_form [] = { 0x064A, 0x062E };
	static uint32_t arabic_ligature_yeh_with_meem_initial_form [] = { 0x064A, 0x0645 };
	static uint32_t arabic_ligature_yeh_with_heh_initial_form [] = { 0x064A, 0x0647 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_meem_medial_form [] = { 0x0626, 0x0645 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_heh_medial_form [] = { 0x0626, 0x0647 };
	static uint32_t arabic_ligature_beh_with_meem_medial_form [] = { 0x0628, 0x0645 };
	static uint32_t arabic_ligature_beh_with_heh_medial_form [] = { 0x0628, 0x0647 };
	static uint32_t arabic_ligature_teh_with_meem_medial_form [] = { 0x062A, 0x0645 };
	static uint32_t arabic_ligature_teh_with_heh_medial_form [] = { 0x062A, 0x0647 };
	static uint32_t arabic_ligature_theh_with_meem_medial_form [] = { 0x062B, 0x0645 };
	static uint32_t arabic_ligature_theh_with_heh_medial_form [] = { 0x062B, 0x0647 };
	static uint32_t arabic_ligature_seen_with_meem_medial_form [] = { 0x0633, 0x0645 };
	static uint32_t arabic_ligature_seen_with_heh_medial_form [] = { 0x0633, 0x0647 };
	static uint32_t arabic_ligature_sheen_with_meem_medial_form [] = { 0x0634, 0x0645 };
	static uint32_t arabic_ligature_sheen_with_heh_medial_form [] = { 0x0634, 0x0647 };
	static uint32_t arabic_ligature_kaf_with_lam_medial_form [] = { 0x0643, 0x0644 };
	static uint32_t arabic_ligature_kaf_with_meem_medial_form [] = { 0x0643, 0x0645 };
	static uint32_t arabic_ligature_lam_with_meem_medial_form [] = { 0x0644, 0x0645 };
	static uint32_t arabic_ligature_noon_with_meem_medial_form [] = { 0x0646, 0x0645 };
	static uint32_t arabic_ligature_noon_with_heh_medial_form [] = { 0x0646, 0x0647 };
	static uint32_t arabic_ligature_yeh_with_meem_medial_form [] = { 0x064A, 0x0645 };
	static uint32_t arabic_ligature_yeh_with_heh_medial_form [] = { 0x064A, 0x0647 };
	static uint32_t arabic_ligature_shadda_with_fatha_medial_form [] = { 0x0640, 0x064E, 0x0651 };
	static uint32_t arabic_ligature_shadda_with_damma_medial_form [] = { 0x0640, 0x064F, 0x0651 };
	static uint32_t arabic_ligature_shadda_with_kasra_medial_form [] = { 0x0640, 0x0650, 0x0651 };
	static uint32_t arabic_ligature_tah_with_alef_maksura_isolated_form [] = { 0x0637, 0x0649 };
	static uint32_t arabic_ligature_tah_with_yeh_isolated_form [] = { 0x0637, 0x064A };
	static uint32_t arabic_ligature_ain_with_alef_maksura_isolated_form [] = { 0x0639, 0x0649 };
	static uint32_t arabic_ligature_ain_with_yeh_isolated_form [] = { 0x0639, 0x064A };
	static uint32_t arabic_ligature_ghain_with_alef_maksura_isolated_form [] = { 0x063A, 0x0649 };
	static uint32_t arabic_ligature_ghain_with_yeh_isolated_form [] = { 0x063A, 0x064A };
	static uint32_t arabic_ligature_seen_with_alef_maksura_isolated_form [] = { 0x0633, 0x0649 };
	static uint32_t arabic_ligature_seen_with_yeh_isolated_form [] = { 0x0633, 0x064A };
	static uint32_t arabic_ligature_sheen_with_alef_maksura_isolated_form [] = { 0x0634, 0x0649 };
	static uint32_t arabic_ligature_sheen_with_yeh_isolated_form [] = { 0x0634, 0x064A };
	static uint32_t arabic_ligature_hah_with_alef_maksura_isolated_form [] = { 0x062D, 0x0649 };
	static uint32_t arabic_ligature_hah_with_yeh_isolated_form [] = { 0x062D, 0x064A };
	static uint32_t arabic_ligature_jeem_with_alef_maksura_isolated_form [] = { 0x062C, 0x0649 };
	static uint32_t arabic_ligature_jeem_with_yeh_isolated_form [] = { 0x062C, 0x064A };
	static uint32_t arabic_ligature_khah_with_alef_maksura_isolated_form [] = { 0x062E, 0x0649 };
	static uint32_t arabic_ligature_khah_with_yeh_isolated_form [] = { 0x062E, 0x064A };
	static uint32_t arabic_ligature_sad_with_alef_maksura_isolated_form [] = { 0x0635, 0x0649 };
	static uint32_t arabic_ligature_sad_with_yeh_isolated_form [] = { 0x0635, 0x064A };
	static uint32_t arabic_ligature_dad_with_alef_maksura_isolated_form [] = { 0x0636, 0x0649 };
	static uint32_t arabic_ligature_dad_with_yeh_isolated_form [] = { 0x0636, 0x064A };
	static uint32_t arabic_ligature_sheen_with_jeem_isolated_form [] = { 0x0634, 0x062C };
	static uint32_t arabic_ligature_sheen_with_hah_isolated_form [] = { 0x0634, 0x062D };
	static uint32_t arabic_ligature_sheen_with_khah_isolated_form [] = { 0x0634, 0x062E };
	static uint32_t arabic_ligature_sheen_with_meem_isolated_form [] = { 0x0634, 0x0645 };
	static uint32_t arabic_ligature_sheen_with_reh_isolated_form [] = { 0x0634, 0x0631 };
	static uint32_t arabic_ligature_seen_with_reh_isolated_form [] = { 0x0633, 0x0631 };
	static uint32_t arabic_ligature_sad_with_reh_isolated_form [] = { 0x0635, 0x0631 };
	static uint32_t arabic_ligature_dad_with_reh_isolated_form [] = { 0x0636, 0x0631 };
	static uint32_t arabic_ligature_tah_with_alef_maksura_final_form [] = { 0x0637, 0x0649 };
	static uint32_t arabic_ligature_tah_with_yeh_final_form [] = { 0x0637, 0x064A };
	static uint32_t arabic_ligature_ain_with_alef_maksura_final_form [] = { 0x0639, 0x0649 };
	static uint32_t arabic_ligature_ain_with_yeh_final_form [] = { 0x0639, 0x064A };
	static uint32_t arabic_ligature_ghain_with_alef_maksura_final_form [] = { 0x063A, 0x0649 };
	static uint32_t arabic_ligature_ghain_with_yeh_final_form [] = { 0x063A, 0x064A };
	static uint32_t arabic_ligature_seen_with_alef_maksura_final_form [] = { 0x0633, 0x0649 };
	static uint32_t arabic_ligature_seen_with_yeh_final_form [] = { 0x0633, 0x064A };
	static uint32_t arabic_ligature_sheen_with_alef_maksura_final_form [] = { 0x0634, 0x0649 };
	static uint32_t arabic_ligature_sheen_with_yeh_final_form [] = { 0x0634, 0x064A };
	static uint32_t arabic_ligature_hah_with_alef_maksura_final_form [] = { 0x062D, 0x0649 };
	static uint32_t arabic_ligature_hah_with_yeh_final_form [] = { 0x062D, 0x064A };
	static uint32_t arabic_ligature_jeem_with_alef_maksura_final_form [] = { 0x062C, 0x0649 };
	static uint32_t arabic_ligature_jeem_with_yeh_final_form [] = { 0x062C, 0x064A };
	static uint32_t arabic_ligature_khah_with_alef_maksura_final_form [] = { 0x062E, 0x0649 };
	static uint32_t arabic_ligature_khah_with_yeh_final_form [] = { 0x062E, 0x064A };
	static uint32_t arabic_ligature_sad_with_alef_maksura_final_form [] = { 0x0635, 0x0649 };
	static uint32_t arabic_ligature_sad_with_yeh_final_form [] = { 0x0635, 0x064A };
	static uint32_t arabic_ligature_dad_with_alef_maksura_final_form [] = { 0x0636, 0x0649 };
	static uint32_t arabic_ligature_dad_with_yeh_final_form [] = { 0x0636, 0x064A };
	static uint32_t arabic_ligature_sheen_with_jeem_final_form [] = { 0x0634, 0x062C };
	static uint32_t arabic_ligature_sheen_with_hah_final_form [] = { 0x0634, 0x062D };
	static uint32_t arabic_ligature_sheen_with_khah_final_form [] = { 0x0634, 0x062E };
	static uint32_t arabic_ligature_sheen_with_meem_final_form [] = { 0x0634, 0x0645 };
	static uint32_t arabic_ligature_sheen_with_reh_final_form [] = { 0x0634, 0x0631 };
	static uint32_t arabic_ligature_seen_with_reh_final_form [] = { 0x0633, 0x0631 };
	static uint32_t arabic_ligature_sad_with_reh_final_form [] = { 0x0635, 0x0631 };
	static uint32_t arabic_ligature_dad_with_reh_final_form [] = { 0x0636, 0x0631 };
	static uint32_t arabic_ligature_sheen_with_jeem_initial_form [] = { 0x0634, 0x062C };
	static uint32_t arabic_ligature_sheen_with_hah_initial_form [] = { 0x0634, 0x062D };
	static uint32_t arabic_ligature_sheen_with_khah_initial_form [] = { 0x0634, 0x062E };
	static uint32_t arabic_ligature_sheen_with_meem_initial_form [] = { 0x0634, 0x0645 };
	static uint32_t arabic_ligature_seen_with_heh_initial_form [] = { 0x0633, 0x0647 };
	static uint32_t arabic_ligature_sheen_with_heh_initial_form [] = { 0x0634, 0x0647 };
	static uint32_t arabic_ligature_tah_with_meem_initial_form [] = { 0x0637, 0x0645 };
	static uint32_t arabic_ligature_seen_with_jeem_medial_form [] = { 0x0633, 0x062C };
	static uint32_t arabic_ligature_seen_with_hah_medial_form [] = { 0x0633, 0x062D };
	static uint32_t arabic_ligature_seen_with_khah_medial_form [] = { 0x0633, 0x062E };
	static uint32_t arabic_ligature_sheen_with_jeem_medial_form [] = { 0x0634, 0x062C };
	static uint32_t arabic_ligature_sheen_with_hah_medial_form [] = { 0x0634, 0x062D };
	static uint32_t arabic_ligature_sheen_with_khah_medial_form [] = { 0x0634, 0x062E };
	static uint32_t arabic_ligature_tah_with_meem_medial_form [] = { 0x0637, 0x0645 };
	static uint32_t arabic_ligature_zah_with_meem_medial_form [] = { 0x0638, 0x0645 };
	static uint32_t arabic_ligature_alef_with_fathatan_final_form [] = { 0x0627, 0x064B };
	static uint32_t arabic_ligature_alef_with_fathatan_isolated_form [] = { 0x0627, 0x064B };
	static uint32_t arabic_ligature_teh_with_jeem_with_meem_initial_form [] = { 0x062A, 0x062C, 0x0645 };
	static uint32_t arabic_ligature_teh_with_hah_with_jeem_final_form [] = { 0x062A, 0x062D, 0x062C };
	static uint32_t arabic_ligature_teh_with_hah_with_jeem_initial_form [] = { 0x062A, 0x062D, 0x062C };
	static uint32_t arabic_ligature_teh_with_hah_with_meem_initial_form [] = { 0x062A, 0x062D, 0x0645 };
	static uint32_t arabic_ligature_teh_with_khah_with_meem_initial_form [] = { 0x062A, 0x062E, 0x0645 };
	static uint32_t arabic_ligature_teh_with_meem_with_jeem_initial_form [] = { 0x062A, 0x0645, 0x062C };
	static uint32_t arabic_ligature_teh_with_meem_with_hah_initial_form [] = { 0x062A, 0x0645, 0x062D };
	static uint32_t arabic_ligature_teh_with_meem_with_khah_initial_form [] = { 0x062A, 0x0645, 0x062E };
	static uint32_t arabic_ligature_jeem_with_meem_with_hah_final_form [] = { 0x062C, 0x0645, 0x062D };
	static uint32_t arabic_ligature_jeem_with_meem_with_hah_initial_form [] = { 0x062C, 0x0645, 0x062D };
	static uint32_t arabic_ligature_hah_with_meem_with_yeh_final_form [] = { 0x062D, 0x0645, 0x064A };
	static uint32_t arabic_ligature_hah_with_meem_with_alef_maksura_final_form [] = { 0x062D, 0x0645, 0x0649 };
	static uint32_t arabic_ligature_seen_with_hah_with_jeem_initial_form [] = { 0x0633, 0x062D, 0x062C };
	static uint32_t arabic_ligature_seen_with_jeem_with_hah_initial_form [] = { 0x0633, 0x062C, 0x062D };
	static uint32_t arabic_ligature_seen_with_jeem_with_alef_maksura_final_form [] = { 0x0633, 0x062C, 0x0649 };
	static uint32_t arabic_ligature_seen_with_meem_with_hah_final_form [] = { 0x0633, 0x0645, 0x062D };
	static uint32_t arabic_ligature_seen_with_meem_with_hah_initial_form [] = { 0x0633, 0x0645, 0x062D };
	static uint32_t arabic_ligature_seen_with_meem_with_jeem_initial_form [] = { 0x0633, 0x0645, 0x062C };
	static uint32_t arabic_ligature_seen_with_meem_with_meem_final_form [] = { 0x0633, 0x0645, 0x0645 };
	static uint32_t arabic_ligature_seen_with_meem_with_meem_initial_form [] = { 0x0633, 0x0645, 0x0645 };
	static uint32_t arabic_ligature_sad_with_hah_with_hah_final_form [] = { 0x0635, 0x062D, 0x062D };
	static uint32_t arabic_ligature_sad_with_hah_with_hah_initial_form [] = { 0x0635, 0x062D, 0x062D };
	static uint32_t arabic_ligature_sad_with_meem_with_meem_final_form [] = { 0x0635, 0x0645, 0x0645 };
	static uint32_t arabic_ligature_sheen_with_hah_with_meem_final_form [] = { 0x0634, 0x062D, 0x0645 };
	static uint32_t arabic_ligature_sheen_with_hah_with_meem_initial_form [] = { 0x0634, 0x062D, 0x0645 };
	static uint32_t arabic_ligature_sheen_with_jeem_with_yeh_final_form [] = { 0x0634, 0x062C, 0x064A };
	static uint32_t arabic_ligature_sheen_with_meem_with_khah_final_form [] = { 0x0634, 0x0645, 0x062E };
	static uint32_t arabic_ligature_sheen_with_meem_with_khah_initial_form [] = { 0x0634, 0x0645, 0x062E };
	static uint32_t arabic_ligature_sheen_with_meem_with_meem_final_form [] = { 0x0634, 0x0645, 0x0645 };
	static uint32_t arabic_ligature_sheen_with_meem_with_meem_initial_form [] = { 0x0634, 0x0645, 0x0645 };
	static uint32_t arabic_ligature_dad_with_hah_with_alef_maksura_final_form [] = { 0x0636, 0x062D, 0x0649 };
	static uint32_t arabic_ligature_dad_with_khah_with_meem_final_form [] = { 0x0636, 0x062E, 0x0645 };
	static uint32_t arabic_ligature_dad_with_khah_with_meem_initial_form [] = { 0x0636, 0x062E, 0x0645 };
	static uint32_t arabic_ligature_tah_with_meem_with_hah_final_form [] = { 0x0637, 0x0645, 0x062D };
	static uint32_t arabic_ligature_tah_with_meem_with_hah_initial_form [] = { 0x0637, 0x0645, 0x062D };
	static uint32_t arabic_ligature_tah_with_meem_with_meem_initial_form [] = { 0x0637, 0x0645, 0x0645 };
	static uint32_t arabic_ligature_tah_with_meem_with_yeh_final_form [] = { 0x0637, 0x0645, 0x064A };
	static uint32_t arabic_ligature_ain_with_jeem_with_meem_final_form [] = { 0x0639, 0x062C, 0x0645 };
	static uint32_t arabic_ligature_ain_with_meem_with_meem_final_form [] = { 0x0639, 0x0645, 0x0645 };
	static uint32_t arabic_ligature_ain_with_meem_with_meem_initial_form [] = { 0x0639, 0x0645, 0x0645 };
	static uint32_t arabic_ligature_ain_with_meem_with_alef_maksura_final_form [] = { 0x0639, 0x0645, 0x0649 };
	static uint32_t arabic_ligature_ghain_with_meem_with_meem_final_form [] = { 0x063A, 0x0645, 0x0645 };
	static uint32_t arabic_ligature_ghain_with_meem_with_yeh_final_form [] = { 0x063A, 0x0645, 0x064A };
	static uint32_t arabic_ligature_ghain_with_meem_with_alef_maksura_final_form [] = { 0x063A, 0x0645, 0x0649 };
	static uint32_t arabic_ligature_feh_with_khah_with_meem_final_form [] = { 0x0641, 0x062E, 0x0645 };
	static uint32_t arabic_ligature_feh_with_khah_with_meem_initial_form [] = { 0x0641, 0x062E, 0x0645 };
	static uint32_t arabic_ligature_qaf_with_meem_with_hah_final_form [] = { 0x0642, 0x0645, 0x062D };
	static uint32_t arabic_ligature_qaf_with_meem_with_meem_final_form [] = { 0x0642, 0x0645, 0x0645 };
	static uint32_t arabic_ligature_lam_with_hah_with_meem_final_form [] = { 0x0644, 0x062D, 0x0645 };
	static uint32_t arabic_ligature_lam_with_hah_with_yeh_final_form [] = { 0x0644, 0x062D, 0x064A };
	static uint32_t arabic_ligature_lam_with_hah_with_alef_maksura_final_form [] = { 0x0644, 0x062D, 0x0649 };
	static uint32_t arabic_ligature_lam_with_jeem_with_jeem_initial_form [] = { 0x0644, 0x062C, 0x062C };
	static uint32_t arabic_ligature_lam_with_jeem_with_jeem_final_form [] = { 0x0644, 0x062C, 0x062C };
	static uint32_t arabic_ligature_lam_with_khah_with_meem_final_form [] = { 0x0644, 0x062E, 0x0645 };
	static uint32_t arabic_ligature_lam_with_khah_with_meem_initial_form [] = { 0x0644, 0x062E, 0x0645 };
	static uint32_t arabic_ligature_lam_with_meem_with_hah_final_form [] = { 0x0644, 0x0645, 0x062D };
	static uint32_t arabic_ligature_lam_with_meem_with_hah_initial_form [] = { 0x0644, 0x0645, 0x062D };
	static uint32_t arabic_ligature_meem_with_hah_with_jeem_initial_form [] = { 0x0645, 0x062D, 0x062C };
	static uint32_t arabic_ligature_meem_with_hah_with_meem_initial_form [] = { 0x0645, 0x062D, 0x0645 };
	static uint32_t arabic_ligature_meem_with_hah_with_yeh_final_form [] = { 0x0645, 0x062D, 0x064A };
	static uint32_t arabic_ligature_meem_with_jeem_with_hah_initial_form [] = { 0x0645, 0x062C, 0x062D };
	static uint32_t arabic_ligature_meem_with_jeem_with_meem_initial_form [] = { 0x0645, 0x062C, 0x0645 };
	static uint32_t arabic_ligature_meem_with_khah_with_jeem_initial_form [] = { 0x0645, 0x062E, 0x062C };
	static uint32_t arabic_ligature_meem_with_khah_with_meem_initial_form [] = { 0x0645, 0x062E, 0x0645 };
	static uint32_t arabic_ligature_meem_with_jeem_with_khah_initial_form [] = { 0x0645, 0x062C, 0x062E };
	static uint32_t arabic_ligature_heh_with_meem_with_jeem_initial_form [] = { 0x0647, 0x0645, 0x062C };
	static uint32_t arabic_ligature_heh_with_meem_with_meem_initial_form [] = { 0x0647, 0x0645, 0x0645 };
	static uint32_t arabic_ligature_noon_with_hah_with_meem_initial_form [] = { 0x0646, 0x062D, 0x0645 };
	static uint32_t arabic_ligature_noon_with_hah_with_alef_maksura_final_form [] = { 0x0646, 0x062D, 0x0649 };
	static uint32_t arabic_ligature_noon_with_jeem_with_meem_final_form [] = { 0x0646, 0x062C, 0x0645 };
	static uint32_t arabic_ligature_noon_with_jeem_with_meem_initial_form [] = { 0x0646, 0x062C, 0x0645 };
	static uint32_t arabic_ligature_noon_with_jeem_with_alef_maksura_final_form [] = { 0x0646, 0x062C, 0x0649 };
	static uint32_t arabic_ligature_noon_with_meem_with_yeh_final_form [] = { 0x0646, 0x0645, 0x064A };
	static uint32_t arabic_ligature_noon_with_meem_with_alef_maksura_final_form [] = { 0x0646, 0x0645, 0x0649 };
	static uint32_t arabic_ligature_yeh_with_meem_with_meem_final_form [] = { 0x064A, 0x0645, 0x0645 };
	static uint32_t arabic_ligature_yeh_with_meem_with_meem_initial_form [] = { 0x064A, 0x0645, 0x0645 };
	static uint32_t arabic_ligature_beh_with_khah_with_yeh_final_form [] = { 0x0628, 0x062E, 0x064A };
	static uint32_t arabic_ligature_teh_with_jeem_with_yeh_final_form [] = { 0x062A, 0x062C, 0x064A };
	static uint32_t arabic_ligature_teh_with_jeem_with_alef_maksura_final_form [] = { 0x062A, 0x062C, 0x0649 };
	static uint32_t arabic_ligature_teh_with_khah_with_yeh_final_form [] = { 0x062A, 0x062E, 0x064A };
	static uint32_t arabic_ligature_teh_with_khah_with_alef_maksura_final_form [] = { 0x062A, 0x062E, 0x0649 };
	static uint32_t arabic_ligature_teh_with_meem_with_yeh_final_form [] = { 0x062A, 0x0645, 0x064A };
	static uint32_t arabic_ligature_teh_with_meem_with_alef_maksura_final_form [] = { 0x062A, 0x0645, 0x0649 };
	static uint32_t arabic_ligature_jeem_with_meem_with_yeh_final_form [] = { 0x062C, 0x0645, 0x064A };
	static uint32_t arabic_ligature_jeem_with_hah_with_alef_maksura_final_form [] = { 0x062C, 0x062D, 0x0649 };
	static uint32_t arabic_ligature_jeem_with_meem_with_alef_maksura_final_form [] = { 0x062C, 0x0645, 0x0649 };
	static uint32_t arabic_ligature_seen_with_khah_with_alef_maksura_final_form [] = { 0x0633, 0x062E, 0x0649 };
	static uint32_t arabic_ligature_sad_with_hah_with_yeh_final_form [] = { 0x0635, 0x062D, 0x064A };
	static uint32_t arabic_ligature_sheen_with_hah_with_yeh_final_form [] = { 0x0634, 0x062D, 0x064A };
	static uint32_t arabic_ligature_dad_with_hah_with_yeh_final_form [] = { 0x0636, 0x062D, 0x064A };
	static uint32_t arabic_ligature_lam_with_jeem_with_yeh_final_form [] = { 0x0644, 0x062C, 0x064A };
	static uint32_t arabic_ligature_lam_with_meem_with_yeh_final_form [] = { 0x0644, 0x0645, 0x064A };
	static uint32_t arabic_ligature_yeh_with_hah_with_yeh_final_form [] = { 0x064A, 0x062D, 0x064A };
	static uint32_t arabic_ligature_yeh_with_jeem_with_yeh_final_form [] = { 0x064A, 0x062C, 0x064A };
	static uint32_t arabic_ligature_yeh_with_meem_with_yeh_final_form [] = { 0x064A, 0x0645, 0x064A };
	static uint32_t arabic_ligature_meem_with_meem_with_yeh_final_form [] = { 0x0645, 0x0645, 0x064A };
	static uint32_t arabic_ligature_qaf_with_meem_with_yeh_final_form [] = { 0x0642, 0x0645, 0x064A };
	static uint32_t arabic_ligature_noon_with_hah_with_yeh_final_form [] = { 0x0646, 0x062D, 0x064A };
	static uint32_t arabic_ligature_qaf_with_meem_with_hah_initial_form [] = { 0x0642, 0x0645, 0x062D };
	static uint32_t arabic_ligature_lam_with_hah_with_meem_initial_form [] = { 0x0644, 0x062D, 0x0645 };
	static uint32_t arabic_ligature_ain_with_meem_with_yeh_final_form [] = { 0x0639, 0x0645, 0x064A };
	static uint32_t arabic_ligature_kaf_with_meem_with_yeh_final_form [] = { 0x0643, 0x0645, 0x064A };
	static uint32_t arabic_ligature_noon_with_jeem_with_hah_initial_form [] = { 0x0646, 0x062C, 0x062D };
	static uint32_t arabic_ligature_meem_with_khah_with_yeh_final_form [] = { 0x0645, 0x062E, 0x064A };
	static uint32_t arabic_ligature_lam_with_jeem_with_meem_initial_form [] = { 0x0644, 0x062C, 0x0645 };
	static uint32_t arabic_ligature_kaf_with_meem_with_meem_final_form [] = { 0x0643, 0x0645, 0x0645 };
	static uint32_t arabic_ligature_lam_with_jeem_with_meem_final_form [] = { 0x0644, 0x062C, 0x0645 };
	static uint32_t arabic_ligature_noon_with_jeem_with_hah_final_form [] = { 0x0646, 0x062C, 0x062D };
	static uint32_t arabic_ligature_jeem_with_hah_with_yeh_final_form [] = { 0x062C, 0x062D, 0x064A };
	static uint32_t arabic_ligature_hah_with_jeem_with_yeh_final_form [] = { 0x062D, 0x062C, 0x064A };
	static uint32_t arabic_ligature_meem_with_jeem_with_yeh_final_form [] = { 0x0645, 0x062C, 0x064A };
	static uint32_t arabic_ligature_feh_with_meem_with_yeh_final_form [] = { 0x0641, 0x0645, 0x064A };
	static uint32_t arabic_ligature_beh_with_hah_with_yeh_final_form [] = { 0x0628, 0x062D, 0x064A };
	static uint32_t arabic_ligature_kaf_with_meem_with_meem_initial_form [] = { 0x0643, 0x0645, 0x0645 };
	static uint32_t arabic_ligature_ain_with_jeem_with_meem_initial_form [] = { 0x0639, 0x062C, 0x0645 };
	static uint32_t arabic_ligature_sad_with_meem_with_meem_initial_form [] = { 0x0635, 0x0645, 0x0645 };
	static uint32_t arabic_ligature_seen_with_khah_with_yeh_final_form [] = { 0x0633, 0x062E, 0x064A };
	static uint32_t arabic_ligature_noon_with_jeem_with_yeh_final_form [] = { 0x0646, 0x062C, 0x064A };
	static uint32_t arabic_ligature_salla_used_as_koranic_stop_sign_isolated_form [] = { 0x0635, 0x0644, 0x06D2 };
	static uint32_t arabic_ligature_qala_used_as_koranic_stop_sign_isolated_form [] = { 0x0642, 0x0644, 0x06D2 };
	static uint32_t arabic_ligature_allah_isolated_form [] = { 0x0627, 0x0644, 0x0644, 0x0647 };
	static uint32_t arabic_ligature_akbar_isolated_form [] = { 0x0627, 0x0643, 0x0628, 0x0631 };
	static uint32_t arabic_ligature_mohammad_isolated_form [] = { 0x0645, 0x062D, 0x0645, 0x062F };
	static uint32_t arabic_ligature_salam_isolated_form [] = { 0x0635, 0x0644, 0x0639, 0x0645 };
	static uint32_t arabic_ligature_rasoul_isolated_form [] = { 0x0631, 0x0633, 0x0648, 0x0644 };
	static uint32_t arabic_ligature_alayhe_isolated_form [] = { 0x0639, 0x0644, 0x064A, 0x0647 };
	static uint32_t arabic_ligature_wasallam_isolated_form [] = { 0x0648, 0x0633, 0x0644, 0x0645 };
	static uint32_t arabic_ligature_salla_isolated_form [] = { 0x0635, 0x0644, 0x0649 };
	static uint32_t arabic_ligature_sallallahou_alayhe_wasallam [] = { 0x0635, 0x0644, 0x0649, 0x0020, 0x0627, 0x0644, 0x0644, 0x0647, 0x0020, 0x0639, 0x0644, 0x064A, 0x0647, 0x0020, 0x0648, 0x0633, 0x0644, 0x0645 };
	static uint32_t arabic_ligature_jallajalalouhou [] = { 0x062C, 0x0644, 0x0020, 0x062C, 0x0644, 0x0627, 0x0644, 0x0647 };
	static uint32_t rial_sign [] = { 0x0631, 0x06CC, 0x0627, 0x0644 };
	static uint32_t presentation_form_for_vertical_comma [] = { 0x002C };
	static uint32_t presentation_form_for_vertical_ideographic_comma [] = { 0x3001 };
	static uint32_t presentation_form_for_vertical_ideographic_full_stop [] = { 0x3002 };
	static uint32_t presentation_form_for_vertical_colon [] = { 0x003A };
	static uint32_t presentation_form_for_vertical_semicolon [] = { 0x003B };
	static uint32_t presentation_form_for_vertical_exclamation_mark [] = { 0x0021 };
	static uint32_t presentation_form_for_vertical_question_mark [] = { 0x003F };
	static uint32_t presentation_form_for_vertical_left_white_lenticular_bracket [] = { 0x3016 };
	static uint32_t presentation_form_for_vertical_right_white_lenticular_brakcet [] = { 0x3017 };
	static uint32_t presentation_form_for_vertical_horizontal_ellipsis [] = { 0x2026 };
	static uint32_t presentation_form_for_vertical_two_dot_leader [] = { 0x2025 };
	static uint32_t presentation_form_for_vertical_em_dash [] = { 0x2014 };
	static uint32_t presentation_form_for_vertical_en_dash [] = { 0x2013 };
	static uint32_t presentation_form_for_vertical_low_line [] = { 0x005F };
	static uint32_t presentation_form_for_vertical_wavy_low_line [] = { 0x005F };
	static uint32_t presentation_form_for_vertical_left_parenthesis [] = { 0x0028 };
	static uint32_t presentation_form_for_vertical_right_parenthesis [] = { 0x0029 };
	static uint32_t presentation_form_for_vertical_left_curly_bracket [] = { 0x007B };
	static uint32_t presentation_form_for_vertical_right_curly_bracket [] = { 0x007D };
	static uint32_t presentation_form_for_vertical_left_tortoise_shell_bracket [] = { 0x3014 };
	static uint32_t presentation_form_for_vertical_right_tortoise_shell_bracket [] = { 0x3015 };
	static uint32_t presentation_form_for_vertical_left_black_lenticular_bracket [] = { 0x3010 };
	static uint32_t presentation_form_for_vertical_right_black_lenticular_bracket [] = { 0x3011 };
	static uint32_t presentation_form_for_vertical_left_double_angle_bracket [] = { 0x300A };
	static uint32_t presentation_form_for_vertical_right_double_angle_bracket [] = { 0x300B };
	static uint32_t presentation_form_for_vertical_left_angle_bracket [] = { 0x3008 };
	static uint32_t presentation_form_for_vertical_right_angle_bracket [] = { 0x3009 };
	static uint32_t presentation_form_for_vertical_left_corner_bracket [] = { 0x300C };
	static uint32_t presentation_form_for_vertical_right_corner_bracket [] = { 0x300D };
	static uint32_t presentation_form_for_vertical_left_white_corner_bracket [] = { 0x300E };
	static uint32_t presentation_form_for_vertical_right_white_corner_bracket [] = { 0x300F };
	static uint32_t presentation_form_for_vertical_left_square_bracket [] = { 0x005B };
	static uint32_t presentation_form_for_vertical_right_square_bracket [] = { 0x005D };
	static uint32_t dashed_overline [] = { 0x203E };
	static uint32_t centreline_overline [] = { 0x203E };
	static uint32_t wavy_overline [] = { 0x203E };
	static uint32_t double_wavy_overline [] = { 0x203E };
	static uint32_t dashed_low_line [] = { 0x005F };
	static uint32_t centreline_low_line [] = { 0x005F };
	static uint32_t wavy_low_line [] = { 0x005F };
	static uint32_t small_comma [] = { 0x002C };
	static uint32_t small_ideographic_comma [] = { 0x3001 };
	static uint32_t small_full_stop [] = { 0x002E };
	static uint32_t small_semicolon [] = { 0x003B };
	static uint32_t small_colon [] = { 0x003A };
	static uint32_t small_question_mark [] = { 0x003F };
	static uint32_t small_exclamation_mark [] = { 0x0021 };
	static uint32_t small_em_dash [] = { 0x2014 };
	static uint32_t small_left_parenthesis [] = { 0x0028 };
	static uint32_t small_right_parenthesis [] = { 0x0029 };
	static uint32_t small_left_curly_bracket [] = { 0x007B };
	static uint32_t small_right_curly_bracket [] = { 0x007D };
	static uint32_t small_left_tortoise_shell_bracket [] = { 0x3014 };
	static uint32_t small_right_tortoise_shell_bracket [] = { 0x3015 };
	static uint32_t small_number_sign [] = { 0x0023 };
	static uint32_t small_ampersand [] = { 0x0026 };
	static uint32_t small_asterisk [] = { 0x002A };
	static uint32_t small_plus_sign [] = { 0x002B };
	static uint32_t small_hyphen_minus [] = { 0x002D };
	static uint32_t small_less_than_sign [] = { 0x003C };
	static uint32_t small_greater_than_sign [] = { 0x003E };
	static uint32_t small_equals_sign [] = { 0x003D };
	static uint32_t small_reverse_solidus [] = { 0x005C };
	static uint32_t small_dollar_sign [] = { 0x0024 };
	static uint32_t small_percent_sign [] = { 0x0025 };
	static uint32_t small_commercial_at [] = { 0x0040 };
	static uint32_t arabic_fathatan_isolated_form [] = { 0x0020, 0x064B };
	static uint32_t arabic_tatweel_with_fathatan_above [] = { 0x0640, 0x064B };
	static uint32_t arabic_dammatan_isolated_form [] = { 0x0020, 0x064C };
	static uint32_t arabic_kasratan_isolated_form [] = { 0x0020, 0x064D };
	static uint32_t arabic_fatha_isolated_form [] = { 0x0020, 0x064E };
	static uint32_t arabic_fatha_medial_form [] = { 0x0640, 0x064E };
	static uint32_t arabic_damma_isolated_form [] = { 0x0020, 0x064F };
	static uint32_t arabic_damma_medial_form [] = { 0x0640, 0x064F };
	static uint32_t arabic_kasra_isolated_form [] = { 0x0020, 0x0650 };
	static uint32_t arabic_kasra_medial_form [] = { 0x0640, 0x0650 };
	static uint32_t arabic_shadda_isolated_form [] = { 0x0020, 0x0651 };
	static uint32_t arabic_shadda_medial_form [] = { 0x0640, 0x0651 };
	static uint32_t arabic_sukun_isolated_form [] = { 0x0020, 0x0652 };
	static uint32_t arabic_sukun_medial_form [] = { 0x0640, 0x0652 };
	static uint32_t arabic_letter_hamza_isolated_form [] = { 0x0621 };
	static uint32_t arabic_letter_alef_with_madda_above_isolated_form [] = { 0x0622 };
	static uint32_t arabic_letter_alef_with_madda_above_final_form [] = { 0x0622 };
	static uint32_t arabic_letter_alef_with_hamza_above_isolated_form [] = { 0x0623 };
	static uint32_t arabic_letter_alef_with_hamza_above_final_form [] = { 0x0623 };
	static uint32_t arabic_letter_waw_with_hamza_above_isolated_form [] = { 0x0624 };
	static uint32_t arabic_letter_waw_with_hamza_above_final_form [] = { 0x0624 };
	static uint32_t arabic_letter_alef_with_hamza_below_isolated_form [] = { 0x0625 };
	static uint32_t arabic_letter_alef_with_hamza_below_final_form [] = { 0x0625 };
	static uint32_t arabic_letter_yeh_with_hamza_above_isolated_form [] = { 0x0626 };
	static uint32_t arabic_letter_yeh_with_hamza_above_final_form [] = { 0x0626 };
	static uint32_t arabic_letter_yeh_with_hamza_above_initial_form [] = { 0x0626 };
	static uint32_t arabic_letter_yeh_with_hamza_above_medial_form [] = { 0x0626 };
	static uint32_t arabic_letter_alef_isolated_form [] = { 0x0627 };
	static uint32_t arabic_letter_alef_final_form [] = { 0x0627 };
	static uint32_t arabic_letter_beh_isolated_form [] = { 0x0628 };
	static uint32_t arabic_letter_beh_final_form [] = { 0x0628 };
	static uint32_t arabic_letter_beh_initial_form [] = { 0x0628 };
	static uint32_t arabic_letter_beh_medial_form [] = { 0x0628 };
	static uint32_t arabic_letter_teh_marbuta_isolated_form [] = { 0x0629 };
	static uint32_t arabic_letter_teh_marbuta_final_form [] = { 0x0629 };
	static uint32_t arabic_letter_teh_isolated_form [] = { 0x062A };
	static uint32_t arabic_letter_teh_final_form [] = { 0x062A };
	static uint32_t arabic_letter_teh_initial_form [] = { 0x062A };
	static uint32_t arabic_letter_teh_medial_form [] = { 0x062A };
	static uint32_t arabic_letter_theh_isolated_form [] = { 0x062B };
	static uint32_t arabic_letter_theh_final_form [] = { 0x062B };
	static uint32_t arabic_letter_theh_initial_form [] = { 0x062B };
	static uint32_t arabic_letter_theh_medial_form [] = { 0x062B };
	static uint32_t arabic_letter_jeem_isolated_form [] = { 0x062C };
	static uint32_t arabic_letter_jeem_final_form [] = { 0x062C };
	static uint32_t arabic_letter_jeem_initial_form [] = { 0x062C };
	static uint32_t arabic_letter_jeem_medial_form [] = { 0x062C };
	static uint32_t arabic_letter_hah_isolated_form [] = { 0x062D };
	static uint32_t arabic_letter_hah_final_form [] = { 0x062D };
	static uint32_t arabic_letter_hah_initial_form [] = { 0x062D };
	static uint32_t arabic_letter_hah_medial_form [] = { 0x062D };
	static uint32_t arabic_letter_khah_isolated_form [] = { 0x062E };
	static uint32_t arabic_letter_khah_final_form [] = { 0x062E };
	static uint32_t arabic_letter_khah_initial_form [] = { 0x062E };
	static uint32_t arabic_letter_khah_medial_form [] = { 0x062E };
	static uint32_t arabic_letter_dal_isolated_form [] = { 0x062F };
	static uint32_t arabic_letter_dal_final_form [] = { 0x062F };
	static uint32_t arabic_letter_thal_isolated_form [] = { 0x0630 };
	static uint32_t arabic_letter_thal_final_form [] = { 0x0630 };
	static uint32_t arabic_letter_reh_isolated_form [] = { 0x0631 };
	static uint32_t arabic_letter_reh_final_form [] = { 0x0631 };
	static uint32_t arabic_letter_zain_isolated_form [] = { 0x0632 };
	static uint32_t arabic_letter_zain_final_form [] = { 0x0632 };
	static uint32_t arabic_letter_seen_isolated_form [] = { 0x0633 };
	static uint32_t arabic_letter_seen_final_form [] = { 0x0633 };
	static uint32_t arabic_letter_seen_initial_form [] = { 0x0633 };
	static uint32_t arabic_letter_seen_medial_form [] = { 0x0633 };
	static uint32_t arabic_letter_sheen_isolated_form [] = { 0x0634 };
	static uint32_t arabic_letter_sheen_final_form [] = { 0x0634 };
	static uint32_t arabic_letter_sheen_initial_form [] = { 0x0634 };
	static uint32_t arabic_letter_sheen_medial_form [] = { 0x0634 };
	static uint32_t arabic_letter_sad_isolated_form [] = { 0x0635 };
	static uint32_t arabic_letter_sad_final_form [] = { 0x0635 };
	static uint32_t arabic_letter_sad_initial_form [] = { 0x0635 };
	static uint32_t arabic_letter_sad_medial_form [] = { 0x0635 };
	static uint32_t arabic_letter_dad_isolated_form [] = { 0x0636 };
	static uint32_t arabic_letter_dad_final_form [] = { 0x0636 };
	static uint32_t arabic_letter_dad_initial_form [] = { 0x0636 };
	static uint32_t arabic_letter_dad_medial_form [] = { 0x0636 };
	static uint32_t arabic_letter_tah_isolated_form [] = { 0x0637 };
	static uint32_t arabic_letter_tah_final_form [] = { 0x0637 };
	static uint32_t arabic_letter_tah_initial_form [] = { 0x0637 };
	static uint32_t arabic_letter_tah_medial_form [] = { 0x0637 };
	static uint32_t arabic_letter_zah_isolated_form [] = { 0x0638 };
	static uint32_t arabic_letter_zah_final_form [] = { 0x0638 };
	static uint32_t arabic_letter_zah_initial_form [] = { 0x0638 };
	static uint32_t arabic_letter_zah_medial_form [] = { 0x0638 };
	static uint32_t arabic_letter_ain_isolated_form [] = { 0x0639 };
	static uint32_t arabic_letter_ain_final_form [] = { 0x0639 };
	static uint32_t arabic_letter_ain_initial_form [] = { 0x0639 };
	static uint32_t arabic_letter_ain_medial_form [] = { 0x0639 };
	static uint32_t arabic_letter_ghain_isolated_form [] = { 0x063A };
	static uint32_t arabic_letter_ghain_final_form [] = { 0x063A };
	static uint32_t arabic_letter_ghain_initial_form [] = { 0x063A };
	static uint32_t arabic_letter_ghain_medial_form [] = { 0x063A };
	static uint32_t arabic_letter_feh_isolated_form [] = { 0x0641 };
	static uint32_t arabic_letter_feh_final_form [] = { 0x0641 };
	static uint32_t arabic_letter_feh_initial_form [] = { 0x0641 };
	static uint32_t arabic_letter_feh_medial_form [] = { 0x0641 };
	static uint32_t arabic_letter_qaf_isolated_form [] = { 0x0642 };
	static uint32_t arabic_letter_qaf_final_form [] = { 0x0642 };
	static uint32_t arabic_letter_qaf_initial_form [] = { 0x0642 };
	static uint32_t arabic_letter_qaf_medial_form [] = { 0x0642 };
	static uint32_t arabic_letter_kaf_isolated_form [] = { 0x0643 };
	static uint32_t arabic_letter_kaf_final_form [] = { 0x0643 };
	static uint32_t arabic_letter_kaf_initial_form [] = { 0x0643 };
	static uint32_t arabic_letter_kaf_medial_form [] = { 0x0643 };
	static uint32_t arabic_letter_lam_isolated_form [] = { 0x0644 };
	static uint32_t arabic_letter_lam_final_form [] = { 0x0644 };
	static uint32_t arabic_letter_lam_initial_form [] = { 0x0644 };
	static uint32_t arabic_letter_lam_medial_form [] = { 0x0644 };
	static uint32_t arabic_letter_meem_isolated_form [] = { 0x0645 };
	static uint32_t arabic_letter_meem_final_form [] = { 0x0645 };
	static uint32_t arabic_letter_meem_initial_form [] = { 0x0645 };
	static uint32_t arabic_letter_meem_medial_form [] = { 0x0645 };
	static uint32_t arabic_letter_noon_isolated_form [] = { 0x0646 };
	static uint32_t arabic_letter_noon_final_form [] = { 0x0646 };
	static uint32_t arabic_letter_noon_initial_form [] = { 0x0646 };
	static uint32_t arabic_letter_noon_medial_form [] = { 0x0646 };
	static uint32_t arabic_letter_heh_isolated_form [] = { 0x0647 };
	static uint32_t arabic_letter_heh_final_form [] = { 0x0647 };
	static uint32_t arabic_letter_heh_initial_form [] = { 0x0647 };
	static uint32_t arabic_letter_heh_medial_form [] = { 0x0647 };
	static uint32_t arabic_letter_waw_isolated_form [] = { 0x0648 };
	static uint32_t arabic_letter_waw_final_form [] = { 0x0648 };
	static uint32_t arabic_letter_alef_maksura_isolated_form [] = { 0x0649 };
	static uint32_t arabic_letter_alef_maksura_final_form [] = { 0x0649 };
	static uint32_t arabic_letter_yeh_isolated_form [] = { 0x064A };
	static uint32_t arabic_letter_yeh_final_form [] = { 0x064A };
	static uint32_t arabic_letter_yeh_initial_form [] = { 0x064A };
	static uint32_t arabic_letter_yeh_medial_form [] = { 0x064A };
	static uint32_t arabic_ligature_lam_with_alef_with_madda_above_isolated_form [] = { 0x0644, 0x0622 };
	static uint32_t arabic_ligature_lam_with_alef_with_madda_above_final_form [] = { 0x0644, 0x0622 };
	static uint32_t arabic_ligature_lam_with_alef_with_hamza_above_isolated_form [] = { 0x0644, 0x0623 };
	static uint32_t arabic_ligature_lam_with_alef_with_hamza_above_final_form [] = { 0x0644, 0x0623 };
	static uint32_t arabic_ligature_lam_with_alef_with_hamza_below_isolated_form [] = { 0x0644, 0x0625 };
	static uint32_t arabic_ligature_lam_with_alef_with_hamza_below_final_form [] = { 0x0644, 0x0625 };
	static uint32_t arabic_ligature_lam_with_alef_isolated_form [] = { 0x0644, 0x0627 };
	static uint32_t arabic_ligature_lam_with_alef_final_form [] = { 0x0644, 0x0627 };
	static uint32_t fullwidth_exclamation_mark [] = { 0x0021 };
	static uint32_t fullwidth_quotation_mark [] = { 0x0022 };
	static uint32_t fullwidth_number_sign [] = { 0x0023 };
	static uint32_t fullwidth_dollar_sign [] = { 0x0024 };
	static uint32_t fullwidth_percent_sign [] = { 0x0025 };
	static uint32_t fullwidth_ampersand [] = { 0x0026 };
	static uint32_t fullwidth_apostrophe [] = { 0x0027 };
	static uint32_t fullwidth_left_parenthesis [] = { 0x0028 };
	static uint32_t fullwidth_right_parenthesis [] = { 0x0029 };
	static uint32_t fullwidth_asterisk [] = { 0x002A };
	static uint32_t fullwidth_plus_sign [] = { 0x002B };
	static uint32_t fullwidth_comma [] = { 0x002C };
	static uint32_t fullwidth_hyphen_minus [] = { 0x002D };
	static uint32_t fullwidth_full_stop [] = { 0x002E };
	static uint32_t fullwidth_solidus [] = { 0x002F };
	static uint32_t fullwidth_digit_zero [] = { 0x0030 };
	static uint32_t fullwidth_digit_one [] = { 0x0031 };
	static uint32_t fullwidth_digit_two [] = { 0x0032 };
	static uint32_t fullwidth_digit_three [] = { 0x0033 };
	static uint32_t fullwidth_digit_four [] = { 0x0034 };
	static uint32_t fullwidth_digit_five [] = { 0x0035 };
	static uint32_t fullwidth_digit_six [] = { 0x0036 };
	static uint32_t fullwidth_digit_seven [] = { 0x0037 };
	static uint32_t fullwidth_digit_eight [] = { 0x0038 };
	static uint32_t fullwidth_digit_nine [] = { 0x0039 };
	static uint32_t fullwidth_colon [] = { 0x003A };
	static uint32_t fullwidth_semicolon [] = { 0x003B };
	static uint32_t fullwidth_less_than_sign [] = { 0x003C };
	static uint32_t fullwidth_equals_sign [] = { 0x003D };
	static uint32_t fullwidth_greater_than_sign [] = { 0x003E };
	static uint32_t fullwidth_question_mark [] = { 0x003F };
	static uint32_t fullwidth_commercial_at [] = { 0x0040 };
	static uint32_t fullwidth_latin_capital_letter_a [] = { 0x0041 };
	static uint32_t fullwidth_latin_capital_letter_b [] = { 0x0042 };
	static uint32_t fullwidth_latin_capital_letter_c [] = { 0x0043 };
	static uint32_t fullwidth_latin_capital_letter_d [] = { 0x0044 };
	static uint32_t fullwidth_latin_capital_letter_e [] = { 0x0045 };
	static uint32_t fullwidth_latin_capital_letter_f [] = { 0x0046 };
	static uint32_t fullwidth_latin_capital_letter_g [] = { 0x0047 };
	static uint32_t fullwidth_latin_capital_letter_h [] = { 0x0048 };
	static uint32_t fullwidth_latin_capital_letter_i [] = { 0x0049 };
	static uint32_t fullwidth_latin_capital_letter_j [] = { 0x004A };
	static uint32_t fullwidth_latin_capital_letter_k [] = { 0x004B };
	static uint32_t fullwidth_latin_capital_letter_l [] = { 0x004C };
	static uint32_t fullwidth_latin_capital_letter_m [] = { 0x004D };
	static uint32_t fullwidth_latin_capital_letter_n [] = { 0x004E };
	static uint32_t fullwidth_latin_capital_letter_o [] = { 0x004F };
	static uint32_t fullwidth_latin_capital_letter_p [] = { 0x0050 };
	static uint32_t fullwidth_latin_capital_letter_q [] = { 0x0051 };
	static uint32_t fullwidth_latin_capital_letter_r [] = { 0x0052 };
	static uint32_t fullwidth_latin_capital_letter_s [] = { 0x0053 };
	static uint32_t fullwidth_latin_capital_letter_t [] = { 0x0054 };
	static uint32_t fullwidth_latin_capital_letter_u [] = { 0x0055 };
	static uint32_t fullwidth_latin_capital_letter_v [] = { 0x0056 };
	static uint32_t fullwidth_latin_capital_letter_w [] = { 0x0057 };
	static uint32_t fullwidth_latin_capital_letter_x [] = { 0x0058 };
	static uint32_t fullwidth_latin_capital_letter_y [] = { 0x0059 };
	static uint32_t fullwidth_latin_capital_letter_z [] = { 0x005A };
	static uint32_t fullwidth_left_square_bracket [] = { 0x005B };
	static uint32_t fullwidth_reverse_solidus [] = { 0x005C };
	static uint32_t fullwidth_right_square_bracket [] = { 0x005D };
	static uint32_t fullwidth_circumflex_accent [] = { 0x005E };
	static uint32_t fullwidth_low_line [] = { 0x005F };
	static uint32_t fullwidth_grave_accent [] = { 0x0060 };
	static uint32_t fullwidth_latin_small_letter_a [] = { 0x0061 };
	static uint32_t fullwidth_latin_small_letter_b [] = { 0x0062 };
	static uint32_t fullwidth_latin_small_letter_c [] = { 0x0063 };
	static uint32_t fullwidth_latin_small_letter_d [] = { 0x0064 };
	static uint32_t fullwidth_latin_small_letter_e [] = { 0x0065 };
	static uint32_t fullwidth_latin_small_letter_f [] = { 0x0066 };
	static uint32_t fullwidth_latin_small_letter_g [] = { 0x0067 };
	static uint32_t fullwidth_latin_small_letter_h [] = { 0x0068 };
	static uint32_t fullwidth_latin_small_letter_i [] = { 0x0069 };
	static uint32_t fullwidth_latin_small_letter_j [] = { 0x006A };
	static uint32_t fullwidth_latin_small_letter_k [] = { 0x006B };
	static uint32_t fullwidth_latin_small_letter_l [] = { 0x006C };
	static uint32_t fullwidth_latin_small_letter_m [] = { 0x006D };
	static uint32_t fullwidth_latin_small_letter_n [] = { 0x006E };
	static uint32_t fullwidth_latin_small_letter_o [] = { 0x006F };
	static uint32_t fullwidth_latin_small_letter_p [] = { 0x0070 };
	static uint32_t fullwidth_latin_small_letter_q [] = { 0x0071 };
	static uint32_t fullwidth_latin_small_letter_r [] = { 0x0072 };
	static uint32_t fullwidth_latin_small_letter_s [] = { 0x0073 };
	static uint32_t fullwidth_latin_small_letter_t [] = { 0x0074 };
	static uint32_t fullwidth_latin_small_letter_u [] = { 0x0075 };
	static uint32_t fullwidth_latin_small_letter_v [] = { 0x0076 };
	static uint32_t fullwidth_latin_small_letter_w [] = { 0x0077 };
	static uint32_t fullwidth_latin_small_letter_x [] = { 0x0078 };
	static uint32_t fullwidth_latin_small_letter_y [] = { 0x0079 };
	static uint32_t fullwidth_latin_small_letter_z [] = { 0x007A };
	static uint32_t fullwidth_left_curly_bracket [] = { 0x007B };
	static uint32_t fullwidth_vertical_line [] = { 0x007C };
	static uint32_t fullwidth_right_curly_bracket [] = { 0x007D };
	static uint32_t fullwidth_tilde [] = { 0x007E };
	static uint32_t fullwidth_left_white_parenthesis [] = { 0x2985 };
	static uint32_t fullwidth_right_white_parenthesis [] = { 0x2986 };
	static uint32_t halfwidth_ideographic_full_stop [] = { 0x3002 };
	static uint32_t halfwidth_left_corner_bracket [] = { 0x300C };
	static uint32_t halfwidth_right_corner_bracket [] = { 0x300D };
	static uint32_t halfwidth_ideographic_comma [] = { 0x3001 };
	static uint32_t halfwidth_katakana_middle_dot [] = { 0x30FB };
	static uint32_t halfwidth_katakana_letter_wo [] = { 0x30F2 };
	static uint32_t halfwidth_katakana_letter_small_a [] = { 0x30A1 };
	static uint32_t halfwidth_katakana_letter_small_i [] = { 0x30A3 };
	static uint32_t halfwidth_katakana_letter_small_u [] = { 0x30A5 };
	static uint32_t halfwidth_katakana_letter_small_e [] = { 0x30A7 };
	static uint32_t halfwidth_katakana_letter_small_o [] = { 0x30A9 };
	static uint32_t halfwidth_katakana_letter_small_ya [] = { 0x30E3 };
	static uint32_t halfwidth_katakana_letter_small_yu [] = { 0x30E5 };
	static uint32_t halfwidth_katakana_letter_small_yo [] = { 0x30E7 };
	static uint32_t halfwidth_katakana_letter_small_tu [] = { 0x30C3 };
	static uint32_t halfwidth_katakana_hiragana_prolonged_sound_mark [] = { 0x30FC };
	static uint32_t halfwidth_katakana_letter_a [] = { 0x30A2 };
	static uint32_t halfwidth_katakana_letter_i [] = { 0x30A4 };
	static uint32_t halfwidth_katakana_letter_u [] = { 0x30A6 };
	static uint32_t halfwidth_katakana_letter_e [] = { 0x30A8 };
	static uint32_t halfwidth_katakana_letter_o [] = { 0x30AA };
	static uint32_t halfwidth_katakana_letter_ka [] = { 0x30AB };
	static uint32_t halfwidth_katakana_letter_ki [] = { 0x30AD };
	static uint32_t halfwidth_katakana_letter_ku [] = { 0x30AF };
	static uint32_t halfwidth_katakana_letter_ke [] = { 0x30B1 };
	static uint32_t halfwidth_katakana_letter_ko [] = { 0x30B3 };
	static uint32_t halfwidth_katakana_letter_sa [] = { 0x30B5 };
	static uint32_t halfwidth_katakana_letter_si [] = { 0x30B7 };
	static uint32_t halfwidth_katakana_letter_su [] = { 0x30B9 };
	static uint32_t halfwidth_katakana_letter_se [] = { 0x30BB };
	static uint32_t halfwidth_katakana_letter_so [] = { 0x30BD };
	static uint32_t halfwidth_katakana_letter_ta [] = { 0x30BF };
	static uint32_t halfwidth_katakana_letter_ti [] = { 0x30C1 };
	static uint32_t halfwidth_katakana_letter_tu [] = { 0x30C4 };
	static uint32_t halfwidth_katakana_letter_te [] = { 0x30C6 };
	static uint32_t halfwidth_katakana_letter_to [] = { 0x30C8 };
	static uint32_t halfwidth_katakana_letter_na [] = { 0x30CA };
	static uint32_t halfwidth_katakana_letter_ni [] = { 0x30CB };
	static uint32_t halfwidth_katakana_letter_nu [] = { 0x30CC };
	static uint32_t halfwidth_katakana_letter_ne [] = { 0x30CD };
	static uint32_t halfwidth_katakana_letter_no [] = { 0x30CE };
	static uint32_t halfwidth_katakana_letter_ha [] = { 0x30CF };
	static uint32_t halfwidth_katakana_letter_hi [] = { 0x30D2 };
	static uint32_t halfwidth_katakana_letter_hu [] = { 0x30D5 };
	static uint32_t halfwidth_katakana_letter_he [] = { 0x30D8 };
	static uint32_t halfwidth_katakana_letter_ho [] = { 0x30DB };
	static uint32_t halfwidth_katakana_letter_ma [] = { 0x30DE };
	static uint32_t halfwidth_katakana_letter_mi [] = { 0x30DF };
	static uint32_t halfwidth_katakana_letter_mu [] = { 0x30E0 };
	static uint32_t halfwidth_katakana_letter_me [] = { 0x30E1 };
	static uint32_t halfwidth_katakana_letter_mo [] = { 0x30E2 };
	static uint32_t halfwidth_katakana_letter_ya [] = { 0x30E4 };
	static uint32_t halfwidth_katakana_letter_yu [] = { 0x30E6 };
	static uint32_t halfwidth_katakana_letter_yo [] = { 0x30E8 };
	static uint32_t halfwidth_katakana_letter_ra [] = { 0x30E9 };
	static uint32_t halfwidth_katakana_letter_ri [] = { 0x30EA };
	static uint32_t halfwidth_katakana_letter_ru [] = { 0x30EB };
	static uint32_t halfwidth_katakana_letter_re [] = { 0x30EC };
	static uint32_t halfwidth_katakana_letter_ro [] = { 0x30ED };
	static uint32_t halfwidth_katakana_letter_wa [] = { 0x30EF };
	static uint32_t halfwidth_katakana_letter_n [] = { 0x30F3 };
	static uint32_t halfwidth_katakana_voiced_sound_mark [] = { 0x3099 };
	static uint32_t halfwidth_katakana_semi_voiced_sound_mark [] = { 0x309A };
	static uint32_t halfwidth_hangul_filler [] = { 0x3164 };
	static uint32_t halfwidth_hangul_letter_kiyeok [] = { 0x3131 };
	static uint32_t halfwidth_hangul_letter_ssangkiyeok [] = { 0x3132 };
	static uint32_t halfwidth_hangul_letter_kiyeok_sios [] = { 0x3133 };
	static uint32_t halfwidth_hangul_letter_nieun [] = { 0x3134 };
	static uint32_t halfwidth_hangul_letter_nieun_cieuc [] = { 0x3135 };
	static uint32_t halfwidth_hangul_letter_nieun_hieuh [] = { 0x3136 };
	static uint32_t halfwidth_hangul_letter_tikeut [] = { 0x3137 };
	static uint32_t halfwidth_hangul_letter_ssangtikeut [] = { 0x3138 };
	static uint32_t halfwidth_hangul_letter_rieul [] = { 0x3139 };
	static uint32_t halfwidth_hangul_letter_rieul_kiyeok [] = { 0x313A };
	static uint32_t halfwidth_hangul_letter_rieul_mieum [] = { 0x313B };
	static uint32_t halfwidth_hangul_letter_rieul_pieup [] = { 0x313C };
	static uint32_t halfwidth_hangul_letter_rieul_sios [] = { 0x313D };
	static uint32_t halfwidth_hangul_letter_rieul_thieuth [] = { 0x313E };
	static uint32_t halfwidth_hangul_letter_rieul_phieuph [] = { 0x313F };
	static uint32_t halfwidth_hangul_letter_rieul_hieuh [] = { 0x3140 };
	static uint32_t halfwidth_hangul_letter_mieum [] = { 0x3141 };
	static uint32_t halfwidth_hangul_letter_pieup [] = { 0x3142 };
	static uint32_t halfwidth_hangul_letter_ssangpieup [] = { 0x3143 };
	static uint32_t halfwidth_hangul_letter_pieup_sios [] = { 0x3144 };
	static uint32_t halfwidth_hangul_letter_sios [] = { 0x3145 };
	static uint32_t halfwidth_hangul_letter_ssangsios [] = { 0x3146 };
	static uint32_t halfwidth_hangul_letter_ieung [] = { 0x3147 };
	static uint32_t halfwidth_hangul_letter_cieuc [] = { 0x3148 };
	static uint32_t halfwidth_hangul_letter_ssangcieuc [] = { 0x3149 };
	static uint32_t halfwidth_hangul_letter_chieuch [] = { 0x314A };
	static uint32_t halfwidth_hangul_letter_khieukh [] = { 0x314B };
	static uint32_t halfwidth_hangul_letter_thieuth [] = { 0x314C };
	static uint32_t halfwidth_hangul_letter_phieuph [] = { 0x314D };
	static uint32_t halfwidth_hangul_letter_hieuh [] = { 0x314E };
	static uint32_t halfwidth_hangul_letter_a [] = { 0x314F };
	static uint32_t halfwidth_hangul_letter_ae [] = { 0x3150 };
	static uint32_t halfwidth_hangul_letter_ya [] = { 0x3151 };
	static uint32_t halfwidth_hangul_letter_yae [] = { 0x3152 };
	static uint32_t halfwidth_hangul_letter_eo [] = { 0x3153 };
	static uint32_t halfwidth_hangul_letter_e [] = { 0x3154 };
	static uint32_t halfwidth_hangul_letter_yeo [] = { 0x3155 };
	static uint32_t halfwidth_hangul_letter_ye [] = { 0x3156 };
	static uint32_t halfwidth_hangul_letter_o [] = { 0x3157 };
	static uint32_t halfwidth_hangul_letter_wa [] = { 0x3158 };
	static uint32_t halfwidth_hangul_letter_wae [] = { 0x3159 };
	static uint32_t halfwidth_hangul_letter_oe [] = { 0x315A };
	static uint32_t halfwidth_hangul_letter_yo [] = { 0x315B };
	static uint32_t halfwidth_hangul_letter_u [] = { 0x315C };
	static uint32_t halfwidth_hangul_letter_weo [] = { 0x315D };
	static uint32_t halfwidth_hangul_letter_we [] = { 0x315E };
	static uint32_t halfwidth_hangul_letter_wi [] = { 0x315F };
	static uint32_t halfwidth_hangul_letter_yu [] = { 0x3160 };
	static uint32_t halfwidth_hangul_letter_eu [] = { 0x3161 };
	static uint32_t halfwidth_hangul_letter_yi [] = { 0x3162 };
	static uint32_t halfwidth_hangul_letter_i [] = { 0x3163 };
	static uint32_t fullwidth_cent_sign [] = { 0x00A2 };
	static uint32_t fullwidth_pound_sign [] = { 0x00A3 };
	static uint32_t fullwidth_not_sign [] = { 0x00AC };
	static uint32_t fullwidth_macron [] = { 0x00AF };
	static uint32_t fullwidth_broken_bar [] = { 0x00A6 };
	static uint32_t fullwidth_yen_sign [] = { 0x00A5 };
	static uint32_t fullwidth_won_sign [] = { 0x20A9 };
	static uint32_t halfwidth_forms_light_vertical [] = { 0x2502 };
	static uint32_t halfwidth_leftwards_arrow [] = { 0x2190 };
	static uint32_t halfwidth_upwards_arrow [] = { 0x2191 };
	static uint32_t halfwidth_rightwards_arrow [] = { 0x2192 };
	static uint32_t halfwidth_downwards_arrow [] = { 0x2193 };
	static uint32_t halfwidth_black_square [] = { 0x25A0 };
	static uint32_t halfwidth_white_circle [] = { 0x25CB };
	static uint32_t kaithi_letter_dddha [] = { 0x11099, 0x110BA };
	static uint32_t kaithi_letter_rha [] = { 0x1109B, 0x110BA };
	static uint32_t kaithi_letter_va [] = { 0x110A5, 0x110BA };
	static uint32_t chakma_vowel_sign_o [] = { 0x11131, 0x11127 };
	static uint32_t chakma_vowel_sign_au [] = { 0x11132, 0x11127 };
	static uint32_t grantha_vowel_sign_oo [] = { 0x11347, 0x1133E };
	static uint32_t grantha_vowel_sign_au [] = { 0x11347, 0x11357 };
	static uint32_t tirhuta_vowel_sign_ai [] = { 0x114B9, 0x114BA };
	static uint32_t tirhuta_vowel_sign_o [] = { 0x114B9, 0x114B0 };
	static uint32_t tirhuta_vowel_sign_au [] = { 0x114B9, 0x114BD };
	static uint32_t siddham_vowel_sign_o [] = { 0x115B8, 0x115AF };
	static uint32_t siddham_vowel_sign_au [] = { 0x115B9, 0x115AF };
	static uint32_t dives_akuru_vowel_sign_o [] = { 0x11935, 0x11930 };
	static uint32_t musical_symbol_half_note [] = { 0x1D157, 0x1D165 };
	static uint32_t musical_symbol_quarter_note [] = { 0x1D158, 0x1D165 };
	static uint32_t musical_symbol_eighth_note [] = { 0x1D15F, 0x1D16E };
	static uint32_t musical_symbol_sixteenth_note [] = { 0x1D15F, 0x1D16F };
	static uint32_t musical_symbol_thirty_second_note [] = { 0x1D15F, 0x1D170 };
	static uint32_t musical_symbol_sixty_fourth_note [] = { 0x1D15F, 0x1D171 };
	static uint32_t musical_symbol_one_hundred_twenty_eighth_note [] = { 0x1D15F, 0x1D172 };
	static uint32_t musical_symbol_minima [] = { 0x1D1B9, 0x1D165 };
	static uint32_t musical_symbol_minima_black [] = { 0x1D1BA, 0x1D165 };
	static uint32_t musical_symbol_semiminima_white [] = { 0x1D1BB, 0x1D16E };
	static uint32_t musical_symbol_semiminima_black [] = { 0x1D1BC, 0x1D16E };
	static uint32_t musical_symbol_fusa_white [] = { 0x1D1BB, 0x1D16F };
	static uint32_t musical_symbol_fusa_black [] = { 0x1D1BC, 0x1D16F };
	static uint32_t mathematical_bold_capital_a [] = { 0x0041 };
	static uint32_t mathematical_bold_capital_b [] = { 0x0042 };
	static uint32_t mathematical_bold_capital_c [] = { 0x0043 };
	static uint32_t mathematical_bold_capital_d [] = { 0x0044 };
	static uint32_t mathematical_bold_capital_e [] = { 0x0045 };
	static uint32_t mathematical_bold_capital_f [] = { 0x0046 };
	static uint32_t mathematical_bold_capital_g [] = { 0x0047 };
	static uint32_t mathematical_bold_capital_h [] = { 0x0048 };
	static uint32_t mathematical_bold_capital_i [] = { 0x0049 };
	static uint32_t mathematical_bold_capital_j [] = { 0x004A };
	static uint32_t mathematical_bold_capital_k [] = { 0x004B };
	static uint32_t mathematical_bold_capital_l [] = { 0x004C };
	static uint32_t mathematical_bold_capital_m [] = { 0x004D };
	static uint32_t mathematical_bold_capital_n [] = { 0x004E };
	static uint32_t mathematical_bold_capital_o [] = { 0x004F };
	static uint32_t mathematical_bold_capital_p [] = { 0x0050 };
	static uint32_t mathematical_bold_capital_q [] = { 0x0051 };
	static uint32_t mathematical_bold_capital_r [] = { 0x0052 };
	static uint32_t mathematical_bold_capital_s [] = { 0x0053 };
	static uint32_t mathematical_bold_capital_t [] = { 0x0054 };
	static uint32_t mathematical_bold_capital_u [] = { 0x0055 };
	static uint32_t mathematical_bold_capital_v [] = { 0x0056 };
	static uint32_t mathematical_bold_capital_w [] = { 0x0057 };
	static uint32_t mathematical_bold_capital_x [] = { 0x0058 };
	static uint32_t mathematical_bold_capital_y [] = { 0x0059 };
	static uint32_t mathematical_bold_capital_z [] = { 0x005A };
	static uint32_t mathematical_bold_small_a [] = { 0x0061 };
	static uint32_t mathematical_bold_small_b [] = { 0x0062 };
	static uint32_t mathematical_bold_small_c [] = { 0x0063 };
	static uint32_t mathematical_bold_small_d [] = { 0x0064 };
	static uint32_t mathematical_bold_small_e [] = { 0x0065 };
	static uint32_t mathematical_bold_small_f [] = { 0x0066 };
	static uint32_t mathematical_bold_small_g [] = { 0x0067 };
	static uint32_t mathematical_bold_small_h [] = { 0x0068 };
	static uint32_t mathematical_bold_small_i [] = { 0x0069 };
	static uint32_t mathematical_bold_small_j [] = { 0x006A };
	static uint32_t mathematical_bold_small_k [] = { 0x006B };
	static uint32_t mathematical_bold_small_l [] = { 0x006C };
	static uint32_t mathematical_bold_small_m [] = { 0x006D };
	static uint32_t mathematical_bold_small_n [] = { 0x006E };
	static uint32_t mathematical_bold_small_o [] = { 0x006F };
	static uint32_t mathematical_bold_small_p [] = { 0x0070 };
	static uint32_t mathematical_bold_small_q [] = { 0x0071 };
	static uint32_t mathematical_bold_small_r [] = { 0x0072 };
	static uint32_t mathematical_bold_small_s [] = { 0x0073 };
	static uint32_t mathematical_bold_small_t [] = { 0x0074 };
	static uint32_t mathematical_bold_small_u [] = { 0x0075 };
	static uint32_t mathematical_bold_small_v [] = { 0x0076 };
	static uint32_t mathematical_bold_small_w [] = { 0x0077 };
	static uint32_t mathematical_bold_small_x [] = { 0x0078 };
	static uint32_t mathematical_bold_small_y [] = { 0x0079 };
	static uint32_t mathematical_bold_small_z [] = { 0x007A };
	static uint32_t mathematical_italic_capital_a [] = { 0x0041 };
	static uint32_t mathematical_italic_capital_b [] = { 0x0042 };
	static uint32_t mathematical_italic_capital_c [] = { 0x0043 };
	static uint32_t mathematical_italic_capital_d [] = { 0x0044 };
	static uint32_t mathematical_italic_capital_e [] = { 0x0045 };
	static uint32_t mathematical_italic_capital_f [] = { 0x0046 };
	static uint32_t mathematical_italic_capital_g [] = { 0x0047 };
	static uint32_t mathematical_italic_capital_h [] = { 0x0048 };
	static uint32_t mathematical_italic_capital_i [] = { 0x0049 };
	static uint32_t mathematical_italic_capital_j [] = { 0x004A };
	static uint32_t mathematical_italic_capital_k [] = { 0x004B };
	static uint32_t mathematical_italic_capital_l [] = { 0x004C };
	static uint32_t mathematical_italic_capital_m [] = { 0x004D };
	static uint32_t mathematical_italic_capital_n [] = { 0x004E };
	static uint32_t mathematical_italic_capital_o [] = { 0x004F };
	static uint32_t mathematical_italic_capital_p [] = { 0x0050 };
	static uint32_t mathematical_italic_capital_q [] = { 0x0051 };
	static uint32_t mathematical_italic_capital_r [] = { 0x0052 };
	static uint32_t mathematical_italic_capital_s [] = { 0x0053 };
	static uint32_t mathematical_italic_capital_t [] = { 0x0054 };
	static uint32_t mathematical_italic_capital_u [] = { 0x0055 };
	static uint32_t mathematical_italic_capital_v [] = { 0x0056 };
	static uint32_t mathematical_italic_capital_w [] = { 0x0057 };
	static uint32_t mathematical_italic_capital_x [] = { 0x0058 };
	static uint32_t mathematical_italic_capital_y [] = { 0x0059 };
	static uint32_t mathematical_italic_capital_z [] = { 0x005A };
	static uint32_t mathematical_italic_small_a [] = { 0x0061 };
	static uint32_t mathematical_italic_small_b [] = { 0x0062 };
	static uint32_t mathematical_italic_small_c [] = { 0x0063 };
	static uint32_t mathematical_italic_small_d [] = { 0x0064 };
	static uint32_t mathematical_italic_small_e [] = { 0x0065 };
	static uint32_t mathematical_italic_small_f [] = { 0x0066 };
	static uint32_t mathematical_italic_small_g [] = { 0x0067 };
	static uint32_t mathematical_italic_small_i [] = { 0x0069 };
	static uint32_t mathematical_italic_small_j [] = { 0x006A };
	static uint32_t mathematical_italic_small_k [] = { 0x006B };
	static uint32_t mathematical_italic_small_l [] = { 0x006C };
	static uint32_t mathematical_italic_small_m [] = { 0x006D };
	static uint32_t mathematical_italic_small_n [] = { 0x006E };
	static uint32_t mathematical_italic_small_o [] = { 0x006F };
	static uint32_t mathematical_italic_small_p [] = { 0x0070 };
	static uint32_t mathematical_italic_small_q [] = { 0x0071 };
	static uint32_t mathematical_italic_small_r [] = { 0x0072 };
	static uint32_t mathematical_italic_small_s [] = { 0x0073 };
	static uint32_t mathematical_italic_small_t [] = { 0x0074 };
	static uint32_t mathematical_italic_small_u [] = { 0x0075 };
	static uint32_t mathematical_italic_small_v [] = { 0x0076 };
	static uint32_t mathematical_italic_small_w [] = { 0x0077 };
	static uint32_t mathematical_italic_small_x [] = { 0x0078 };
	static uint32_t mathematical_italic_small_y [] = { 0x0079 };
	static uint32_t mathematical_italic_small_z [] = { 0x007A };
	static uint32_t mathematical_bold_italic_capital_a [] = { 0x0041 };
	static uint32_t mathematical_bold_italic_capital_b [] = { 0x0042 };
	static uint32_t mathematical_bold_italic_capital_c [] = { 0x0043 };
	static uint32_t mathematical_bold_italic_capital_d [] = { 0x0044 };
	static uint32_t mathematical_bold_italic_capital_e [] = { 0x0045 };
	static uint32_t mathematical_bold_italic_capital_f [] = { 0x0046 };
	static uint32_t mathematical_bold_italic_capital_g [] = { 0x0047 };
	static uint32_t mathematical_bold_italic_capital_h [] = { 0x0048 };
	static uint32_t mathematical_bold_italic_capital_i [] = { 0x0049 };
	static uint32_t mathematical_bold_italic_capital_j [] = { 0x004A };
	static uint32_t mathematical_bold_italic_capital_k [] = { 0x004B };
	static uint32_t mathematical_bold_italic_capital_l [] = { 0x004C };
	static uint32_t mathematical_bold_italic_capital_m [] = { 0x004D };
	static uint32_t mathematical_bold_italic_capital_n [] = { 0x004E };
	static uint32_t mathematical_bold_italic_capital_o [] = { 0x004F };
	static uint32_t mathematical_bold_italic_capital_p [] = { 0x0050 };
	static uint32_t mathematical_bold_italic_capital_q [] = { 0x0051 };
	static uint32_t mathematical_bold_italic_capital_r [] = { 0x0052 };
	static uint32_t mathematical_bold_italic_capital_s [] = { 0x0053 };
	static uint32_t mathematical_bold_italic_capital_t [] = { 0x0054 };
	static uint32_t mathematical_bold_italic_capital_u [] = { 0x0055 };
	static uint32_t mathematical_bold_italic_capital_v [] = { 0x0056 };
	static uint32_t mathematical_bold_italic_capital_w [] = { 0x0057 };
	static uint32_t mathematical_bold_italic_capital_x [] = { 0x0058 };
	static uint32_t mathematical_bold_italic_capital_y [] = { 0x0059 };
	static uint32_t mathematical_bold_italic_capital_z [] = { 0x005A };
	static uint32_t mathematical_bold_italic_small_a [] = { 0x0061 };
	static uint32_t mathematical_bold_italic_small_b [] = { 0x0062 };
	static uint32_t mathematical_bold_italic_small_c [] = { 0x0063 };
	static uint32_t mathematical_bold_italic_small_d [] = { 0x0064 };
	static uint32_t mathematical_bold_italic_small_e [] = { 0x0065 };
	static uint32_t mathematical_bold_italic_small_f [] = { 0x0066 };
	static uint32_t mathematical_bold_italic_small_g [] = { 0x0067 };
	static uint32_t mathematical_bold_italic_small_h [] = { 0x0068 };
	static uint32_t mathematical_bold_italic_small_i [] = { 0x0069 };
	static uint32_t mathematical_bold_italic_small_j [] = { 0x006A };
	static uint32_t mathematical_bold_italic_small_k [] = { 0x006B };
	static uint32_t mathematical_bold_italic_small_l [] = { 0x006C };
	static uint32_t mathematical_bold_italic_small_m [] = { 0x006D };
	static uint32_t mathematical_bold_italic_small_n [] = { 0x006E };
	static uint32_t mathematical_bold_italic_small_o [] = { 0x006F };
	static uint32_t mathematical_bold_italic_small_p [] = { 0x0070 };
	static uint32_t mathematical_bold_italic_small_q [] = { 0x0071 };
	static uint32_t mathematical_bold_italic_small_r [] = { 0x0072 };
	static uint32_t mathematical_bold_italic_small_s [] = { 0x0073 };
	static uint32_t mathematical_bold_italic_small_t [] = { 0x0074 };
	static uint32_t mathematical_bold_italic_small_u [] = { 0x0075 };
	static uint32_t mathematical_bold_italic_small_v [] = { 0x0076 };
	static uint32_t mathematical_bold_italic_small_w [] = { 0x0077 };
	static uint32_t mathematical_bold_italic_small_x [] = { 0x0078 };
	static uint32_t mathematical_bold_italic_small_y [] = { 0x0079 };
	static uint32_t mathematical_bold_italic_small_z [] = { 0x007A };
	static uint32_t mathematical_script_capital_a [] = { 0x0041 };
	static uint32_t mathematical_script_capital_c [] = { 0x0043 };
	static uint32_t mathematical_script_capital_d [] = { 0x0044 };
	static uint32_t mathematical_script_capital_g [] = { 0x0047 };
	static uint32_t mathematical_script_capital_j [] = { 0x004A };
	static uint32_t mathematical_script_capital_k [] = { 0x004B };
	static uint32_t mathematical_script_capital_n [] = { 0x004E };
	static uint32_t mathematical_script_capital_o [] = { 0x004F };
	static uint32_t mathematical_script_capital_p [] = { 0x0050 };
	static uint32_t mathematical_script_capital_q [] = { 0x0051 };
	static uint32_t mathematical_script_capital_s [] = { 0x0053 };
	static uint32_t mathematical_script_capital_t [] = { 0x0054 };
	static uint32_t mathematical_script_capital_u [] = { 0x0055 };
	static uint32_t mathematical_script_capital_v [] = { 0x0056 };
	static uint32_t mathematical_script_capital_w [] = { 0x0057 };
	static uint32_t mathematical_script_capital_x [] = { 0x0058 };
	static uint32_t mathematical_script_capital_y [] = { 0x0059 };
	static uint32_t mathematical_script_capital_z [] = { 0x005A };
	static uint32_t mathematical_script_small_a [] = { 0x0061 };
	static uint32_t mathematical_script_small_b [] = { 0x0062 };
	static uint32_t mathematical_script_small_c [] = { 0x0063 };
	static uint32_t mathematical_script_small_d [] = { 0x0064 };
	static uint32_t mathematical_script_small_f [] = { 0x0066 };
	static uint32_t mathematical_script_small_h [] = { 0x0068 };
	static uint32_t mathematical_script_small_i [] = { 0x0069 };
	static uint32_t mathematical_script_small_j [] = { 0x006A };
	static uint32_t mathematical_script_small_k [] = { 0x006B };
	static uint32_t mathematical_script_small_l [] = { 0x006C };
	static uint32_t mathematical_script_small_m [] = { 0x006D };
	static uint32_t mathematical_script_small_n [] = { 0x006E };
	static uint32_t mathematical_script_small_p [] = { 0x0070 };
	static uint32_t mathematical_script_small_q [] = { 0x0071 };
	static uint32_t mathematical_script_small_r [] = { 0x0072 };
	static uint32_t mathematical_script_small_s [] = { 0x0073 };
	static uint32_t mathematical_script_small_t [] = { 0x0074 };
	static uint32_t mathematical_script_small_u [] = { 0x0075 };
	static uint32_t mathematical_script_small_v [] = { 0x0076 };
	static uint32_t mathematical_script_small_w [] = { 0x0077 };
	static uint32_t mathematical_script_small_x [] = { 0x0078 };
	static uint32_t mathematical_script_small_y [] = { 0x0079 };
	static uint32_t mathematical_script_small_z [] = { 0x007A };
	static uint32_t mathematical_bold_script_capital_a [] = { 0x0041 };
	static uint32_t mathematical_bold_script_capital_b [] = { 0x0042 };
	static uint32_t mathematical_bold_script_capital_c [] = { 0x0043 };
	static uint32_t mathematical_bold_script_capital_d [] = { 0x0044 };
	static uint32_t mathematical_bold_script_capital_e [] = { 0x0045 };
	static uint32_t mathematical_bold_script_capital_f [] = { 0x0046 };
	static uint32_t mathematical_bold_script_capital_g [] = { 0x0047 };
	static uint32_t mathematical_bold_script_capital_h [] = { 0x0048 };
	static uint32_t mathematical_bold_script_capital_i [] = { 0x0049 };
	static uint32_t mathematical_bold_script_capital_j [] = { 0x004A };
	static uint32_t mathematical_bold_script_capital_k [] = { 0x004B };
	static uint32_t mathematical_bold_script_capital_l [] = { 0x004C };
	static uint32_t mathematical_bold_script_capital_m [] = { 0x004D };
	static uint32_t mathematical_bold_script_capital_n [] = { 0x004E };
	static uint32_t mathematical_bold_script_capital_o [] = { 0x004F };
	static uint32_t mathematical_bold_script_capital_p [] = { 0x0050 };
	static uint32_t mathematical_bold_script_capital_q [] = { 0x0051 };
	static uint32_t mathematical_bold_script_capital_r [] = { 0x0052 };
	static uint32_t mathematical_bold_script_capital_s [] = { 0x0053 };
	static uint32_t mathematical_bold_script_capital_t [] = { 0x0054 };
	static uint32_t mathematical_bold_script_capital_u [] = { 0x0055 };
	static uint32_t mathematical_bold_script_capital_v [] = { 0x0056 };
	static uint32_t mathematical_bold_script_capital_w [] = { 0x0057 };
	static uint32_t mathematical_bold_script_capital_x [] = { 0x0058 };
	static uint32_t mathematical_bold_script_capital_y [] = { 0x0059 };
	static uint32_t mathematical_bold_script_capital_z [] = { 0x005A };
	static uint32_t mathematical_bold_script_small_a [] = { 0x0061 };
	static uint32_t mathematical_bold_script_small_b [] = { 0x0062 };
	static uint32_t mathematical_bold_script_small_c [] = { 0x0063 };
	static uint32_t mathematical_bold_script_small_d [] = { 0x0064 };
	static uint32_t mathematical_bold_script_small_e [] = { 0x0065 };
	static uint32_t mathematical_bold_script_small_f [] = { 0x0066 };
	static uint32_t mathematical_bold_script_small_g [] = { 0x0067 };
	static uint32_t mathematical_bold_script_small_h [] = { 0x0068 };
	static uint32_t mathematical_bold_script_small_i [] = { 0x0069 };
	static uint32_t mathematical_bold_script_small_j [] = { 0x006A };
	static uint32_t mathematical_bold_script_small_k [] = { 0x006B };
	static uint32_t mathematical_bold_script_small_l [] = { 0x006C };
	static uint32_t mathematical_bold_script_small_m [] = { 0x006D };
	static uint32_t mathematical_bold_script_small_n [] = { 0x006E };
	static uint32_t mathematical_bold_script_small_o [] = { 0x006F };
	static uint32_t mathematical_bold_script_small_p [] = { 0x0070 };
	static uint32_t mathematical_bold_script_small_q [] = { 0x0071 };
	static uint32_t mathematical_bold_script_small_r [] = { 0x0072 };
	static uint32_t mathematical_bold_script_small_s [] = { 0x0073 };
	static uint32_t mathematical_bold_script_small_t [] = { 0x0074 };
	static uint32_t mathematical_bold_script_small_u [] = { 0x0075 };
	static uint32_t mathematical_bold_script_small_v [] = { 0x0076 };
	static uint32_t mathematical_bold_script_small_w [] = { 0x0077 };
	static uint32_t mathematical_bold_script_small_x [] = { 0x0078 };
	static uint32_t mathematical_bold_script_small_y [] = { 0x0079 };
	static uint32_t mathematical_bold_script_small_z [] = { 0x007A };
	static uint32_t mathematical_fraktur_capital_a [] = { 0x0041 };
	static uint32_t mathematical_fraktur_capital_b [] = { 0x0042 };
	static uint32_t mathematical_fraktur_capital_d [] = { 0x0044 };
	static uint32_t mathematical_fraktur_capital_e [] = { 0x0045 };
	static uint32_t mathematical_fraktur_capital_f [] = { 0x0046 };
	static uint32_t mathematical_fraktur_capital_g [] = { 0x0047 };
	static uint32_t mathematical_fraktur_capital_j [] = { 0x004A };
	static uint32_t mathematical_fraktur_capital_k [] = { 0x004B };
	static uint32_t mathematical_fraktur_capital_l [] = { 0x004C };
	static uint32_t mathematical_fraktur_capital_m [] = { 0x004D };
	static uint32_t mathematical_fraktur_capital_n [] = { 0x004E };
	static uint32_t mathematical_fraktur_capital_o [] = { 0x004F };
	static uint32_t mathematical_fraktur_capital_p [] = { 0x0050 };
	static uint32_t mathematical_fraktur_capital_q [] = { 0x0051 };
	static uint32_t mathematical_fraktur_capital_s [] = { 0x0053 };
	static uint32_t mathematical_fraktur_capital_t [] = { 0x0054 };
	static uint32_t mathematical_fraktur_capital_u [] = { 0x0055 };
	static uint32_t mathematical_fraktur_capital_v [] = { 0x0056 };
	static uint32_t mathematical_fraktur_capital_w [] = { 0x0057 };
	static uint32_t mathematical_fraktur_capital_x [] = { 0x0058 };
	static uint32_t mathematical_fraktur_capital_y [] = { 0x0059 };
	static uint32_t mathematical_fraktur_small_a [] = { 0x0061 };
	static uint32_t mathematical_fraktur_small_b [] = { 0x0062 };
	static uint32_t mathematical_fraktur_small_c [] = { 0x0063 };
	static uint32_t mathematical_fraktur_small_d [] = { 0x0064 };
	static uint32_t mathematical_fraktur_small_e [] = { 0x0065 };
	static uint32_t mathematical_fraktur_small_f [] = { 0x0066 };
	static uint32_t mathematical_fraktur_small_g [] = { 0x0067 };
	static uint32_t mathematical_fraktur_small_h [] = { 0x0068 };
	static uint32_t mathematical_fraktur_small_i [] = { 0x0069 };
	static uint32_t mathematical_fraktur_small_j [] = { 0x006A };
	static uint32_t mathematical_fraktur_small_k [] = { 0x006B };
	static uint32_t mathematical_fraktur_small_l [] = { 0x006C };
	static uint32_t mathematical_fraktur_small_m [] = { 0x006D };
	static uint32_t mathematical_fraktur_small_n [] = { 0x006E };
	static uint32_t mathematical_fraktur_small_o [] = { 0x006F };
	static uint32_t mathematical_fraktur_small_p [] = { 0x0070 };
	static uint32_t mathematical_fraktur_small_q [] = { 0x0071 };
	static uint32_t mathematical_fraktur_small_r [] = { 0x0072 };
	static uint32_t mathematical_fraktur_small_s [] = { 0x0073 };
	static uint32_t mathematical_fraktur_small_t [] = { 0x0074 };
	static uint32_t mathematical_fraktur_small_u [] = { 0x0075 };
	static uint32_t mathematical_fraktur_small_v [] = { 0x0076 };
	static uint32_t mathematical_fraktur_small_w [] = { 0x0077 };
	static uint32_t mathematical_fraktur_small_x [] = { 0x0078 };
	static uint32_t mathematical_fraktur_small_y [] = { 0x0079 };
	static uint32_t mathematical_fraktur_small_z [] = { 0x007A };
	static uint32_t mathematical_double_struck_capital_a [] = { 0x0041 };
	static uint32_t mathematical_double_struck_capital_b [] = { 0x0042 };
	static uint32_t mathematical_double_struck_capital_d [] = { 0x0044 };
	static uint32_t mathematical_double_struck_capital_e [] = { 0x0045 };
	static uint32_t mathematical_double_struck_capital_f [] = { 0x0046 };
	static uint32_t mathematical_double_struck_capital_g [] = { 0x0047 };
	static uint32_t mathematical_double_struck_capital_i [] = { 0x0049 };
	static uint32_t mathematical_double_struck_capital_j [] = { 0x004A };
	static uint32_t mathematical_double_struck_capital_k [] = { 0x004B };
	static uint32_t mathematical_double_struck_capital_l [] = { 0x004C };
	static uint32_t mathematical_double_struck_capital_m [] = { 0x004D };
	static uint32_t mathematical_double_struck_capital_o [] = { 0x004F };
	static uint32_t mathematical_double_struck_capital_s [] = { 0x0053 };
	static uint32_t mathematical_double_struck_capital_t [] = { 0x0054 };
	static uint32_t mathematical_double_struck_capital_u [] = { 0x0055 };
	static uint32_t mathematical_double_struck_capital_v [] = { 0x0056 };
	static uint32_t mathematical_double_struck_capital_w [] = { 0x0057 };
	static uint32_t mathematical_double_struck_capital_x [] = { 0x0058 };
	static uint32_t mathematical_double_struck_capital_y [] = { 0x0059 };
	static uint32_t mathematical_double_struck_small_a [] = { 0x0061 };
	static uint32_t mathematical_double_struck_small_b [] = { 0x0062 };
	static uint32_t mathematical_double_struck_small_c [] = { 0x0063 };
	static uint32_t mathematical_double_struck_small_d [] = { 0x0064 };
	static uint32_t mathematical_double_struck_small_e [] = { 0x0065 };
	static uint32_t mathematical_double_struck_small_f [] = { 0x0066 };
	static uint32_t mathematical_double_struck_small_g [] = { 0x0067 };
	static uint32_t mathematical_double_struck_small_h [] = { 0x0068 };
	static uint32_t mathematical_double_struck_small_i [] = { 0x0069 };
	static uint32_t mathematical_double_struck_small_j [] = { 0x006A };
	static uint32_t mathematical_double_struck_small_k [] = { 0x006B };
	static uint32_t mathematical_double_struck_small_l [] = { 0x006C };
	static uint32_t mathematical_double_struck_small_m [] = { 0x006D };
	static uint32_t mathematical_double_struck_small_n [] = { 0x006E };
	static uint32_t mathematical_double_struck_small_o [] = { 0x006F };
	static uint32_t mathematical_double_struck_small_p [] = { 0x0070 };
	static uint32_t mathematical_double_struck_small_q [] = { 0x0071 };
	static uint32_t mathematical_double_struck_small_r [] = { 0x0072 };
	static uint32_t mathematical_double_struck_small_s [] = { 0x0073 };
	static uint32_t mathematical_double_struck_small_t [] = { 0x0074 };
	static uint32_t mathematical_double_struck_small_u [] = { 0x0075 };
	static uint32_t mathematical_double_struck_small_v [] = { 0x0076 };
	static uint32_t mathematical_double_struck_small_w [] = { 0x0077 };
	static uint32_t mathematical_double_struck_small_x [] = { 0x0078 };
	static uint32_t mathematical_double_struck_small_y [] = { 0x0079 };
	static uint32_t mathematical_double_struck_small_z [] = { 0x007A };
	static uint32_t mathematical_bold_fraktur_capital_a [] = { 0x0041 };
	static uint32_t mathematical_bold_fraktur_capital_b [] = { 0x0042 };
	static uint32_t mathematical_bold_fraktur_capital_c [] = { 0x0043 };
	static uint32_t mathematical_bold_fraktur_capital_d [] = { 0x0044 };
	static uint32_t mathematical_bold_fraktur_capital_e [] = { 0x0045 };
	static uint32_t mathematical_bold_fraktur_capital_f [] = { 0x0046 };
	static uint32_t mathematical_bold_fraktur_capital_g [] = { 0x0047 };
	static uint32_t mathematical_bold_fraktur_capital_h [] = { 0x0048 };
	static uint32_t mathematical_bold_fraktur_capital_i [] = { 0x0049 };
	static uint32_t mathematical_bold_fraktur_capital_j [] = { 0x004A };
	static uint32_t mathematical_bold_fraktur_capital_k [] = { 0x004B };
	static uint32_t mathematical_bold_fraktur_capital_l [] = { 0x004C };
	static uint32_t mathematical_bold_fraktur_capital_m [] = { 0x004D };
	static uint32_t mathematical_bold_fraktur_capital_n [] = { 0x004E };
	static uint32_t mathematical_bold_fraktur_capital_o [] = { 0x004F };
	static uint32_t mathematical_bold_fraktur_capital_p [] = { 0x0050 };
	static uint32_t mathematical_bold_fraktur_capital_q [] = { 0x0051 };
	static uint32_t mathematical_bold_fraktur_capital_r [] = { 0x0052 };
	static uint32_t mathematical_bold_fraktur_capital_s [] = { 0x0053 };
	static uint32_t mathematical_bold_fraktur_capital_t [] = { 0x0054 };
	static uint32_t mathematical_bold_fraktur_capital_u [] = { 0x0055 };
	static uint32_t mathematical_bold_fraktur_capital_v [] = { 0x0056 };
	static uint32_t mathematical_bold_fraktur_capital_w [] = { 0x0057 };
	static uint32_t mathematical_bold_fraktur_capital_x [] = { 0x0058 };
	static uint32_t mathematical_bold_fraktur_capital_y [] = { 0x0059 };
	static uint32_t mathematical_bold_fraktur_capital_z [] = { 0x005A };
	static uint32_t mathematical_bold_fraktur_small_a [] = { 0x0061 };
	static uint32_t mathematical_bold_fraktur_small_b [] = { 0x0062 };
	static uint32_t mathematical_bold_fraktur_small_c [] = { 0x0063 };
	static uint32_t mathematical_bold_fraktur_small_d [] = { 0x0064 };
	static uint32_t mathematical_bold_fraktur_small_e [] = { 0x0065 };
	static uint32_t mathematical_bold_fraktur_small_f [] = { 0x0066 };
	static uint32_t mathematical_bold_fraktur_small_g [] = { 0x0067 };
	static uint32_t mathematical_bold_fraktur_small_h [] = { 0x0068 };
	static uint32_t mathematical_bold_fraktur_small_i [] = { 0x0069 };
	static uint32_t mathematical_bold_fraktur_small_j [] = { 0x006A };
	static uint32_t mathematical_bold_fraktur_small_k [] = { 0x006B };
	static uint32_t mathematical_bold_fraktur_small_l [] = { 0x006C };
	static uint32_t mathematical_bold_fraktur_small_m [] = { 0x006D };
	static uint32_t mathematical_bold_fraktur_small_n [] = { 0x006E };
	static uint32_t mathematical_bold_fraktur_small_o [] = { 0x006F };
	static uint32_t mathematical_bold_fraktur_small_p [] = { 0x0070 };
	static uint32_t mathematical_bold_fraktur_small_q [] = { 0x0071 };
	static uint32_t mathematical_bold_fraktur_small_r [] = { 0x0072 };
	static uint32_t mathematical_bold_fraktur_small_s [] = { 0x0073 };
	static uint32_t mathematical_bold_fraktur_small_t [] = { 0x0074 };
	static uint32_t mathematical_bold_fraktur_small_u [] = { 0x0075 };
	static uint32_t mathematical_bold_fraktur_small_v [] = { 0x0076 };
	static uint32_t mathematical_bold_fraktur_small_w [] = { 0x0077 };
	static uint32_t mathematical_bold_fraktur_small_x [] = { 0x0078 };
	static uint32_t mathematical_bold_fraktur_small_y [] = { 0x0079 };
	static uint32_t mathematical_bold_fraktur_small_z [] = { 0x007A };
	static uint32_t mathematical_sans_serif_capital_a [] = { 0x0041 };
	static uint32_t mathematical_sans_serif_capital_b [] = { 0x0042 };
	static uint32_t mathematical_sans_serif_capital_c [] = { 0x0043 };
	static uint32_t mathematical_sans_serif_capital_d [] = { 0x0044 };
	static uint32_t mathematical_sans_serif_capital_e [] = { 0x0045 };
	static uint32_t mathematical_sans_serif_capital_f [] = { 0x0046 };
	static uint32_t mathematical_sans_serif_capital_g [] = { 0x0047 };
	static uint32_t mathematical_sans_serif_capital_h [] = { 0x0048 };
	static uint32_t mathematical_sans_serif_capital_i [] = { 0x0049 };
	static uint32_t mathematical_sans_serif_capital_j [] = { 0x004A };
	static uint32_t mathematical_sans_serif_capital_k [] = { 0x004B };
	static uint32_t mathematical_sans_serif_capital_l [] = { 0x004C };
	static uint32_t mathematical_sans_serif_capital_m [] = { 0x004D };
	static uint32_t mathematical_sans_serif_capital_n [] = { 0x004E };
	static uint32_t mathematical_sans_serif_capital_o [] = { 0x004F };
	static uint32_t mathematical_sans_serif_capital_p [] = { 0x0050 };
	static uint32_t mathematical_sans_serif_capital_q [] = { 0x0051 };
	static uint32_t mathematical_sans_serif_capital_r [] = { 0x0052 };
	static uint32_t mathematical_sans_serif_capital_s [] = { 0x0053 };
	static uint32_t mathematical_sans_serif_capital_t [] = { 0x0054 };
	static uint32_t mathematical_sans_serif_capital_u [] = { 0x0055 };
	static uint32_t mathematical_sans_serif_capital_v [] = { 0x0056 };
	static uint32_t mathematical_sans_serif_capital_w [] = { 0x0057 };
	static uint32_t mathematical_sans_serif_capital_x [] = { 0x0058 };
	static uint32_t mathematical_sans_serif_capital_y [] = { 0x0059 };
	static uint32_t mathematical_sans_serif_capital_z [] = { 0x005A };
	static uint32_t mathematical_sans_serif_small_a [] = { 0x0061 };
	static uint32_t mathematical_sans_serif_small_b [] = { 0x0062 };
	static uint32_t mathematical_sans_serif_small_c [] = { 0x0063 };
	static uint32_t mathematical_sans_serif_small_d [] = { 0x0064 };
	static uint32_t mathematical_sans_serif_small_e [] = { 0x0065 };
	static uint32_t mathematical_sans_serif_small_f [] = { 0x0066 };
	static uint32_t mathematical_sans_serif_small_g [] = { 0x0067 };
	static uint32_t mathematical_sans_serif_small_h [] = { 0x0068 };
	static uint32_t mathematical_sans_serif_small_i [] = { 0x0069 };
	static uint32_t mathematical_sans_serif_small_j [] = { 0x006A };
	static uint32_t mathematical_sans_serif_small_k [] = { 0x006B };
	static uint32_t mathematical_sans_serif_small_l [] = { 0x006C };
	static uint32_t mathematical_sans_serif_small_m [] = { 0x006D };
	static uint32_t mathematical_sans_serif_small_n [] = { 0x006E };
	static uint32_t mathematical_sans_serif_small_o [] = { 0x006F };
	static uint32_t mathematical_sans_serif_small_p [] = { 0x0070 };
	static uint32_t mathematical_sans_serif_small_q [] = { 0x0071 };
	static uint32_t mathematical_sans_serif_small_r [] = { 0x0072 };
	static uint32_t mathematical_sans_serif_small_s [] = { 0x0073 };
	static uint32_t mathematical_sans_serif_small_t [] = { 0x0074 };
	static uint32_t mathematical_sans_serif_small_u [] = { 0x0075 };
	static uint32_t mathematical_sans_serif_small_v [] = { 0x0076 };
	static uint32_t mathematical_sans_serif_small_w [] = { 0x0077 };
	static uint32_t mathematical_sans_serif_small_x [] = { 0x0078 };
	static uint32_t mathematical_sans_serif_small_y [] = { 0x0079 };
	static uint32_t mathematical_sans_serif_small_z [] = { 0x007A };
	static uint32_t mathematical_sans_serif_bold_capital_a [] = { 0x0041 };
	static uint32_t mathematical_sans_serif_bold_capital_b [] = { 0x0042 };
	static uint32_t mathematical_sans_serif_bold_capital_c [] = { 0x0043 };
	static uint32_t mathematical_sans_serif_bold_capital_d [] = { 0x0044 };
	static uint32_t mathematical_sans_serif_bold_capital_e [] = { 0x0045 };
	static uint32_t mathematical_sans_serif_bold_capital_f [] = { 0x0046 };
	static uint32_t mathematical_sans_serif_bold_capital_g [] = { 0x0047 };
	static uint32_t mathematical_sans_serif_bold_capital_h [] = { 0x0048 };
	static uint32_t mathematical_sans_serif_bold_capital_i [] = { 0x0049 };
	static uint32_t mathematical_sans_serif_bold_capital_j [] = { 0x004A };
	static uint32_t mathematical_sans_serif_bold_capital_k [] = { 0x004B };
	static uint32_t mathematical_sans_serif_bold_capital_l [] = { 0x004C };
	static uint32_t mathematical_sans_serif_bold_capital_m [] = { 0x004D };
	static uint32_t mathematical_sans_serif_bold_capital_n [] = { 0x004E };
	static uint32_t mathematical_sans_serif_bold_capital_o [] = { 0x004F };
	static uint32_t mathematical_sans_serif_bold_capital_p [] = { 0x0050 };
	static uint32_t mathematical_sans_serif_bold_capital_q [] = { 0x0051 };
	static uint32_t mathematical_sans_serif_bold_capital_r [] = { 0x0052 };
	static uint32_t mathematical_sans_serif_bold_capital_s [] = { 0x0053 };
	static uint32_t mathematical_sans_serif_bold_capital_t [] = { 0x0054 };
	static uint32_t mathematical_sans_serif_bold_capital_u [] = { 0x0055 };
	static uint32_t mathematical_sans_serif_bold_capital_v [] = { 0x0056 };
	static uint32_t mathematical_sans_serif_bold_capital_w [] = { 0x0057 };
	static uint32_t mathematical_sans_serif_bold_capital_x [] = { 0x0058 };
	static uint32_t mathematical_sans_serif_bold_capital_y [] = { 0x0059 };
	static uint32_t mathematical_sans_serif_bold_capital_z [] = { 0x005A };
	static uint32_t mathematical_sans_serif_bold_small_a [] = { 0x0061 };
	static uint32_t mathematical_sans_serif_bold_small_b [] = { 0x0062 };
	static uint32_t mathematical_sans_serif_bold_small_c [] = { 0x0063 };
	static uint32_t mathematical_sans_serif_bold_small_d [] = { 0x0064 };
	static uint32_t mathematical_sans_serif_bold_small_e [] = { 0x0065 };
	static uint32_t mathematical_sans_serif_bold_small_f [] = { 0x0066 };
	static uint32_t mathematical_sans_serif_bold_small_g [] = { 0x0067 };
	static uint32_t mathematical_sans_serif_bold_small_h [] = { 0x0068 };
	static uint32_t mathematical_sans_serif_bold_small_i [] = { 0x0069 };
	static uint32_t mathematical_sans_serif_bold_small_j [] = { 0x006A };
	static uint32_t mathematical_sans_serif_bold_small_k [] = { 0x006B };
	static uint32_t mathematical_sans_serif_bold_small_l [] = { 0x006C };
	static uint32_t mathematical_sans_serif_bold_small_m [] = { 0x006D };
	static uint32_t mathematical_sans_serif_bold_small_n [] = { 0x006E };
	static uint32_t mathematical_sans_serif_bold_small_o [] = { 0x006F };
	static uint32_t mathematical_sans_serif_bold_small_p [] = { 0x0070 };
	static uint32_t mathematical_sans_serif_bold_small_q [] = { 0x0071 };
	static uint32_t mathematical_sans_serif_bold_small_r [] = { 0x0072 };
	static uint32_t mathematical_sans_serif_bold_small_s [] = { 0x0073 };
	static uint32_t mathematical_sans_serif_bold_small_t [] = { 0x0074 };
	static uint32_t mathematical_sans_serif_bold_small_u [] = { 0x0075 };
	static uint32_t mathematical_sans_serif_bold_small_v [] = { 0x0076 };
	static uint32_t mathematical_sans_serif_bold_small_w [] = { 0x0077 };
	static uint32_t mathematical_sans_serif_bold_small_x [] = { 0x0078 };
	static uint32_t mathematical_sans_serif_bold_small_y [] = { 0x0079 };
	static uint32_t mathematical_sans_serif_bold_small_z [] = { 0x007A };
	static uint32_t mathematical_sans_serif_italic_capital_a [] = { 0x0041 };
	static uint32_t mathematical_sans_serif_italic_capital_b [] = { 0x0042 };
	static uint32_t mathematical_sans_serif_italic_capital_c [] = { 0x0043 };
	static uint32_t mathematical_sans_serif_italic_capital_d [] = { 0x0044 };
	static uint32_t mathematical_sans_serif_italic_capital_e [] = { 0x0045 };
	static uint32_t mathematical_sans_serif_italic_capital_f [] = { 0x0046 };
	static uint32_t mathematical_sans_serif_italic_capital_g [] = { 0x0047 };
	static uint32_t mathematical_sans_serif_italic_capital_h [] = { 0x0048 };
	static uint32_t mathematical_sans_serif_italic_capital_i [] = { 0x0049 };
	static uint32_t mathematical_sans_serif_italic_capital_j [] = { 0x004A };
	static uint32_t mathematical_sans_serif_italic_capital_k [] = { 0x004B };
	static uint32_t mathematical_sans_serif_italic_capital_l [] = { 0x004C };
	static uint32_t mathematical_sans_serif_italic_capital_m [] = { 0x004D };
	static uint32_t mathematical_sans_serif_italic_capital_n [] = { 0x004E };
	static uint32_t mathematical_sans_serif_italic_capital_o [] = { 0x004F };
	static uint32_t mathematical_sans_serif_italic_capital_p [] = { 0x0050 };
	static uint32_t mathematical_sans_serif_italic_capital_q [] = { 0x0051 };
	static uint32_t mathematical_sans_serif_italic_capital_r [] = { 0x0052 };
	static uint32_t mathematical_sans_serif_italic_capital_s [] = { 0x0053 };
	static uint32_t mathematical_sans_serif_italic_capital_t [] = { 0x0054 };
	static uint32_t mathematical_sans_serif_italic_capital_u [] = { 0x0055 };
	static uint32_t mathematical_sans_serif_italic_capital_v [] = { 0x0056 };
	static uint32_t mathematical_sans_serif_italic_capital_w [] = { 0x0057 };
	static uint32_t mathematical_sans_serif_italic_capital_x [] = { 0x0058 };
	static uint32_t mathematical_sans_serif_italic_capital_y [] = { 0x0059 };
	static uint32_t mathematical_sans_serif_italic_capital_z [] = { 0x005A };
	static uint32_t mathematical_sans_serif_italic_small_a [] = { 0x0061 };
	static uint32_t mathematical_sans_serif_italic_small_b [] = { 0x0062 };
	static uint32_t mathematical_sans_serif_italic_small_c [] = { 0x0063 };
	static uint32_t mathematical_sans_serif_italic_small_d [] = { 0x0064 };
	static uint32_t mathematical_sans_serif_italic_small_e [] = { 0x0065 };
	static uint32_t mathematical_sans_serif_italic_small_f [] = { 0x0066 };
	static uint32_t mathematical_sans_serif_italic_small_g [] = { 0x0067 };
	static uint32_t mathematical_sans_serif_italic_small_h [] = { 0x0068 };
	static uint32_t mathematical_sans_serif_italic_small_i [] = { 0x0069 };
	static uint32_t mathematical_sans_serif_italic_small_j [] = { 0x006A };
	static uint32_t mathematical_sans_serif_italic_small_k [] = { 0x006B };
	static uint32_t mathematical_sans_serif_italic_small_l [] = { 0x006C };
	static uint32_t mathematical_sans_serif_italic_small_m [] = { 0x006D };
	static uint32_t mathematical_sans_serif_italic_small_n [] = { 0x006E };
	static uint32_t mathematical_sans_serif_italic_small_o [] = { 0x006F };
	static uint32_t mathematical_sans_serif_italic_small_p [] = { 0x0070 };
	static uint32_t mathematical_sans_serif_italic_small_q [] = { 0x0071 };
	static uint32_t mathematical_sans_serif_italic_small_r [] = { 0x0072 };
	static uint32_t mathematical_sans_serif_italic_small_s [] = { 0x0073 };
	static uint32_t mathematical_sans_serif_italic_small_t [] = { 0x0074 };
	static uint32_t mathematical_sans_serif_italic_small_u [] = { 0x0075 };
	static uint32_t mathematical_sans_serif_italic_small_v [] = { 0x0076 };
	static uint32_t mathematical_sans_serif_italic_small_w [] = { 0x0077 };
	static uint32_t mathematical_sans_serif_italic_small_x [] = { 0x0078 };
	static uint32_t mathematical_sans_serif_italic_small_y [] = { 0x0079 };
	static uint32_t mathematical_sans_serif_italic_small_z [] = { 0x007A };
	static uint32_t mathematical_sans_serif_bold_italic_capital_a [] = { 0x0041 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_b [] = { 0x0042 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_c [] = { 0x0043 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_d [] = { 0x0044 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_e [] = { 0x0045 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_f [] = { 0x0046 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_g [] = { 0x0047 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_h [] = { 0x0048 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_i [] = { 0x0049 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_j [] = { 0x004A };
	static uint32_t mathematical_sans_serif_bold_italic_capital_k [] = { 0x004B };
	static uint32_t mathematical_sans_serif_bold_italic_capital_l [] = { 0x004C };
	static uint32_t mathematical_sans_serif_bold_italic_capital_m [] = { 0x004D };
	static uint32_t mathematical_sans_serif_bold_italic_capital_n [] = { 0x004E };
	static uint32_t mathematical_sans_serif_bold_italic_capital_o [] = { 0x004F };
	static uint32_t mathematical_sans_serif_bold_italic_capital_p [] = { 0x0050 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_q [] = { 0x0051 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_r [] = { 0x0052 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_s [] = { 0x0053 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_t [] = { 0x0054 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_u [] = { 0x0055 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_v [] = { 0x0056 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_w [] = { 0x0057 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_x [] = { 0x0058 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_y [] = { 0x0059 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_z [] = { 0x005A };
	static uint32_t mathematical_sans_serif_bold_italic_small_a [] = { 0x0061 };
	static uint32_t mathematical_sans_serif_bold_italic_small_b [] = { 0x0062 };
	static uint32_t mathematical_sans_serif_bold_italic_small_c [] = { 0x0063 };
	static uint32_t mathematical_sans_serif_bold_italic_small_d [] = { 0x0064 };
	static uint32_t mathematical_sans_serif_bold_italic_small_e [] = { 0x0065 };
	static uint32_t mathematical_sans_serif_bold_italic_small_f [] = { 0x0066 };
	static uint32_t mathematical_sans_serif_bold_italic_small_g [] = { 0x0067 };
	static uint32_t mathematical_sans_serif_bold_italic_small_h [] = { 0x0068 };
	static uint32_t mathematical_sans_serif_bold_italic_small_i [] = { 0x0069 };
	static uint32_t mathematical_sans_serif_bold_italic_small_j [] = { 0x006A };
	static uint32_t mathematical_sans_serif_bold_italic_small_k [] = { 0x006B };
	static uint32_t mathematical_sans_serif_bold_italic_small_l [] = { 0x006C };
	static uint32_t mathematical_sans_serif_bold_italic_small_m [] = { 0x006D };
	static uint32_t mathematical_sans_serif_bold_italic_small_n [] = { 0x006E };
	static uint32_t mathematical_sans_serif_bold_italic_small_o [] = { 0x006F };
	static uint32_t mathematical_sans_serif_bold_italic_small_p [] = { 0x0070 };
	static uint32_t mathematical_sans_serif_bold_italic_small_q [] = { 0x0071 };
	static uint32_t mathematical_sans_serif_bold_italic_small_r [] = { 0x0072 };
	static uint32_t mathematical_sans_serif_bold_italic_small_s [] = { 0x0073 };
	static uint32_t mathematical_sans_serif_bold_italic_small_t [] = { 0x0074 };
	static uint32_t mathematical_sans_serif_bold_italic_small_u [] = { 0x0075 };
	static uint32_t mathematical_sans_serif_bold_italic_small_v [] = { 0x0076 };
	static uint32_t mathematical_sans_serif_bold_italic_small_w [] = { 0x0077 };
	static uint32_t mathematical_sans_serif_bold_italic_small_x [] = { 0x0078 };
	static uint32_t mathematical_sans_serif_bold_italic_small_y [] = { 0x0079 };
	static uint32_t mathematical_sans_serif_bold_italic_small_z [] = { 0x007A };
	static uint32_t mathematical_monospace_capital_a [] = { 0x0041 };
	static uint32_t mathematical_monospace_capital_b [] = { 0x0042 };
	static uint32_t mathematical_monospace_capital_c [] = { 0x0043 };
	static uint32_t mathematical_monospace_capital_d [] = { 0x0044 };
	static uint32_t mathematical_monospace_capital_e [] = { 0x0045 };
	static uint32_t mathematical_monospace_capital_f [] = { 0x0046 };
	static uint32_t mathematical_monospace_capital_g [] = { 0x0047 };
	static uint32_t mathematical_monospace_capital_h [] = { 0x0048 };
	static uint32_t mathematical_monospace_capital_i [] = { 0x0049 };
	static uint32_t mathematical_monospace_capital_j [] = { 0x004A };
	static uint32_t mathematical_monospace_capital_k [] = { 0x004B };
	static uint32_t mathematical_monospace_capital_l [] = { 0x004C };
	static uint32_t mathematical_monospace_capital_m [] = { 0x004D };
	static uint32_t mathematical_monospace_capital_n [] = { 0x004E };
	static uint32_t mathematical_monospace_capital_o [] = { 0x004F };
	static uint32_t mathematical_monospace_capital_p [] = { 0x0050 };
	static uint32_t mathematical_monospace_capital_q [] = { 0x0051 };
	static uint32_t mathematical_monospace_capital_r [] = { 0x0052 };
	static uint32_t mathematical_monospace_capital_s [] = { 0x0053 };
	static uint32_t mathematical_monospace_capital_t [] = { 0x0054 };
	static uint32_t mathematical_monospace_capital_u [] = { 0x0055 };
	static uint32_t mathematical_monospace_capital_v [] = { 0x0056 };
	static uint32_t mathematical_monospace_capital_w [] = { 0x0057 };
	static uint32_t mathematical_monospace_capital_x [] = { 0x0058 };
	static uint32_t mathematical_monospace_capital_y [] = { 0x0059 };
	static uint32_t mathematical_monospace_capital_z [] = { 0x005A };
	static uint32_t mathematical_monospace_small_a [] = { 0x0061 };
	static uint32_t mathematical_monospace_small_b [] = { 0x0062 };
	static uint32_t mathematical_monospace_small_c [] = { 0x0063 };
	static uint32_t mathematical_monospace_small_d [] = { 0x0064 };
	static uint32_t mathematical_monospace_small_e [] = { 0x0065 };
	static uint32_t mathematical_monospace_small_f [] = { 0x0066 };
	static uint32_t mathematical_monospace_small_g [] = { 0x0067 };
	static uint32_t mathematical_monospace_small_h [] = { 0x0068 };
	static uint32_t mathematical_monospace_small_i [] = { 0x0069 };
	static uint32_t mathematical_monospace_small_j [] = { 0x006A };
	static uint32_t mathematical_monospace_small_k [] = { 0x006B };
	static uint32_t mathematical_monospace_small_l [] = { 0x006C };
	static uint32_t mathematical_monospace_small_m [] = { 0x006D };
	static uint32_t mathematical_monospace_small_n [] = { 0x006E };
	static uint32_t mathematical_monospace_small_o [] = { 0x006F };
	static uint32_t mathematical_monospace_small_p [] = { 0x0070 };
	static uint32_t mathematical_monospace_small_q [] = { 0x0071 };
	static uint32_t mathematical_monospace_small_r [] = { 0x0072 };
	static uint32_t mathematical_monospace_small_s [] = { 0x0073 };
	static uint32_t mathematical_monospace_small_t [] = { 0x0074 };
	static uint32_t mathematical_monospace_small_u [] = { 0x0075 };
	static uint32_t mathematical_monospace_small_v [] = { 0x0076 };
	static uint32_t mathematical_monospace_small_w [] = { 0x0077 };
	static uint32_t mathematical_monospace_small_x [] = { 0x0078 };
	static uint32_t mathematical_monospace_small_y [] = { 0x0079 };
	static uint32_t mathematical_monospace_small_z [] = { 0x007A };
	static uint32_t mathematical_italic_small_dotless_i [] = { 0x0131 };
	static uint32_t mathematical_italic_small_dotless_j [] = { 0x0237 };
	static uint32_t mathematical_bold_capital_alpha [] = { 0x0391 };
	static uint32_t mathematical_bold_capital_beta [] = { 0x0392 };
	static uint32_t mathematical_bold_capital_gamma [] = { 0x0393 };
	static uint32_t mathematical_bold_capital_delta [] = { 0x0394 };
	static uint32_t mathematical_bold_capital_epsilon [] = { 0x0395 };
	static uint32_t mathematical_bold_capital_zeta [] = { 0x0396 };
	static uint32_t mathematical_bold_capital_eta [] = { 0x0397 };
	static uint32_t mathematical_bold_capital_theta [] = { 0x0398 };
	static uint32_t mathematical_bold_capital_iota [] = { 0x0399 };
	static uint32_t mathematical_bold_capital_kappa [] = { 0x039A };
	static uint32_t mathematical_bold_capital_lamda [] = { 0x039B };
	static uint32_t mathematical_bold_capital_mu [] = { 0x039C };
	static uint32_t mathematical_bold_capital_nu [] = { 0x039D };
	static uint32_t mathematical_bold_capital_xi [] = { 0x039E };
	static uint32_t mathematical_bold_capital_omicron [] = { 0x039F };
	static uint32_t mathematical_bold_capital_pi [] = { 0x03A0 };
	static uint32_t mathematical_bold_capital_rho [] = { 0x03A1 };
	static uint32_t mathematical_bold_capital_theta_symbol [] = { 0x03F4 };
	static uint32_t mathematical_bold_capital_sigma [] = { 0x03A3 };
	static uint32_t mathematical_bold_capital_tau [] = { 0x03A4 };
	static uint32_t mathematical_bold_capital_upsilon [] = { 0x03A5 };
	static uint32_t mathematical_bold_capital_phi [] = { 0x03A6 };
	static uint32_t mathematical_bold_capital_chi [] = { 0x03A7 };
	static uint32_t mathematical_bold_capital_psi [] = { 0x03A8 };
	static uint32_t mathematical_bold_capital_omega [] = { 0x03A9 };
	static uint32_t mathematical_bold_nabla [] = { 0x2207 };
	static uint32_t mathematical_bold_small_alpha [] = { 0x03B1 };
	static uint32_t mathematical_bold_small_beta [] = { 0x03B2 };
	static uint32_t mathematical_bold_small_gamma [] = { 0x03B3 };
	static uint32_t mathematical_bold_small_delta [] = { 0x03B4 };
	static uint32_t mathematical_bold_small_epsilon [] = { 0x03B5 };
	static uint32_t mathematical_bold_small_zeta [] = { 0x03B6 };
	static uint32_t mathematical_bold_small_eta [] = { 0x03B7 };
	static uint32_t mathematical_bold_small_theta [] = { 0x03B8 };
	static uint32_t mathematical_bold_small_iota [] = { 0x03B9 };
	static uint32_t mathematical_bold_small_kappa [] = { 0x03BA };
	static uint32_t mathematical_bold_small_lamda [] = { 0x03BB };
	static uint32_t mathematical_bold_small_mu [] = { 0x03BC };
	static uint32_t mathematical_bold_small_nu [] = { 0x03BD };
	static uint32_t mathematical_bold_small_xi [] = { 0x03BE };
	static uint32_t mathematical_bold_small_omicron [] = { 0x03BF };
	static uint32_t mathematical_bold_small_pi [] = { 0x03C0 };
	static uint32_t mathematical_bold_small_rho [] = { 0x03C1 };
	static uint32_t mathematical_bold_small_final_sigma [] = { 0x03C2 };
	static uint32_t mathematical_bold_small_sigma [] = { 0x03C3 };
	static uint32_t mathematical_bold_small_tau [] = { 0x03C4 };
	static uint32_t mathematical_bold_small_upsilon [] = { 0x03C5 };
	static uint32_t mathematical_bold_small_phi [] = { 0x03C6 };
	static uint32_t mathematical_bold_small_chi [] = { 0x03C7 };
	static uint32_t mathematical_bold_small_psi [] = { 0x03C8 };
	static uint32_t mathematical_bold_small_omega [] = { 0x03C9 };
	static uint32_t mathematical_bold_partial_differential [] = { 0x2202 };
	static uint32_t mathematical_bold_epsilon_symbol [] = { 0x03F5 };
	static uint32_t mathematical_bold_theta_symbol [] = { 0x03D1 };
	static uint32_t mathematical_bold_kappa_symbol [] = { 0x03F0 };
	static uint32_t mathematical_bold_phi_symbol [] = { 0x03D5 };
	static uint32_t mathematical_bold_rho_symbol [] = { 0x03F1 };
	static uint32_t mathematical_bold_pi_symbol [] = { 0x03D6 };
	static uint32_t mathematical_italic_capital_alpha [] = { 0x0391 };
	static uint32_t mathematical_italic_capital_beta [] = { 0x0392 };
	static uint32_t mathematical_italic_capital_gamma [] = { 0x0393 };
	static uint32_t mathematical_italic_capital_delta [] = { 0x0394 };
	static uint32_t mathematical_italic_capital_epsilon [] = { 0x0395 };
	static uint32_t mathematical_italic_capital_zeta [] = { 0x0396 };
	static uint32_t mathematical_italic_capital_eta [] = { 0x0397 };
	static uint32_t mathematical_italic_capital_theta [] = { 0x0398 };
	static uint32_t mathematical_italic_capital_iota [] = { 0x0399 };
	static uint32_t mathematical_italic_capital_kappa [] = { 0x039A };
	static uint32_t mathematical_italic_capital_lamda [] = { 0x039B };
	static uint32_t mathematical_italic_capital_mu [] = { 0x039C };
	static uint32_t mathematical_italic_capital_nu [] = { 0x039D };
	static uint32_t mathematical_italic_capital_xi [] = { 0x039E };
	static uint32_t mathematical_italic_capital_omicron [] = { 0x039F };
	static uint32_t mathematical_italic_capital_pi [] = { 0x03A0 };
	static uint32_t mathematical_italic_capital_rho [] = { 0x03A1 };
	static uint32_t mathematical_italic_capital_theta_symbol [] = { 0x03F4 };
	static uint32_t mathematical_italic_capital_sigma [] = { 0x03A3 };
	static uint32_t mathematical_italic_capital_tau [] = { 0x03A4 };
	static uint32_t mathematical_italic_capital_upsilon [] = { 0x03A5 };
	static uint32_t mathematical_italic_capital_phi [] = { 0x03A6 };
	static uint32_t mathematical_italic_capital_chi [] = { 0x03A7 };
	static uint32_t mathematical_italic_capital_psi [] = { 0x03A8 };
	static uint32_t mathematical_italic_capital_omega [] = { 0x03A9 };
	static uint32_t mathematical_italic_nabla [] = { 0x2207 };
	static uint32_t mathematical_italic_small_alpha [] = { 0x03B1 };
	static uint32_t mathematical_italic_small_beta [] = { 0x03B2 };
	static uint32_t mathematical_italic_small_gamma [] = { 0x03B3 };
	static uint32_t mathematical_italic_small_delta [] = { 0x03B4 };
	static uint32_t mathematical_italic_small_epsilon [] = { 0x03B5 };
	static uint32_t mathematical_italic_small_zeta [] = { 0x03B6 };
	static uint32_t mathematical_italic_small_eta [] = { 0x03B7 };
	static uint32_t mathematical_italic_small_theta [] = { 0x03B8 };
	static uint32_t mathematical_italic_small_iota [] = { 0x03B9 };
	static uint32_t mathematical_italic_small_kappa [] = { 0x03BA };
	static uint32_t mathematical_italic_small_lamda [] = { 0x03BB };
	static uint32_t mathematical_italic_small_mu [] = { 0x03BC };
	static uint32_t mathematical_italic_small_nu [] = { 0x03BD };
	static uint32_t mathematical_italic_small_xi [] = { 0x03BE };
	static uint32_t mathematical_italic_small_omicron [] = { 0x03BF };
	static uint32_t mathematical_italic_small_pi [] = { 0x03C0 };
	static uint32_t mathematical_italic_small_rho [] = { 0x03C1 };
	static uint32_t mathematical_italic_small_final_sigma [] = { 0x03C2 };
	static uint32_t mathematical_italic_small_sigma [] = { 0x03C3 };
	static uint32_t mathematical_italic_small_tau [] = { 0x03C4 };
	static uint32_t mathematical_italic_small_upsilon [] = { 0x03C5 };
	static uint32_t mathematical_italic_small_phi [] = { 0x03C6 };
	static uint32_t mathematical_italic_small_chi [] = { 0x03C7 };
	static uint32_t mathematical_italic_small_psi [] = { 0x03C8 };
	static uint32_t mathematical_italic_small_omega [] = { 0x03C9 };
	static uint32_t mathematical_italic_partial_differential [] = { 0x2202 };
	static uint32_t mathematical_italic_epsilon_symbol [] = { 0x03F5 };
	static uint32_t mathematical_italic_theta_symbol [] = { 0x03D1 };
	static uint32_t mathematical_italic_kappa_symbol [] = { 0x03F0 };
	static uint32_t mathematical_italic_phi_symbol [] = { 0x03D5 };
	static uint32_t mathematical_italic_rho_symbol [] = { 0x03F1 };
	static uint32_t mathematical_italic_pi_symbol [] = { 0x03D6 };
	static uint32_t mathematical_bold_italic_capital_alpha [] = { 0x0391 };
	static uint32_t mathematical_bold_italic_capital_beta [] = { 0x0392 };
	static uint32_t mathematical_bold_italic_capital_gamma [] = { 0x0393 };
	static uint32_t mathematical_bold_italic_capital_delta [] = { 0x0394 };
	static uint32_t mathematical_bold_italic_capital_epsilon [] = { 0x0395 };
	static uint32_t mathematical_bold_italic_capital_zeta [] = { 0x0396 };
	static uint32_t mathematical_bold_italic_capital_eta [] = { 0x0397 };
	static uint32_t mathematical_bold_italic_capital_theta [] = { 0x0398 };
	static uint32_t mathematical_bold_italic_capital_iota [] = { 0x0399 };
	static uint32_t mathematical_bold_italic_capital_kappa [] = { 0x039A };
	static uint32_t mathematical_bold_italic_capital_lamda [] = { 0x039B };
	static uint32_t mathematical_bold_italic_capital_mu [] = { 0x039C };
	static uint32_t mathematical_bold_italic_capital_nu [] = { 0x039D };
	static uint32_t mathematical_bold_italic_capital_xi [] = { 0x039E };
	static uint32_t mathematical_bold_italic_capital_omicron [] = { 0x039F };
	static uint32_t mathematical_bold_italic_capital_pi [] = { 0x03A0 };
	static uint32_t mathematical_bold_italic_capital_rho [] = { 0x03A1 };
	static uint32_t mathematical_bold_italic_capital_theta_symbol [] = { 0x03F4 };
	static uint32_t mathematical_bold_italic_capital_sigma [] = { 0x03A3 };
	static uint32_t mathematical_bold_italic_capital_tau [] = { 0x03A4 };
	static uint32_t mathematical_bold_italic_capital_upsilon [] = { 0x03A5 };
	static uint32_t mathematical_bold_italic_capital_phi [] = { 0x03A6 };
	static uint32_t mathematical_bold_italic_capital_chi [] = { 0x03A7 };
	static uint32_t mathematical_bold_italic_capital_psi [] = { 0x03A8 };
	static uint32_t mathematical_bold_italic_capital_omega [] = { 0x03A9 };
	static uint32_t mathematical_bold_italic_nabla [] = { 0x2207 };
	static uint32_t mathematical_bold_italic_small_alpha [] = { 0x03B1 };
	static uint32_t mathematical_bold_italic_small_beta [] = { 0x03B2 };
	static uint32_t mathematical_bold_italic_small_gamma [] = { 0x03B3 };
	static uint32_t mathematical_bold_italic_small_delta [] = { 0x03B4 };
	static uint32_t mathematical_bold_italic_small_epsilon [] = { 0x03B5 };
	static uint32_t mathematical_bold_italic_small_zeta [] = { 0x03B6 };
	static uint32_t mathematical_bold_italic_small_eta [] = { 0x03B7 };
	static uint32_t mathematical_bold_italic_small_theta [] = { 0x03B8 };
	static uint32_t mathematical_bold_italic_small_iota [] = { 0x03B9 };
	static uint32_t mathematical_bold_italic_small_kappa [] = { 0x03BA };
	static uint32_t mathematical_bold_italic_small_lamda [] = { 0x03BB };
	static uint32_t mathematical_bold_italic_small_mu [] = { 0x03BC };
	static uint32_t mathematical_bold_italic_small_nu [] = { 0x03BD };
	static uint32_t mathematical_bold_italic_small_xi [] = { 0x03BE };
	static uint32_t mathematical_bold_italic_small_omicron [] = { 0x03BF };
	static uint32_t mathematical_bold_italic_small_pi [] = { 0x03C0 };
	static uint32_t mathematical_bold_italic_small_rho [] = { 0x03C1 };
	static uint32_t mathematical_bold_italic_small_final_sigma [] = { 0x03C2 };
	static uint32_t mathematical_bold_italic_small_sigma [] = { 0x03C3 };
	static uint32_t mathematical_bold_italic_small_tau [] = { 0x03C4 };
	static uint32_t mathematical_bold_italic_small_upsilon [] = { 0x03C5 };
	static uint32_t mathematical_bold_italic_small_phi [] = { 0x03C6 };
	static uint32_t mathematical_bold_italic_small_chi [] = { 0x03C7 };
	static uint32_t mathematical_bold_italic_small_psi [] = { 0x03C8 };
	static uint32_t mathematical_bold_italic_small_omega [] = { 0x03C9 };
	static uint32_t mathematical_bold_italic_partial_differential [] = { 0x2202 };
	static uint32_t mathematical_bold_italic_epsilon_symbol [] = { 0x03F5 };
	static uint32_t mathematical_bold_italic_theta_symbol [] = { 0x03D1 };
	static uint32_t mathematical_bold_italic_kappa_symbol [] = { 0x03F0 };
	static uint32_t mathematical_bold_italic_phi_symbol [] = { 0x03D5 };
	static uint32_t mathematical_bold_italic_rho_symbol [] = { 0x03F1 };
	static uint32_t mathematical_bold_italic_pi_symbol [] = { 0x03D6 };
	static uint32_t mathematical_sans_serif_bold_capital_alpha [] = { 0x0391 };
	static uint32_t mathematical_sans_serif_bold_capital_beta [] = { 0x0392 };
	static uint32_t mathematical_sans_serif_bold_capital_gamma [] = { 0x0393 };
	static uint32_t mathematical_sans_serif_bold_capital_delta [] = { 0x0394 };
	static uint32_t mathematical_sans_serif_bold_capital_epsilon [] = { 0x0395 };
	static uint32_t mathematical_sans_serif_bold_capital_zeta [] = { 0x0396 };
	static uint32_t mathematical_sans_serif_bold_capital_eta [] = { 0x0397 };
	static uint32_t mathematical_sans_serif_bold_capital_theta [] = { 0x0398 };
	static uint32_t mathematical_sans_serif_bold_capital_iota [] = { 0x0399 };
	static uint32_t mathematical_sans_serif_bold_capital_kappa [] = { 0x039A };
	static uint32_t mathematical_sans_serif_bold_capital_lamda [] = { 0x039B };
	static uint32_t mathematical_sans_serif_bold_capital_mu [] = { 0x039C };
	static uint32_t mathematical_sans_serif_bold_capital_nu [] = { 0x039D };
	static uint32_t mathematical_sans_serif_bold_capital_xi [] = { 0x039E };
	static uint32_t mathematical_sans_serif_bold_capital_omicron [] = { 0x039F };
	static uint32_t mathematical_sans_serif_bold_capital_pi [] = { 0x03A0 };
	static uint32_t mathematical_sans_serif_bold_capital_rho [] = { 0x03A1 };
	static uint32_t mathematical_sans_serif_bold_capital_theta_symbol [] = { 0x03F4 };
	static uint32_t mathematical_sans_serif_bold_capital_sigma [] = { 0x03A3 };
	static uint32_t mathematical_sans_serif_bold_capital_tau [] = { 0x03A4 };
	static uint32_t mathematical_sans_serif_bold_capital_upsilon [] = { 0x03A5 };
	static uint32_t mathematical_sans_serif_bold_capital_phi [] = { 0x03A6 };
	static uint32_t mathematical_sans_serif_bold_capital_chi [] = { 0x03A7 };
	static uint32_t mathematical_sans_serif_bold_capital_psi [] = { 0x03A8 };
	static uint32_t mathematical_sans_serif_bold_capital_omega [] = { 0x03A9 };
	static uint32_t mathematical_sans_serif_bold_nabla [] = { 0x2207 };
	static uint32_t mathematical_sans_serif_bold_small_alpha [] = { 0x03B1 };
	static uint32_t mathematical_sans_serif_bold_small_beta [] = { 0x03B2 };
	static uint32_t mathematical_sans_serif_bold_small_gamma [] = { 0x03B3 };
	static uint32_t mathematical_sans_serif_bold_small_delta [] = { 0x03B4 };
	static uint32_t mathematical_sans_serif_bold_small_epsilon [] = { 0x03B5 };
	static uint32_t mathematical_sans_serif_bold_small_zeta [] = { 0x03B6 };
	static uint32_t mathematical_sans_serif_bold_small_eta [] = { 0x03B7 };
	static uint32_t mathematical_sans_serif_bold_small_theta [] = { 0x03B8 };
	static uint32_t mathematical_sans_serif_bold_small_iota [] = { 0x03B9 };
	static uint32_t mathematical_sans_serif_bold_small_kappa [] = { 0x03BA };
	static uint32_t mathematical_sans_serif_bold_small_lamda [] = { 0x03BB };
	static uint32_t mathematical_sans_serif_bold_small_mu [] = { 0x03BC };
	static uint32_t mathematical_sans_serif_bold_small_nu [] = { 0x03BD };
	static uint32_t mathematical_sans_serif_bold_small_xi [] = { 0x03BE };
	static uint32_t mathematical_sans_serif_bold_small_omicron [] = { 0x03BF };
	static uint32_t mathematical_sans_serif_bold_small_pi [] = { 0x03C0 };
	static uint32_t mathematical_sans_serif_bold_small_rho [] = { 0x03C1 };
	static uint32_t mathematical_sans_serif_bold_small_final_sigma [] = { 0x03C2 };
	static uint32_t mathematical_sans_serif_bold_small_sigma [] = { 0x03C3 };
	static uint32_t mathematical_sans_serif_bold_small_tau [] = { 0x03C4 };
	static uint32_t mathematical_sans_serif_bold_small_upsilon [] = { 0x03C5 };
	static uint32_t mathematical_sans_serif_bold_small_phi [] = { 0x03C6 };
	static uint32_t mathematical_sans_serif_bold_small_chi [] = { 0x03C7 };
	static uint32_t mathematical_sans_serif_bold_small_psi [] = { 0x03C8 };
	static uint32_t mathematical_sans_serif_bold_small_omega [] = { 0x03C9 };
	static uint32_t mathematical_sans_serif_bold_partial_differential [] = { 0x2202 };
	static uint32_t mathematical_sans_serif_bold_epsilon_symbol [] = { 0x03F5 };
	static uint32_t mathematical_sans_serif_bold_theta_symbol [] = { 0x03D1 };
	static uint32_t mathematical_sans_serif_bold_kappa_symbol [] = { 0x03F0 };
	static uint32_t mathematical_sans_serif_bold_phi_symbol [] = { 0x03D5 };
	static uint32_t mathematical_sans_serif_bold_rho_symbol [] = { 0x03F1 };
	static uint32_t mathematical_sans_serif_bold_pi_symbol [] = { 0x03D6 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_alpha [] = { 0x0391 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_beta [] = { 0x0392 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_gamma [] = { 0x0393 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_delta [] = { 0x0394 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_epsilon [] = { 0x0395 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_zeta [] = { 0x0396 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_eta [] = { 0x0397 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_theta [] = { 0x0398 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_iota [] = { 0x0399 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_kappa [] = { 0x039A };
	static uint32_t mathematical_sans_serif_bold_italic_capital_lamda [] = { 0x039B };
	static uint32_t mathematical_sans_serif_bold_italic_capital_mu [] = { 0x039C };
	static uint32_t mathematical_sans_serif_bold_italic_capital_nu [] = { 0x039D };
	static uint32_t mathematical_sans_serif_bold_italic_capital_xi [] = { 0x039E };
	static uint32_t mathematical_sans_serif_bold_italic_capital_omicron [] = { 0x039F };
	static uint32_t mathematical_sans_serif_bold_italic_capital_pi [] = { 0x03A0 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_rho [] = { 0x03A1 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_theta_symbol [] = { 0x03F4 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_sigma [] = { 0x03A3 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_tau [] = { 0x03A4 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_upsilon [] = { 0x03A5 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_phi [] = { 0x03A6 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_chi [] = { 0x03A7 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_psi [] = { 0x03A8 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_omega [] = { 0x03A9 };
	static uint32_t mathematical_sans_serif_bold_italic_nabla [] = { 0x2207 };
	static uint32_t mathematical_sans_serif_bold_italic_small_alpha [] = { 0x03B1 };
	static uint32_t mathematical_sans_serif_bold_italic_small_beta [] = { 0x03B2 };
	static uint32_t mathematical_sans_serif_bold_italic_small_gamma [] = { 0x03B3 };
	static uint32_t mathematical_sans_serif_bold_italic_small_delta [] = { 0x03B4 };
	static uint32_t mathematical_sans_serif_bold_italic_small_epsilon [] = { 0x03B5 };
	static uint32_t mathematical_sans_serif_bold_italic_small_zeta [] = { 0x03B6 };
	static uint32_t mathematical_sans_serif_bold_italic_small_eta [] = { 0x03B7 };
	static uint32_t mathematical_sans_serif_bold_italic_small_theta [] = { 0x03B8 };
	static uint32_t mathematical_sans_serif_bold_italic_small_iota [] = { 0x03B9 };
	static uint32_t mathematical_sans_serif_bold_italic_small_kappa [] = { 0x03BA };
	static uint32_t mathematical_sans_serif_bold_italic_small_lamda [] = { 0x03BB };
	static uint32_t mathematical_sans_serif_bold_italic_small_mu [] = { 0x03BC };
	static uint32_t mathematical_sans_serif_bold_italic_small_nu [] = { 0x03BD };
	static uint32_t mathematical_sans_serif_bold_italic_small_xi [] = { 0x03BE };
	static uint32_t mathematical_sans_serif_bold_italic_small_omicron [] = { 0x03BF };
	static uint32_t mathematical_sans_serif_bold_italic_small_pi [] = { 0x03C0 };
	static uint32_t mathematical_sans_serif_bold_italic_small_rho [] = { 0x03C1 };
	static uint32_t mathematical_sans_serif_bold_italic_small_final_sigma [] = { 0x03C2 };
	static uint32_t mathematical_sans_serif_bold_italic_small_sigma [] = { 0x03C3 };
	static uint32_t mathematical_sans_serif_bold_italic_small_tau [] = { 0x03C4 };
	static uint32_t mathematical_sans_serif_bold_italic_small_upsilon [] = { 0x03C5 };
	static uint32_t mathematical_sans_serif_bold_italic_small_phi [] = { 0x03C6 };
	static uint32_t mathematical_sans_serif_bold_italic_small_chi [] = { 0x03C7 };
	static uint32_t mathematical_sans_serif_bold_italic_small_psi [] = { 0x03C8 };
	static uint32_t mathematical_sans_serif_bold_italic_small_omega [] = { 0x03C9 };
	static uint32_t mathematical_sans_serif_bold_italic_partial_differential [] = { 0x2202 };
	static uint32_t mathematical_sans_serif_bold_italic_epsilon_symbol [] = { 0x03F5 };
	static uint32_t mathematical_sans_serif_bold_italic_theta_symbol [] = { 0x03D1 };
	static uint32_t mathematical_sans_serif_bold_italic_kappa_symbol [] = { 0x03F0 };
	static uint32_t mathematical_sans_serif_bold_italic_phi_symbol [] = { 0x03D5 };
	static uint32_t mathematical_sans_serif_bold_italic_rho_symbol [] = { 0x03F1 };
	static uint32_t mathematical_sans_serif_bold_italic_pi_symbol [] = { 0x03D6 };
	static uint32_t mathematical_bold_capital_digamma [] = { 0x03DC };
	static uint32_t mathematical_bold_small_digamma [] = { 0x03DD };
	static uint32_t mathematical_bold_digit_zero [] = { 0x0030 };
	static uint32_t mathematical_bold_digit_one [] = { 0x0031 };
	static uint32_t mathematical_bold_digit_two [] = { 0x0032 };
	static uint32_t mathematical_bold_digit_three [] = { 0x0033 };
	static uint32_t mathematical_bold_digit_four [] = { 0x0034 };
	static uint32_t mathematical_bold_digit_five [] = { 0x0035 };
	static uint32_t mathematical_bold_digit_six [] = { 0x0036 };
	static uint32_t mathematical_bold_digit_seven [] = { 0x0037 };
	static uint32_t mathematical_bold_digit_eight [] = { 0x0038 };
	static uint32_t mathematical_bold_digit_nine [] = { 0x0039 };
	static uint32_t mathematical_double_struck_digit_zero [] = { 0x0030 };
	static uint32_t mathematical_double_struck_digit_one [] = { 0x0031 };
	static uint32_t mathematical_double_struck_digit_two [] = { 0x0032 };
	static uint32_t mathematical_double_struck_digit_three [] = { 0x0033 };
	static uint32_t mathematical_double_struck_digit_four [] = { 0x0034 };
	static uint32_t mathematical_double_struck_digit_five [] = { 0x0035 };
	static uint32_t mathematical_double_struck_digit_six [] = { 0x0036 };
	static uint32_t mathematical_double_struck_digit_seven [] = { 0x0037 };
	static uint32_t mathematical_double_struck_digit_eight [] = { 0x0038 };
	static uint32_t mathematical_double_struck_digit_nine [] = { 0x0039 };
	static uint32_t mathematical_sans_serif_digit_zero [] = { 0x0030 };
	static uint32_t mathematical_sans_serif_digit_one [] = { 0x0031 };
	static uint32_t mathematical_sans_serif_digit_two [] = { 0x0032 };
	static uint32_t mathematical_sans_serif_digit_three [] = { 0x0033 };
	static uint32_t mathematical_sans_serif_digit_four [] = { 0x0034 };
	static uint32_t mathematical_sans_serif_digit_five [] = { 0x0035 };
	static uint32_t mathematical_sans_serif_digit_six [] = { 0x0036 };
	static uint32_t mathematical_sans_serif_digit_seven [] = { 0x0037 };
	static uint32_t mathematical_sans_serif_digit_eight [] = { 0x0038 };
	static uint32_t mathematical_sans_serif_digit_nine [] = { 0x0039 };
	static uint32_t mathematical_sans_serif_bold_digit_zero [] = { 0x0030 };
	static uint32_t mathematical_sans_serif_bold_digit_one [] = { 0x0031 };
	static uint32_t mathematical_sans_serif_bold_digit_two [] = { 0x0032 };
	static uint32_t mathematical_sans_serif_bold_digit_three [] = { 0x0033 };
	static uint32_t mathematical_sans_serif_bold_digit_four [] = { 0x0034 };
	static uint32_t mathematical_sans_serif_bold_digit_five [] = { 0x0035 };
	static uint32_t mathematical_sans_serif_bold_digit_six [] = { 0x0036 };
	static uint32_t mathematical_sans_serif_bold_digit_seven [] = { 0x0037 };
	static uint32_t mathematical_sans_serif_bold_digit_eight [] = { 0x0038 };
	static uint32_t mathematical_sans_serif_bold_digit_nine [] = { 0x0039 };
	static uint32_t mathematical_monospace_digit_zero [] = { 0x0030 };
	static uint32_t mathematical_monospace_digit_one [] = { 0x0031 };
	static uint32_t mathematical_monospace_digit_two [] = { 0x0032 };
	static uint32_t mathematical_monospace_digit_three [] = { 0x0033 };
	static uint32_t mathematical_monospace_digit_four [] = { 0x0034 };
	static uint32_t mathematical_monospace_digit_five [] = { 0x0035 };
	static uint32_t mathematical_monospace_digit_six [] = { 0x0036 };
	static uint32_t mathematical_monospace_digit_seven [] = { 0x0037 };
	static uint32_t mathematical_monospace_digit_eight [] = { 0x0038 };
	static uint32_t mathematical_monospace_digit_nine [] = { 0x0039 };
	static uint32_t arabic_mathematical_alef [] = { 0x0627 };
	static uint32_t arabic_mathematical_beh [] = { 0x0628 };
	static uint32_t arabic_mathematical_jeem [] = { 0x062C };
	static uint32_t arabic_mathematical_dal [] = { 0x062F };
	static uint32_t arabic_mathematical_waw [] = { 0x0648 };
	static uint32_t arabic_mathematical_zain [] = { 0x0632 };
	static uint32_t arabic_mathematical_hah [] = { 0x062D };
	static uint32_t arabic_mathematical_tah [] = { 0x0637 };
	static uint32_t arabic_mathematical_yeh [] = { 0x064A };
	static uint32_t arabic_mathematical_kaf [] = { 0x0643 };
	static uint32_t arabic_mathematical_lam [] = { 0x0644 };
	static uint32_t arabic_mathematical_meem [] = { 0x0645 };
	static uint32_t arabic_mathematical_noon [] = { 0x0646 };
	static uint32_t arabic_mathematical_seen [] = { 0x0633 };
	static uint32_t arabic_mathematical_ain [] = { 0x0639 };
	static uint32_t arabic_mathematical_feh [] = { 0x0641 };
	static uint32_t arabic_mathematical_sad [] = { 0x0635 };
	static uint32_t arabic_mathematical_qaf [] = { 0x0642 };
	static uint32_t arabic_mathematical_reh [] = { 0x0631 };
	static uint32_t arabic_mathematical_sheen [] = { 0x0634 };
	static uint32_t arabic_mathematical_teh [] = { 0x062A };
	static uint32_t arabic_mathematical_theh [] = { 0x062B };
	static uint32_t arabic_mathematical_khah [] = { 0x062E };
	static uint32_t arabic_mathematical_thal [] = { 0x0630 };
	static uint32_t arabic_mathematical_dad [] = { 0x0636 };
	static uint32_t arabic_mathematical_zah [] = { 0x0638 };
	static uint32_t arabic_mathematical_ghain [] = { 0x063A };
	static uint32_t arabic_mathematical_dotless_beh [] = { 0x066E };
	static uint32_t arabic_mathematical_dotless_noon [] = { 0x06BA };
	static uint32_t arabic_mathematical_dotless_feh [] = { 0x06A1 };
	static uint32_t arabic_mathematical_dotless_qaf [] = { 0x066F };
	static uint32_t arabic_mathematical_initial_beh [] = { 0x0628 };
	static uint32_t arabic_mathematical_initial_jeem [] = { 0x062C };
	static uint32_t arabic_mathematical_initial_heh [] = { 0x0647 };
	static uint32_t arabic_mathematical_initial_hah [] = { 0x062D };
	static uint32_t arabic_mathematical_initial_yeh [] = { 0x064A };
	static uint32_t arabic_mathematical_initial_kaf [] = { 0x0643 };
	static uint32_t arabic_mathematical_initial_lam [] = { 0x0644 };
	static uint32_t arabic_mathematical_initial_meem [] = { 0x0645 };
	static uint32_t arabic_mathematical_initial_noon [] = { 0x0646 };
	static uint32_t arabic_mathematical_initial_seen [] = { 0x0633 };
	static uint32_t arabic_mathematical_initial_ain [] = { 0x0639 };
	static uint32_t arabic_mathematical_initial_feh [] = { 0x0641 };
	static uint32_t arabic_mathematical_initial_sad [] = { 0x0635 };
	static uint32_t arabic_mathematical_initial_qaf [] = { 0x0642 };
	static uint32_t arabic_mathematical_initial_sheen [] = { 0x0634 };
	static uint32_t arabic_mathematical_initial_teh [] = { 0x062A };
	static uint32_t arabic_mathematical_initial_theh [] = { 0x062B };
	static uint32_t arabic_mathematical_initial_khah [] = { 0x062E };
	static uint32_t arabic_mathematical_initial_dad [] = { 0x0636 };
	static uint32_t arabic_mathematical_initial_ghain [] = { 0x063A };
	static uint32_t arabic_mathematical_tailed_jeem [] = { 0x062C };
	static uint32_t arabic_mathematical_tailed_hah [] = { 0x062D };
	static uint32_t arabic_mathematical_tailed_yeh [] = { 0x064A };
	static uint32_t arabic_mathematical_tailed_lam [] = { 0x0644 };
	static uint32_t arabic_mathematical_tailed_noon [] = { 0x0646 };
	static uint32_t arabic_mathematical_tailed_seen [] = { 0x0633 };
	static uint32_t arabic_mathematical_tailed_ain [] = { 0x0639 };
	static uint32_t arabic_mathematical_tailed_sad [] = { 0x0635 };
	static uint32_t arabic_mathematical_tailed_qaf [] = { 0x0642 };
	static uint32_t arabic_mathematical_tailed_sheen [] = { 0x0634 };
	static uint32_t arabic_mathematical_tailed_khah [] = { 0x062E };
	static uint32_t arabic_mathematical_tailed_dad [] = { 0x0636 };
	static uint32_t arabic_mathematical_tailed_ghain [] = { 0x063A };
	static uint32_t arabic_mathematical_tailed_dotless_noon [] = { 0x06BA };
	static uint32_t arabic_mathematical_tailed_dotless_qaf [] = { 0x066F };
	static uint32_t arabic_mathematical_stretched_beh [] = { 0x0628 };
	static uint32_t arabic_mathematical_stretched_jeem [] = { 0x062C };
	static uint32_t arabic_mathematical_stretched_heh [] = { 0x0647 };
	static uint32_t arabic_mathematical_stretched_hah [] = { 0x062D };
	static uint32_t arabic_mathematical_stretched_tah [] = { 0x0637 };
	static uint32_t arabic_mathematical_stretched_yeh [] = { 0x064A };
	static uint32_t arabic_mathematical_stretched_kaf [] = { 0x0643 };
	static uint32_t arabic_mathematical_stretched_meem [] = { 0x0645 };
	static uint32_t arabic_mathematical_stretched_noon [] = { 0x0646 };
	static uint32_t arabic_mathematical_stretched_seen [] = { 0x0633 };
	static uint32_t arabic_mathematical_stretched_ain [] = { 0x0639 };
	static uint32_t arabic_mathematical_stretched_feh [] = { 0x0641 };
	static uint32_t arabic_mathematical_stretched_sad [] = { 0x0635 };
	static uint32_t arabic_mathematical_stretched_qaf [] = { 0x0642 };
	static uint32_t arabic_mathematical_stretched_sheen [] = { 0x0634 };
	static uint32_t arabic_mathematical_stretched_teh [] = { 0x062A };
	static uint32_t arabic_mathematical_stretched_theh [] = { 0x062B };
	static uint32_t arabic_mathematical_stretched_khah [] = { 0x062E };
	static uint32_t arabic_mathematical_stretched_dad [] = { 0x0636 };
	static uint32_t arabic_mathematical_stretched_zah [] = { 0x0638 };
	static uint32_t arabic_mathematical_stretched_ghain [] = { 0x063A };
	static uint32_t arabic_mathematical_stretched_dotless_beh [] = { 0x066E };
	static uint32_t arabic_mathematical_stretched_dotless_feh [] = { 0x06A1 };
	static uint32_t arabic_mathematical_looped_alef [] = { 0x0627 };
	static uint32_t arabic_mathematical_looped_beh [] = { 0x0628 };
	static uint32_t arabic_mathematical_looped_jeem [] = { 0x062C };
	static uint32_t arabic_mathematical_looped_dal [] = { 0x062F };
	static uint32_t arabic_mathematical_looped_heh [] = { 0x0647 };
	static uint32_t arabic_mathematical_looped_waw [] = { 0x0648 };
	static uint32_t arabic_mathematical_looped_zain [] = { 0x0632 };
	static uint32_t arabic_mathematical_looped_hah [] = { 0x062D };
	static uint32_t arabic_mathematical_looped_tah [] = { 0x0637 };
	static uint32_t arabic_mathematical_looped_yeh [] = { 0x064A };
	static uint32_t arabic_mathematical_looped_lam [] = { 0x0644 };
	static uint32_t arabic_mathematical_looped_meem [] = { 0x0645 };
	static uint32_t arabic_mathematical_looped_noon [] = { 0x0646 };
	static uint32_t arabic_mathematical_looped_seen [] = { 0x0633 };
	static uint32_t arabic_mathematical_looped_ain [] = { 0x0639 };
	static uint32_t arabic_mathematical_looped_feh [] = { 0x0641 };
	static uint32_t arabic_mathematical_looped_sad [] = { 0x0635 };
	static uint32_t arabic_mathematical_looped_qaf [] = { 0x0642 };
	static uint32_t arabic_mathematical_looped_reh [] = { 0x0631 };
	static uint32_t arabic_mathematical_looped_sheen [] = { 0x0634 };
	static uint32_t arabic_mathematical_looped_teh [] = { 0x062A };
	static uint32_t arabic_mathematical_looped_theh [] = { 0x062B };
	static uint32_t arabic_mathematical_looped_khah [] = { 0x062E };
	static uint32_t arabic_mathematical_looped_thal [] = { 0x0630 };
	static uint32_t arabic_mathematical_looped_dad [] = { 0x0636 };
	static uint32_t arabic_mathematical_looped_zah [] = { 0x0638 };
	static uint32_t arabic_mathematical_looped_ghain [] = { 0x063A };
	static uint32_t arabic_mathematical_double_struck_beh [] = { 0x0628 };
	static uint32_t arabic_mathematical_double_struck_jeem [] = { 0x062C };
	static uint32_t arabic_mathematical_double_struck_dal [] = { 0x062F };
	static uint32_t arabic_mathematical_double_struck_waw [] = { 0x0648 };
	static uint32_t arabic_mathematical_double_struck_zain [] = { 0x0632 };
	static uint32_t arabic_mathematical_double_struck_hah [] = { 0x062D };
	static uint32_t arabic_mathematical_double_struck_tah [] = { 0x0637 };
	static uint32_t arabic_mathematical_double_struck_yeh [] = { 0x064A };
	static uint32_t arabic_mathematical_double_struck_lam [] = { 0x0644 };
	static uint32_t arabic_mathematical_double_struck_meem [] = { 0x0645 };
	static uint32_t arabic_mathematical_double_struck_noon [] = { 0x0646 };
	static uint32_t arabic_mathematical_double_struck_seen [] = { 0x0633 };
	static uint32_t arabic_mathematical_double_struck_ain [] = { 0x0639 };
	static uint32_t arabic_mathematical_double_struck_feh [] = { 0x0641 };
	static uint32_t arabic_mathematical_double_struck_sad [] = { 0x0635 };
	static uint32_t arabic_mathematical_double_struck_qaf [] = { 0x0642 };
	static uint32_t arabic_mathematical_double_struck_reh [] = { 0x0631 };
	static uint32_t arabic_mathematical_double_struck_sheen [] = { 0x0634 };
	static uint32_t arabic_mathematical_double_struck_teh [] = { 0x062A };
	static uint32_t arabic_mathematical_double_struck_theh [] = { 0x062B };
	static uint32_t arabic_mathematical_double_struck_khah [] = { 0x062E };
	static uint32_t arabic_mathematical_double_struck_thal [] = { 0x0630 };
	static uint32_t arabic_mathematical_double_struck_dad [] = { 0x0636 };
	static uint32_t arabic_mathematical_double_struck_zah [] = { 0x0638 };
	static uint32_t arabic_mathematical_double_struck_ghain [] = { 0x063A };
	static uint32_t digit_zero_full_stop [] = { 0x0030, 0x002E };
	static uint32_t digit_zero_comma [] = { 0x0030, 0x002C };
	static uint32_t digit_one_comma [] = { 0x0031, 0x002C };
	static uint32_t digit_two_comma [] = { 0x0032, 0x002C };
	static uint32_t digit_three_comma [] = { 0x0033, 0x002C };
	static uint32_t digit_four_comma [] = { 0x0034, 0x002C };
	static uint32_t digit_five_comma [] = { 0x0035, 0x002C };
	static uint32_t digit_six_comma [] = { 0x0036, 0x002C };
	static uint32_t digit_seven_comma [] = { 0x0037, 0x002C };
	static uint32_t digit_eight_comma [] = { 0x0038, 0x002C };
	static uint32_t digit_nine_comma [] = { 0x0039, 0x002C };
	static uint32_t parenthesized_latin_capital_letter_a [] = { 0x0028, 0x0041, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_b [] = { 0x0028, 0x0042, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_c [] = { 0x0028, 0x0043, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_d [] = { 0x0028, 0x0044, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_e [] = { 0x0028, 0x0045, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_f [] = { 0x0028, 0x0046, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_g [] = { 0x0028, 0x0047, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_h [] = { 0x0028, 0x0048, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_i [] = { 0x0028, 0x0049, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_j [] = { 0x0028, 0x004A, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_k [] = { 0x0028, 0x004B, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_l [] = { 0x0028, 0x004C, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_m [] = { 0x0028, 0x004D, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_n [] = { 0x0028, 0x004E, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_o [] = { 0x0028, 0x004F, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_p [] = { 0x0028, 0x0050, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_q [] = { 0x0028, 0x0051, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_r [] = { 0x0028, 0x0052, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_s [] = { 0x0028, 0x0053, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_t [] = { 0x0028, 0x0054, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_u [] = { 0x0028, 0x0055, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_v [] = { 0x0028, 0x0056, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_w [] = { 0x0028, 0x0057, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_x [] = { 0x0028, 0x0058, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_y [] = { 0x0028, 0x0059, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_z [] = { 0x0028, 0x005A, 0x0029 };
	static uint32_t tortoise_shell_bracketed_latin_capital_letter_s [] = { 0x3014, 0x0053, 0x3015 };
	static uint32_t circled_italic_latin_capital_letter_c [] = { 0x0043 };
	static uint32_t circled_italic_latin_capital_letter_r [] = { 0x0052 };
	static uint32_t circled_cd [] = { 0x0043, 0x0044 };
	static uint32_t circled_wz [] = { 0x0057, 0x005A };
	static uint32_t squared_latin_capital_letter_a [] = { 0x0041 };
	static uint32_t squared_latin_capital_letter_b [] = { 0x0042 };
	static uint32_t squared_latin_capital_letter_c [] = { 0x0043 };
	static uint32_t squared_latin_capital_letter_d [] = { 0x0044 };
	static uint32_t squared_latin_capital_letter_e [] = { 0x0045 };
	static uint32_t squared_latin_capital_letter_f [] = { 0x0046 };
	static uint32_t squared_latin_capital_letter_g [] = { 0x0047 };
	static uint32_t squared_latin_capital_letter_h [] = { 0x0048 };
	static uint32_t squared_latin_capital_letter_i [] = { 0x0049 };
	static uint32_t squared_latin_capital_letter_j [] = { 0x004A };
	static uint32_t squared_latin_capital_letter_k [] = { 0x004B };
	static uint32_t squared_latin_capital_letter_l [] = { 0x004C };
	static uint32_t squared_latin_capital_letter_m [] = { 0x004D };
	static uint32_t squared_latin_capital_letter_n [] = { 0x004E };
	static uint32_t squared_latin_capital_letter_o [] = { 0x004F };
	static uint32_t squared_latin_capital_letter_p [] = { 0x0050 };
	static uint32_t squared_latin_capital_letter_q [] = { 0x0051 };
	static uint32_t squared_latin_capital_letter_r [] = { 0x0052 };
	static uint32_t squared_latin_capital_letter_s [] = { 0x0053 };
	static uint32_t squared_latin_capital_letter_t [] = { 0x0054 };
	static uint32_t squared_latin_capital_letter_u [] = { 0x0055 };
	static uint32_t squared_latin_capital_letter_v [] = { 0x0056 };
	static uint32_t squared_latin_capital_letter_w [] = { 0x0057 };
	static uint32_t squared_latin_capital_letter_x [] = { 0x0058 };
	static uint32_t squared_latin_capital_letter_y [] = { 0x0059 };
	static uint32_t squared_latin_capital_letter_z [] = { 0x005A };
	static uint32_t squared_hv [] = { 0x0048, 0x0056 };
	static uint32_t squared_mv [] = { 0x004D, 0x0056 };
	static uint32_t squared_sd [] = { 0x0053, 0x0044 };
	static uint32_t squared_ss [] = { 0x0053, 0x0053 };
	static uint32_t squared_ppv [] = { 0x0050, 0x0050, 0x0056 };
	static uint32_t squared_wc [] = { 0x0057, 0x0043 };
	static uint32_t raised_mc_sign [] = { 0x004D, 0x0043 };
	static uint32_t raised_md_sign [] = { 0x004D, 0x0044 };
	static uint32_t raised_mr_sign [] = { 0x004D, 0x0052 };
	static uint32_t square_dj [] = { 0x0044, 0x004A };
	static uint32_t square_hiragana_hoka [] = { 0x307B, 0x304B };
	static uint32_t squared_katakana_koko [] = { 0x30B3, 0x30B3 };
	static uint32_t squared_katakana_sa [] = { 0x30B5 };
	static uint32_t squared_cjk_unified_ideograph_624b [] = { 0x624B };
	static uint32_t squared_cjk_unified_ideograph_5b57 [] = { 0x5B57 };
	static uint32_t squared_cjk_unified_ideograph_53cc [] = { 0x53CC };
	static uint32_t squared_katakana_de [] = { 0x30C7 };
	static uint32_t squared_cjk_unified_ideograph_4e8c [] = { 0x4E8C };
	static uint32_t squared_cjk_unified_ideograph_591a [] = { 0x591A };
	static uint32_t squared_cjk_unified_ideograph_89e3 [] = { 0x89E3 };
	static uint32_t squared_cjk_unified_ideograph_5929 [] = { 0x5929 };
	static uint32_t squared_cjk_unified_ideograph_4ea4 [] = { 0x4EA4 };
	static uint32_t squared_cjk_unified_ideograph_6620 [] = { 0x6620 };
	static uint32_t squared_cjk_unified_ideograph_7121 [] = { 0x7121 };
	static uint32_t squared_cjk_unified_ideograph_6599 [] = { 0x6599 };
	static uint32_t squared_cjk_unified_ideograph_524d [] = { 0x524D };
	static uint32_t squared_cjk_unified_ideograph_5f8c [] = { 0x5F8C };
	static uint32_t squared_cjk_unified_ideograph_518d [] = { 0x518D };
	static uint32_t squared_cjk_unified_ideograph_65b0 [] = { 0x65B0 };
	static uint32_t squared_cjk_unified_ideograph_521d [] = { 0x521D };
	static uint32_t squared_cjk_unified_ideograph_7d42 [] = { 0x7D42 };
	static uint32_t squared_cjk_unified_ideograph_751f [] = { 0x751F };
	static uint32_t squared_cjk_unified_ideograph_8ca9 [] = { 0x8CA9 };
	static uint32_t squared_cjk_unified_ideograph_58f0 [] = { 0x58F0 };
	static uint32_t squared_cjk_unified_ideograph_5439 [] = { 0x5439 };
	static uint32_t squared_cjk_unified_ideograph_6f14 [] = { 0x6F14 };
	static uint32_t squared_cjk_unified_ideograph_6295 [] = { 0x6295 };
	static uint32_t squared_cjk_unified_ideograph_6355 [] = { 0x6355 };
	static uint32_t squared_cjk_unified_ideograph_4e00 [] = { 0x4E00 };
	static uint32_t squared_cjk_unified_ideograph_4e09 [] = { 0x4E09 };
	static uint32_t squared_cjk_unified_ideograph_904a [] = { 0x904A };
	static uint32_t squared_cjk_unified_ideograph_5de6 [] = { 0x5DE6 };
	static uint32_t squared_cjk_unified_ideograph_4e2d [] = { 0x4E2D };
	static uint32_t squared_cjk_unified_ideograph_53f3 [] = { 0x53F3 };
	static uint32_t squared_cjk_unified_ideograph_6307 [] = { 0x6307 };
	static uint32_t squared_cjk_unified_ideograph_8d70 [] = { 0x8D70 };
	static uint32_t squared_cjk_unified_ideograph_6253 [] = { 0x6253 };
	static uint32_t squared_cjk_unified_ideograph_7981 [] = { 0x7981 };
	static uint32_t squared_cjk_unified_ideograph_7a7a [] = { 0x7A7A };
	static uint32_t squared_cjk_unified_ideograph_5408 [] = { 0x5408 };
	static uint32_t squared_cjk_unified_ideograph_6e80 [] = { 0x6E80 };
	static uint32_t squared_cjk_unified_ideograph_6709 [] = { 0x6709 };
	static uint32_t squared_cjk_unified_ideograph_6708 [] = { 0x6708 };
	static uint32_t squared_cjk_unified_ideograph_7533 [] = { 0x7533 };
	static uint32_t squared_cjk_unified_ideograph_5272 [] = { 0x5272 };
	static uint32_t squared_cjk_unified_ideograph_55b6 [] = { 0x55B6 };
	static uint32_t squared_cjk_unified_ideograph_914d [] = { 0x914D };
	static uint32_t tortoise_shell_bracketed_cjk_unified_ideograph_672c [] = { 0x3014, 0x672C, 0x3015 };
	static uint32_t tortoise_shell_bracketed_cjk_unified_ideograph_4e09 [] = { 0x3014, 0x4E09, 0x3015 };
	static uint32_t tortoise_shell_bracketed_cjk_unified_ideograph_4e8c [] = { 0x3014, 0x4E8C, 0x3015 };
	static uint32_t tortoise_shell_bracketed_cjk_unified_ideograph_5b89 [] = { 0x3014, 0x5B89, 0x3015 };
	static uint32_t tortoise_shell_bracketed_cjk_unified_ideograph_70b9 [] = { 0x3014, 0x70B9, 0x3015 };
	static uint32_t tortoise_shell_bracketed_cjk_unified_ideograph_6253 [] = { 0x3014, 0x6253, 0x3015 };
	static uint32_t tortoise_shell_bracketed_cjk_unified_ideograph_76d7 [] = { 0x3014, 0x76D7, 0x3015 };
	static uint32_t tortoise_shell_bracketed_cjk_unified_ideograph_52dd [] = { 0x3014, 0x52DD, 0x3015 };
	static uint32_t tortoise_shell_bracketed_cjk_unified_ideograph_6557 [] = { 0x3014, 0x6557, 0x3015 };
	static uint32_t circled_ideograph_advantage [] = { 0x5F97 };
	static uint32_t circled_ideograph_accept [] = { 0x53EF };
	static uint32_t segmented_digit_zero [] = { 0x0030 };
	static uint32_t segmented_digit_one [] = { 0x0031 };
	static uint32_t segmented_digit_two [] = { 0x0032 };
	static uint32_t segmented_digit_three [] = { 0x0033 };
	static uint32_t segmented_digit_four [] = { 0x0034 };
	static uint32_t segmented_digit_five [] = { 0x0035 };
	static uint32_t segmented_digit_six [] = { 0x0036 };
	static uint32_t segmented_digit_seven [] = { 0x0037 };
	static uint32_t segmented_digit_eight [] = { 0x0038 };
	static uint32_t segmented_digit_nine [] = { 0x0039 };
	static uint32_t cjk_compatibility_ideograph_2f800 [] = { 0x4E3D };
	static uint32_t cjk_compatibility_ideograph_2f801 [] = { 0x4E38 };
	static uint32_t cjk_compatibility_ideograph_2f802 [] = { 0x4E41 };
	static uint32_t cjk_compatibility_ideograph_2f803 [] = { 0x20122 };
	static uint32_t cjk_compatibility_ideograph_2f804 [] = { 0x4F60 };
	static uint32_t cjk_compatibility_ideograph_2f805 [] = { 0x4FAE };
	static uint32_t cjk_compatibility_ideograph_2f806 [] = { 0x4FBB };
	static uint32_t cjk_compatibility_ideograph_2f807 [] = { 0x5002 };
	static uint32_t cjk_compatibility_ideograph_2f808 [] = { 0x507A };
	static uint32_t cjk_compatibility_ideograph_2f809 [] = { 0x5099 };
	static uint32_t cjk_compatibility_ideograph_2f80a [] = { 0x50E7 };
	static uint32_t cjk_compatibility_ideograph_2f80b [] = { 0x50CF };
	static uint32_t cjk_compatibility_ideograph_2f80c [] = { 0x349E };
	static uint32_t cjk_compatibility_ideograph_2f80d [] = { 0x2063A };
	static uint32_t cjk_compatibility_ideograph_2f80e [] = { 0x514D };
	static uint32_t cjk_compatibility_ideograph_2f80f [] = { 0x5154 };
	static uint32_t cjk_compatibility_ideograph_2f810 [] = { 0x5164 };
	static uint32_t cjk_compatibility_ideograph_2f811 [] = { 0x5177 };
	static uint32_t cjk_compatibility_ideograph_2f812 [] = { 0x2051C };
	static uint32_t cjk_compatibility_ideograph_2f813 [] = { 0x34B9 };
	static uint32_t cjk_compatibility_ideograph_2f814 [] = { 0x5167 };
	static uint32_t cjk_compatibility_ideograph_2f815 [] = { 0x518D };
	static uint32_t cjk_compatibility_ideograph_2f816 [] = { 0x2054B };
	static uint32_t cjk_compatibility_ideograph_2f817 [] = { 0x5197 };
	static uint32_t cjk_compatibility_ideograph_2f818 [] = { 0x51A4 };
	static uint32_t cjk_compatibility_ideograph_2f819 [] = { 0x4ECC };
	static uint32_t cjk_compatibility_ideograph_2f81a [] = { 0x51AC };
	static uint32_t cjk_compatibility_ideograph_2f81b [] = { 0x51B5 };
	static uint32_t cjk_compatibility_ideograph_2f81c [] = { 0x291DF };
	static uint32_t cjk_compatibility_ideograph_2f81d [] = { 0x51F5 };
	static uint32_t cjk_compatibility_ideograph_2f81e [] = { 0x5203 };
	static uint32_t cjk_compatibility_ideograph_2f81f [] = { 0x34DF };
	static uint32_t cjk_compatibility_ideograph_2f820 [] = { 0x523B };
	static uint32_t cjk_compatibility_ideograph_2f821 [] = { 0x5246 };
	static uint32_t cjk_compatibility_ideograph_2f822 [] = { 0x5272 };
	static uint32_t cjk_compatibility_ideograph_2f823 [] = { 0x5277 };
	static uint32_t cjk_compatibility_ideograph_2f824 [] = { 0x3515 };
	static uint32_t cjk_compatibility_ideograph_2f825 [] = { 0x52C7 };
	static uint32_t cjk_compatibility_ideograph_2f826 [] = { 0x52C9 };
	static uint32_t cjk_compatibility_ideograph_2f827 [] = { 0x52E4 };
	static uint32_t cjk_compatibility_ideograph_2f828 [] = { 0x52FA };
	static uint32_t cjk_compatibility_ideograph_2f829 [] = { 0x5305 };
	static uint32_t cjk_compatibility_ideograph_2f82a [] = { 0x5306 };
	static uint32_t cjk_compatibility_ideograph_2f82b [] = { 0x5317 };
	static uint32_t cjk_compatibility_ideograph_2f82c [] = { 0x5349 };
	static uint32_t cjk_compatibility_ideograph_2f82d [] = { 0x5351 };
	static uint32_t cjk_compatibility_ideograph_2f82e [] = { 0x535A };
	static uint32_t cjk_compatibility_ideograph_2f82f [] = { 0x5373 };
	static uint32_t cjk_compatibility_ideograph_2f830 [] = { 0x537D };
	static uint32_t cjk_compatibility_ideograph_2f831 [] = { 0x537F };
	static uint32_t cjk_compatibility_ideograph_2f832 [] = { 0x537F };
	static uint32_t cjk_compatibility_ideograph_2f833 [] = { 0x537F };
	static uint32_t cjk_compatibility_ideograph_2f834 [] = { 0x20A2C };
	static uint32_t cjk_compatibility_ideograph_2f835 [] = { 0x7070 };
	static uint32_t cjk_compatibility_ideograph_2f836 [] = { 0x53CA };
	static uint32_t cjk_compatibility_ideograph_2f837 [] = { 0x53DF };
	static uint32_t cjk_compatibility_ideograph_2f838 [] = { 0x20B63 };
	static uint32_t cjk_compatibility_ideograph_2f839 [] = { 0x53EB };
	static uint32_t cjk_compatibility_ideograph_2f83a [] = { 0x53F1 };
	static uint32_t cjk_compatibility_ideograph_2f83b [] = { 0x5406 };
	static uint32_t cjk_compatibility_ideograph_2f83c [] = { 0x549E };
	static uint32_t cjk_compatibility_ideograph_2f83d [] = { 0x5438 };
	static uint32_t cjk_compatibility_ideograph_2f83e [] = { 0x5448 };
	static uint32_t cjk_compatibility_ideograph_2f83f [] = { 0x5468 };
	static uint32_t cjk_compatibility_ideograph_2f840 [] = { 0x54A2 };
	static uint32_t cjk_compatibility_ideograph_2f841 [] = { 0x54F6 };
	static uint32_t cjk_compatibility_ideograph_2f842 [] = { 0x5510 };
	static uint32_t cjk_compatibility_ideograph_2f843 [] = { 0x5553 };
	static uint32_t cjk_compatibility_ideograph_2f844 [] = { 0x5563 };
	static uint32_t cjk_compatibility_ideograph_2f845 [] = { 0x5584 };
	static uint32_t cjk_compatibility_ideograph_2f846 [] = { 0x5584 };
	static uint32_t cjk_compatibility_ideograph_2f847 [] = { 0x5599 };
	static uint32_t cjk_compatibility_ideograph_2f848 [] = { 0x55AB };
	static uint32_t cjk_compatibility_ideograph_2f849 [] = { 0x55B3 };
	static uint32_t cjk_compatibility_ideograph_2f84a [] = { 0x55C2 };
	static uint32_t cjk_compatibility_ideograph_2f84b [] = { 0x5716 };
	static uint32_t cjk_compatibility_ideograph_2f84c [] = { 0x5606 };
	static uint32_t cjk_compatibility_ideograph_2f84d [] = { 0x5717 };
	static uint32_t cjk_compatibility_ideograph_2f84e [] = { 0x5651 };
	static uint32_t cjk_compatibility_ideograph_2f84f [] = { 0x5674 };
	static uint32_t cjk_compatibility_ideograph_2f850 [] = { 0x5207 };
	static uint32_t cjk_compatibility_ideograph_2f851 [] = { 0x58EE };
	static uint32_t cjk_compatibility_ideograph_2f852 [] = { 0x57CE };
	static uint32_t cjk_compatibility_ideograph_2f853 [] = { 0x57F4 };
	static uint32_t cjk_compatibility_ideograph_2f854 [] = { 0x580D };
	static uint32_t cjk_compatibility_ideograph_2f855 [] = { 0x578B };
	static uint32_t cjk_compatibility_ideograph_2f856 [] = { 0x5832 };
	static uint32_t cjk_compatibility_ideograph_2f857 [] = { 0x5831 };
	static uint32_t cjk_compatibility_ideograph_2f858 [] = { 0x58AC };
	static uint32_t cjk_compatibility_ideograph_2f859 [] = { 0x214E4 };
	static uint32_t cjk_compatibility_ideograph_2f85a [] = { 0x58F2 };
	static uint32_t cjk_compatibility_ideograph_2f85b [] = { 0x58F7 };
	static uint32_t cjk_compatibility_ideograph_2f85c [] = { 0x5906 };
	static uint32_t cjk_compatibility_ideograph_2f85d [] = { 0x591A };
	static uint32_t cjk_compatibility_ideograph_2f85e [] = { 0x5922 };
	static uint32_t cjk_compatibility_ideograph_2f85f [] = { 0x5962 };
	static uint32_t cjk_compatibility_ideograph_2f860 [] = { 0x216A8 };
	static uint32_t cjk_compatibility_ideograph_2f861 [] = { 0x216EA };
	static uint32_t cjk_compatibility_ideograph_2f862 [] = { 0x59EC };
	static uint32_t cjk_compatibility_ideograph_2f863 [] = { 0x5A1B };
	static uint32_t cjk_compatibility_ideograph_2f864 [] = { 0x5A27 };
	static uint32_t cjk_compatibility_ideograph_2f865 [] = { 0x59D8 };
	static uint32_t cjk_compatibility_ideograph_2f866 [] = { 0x5A66 };
	static uint32_t cjk_compatibility_ideograph_2f867 [] = { 0x36EE };
	static uint32_t cjk_compatibility_ideograph_2f868 [] = { 0x36FC };
	static uint32_t cjk_compatibility_ideograph_2f869 [] = { 0x5B08 };
	static uint32_t cjk_compatibility_ideograph_2f86a [] = { 0x5B3E };
	static uint32_t cjk_compatibility_ideograph_2f86b [] = { 0x5B3E };
	static uint32_t cjk_compatibility_ideograph_2f86c [] = { 0x219C8 };
	static uint32_t cjk_compatibility_ideograph_2f86d [] = { 0x5BC3 };
	static uint32_t cjk_compatibility_ideograph_2f86e [] = { 0x5BD8 };
	static uint32_t cjk_compatibility_ideograph_2f86f [] = { 0x5BE7 };
	static uint32_t cjk_compatibility_ideograph_2f870 [] = { 0x5BF3 };
	static uint32_t cjk_compatibility_ideograph_2f871 [] = { 0x21B18 };
	static uint32_t cjk_compatibility_ideograph_2f872 [] = { 0x5BFF };
	static uint32_t cjk_compatibility_ideograph_2f873 [] = { 0x5C06 };
	static uint32_t cjk_compatibility_ideograph_2f874 [] = { 0x5F53 };
	static uint32_t cjk_compatibility_ideograph_2f875 [] = { 0x5C22 };
	static uint32_t cjk_compatibility_ideograph_2f876 [] = { 0x3781 };
	static uint32_t cjk_compatibility_ideograph_2f877 [] = { 0x5C60 };
	static uint32_t cjk_compatibility_ideograph_2f878 [] = { 0x5C6E };
	static uint32_t cjk_compatibility_ideograph_2f879 [] = { 0x5CC0 };
	static uint32_t cjk_compatibility_ideograph_2f87a [] = { 0x5C8D };
	static uint32_t cjk_compatibility_ideograph_2f87b [] = { 0x21DE4 };
	static uint32_t cjk_compatibility_ideograph_2f87c [] = { 0x5D43 };
	static uint32_t cjk_compatibility_ideograph_2f87d [] = { 0x21DE6 };
	static uint32_t cjk_compatibility_ideograph_2f87e [] = { 0x5D6E };
	static uint32_t cjk_compatibility_ideograph_2f87f [] = { 0x5D6B };
	static uint32_t cjk_compatibility_ideograph_2f880 [] = { 0x5D7C };
	static uint32_t cjk_compatibility_ideograph_2f881 [] = { 0x5DE1 };
	static uint32_t cjk_compatibility_ideograph_2f882 [] = { 0x5DE2 };
	static uint32_t cjk_compatibility_ideograph_2f883 [] = { 0x382F };
	static uint32_t cjk_compatibility_ideograph_2f884 [] = { 0x5DFD };
	static uint32_t cjk_compatibility_ideograph_2f885 [] = { 0x5E28 };
	static uint32_t cjk_compatibility_ideograph_2f886 [] = { 0x5E3D };
	static uint32_t cjk_compatibility_ideograph_2f887 [] = { 0x5E69 };
	static uint32_t cjk_compatibility_ideograph_2f888 [] = { 0x3862 };
	static uint32_t cjk_compatibility_ideograph_2f889 [] = { 0x22183 };
	static uint32_t cjk_compatibility_ideograph_2f88a [] = { 0x387C };
	static uint32_t cjk_compatibility_ideograph_2f88b [] = { 0x5EB0 };
	static uint32_t cjk_compatibility_ideograph_2f88c [] = { 0x5EB3 };
	static uint32_t cjk_compatibility_ideograph_2f88d [] = { 0x5EB6 };
	static uint32_t cjk_compatibility_ideograph_2f88e [] = { 0x5ECA };
	static uint32_t cjk_compatibility_ideograph_2f88f [] = { 0x2A392 };
	static uint32_t cjk_compatibility_ideograph_2f890 [] = { 0x5EFE };
	static uint32_t cjk_compatibility_ideograph_2f891 [] = { 0x22331 };
	static uint32_t cjk_compatibility_ideograph_2f892 [] = { 0x22331 };
	static uint32_t cjk_compatibility_ideograph_2f893 [] = { 0x8201 };
	static uint32_t cjk_compatibility_ideograph_2f894 [] = { 0x5F22 };
	static uint32_t cjk_compatibility_ideograph_2f895 [] = { 0x5F22 };
	static uint32_t cjk_compatibility_ideograph_2f896 [] = { 0x38C7 };
	static uint32_t cjk_compatibility_ideograph_2f897 [] = { 0x232B8 };
	static uint32_t cjk_compatibility_ideograph_2f898 [] = { 0x261DA };
	static uint32_t cjk_compatibility_ideograph_2f899 [] = { 0x5F62 };
	static uint32_t cjk_compatibility_ideograph_2f89a [] = { 0x5F6B };
	static uint32_t cjk_compatibility_ideograph_2f89b [] = { 0x38E3 };
	static uint32_t cjk_compatibility_ideograph_2f89c [] = { 0x5F9A };
	static uint32_t cjk_compatibility_ideograph_2f89d [] = { 0x5FCD };
	static uint32_t cjk_compatibility_ideograph_2f89e [] = { 0x5FD7 };
	static uint32_t cjk_compatibility_ideograph_2f89f [] = { 0x5FF9 };
	static uint32_t cjk_compatibility_ideograph_2f8a0 [] = { 0x6081 };
	static uint32_t cjk_compatibility_ideograph_2f8a1 [] = { 0x393A };
	static uint32_t cjk_compatibility_ideograph_2f8a2 [] = { 0x391C };
	static uint32_t cjk_compatibility_ideograph_2f8a3 [] = { 0x6094 };
	static uint32_t cjk_compatibility_ideograph_2f8a4 [] = { 0x226D4 };
	static uint32_t cjk_compatibility_ideograph_2f8a5 [] = { 0x60C7 };
	static uint32_t cjk_compatibility_ideograph_2f8a6 [] = { 0x6148 };
	static uint32_t cjk_compatibility_ideograph_2f8a7 [] = { 0x614C };
	static uint32_t cjk_compatibility_ideograph_2f8a8 [] = { 0x614E };
	static uint32_t cjk_compatibility_ideograph_2f8a9 [] = { 0x614C };
	static uint32_t cjk_compatibility_ideograph_2f8aa [] = { 0x617A };
	static uint32_t cjk_compatibility_ideograph_2f8ab [] = { 0x618E };
	static uint32_t cjk_compatibility_ideograph_2f8ac [] = { 0x61B2 };
	static uint32_t cjk_compatibility_ideograph_2f8ad [] = { 0x61A4 };
	static uint32_t cjk_compatibility_ideograph_2f8ae [] = { 0x61AF };
	static uint32_t cjk_compatibility_ideograph_2f8af [] = { 0x61DE };
	static uint32_t cjk_compatibility_ideograph_2f8b0 [] = { 0x61F2 };
	static uint32_t cjk_compatibility_ideograph_2f8b1 [] = { 0x61F6 };
	static uint32_t cjk_compatibility_ideograph_2f8b2 [] = { 0x6210 };
	static uint32_t cjk_compatibility_ideograph_2f8b3 [] = { 0x621B };
	static uint32_t cjk_compatibility_ideograph_2f8b4 [] = { 0x625D };
	static uint32_t cjk_compatibility_ideograph_2f8b5 [] = { 0x62B1 };
	static uint32_t cjk_compatibility_ideograph_2f8b6 [] = { 0x62D4 };
	static uint32_t cjk_compatibility_ideograph_2f8b7 [] = { 0x6350 };
	static uint32_t cjk_compatibility_ideograph_2f8b8 [] = { 0x22B0C };
	static uint32_t cjk_compatibility_ideograph_2f8b9 [] = { 0x633D };
	static uint32_t cjk_compatibility_ideograph_2f8ba [] = { 0x62FC };
	static uint32_t cjk_compatibility_ideograph_2f8bb [] = { 0x6368 };
	static uint32_t cjk_compatibility_ideograph_2f8bc [] = { 0x6383 };
	static uint32_t cjk_compatibility_ideograph_2f8bd [] = { 0x63E4 };
	static uint32_t cjk_compatibility_ideograph_2f8be [] = { 0x22BF1 };
	static uint32_t cjk_compatibility_ideograph_2f8bf [] = { 0x6422 };
	static uint32_t cjk_compatibility_ideograph_2f8c0 [] = { 0x63C5 };
	static uint32_t cjk_compatibility_ideograph_2f8c1 [] = { 0x63A9 };
	static uint32_t cjk_compatibility_ideograph_2f8c2 [] = { 0x3A2E };
	static uint32_t cjk_compatibility_ideograph_2f8c3 [] = { 0x6469 };
	static uint32_t cjk_compatibility_ideograph_2f8c4 [] = { 0x647E };
	static uint32_t cjk_compatibility_ideograph_2f8c5 [] = { 0x649D };
	static uint32_t cjk_compatibility_ideograph_2f8c6 [] = { 0x6477 };
	static uint32_t cjk_compatibility_ideograph_2f8c7 [] = { 0x3A6C };
	static uint32_t cjk_compatibility_ideograph_2f8c8 [] = { 0x654F };
	static uint32_t cjk_compatibility_ideograph_2f8c9 [] = { 0x656C };
	static uint32_t cjk_compatibility_ideograph_2f8ca [] = { 0x2300A };
	static uint32_t cjk_compatibility_ideograph_2f8cb [] = { 0x65E3 };
	static uint32_t cjk_compatibility_ideograph_2f8cc [] = { 0x66F8 };
	static uint32_t cjk_compatibility_ideograph_2f8cd [] = { 0x6649 };
	static uint32_t cjk_compatibility_ideograph_2f8ce [] = { 0x3B19 };
	static uint32_t cjk_compatibility_ideograph_2f8cf [] = { 0x6691 };
	static uint32_t cjk_compatibility_ideograph_2f8d0 [] = { 0x3B08 };
	static uint32_t cjk_compatibility_ideograph_2f8d1 [] = { 0x3AE4 };
	static uint32_t cjk_compatibility_ideograph_2f8d2 [] = { 0x5192 };
	static uint32_t cjk_compatibility_ideograph_2f8d3 [] = { 0x5195 };
	static uint32_t cjk_compatibility_ideograph_2f8d4 [] = { 0x6700 };
	static uint32_t cjk_compatibility_ideograph_2f8d5 [] = { 0x669C };
	static uint32_t cjk_compatibility_ideograph_2f8d6 [] = { 0x80AD };
	static uint32_t cjk_compatibility_ideograph_2f8d7 [] = { 0x43D9 };
	static uint32_t cjk_compatibility_ideograph_2f8d8 [] = { 0x6717 };
	static uint32_t cjk_compatibility_ideograph_2f8d9 [] = { 0x671B };
	static uint32_t cjk_compatibility_ideograph_2f8da [] = { 0x6721 };
	static uint32_t cjk_compatibility_ideograph_2f8db [] = { 0x675E };
	static uint32_t cjk_compatibility_ideograph_2f8dc [] = { 0x6753 };
	static uint32_t cjk_compatibility_ideograph_2f8dd [] = { 0x233C3 };
	static uint32_t cjk_compatibility_ideograph_2f8de [] = { 0x3B49 };
	static uint32_t cjk_compatibility_ideograph_2f8df [] = { 0x67FA };
	static uint32_t cjk_compatibility_ideograph_2f8e0 [] = { 0x6785 };
	static uint32_t cjk_compatibility_ideograph_2f8e1 [] = { 0x6852 };
	static uint32_t cjk_compatibility_ideograph_2f8e2 [] = { 0x6885 };
	static uint32_t cjk_compatibility_ideograph_2f8e3 [] = { 0x2346D };
	static uint32_t cjk_compatibility_ideograph_2f8e4 [] = { 0x688E };
	static uint32_t cjk_compatibility_ideograph_2f8e5 [] = { 0x681F };
	static uint32_t cjk_compatibility_ideograph_2f8e6 [] = { 0x6914 };
	static uint32_t cjk_compatibility_ideograph_2f8e7 [] = { 0x3B9D };
	static uint32_t cjk_compatibility_ideograph_2f8e8 [] = { 0x6942 };
	static uint32_t cjk_compatibility_ideograph_2f8e9 [] = { 0x69A3 };
	static uint32_t cjk_compatibility_ideograph_2f8ea [] = { 0x69EA };
	static uint32_t cjk_compatibility_ideograph_2f8eb [] = { 0x6AA8 };
	static uint32_t cjk_compatibility_ideograph_2f8ec [] = { 0x236A3 };
	static uint32_t cjk_compatibility_ideograph_2f8ed [] = { 0x6ADB };
	static uint32_t cjk_compatibility_ideograph_2f8ee [] = { 0x3C18 };
	static uint32_t cjk_compatibility_ideograph_2f8ef [] = { 0x6B21 };
	static uint32_t cjk_compatibility_ideograph_2f8f0 [] = { 0x238A7 };
	static uint32_t cjk_compatibility_ideograph_2f8f1 [] = { 0x6B54 };
	static uint32_t cjk_compatibility_ideograph_2f8f2 [] = { 0x3C4E };
	static uint32_t cjk_compatibility_ideograph_2f8f3 [] = { 0x6B72 };
	static uint32_t cjk_compatibility_ideograph_2f8f4 [] = { 0x6B9F };
	static uint32_t cjk_compatibility_ideograph_2f8f5 [] = { 0x6BBA };
	static uint32_t cjk_compatibility_ideograph_2f8f6 [] = { 0x6BBB };
	static uint32_t cjk_compatibility_ideograph_2f8f7 [] = { 0x23A8D };
	static uint32_t cjk_compatibility_ideograph_2f8f8 [] = { 0x21D0B };
	static uint32_t cjk_compatibility_ideograph_2f8f9 [] = { 0x23AFA };
	static uint32_t cjk_compatibility_ideograph_2f8fa [] = { 0x6C4E };
	static uint32_t cjk_compatibility_ideograph_2f8fb [] = { 0x23CBC };
	static uint32_t cjk_compatibility_ideograph_2f8fc [] = { 0x6CBF };
	static uint32_t cjk_compatibility_ideograph_2f8fd [] = { 0x6CCD };
	static uint32_t cjk_compatibility_ideograph_2f8fe [] = { 0x6C67 };
	static uint32_t cjk_compatibility_ideograph_2f8ff [] = { 0x6D16 };
	static uint32_t cjk_compatibility_ideograph_2f900 [] = { 0x6D3E };
	static uint32_t cjk_compatibility_ideograph_2f901 [] = { 0x6D77 };
	static uint32_t cjk_compatibility_ideograph_2f902 [] = { 0x6D41 };
	static uint32_t cjk_compatibility_ideograph_2f903 [] = { 0x6D69 };
	static uint32_t cjk_compatibility_ideograph_2f904 [] = { 0x6D78 };
	static uint32_t cjk_compatibility_ideograph_2f905 [] = { 0x6D85 };
	static uint32_t cjk_compatibility_ideograph_2f906 [] = { 0x23D1E };
	static uint32_t cjk_compatibility_ideograph_2f907 [] = { 0x6D34 };
	static uint32_t cjk_compatibility_ideograph_2f908 [] = { 0x6E2F };
	static uint32_t cjk_compatibility_ideograph_2f909 [] = { 0x6E6E };
	static uint32_t cjk_compatibility_ideograph_2f90a [] = { 0x3D33 };
	static uint32_t cjk_compatibility_ideograph_2f90b [] = { 0x6ECB };
	static uint32_t cjk_compatibility_ideograph_2f90c [] = { 0x6EC7 };
	static uint32_t cjk_compatibility_ideograph_2f90d [] = { 0x23ED1 };
	static uint32_t cjk_compatibility_ideograph_2f90e [] = { 0x6DF9 };
	static uint32_t cjk_compatibility_ideograph_2f90f [] = { 0x6F6E };
	static uint32_t cjk_compatibility_ideograph_2f910 [] = { 0x23F5E };
	static uint32_t cjk_compatibility_ideograph_2f911 [] = { 0x23F8E };
	static uint32_t cjk_compatibility_ideograph_2f912 [] = { 0x6FC6 };
	static uint32_t cjk_compatibility_ideograph_2f913 [] = { 0x7039 };
	static uint32_t cjk_compatibility_ideograph_2f914 [] = { 0x701E };
	static uint32_t cjk_compatibility_ideograph_2f915 [] = { 0x701B };
	static uint32_t cjk_compatibility_ideograph_2f916 [] = { 0x3D96 };
	static uint32_t cjk_compatibility_ideograph_2f917 [] = { 0x704A };
	static uint32_t cjk_compatibility_ideograph_2f918 [] = { 0x707D };
	static uint32_t cjk_compatibility_ideograph_2f919 [] = { 0x7077 };
	static uint32_t cjk_compatibility_ideograph_2f91a [] = { 0x70AD };
	static uint32_t cjk_compatibility_ideograph_2f91b [] = { 0x20525 };
	static uint32_t cjk_compatibility_ideograph_2f91c [] = { 0x7145 };
	static uint32_t cjk_compatibility_ideograph_2f91d [] = { 0x24263 };
	static uint32_t cjk_compatibility_ideograph_2f91e [] = { 0x719C };
	static uint32_t cjk_compatibility_ideograph_2f91f [] = { 0x243AB };
	static uint32_t cjk_compatibility_ideograph_2f920 [] = { 0x7228 };
	static uint32_t cjk_compatibility_ideograph_2f921 [] = { 0x7235 };
	static uint32_t cjk_compatibility_ideograph_2f922 [] = { 0x7250 };
	static uint32_t cjk_compatibility_ideograph_2f923 [] = { 0x24608 };
	static uint32_t cjk_compatibility_ideograph_2f924 [] = { 0x7280 };
	static uint32_t cjk_compatibility_ideograph_2f925 [] = { 0x7295 };
	static uint32_t cjk_compatibility_ideograph_2f926 [] = { 0x24735 };
	static uint32_t cjk_compatibility_ideograph_2f927 [] = { 0x24814 };
	static uint32_t cjk_compatibility_ideograph_2f928 [] = { 0x737A };
	static uint32_t cjk_compatibility_ideograph_2f929 [] = { 0x738B };
	static uint32_t cjk_compatibility_ideograph_2f92a [] = { 0x3EAC };
	static uint32_t cjk_compatibility_ideograph_2f92b [] = { 0x73A5 };
	static uint32_t cjk_compatibility_ideograph_2f92c [] = { 0x3EB8 };
	static uint32_t cjk_compatibility_ideograph_2f92d [] = { 0x3EB8 };
	static uint32_t cjk_compatibility_ideograph_2f92e [] = { 0x7447 };
	static uint32_t cjk_compatibility_ideograph_2f92f [] = { 0x745C };
	static uint32_t cjk_compatibility_ideograph_2f930 [] = { 0x7471 };
	static uint32_t cjk_compatibility_ideograph_2f931 [] = { 0x7485 };
	static uint32_t cjk_compatibility_ideograph_2f932 [] = { 0x74CA };
	static uint32_t cjk_compatibility_ideograph_2f933 [] = { 0x3F1B };
	static uint32_t cjk_compatibility_ideograph_2f934 [] = { 0x7524 };
	static uint32_t cjk_compatibility_ideograph_2f935 [] = { 0x24C36 };
	static uint32_t cjk_compatibility_ideograph_2f936 [] = { 0x753E };
	static uint32_t cjk_compatibility_ideograph_2f937 [] = { 0x24C92 };
	static uint32_t cjk_compatibility_ideograph_2f938 [] = { 0x7570 };
	static uint32_t cjk_compatibility_ideograph_2f939 [] = { 0x2219F };
	static uint32_t cjk_compatibility_ideograph_2f93a [] = { 0x7610 };
	static uint32_t cjk_compatibility_ideograph_2f93b [] = { 0x24FA1 };
	static uint32_t cjk_compatibility_ideograph_2f93c [] = { 0x24FB8 };
	static uint32_t cjk_compatibility_ideograph_2f93d [] = { 0x25044 };
	static uint32_t cjk_compatibility_ideograph_2f93e [] = { 0x3FFC };
	static uint32_t cjk_compatibility_ideograph_2f93f [] = { 0x4008 };
	static uint32_t cjk_compatibility_ideograph_2f940 [] = { 0x76F4 };
	static uint32_t cjk_compatibility_ideograph_2f941 [] = { 0x250F3 };
	static uint32_t cjk_compatibility_ideograph_2f942 [] = { 0x250F2 };
	static uint32_t cjk_compatibility_ideograph_2f943 [] = { 0x25119 };
	static uint32_t cjk_compatibility_ideograph_2f944 [] = { 0x25133 };
	static uint32_t cjk_compatibility_ideograph_2f945 [] = { 0x771E };
	static uint32_t cjk_compatibility_ideograph_2f946 [] = { 0x771F };
	static uint32_t cjk_compatibility_ideograph_2f947 [] = { 0x771F };
	static uint32_t cjk_compatibility_ideograph_2f948 [] = { 0x774A };
	static uint32_t cjk_compatibility_ideograph_2f949 [] = { 0x4039 };
	static uint32_t cjk_compatibility_ideograph_2f94a [] = { 0x778B };
	static uint32_t cjk_compatibility_ideograph_2f94b [] = { 0x4046 };
	static uint32_t cjk_compatibility_ideograph_2f94c [] = { 0x4096 };
	static uint32_t cjk_compatibility_ideograph_2f94d [] = { 0x2541D };
	static uint32_t cjk_compatibility_ideograph_2f94e [] = { 0x784E };
	static uint32_t cjk_compatibility_ideograph_2f94f [] = { 0x788C };
	static uint32_t cjk_compatibility_ideograph_2f950 [] = { 0x78CC };
	static uint32_t cjk_compatibility_ideograph_2f951 [] = { 0x40E3 };
	static uint32_t cjk_compatibility_ideograph_2f952 [] = { 0x25626 };
	static uint32_t cjk_compatibility_ideograph_2f953 [] = { 0x7956 };
	static uint32_t cjk_compatibility_ideograph_2f954 [] = { 0x2569A };
	static uint32_t cjk_compatibility_ideograph_2f955 [] = { 0x256C5 };
	static uint32_t cjk_compatibility_ideograph_2f956 [] = { 0x798F };
	static uint32_t cjk_compatibility_ideograph_2f957 [] = { 0x79EB };
	static uint32_t cjk_compatibility_ideograph_2f958 [] = { 0x412F };
	static uint32_t cjk_compatibility_ideograph_2f959 [] = { 0x7A40 };
	static uint32_t cjk_compatibility_ideograph_2f95a [] = { 0x7A4A };
	static uint32_t cjk_compatibility_ideograph_2f95b [] = { 0x7A4F };
	static uint32_t cjk_compatibility_ideograph_2f95c [] = { 0x2597C };
	static uint32_t cjk_compatibility_ideograph_2f95d [] = { 0x25AA7 };
	static uint32_t cjk_compatibility_ideograph_2f95e [] = { 0x25AA7 };
	static uint32_t cjk_compatibility_ideograph_2f95f [] = { 0x7AEE };
	static uint32_t cjk_compatibility_ideograph_2f960 [] = { 0x4202 };
	static uint32_t cjk_compatibility_ideograph_2f961 [] = { 0x25BAB };
	static uint32_t cjk_compatibility_ideograph_2f962 [] = { 0x7BC6 };
	static uint32_t cjk_compatibility_ideograph_2f963 [] = { 0x7BC9 };
	static uint32_t cjk_compatibility_ideograph_2f964 [] = { 0x4227 };
	static uint32_t cjk_compatibility_ideograph_2f965 [] = { 0x25C80 };
	static uint32_t cjk_compatibility_ideograph_2f966 [] = { 0x7CD2 };
	static uint32_t cjk_compatibility_ideograph_2f967 [] = { 0x42A0 };
	static uint32_t cjk_compatibility_ideograph_2f968 [] = { 0x7CE8 };
	static uint32_t cjk_compatibility_ideograph_2f969 [] = { 0x7CE3 };
	static uint32_t cjk_compatibility_ideograph_2f96a [] = { 0x7D00 };
	static uint32_t cjk_compatibility_ideograph_2f96b [] = { 0x25F86 };
	static uint32_t cjk_compatibility_ideograph_2f96c [] = { 0x7D63 };
	static uint32_t cjk_compatibility_ideograph_2f96d [] = { 0x4301 };
	static uint32_t cjk_compatibility_ideograph_2f96e [] = { 0x7DC7 };
	static uint32_t cjk_compatibility_ideograph_2f96f [] = { 0x7E02 };
	static uint32_t cjk_compatibility_ideograph_2f970 [] = { 0x7E45 };
	static uint32_t cjk_compatibility_ideograph_2f971 [] = { 0x4334 };
	static uint32_t cjk_compatibility_ideograph_2f972 [] = { 0x26228 };
	static uint32_t cjk_compatibility_ideograph_2f973 [] = { 0x26247 };
	static uint32_t cjk_compatibility_ideograph_2f974 [] = { 0x4359 };
	static uint32_t cjk_compatibility_ideograph_2f975 [] = { 0x262D9 };
	static uint32_t cjk_compatibility_ideograph_2f976 [] = { 0x7F7A };
	static uint32_t cjk_compatibility_ideograph_2f977 [] = { 0x2633E };
	static uint32_t cjk_compatibility_ideograph_2f978 [] = { 0x7F95 };
	static uint32_t cjk_compatibility_ideograph_2f979 [] = { 0x7FFA };
	static uint32_t cjk_compatibility_ideograph_2f97a [] = { 0x8005 };
	static uint32_t cjk_compatibility_ideograph_2f97b [] = { 0x264DA };
	static uint32_t cjk_compatibility_ideograph_2f97c [] = { 0x26523 };
	static uint32_t cjk_compatibility_ideograph_2f97d [] = { 0x8060 };
	static uint32_t cjk_compatibility_ideograph_2f97e [] = { 0x265A8 };
	static uint32_t cjk_compatibility_ideograph_2f97f [] = { 0x8070 };
	static uint32_t cjk_compatibility_ideograph_2f980 [] = { 0x2335F };
	static uint32_t cjk_compatibility_ideograph_2f981 [] = { 0x43D5 };
	static uint32_t cjk_compatibility_ideograph_2f982 [] = { 0x80B2 };
	static uint32_t cjk_compatibility_ideograph_2f983 [] = { 0x8103 };
	static uint32_t cjk_compatibility_ideograph_2f984 [] = { 0x440B };
	static uint32_t cjk_compatibility_ideograph_2f985 [] = { 0x813E };
	static uint32_t cjk_compatibility_ideograph_2f986 [] = { 0x5AB5 };
	static uint32_t cjk_compatibility_ideograph_2f987 [] = { 0x267A7 };
	static uint32_t cjk_compatibility_ideograph_2f988 [] = { 0x267B5 };
	static uint32_t cjk_compatibility_ideograph_2f989 [] = { 0x23393 };
	static uint32_t cjk_compatibility_ideograph_2f98a [] = { 0x2339C };
	static uint32_t cjk_compatibility_ideograph_2f98b [] = { 0x8201 };
	static uint32_t cjk_compatibility_ideograph_2f98c [] = { 0x8204 };
	static uint32_t cjk_compatibility_ideograph_2f98d [] = { 0x8F9E };
	static uint32_t cjk_compatibility_ideograph_2f98e [] = { 0x446B };
	static uint32_t cjk_compatibility_ideograph_2f98f [] = { 0x8291 };
	static uint32_t cjk_compatibility_ideograph_2f990 [] = { 0x828B };
	static uint32_t cjk_compatibility_ideograph_2f991 [] = { 0x829D };
	static uint32_t cjk_compatibility_ideograph_2f992 [] = { 0x52B3 };
	static uint32_t cjk_compatibility_ideograph_2f993 [] = { 0x82B1 };
	static uint32_t cjk_compatibility_ideograph_2f994 [] = { 0x82B3 };
	static uint32_t cjk_compatibility_ideograph_2f995 [] = { 0x82BD };
	static uint32_t cjk_compatibility_ideograph_2f996 [] = { 0x82E6 };
	static uint32_t cjk_compatibility_ideograph_2f997 [] = { 0x26B3C };
	static uint32_t cjk_compatibility_ideograph_2f998 [] = { 0x82E5 };
	static uint32_t cjk_compatibility_ideograph_2f999 [] = { 0x831D };
	static uint32_t cjk_compatibility_ideograph_2f99a [] = { 0x8363 };
	static uint32_t cjk_compatibility_ideograph_2f99b [] = { 0x83AD };
	static uint32_t cjk_compatibility_ideograph_2f99c [] = { 0x8323 };
	static uint32_t cjk_compatibility_ideograph_2f99d [] = { 0x83BD };
	static uint32_t cjk_compatibility_ideograph_2f99e [] = { 0x83E7 };
	static uint32_t cjk_compatibility_ideograph_2f99f [] = { 0x8457 };
	static uint32_t cjk_compatibility_ideograph_2f9a0 [] = { 0x8353 };
	static uint32_t cjk_compatibility_ideograph_2f9a1 [] = { 0x83CA };
	static uint32_t cjk_compatibility_ideograph_2f9a2 [] = { 0x83CC };
	static uint32_t cjk_compatibility_ideograph_2f9a3 [] = { 0x83DC };
	static uint32_t cjk_compatibility_ideograph_2f9a4 [] = { 0x26C36 };
	static uint32_t cjk_compatibility_ideograph_2f9a5 [] = { 0x26D6B };
	static uint32_t cjk_compatibility_ideograph_2f9a6 [] = { 0x26CD5 };
	static uint32_t cjk_compatibility_ideograph_2f9a7 [] = { 0x452B };
	static uint32_t cjk_compatibility_ideograph_2f9a8 [] = { 0x84F1 };
	static uint32_t cjk_compatibility_ideograph_2f9a9 [] = { 0x84F3 };
	static uint32_t cjk_compatibility_ideograph_2f9aa [] = { 0x8516 };
	static uint32_t cjk_compatibility_ideograph_2f9ab [] = { 0x273CA };
	static uint32_t cjk_compatibility_ideograph_2f9ac [] = { 0x8564 };
	static uint32_t cjk_compatibility_ideograph_2f9ad [] = { 0x26F2C };
	static uint32_t cjk_compatibility_ideograph_2f9ae [] = { 0x455D };
	static uint32_t cjk_compatibility_ideograph_2f9af [] = { 0x4561 };
	static uint32_t cjk_compatibility_ideograph_2f9b0 [] = { 0x26FB1 };
	static uint32_t cjk_compatibility_ideograph_2f9b1 [] = { 0x270D2 };
	static uint32_t cjk_compatibility_ideograph_2f9b2 [] = { 0x456B };
	static uint32_t cjk_compatibility_ideograph_2f9b3 [] = { 0x8650 };
	static uint32_t cjk_compatibility_ideograph_2f9b4 [] = { 0x865C };
	static uint32_t cjk_compatibility_ideograph_2f9b5 [] = { 0x8667 };
	static uint32_t cjk_compatibility_ideograph_2f9b6 [] = { 0x8669 };
	static uint32_t cjk_compatibility_ideograph_2f9b7 [] = { 0x86A9 };
	static uint32_t cjk_compatibility_ideograph_2f9b8 [] = { 0x8688 };
	static uint32_t cjk_compatibility_ideograph_2f9b9 [] = { 0x870E };
	static uint32_t cjk_compatibility_ideograph_2f9ba [] = { 0x86E2 };
	static uint32_t cjk_compatibility_ideograph_2f9bb [] = { 0x8779 };
	static uint32_t cjk_compatibility_ideograph_2f9bc [] = { 0x8728 };
	static uint32_t cjk_compatibility_ideograph_2f9bd [] = { 0x876B };
	static uint32_t cjk_compatibility_ideograph_2f9be [] = { 0x8786 };
	static uint32_t cjk_compatibility_ideograph_2f9bf [] = { 0x45D7 };
	static uint32_t cjk_compatibility_ideograph_2f9c0 [] = { 0x87E1 };
	static uint32_t cjk_compatibility_ideograph_2f9c1 [] = { 0x8801 };
	static uint32_t cjk_compatibility_ideograph_2f9c2 [] = { 0x45F9 };
	static uint32_t cjk_compatibility_ideograph_2f9c3 [] = { 0x8860 };
	static uint32_t cjk_compatibility_ideograph_2f9c4 [] = { 0x8863 };
	static uint32_t cjk_compatibility_ideograph_2f9c5 [] = { 0x27667 };
	static uint32_t cjk_compatibility_ideograph_2f9c6 [] = { 0x88D7 };
	static uint32_t cjk_compatibility_ideograph_2f9c7 [] = { 0x88DE };
	static uint32_t cjk_compatibility_ideograph_2f9c8 [] = { 0x4635 };
	static uint32_t cjk_compatibility_ideograph_2f9c9 [] = { 0x88FA };
	static uint32_t cjk_compatibility_ideograph_2f9ca [] = { 0x34BB };
	static uint32_t cjk_compatibility_ideograph_2f9cb [] = { 0x278AE };
	static uint32_t cjk_compatibility_ideograph_2f9cc [] = { 0x27966 };
	static uint32_t cjk_compatibility_ideograph_2f9cd [] = { 0x46BE };
	static uint32_t cjk_compatibility_ideograph_2f9ce [] = { 0x46C7 };
	static uint32_t cjk_compatibility_ideograph_2f9cf [] = { 0x8AA0 };
	static uint32_t cjk_compatibility_ideograph_2f9d0 [] = { 0x8AED };
	static uint32_t cjk_compatibility_ideograph_2f9d1 [] = { 0x8B8A };
	static uint32_t cjk_compatibility_ideograph_2f9d2 [] = { 0x8C55 };
	static uint32_t cjk_compatibility_ideograph_2f9d3 [] = { 0x27CA8 };
	static uint32_t cjk_compatibility_ideograph_2f9d4 [] = { 0x8CAB };
	static uint32_t cjk_compatibility_ideograph_2f9d5 [] = { 0x8CC1 };
	static uint32_t cjk_compatibility_ideograph_2f9d6 [] = { 0x8D1B };
	static uint32_t cjk_compatibility_ideograph_2f9d7 [] = { 0x8D77 };
	static uint32_t cjk_compatibility_ideograph_2f9d8 [] = { 0x27F2F };
	static uint32_t cjk_compatibility_ideograph_2f9d9 [] = { 0x20804 };
	static uint32_t cjk_compatibility_ideograph_2f9da [] = { 0x8DCB };
	static uint32_t cjk_compatibility_ideograph_2f9db [] = { 0x8DBC };
	static uint32_t cjk_compatibility_ideograph_2f9dc [] = { 0x8DF0 };
	static uint32_t cjk_compatibility_ideograph_2f9dd [] = { 0x208DE };
	static uint32_t cjk_compatibility_ideograph_2f9de [] = { 0x8ED4 };
	static uint32_t cjk_compatibility_ideograph_2f9df [] = { 0x8F38 };
	static uint32_t cjk_compatibility_ideograph_2f9e0 [] = { 0x285D2 };
	static uint32_t cjk_compatibility_ideograph_2f9e1 [] = { 0x285ED };
	static uint32_t cjk_compatibility_ideograph_2f9e2 [] = { 0x9094 };
	static uint32_t cjk_compatibility_ideograph_2f9e3 [] = { 0x90F1 };
	static uint32_t cjk_compatibility_ideograph_2f9e4 [] = { 0x9111 };
	static uint32_t cjk_compatibility_ideograph_2f9e5 [] = { 0x2872E };
	static uint32_t cjk_compatibility_ideograph_2f9e6 [] = { 0x911B };
	static uint32_t cjk_compatibility_ideograph_2f9e7 [] = { 0x9238 };
	static uint32_t cjk_compatibility_ideograph_2f9e8 [] = { 0x92D7 };
	static uint32_t cjk_compatibility_ideograph_2f9e9 [] = { 0x92D8 };
	static uint32_t cjk_compatibility_ideograph_2f9ea [] = { 0x927C };
	static uint32_t cjk_compatibility_ideograph_2f9eb [] = { 0x93F9 };
	static uint32_t cjk_compatibility_ideograph_2f9ec [] = { 0x9415 };
	static uint32_t cjk_compatibility_ideograph_2f9ed [] = { 0x28BFA };
	static uint32_t cjk_compatibility_ideograph_2f9ee [] = { 0x958B };
	static uint32_t cjk_compatibility_ideograph_2f9ef [] = { 0x4995 };
	static uint32_t cjk_compatibility_ideograph_2f9f0 [] = { 0x95B7 };
	static uint32_t cjk_compatibility_ideograph_2f9f1 [] = { 0x28D77 };
	static uint32_t cjk_compatibility_ideograph_2f9f2 [] = { 0x49E6 };
	static uint32_t cjk_compatibility_ideograph_2f9f3 [] = { 0x96C3 };
	static uint32_t cjk_compatibility_ideograph_2f9f4 [] = { 0x5DB2 };
	static uint32_t cjk_compatibility_ideograph_2f9f5 [] = { 0x9723 };
	static uint32_t cjk_compatibility_ideograph_2f9f6 [] = { 0x29145 };
	static uint32_t cjk_compatibility_ideograph_2f9f7 [] = { 0x2921A };
	static uint32_t cjk_compatibility_ideograph_2f9f8 [] = { 0x4A6E };
	static uint32_t cjk_compatibility_ideograph_2f9f9 [] = { 0x4A76 };
	static uint32_t cjk_compatibility_ideograph_2f9fa [] = { 0x97E0 };
	static uint32_t cjk_compatibility_ideograph_2f9fb [] = { 0x2940A };
	static uint32_t cjk_compatibility_ideograph_2f9fc [] = { 0x4AB2 };
	static uint32_t cjk_compatibility_ideograph_2f9fd [] = { 0x29496 };
	static uint32_t cjk_compatibility_ideograph_2f9fe [] = { 0x980B };
	static uint32_t cjk_compatibility_ideograph_2f9ff [] = { 0x980B };
	static uint32_t cjk_compatibility_ideograph_2fa00 [] = { 0x9829 };
	static uint32_t cjk_compatibility_ideograph_2fa01 [] = { 0x295B6 };
	static uint32_t cjk_compatibility_ideograph_2fa02 [] = { 0x98E2 };
	static uint32_t cjk_compatibility_ideograph_2fa03 [] = { 0x4B33 };
	static uint32_t cjk_compatibility_ideograph_2fa04 [] = { 0x9929 };
	static uint32_t cjk_compatibility_ideograph_2fa05 [] = { 0x99A7 };
	static uint32_t cjk_compatibility_ideograph_2fa06 [] = { 0x99C2 };
	static uint32_t cjk_compatibility_ideograph_2fa07 [] = { 0x99FE };
	static uint32_t cjk_compatibility_ideograph_2fa08 [] = { 0x4BCE };
	static uint32_t cjk_compatibility_ideograph_2fa09 [] = { 0x29B30 };
	static uint32_t cjk_compatibility_ideograph_2fa0a [] = { 0x9B12 };
	static uint32_t cjk_compatibility_ideograph_2fa0b [] = { 0x9C40 };
	static uint32_t cjk_compatibility_ideograph_2fa0c [] = { 0x9CFD };
	static uint32_t cjk_compatibility_ideograph_2fa0d [] = { 0x4CCE };
	static uint32_t cjk_compatibility_ideograph_2fa0e [] = { 0x4CED };
	static uint32_t cjk_compatibility_ideograph_2fa0f [] = { 0x9D67 };
	static uint32_t cjk_compatibility_ideograph_2fa10 [] = { 0x2A0CE };
	static uint32_t cjk_compatibility_ideograph_2fa11 [] = { 0x4CF8 };
	static uint32_t cjk_compatibility_ideograph_2fa12 [] = { 0x2A105 };
	static uint32_t cjk_compatibility_ideograph_2fa13 [] = { 0x2A20E };
	static uint32_t cjk_compatibility_ideograph_2fa14 [] = { 0x2A291 };
	static uint32_t cjk_compatibility_ideograph_2fa15 [] = { 0x9EBB };
	static uint32_t cjk_compatibility_ideograph_2fa16 [] = { 0x4D56 };
	static uint32_t cjk_compatibility_ideograph_2fa17 [] = { 0x9EF9 };
	static uint32_t cjk_compatibility_ideograph_2fa18 [] = { 0x9EFE };
	static uint32_t cjk_compatibility_ideograph_2fa19 [] = { 0x9F05 };
	static uint32_t cjk_compatibility_ideograph_2fa1a [] = { 0x9F0F };
	static uint32_t cjk_compatibility_ideograph_2fa1b [] = { 0x9F16 };
	static uint32_t cjk_compatibility_ideograph_2fa1c [] = { 0x9F3B };
	static uint32_t cjk_compatibility_ideograph_2fa1d [] = { 0x2A600 };

	switch (codepoint) {
		case 0x00A0:
			*normals = no_break_space;
			return 1;
		case 0x00A8:
			*normals = diaeresis;
			return 2;
		case 0x00AA:
			*normals = feminine_ordinal_indicator;
			return 1;
		case 0x00AF:
			*normals = macron;
			return 2;
		case 0x00B2:
			*normals = superscript_two;
			return 1;
		case 0x00B3:
			*normals = superscript_three;
			return 1;
		case 0x00B4:
			*normals = acute_accent;
			return 2;
		case 0x00B5:
			*normals = micro_sign;
			return 1;
		case 0x00B8:
			*normals = cedilla;
			return 2;
		case 0x00B9:
			*normals = superscript_one;
			return 1;
		case 0x00BA:
			*normals = masculine_ordinal_indicator;
			return 1;
		case 0x00BC:
			*normals = vulgar_fraction_one_quarter;
			return 3;
		case 0x00BD:
			*normals = vulgar_fraction_one_half;
			return 3;
		case 0x00BE:
			*normals = vulgar_fraction_three_quarters;
			return 3;
		case 0x00C0:
			*normals = latin_capital_letter_a_with_grave;
			return 2;
		case 0x00C1:
			*normals = latin_capital_letter_a_with_acute;
			return 2;
		case 0x00C2:
			*normals = latin_capital_letter_a_with_circumflex;
			return 2;
		case 0x00C3:
			*normals = latin_capital_letter_a_with_tilde;
			return 2;
		case 0x00C4:
			*normals = latin_capital_letter_a_with_diaeresis;
			return 2;
		case 0x00C5:
			*normals = latin_capital_letter_a_with_ring_above;
			return 2;
		case 0x00C7:
			*normals = latin_capital_letter_c_with_cedilla;
			return 2;
		case 0x00C8:
			*normals = latin_capital_letter_e_with_grave;
			return 2;
		case 0x00C9:
			*normals = latin_capital_letter_e_with_acute;
			return 2;
		case 0x00CA:
			*normals = latin_capital_letter_e_with_circumflex;
			return 2;
		case 0x00CB:
			*normals = latin_capital_letter_e_with_diaeresis;
			return 2;
		case 0x00CC:
			*normals = latin_capital_letter_i_with_grave;
			return 2;
		case 0x00CD:
			*normals = latin_capital_letter_i_with_acute;
			return 2;
		case 0x00CE:
			*normals = latin_capital_letter_i_with_circumflex;
			return 2;
		case 0x00CF:
			*normals = latin_capital_letter_i_with_diaeresis;
			return 2;
		case 0x00D1:
			*normals = latin_capital_letter_n_with_tilde;
			return 2;
		case 0x00D2:
			*normals = latin_capital_letter_o_with_grave;
			return 2;
		case 0x00D3:
			*normals = latin_capital_letter_o_with_acute;
			return 2;
		case 0x00D4:
			*normals = latin_capital_letter_o_with_circumflex;
			return 2;
		case 0x00D5:
			*normals = latin_capital_letter_o_with_tilde;
			return 2;
		case 0x00D6:
			*normals = latin_capital_letter_o_with_diaeresis;
			return 2;
		case 0x00D9:
			*normals = latin_capital_letter_u_with_grave;
			return 2;
		case 0x00DA:
			*normals = latin_capital_letter_u_with_acute;
			return 2;
		case 0x00DB:
			*normals = latin_capital_letter_u_with_circumflex;
			return 2;
		case 0x00DC:
			*normals = latin_capital_letter_u_with_diaeresis;
			return 2;
		case 0x00DD:
			*normals = latin_capital_letter_y_with_acute;
			return 2;
		case 0x00E0:
			*normals = latin_small_letter_a_with_grave;
			return 2;
		case 0x00E1:
			*normals = latin_small_letter_a_with_acute;
			return 2;
		case 0x00E2:
			*normals = latin_small_letter_a_with_circumflex;
			return 2;
		case 0x00E3:
			*normals = latin_small_letter_a_with_tilde;
			return 2;
		case 0x00E4:
			*normals = latin_small_letter_a_with_diaeresis;
			return 2;
		case 0x00E5:
			*normals = latin_small_letter_a_with_ring_above;
			return 2;
		case 0x00E7:
			*normals = latin_small_letter_c_with_cedilla;
			return 2;
		case 0x00E8:
			*normals = latin_small_letter_e_with_grave;
			return 2;
		case 0x00E9:
			*normals = latin_small_letter_e_with_acute;
			return 2;
		case 0x00EA:
			*normals = latin_small_letter_e_with_circumflex;
			return 2;
		case 0x00EB:
			*normals = latin_small_letter_e_with_diaeresis;
			return 2;
		case 0x00EC:
			*normals = latin_small_letter_i_with_grave;
			return 2;
		case 0x00ED:
			*normals = latin_small_letter_i_with_acute;
			return 2;
		case 0x00EE:
			*normals = latin_small_letter_i_with_circumflex;
			return 2;
		case 0x00EF:
			*normals = latin_small_letter_i_with_diaeresis;
			return 2;
		case 0x00F1:
			*normals = latin_small_letter_n_with_tilde;
			return 2;
		case 0x00F2:
			*normals = latin_small_letter_o_with_grave;
			return 2;
		case 0x00F3:
			*normals = latin_small_letter_o_with_acute;
			return 2;
		case 0x00F4:
			*normals = latin_small_letter_o_with_circumflex;
			return 2;
		case 0x00F5:
			*normals = latin_small_letter_o_with_tilde;
			return 2;
		case 0x00F6:
			*normals = latin_small_letter_o_with_diaeresis;
			return 2;
		case 0x00F9:
			*normals = latin_small_letter_u_with_grave;
			return 2;
		case 0x00FA:
			*normals = latin_small_letter_u_with_acute;
			return 2;
		case 0x00FB:
			*normals = latin_small_letter_u_with_circumflex;
			return 2;
		case 0x00FC:
			*normals = latin_small_letter_u_with_diaeresis;
			return 2;
		case 0x00FD:
			*normals = latin_small_letter_y_with_acute;
			return 2;
		case 0x00FF:
			*normals = latin_small_letter_y_with_diaeresis;
			return 2;
		case 0x0100:
			*normals = latin_capital_letter_a_with_macron;
			return 2;
		case 0x0101:
			*normals = latin_small_letter_a_with_macron;
			return 2;
		case 0x0102:
			*normals = latin_capital_letter_a_with_breve;
			return 2;
		case 0x0103:
			*normals = latin_small_letter_a_with_breve;
			return 2;
		case 0x0104:
			*normals = latin_capital_letter_a_with_ogonek;
			return 2;
		case 0x0105:
			*normals = latin_small_letter_a_with_ogonek;
			return 2;
		case 0x0106:
			*normals = latin_capital_letter_c_with_acute;
			return 2;
		case 0x0107:
			*normals = latin_small_letter_c_with_acute;
			return 2;
		case 0x0108:
			*normals = latin_capital_letter_c_with_circumflex;
			return 2;
		case 0x0109:
			*normals = latin_small_letter_c_with_circumflex;
			return 2;
		case 0x010A:
			*normals = latin_capital_letter_c_with_dot_above;
			return 2;
		case 0x010B:
			*normals = latin_small_letter_c_with_dot_above;
			return 2;
		case 0x010C:
			*normals = latin_capital_letter_c_with_caron;
			return 2;
		case 0x010D:
			*normals = latin_small_letter_c_with_caron;
			return 2;
		case 0x010E:
			*normals = latin_capital_letter_d_with_caron;
			return 2;
		case 0x010F:
			*normals = latin_small_letter_d_with_caron;
			return 2;
		case 0x0112:
			*normals = latin_capital_letter_e_with_macron;
			return 2;
		case 0x0113:
			*normals = latin_small_letter_e_with_macron;
			return 2;
		case 0x0114:
			*normals = latin_capital_letter_e_with_breve;
			return 2;
		case 0x0115:
			*normals = latin_small_letter_e_with_breve;
			return 2;
		case 0x0116:
			*normals = latin_capital_letter_e_with_dot_above;
			return 2;
		case 0x0117:
			*normals = latin_small_letter_e_with_dot_above;
			return 2;
		case 0x0118:
			*normals = latin_capital_letter_e_with_ogonek;
			return 2;
		case 0x0119:
			*normals = latin_small_letter_e_with_ogonek;
			return 2;
		case 0x011A:
			*normals = latin_capital_letter_e_with_caron;
			return 2;
		case 0x011B:
			*normals = latin_small_letter_e_with_caron;
			return 2;
		case 0x011C:
			*normals = latin_capital_letter_g_with_circumflex;
			return 2;
		case 0x011D:
			*normals = latin_small_letter_g_with_circumflex;
			return 2;
		case 0x011E:
			*normals = latin_capital_letter_g_with_breve;
			return 2;
		case 0x011F:
			*normals = latin_small_letter_g_with_breve;
			return 2;
		case 0x0120:
			*normals = latin_capital_letter_g_with_dot_above;
			return 2;
		case 0x0121:
			*normals = latin_small_letter_g_with_dot_above;
			return 2;
		case 0x0122:
			*normals = latin_capital_letter_g_with_cedilla;
			return 2;
		case 0x0123:
			*normals = latin_small_letter_g_with_cedilla;
			return 2;
		case 0x0124:
			*normals = latin_capital_letter_h_with_circumflex;
			return 2;
		case 0x0125:
			*normals = latin_small_letter_h_with_circumflex;
			return 2;
		case 0x0128:
			*normals = latin_capital_letter_i_with_tilde;
			return 2;
		case 0x0129:
			*normals = latin_small_letter_i_with_tilde;
			return 2;
		case 0x012A:
			*normals = latin_capital_letter_i_with_macron;
			return 2;
		case 0x012B:
			*normals = latin_small_letter_i_with_macron;
			return 2;
		case 0x012C:
			*normals = latin_capital_letter_i_with_breve;
			return 2;
		case 0x012D:
			*normals = latin_small_letter_i_with_breve;
			return 2;
		case 0x012E:
			*normals = latin_capital_letter_i_with_ogonek;
			return 2;
		case 0x012F:
			*normals = latin_small_letter_i_with_ogonek;
			return 2;
		case 0x0130:
			*normals = latin_capital_letter_i_with_dot_above;
			return 2;
		case 0x0132:
			*normals = latin_capital_ligature_ij;
			return 2;
		case 0x0133:
			*normals = latin_small_ligature_ij;
			return 2;
		case 0x0134:
			*normals = latin_capital_letter_j_with_circumflex;
			return 2;
		case 0x0135:
			*normals = latin_small_letter_j_with_circumflex;
			return 2;
		case 0x0136:
			*normals = latin_capital_letter_k_with_cedilla;
			return 2;
		case 0x0137:
			*normals = latin_small_letter_k_with_cedilla;
			return 2;
		case 0x0139:
			*normals = latin_capital_letter_l_with_acute;
			return 2;
		case 0x013A:
			*normals = latin_small_letter_l_with_acute;
			return 2;
		case 0x013B:
			*normals = latin_capital_letter_l_with_cedilla;
			return 2;
		case 0x013C:
			*normals = latin_small_letter_l_with_cedilla;
			return 2;
		case 0x013D:
			*normals = latin_capital_letter_l_with_caron;
			return 2;
		case 0x013E:
			*normals = latin_small_letter_l_with_caron;
			return 2;
		case 0x013F:
			*normals = latin_capital_letter_l_with_middle_dot;
			return 2;
		case 0x0140:
			*normals = latin_small_letter_l_with_middle_dot;
			return 2;
		case 0x0143:
			*normals = latin_capital_letter_n_with_acute;
			return 2;
		case 0x0144:
			*normals = latin_small_letter_n_with_acute;
			return 2;
		case 0x0145:
			*normals = latin_capital_letter_n_with_cedilla;
			return 2;
		case 0x0146:
			*normals = latin_small_letter_n_with_cedilla;
			return 2;
		case 0x0147:
			*normals = latin_capital_letter_n_with_caron;
			return 2;
		case 0x0148:
			*normals = latin_small_letter_n_with_caron;
			return 2;
		case 0x0149:
			*normals = latin_small_letter_n_preceded_by_apostrophe;
			return 2;
		case 0x014C:
			*normals = latin_capital_letter_o_with_macron;
			return 2;
		case 0x014D:
			*normals = latin_small_letter_o_with_macron;
			return 2;
		case 0x014E:
			*normals = latin_capital_letter_o_with_breve;
			return 2;
		case 0x014F:
			*normals = latin_small_letter_o_with_breve;
			return 2;
		case 0x0150:
			*normals = latin_capital_letter_o_with_double_acute;
			return 2;
		case 0x0151:
			*normals = latin_small_letter_o_with_double_acute;
			return 2;
		case 0x0154:
			*normals = latin_capital_letter_r_with_acute;
			return 2;
		case 0x0155:
			*normals = latin_small_letter_r_with_acute;
			return 2;
		case 0x0156:
			*normals = latin_capital_letter_r_with_cedilla;
			return 2;
		case 0x0157:
			*normals = latin_small_letter_r_with_cedilla;
			return 2;
		case 0x0158:
			*normals = latin_capital_letter_r_with_caron;
			return 2;
		case 0x0159:
			*normals = latin_small_letter_r_with_caron;
			return 2;
		case 0x015A:
			*normals = latin_capital_letter_s_with_acute;
			return 2;
		case 0x015B:
			*normals = latin_small_letter_s_with_acute;
			return 2;
		case 0x015C:
			*normals = latin_capital_letter_s_with_circumflex;
			return 2;
		case 0x015D:
			*normals = latin_small_letter_s_with_circumflex;
			return 2;
		case 0x015E:
			*normals = latin_capital_letter_s_with_cedilla;
			return 2;
		case 0x015F:
			*normals = latin_small_letter_s_with_cedilla;
			return 2;
		case 0x0160:
			*normals = latin_capital_letter_s_with_caron;
			return 2;
		case 0x0161:
			*normals = latin_small_letter_s_with_caron;
			return 2;
		case 0x0162:
			*normals = latin_capital_letter_t_with_cedilla;
			return 2;
		case 0x0163:
			*normals = latin_small_letter_t_with_cedilla;
			return 2;
		case 0x0164:
			*normals = latin_capital_letter_t_with_caron;
			return 2;
		case 0x0165:
			*normals = latin_small_letter_t_with_caron;
			return 2;
		case 0x0168:
			*normals = latin_capital_letter_u_with_tilde;
			return 2;
		case 0x0169:
			*normals = latin_small_letter_u_with_tilde;
			return 2;
		case 0x016A:
			*normals = latin_capital_letter_u_with_macron;
			return 2;
		case 0x016B:
			*normals = latin_small_letter_u_with_macron;
			return 2;
		case 0x016C:
			*normals = latin_capital_letter_u_with_breve;
			return 2;
		case 0x016D:
			*normals = latin_small_letter_u_with_breve;
			return 2;
		case 0x016E:
			*normals = latin_capital_letter_u_with_ring_above;
			return 2;
		case 0x016F:
			*normals = latin_small_letter_u_with_ring_above;
			return 2;
		case 0x0170:
			*normals = latin_capital_letter_u_with_double_acute;
			return 2;
		case 0x0171:
			*normals = latin_small_letter_u_with_double_acute;
			return 2;
		case 0x0172:
			*normals = latin_capital_letter_u_with_ogonek;
			return 2;
		case 0x0173:
			*normals = latin_small_letter_u_with_ogonek;
			return 2;
		case 0x0174:
			*normals = latin_capital_letter_w_with_circumflex;
			return 2;
		case 0x0175:
			*normals = latin_small_letter_w_with_circumflex;
			return 2;
		case 0x0176:
			*normals = latin_capital_letter_y_with_circumflex;
			return 2;
		case 0x0177:
			*normals = latin_small_letter_y_with_circumflex;
			return 2;
		case 0x0178:
			*normals = latin_capital_letter_y_with_diaeresis;
			return 2;
		case 0x0179:
			*normals = latin_capital_letter_z_with_acute;
			return 2;
		case 0x017A:
			*normals = latin_small_letter_z_with_acute;
			return 2;
		case 0x017B:
			*normals = latin_capital_letter_z_with_dot_above;
			return 2;
		case 0x017C:
			*normals = latin_small_letter_z_with_dot_above;
			return 2;
		case 0x017D:
			*normals = latin_capital_letter_z_with_caron;
			return 2;
		case 0x017E:
			*normals = latin_small_letter_z_with_caron;
			return 2;
		case 0x017F:
			*normals = latin_small_letter_long_s;
			return 1;
		case 0x01A0:
			*normals = latin_capital_letter_o_with_horn;
			return 2;
		case 0x01A1:
			*normals = latin_small_letter_o_with_horn;
			return 2;
		case 0x01AF:
			*normals = latin_capital_letter_u_with_horn;
			return 2;
		case 0x01B0:
			*normals = latin_small_letter_u_with_horn;
			return 2;
		case 0x01C4:
			*normals = latin_capital_letter_dz_with_caron;
			return 2;
		case 0x01C5:
			*normals = latin_capital_letter_d_with_small_letter_z_with_caron;
			return 2;
		case 0x01C6:
			*normals = latin_small_letter_dz_with_caron;
			return 2;
		case 0x01C7:
			*normals = latin_capital_letter_lj;
			return 2;
		case 0x01C8:
			*normals = latin_capital_letter_l_with_small_letter_j;
			return 2;
		case 0x01C9:
			*normals = latin_small_letter_lj;
			return 2;
		case 0x01CA:
			*normals = latin_capital_letter_nj;
			return 2;
		case 0x01CB:
			*normals = latin_capital_letter_n_with_small_letter_j;
			return 2;
		case 0x01CC:
			*normals = latin_small_letter_nj;
			return 2;
		case 0x01CD:
			*normals = latin_capital_letter_a_with_caron;
			return 2;
		case 0x01CE:
			*normals = latin_small_letter_a_with_caron;
			return 2;
		case 0x01CF:
			*normals = latin_capital_letter_i_with_caron;
			return 2;
		case 0x01D0:
			*normals = latin_small_letter_i_with_caron;
			return 2;
		case 0x01D1:
			*normals = latin_capital_letter_o_with_caron;
			return 2;
		case 0x01D2:
			*normals = latin_small_letter_o_with_caron;
			return 2;
		case 0x01D3:
			*normals = latin_capital_letter_u_with_caron;
			return 2;
		case 0x01D4:
			*normals = latin_small_letter_u_with_caron;
			return 2;
		case 0x01D5:
			*normals = latin_capital_letter_u_with_diaeresis_and_macron;
			return 2;
		case 0x01D6:
			*normals = latin_small_letter_u_with_diaeresis_and_macron;
			return 2;
		case 0x01D7:
			*normals = latin_capital_letter_u_with_diaeresis_and_acute;
			return 2;
		case 0x01D8:
			*normals = latin_small_letter_u_with_diaeresis_and_acute;
			return 2;
		case 0x01D9:
			*normals = latin_capital_letter_u_with_diaeresis_and_caron;
			return 2;
		case 0x01DA:
			*normals = latin_small_letter_u_with_diaeresis_and_caron;
			return 2;
		case 0x01DB:
			*normals = latin_capital_letter_u_with_diaeresis_and_grave;
			return 2;
		case 0x01DC:
			*normals = latin_small_letter_u_with_diaeresis_and_grave;
			return 2;
		case 0x01DE:
			*normals = latin_capital_letter_a_with_diaeresis_and_macron;
			return 2;
		case 0x01DF:
			*normals = latin_small_letter_a_with_diaeresis_and_macron;
			return 2;
		case 0x01E0:
			*normals = latin_capital_letter_a_with_dot_above_and_macron;
			return 2;
		case 0x01E1:
			*normals = latin_small_letter_a_with_dot_above_and_macron;
			return 2;
		case 0x01E2:
			*normals = latin_capital_letter_ae_with_macron;
			return 2;
		case 0x01E3:
			*normals = latin_small_letter_ae_with_macron;
			return 2;
		case 0x01E6:
			*normals = latin_capital_letter_g_with_caron;
			return 2;
		case 0x01E7:
			*normals = latin_small_letter_g_with_caron;
			return 2;
		case 0x01E8:
			*normals = latin_capital_letter_k_with_caron;
			return 2;
		case 0x01E9:
			*normals = latin_small_letter_k_with_caron;
			return 2;
		case 0x01EA:
			*normals = latin_capital_letter_o_with_ogonek;
			return 2;
		case 0x01EB:
			*normals = latin_small_letter_o_with_ogonek;
			return 2;
		case 0x01EC:
			*normals = latin_capital_letter_o_with_ogonek_and_macron;
			return 2;
		case 0x01ED:
			*normals = latin_small_letter_o_with_ogonek_and_macron;
			return 2;
		case 0x01EE:
			*normals = latin_capital_letter_ezh_with_caron;
			return 2;
		case 0x01EF:
			*normals = latin_small_letter_ezh_with_caron;
			return 2;
		case 0x01F0:
			*normals = latin_small_letter_j_with_caron;
			return 2;
		case 0x01F1:
			*normals = latin_capital_letter_dz;
			return 2;
		case 0x01F2:
			*normals = latin_capital_letter_d_with_small_letter_z;
			return 2;
		case 0x01F3:
			*normals = latin_small_letter_dz;
			return 2;
		case 0x01F4:
			*normals = latin_capital_letter_g_with_acute;
			return 2;
		case 0x01F5:
			*normals = latin_small_letter_g_with_acute;
			return 2;
		case 0x01F8:
			*normals = latin_capital_letter_n_with_grave;
			return 2;
		case 0x01F9:
			*normals = latin_small_letter_n_with_grave;
			return 2;
		case 0x01FA:
			*normals = latin_capital_letter_a_with_ring_above_and_acute;
			return 2;
		case 0x01FB:
			*normals = latin_small_letter_a_with_ring_above_and_acute;
			return 2;
		case 0x01FC:
			*normals = latin_capital_letter_ae_with_acute;
			return 2;
		case 0x01FD:
			*normals = latin_small_letter_ae_with_acute;
			return 2;
		case 0x01FE:
			*normals = latin_capital_letter_o_with_stroke_and_acute;
			return 2;
		case 0x01FF:
			*normals = latin_small_letter_o_with_stroke_and_acute;
			return 2;
		case 0x0200:
			*normals = latin_capital_letter_a_with_double_grave;
			return 2;
		case 0x0201:
			*normals = latin_small_letter_a_with_double_grave;
			return 2;
		case 0x0202:
			*normals = latin_capital_letter_a_with_inverted_breve;
			return 2;
		case 0x0203:
			*normals = latin_small_letter_a_with_inverted_breve;
			return 2;
		case 0x0204:
			*normals = latin_capital_letter_e_with_double_grave;
			return 2;
		case 0x0205:
			*normals = latin_small_letter_e_with_double_grave;
			return 2;
		case 0x0206:
			*normals = latin_capital_letter_e_with_inverted_breve;
			return 2;
		case 0x0207:
			*normals = latin_small_letter_e_with_inverted_breve;
			return 2;
		case 0x0208:
			*normals = latin_capital_letter_i_with_double_grave;
			return 2;
		case 0x0209:
			*normals = latin_small_letter_i_with_double_grave;
			return 2;
		case 0x020A:
			*normals = latin_capital_letter_i_with_inverted_breve;
			return 2;
		case 0x020B:
			*normals = latin_small_letter_i_with_inverted_breve;
			return 2;
		case 0x020C:
			*normals = latin_capital_letter_o_with_double_grave;
			return 2;
		case 0x020D:
			*normals = latin_small_letter_o_with_double_grave;
			return 2;
		case 0x020E:
			*normals = latin_capital_letter_o_with_inverted_breve;
			return 2;
		case 0x020F:
			*normals = latin_small_letter_o_with_inverted_breve;
			return 2;
		case 0x0210:
			*normals = latin_capital_letter_r_with_double_grave;
			return 2;
		case 0x0211:
			*normals = latin_small_letter_r_with_double_grave;
			return 2;
		case 0x0212:
			*normals = latin_capital_letter_r_with_inverted_breve;
			return 2;
		case 0x0213:
			*normals = latin_small_letter_r_with_inverted_breve;
			return 2;
		case 0x0214:
			*normals = latin_capital_letter_u_with_double_grave;
			return 2;
		case 0x0215:
			*normals = latin_small_letter_u_with_double_grave;
			return 2;
		case 0x0216:
			*normals = latin_capital_letter_u_with_inverted_breve;
			return 2;
		case 0x0217:
			*normals = latin_small_letter_u_with_inverted_breve;
			return 2;
		case 0x0218:
			*normals = latin_capital_letter_s_with_comma_below;
			return 2;
		case 0x0219:
			*normals = latin_small_letter_s_with_comma_below;
			return 2;
		case 0x021A:
			*normals = latin_capital_letter_t_with_comma_below;
			return 2;
		case 0x021B:
			*normals = latin_small_letter_t_with_comma_below;
			return 2;
		case 0x021E:
			*normals = latin_capital_letter_h_with_caron;
			return 2;
		case 0x021F:
			*normals = latin_small_letter_h_with_caron;
			return 2;
		case 0x0226:
			*normals = latin_capital_letter_a_with_dot_above;
			return 2;
		case 0x0227:
			*normals = latin_small_letter_a_with_dot_above;
			return 2;
		case 0x0228:
			*normals = latin_capital_letter_e_with_cedilla;
			return 2;
		case 0x0229:
			*normals = latin_small_letter_e_with_cedilla;
			return 2;
		case 0x022A:
			*normals = latin_capital_letter_o_with_diaeresis_and_macron;
			return 2;
		case 0x022B:
			*normals = latin_small_letter_o_with_diaeresis_and_macron;
			return 2;
		case 0x022C:
			*normals = latin_capital_letter_o_with_tilde_and_macron;
			return 2;
		case 0x022D:
			*normals = latin_small_letter_o_with_tilde_and_macron;
			return 2;
		case 0x022E:
			*normals = latin_capital_letter_o_with_dot_above;
			return 2;
		case 0x022F:
			*normals = latin_small_letter_o_with_dot_above;
			return 2;
		case 0x0230:
			*normals = latin_capital_letter_o_with_dot_above_and_macron;
			return 2;
		case 0x0231:
			*normals = latin_small_letter_o_with_dot_above_and_macron;
			return 2;
		case 0x0232:
			*normals = latin_capital_letter_y_with_macron;
			return 2;
		case 0x0233:
			*normals = latin_small_letter_y_with_macron;
			return 2;
		case 0x02B0:
			*normals = modifier_letter_small_h;
			return 1;
		case 0x02B1:
			*normals = modifier_letter_small_h_with_hook;
			return 1;
		case 0x02B2:
			*normals = modifier_letter_small_j;
			return 1;
		case 0x02B3:
			*normals = modifier_letter_small_r;
			return 1;
		case 0x02B4:
			*normals = modifier_letter_small_turned_r;
			return 1;
		case 0x02B5:
			*normals = modifier_letter_small_turned_r_with_hook;
			return 1;
		case 0x02B6:
			*normals = modifier_letter_small_capital_inverted_r;
			return 1;
		case 0x02B7:
			*normals = modifier_letter_small_w;
			return 1;
		case 0x02B8:
			*normals = modifier_letter_small_y;
			return 1;
		case 0x02D8:
			*normals = breve;
			return 2;
		case 0x02D9:
			*normals = dot_above;
			return 2;
		case 0x02DA:
			*normals = ring_above;
			return 2;
		case 0x02DB:
			*normals = ogonek;
			return 2;
		case 0x02DC:
			*normals = small_tilde;
			return 2;
		case 0x02DD:
			*normals = double_acute_accent;
			return 2;
		case 0x02E0:
			*normals = modifier_letter_small_gamma;
			return 1;
		case 0x02E1:
			*normals = modifier_letter_small_l;
			return 1;
		case 0x02E2:
			*normals = modifier_letter_small_s;
			return 1;
		case 0x02E3:
			*normals = modifier_letter_small_x;
			return 1;
		case 0x02E4:
			*normals = modifier_letter_small_reversed_glottal_stop;
			return 1;
		case 0x0340:
			*normals = combining_grave_tone_mark;
			return 1;
		case 0x0341:
			*normals = combining_acute_tone_mark;
			return 1;
		case 0x0343:
			*normals = combining_greek_koronis;
			return 1;
		case 0x0344:
			*normals = combining_greek_dialytika_tonos;
			return 2;
		case 0x0374:
			*normals = greek_numeral_sign;
			return 1;
		case 0x037A:
			*normals = greek_ypogegrammeni;
			return 2;
		case 0x037E:
			*normals = greek_question_mark;
			return 1;
		case 0x0384:
			*normals = greek_tonos;
			return 2;
		case 0x0385:
			*normals = greek_dialytika_tonos;
			return 2;
		case 0x0386:
			*normals = greek_capital_letter_alpha_with_tonos;
			return 2;
		case 0x0387:
			*normals = greek_ano_teleia;
			return 1;
		case 0x0388:
			*normals = greek_capital_letter_epsilon_with_tonos;
			return 2;
		case 0x0389:
			*normals = greek_capital_letter_eta_with_tonos;
			return 2;
		case 0x038A:
			*normals = greek_capital_letter_iota_with_tonos;
			return 2;
		case 0x038C:
			*normals = greek_capital_letter_omicron_with_tonos;
			return 2;
		case 0x038E:
			*normals = greek_capital_letter_upsilon_with_tonos;
			return 2;
		case 0x038F:
			*normals = greek_capital_letter_omega_with_tonos;
			return 2;
		case 0x0390:
			*normals = greek_small_letter_iota_with_dialytika_and_tonos;
			return 2;
		case 0x03AA:
			*normals = greek_capital_letter_iota_with_dialytika;
			return 2;
		case 0x03AB:
			*normals = greek_capital_letter_upsilon_with_dialytika;
			return 2;
		case 0x03AC:
			*normals = greek_small_letter_alpha_with_tonos;
			return 2;
		case 0x03AD:
			*normals = greek_small_letter_epsilon_with_tonos;
			return 2;
		case 0x03AE:
			*normals = greek_small_letter_eta_with_tonos;
			return 2;
		case 0x03AF:
			*normals = greek_small_letter_iota_with_tonos;
			return 2;
		case 0x03B0:
			*normals = greek_small_letter_upsilon_with_dialytika_and_tonos;
			return 2;
		case 0x03CA:
			*normals = greek_small_letter_iota_with_dialytika;
			return 2;
		case 0x03CB:
			*normals = greek_small_letter_upsilon_with_dialytika;
			return 2;
		case 0x03CC:
			*normals = greek_small_letter_omicron_with_tonos;
			return 2;
		case 0x03CD:
			*normals = greek_small_letter_upsilon_with_tonos;
			return 2;
		case 0x03CE:
			*normals = greek_small_letter_omega_with_tonos;
			return 2;
		case 0x03D0:
			*normals = greek_beta_symbol;
			return 1;
		case 0x03D1:
			*normals = greek_theta_symbol;
			return 1;
		case 0x03D2:
			*normals = greek_upsilon_with_hook_symbol;
			return 1;
		case 0x03D3:
			*normals = greek_upsilon_with_acute_and_hook_symbol;
			return 2;
		case 0x03D4:
			*normals = greek_upsilon_with_diaeresis_and_hook_symbol;
			return 2;
		case 0x03D5:
			*normals = greek_phi_symbol;
			return 1;
		case 0x03D6:
			*normals = greek_pi_symbol;
			return 1;
		case 0x03F0:
			*normals = greek_kappa_symbol;
			return 1;
		case 0x03F1:
			*normals = greek_rho_symbol;
			return 1;
		case 0x03F2:
			*normals = greek_lunate_sigma_symbol;
			return 1;
		case 0x03F4:
			*normals = greek_capital_theta_symbol;
			return 1;
		case 0x03F5:
			*normals = greek_lunate_epsilon_symbol;
			return 1;
		case 0x03F9:
			*normals = greek_capital_lunate_sigma_symbol;
			return 1;
		case 0x0400:
			*normals = cyrillic_capital_letter_ie_with_grave;
			return 2;
		case 0x0401:
			*normals = cyrillic_capital_letter_io;
			return 2;
		case 0x0403:
			*normals = cyrillic_capital_letter_gje;
			return 2;
		case 0x0407:
			*normals = cyrillic_capital_letter_yi;
			return 2;
		case 0x040C:
			*normals = cyrillic_capital_letter_kje;
			return 2;
		case 0x040D:
			*normals = cyrillic_capital_letter_i_with_grave;
			return 2;
		case 0x040E:
			*normals = cyrillic_capital_letter_short_u;
			return 2;
		case 0x0419:
			*normals = cyrillic_capital_letter_short_i;
			return 2;
		case 0x0439:
			*normals = cyrillic_small_letter_short_i;
			return 2;
		case 0x0450:
			*normals = cyrillic_small_letter_ie_with_grave;
			return 2;
		case 0x0451:
			*normals = cyrillic_small_letter_io;
			return 2;
		case 0x0453:
			*normals = cyrillic_small_letter_gje;
			return 2;
		case 0x0457:
			*normals = cyrillic_small_letter_yi;
			return 2;
		case 0x045C:
			*normals = cyrillic_small_letter_kje;
			return 2;
		case 0x045D:
			*normals = cyrillic_small_letter_i_with_grave;
			return 2;
		case 0x045E:
			*normals = cyrillic_small_letter_short_u;
			return 2;
		case 0x0476:
			*normals = cyrillic_capital_letter_izhitsa_with_double_grave_accent;
			return 2;
		case 0x0477:
			*normals = cyrillic_small_letter_izhitsa_with_double_grave_accent;
			return 2;
		case 0x04C1:
			*normals = cyrillic_capital_letter_zhe_with_breve;
			return 2;
		case 0x04C2:
			*normals = cyrillic_small_letter_zhe_with_breve;
			return 2;
		case 0x04D0:
			*normals = cyrillic_capital_letter_a_with_breve;
			return 2;
		case 0x04D1:
			*normals = cyrillic_small_letter_a_with_breve;
			return 2;
		case 0x04D2:
			*normals = cyrillic_capital_letter_a_with_diaeresis;
			return 2;
		case 0x04D3:
			*normals = cyrillic_small_letter_a_with_diaeresis;
			return 2;
		case 0x04D6:
			*normals = cyrillic_capital_letter_ie_with_breve;
			return 2;
		case 0x04D7:
			*normals = cyrillic_small_letter_ie_with_breve;
			return 2;
		case 0x04DA:
			*normals = cyrillic_capital_letter_schwa_with_diaeresis;
			return 2;
		case 0x04DB:
			*normals = cyrillic_small_letter_schwa_with_diaeresis;
			return 2;
		case 0x04DC:
			*normals = cyrillic_capital_letter_zhe_with_diaeresis;
			return 2;
		case 0x04DD:
			*normals = cyrillic_small_letter_zhe_with_diaeresis;
			return 2;
		case 0x04DE:
			*normals = cyrillic_capital_letter_ze_with_diaeresis;
			return 2;
		case 0x04DF:
			*normals = cyrillic_small_letter_ze_with_diaeresis;
			return 2;
		case 0x04E2:
			*normals = cyrillic_capital_letter_i_with_macron;
			return 2;
		case 0x04E3:
			*normals = cyrillic_small_letter_i_with_macron;
			return 2;
		case 0x04E4:
			*normals = cyrillic_capital_letter_i_with_diaeresis;
			return 2;
		case 0x04E5:
			*normals = cyrillic_small_letter_i_with_diaeresis;
			return 2;
		case 0x04E6:
			*normals = cyrillic_capital_letter_o_with_diaeresis;
			return 2;
		case 0x04E7:
			*normals = cyrillic_small_letter_o_with_diaeresis;
			return 2;
		case 0x04EA:
			*normals = cyrillic_capital_letter_barred_o_with_diaeresis;
			return 2;
		case 0x04EB:
			*normals = cyrillic_small_letter_barred_o_with_diaeresis;
			return 2;
		case 0x04EC:
			*normals = cyrillic_capital_letter_e_with_diaeresis;
			return 2;
		case 0x04ED:
			*normals = cyrillic_small_letter_e_with_diaeresis;
			return 2;
		case 0x04EE:
			*normals = cyrillic_capital_letter_u_with_macron;
			return 2;
		case 0x04EF:
			*normals = cyrillic_small_letter_u_with_macron;
			return 2;
		case 0x04F0:
			*normals = cyrillic_capital_letter_u_with_diaeresis;
			return 2;
		case 0x04F1:
			*normals = cyrillic_small_letter_u_with_diaeresis;
			return 2;
		case 0x04F2:
			*normals = cyrillic_capital_letter_u_with_double_acute;
			return 2;
		case 0x04F3:
			*normals = cyrillic_small_letter_u_with_double_acute;
			return 2;
		case 0x04F4:
			*normals = cyrillic_capital_letter_che_with_diaeresis;
			return 2;
		case 0x04F5:
			*normals = cyrillic_small_letter_che_with_diaeresis;
			return 2;
		case 0x04F8:
			*normals = cyrillic_capital_letter_yeru_with_diaeresis;
			return 2;
		case 0x04F9:
			*normals = cyrillic_small_letter_yeru_with_diaeresis;
			return 2;
		case 0x0587:
			*normals = armenian_small_ligature_ech_yiwn;
			return 2;
		case 0x0622:
			*normals = arabic_letter_alef_with_madda_above;
			return 2;
		case 0x0623:
			*normals = arabic_letter_alef_with_hamza_above;
			return 2;
		case 0x0624:
			*normals = arabic_letter_waw_with_hamza_above;
			return 2;
		case 0x0625:
			*normals = arabic_letter_alef_with_hamza_below;
			return 2;
		case 0x0626:
			*normals = arabic_letter_yeh_with_hamza_above;
			return 2;
		case 0x0675:
			*normals = arabic_letter_high_hamza_alef;
			return 2;
		case 0x0676:
			*normals = arabic_letter_high_hamza_waw;
			return 2;
		case 0x0677:
			*normals = arabic_letter_u_with_hamza_above;
			return 2;
		case 0x0678:
			*normals = arabic_letter_high_hamza_yeh;
			return 2;
		case 0x06C0:
			*normals = arabic_letter_heh_with_yeh_above;
			return 2;
		case 0x06C2:
			*normals = arabic_letter_heh_goal_with_hamza_above;
			return 2;
		case 0x06D3:
			*normals = arabic_letter_yeh_barree_with_hamza_above;
			return 2;
		case 0x0929:
			*normals = devanagari_letter_nnna;
			return 2;
		case 0x0931:
			*normals = devanagari_letter_rra;
			return 2;
		case 0x0934:
			*normals = devanagari_letter_llla;
			return 2;
		case 0x0958:
			*normals = devanagari_letter_qa;
			return 2;
		case 0x0959:
			*normals = devanagari_letter_khha;
			return 2;
		case 0x095A:
			*normals = devanagari_letter_ghha;
			return 2;
		case 0x095B:
			*normals = devanagari_letter_za;
			return 2;
		case 0x095C:
			*normals = devanagari_letter_dddha;
			return 2;
		case 0x095D:
			*normals = devanagari_letter_rha;
			return 2;
		case 0x095E:
			*normals = devanagari_letter_fa;
			return 2;
		case 0x095F:
			*normals = devanagari_letter_yya;
			return 2;
		case 0x09CB:
			*normals = bengali_vowel_sign_o;
			return 2;
		case 0x09CC:
			*normals = bengali_vowel_sign_au;
			return 2;
		case 0x09DC:
			*normals = bengali_letter_rra;
			return 2;
		case 0x09DD:
			*normals = bengali_letter_rha;
			return 2;
		case 0x09DF:
			*normals = bengali_letter_yya;
			return 2;
		case 0x0A33:
			*normals = gurmukhi_letter_lla;
			return 2;
		case 0x0A36:
			*normals = gurmukhi_letter_sha;
			return 2;
		case 0x0A59:
			*normals = gurmukhi_letter_khha;
			return 2;
		case 0x0A5A:
			*normals = gurmukhi_letter_ghha;
			return 2;
		case 0x0A5B:
			*normals = gurmukhi_letter_za;
			return 2;
		case 0x0A5E:
			*normals = gurmukhi_letter_fa;
			return 2;
		case 0x0B48:
			*normals = oriya_vowel_sign_ai;
			return 2;
		case 0x0B4B:
			*normals = oriya_vowel_sign_o;
			return 2;
		case 0x0B4C:
			*normals = oriya_vowel_sign_au;
			return 2;
		case 0x0B5C:
			*normals = oriya_letter_rra;
			return 2;
		case 0x0B5D:
			*normals = oriya_letter_rha;
			return 2;
		case 0x0B94:
			*normals = tamil_letter_au;
			return 2;
		case 0x0BCA:
			*normals = tamil_vowel_sign_o;
			return 2;
		case 0x0BCB:
			*normals = tamil_vowel_sign_oo;
			return 2;
		case 0x0BCC:
			*normals = tamil_vowel_sign_au;
			return 2;
		case 0x0C48:
			*normals = telugu_vowel_sign_ai;
			return 2;
		case 0x0CC0:
			*normals = kannada_vowel_sign_ii;
			return 2;
		case 0x0CC7:
			*normals = kannada_vowel_sign_ee;
			return 2;
		case 0x0CC8:
			*normals = kannada_vowel_sign_ai;
			return 2;
		case 0x0CCA:
			*normals = kannada_vowel_sign_o;
			return 2;
		case 0x0CCB:
			*normals = kannada_vowel_sign_oo;
			return 2;
		case 0x0D4A:
			*normals = malayalam_vowel_sign_o;
			return 2;
		case 0x0D4B:
			*normals = malayalam_vowel_sign_oo;
			return 2;
		case 0x0D4C:
			*normals = malayalam_vowel_sign_au;
			return 2;
		case 0x0DDA:
			*normals = sinhala_vowel_sign_diga_kombuva;
			return 2;
		case 0x0DDC:
			*normals = sinhala_vowel_sign_kombuva_haa_aela_pilla;
			return 2;
		case 0x0DDD:
			*normals = sinhala_vowel_sign_kombuva_haa_diga_aela_pilla;
			return 2;
		case 0x0DDE:
			*normals = sinhala_vowel_sign_kombuva_haa_gayanukitta;
			return 2;
		case 0x0E33:
			*normals = thai_character_sara_am;
			return 2;
		case 0x0EB3:
			*normals = lao_vowel_sign_am;
			return 2;
		case 0x0EDC:
			*normals = lao_ho_no;
			return 2;
		case 0x0EDD:
			*normals = lao_ho_mo;
			return 2;
		case 0x0F0C:
			*normals = tibetan_mark_delimiter_tsheg_bstar;
			return 1;
		case 0x0F43:
			*normals = tibetan_letter_gha;
			return 2;
		case 0x0F4D:
			*normals = tibetan_letter_ddha;
			return 2;
		case 0x0F52:
			*normals = tibetan_letter_dha;
			return 2;
		case 0x0F57:
			*normals = tibetan_letter_bha;
			return 2;
		case 0x0F5C:
			*normals = tibetan_letter_dzha;
			return 2;
		case 0x0F69:
			*normals = tibetan_letter_kssa;
			return 2;
		case 0x0F73:
			*normals = tibetan_vowel_sign_ii;
			return 2;
		case 0x0F75:
			*normals = tibetan_vowel_sign_uu;
			return 2;
		case 0x0F76:
			*normals = tibetan_vowel_sign_vocalic_r;
			return 2;
		case 0x0F77:
			*normals = tibetan_vowel_sign_vocalic_rr;
			return 2;
		case 0x0F78:
			*normals = tibetan_vowel_sign_vocalic_l;
			return 2;
		case 0x0F79:
			*normals = tibetan_vowel_sign_vocalic_ll;
			return 2;
		case 0x0F81:
			*normals = tibetan_vowel_sign_reversed_ii;
			return 2;
		case 0x0F93:
			*normals = tibetan_subjoined_letter_gha;
			return 2;
		case 0x0F9D:
			*normals = tibetan_subjoined_letter_ddha;
			return 2;
		case 0x0FA2:
			*normals = tibetan_subjoined_letter_dha;
			return 2;
		case 0x0FA7:
			*normals = tibetan_subjoined_letter_bha;
			return 2;
		case 0x0FAC:
			*normals = tibetan_subjoined_letter_dzha;
			return 2;
		case 0x0FB9:
			*normals = tibetan_subjoined_letter_kssa;
			return 2;
		case 0x1026:
			*normals = myanmar_letter_uu;
			return 2;
		case 0x10FC:
			*normals = modifier_letter_georgian_nar;
			return 1;
		case 0x1B06:
			*normals = balinese_letter_akara_tedung;
			return 2;
		case 0x1B08:
			*normals = balinese_letter_ikara_tedung;
			return 2;
		case 0x1B0A:
			*normals = balinese_letter_ukara_tedung;
			return 2;
		case 0x1B0C:
			*normals = balinese_letter_ra_repa_tedung;
			return 2;
		case 0x1B0E:
			*normals = balinese_letter_la_lenga_tedung;
			return 2;
		case 0x1B12:
			*normals = balinese_letter_okara_tedung;
			return 2;
		case 0x1B3B:
			*normals = balinese_vowel_sign_ra_repa_tedung;
			return 2;
		case 0x1B3D:
			*normals = balinese_vowel_sign_la_lenga_tedung;
			return 2;
		case 0x1B40:
			*normals = balinese_vowel_sign_taling_tedung;
			return 2;
		case 0x1B41:
			*normals = balinese_vowel_sign_taling_repa_tedung;
			return 2;
		case 0x1B43:
			*normals = balinese_vowel_sign_pepet_tedung;
			return 2;
		case 0x1D2C:
			*normals = modifier_letter_capital_a;
			return 1;
		case 0x1D2D:
			*normals = modifier_letter_capital_ae;
			return 1;
		case 0x1D2E:
			*normals = modifier_letter_capital_b;
			return 1;
		case 0x1D30:
			*normals = modifier_letter_capital_d;
			return 1;
		case 0x1D31:
			*normals = modifier_letter_capital_e;
			return 1;
		case 0x1D32:
			*normals = modifier_letter_capital_reversed_e;
			return 1;
		case 0x1D33:
			*normals = modifier_letter_capital_g;
			return 1;
		case 0x1D34:
			*normals = modifier_letter_capital_h;
			return 1;
		case 0x1D35:
			*normals = modifier_letter_capital_i;
			return 1;
		case 0x1D36:
			*normals = modifier_letter_capital_j;
			return 1;
		case 0x1D37:
			*normals = modifier_letter_capital_k;
			return 1;
		case 0x1D38:
			*normals = modifier_letter_capital_l;
			return 1;
		case 0x1D39:
			*normals = modifier_letter_capital_m;
			return 1;
		case 0x1D3A:
			*normals = modifier_letter_capital_n;
			return 1;
		case 0x1D3C:
			*normals = modifier_letter_capital_o;
			return 1;
		case 0x1D3D:
			*normals = modifier_letter_capital_ou;
			return 1;
		case 0x1D3E:
			*normals = modifier_letter_capital_p;
			return 1;
		case 0x1D3F:
			*normals = modifier_letter_capital_r;
			return 1;
		case 0x1D40:
			*normals = modifier_letter_capital_t;
			return 1;
		case 0x1D41:
			*normals = modifier_letter_capital_u;
			return 1;
		case 0x1D42:
			*normals = modifier_letter_capital_w;
			return 1;
		case 0x1D43:
			*normals = modifier_letter_small_a;
			return 1;
		case 0x1D44:
			*normals = modifier_letter_small_turned_a;
			return 1;
		case 0x1D45:
			*normals = modifier_letter_small_alpha;
			return 1;
		case 0x1D46:
			*normals = modifier_letter_small_turned_ae;
			return 1;
		case 0x1D47:
			*normals = modifier_letter_small_b;
			return 1;
		case 0x1D48:
			*normals = modifier_letter_small_d;
			return 1;
		case 0x1D49:
			*normals = modifier_letter_small_e;
			return 1;
		case 0x1D4A:
			*normals = modifier_letter_small_schwa;
			return 1;
		case 0x1D4B:
			*normals = modifier_letter_small_open_e;
			return 1;
		case 0x1D4C:
			*normals = modifier_letter_small_turned_open_e;
			return 1;
		case 0x1D4D:
			*normals = modifier_letter_small_g;
			return 1;
		case 0x1D4F:
			*normals = modifier_letter_small_k;
			return 1;
		case 0x1D50:
			*normals = modifier_letter_small_m;
			return 1;
		case 0x1D51:
			*normals = modifier_letter_small_eng;
			return 1;
		case 0x1D52:
			*normals = modifier_letter_small_o;
			return 1;
		case 0x1D53:
			*normals = modifier_letter_small_open_o;
			return 1;
		case 0x1D54:
			*normals = modifier_letter_small_top_half_o;
			return 1;
		case 0x1D55:
			*normals = modifier_letter_small_bottom_half_o;
			return 1;
		case 0x1D56:
			*normals = modifier_letter_small_p;
			return 1;
		case 0x1D57:
			*normals = modifier_letter_small_t;
			return 1;
		case 0x1D58:
			*normals = modifier_letter_small_u;
			return 1;
		case 0x1D59:
			*normals = modifier_letter_small_sideways_u;
			return 1;
		case 0x1D5A:
			*normals = modifier_letter_small_turned_m;
			return 1;
		case 0x1D5B:
			*normals = modifier_letter_small_v;
			return 1;
		case 0x1D5C:
			*normals = modifier_letter_small_ain;
			return 1;
		case 0x1D5D:
			*normals = modifier_letter_small_beta;
			return 1;
		case 0x1D5E:
			*normals = modifier_letter_small_greek_gamma;
			return 1;
		case 0x1D5F:
			*normals = modifier_letter_small_delta;
			return 1;
		case 0x1D60:
			*normals = modifier_letter_small_greek_phi;
			return 1;
		case 0x1D61:
			*normals = modifier_letter_small_chi;
			return 1;
		case 0x1D62:
			*normals = latin_subscript_small_letter_i;
			return 1;
		case 0x1D63:
			*normals = latin_subscript_small_letter_r;
			return 1;
		case 0x1D64:
			*normals = latin_subscript_small_letter_u;
			return 1;
		case 0x1D65:
			*normals = latin_subscript_small_letter_v;
			return 1;
		case 0x1D66:
			*normals = greek_subscript_small_letter_beta;
			return 1;
		case 0x1D67:
			*normals = greek_subscript_small_letter_gamma;
			return 1;
		case 0x1D68:
			*normals = greek_subscript_small_letter_rho;
			return 1;
		case 0x1D69:
			*normals = greek_subscript_small_letter_phi;
			return 1;
		case 0x1D6A:
			*normals = greek_subscript_small_letter_chi;
			return 1;
		case 0x1D78:
			*normals = modifier_letter_cyrillic_en;
			return 1;
		case 0x1D9B:
			*normals = modifier_letter_small_turned_alpha;
			return 1;
		case 0x1D9C:
			*normals = modifier_letter_small_c;
			return 1;
		case 0x1D9D:
			*normals = modifier_letter_small_c_with_curl;
			return 1;
		case 0x1D9E:
			*normals = modifier_letter_small_eth;
			return 1;
		case 0x1D9F:
			*normals = modifier_letter_small_reversed_open_e;
			return 1;
		case 0x1DA0:
			*normals = modifier_letter_small_f;
			return 1;
		case 0x1DA1:
			*normals = modifier_letter_small_dotless_j_with_stroke;
			return 1;
		case 0x1DA2:
			*normals = modifier_letter_small_script_g;
			return 1;
		case 0x1DA3:
			*normals = modifier_letter_small_turned_h;
			return 1;
		case 0x1DA4:
			*normals = modifier_letter_small_i_with_stroke;
			return 1;
		case 0x1DA5:
			*normals = modifier_letter_small_iota;
			return 1;
		case 0x1DA6:
			*normals = modifier_letter_small_capital_i;
			return 1;
		case 0x1DA7:
			*normals = modifier_letter_small_capital_i_with_stroke;
			return 1;
		case 0x1DA8:
			*normals = modifier_letter_small_j_with_crossed_tail;
			return 1;
		case 0x1DA9:
			*normals = modifier_letter_small_l_with_retroflex_hook;
			return 1;
		case 0x1DAA:
			*normals = modifier_letter_small_l_with_palatal_hook;
			return 1;
		case 0x1DAB:
			*normals = modifier_letter_small_capital_l;
			return 1;
		case 0x1DAC:
			*normals = modifier_letter_small_m_with_hook;
			return 1;
		case 0x1DAD:
			*normals = modifier_letter_small_turned_m_with_long_leg;
			return 1;
		case 0x1DAE:
			*normals = modifier_letter_small_n_with_left_hook;
			return 1;
		case 0x1DAF:
			*normals = modifier_letter_small_n_with_retroflex_hook;
			return 1;
		case 0x1DB0:
			*normals = modifier_letter_small_capital_n;
			return 1;
		case 0x1DB1:
			*normals = modifier_letter_small_barred_o;
			return 1;
		case 0x1DB2:
			*normals = modifier_letter_small_phi;
			return 1;
		case 0x1DB3:
			*normals = modifier_letter_small_s_with_hook;
			return 1;
		case 0x1DB4:
			*normals = modifier_letter_small_esh;
			return 1;
		case 0x1DB5:
			*normals = modifier_letter_small_t_with_palatal_hook;
			return 1;
		case 0x1DB6:
			*normals = modifier_letter_small_u_bar;
			return 1;
		case 0x1DB7:
			*normals = modifier_letter_small_upsilon;
			return 1;
		case 0x1DB8:
			*normals = modifier_letter_small_capital_u;
			return 1;
		case 0x1DB9:
			*normals = modifier_letter_small_v_with_hook;
			return 1;
		case 0x1DBA:
			*normals = modifier_letter_small_turned_v;
			return 1;
		case 0x1DBB:
			*normals = modifier_letter_small_z;
			return 1;
		case 0x1DBC:
			*normals = modifier_letter_small_z_with_retroflex_hook;
			return 1;
		case 0x1DBD:
			*normals = modifier_letter_small_z_with_curl;
			return 1;
		case 0x1DBE:
			*normals = modifier_letter_small_ezh;
			return 1;
		case 0x1DBF:
			*normals = modifier_letter_small_theta;
			return 1;
		case 0x1E00:
			*normals = latin_capital_letter_a_with_ring_below;
			return 2;
		case 0x1E01:
			*normals = latin_small_letter_a_with_ring_below;
			return 2;
		case 0x1E02:
			*normals = latin_capital_letter_b_with_dot_above;
			return 2;
		case 0x1E03:
			*normals = latin_small_letter_b_with_dot_above;
			return 2;
		case 0x1E04:
			*normals = latin_capital_letter_b_with_dot_below;
			return 2;
		case 0x1E05:
			*normals = latin_small_letter_b_with_dot_below;
			return 2;
		case 0x1E06:
			*normals = latin_capital_letter_b_with_line_below;
			return 2;
		case 0x1E07:
			*normals = latin_small_letter_b_with_line_below;
			return 2;
		case 0x1E08:
			*normals = latin_capital_letter_c_with_cedilla_and_acute;
			return 2;
		case 0x1E09:
			*normals = latin_small_letter_c_with_cedilla_and_acute;
			return 2;
		case 0x1E0A:
			*normals = latin_capital_letter_d_with_dot_above;
			return 2;
		case 0x1E0B:
			*normals = latin_small_letter_d_with_dot_above;
			return 2;
		case 0x1E0C:
			*normals = latin_capital_letter_d_with_dot_below;
			return 2;
		case 0x1E0D:
			*normals = latin_small_letter_d_with_dot_below;
			return 2;
		case 0x1E0E:
			*normals = latin_capital_letter_d_with_line_below;
			return 2;
		case 0x1E0F:
			*normals = latin_small_letter_d_with_line_below;
			return 2;
		case 0x1E10:
			*normals = latin_capital_letter_d_with_cedilla;
			return 2;
		case 0x1E11:
			*normals = latin_small_letter_d_with_cedilla;
			return 2;
		case 0x1E12:
			*normals = latin_capital_letter_d_with_circumflex_below;
			return 2;
		case 0x1E13:
			*normals = latin_small_letter_d_with_circumflex_below;
			return 2;
		case 0x1E14:
			*normals = latin_capital_letter_e_with_macron_and_grave;
			return 2;
		case 0x1E15:
			*normals = latin_small_letter_e_with_macron_and_grave;
			return 2;
		case 0x1E16:
			*normals = latin_capital_letter_e_with_macron_and_acute;
			return 2;
		case 0x1E17:
			*normals = latin_small_letter_e_with_macron_and_acute;
			return 2;
		case 0x1E18:
			*normals = latin_capital_letter_e_with_circumflex_below;
			return 2;
		case 0x1E19:
			*normals = latin_small_letter_e_with_circumflex_below;
			return 2;
		case 0x1E1A:
			*normals = latin_capital_letter_e_with_tilde_below;
			return 2;
		case 0x1E1B:
			*normals = latin_small_letter_e_with_tilde_below;
			return 2;
		case 0x1E1C:
			*normals = latin_capital_letter_e_with_cedilla_and_breve;
			return 2;
		case 0x1E1D:
			*normals = latin_small_letter_e_with_cedilla_and_breve;
			return 2;
		case 0x1E1E:
			*normals = latin_capital_letter_f_with_dot_above;
			return 2;
		case 0x1E1F:
			*normals = latin_small_letter_f_with_dot_above;
			return 2;
		case 0x1E20:
			*normals = latin_capital_letter_g_with_macron;
			return 2;
		case 0x1E21:
			*normals = latin_small_letter_g_with_macron;
			return 2;
		case 0x1E22:
			*normals = latin_capital_letter_h_with_dot_above;
			return 2;
		case 0x1E23:
			*normals = latin_small_letter_h_with_dot_above;
			return 2;
		case 0x1E24:
			*normals = latin_capital_letter_h_with_dot_below;
			return 2;
		case 0x1E25:
			*normals = latin_small_letter_h_with_dot_below;
			return 2;
		case 0x1E26:
			*normals = latin_capital_letter_h_with_diaeresis;
			return 2;
		case 0x1E27:
			*normals = latin_small_letter_h_with_diaeresis;
			return 2;
		case 0x1E28:
			*normals = latin_capital_letter_h_with_cedilla;
			return 2;
		case 0x1E29:
			*normals = latin_small_letter_h_with_cedilla;
			return 2;
		case 0x1E2A:
			*normals = latin_capital_letter_h_with_breve_below;
			return 2;
		case 0x1E2B:
			*normals = latin_small_letter_h_with_breve_below;
			return 2;
		case 0x1E2C:
			*normals = latin_capital_letter_i_with_tilde_below;
			return 2;
		case 0x1E2D:
			*normals = latin_small_letter_i_with_tilde_below;
			return 2;
		case 0x1E2E:
			*normals = latin_capital_letter_i_with_diaeresis_and_acute;
			return 2;
		case 0x1E2F:
			*normals = latin_small_letter_i_with_diaeresis_and_acute;
			return 2;
		case 0x1E30:
			*normals = latin_capital_letter_k_with_acute;
			return 2;
		case 0x1E31:
			*normals = latin_small_letter_k_with_acute;
			return 2;
		case 0x1E32:
			*normals = latin_capital_letter_k_with_dot_below;
			return 2;
		case 0x1E33:
			*normals = latin_small_letter_k_with_dot_below;
			return 2;
		case 0x1E34:
			*normals = latin_capital_letter_k_with_line_below;
			return 2;
		case 0x1E35:
			*normals = latin_small_letter_k_with_line_below;
			return 2;
		case 0x1E36:
			*normals = latin_capital_letter_l_with_dot_below;
			return 2;
		case 0x1E37:
			*normals = latin_small_letter_l_with_dot_below;
			return 2;
		case 0x1E38:
			*normals = latin_capital_letter_l_with_dot_below_and_macron;
			return 2;
		case 0x1E39:
			*normals = latin_small_letter_l_with_dot_below_and_macron;
			return 2;
		case 0x1E3A:
			*normals = latin_capital_letter_l_with_line_below;
			return 2;
		case 0x1E3B:
			*normals = latin_small_letter_l_with_line_below;
			return 2;
		case 0x1E3C:
			*normals = latin_capital_letter_l_with_circumflex_below;
			return 2;
		case 0x1E3D:
			*normals = latin_small_letter_l_with_circumflex_below;
			return 2;
		case 0x1E3E:
			*normals = latin_capital_letter_m_with_acute;
			return 2;
		case 0x1E3F:
			*normals = latin_small_letter_m_with_acute;
			return 2;
		case 0x1E40:
			*normals = latin_capital_letter_m_with_dot_above;
			return 2;
		case 0x1E41:
			*normals = latin_small_letter_m_with_dot_above;
			return 2;
		case 0x1E42:
			*normals = latin_capital_letter_m_with_dot_below;
			return 2;
		case 0x1E43:
			*normals = latin_small_letter_m_with_dot_below;
			return 2;
		case 0x1E44:
			*normals = latin_capital_letter_n_with_dot_above;
			return 2;
		case 0x1E45:
			*normals = latin_small_letter_n_with_dot_above;
			return 2;
		case 0x1E46:
			*normals = latin_capital_letter_n_with_dot_below;
			return 2;
		case 0x1E47:
			*normals = latin_small_letter_n_with_dot_below;
			return 2;
		case 0x1E48:
			*normals = latin_capital_letter_n_with_line_below;
			return 2;
		case 0x1E49:
			*normals = latin_small_letter_n_with_line_below;
			return 2;
		case 0x1E4A:
			*normals = latin_capital_letter_n_with_circumflex_below;
			return 2;
		case 0x1E4B:
			*normals = latin_small_letter_n_with_circumflex_below;
			return 2;
		case 0x1E4C:
			*normals = latin_capital_letter_o_with_tilde_and_acute;
			return 2;
		case 0x1E4D:
			*normals = latin_small_letter_o_with_tilde_and_acute;
			return 2;
		case 0x1E4E:
			*normals = latin_capital_letter_o_with_tilde_and_diaeresis;
			return 2;
		case 0x1E4F:
			*normals = latin_small_letter_o_with_tilde_and_diaeresis;
			return 2;
		case 0x1E50:
			*normals = latin_capital_letter_o_with_macron_and_grave;
			return 2;
		case 0x1E51:
			*normals = latin_small_letter_o_with_macron_and_grave;
			return 2;
		case 0x1E52:
			*normals = latin_capital_letter_o_with_macron_and_acute;
			return 2;
		case 0x1E53:
			*normals = latin_small_letter_o_with_macron_and_acute;
			return 2;
		case 0x1E54:
			*normals = latin_capital_letter_p_with_acute;
			return 2;
		case 0x1E55:
			*normals = latin_small_letter_p_with_acute;
			return 2;
		case 0x1E56:
			*normals = latin_capital_letter_p_with_dot_above;
			return 2;
		case 0x1E57:
			*normals = latin_small_letter_p_with_dot_above;
			return 2;
		case 0x1E58:
			*normals = latin_capital_letter_r_with_dot_above;
			return 2;
		case 0x1E59:
			*normals = latin_small_letter_r_with_dot_above;
			return 2;
		case 0x1E5A:
			*normals = latin_capital_letter_r_with_dot_below;
			return 2;
		case 0x1E5B:
			*normals = latin_small_letter_r_with_dot_below;
			return 2;
		case 0x1E5C:
			*normals = latin_capital_letter_r_with_dot_below_and_macron;
			return 2;
		case 0x1E5D:
			*normals = latin_small_letter_r_with_dot_below_and_macron;
			return 2;
		case 0x1E5E:
			*normals = latin_capital_letter_r_with_line_below;
			return 2;
		case 0x1E5F:
			*normals = latin_small_letter_r_with_line_below;
			return 2;
		case 0x1E60:
			*normals = latin_capital_letter_s_with_dot_above;
			return 2;
		case 0x1E61:
			*normals = latin_small_letter_s_with_dot_above;
			return 2;
		case 0x1E62:
			*normals = latin_capital_letter_s_with_dot_below;
			return 2;
		case 0x1E63:
			*normals = latin_small_letter_s_with_dot_below;
			return 2;
		case 0x1E64:
			*normals = latin_capital_letter_s_with_acute_and_dot_above;
			return 2;
		case 0x1E65:
			*normals = latin_small_letter_s_with_acute_and_dot_above;
			return 2;
		case 0x1E66:
			*normals = latin_capital_letter_s_with_caron_and_dot_above;
			return 2;
		case 0x1E67:
			*normals = latin_small_letter_s_with_caron_and_dot_above;
			return 2;
		case 0x1E68:
			*normals = latin_capital_letter_s_with_dot_below_and_dot_above;
			return 2;
		case 0x1E69:
			*normals = latin_small_letter_s_with_dot_below_and_dot_above;
			return 2;
		case 0x1E6A:
			*normals = latin_capital_letter_t_with_dot_above;
			return 2;
		case 0x1E6B:
			*normals = latin_small_letter_t_with_dot_above;
			return 2;
		case 0x1E6C:
			*normals = latin_capital_letter_t_with_dot_below;
			return 2;
		case 0x1E6D:
			*normals = latin_small_letter_t_with_dot_below;
			return 2;
		case 0x1E6E:
			*normals = latin_capital_letter_t_with_line_below;
			return 2;
		case 0x1E6F:
			*normals = latin_small_letter_t_with_line_below;
			return 2;
		case 0x1E70:
			*normals = latin_capital_letter_t_with_circumflex_below;
			return 2;
		case 0x1E71:
			*normals = latin_small_letter_t_with_circumflex_below;
			return 2;
		case 0x1E72:
			*normals = latin_capital_letter_u_with_diaeresis_below;
			return 2;
		case 0x1E73:
			*normals = latin_small_letter_u_with_diaeresis_below;
			return 2;
		case 0x1E74:
			*normals = latin_capital_letter_u_with_tilde_below;
			return 2;
		case 0x1E75:
			*normals = latin_small_letter_u_with_tilde_below;
			return 2;
		case 0x1E76:
			*normals = latin_capital_letter_u_with_circumflex_below;
			return 2;
		case 0x1E77:
			*normals = latin_small_letter_u_with_circumflex_below;
			return 2;
		case 0x1E78:
			*normals = latin_capital_letter_u_with_tilde_and_acute;
			return 2;
		case 0x1E79:
			*normals = latin_small_letter_u_with_tilde_and_acute;
			return 2;
		case 0x1E7A:
			*normals = latin_capital_letter_u_with_macron_and_diaeresis;
			return 2;
		case 0x1E7B:
			*normals = latin_small_letter_u_with_macron_and_diaeresis;
			return 2;
		case 0x1E7C:
			*normals = latin_capital_letter_v_with_tilde;
			return 2;
		case 0x1E7D:
			*normals = latin_small_letter_v_with_tilde;
			return 2;
		case 0x1E7E:
			*normals = latin_capital_letter_v_with_dot_below;
			return 2;
		case 0x1E7F:
			*normals = latin_small_letter_v_with_dot_below;
			return 2;
		case 0x1E80:
			*normals = latin_capital_letter_w_with_grave;
			return 2;
		case 0x1E81:
			*normals = latin_small_letter_w_with_grave;
			return 2;
		case 0x1E82:
			*normals = latin_capital_letter_w_with_acute;
			return 2;
		case 0x1E83:
			*normals = latin_small_letter_w_with_acute;
			return 2;
		case 0x1E84:
			*normals = latin_capital_letter_w_with_diaeresis;
			return 2;
		case 0x1E85:
			*normals = latin_small_letter_w_with_diaeresis;
			return 2;
		case 0x1E86:
			*normals = latin_capital_letter_w_with_dot_above;
			return 2;
		case 0x1E87:
			*normals = latin_small_letter_w_with_dot_above;
			return 2;
		case 0x1E88:
			*normals = latin_capital_letter_w_with_dot_below;
			return 2;
		case 0x1E89:
			*normals = latin_small_letter_w_with_dot_below;
			return 2;
		case 0x1E8A:
			*normals = latin_capital_letter_x_with_dot_above;
			return 2;
		case 0x1E8B:
			*normals = latin_small_letter_x_with_dot_above;
			return 2;
		case 0x1E8C:
			*normals = latin_capital_letter_x_with_diaeresis;
			return 2;
		case 0x1E8D:
			*normals = latin_small_letter_x_with_diaeresis;
			return 2;
		case 0x1E8E:
			*normals = latin_capital_letter_y_with_dot_above;
			return 2;
		case 0x1E8F:
			*normals = latin_small_letter_y_with_dot_above;
			return 2;
		case 0x1E90:
			*normals = latin_capital_letter_z_with_circumflex;
			return 2;
		case 0x1E91:
			*normals = latin_small_letter_z_with_circumflex;
			return 2;
		case 0x1E92:
			*normals = latin_capital_letter_z_with_dot_below;
			return 2;
		case 0x1E93:
			*normals = latin_small_letter_z_with_dot_below;
			return 2;
		case 0x1E94:
			*normals = latin_capital_letter_z_with_line_below;
			return 2;
		case 0x1E95:
			*normals = latin_small_letter_z_with_line_below;
			return 2;
		case 0x1E96:
			*normals = latin_small_letter_h_with_line_below;
			return 2;
		case 0x1E97:
			*normals = latin_small_letter_t_with_diaeresis;
			return 2;
		case 0x1E98:
			*normals = latin_small_letter_w_with_ring_above;
			return 2;
		case 0x1E99:
			*normals = latin_small_letter_y_with_ring_above;
			return 2;
		case 0x1E9A:
			*normals = latin_small_letter_a_with_right_half_ring;
			return 2;
		case 0x1E9B:
			*normals = latin_small_letter_long_s_with_dot_above;
			return 2;
		case 0x1EA0:
			*normals = latin_capital_letter_a_with_dot_below;
			return 2;
		case 0x1EA1:
			*normals = latin_small_letter_a_with_dot_below;
			return 2;
		case 0x1EA2:
			*normals = latin_capital_letter_a_with_hook_above;
			return 2;
		case 0x1EA3:
			*normals = latin_small_letter_a_with_hook_above;
			return 2;
		case 0x1EA4:
			*normals = latin_capital_letter_a_with_circumflex_and_acute;
			return 2;
		case 0x1EA5:
			*normals = latin_small_letter_a_with_circumflex_and_acute;
			return 2;
		case 0x1EA6:
			*normals = latin_capital_letter_a_with_circumflex_and_grave;
			return 2;
		case 0x1EA7:
			*normals = latin_small_letter_a_with_circumflex_and_grave;
			return 2;
		case 0x1EA8:
			*normals = latin_capital_letter_a_with_circumflex_and_hook_above;
			return 2;
		case 0x1EA9:
			*normals = latin_small_letter_a_with_circumflex_and_hook_above;
			return 2;
		case 0x1EAA:
			*normals = latin_capital_letter_a_with_circumflex_and_tilde;
			return 2;
		case 0x1EAB:
			*normals = latin_small_letter_a_with_circumflex_and_tilde;
			return 2;
		case 0x1EAC:
			*normals = latin_capital_letter_a_with_circumflex_and_dot_below;
			return 2;
		case 0x1EAD:
			*normals = latin_small_letter_a_with_circumflex_and_dot_below;
			return 2;
		case 0x1EAE:
			*normals = latin_capital_letter_a_with_breve_and_acute;
			return 2;
		case 0x1EAF:
			*normals = latin_small_letter_a_with_breve_and_acute;
			return 2;
		case 0x1EB0:
			*normals = latin_capital_letter_a_with_breve_and_grave;
			return 2;
		case 0x1EB1:
			*normals = latin_small_letter_a_with_breve_and_grave;
			return 2;
		case 0x1EB2:
			*normals = latin_capital_letter_a_with_breve_and_hook_above;
			return 2;
		case 0x1EB3:
			*normals = latin_small_letter_a_with_breve_and_hook_above;
			return 2;
		case 0x1EB4:
			*normals = latin_capital_letter_a_with_breve_and_tilde;
			return 2;
		case 0x1EB5:
			*normals = latin_small_letter_a_with_breve_and_tilde;
			return 2;
		case 0x1EB6:
			*normals = latin_capital_letter_a_with_breve_and_dot_below;
			return 2;
		case 0x1EB7:
			*normals = latin_small_letter_a_with_breve_and_dot_below;
			return 2;
		case 0x1EB8:
			*normals = latin_capital_letter_e_with_dot_below;
			return 2;
		case 0x1EB9:
			*normals = latin_small_letter_e_with_dot_below;
			return 2;
		case 0x1EBA:
			*normals = latin_capital_letter_e_with_hook_above;
			return 2;
		case 0x1EBB:
			*normals = latin_small_letter_e_with_hook_above;
			return 2;
		case 0x1EBC:
			*normals = latin_capital_letter_e_with_tilde;
			return 2;
		case 0x1EBD:
			*normals = latin_small_letter_e_with_tilde;
			return 2;
		case 0x1EBE:
			*normals = latin_capital_letter_e_with_circumflex_and_acute;
			return 2;
		case 0x1EBF:
			*normals = latin_small_letter_e_with_circumflex_and_acute;
			return 2;
		case 0x1EC0:
			*normals = latin_capital_letter_e_with_circumflex_and_grave;
			return 2;
		case 0x1EC1:
			*normals = latin_small_letter_e_with_circumflex_and_grave;
			return 2;
		case 0x1EC2:
			*normals = latin_capital_letter_e_with_circumflex_and_hook_above;
			return 2;
		case 0x1EC3:
			*normals = latin_small_letter_e_with_circumflex_and_hook_above;
			return 2;
		case 0x1EC4:
			*normals = latin_capital_letter_e_with_circumflex_and_tilde;
			return 2;
		case 0x1EC5:
			*normals = latin_small_letter_e_with_circumflex_and_tilde;
			return 2;
		case 0x1EC6:
			*normals = latin_capital_letter_e_with_circumflex_and_dot_below;
			return 2;
		case 0x1EC7:
			*normals = latin_small_letter_e_with_circumflex_and_dot_below;
			return 2;
		case 0x1EC8:
			*normals = latin_capital_letter_i_with_hook_above;
			return 2;
		case 0x1EC9:
			*normals = latin_small_letter_i_with_hook_above;
			return 2;
		case 0x1ECA:
			*normals = latin_capital_letter_i_with_dot_below;
			return 2;
		case 0x1ECB:
			*normals = latin_small_letter_i_with_dot_below;
			return 2;
		case 0x1ECC:
			*normals = latin_capital_letter_o_with_dot_below;
			return 2;
		case 0x1ECD:
			*normals = latin_small_letter_o_with_dot_below;
			return 2;
		case 0x1ECE:
			*normals = latin_capital_letter_o_with_hook_above;
			return 2;
		case 0x1ECF:
			*normals = latin_small_letter_o_with_hook_above;
			return 2;
		case 0x1ED0:
			*normals = latin_capital_letter_o_with_circumflex_and_acute;
			return 2;
		case 0x1ED1:
			*normals = latin_small_letter_o_with_circumflex_and_acute;
			return 2;
		case 0x1ED2:
			*normals = latin_capital_letter_o_with_circumflex_and_grave;
			return 2;
		case 0x1ED3:
			*normals = latin_small_letter_o_with_circumflex_and_grave;
			return 2;
		case 0x1ED4:
			*normals = latin_capital_letter_o_with_circumflex_and_hook_above;
			return 2;
		case 0x1ED5:
			*normals = latin_small_letter_o_with_circumflex_and_hook_above;
			return 2;
		case 0x1ED6:
			*normals = latin_capital_letter_o_with_circumflex_and_tilde;
			return 2;
		case 0x1ED7:
			*normals = latin_small_letter_o_with_circumflex_and_tilde;
			return 2;
		case 0x1ED8:
			*normals = latin_capital_letter_o_with_circumflex_and_dot_below;
			return 2;
		case 0x1ED9:
			*normals = latin_small_letter_o_with_circumflex_and_dot_below;
			return 2;
		case 0x1EDA:
			*normals = latin_capital_letter_o_with_horn_and_acute;
			return 2;
		case 0x1EDB:
			*normals = latin_small_letter_o_with_horn_and_acute;
			return 2;
		case 0x1EDC:
			*normals = latin_capital_letter_o_with_horn_and_grave;
			return 2;
		case 0x1EDD:
			*normals = latin_small_letter_o_with_horn_and_grave;
			return 2;
		case 0x1EDE:
			*normals = latin_capital_letter_o_with_horn_and_hook_above;
			return 2;
		case 0x1EDF:
			*normals = latin_small_letter_o_with_horn_and_hook_above;
			return 2;
		case 0x1EE0:
			*normals = latin_capital_letter_o_with_horn_and_tilde;
			return 2;
		case 0x1EE1:
			*normals = latin_small_letter_o_with_horn_and_tilde;
			return 2;
		case 0x1EE2:
			*normals = latin_capital_letter_o_with_horn_and_dot_below;
			return 2;
		case 0x1EE3:
			*normals = latin_small_letter_o_with_horn_and_dot_below;
			return 2;
		case 0x1EE4:
			*normals = latin_capital_letter_u_with_dot_below;
			return 2;
		case 0x1EE5:
			*normals = latin_small_letter_u_with_dot_below;
			return 2;
		case 0x1EE6:
			*normals = latin_capital_letter_u_with_hook_above;
			return 2;
		case 0x1EE7:
			*normals = latin_small_letter_u_with_hook_above;
			return 2;
		case 0x1EE8:
			*normals = latin_capital_letter_u_with_horn_and_acute;
			return 2;
		case 0x1EE9:
			*normals = latin_small_letter_u_with_horn_and_acute;
			return 2;
		case 0x1EEA:
			*normals = latin_capital_letter_u_with_horn_and_grave;
			return 2;
		case 0x1EEB:
			*normals = latin_small_letter_u_with_horn_and_grave;
			return 2;
		case 0x1EEC:
			*normals = latin_capital_letter_u_with_horn_and_hook_above;
			return 2;
		case 0x1EED:
			*normals = latin_small_letter_u_with_horn_and_hook_above;
			return 2;
		case 0x1EEE:
			*normals = latin_capital_letter_u_with_horn_and_tilde;
			return 2;
		case 0x1EEF:
			*normals = latin_small_letter_u_with_horn_and_tilde;
			return 2;
		case 0x1EF0:
			*normals = latin_capital_letter_u_with_horn_and_dot_below;
			return 2;
		case 0x1EF1:
			*normals = latin_small_letter_u_with_horn_and_dot_below;
			return 2;
		case 0x1EF2:
			*normals = latin_capital_letter_y_with_grave;
			return 2;
		case 0x1EF3:
			*normals = latin_small_letter_y_with_grave;
			return 2;
		case 0x1EF4:
			*normals = latin_capital_letter_y_with_dot_below;
			return 2;
		case 0x1EF5:
			*normals = latin_small_letter_y_with_dot_below;
			return 2;
		case 0x1EF6:
			*normals = latin_capital_letter_y_with_hook_above;
			return 2;
		case 0x1EF7:
			*normals = latin_small_letter_y_with_hook_above;
			return 2;
		case 0x1EF8:
			*normals = latin_capital_letter_y_with_tilde;
			return 2;
		case 0x1EF9:
			*normals = latin_small_letter_y_with_tilde;
			return 2;
		case 0x1F00:
			*normals = greek_small_letter_alpha_with_psili;
			return 2;
		case 0x1F01:
			*normals = greek_small_letter_alpha_with_dasia;
			return 2;
		case 0x1F02:
			*normals = greek_small_letter_alpha_with_psili_and_varia;
			return 2;
		case 0x1F03:
			*normals = greek_small_letter_alpha_with_dasia_and_varia;
			return 2;
		case 0x1F04:
			*normals = greek_small_letter_alpha_with_psili_and_oxia;
			return 2;
		case 0x1F05:
			*normals = greek_small_letter_alpha_with_dasia_and_oxia;
			return 2;
		case 0x1F06:
			*normals = greek_small_letter_alpha_with_psili_and_perispomeni;
			return 2;
		case 0x1F07:
			*normals = greek_small_letter_alpha_with_dasia_and_perispomeni;
			return 2;
		case 0x1F08:
			*normals = greek_capital_letter_alpha_with_psili;
			return 2;
		case 0x1F09:
			*normals = greek_capital_letter_alpha_with_dasia;
			return 2;
		case 0x1F0A:
			*normals = greek_capital_letter_alpha_with_psili_and_varia;
			return 2;
		case 0x1F0B:
			*normals = greek_capital_letter_alpha_with_dasia_and_varia;
			return 2;
		case 0x1F0C:
			*normals = greek_capital_letter_alpha_with_psili_and_oxia;
			return 2;
		case 0x1F0D:
			*normals = greek_capital_letter_alpha_with_dasia_and_oxia;
			return 2;
		case 0x1F0E:
			*normals = greek_capital_letter_alpha_with_psili_and_perispomeni;
			return 2;
		case 0x1F0F:
			*normals = greek_capital_letter_alpha_with_dasia_and_perispomeni;
			return 2;
		case 0x1F10:
			*normals = greek_small_letter_epsilon_with_psili;
			return 2;
		case 0x1F11:
			*normals = greek_small_letter_epsilon_with_dasia;
			return 2;
		case 0x1F12:
			*normals = greek_small_letter_epsilon_with_psili_and_varia;
			return 2;
		case 0x1F13:
			*normals = greek_small_letter_epsilon_with_dasia_and_varia;
			return 2;
		case 0x1F14:
			*normals = greek_small_letter_epsilon_with_psili_and_oxia;
			return 2;
		case 0x1F15:
			*normals = greek_small_letter_epsilon_with_dasia_and_oxia;
			return 2;
		case 0x1F18:
			*normals = greek_capital_letter_epsilon_with_psili;
			return 2;
		case 0x1F19:
			*normals = greek_capital_letter_epsilon_with_dasia;
			return 2;
		case 0x1F1A:
			*normals = greek_capital_letter_epsilon_with_psili_and_varia;
			return 2;
		case 0x1F1B:
			*normals = greek_capital_letter_epsilon_with_dasia_and_varia;
			return 2;
		case 0x1F1C:
			*normals = greek_capital_letter_epsilon_with_psili_and_oxia;
			return 2;
		case 0x1F1D:
			*normals = greek_capital_letter_epsilon_with_dasia_and_oxia;
			return 2;
		case 0x1F20:
			*normals = greek_small_letter_eta_with_psili;
			return 2;
		case 0x1F21:
			*normals = greek_small_letter_eta_with_dasia;
			return 2;
		case 0x1F22:
			*normals = greek_small_letter_eta_with_psili_and_varia;
			return 2;
		case 0x1F23:
			*normals = greek_small_letter_eta_with_dasia_and_varia;
			return 2;
		case 0x1F24:
			*normals = greek_small_letter_eta_with_psili_and_oxia;
			return 2;
		case 0x1F25:
			*normals = greek_small_letter_eta_with_dasia_and_oxia;
			return 2;
		case 0x1F26:
			*normals = greek_small_letter_eta_with_psili_and_perispomeni;
			return 2;
		case 0x1F27:
			*normals = greek_small_letter_eta_with_dasia_and_perispomeni;
			return 2;
		case 0x1F28:
			*normals = greek_capital_letter_eta_with_psili;
			return 2;
		case 0x1F29:
			*normals = greek_capital_letter_eta_with_dasia;
			return 2;
		case 0x1F2A:
			*normals = greek_capital_letter_eta_with_psili_and_varia;
			return 2;
		case 0x1F2B:
			*normals = greek_capital_letter_eta_with_dasia_and_varia;
			return 2;
		case 0x1F2C:
			*normals = greek_capital_letter_eta_with_psili_and_oxia;
			return 2;
		case 0x1F2D:
			*normals = greek_capital_letter_eta_with_dasia_and_oxia;
			return 2;
		case 0x1F2E:
			*normals = greek_capital_letter_eta_with_psili_and_perispomeni;
			return 2;
		case 0x1F2F:
			*normals = greek_capital_letter_eta_with_dasia_and_perispomeni;
			return 2;
		case 0x1F30:
			*normals = greek_small_letter_iota_with_psili;
			return 2;
		case 0x1F31:
			*normals = greek_small_letter_iota_with_dasia;
			return 2;
		case 0x1F32:
			*normals = greek_small_letter_iota_with_psili_and_varia;
			return 2;
		case 0x1F33:
			*normals = greek_small_letter_iota_with_dasia_and_varia;
			return 2;
		case 0x1F34:
			*normals = greek_small_letter_iota_with_psili_and_oxia;
			return 2;
		case 0x1F35:
			*normals = greek_small_letter_iota_with_dasia_and_oxia;
			return 2;
		case 0x1F36:
			*normals = greek_small_letter_iota_with_psili_and_perispomeni;
			return 2;
		case 0x1F37:
			*normals = greek_small_letter_iota_with_dasia_and_perispomeni;
			return 2;
		case 0x1F38:
			*normals = greek_capital_letter_iota_with_psili;
			return 2;
		case 0x1F39:
			*normals = greek_capital_letter_iota_with_dasia;
			return 2;
		case 0x1F3A:
			*normals = greek_capital_letter_iota_with_psili_and_varia;
			return 2;
		case 0x1F3B:
			*normals = greek_capital_letter_iota_with_dasia_and_varia;
			return 2;
		case 0x1F3C:
			*normals = greek_capital_letter_iota_with_psili_and_oxia;
			return 2;
		case 0x1F3D:
			*normals = greek_capital_letter_iota_with_dasia_and_oxia;
			return 2;
		case 0x1F3E:
			*normals = greek_capital_letter_iota_with_psili_and_perispomeni;
			return 2;
		case 0x1F3F:
			*normals = greek_capital_letter_iota_with_dasia_and_perispomeni;
			return 2;
		case 0x1F40:
			*normals = greek_small_letter_omicron_with_psili;
			return 2;
		case 0x1F41:
			*normals = greek_small_letter_omicron_with_dasia;
			return 2;
		case 0x1F42:
			*normals = greek_small_letter_omicron_with_psili_and_varia;
			return 2;
		case 0x1F43:
			*normals = greek_small_letter_omicron_with_dasia_and_varia;
			return 2;
		case 0x1F44:
			*normals = greek_small_letter_omicron_with_psili_and_oxia;
			return 2;
		case 0x1F45:
			*normals = greek_small_letter_omicron_with_dasia_and_oxia;
			return 2;
		case 0x1F48:
			*normals = greek_capital_letter_omicron_with_psili;
			return 2;
		case 0x1F49:
			*normals = greek_capital_letter_omicron_with_dasia;
			return 2;
		case 0x1F4A:
			*normals = greek_capital_letter_omicron_with_psili_and_varia;
			return 2;
		case 0x1F4B:
			*normals = greek_capital_letter_omicron_with_dasia_and_varia;
			return 2;
		case 0x1F4C:
			*normals = greek_capital_letter_omicron_with_psili_and_oxia;
			return 2;
		case 0x1F4D:
			*normals = greek_capital_letter_omicron_with_dasia_and_oxia;
			return 2;
		case 0x1F50:
			*normals = greek_small_letter_upsilon_with_psili;
			return 2;
		case 0x1F51:
			*normals = greek_small_letter_upsilon_with_dasia;
			return 2;
		case 0x1F52:
			*normals = greek_small_letter_upsilon_with_psili_and_varia;
			return 2;
		case 0x1F53:
			*normals = greek_small_letter_upsilon_with_dasia_and_varia;
			return 2;
		case 0x1F54:
			*normals = greek_small_letter_upsilon_with_psili_and_oxia;
			return 2;
		case 0x1F55:
			*normals = greek_small_letter_upsilon_with_dasia_and_oxia;
			return 2;
		case 0x1F56:
			*normals = greek_small_letter_upsilon_with_psili_and_perispomeni;
			return 2;
		case 0x1F57:
			*normals = greek_small_letter_upsilon_with_dasia_and_perispomeni;
			return 2;
		case 0x1F59:
			*normals = greek_capital_letter_upsilon_with_dasia;
			return 2;
		case 0x1F5B:
			*normals = greek_capital_letter_upsilon_with_dasia_and_varia;
			return 2;
		case 0x1F5D:
			*normals = greek_capital_letter_upsilon_with_dasia_and_oxia;
			return 2;
		case 0x1F5F:
			*normals = greek_capital_letter_upsilon_with_dasia_and_perispomeni;
			return 2;
		case 0x1F60:
			*normals = greek_small_letter_omega_with_psili;
			return 2;
		case 0x1F61:
			*normals = greek_small_letter_omega_with_dasia;
			return 2;
		case 0x1F62:
			*normals = greek_small_letter_omega_with_psili_and_varia;
			return 2;
		case 0x1F63:
			*normals = greek_small_letter_omega_with_dasia_and_varia;
			return 2;
		case 0x1F64:
			*normals = greek_small_letter_omega_with_psili_and_oxia;
			return 2;
		case 0x1F65:
			*normals = greek_small_letter_omega_with_dasia_and_oxia;
			return 2;
		case 0x1F66:
			*normals = greek_small_letter_omega_with_psili_and_perispomeni;
			return 2;
		case 0x1F67:
			*normals = greek_small_letter_omega_with_dasia_and_perispomeni;
			return 2;
		case 0x1F68:
			*normals = greek_capital_letter_omega_with_psili;
			return 2;
		case 0x1F69:
			*normals = greek_capital_letter_omega_with_dasia;
			return 2;
		case 0x1F6A:
			*normals = greek_capital_letter_omega_with_psili_and_varia;
			return 2;
		case 0x1F6B:
			*normals = greek_capital_letter_omega_with_dasia_and_varia;
			return 2;
		case 0x1F6C:
			*normals = greek_capital_letter_omega_with_psili_and_oxia;
			return 2;
		case 0x1F6D:
			*normals = greek_capital_letter_omega_with_dasia_and_oxia;
			return 2;
		case 0x1F6E:
			*normals = greek_capital_letter_omega_with_psili_and_perispomeni;
			return 2;
		case 0x1F6F:
			*normals = greek_capital_letter_omega_with_dasia_and_perispomeni;
			return 2;
		case 0x1F70:
			*normals = greek_small_letter_alpha_with_varia;
			return 2;
		case 0x1F71:
			*normals = greek_small_letter_alpha_with_oxia;
			return 1;
		case 0x1F72:
			*normals = greek_small_letter_epsilon_with_varia;
			return 2;
		case 0x1F73:
			*normals = greek_small_letter_epsilon_with_oxia;
			return 1;
		case 0x1F74:
			*normals = greek_small_letter_eta_with_varia;
			return 2;
		case 0x1F75:
			*normals = greek_small_letter_eta_with_oxia;
			return 1;
		case 0x1F76:
			*normals = greek_small_letter_iota_with_varia;
			return 2;
		case 0x1F77:
			*normals = greek_small_letter_iota_with_oxia;
			return 1;
		case 0x1F78:
			*normals = greek_small_letter_omicron_with_varia;
			return 2;
		case 0x1F79:
			*normals = greek_small_letter_omicron_with_oxia;
			return 1;
		case 0x1F7A:
			*normals = greek_small_letter_upsilon_with_varia;
			return 2;
		case 0x1F7B:
			*normals = greek_small_letter_upsilon_with_oxia;
			return 1;
		case 0x1F7C:
			*normals = greek_small_letter_omega_with_varia;
			return 2;
		case 0x1F7D:
			*normals = greek_small_letter_omega_with_oxia;
			return 1;
		case 0x1F80:
			*normals = greek_small_letter_alpha_with_psili_and_ypogegrammeni;
			return 2;
		case 0x1F81:
			*normals = greek_small_letter_alpha_with_dasia_and_ypogegrammeni;
			return 2;
		case 0x1F82:
			*normals = greek_small_letter_alpha_with_psili_and_varia_and_ypogegrammeni;
			return 2;
		case 0x1F83:
			*normals = greek_small_letter_alpha_with_dasia_and_varia_and_ypogegrammeni;
			return 2;
		case 0x1F84:
			*normals = greek_small_letter_alpha_with_psili_and_oxia_and_ypogegrammeni;
			return 2;
		case 0x1F85:
			*normals = greek_small_letter_alpha_with_dasia_and_oxia_and_ypogegrammeni;
			return 2;
		case 0x1F86:
			*normals = greek_small_letter_alpha_with_psili_and_perispomeni_and_ypogegrammeni;
			return 2;
		case 0x1F87:
			*normals = greek_small_letter_alpha_with_dasia_and_perispomeni_and_ypogegrammeni;
			return 2;
		case 0x1F88:
			*normals = greek_capital_letter_alpha_with_psili_and_prosgegrammeni;
			return 2;
		case 0x1F89:
			*normals = greek_capital_letter_alpha_with_dasia_and_prosgegrammeni;
			return 2;
		case 0x1F8A:
			*normals = greek_capital_letter_alpha_with_psili_and_varia_and_prosgegrammeni;
			return 2;
		case 0x1F8B:
			*normals = greek_capital_letter_alpha_with_dasia_and_varia_and_prosgegrammeni;
			return 2;
		case 0x1F8C:
			*normals = greek_capital_letter_alpha_with_psili_and_oxia_and_prosgegrammeni;
			return 2;
		case 0x1F8D:
			*normals = greek_capital_letter_alpha_with_dasia_and_oxia_and_prosgegrammeni;
			return 2;
		case 0x1F8E:
			*normals = greek_capital_letter_alpha_with_psili_and_perispomeni_and_prosgegrammeni;
			return 2;
		case 0x1F8F:
			*normals = greek_capital_letter_alpha_with_dasia_and_perispomeni_and_prosgegrammeni;
			return 2;
		case 0x1F90:
			*normals = greek_small_letter_eta_with_psili_and_ypogegrammeni;
			return 2;
		case 0x1F91:
			*normals = greek_small_letter_eta_with_dasia_and_ypogegrammeni;
			return 2;
		case 0x1F92:
			*normals = greek_small_letter_eta_with_psili_and_varia_and_ypogegrammeni;
			return 2;
		case 0x1F93:
			*normals = greek_small_letter_eta_with_dasia_and_varia_and_ypogegrammeni;
			return 2;
		case 0x1F94:
			*normals = greek_small_letter_eta_with_psili_and_oxia_and_ypogegrammeni;
			return 2;
		case 0x1F95:
			*normals = greek_small_letter_eta_with_dasia_and_oxia_and_ypogegrammeni;
			return 2;
		case 0x1F96:
			*normals = greek_small_letter_eta_with_psili_and_perispomeni_and_ypogegrammeni;
			return 2;
		case 0x1F97:
			*normals = greek_small_letter_eta_with_dasia_and_perispomeni_and_ypogegrammeni;
			return 2;
		case 0x1F98:
			*normals = greek_capital_letter_eta_with_psili_and_prosgegrammeni;
			return 2;
		case 0x1F99:
			*normals = greek_capital_letter_eta_with_dasia_and_prosgegrammeni;
			return 2;
		case 0x1F9A:
			*normals = greek_capital_letter_eta_with_psili_and_varia_and_prosgegrammeni;
			return 2;
		case 0x1F9B:
			*normals = greek_capital_letter_eta_with_dasia_and_varia_and_prosgegrammeni;
			return 2;
		case 0x1F9C:
			*normals = greek_capital_letter_eta_with_psili_and_oxia_and_prosgegrammeni;
			return 2;
		case 0x1F9D:
			*normals = greek_capital_letter_eta_with_dasia_and_oxia_and_prosgegrammeni;
			return 2;
		case 0x1F9E:
			*normals = greek_capital_letter_eta_with_psili_and_perispomeni_and_prosgegrammeni;
			return 2;
		case 0x1F9F:
			*normals = greek_capital_letter_eta_with_dasia_and_perispomeni_and_prosgegrammeni;
			return 2;
		case 0x1FA0:
			*normals = greek_small_letter_omega_with_psili_and_ypogegrammeni;
			return 2;
		case 0x1FA1:
			*normals = greek_small_letter_omega_with_dasia_and_ypogegrammeni;
			return 2;
		case 0x1FA2:
			*normals = greek_small_letter_omega_with_psili_and_varia_and_ypogegrammeni;
			return 2;
		case 0x1FA3:
			*normals = greek_small_letter_omega_with_dasia_and_varia_and_ypogegrammeni;
			return 2;
		case 0x1FA4:
			*normals = greek_small_letter_omega_with_psili_and_oxia_and_ypogegrammeni;
			return 2;
		case 0x1FA5:
			*normals = greek_small_letter_omega_with_dasia_and_oxia_and_ypogegrammeni;
			return 2;
		case 0x1FA6:
			*normals = greek_small_letter_omega_with_psili_and_perispomeni_and_ypogegrammeni;
			return 2;
		case 0x1FA7:
			*normals = greek_small_letter_omega_with_dasia_and_perispomeni_and_ypogegrammeni;
			return 2;
		case 0x1FA8:
			*normals = greek_capital_letter_omega_with_psili_and_prosgegrammeni;
			return 2;
		case 0x1FA9:
			*normals = greek_capital_letter_omega_with_dasia_and_prosgegrammeni;
			return 2;
		case 0x1FAA:
			*normals = greek_capital_letter_omega_with_psili_and_varia_and_prosgegrammeni;
			return 2;
		case 0x1FAB:
			*normals = greek_capital_letter_omega_with_dasia_and_varia_and_prosgegrammeni;
			return 2;
		case 0x1FAC:
			*normals = greek_capital_letter_omega_with_psili_and_oxia_and_prosgegrammeni;
			return 2;
		case 0x1FAD:
			*normals = greek_capital_letter_omega_with_dasia_and_oxia_and_prosgegrammeni;
			return 2;
		case 0x1FAE:
			*normals = greek_capital_letter_omega_with_psili_and_perispomeni_and_prosgegrammeni;
			return 2;
		case 0x1FAF:
			*normals = greek_capital_letter_omega_with_dasia_and_perispomeni_and_prosgegrammeni;
			return 2;
		case 0x1FB0:
			*normals = greek_small_letter_alpha_with_vrachy;
			return 2;
		case 0x1FB1:
			*normals = greek_small_letter_alpha_with_macron;
			return 2;
		case 0x1FB2:
			*normals = greek_small_letter_alpha_with_varia_and_ypogegrammeni;
			return 2;
		case 0x1FB3:
			*normals = greek_small_letter_alpha_with_ypogegrammeni;
			return 2;
		case 0x1FB4:
			*normals = greek_small_letter_alpha_with_oxia_and_ypogegrammeni;
			return 2;
		case 0x1FB6:
			*normals = greek_small_letter_alpha_with_perispomeni;
			return 2;
		case 0x1FB7:
			*normals = greek_small_letter_alpha_with_perispomeni_and_ypogegrammeni;
			return 2;
		case 0x1FB8:
			*normals = greek_capital_letter_alpha_with_vrachy;
			return 2;
		case 0x1FB9:
			*normals = greek_capital_letter_alpha_with_macron;
			return 2;
		case 0x1FBA:
			*normals = greek_capital_letter_alpha_with_varia;
			return 2;
		case 0x1FBB:
			*normals = greek_capital_letter_alpha_with_oxia;
			return 1;
		case 0x1FBC:
			*normals = greek_capital_letter_alpha_with_prosgegrammeni;
			return 2;
		case 0x1FBD:
			*normals = greek_koronis;
			return 2;
		case 0x1FBE:
			*normals = greek_prosgegrammeni;
			return 1;
		case 0x1FBF:
			*normals = greek_psili;
			return 2;
		case 0x1FC0:
			*normals = greek_perispomeni;
			return 2;
		case 0x1FC1:
			*normals = greek_dialytika_and_perispomeni;
			return 2;
		case 0x1FC2:
			*normals = greek_small_letter_eta_with_varia_and_ypogegrammeni;
			return 2;
		case 0x1FC3:
			*normals = greek_small_letter_eta_with_ypogegrammeni;
			return 2;
		case 0x1FC4:
			*normals = greek_small_letter_eta_with_oxia_and_ypogegrammeni;
			return 2;
		case 0x1FC6:
			*normals = greek_small_letter_eta_with_perispomeni;
			return 2;
		case 0x1FC7:
			*normals = greek_small_letter_eta_with_perispomeni_and_ypogegrammeni;
			return 2;
		case 0x1FC8:
			*normals = greek_capital_letter_epsilon_with_varia;
			return 2;
		case 0x1FC9:
			*normals = greek_capital_letter_epsilon_with_oxia;
			return 1;
		case 0x1FCA:
			*normals = greek_capital_letter_eta_with_varia;
			return 2;
		case 0x1FCB:
			*normals = greek_capital_letter_eta_with_oxia;
			return 1;
		case 0x1FCC:
			*normals = greek_capital_letter_eta_with_prosgegrammeni;
			return 2;
		case 0x1FCD:
			*normals = greek_psili_and_varia;
			return 2;
		case 0x1FCE:
			*normals = greek_psili_and_oxia;
			return 2;
		case 0x1FCF:
			*normals = greek_psili_and_perispomeni;
			return 2;
		case 0x1FD0:
			*normals = greek_small_letter_iota_with_vrachy;
			return 2;
		case 0x1FD1:
			*normals = greek_small_letter_iota_with_macron;
			return 2;
		case 0x1FD2:
			*normals = greek_small_letter_iota_with_dialytika_and_varia;
			return 2;
		case 0x1FD3:
			*normals = greek_small_letter_iota_with_dialytika_and_oxia;
			return 1;
		case 0x1FD6:
			*normals = greek_small_letter_iota_with_perispomeni;
			return 2;
		case 0x1FD7:
			*normals = greek_small_letter_iota_with_dialytika_and_perispomeni;
			return 2;
		case 0x1FD8:
			*normals = greek_capital_letter_iota_with_vrachy;
			return 2;
		case 0x1FD9:
			*normals = greek_capital_letter_iota_with_macron;
			return 2;
		case 0x1FDA:
			*normals = greek_capital_letter_iota_with_varia;
			return 2;
		case 0x1FDB:
			*normals = greek_capital_letter_iota_with_oxia;
			return 1;
		case 0x1FDD:
			*normals = greek_dasia_and_varia;
			return 2;
		case 0x1FDE:
			*normals = greek_dasia_and_oxia;
			return 2;
		case 0x1FDF:
			*normals = greek_dasia_and_perispomeni;
			return 2;
		case 0x1FE0:
			*normals = greek_small_letter_upsilon_with_vrachy;
			return 2;
		case 0x1FE1:
			*normals = greek_small_letter_upsilon_with_macron;
			return 2;
		case 0x1FE2:
			*normals = greek_small_letter_upsilon_with_dialytika_and_varia;
			return 2;
		case 0x1FE3:
			*normals = greek_small_letter_upsilon_with_dialytika_and_oxia;
			return 1;
		case 0x1FE4:
			*normals = greek_small_letter_rho_with_psili;
			return 2;
		case 0x1FE5:
			*normals = greek_small_letter_rho_with_dasia;
			return 2;
		case 0x1FE6:
			*normals = greek_small_letter_upsilon_with_perispomeni;
			return 2;
		case 0x1FE7:
			*normals = greek_small_letter_upsilon_with_dialytika_and_perispomeni;
			return 2;
		case 0x1FE8:
			*normals = greek_capital_letter_upsilon_with_vrachy;
			return 2;
		case 0x1FE9:
			*normals = greek_capital_letter_upsilon_with_macron;
			return 2;
		case 0x1FEA:
			*normals = greek_capital_letter_upsilon_with_varia;
			return 2;
		case 0x1FEB:
			*normals = greek_capital_letter_upsilon_with_oxia;
			return 1;
		case 0x1FEC:
			*normals = greek_capital_letter_rho_with_dasia;
			return 2;
		case 0x1FED:
			*normals = greek_dialytika_and_varia;
			return 2;
		case 0x1FEE:
			*normals = greek_dialytika_and_oxia;
			return 1;
		case 0x1FEF:
			*normals = greek_varia;
			return 1;
		case 0x1FF2:
			*normals = greek_small_letter_omega_with_varia_and_ypogegrammeni;
			return 2;
		case 0x1FF3:
			*normals = greek_small_letter_omega_with_ypogegrammeni;
			return 2;
		case 0x1FF4:
			*normals = greek_small_letter_omega_with_oxia_and_ypogegrammeni;
			return 2;
		case 0x1FF6:
			*normals = greek_small_letter_omega_with_perispomeni;
			return 2;
		case 0x1FF7:
			*normals = greek_small_letter_omega_with_perispomeni_and_ypogegrammeni;
			return 2;
		case 0x1FF8:
			*normals = greek_capital_letter_omicron_with_varia;
			return 2;
		case 0x1FF9:
			*normals = greek_capital_letter_omicron_with_oxia;
			return 1;
		case 0x1FFA:
			*normals = greek_capital_letter_omega_with_varia;
			return 2;
		case 0x1FFB:
			*normals = greek_capital_letter_omega_with_oxia;
			return 1;
		case 0x1FFC:
			*normals = greek_capital_letter_omega_with_prosgegrammeni;
			return 2;
		case 0x1FFD:
			*normals = greek_oxia;
			return 1;
		case 0x1FFE:
			*normals = greek_dasia;
			return 2;
		case 0x2000:
			*normals = en_quad;
			return 1;
		case 0x2001:
			*normals = em_quad;
			return 1;
		case 0x2002:
			*normals = en_space;
			return 1;
		case 0x2003:
			*normals = em_space;
			return 1;
		case 0x2004:
			*normals = three_per_em_space;
			return 1;
		case 0x2005:
			*normals = four_per_em_space;
			return 1;
		case 0x2006:
			*normals = six_per_em_space;
			return 1;
		case 0x2007:
			*normals = figure_space;
			return 1;
		case 0x2008:
			*normals = punctuation_space;
			return 1;
		case 0x2009:
			*normals = thin_space;
			return 1;
		case 0x200A:
			*normals = hair_space;
			return 1;
		case 0x2011:
			*normals = non_breaking_hyphen;
			return 1;
		case 0x2017:
			*normals = double_low_line;
			return 2;
		case 0x2024:
			*normals = one_dot_leader;
			return 1;
		case 0x2025:
			*normals = two_dot_leader;
			return 2;
		case 0x2026:
			*normals = horizontal_ellipsis;
			return 3;
		case 0x202F:
			*normals = narrow_no_break_space;
			return 1;
		case 0x2033:
			*normals = double_prime;
			return 2;
		case 0x2034:
			*normals = triple_prime;
			return 3;
		case 0x2036:
			*normals = reversed_double_prime;
			return 2;
		case 0x2037:
			*normals = reversed_triple_prime;
			return 3;
		case 0x203C:
			*normals = double_exclamation_mark;
			return 2;
		case 0x203E:
			*normals = overline;
			return 2;
		case 0x2047:
			*normals = double_question_mark;
			return 2;
		case 0x2048:
			*normals = question_exclamation_mark;
			return 2;
		case 0x2049:
			*normals = exclamation_question_mark;
			return 2;
		case 0x2057:
			*normals = quadruple_prime;
			return 4;
		case 0x205F:
			*normals = medium_mathematical_space;
			return 1;
		case 0x2070:
			*normals = superscript_zero;
			return 1;
		case 0x2071:
			*normals = superscript_latin_small_letter_i;
			return 1;
		case 0x2074:
			*normals = superscript_four;
			return 1;
		case 0x2075:
			*normals = superscript_five;
			return 1;
		case 0x2076:
			*normals = superscript_six;
			return 1;
		case 0x2077:
			*normals = superscript_seven;
			return 1;
		case 0x2078:
			*normals = superscript_eight;
			return 1;
		case 0x2079:
			*normals = superscript_nine;
			return 1;
		case 0x207A:
			*normals = superscript_plus_sign;
			return 1;
		case 0x207B:
			*normals = superscript_minus;
			return 1;
		case 0x207C:
			*normals = superscript_equals_sign;
			return 1;
		case 0x207D:
			*normals = superscript_left_parenthesis;
			return 1;
		case 0x207E:
			*normals = superscript_right_parenthesis;
			return 1;
		case 0x207F:
			*normals = superscript_latin_small_letter_n;
			return 1;
		case 0x2080:
			*normals = subscript_zero;
			return 1;
		case 0x2081:
			*normals = subscript_one;
			return 1;
		case 0x2082:
			*normals = subscript_two;
			return 1;
		case 0x2083:
			*normals = subscript_three;
			return 1;
		case 0x2084:
			*normals = subscript_four;
			return 1;
		case 0x2085:
			*normals = subscript_five;
			return 1;
		case 0x2086:
			*normals = subscript_six;
			return 1;
		case 0x2087:
			*normals = subscript_seven;
			return 1;
		case 0x2088:
			*normals = subscript_eight;
			return 1;
		case 0x2089:
			*normals = subscript_nine;
			return 1;
		case 0x208A:
			*normals = subscript_plus_sign;
			return 1;
		case 0x208B:
			*normals = subscript_minus;
			return 1;
		case 0x208C:
			*normals = subscript_equals_sign;
			return 1;
		case 0x208D:
			*normals = subscript_left_parenthesis;
			return 1;
		case 0x208E:
			*normals = subscript_right_parenthesis;
			return 1;
		case 0x2090:
			*normals = latin_subscript_small_letter_a;
			return 1;
		case 0x2091:
			*normals = latin_subscript_small_letter_e;
			return 1;
		case 0x2092:
			*normals = latin_subscript_small_letter_o;
			return 1;
		case 0x2093:
			*normals = latin_subscript_small_letter_x;
			return 1;
		case 0x2094:
			*normals = latin_subscript_small_letter_schwa;
			return 1;
		case 0x2095:
			*normals = latin_subscript_small_letter_h;
			return 1;
		case 0x2096:
			*normals = latin_subscript_small_letter_k;
			return 1;
		case 0x2097:
			*normals = latin_subscript_small_letter_l;
			return 1;
		case 0x2098:
			*normals = latin_subscript_small_letter_m;
			return 1;
		case 0x2099:
			*normals = latin_subscript_small_letter_n;
			return 1;
		case 0x209A:
			*normals = latin_subscript_small_letter_p;
			return 1;
		case 0x209B:
			*normals = latin_subscript_small_letter_s;
			return 1;
		case 0x209C:
			*normals = latin_subscript_small_letter_t;
			return 1;
		case 0x20A8:
			*normals = rupee_sign;
			return 2;
		case 0x2100:
			*normals = account_of;
			return 3;
		case 0x2101:
			*normals = addressed_to_the_subject;
			return 3;
		case 0x2102:
			*normals = double_struck_capital_c;
			return 1;
		case 0x2103:
			*normals = degree_celsius;
			return 2;
		case 0x2105:
			*normals = care_of;
			return 3;
		case 0x2106:
			*normals = cada_una;
			return 3;
		case 0x2107:
			*normals = euler_constant;
			return 1;
		case 0x2109:
			*normals = degree_fahrenheit;
			return 2;
		case 0x210A:
			*normals = script_small_g;
			return 1;
		case 0x210B:
			*normals = script_capital_h;
			return 1;
		case 0x210C:
			*normals = black_letter_capital_h;
			return 1;
		case 0x210D:
			*normals = double_struck_capital_h;
			return 1;
		case 0x210E:
			*normals = planck_constant;
			return 1;
		case 0x210F:
			*normals = planck_constant_over_two_pi;
			return 1;
		case 0x2110:
			*normals = script_capital_i;
			return 1;
		case 0x2111:
			*normals = black_letter_capital_i;
			return 1;
		case 0x2112:
			*normals = script_capital_l;
			return 1;
		case 0x2113:
			*normals = script_small_l;
			return 1;
		case 0x2115:
			*normals = double_struck_capital_n;
			return 1;
		case 0x2116:
			*normals = numero_sign;
			return 2;
		case 0x2119:
			*normals = double_struck_capital_p;
			return 1;
		case 0x211A:
			*normals = double_struck_capital_q;
			return 1;
		case 0x211B:
			*normals = script_capital_r;
			return 1;
		case 0x211C:
			*normals = black_letter_capital_r;
			return 1;
		case 0x211D:
			*normals = double_struck_capital_r;
			return 1;
		case 0x2120:
			*normals = service_mark;
			return 2;
		case 0x2121:
			*normals = telephone_sign;
			return 3;
		case 0x2122:
			*normals = trade_mark_sign;
			return 2;
		case 0x2124:
			*normals = double_struck_capital_z;
			return 1;
		case 0x2126:
			*normals = ohm_sign;
			return 1;
		case 0x2128:
			*normals = black_letter_capital_z;
			return 1;
		case 0x212A:
			*normals = kelvin_sign;
			return 1;
		case 0x212B:
			*normals = angstrom_sign;
			return 1;
		case 0x212C:
			*normals = script_capital_b;
			return 1;
		case 0x212D:
			*normals = black_letter_capital_c;
			return 1;
		case 0x212F:
			*normals = script_small_e;
			return 1;
		case 0x2130:
			*normals = script_capital_e;
			return 1;
		case 0x2131:
			*normals = script_capital_f;
			return 1;
		case 0x2133:
			*normals = script_capital_m;
			return 1;
		case 0x2134:
			*normals = script_small_o;
			return 1;
		case 0x2135:
			*normals = alef_symbol;
			return 1;
		case 0x2136:
			*normals = bet_symbol;
			return 1;
		case 0x2137:
			*normals = gimel_symbol;
			return 1;
		case 0x2138:
			*normals = dalet_symbol;
			return 1;
		case 0x2139:
			*normals = information_source;
			return 1;
		case 0x213B:
			*normals = facsimile_sign;
			return 3;
		case 0x213C:
			*normals = double_struck_small_pi;
			return 1;
		case 0x213D:
			*normals = double_struck_small_gamma;
			return 1;
		case 0x213E:
			*normals = double_struck_capital_gamma;
			return 1;
		case 0x213F:
			*normals = double_struck_capital_pi;
			return 1;
		case 0x2140:
			*normals = double_struck_n_ary_summation;
			return 1;
		case 0x2145:
			*normals = double_struck_italic_capital_d;
			return 1;
		case 0x2146:
			*normals = double_struck_italic_small_d;
			return 1;
		case 0x2147:
			*normals = double_struck_italic_small_e;
			return 1;
		case 0x2148:
			*normals = double_struck_italic_small_i;
			return 1;
		case 0x2149:
			*normals = double_struck_italic_small_j;
			return 1;
		case 0x2150:
			*normals = vulgar_fraction_one_seventh;
			return 3;
		case 0x2151:
			*normals = vulgar_fraction_one_ninth;
			return 3;
		case 0x2152:
			*normals = vulgar_fraction_one_tenth;
			return 4;
		case 0x2153:
			*normals = vulgar_fraction_one_third;
			return 3;
		case 0x2154:
			*normals = vulgar_fraction_two_thirds;
			return 3;
		case 0x2155:
			*normals = vulgar_fraction_one_fifth;
			return 3;
		case 0x2156:
			*normals = vulgar_fraction_two_fifths;
			return 3;
		case 0x2157:
			*normals = vulgar_fraction_three_fifths;
			return 3;
		case 0x2158:
			*normals = vulgar_fraction_four_fifths;
			return 3;
		case 0x2159:
			*normals = vulgar_fraction_one_sixth;
			return 3;
		case 0x215A:
			*normals = vulgar_fraction_five_sixths;
			return 3;
		case 0x215B:
			*normals = vulgar_fraction_one_eighth;
			return 3;
		case 0x215C:
			*normals = vulgar_fraction_three_eighths;
			return 3;
		case 0x215D:
			*normals = vulgar_fraction_five_eighths;
			return 3;
		case 0x215E:
			*normals = vulgar_fraction_seven_eighths;
			return 3;
		case 0x215F:
			*normals = fraction_numerator_one;
			return 2;
		case 0x2160:
			*normals = roman_numeral_one;
			return 1;
		case 0x2161:
			*normals = roman_numeral_two;
			return 2;
		case 0x2162:
			*normals = roman_numeral_three;
			return 3;
		case 0x2163:
			*normals = roman_numeral_four;
			return 2;
		case 0x2164:
			*normals = roman_numeral_five;
			return 1;
		case 0x2165:
			*normals = roman_numeral_six;
			return 2;
		case 0x2166:
			*normals = roman_numeral_seven;
			return 3;
		case 0x2167:
			*normals = roman_numeral_eight;
			return 4;
		case 0x2168:
			*normals = roman_numeral_nine;
			return 2;
		case 0x2169:
			*normals = roman_numeral_ten;
			return 1;
		case 0x216A:
			*normals = roman_numeral_eleven;
			return 2;
		case 0x216B:
			*normals = roman_numeral_twelve;
			return 3;
		case 0x216C:
			*normals = roman_numeral_fifty;
			return 1;
		case 0x216D:
			*normals = roman_numeral_one_hundred;
			return 1;
		case 0x216E:
			*normals = roman_numeral_five_hundred;
			return 1;
		case 0x216F:
			*normals = roman_numeral_one_thousand;
			return 1;
		case 0x2170:
			*normals = small_roman_numeral_one;
			return 1;
		case 0x2171:
			*normals = small_roman_numeral_two;
			return 2;
		case 0x2172:
			*normals = small_roman_numeral_three;
			return 3;
		case 0x2173:
			*normals = small_roman_numeral_four;
			return 2;
		case 0x2174:
			*normals = small_roman_numeral_five;
			return 1;
		case 0x2175:
			*normals = small_roman_numeral_six;
			return 2;
		case 0x2176:
			*normals = small_roman_numeral_seven;
			return 3;
		case 0x2177:
			*normals = small_roman_numeral_eight;
			return 4;
		case 0x2178:
			*normals = small_roman_numeral_nine;
			return 2;
		case 0x2179:
			*normals = small_roman_numeral_ten;
			return 1;
		case 0x217A:
			*normals = small_roman_numeral_eleven;
			return 2;
		case 0x217B:
			*normals = small_roman_numeral_twelve;
			return 3;
		case 0x217C:
			*normals = small_roman_numeral_fifty;
			return 1;
		case 0x217D:
			*normals = small_roman_numeral_one_hundred;
			return 1;
		case 0x217E:
			*normals = small_roman_numeral_five_hundred;
			return 1;
		case 0x217F:
			*normals = small_roman_numeral_one_thousand;
			return 1;
		case 0x2189:
			*normals = vulgar_fraction_zero_thirds;
			return 3;
		case 0x219A:
			*normals = leftwards_arrow_with_stroke;
			return 2;
		case 0x219B:
			*normals = rightwards_arrow_with_stroke;
			return 2;
		case 0x21AE:
			*normals = left_right_arrow_with_stroke;
			return 2;
		case 0x21CD:
			*normals = leftwards_double_arrow_with_stroke;
			return 2;
		case 0x21CE:
			*normals = left_right_double_arrow_with_stroke;
			return 2;
		case 0x21CF:
			*normals = rightwards_double_arrow_with_stroke;
			return 2;
		case 0x2204:
			*normals = there_does_not_exist;
			return 2;
		case 0x2209:
			*normals = not_an_element_of;
			return 2;
		case 0x220C:
			*normals = does_not_contain_as_member;
			return 2;
		case 0x2224:
			*normals = does_not_divide;
			return 2;
		case 0x2226:
			*normals = not_parallel_to;
			return 2;
		case 0x222C:
			*normals = double_integral;
			return 2;
		case 0x222D:
			*normals = triple_integral;
			return 3;
		case 0x222F:
			*normals = surface_integral;
			return 2;
		case 0x2230:
			*normals = volume_integral;
			return 3;
		case 0x2241:
			*normals = not_tilde;
			return 2;
		case 0x2244:
			*normals = not_asymptotically_equal_to;
			return 2;
		case 0x2247:
			*normals = neither_approximately_nor_actually_equal_to;
			return 2;
		case 0x2249:
			*normals = not_almost_equal_to;
			return 2;
		case 0x2260:
			*normals = not_equal_to;
			return 2;
		case 0x2262:
			*normals = not_identical_to;
			return 2;
		case 0x226D:
			*normals = not_equivalent_to;
			return 2;
		case 0x226E:
			*normals = not_less_than;
			return 2;
		case 0x226F:
			*normals = not_greater_than;
			return 2;
		case 0x2270:
			*normals = neither_less_than_nor_equal_to;
			return 2;
		case 0x2271:
			*normals = neither_greater_than_nor_equal_to;
			return 2;
		case 0x2274:
			*normals = neither_less_than_nor_equivalent_to;
			return 2;
		case 0x2275:
			*normals = neither_greater_than_nor_equivalent_to;
			return 2;
		case 0x2278:
			*normals = neither_less_than_nor_greater_than;
			return 2;
		case 0x2279:
			*normals = neither_greater_than_nor_less_than;
			return 2;
		case 0x2280:
			*normals = does_not_precede;
			return 2;
		case 0x2281:
			*normals = does_not_succeed;
			return 2;
		case 0x2284:
			*normals = not_a_subset_of;
			return 2;
		case 0x2285:
			*normals = not_a_superset_of;
			return 2;
		case 0x2288:
			*normals = neither_a_subset_of_nor_equal_to;
			return 2;
		case 0x2289:
			*normals = neither_a_superset_of_nor_equal_to;
			return 2;
		case 0x22AC:
			*normals = does_not_prove;
			return 2;
		case 0x22AD:
			*normals = not_true;
			return 2;
		case 0x22AE:
			*normals = does_not_force;
			return 2;
		case 0x22AF:
			*normals = negated_double_vertical_bar_double_right_turnstile;
			return 2;
		case 0x22E0:
			*normals = does_not_precede_or_equal;
			return 2;
		case 0x22E1:
			*normals = does_not_succeed_or_equal;
			return 2;
		case 0x22E2:
			*normals = not_square_image_of_or_equal_to;
			return 2;
		case 0x22E3:
			*normals = not_square_original_of_or_equal_to;
			return 2;
		case 0x22EA:
			*normals = not_normal_subgroup_of;
			return 2;
		case 0x22EB:
			*normals = does_not_contain_as_normal_subgroup;
			return 2;
		case 0x22EC:
			*normals = not_normal_subgroup_of_or_equal_to;
			return 2;
		case 0x22ED:
			*normals = does_not_contain_as_normal_subgroup_or_equal;
			return 2;
		case 0x2329:
			*normals = left_pointing_angle_bracket;
			return 1;
		case 0x232A:
			*normals = right_pointing_angle_bracket;
			return 1;
		case 0x2460:
			*normals = circled_digit_one;
			return 1;
		case 0x2461:
			*normals = circled_digit_two;
			return 1;
		case 0x2462:
			*normals = circled_digit_three;
			return 1;
		case 0x2463:
			*normals = circled_digit_four;
			return 1;
		case 0x2464:
			*normals = circled_digit_five;
			return 1;
		case 0x2465:
			*normals = circled_digit_six;
			return 1;
		case 0x2466:
			*normals = circled_digit_seven;
			return 1;
		case 0x2467:
			*normals = circled_digit_eight;
			return 1;
		case 0x2468:
			*normals = circled_digit_nine;
			return 1;
		case 0x2469:
			*normals = circled_number_ten;
			return 2;
		case 0x246A:
			*normals = circled_number_eleven;
			return 2;
		case 0x246B:
			*normals = circled_number_twelve;
			return 2;
		case 0x246C:
			*normals = circled_number_thirteen;
			return 2;
		case 0x246D:
			*normals = circled_number_fourteen;
			return 2;
		case 0x246E:
			*normals = circled_number_fifteen;
			return 2;
		case 0x246F:
			*normals = circled_number_sixteen;
			return 2;
		case 0x2470:
			*normals = circled_number_seventeen;
			return 2;
		case 0x2471:
			*normals = circled_number_eighteen;
			return 2;
		case 0x2472:
			*normals = circled_number_nineteen;
			return 2;
		case 0x2473:
			*normals = circled_number_twenty;
			return 2;
		case 0x2474:
			*normals = parenthesized_digit_one;
			return 3;
		case 0x2475:
			*normals = parenthesized_digit_two;
			return 3;
		case 0x2476:
			*normals = parenthesized_digit_three;
			return 3;
		case 0x2477:
			*normals = parenthesized_digit_four;
			return 3;
		case 0x2478:
			*normals = parenthesized_digit_five;
			return 3;
		case 0x2479:
			*normals = parenthesized_digit_six;
			return 3;
		case 0x247A:
			*normals = parenthesized_digit_seven;
			return 3;
		case 0x247B:
			*normals = parenthesized_digit_eight;
			return 3;
		case 0x247C:
			*normals = parenthesized_digit_nine;
			return 3;
		case 0x247D:
			*normals = parenthesized_number_ten;
			return 4;
		case 0x247E:
			*normals = parenthesized_number_eleven;
			return 4;
		case 0x247F:
			*normals = parenthesized_number_twelve;
			return 4;
		case 0x2480:
			*normals = parenthesized_number_thirteen;
			return 4;
		case 0x2481:
			*normals = parenthesized_number_fourteen;
			return 4;
		case 0x2482:
			*normals = parenthesized_number_fifteen;
			return 4;
		case 0x2483:
			*normals = parenthesized_number_sixteen;
			return 4;
		case 0x2484:
			*normals = parenthesized_number_seventeen;
			return 4;
		case 0x2485:
			*normals = parenthesized_number_eighteen;
			return 4;
		case 0x2486:
			*normals = parenthesized_number_nineteen;
			return 4;
		case 0x2487:
			*normals = parenthesized_number_twenty;
			return 4;
		case 0x2488:
			*normals = digit_one_full_stop;
			return 2;
		case 0x2489:
			*normals = digit_two_full_stop;
			return 2;
		case 0x248A:
			*normals = digit_three_full_stop;
			return 2;
		case 0x248B:
			*normals = digit_four_full_stop;
			return 2;
		case 0x248C:
			*normals = digit_five_full_stop;
			return 2;
		case 0x248D:
			*normals = digit_six_full_stop;
			return 2;
		case 0x248E:
			*normals = digit_seven_full_stop;
			return 2;
		case 0x248F:
			*normals = digit_eight_full_stop;
			return 2;
		case 0x2490:
			*normals = digit_nine_full_stop;
			return 2;
		case 0x2491:
			*normals = number_ten_full_stop;
			return 3;
		case 0x2492:
			*normals = number_eleven_full_stop;
			return 3;
		case 0x2493:
			*normals = number_twelve_full_stop;
			return 3;
		case 0x2494:
			*normals = number_thirteen_full_stop;
			return 3;
		case 0x2495:
			*normals = number_fourteen_full_stop;
			return 3;
		case 0x2496:
			*normals = number_fifteen_full_stop;
			return 3;
		case 0x2497:
			*normals = number_sixteen_full_stop;
			return 3;
		case 0x2498:
			*normals = number_seventeen_full_stop;
			return 3;
		case 0x2499:
			*normals = number_eighteen_full_stop;
			return 3;
		case 0x249A:
			*normals = number_nineteen_full_stop;
			return 3;
		case 0x249B:
			*normals = number_twenty_full_stop;
			return 3;
		case 0x249C:
			*normals = parenthesized_latin_small_letter_a;
			return 3;
		case 0x249D:
			*normals = parenthesized_latin_small_letter_b;
			return 3;
		case 0x249E:
			*normals = parenthesized_latin_small_letter_c;
			return 3;
		case 0x249F:
			*normals = parenthesized_latin_small_letter_d;
			return 3;
		case 0x24A0:
			*normals = parenthesized_latin_small_letter_e;
			return 3;
		case 0x24A1:
			*normals = parenthesized_latin_small_letter_f;
			return 3;
		case 0x24A2:
			*normals = parenthesized_latin_small_letter_g;
			return 3;
		case 0x24A3:
			*normals = parenthesized_latin_small_letter_h;
			return 3;
		case 0x24A4:
			*normals = parenthesized_latin_small_letter_i;
			return 3;
		case 0x24A5:
			*normals = parenthesized_latin_small_letter_j;
			return 3;
		case 0x24A6:
			*normals = parenthesized_latin_small_letter_k;
			return 3;
		case 0x24A7:
			*normals = parenthesized_latin_small_letter_l;
			return 3;
		case 0x24A8:
			*normals = parenthesized_latin_small_letter_m;
			return 3;
		case 0x24A9:
			*normals = parenthesized_latin_small_letter_n;
			return 3;
		case 0x24AA:
			*normals = parenthesized_latin_small_letter_o;
			return 3;
		case 0x24AB:
			*normals = parenthesized_latin_small_letter_p;
			return 3;
		case 0x24AC:
			*normals = parenthesized_latin_small_letter_q;
			return 3;
		case 0x24AD:
			*normals = parenthesized_latin_small_letter_r;
			return 3;
		case 0x24AE:
			*normals = parenthesized_latin_small_letter_s;
			return 3;
		case 0x24AF:
			*normals = parenthesized_latin_small_letter_t;
			return 3;
		case 0x24B0:
			*normals = parenthesized_latin_small_letter_u;
			return 3;
		case 0x24B1:
			*normals = parenthesized_latin_small_letter_v;
			return 3;
		case 0x24B2:
			*normals = parenthesized_latin_small_letter_w;
			return 3;
		case 0x24B3:
			*normals = parenthesized_latin_small_letter_x;
			return 3;
		case 0x24B4:
			*normals = parenthesized_latin_small_letter_y;
			return 3;
		case 0x24B5:
			*normals = parenthesized_latin_small_letter_z;
			return 3;
		case 0x24B6:
			*normals = circled_latin_capital_letter_a;
			return 1;
		case 0x24B7:
			*normals = circled_latin_capital_letter_b;
			return 1;
		case 0x24B8:
			*normals = circled_latin_capital_letter_c;
			return 1;
		case 0x24B9:
			*normals = circled_latin_capital_letter_d;
			return 1;
		case 0x24BA:
			*normals = circled_latin_capital_letter_e;
			return 1;
		case 0x24BB:
			*normals = circled_latin_capital_letter_f;
			return 1;
		case 0x24BC:
			*normals = circled_latin_capital_letter_g;
			return 1;
		case 0x24BD:
			*normals = circled_latin_capital_letter_h;
			return 1;
		case 0x24BE:
			*normals = circled_latin_capital_letter_i;
			return 1;
		case 0x24BF:
			*normals = circled_latin_capital_letter_j;
			return 1;
		case 0x24C0:
			*normals = circled_latin_capital_letter_k;
			return 1;
		case 0x24C1:
			*normals = circled_latin_capital_letter_l;
			return 1;
		case 0x24C2:
			*normals = circled_latin_capital_letter_m;
			return 1;
		case 0x24C3:
			*normals = circled_latin_capital_letter_n;
			return 1;
		case 0x24C4:
			*normals = circled_latin_capital_letter_o;
			return 1;
		case 0x24C5:
			*normals = circled_latin_capital_letter_p;
			return 1;
		case 0x24C6:
			*normals = circled_latin_capital_letter_q;
			return 1;
		case 0x24C7:
			*normals = circled_latin_capital_letter_r;
			return 1;
		case 0x24C8:
			*normals = circled_latin_capital_letter_s;
			return 1;
		case 0x24C9:
			*normals = circled_latin_capital_letter_t;
			return 1;
		case 0x24CA:
			*normals = circled_latin_capital_letter_u;
			return 1;
		case 0x24CB:
			*normals = circled_latin_capital_letter_v;
			return 1;
		case 0x24CC:
			*normals = circled_latin_capital_letter_w;
			return 1;
		case 0x24CD:
			*normals = circled_latin_capital_letter_x;
			return 1;
		case 0x24CE:
			*normals = circled_latin_capital_letter_y;
			return 1;
		case 0x24CF:
			*normals = circled_latin_capital_letter_z;
			return 1;
		case 0x24D0:
			*normals = circled_latin_small_letter_a;
			return 1;
		case 0x24D1:
			*normals = circled_latin_small_letter_b;
			return 1;
		case 0x24D2:
			*normals = circled_latin_small_letter_c;
			return 1;
		case 0x24D3:
			*normals = circled_latin_small_letter_d;
			return 1;
		case 0x24D4:
			*normals = circled_latin_small_letter_e;
			return 1;
		case 0x24D5:
			*normals = circled_latin_small_letter_f;
			return 1;
		case 0x24D6:
			*normals = circled_latin_small_letter_g;
			return 1;
		case 0x24D7:
			*normals = circled_latin_small_letter_h;
			return 1;
		case 0x24D8:
			*normals = circled_latin_small_letter_i;
			return 1;
		case 0x24D9:
			*normals = circled_latin_small_letter_j;
			return 1;
		case 0x24DA:
			*normals = circled_latin_small_letter_k;
			return 1;
		case 0x24DB:
			*normals = circled_latin_small_letter_l;
			return 1;
		case 0x24DC:
			*normals = circled_latin_small_letter_m;
			return 1;
		case 0x24DD:
			*normals = circled_latin_small_letter_n;
			return 1;
		case 0x24DE:
			*normals = circled_latin_small_letter_o;
			return 1;
		case 0x24DF:
			*normals = circled_latin_small_letter_p;
			return 1;
		case 0x24E0:
			*normals = circled_latin_small_letter_q;
			return 1;
		case 0x24E1:
			*normals = circled_latin_small_letter_r;
			return 1;
		case 0x24E2:
			*normals = circled_latin_small_letter_s;
			return 1;
		case 0x24E3:
			*normals = circled_latin_small_letter_t;
			return 1;
		case 0x24E4:
			*normals = circled_latin_small_letter_u;
			return 1;
		case 0x24E5:
			*normals = circled_latin_small_letter_v;
			return 1;
		case 0x24E6:
			*normals = circled_latin_small_letter_w;
			return 1;
		case 0x24E7:
			*normals = circled_latin_small_letter_x;
			return 1;
		case 0x24E8:
			*normals = circled_latin_small_letter_y;
			return 1;
		case 0x24E9:
			*normals = circled_latin_small_letter_z;
			return 1;
		case 0x24EA:
			*normals = circled_digit_zero;
			return 1;
		case 0x2A0C:
			*normals = quadruple_integral_operator;
			return 4;
		case 0x2A74:
			*normals = double_colon_equal;
			return 3;
		case 0x2A75:
			*normals = two_consecutive_equals_signs;
			return 2;
		case 0x2A76:
			*normals = three_consecutive_equals_signs;
			return 3;
		case 0x2ADC:
			*normals = forking;
			return 2;
		case 0x2C7C:
			*normals = latin_subscript_small_letter_j;
			return 1;
		case 0x2C7D:
			*normals = modifier_letter_capital_v;
			return 1;
		case 0x2D6F:
			*normals = tifinagh_modifier_letter_labialization_mark;
			return 1;
		case 0x2E9F:
			*normals = cjk_radical_mother;
			return 1;
		case 0x2EF3:
			*normals = cjk_radical_c_simplified_turtle;
			return 1;
		case 0x2F00:
			*normals = kangxi_radical_one;
			return 1;
		case 0x2F01:
			*normals = kangxi_radical_line;
			return 1;
		case 0x2F02:
			*normals = kangxi_radical_dot;
			return 1;
		case 0x2F03:
			*normals = kangxi_radical_slash;
			return 1;
		case 0x2F04:
			*normals = kangxi_radical_second;
			return 1;
		case 0x2F05:
			*normals = kangxi_radical_hook;
			return 1;
		case 0x2F06:
			*normals = kangxi_radical_two;
			return 1;
		case 0x2F07:
			*normals = kangxi_radical_lid;
			return 1;
		case 0x2F08:
			*normals = kangxi_radical_man;
			return 1;
		case 0x2F09:
			*normals = kangxi_radical_legs;
			return 1;
		case 0x2F0A:
			*normals = kangxi_radical_enter;
			return 1;
		case 0x2F0B:
			*normals = kangxi_radical_eight;
			return 1;
		case 0x2F0C:
			*normals = kangxi_radical_down_box;
			return 1;
		case 0x2F0D:
			*normals = kangxi_radical_cover;
			return 1;
		case 0x2F0E:
			*normals = kangxi_radical_ice;
			return 1;
		case 0x2F0F:
			*normals = kangxi_radical_table;
			return 1;
		case 0x2F10:
			*normals = kangxi_radical_open_box;
			return 1;
		case 0x2F11:
			*normals = kangxi_radical_knife;
			return 1;
		case 0x2F12:
			*normals = kangxi_radical_power;
			return 1;
		case 0x2F13:
			*normals = kangxi_radical_wrap;
			return 1;
		case 0x2F14:
			*normals = kangxi_radical_spoon;
			return 1;
		case 0x2F15:
			*normals = kangxi_radical_right_open_box;
			return 1;
		case 0x2F16:
			*normals = kangxi_radical_hiding_enclosure;
			return 1;
		case 0x2F17:
			*normals = kangxi_radical_ten;
			return 1;
		case 0x2F18:
			*normals = kangxi_radical_divination;
			return 1;
		case 0x2F19:
			*normals = kangxi_radical_seal;
			return 1;
		case 0x2F1A:
			*normals = kangxi_radical_cliff;
			return 1;
		case 0x2F1B:
			*normals = kangxi_radical_private;
			return 1;
		case 0x2F1C:
			*normals = kangxi_radical_again;
			return 1;
		case 0x2F1D:
			*normals = kangxi_radical_mouth;
			return 1;
		case 0x2F1E:
			*normals = kangxi_radical_enclosure;
			return 1;
		case 0x2F1F:
			*normals = kangxi_radical_earth;
			return 1;
		case 0x2F20:
			*normals = kangxi_radical_scholar;
			return 1;
		case 0x2F21:
			*normals = kangxi_radical_go;
			return 1;
		case 0x2F22:
			*normals = kangxi_radical_go_slowly;
			return 1;
		case 0x2F23:
			*normals = kangxi_radical_evening;
			return 1;
		case 0x2F24:
			*normals = kangxi_radical_big;
			return 1;
		case 0x2F25:
			*normals = kangxi_radical_woman;
			return 1;
		case 0x2F26:
			*normals = kangxi_radical_child;
			return 1;
		case 0x2F27:
			*normals = kangxi_radical_roof;
			return 1;
		case 0x2F28:
			*normals = kangxi_radical_inch;
			return 1;
		case 0x2F29:
			*normals = kangxi_radical_small;
			return 1;
		case 0x2F2A:
			*normals = kangxi_radical_lame;
			return 1;
		case 0x2F2B:
			*normals = kangxi_radical_corpse;
			return 1;
		case 0x2F2C:
			*normals = kangxi_radical_sprout;
			return 1;
		case 0x2F2D:
			*normals = kangxi_radical_mountain;
			return 1;
		case 0x2F2E:
			*normals = kangxi_radical_river;
			return 1;
		case 0x2F2F:
			*normals = kangxi_radical_work;
			return 1;
		case 0x2F30:
			*normals = kangxi_radical_oneself;
			return 1;
		case 0x2F31:
			*normals = kangxi_radical_turban;
			return 1;
		case 0x2F32:
			*normals = kangxi_radical_dry;
			return 1;
		case 0x2F33:
			*normals = kangxi_radical_short_thread;
			return 1;
		case 0x2F34:
			*normals = kangxi_radical_dotted_cliff;
			return 1;
		case 0x2F35:
			*normals = kangxi_radical_long_stride;
			return 1;
		case 0x2F36:
			*normals = kangxi_radical_two_hands;
			return 1;
		case 0x2F37:
			*normals = kangxi_radical_shoot;
			return 1;
		case 0x2F38:
			*normals = kangxi_radical_bow;
			return 1;
		case 0x2F39:
			*normals = kangxi_radical_snout;
			return 1;
		case 0x2F3A:
			*normals = kangxi_radical_bristle;
			return 1;
		case 0x2F3B:
			*normals = kangxi_radical_step;
			return 1;
		case 0x2F3C:
			*normals = kangxi_radical_heart;
			return 1;
		case 0x2F3D:
			*normals = kangxi_radical_halberd;
			return 1;
		case 0x2F3E:
			*normals = kangxi_radical_door;
			return 1;
		case 0x2F3F:
			*normals = kangxi_radical_hand;
			return 1;
		case 0x2F40:
			*normals = kangxi_radical_branch;
			return 1;
		case 0x2F41:
			*normals = kangxi_radical_rap;
			return 1;
		case 0x2F42:
			*normals = kangxi_radical_script;
			return 1;
		case 0x2F43:
			*normals = kangxi_radical_dipper;
			return 1;
		case 0x2F44:
			*normals = kangxi_radical_axe;
			return 1;
		case 0x2F45:
			*normals = kangxi_radical_square;
			return 1;
		case 0x2F46:
			*normals = kangxi_radical_not;
			return 1;
		case 0x2F47:
			*normals = kangxi_radical_sun;
			return 1;
		case 0x2F48:
			*normals = kangxi_radical_say;
			return 1;
		case 0x2F49:
			*normals = kangxi_radical_moon;
			return 1;
		case 0x2F4A:
			*normals = kangxi_radical_tree;
			return 1;
		case 0x2F4B:
			*normals = kangxi_radical_lack;
			return 1;
		case 0x2F4C:
			*normals = kangxi_radical_stop;
			return 1;
		case 0x2F4D:
			*normals = kangxi_radical_death;
			return 1;
		case 0x2F4E:
			*normals = kangxi_radical_weapon;
			return 1;
		case 0x2F4F:
			*normals = kangxi_radical_do_not;
			return 1;
		case 0x2F50:
			*normals = kangxi_radical_compare;
			return 1;
		case 0x2F51:
			*normals = kangxi_radical_fur;
			return 1;
		case 0x2F52:
			*normals = kangxi_radical_clan;
			return 1;
		case 0x2F53:
			*normals = kangxi_radical_steam;
			return 1;
		case 0x2F54:
			*normals = kangxi_radical_water;
			return 1;
		case 0x2F55:
			*normals = kangxi_radical_fire;
			return 1;
		case 0x2F56:
			*normals = kangxi_radical_claw;
			return 1;
		case 0x2F57:
			*normals = kangxi_radical_father;
			return 1;
		case 0x2F58:
			*normals = kangxi_radical_double_x;
			return 1;
		case 0x2F59:
			*normals = kangxi_radical_half_tree_trunk;
			return 1;
		case 0x2F5A:
			*normals = kangxi_radical_slice;
			return 1;
		case 0x2F5B:
			*normals = kangxi_radical_fang;
			return 1;
		case 0x2F5C:
			*normals = kangxi_radical_cow;
			return 1;
		case 0x2F5D:
			*normals = kangxi_radical_dog;
			return 1;
		case 0x2F5E:
			*normals = kangxi_radical_profound;
			return 1;
		case 0x2F5F:
			*normals = kangxi_radical_jade;
			return 1;
		case 0x2F60:
			*normals = kangxi_radical_melon;
			return 1;
		case 0x2F61:
			*normals = kangxi_radical_tile;
			return 1;
		case 0x2F62:
			*normals = kangxi_radical_sweet;
			return 1;
		case 0x2F63:
			*normals = kangxi_radical_life;
			return 1;
		case 0x2F64:
			*normals = kangxi_radical_use;
			return 1;
		case 0x2F65:
			*normals = kangxi_radical_field;
			return 1;
		case 0x2F66:
			*normals = kangxi_radical_bolt_of_cloth;
			return 1;
		case 0x2F67:
			*normals = kangxi_radical_sickness;
			return 1;
		case 0x2F68:
			*normals = kangxi_radical_dotted_tent;
			return 1;
		case 0x2F69:
			*normals = kangxi_radical_white;
			return 1;
		case 0x2F6A:
			*normals = kangxi_radical_skin;
			return 1;
		case 0x2F6B:
			*normals = kangxi_radical_dish;
			return 1;
		case 0x2F6C:
			*normals = kangxi_radical_eye;
			return 1;
		case 0x2F6D:
			*normals = kangxi_radical_spear;
			return 1;
		case 0x2F6E:
			*normals = kangxi_radical_arrow;
			return 1;
		case 0x2F6F:
			*normals = kangxi_radical_stone;
			return 1;
		case 0x2F70:
			*normals = kangxi_radical_spirit;
			return 1;
		case 0x2F71:
			*normals = kangxi_radical_track;
			return 1;
		case 0x2F72:
			*normals = kangxi_radical_grain;
			return 1;
		case 0x2F73:
			*normals = kangxi_radical_cave;
			return 1;
		case 0x2F74:
			*normals = kangxi_radical_stand;
			return 1;
		case 0x2F75:
			*normals = kangxi_radical_bamboo;
			return 1;
		case 0x2F76:
			*normals = kangxi_radical_rice;
			return 1;
		case 0x2F77:
			*normals = kangxi_radical_silk;
			return 1;
		case 0x2F78:
			*normals = kangxi_radical_jar;
			return 1;
		case 0x2F79:
			*normals = kangxi_radical_net;
			return 1;
		case 0x2F7A:
			*normals = kangxi_radical_sheep;
			return 1;
		case 0x2F7B:
			*normals = kangxi_radical_feather;
			return 1;
		case 0x2F7C:
			*normals = kangxi_radical_old;
			return 1;
		case 0x2F7D:
			*normals = kangxi_radical_and;
			return 1;
		case 0x2F7E:
			*normals = kangxi_radical_plow;
			return 1;
		case 0x2F7F:
			*normals = kangxi_radical_ear;
			return 1;
		case 0x2F80:
			*normals = kangxi_radical_brush;
			return 1;
		case 0x2F81:
			*normals = kangxi_radical_meat;
			return 1;
		case 0x2F82:
			*normals = kangxi_radical_minister;
			return 1;
		case 0x2F83:
			*normals = kangxi_radical_self;
			return 1;
		case 0x2F84:
			*normals = kangxi_radical_arrive;
			return 1;
		case 0x2F85:
			*normals = kangxi_radical_mortar;
			return 1;
		case 0x2F86:
			*normals = kangxi_radical_tongue;
			return 1;
		case 0x2F87:
			*normals = kangxi_radical_oppose;
			return 1;
		case 0x2F88:
			*normals = kangxi_radical_boat;
			return 1;
		case 0x2F89:
			*normals = kangxi_radical_stopping;
			return 1;
		case 0x2F8A:
			*normals = kangxi_radical_color;
			return 1;
		case 0x2F8B:
			*normals = kangxi_radical_grass;
			return 1;
		case 0x2F8C:
			*normals = kangxi_radical_tiger;
			return 1;
		case 0x2F8D:
			*normals = kangxi_radical_insect;
			return 1;
		case 0x2F8E:
			*normals = kangxi_radical_blood;
			return 1;
		case 0x2F8F:
			*normals = kangxi_radical_walk_enclosure;
			return 1;
		case 0x2F90:
			*normals = kangxi_radical_clothes;
			return 1;
		case 0x2F91:
			*normals = kangxi_radical_west;
			return 1;
		case 0x2F92:
			*normals = kangxi_radical_see;
			return 1;
		case 0x2F93:
			*normals = kangxi_radical_horn;
			return 1;
		case 0x2F94:
			*normals = kangxi_radical_speech;
			return 1;
		case 0x2F95:
			*normals = kangxi_radical_valley;
			return 1;
		case 0x2F96:
			*normals = kangxi_radical_bean;
			return 1;
		case 0x2F97:
			*normals = kangxi_radical_pig;
			return 1;
		case 0x2F98:
			*normals = kangxi_radical_badger;
			return 1;
		case 0x2F99:
			*normals = kangxi_radical_shell;
			return 1;
		case 0x2F9A:
			*normals = kangxi_radical_red;
			return 1;
		case 0x2F9B:
			*normals = kangxi_radical_run;
			return 1;
		case 0x2F9C:
			*normals = kangxi_radical_foot;
			return 1;
		case 0x2F9D:
			*normals = kangxi_radical_body;
			return 1;
		case 0x2F9E:
			*normals = kangxi_radical_cart;
			return 1;
		case 0x2F9F:
			*normals = kangxi_radical_bitter;
			return 1;
		case 0x2FA0:
			*normals = kangxi_radical_morning;
			return 1;
		case 0x2FA1:
			*normals = kangxi_radical_walk;
			return 1;
		case 0x2FA2:
			*normals = kangxi_radical_city;
			return 1;
		case 0x2FA3:
			*normals = kangxi_radical_wine;
			return 1;
		case 0x2FA4:
			*normals = kangxi_radical_distinguish;
			return 1;
		case 0x2FA5:
			*normals = kangxi_radical_village;
			return 1;
		case 0x2FA6:
			*normals = kangxi_radical_gold;
			return 1;
		case 0x2FA7:
			*normals = kangxi_radical_long;
			return 1;
		case 0x2FA8:
			*normals = kangxi_radical_gate;
			return 1;
		case 0x2FA9:
			*normals = kangxi_radical_mound;
			return 1;
		case 0x2FAA:
			*normals = kangxi_radical_slave;
			return 1;
		case 0x2FAB:
			*normals = kangxi_radical_short_tailed_bird;
			return 1;
		case 0x2FAC:
			*normals = kangxi_radical_rain;
			return 1;
		case 0x2FAD:
			*normals = kangxi_radical_blue;
			return 1;
		case 0x2FAE:
			*normals = kangxi_radical_wrong;
			return 1;
		case 0x2FAF:
			*normals = kangxi_radical_face;
			return 1;
		case 0x2FB0:
			*normals = kangxi_radical_leather;
			return 1;
		case 0x2FB1:
			*normals = kangxi_radical_tanned_leather;
			return 1;
		case 0x2FB2:
			*normals = kangxi_radical_leek;
			return 1;
		case 0x2FB3:
			*normals = kangxi_radical_sound;
			return 1;
		case 0x2FB4:
			*normals = kangxi_radical_leaf;
			return 1;
		case 0x2FB5:
			*normals = kangxi_radical_wind;
			return 1;
		case 0x2FB6:
			*normals = kangxi_radical_fly;
			return 1;
		case 0x2FB7:
			*normals = kangxi_radical_eat;
			return 1;
		case 0x2FB8:
			*normals = kangxi_radical_head;
			return 1;
		case 0x2FB9:
			*normals = kangxi_radical_fragrant;
			return 1;
		case 0x2FBA:
			*normals = kangxi_radical_horse;
			return 1;
		case 0x2FBB:
			*normals = kangxi_radical_bone;
			return 1;
		case 0x2FBC:
			*normals = kangxi_radical_tall;
			return 1;
		case 0x2FBD:
			*normals = kangxi_radical_hair;
			return 1;
		case 0x2FBE:
			*normals = kangxi_radical_fight;
			return 1;
		case 0x2FBF:
			*normals = kangxi_radical_sacrificial_wine;
			return 1;
		case 0x2FC0:
			*normals = kangxi_radical_cauldron;
			return 1;
		case 0x2FC1:
			*normals = kangxi_radical_ghost;
			return 1;
		case 0x2FC2:
			*normals = kangxi_radical_fish;
			return 1;
		case 0x2FC3:
			*normals = kangxi_radical_bird;
			return 1;
		case 0x2FC4:
			*normals = kangxi_radical_salt;
			return 1;
		case 0x2FC5:
			*normals = kangxi_radical_deer;
			return 1;
		case 0x2FC6:
			*normals = kangxi_radical_wheat;
			return 1;
		case 0x2FC7:
			*normals = kangxi_radical_hemp;
			return 1;
		case 0x2FC8:
			*normals = kangxi_radical_yellow;
			return 1;
		case 0x2FC9:
			*normals = kangxi_radical_millet;
			return 1;
		case 0x2FCA:
			*normals = kangxi_radical_black;
			return 1;
		case 0x2FCB:
			*normals = kangxi_radical_embroidery;
			return 1;
		case 0x2FCC:
			*normals = kangxi_radical_frog;
			return 1;
		case 0x2FCD:
			*normals = kangxi_radical_tripod;
			return 1;
		case 0x2FCE:
			*normals = kangxi_radical_drum;
			return 1;
		case 0x2FCF:
			*normals = kangxi_radical_rat;
			return 1;
		case 0x2FD0:
			*normals = kangxi_radical_nose;
			return 1;
		case 0x2FD1:
			*normals = kangxi_radical_even;
			return 1;
		case 0x2FD2:
			*normals = kangxi_radical_tooth;
			return 1;
		case 0x2FD3:
			*normals = kangxi_radical_dragon;
			return 1;
		case 0x2FD4:
			*normals = kangxi_radical_turtle;
			return 1;
		case 0x2FD5:
			*normals = kangxi_radical_flute;
			return 1;
		case 0x3000:
			*normals = ideographic_space;
			return 1;
		case 0x3036:
			*normals = circled_postal_mark;
			return 1;
		case 0x3038:
			*normals = hangzhou_numeral_ten;
			return 1;
		case 0x3039:
			*normals = hangzhou_numeral_twenty;
			return 1;
		case 0x303A:
			*normals = hangzhou_numeral_thirty;
			return 1;
		case 0x304C:
			*normals = hiragana_letter_ga;
			return 2;
		case 0x304E:
			*normals = hiragana_letter_gi;
			return 2;
		case 0x3050:
			*normals = hiragana_letter_gu;
			return 2;
		case 0x3052:
			*normals = hiragana_letter_ge;
			return 2;
		case 0x3054:
			*normals = hiragana_letter_go;
			return 2;
		case 0x3056:
			*normals = hiragana_letter_za;
			return 2;
		case 0x3058:
			*normals = hiragana_letter_zi;
			return 2;
		case 0x305A:
			*normals = hiragana_letter_zu;
			return 2;
		case 0x305C:
			*normals = hiragana_letter_ze;
			return 2;
		case 0x305E:
			*normals = hiragana_letter_zo;
			return 2;
		case 0x3060:
			*normals = hiragana_letter_da;
			return 2;
		case 0x3062:
			*normals = hiragana_letter_di;
			return 2;
		case 0x3065:
			*normals = hiragana_letter_du;
			return 2;
		case 0x3067:
			*normals = hiragana_letter_de;
			return 2;
		case 0x3069:
			*normals = hiragana_letter_do;
			return 2;
		case 0x3070:
			*normals = hiragana_letter_ba;
			return 2;
		case 0x3071:
			*normals = hiragana_letter_pa;
			return 2;
		case 0x3073:
			*normals = hiragana_letter_bi;
			return 2;
		case 0x3074:
			*normals = hiragana_letter_pi;
			return 2;
		case 0x3076:
			*normals = hiragana_letter_bu;
			return 2;
		case 0x3077:
			*normals = hiragana_letter_pu;
			return 2;
		case 0x3079:
			*normals = hiragana_letter_be;
			return 2;
		case 0x307A:
			*normals = hiragana_letter_pe;
			return 2;
		case 0x307C:
			*normals = hiragana_letter_bo;
			return 2;
		case 0x307D:
			*normals = hiragana_letter_po;
			return 2;
		case 0x3094:
			*normals = hiragana_letter_vu;
			return 2;
		case 0x309B:
			*normals = katakana_hiragana_voiced_sound_mark;
			return 2;
		case 0x309C:
			*normals = katakana_hiragana_semi_voiced_sound_mark;
			return 2;
		case 0x309E:
			*normals = hiragana_voiced_iteration_mark;
			return 2;
		case 0x309F:
			*normals = hiragana_digraph_yori;
			return 2;
		case 0x30AC:
			*normals = katakana_letter_ga;
			return 2;
		case 0x30AE:
			*normals = katakana_letter_gi;
			return 2;
		case 0x30B0:
			*normals = katakana_letter_gu;
			return 2;
		case 0x30B2:
			*normals = katakana_letter_ge;
			return 2;
		case 0x30B4:
			*normals = katakana_letter_go;
			return 2;
		case 0x30B6:
			*normals = katakana_letter_za;
			return 2;
		case 0x30B8:
			*normals = katakana_letter_zi;
			return 2;
		case 0x30BA:
			*normals = katakana_letter_zu;
			return 2;
		case 0x30BC:
			*normals = katakana_letter_ze;
			return 2;
		case 0x30BE:
			*normals = katakana_letter_zo;
			return 2;
		case 0x30C0:
			*normals = katakana_letter_da;
			return 2;
		case 0x30C2:
			*normals = katakana_letter_di;
			return 2;
		case 0x30C5:
			*normals = katakana_letter_du;
			return 2;
		case 0x30C7:
			*normals = katakana_letter_de;
			return 2;
		case 0x30C9:
			*normals = katakana_letter_do;
			return 2;
		case 0x30D0:
			*normals = katakana_letter_ba;
			return 2;
		case 0x30D1:
			*normals = katakana_letter_pa;
			return 2;
		case 0x30D3:
			*normals = katakana_letter_bi;
			return 2;
		case 0x30D4:
			*normals = katakana_letter_pi;
			return 2;
		case 0x30D6:
			*normals = katakana_letter_bu;
			return 2;
		case 0x30D7:
			*normals = katakana_letter_pu;
			return 2;
		case 0x30D9:
			*normals = katakana_letter_be;
			return 2;
		case 0x30DA:
			*normals = katakana_letter_pe;
			return 2;
		case 0x30DC:
			*normals = katakana_letter_bo;
			return 2;
		case 0x30DD:
			*normals = katakana_letter_po;
			return 2;
		case 0x30F4:
			*normals = katakana_letter_vu;
			return 2;
		case 0x30F7:
			*normals = katakana_letter_va;
			return 2;
		case 0x30F8:
			*normals = katakana_letter_vi;
			return 2;
		case 0x30F9:
			*normals = katakana_letter_ve;
			return 2;
		case 0x30FA:
			*normals = katakana_letter_vo;
			return 2;
		case 0x30FE:
			*normals = katakana_voiced_iteration_mark;
			return 2;
		case 0x30FF:
			*normals = katakana_digraph_koto;
			return 2;
		case 0x3131:
			*normals = hangul_letter_kiyeok;
			return 1;
		case 0x3132:
			*normals = hangul_letter_ssangkiyeok;
			return 1;
		case 0x3133:
			*normals = hangul_letter_kiyeok_sios;
			return 1;
		case 0x3134:
			*normals = hangul_letter_nieun;
			return 1;
		case 0x3135:
			*normals = hangul_letter_nieun_cieuc;
			return 1;
		case 0x3136:
			*normals = hangul_letter_nieun_hieuh;
			return 1;
		case 0x3137:
			*normals = hangul_letter_tikeut;
			return 1;
		case 0x3138:
			*normals = hangul_letter_ssangtikeut;
			return 1;
		case 0x3139:
			*normals = hangul_letter_rieul;
			return 1;
		case 0x313A:
			*normals = hangul_letter_rieul_kiyeok;
			return 1;
		case 0x313B:
			*normals = hangul_letter_rieul_mieum;
			return 1;
		case 0x313C:
			*normals = hangul_letter_rieul_pieup;
			return 1;
		case 0x313D:
			*normals = hangul_letter_rieul_sios;
			return 1;
		case 0x313E:
			*normals = hangul_letter_rieul_thieuth;
			return 1;
		case 0x313F:
			*normals = hangul_letter_rieul_phieuph;
			return 1;
		case 0x3140:
			*normals = hangul_letter_rieul_hieuh;
			return 1;
		case 0x3141:
			*normals = hangul_letter_mieum;
			return 1;
		case 0x3142:
			*normals = hangul_letter_pieup;
			return 1;
		case 0x3143:
			*normals = hangul_letter_ssangpieup;
			return 1;
		case 0x3144:
			*normals = hangul_letter_pieup_sios;
			return 1;
		case 0x3145:
			*normals = hangul_letter_sios;
			return 1;
		case 0x3146:
			*normals = hangul_letter_ssangsios;
			return 1;
		case 0x3147:
			*normals = hangul_letter_ieung;
			return 1;
		case 0x3148:
			*normals = hangul_letter_cieuc;
			return 1;
		case 0x3149:
			*normals = hangul_letter_ssangcieuc;
			return 1;
		case 0x314A:
			*normals = hangul_letter_chieuch;
			return 1;
		case 0x314B:
			*normals = hangul_letter_khieukh;
			return 1;
		case 0x314C:
			*normals = hangul_letter_thieuth;
			return 1;
		case 0x314D:
			*normals = hangul_letter_phieuph;
			return 1;
		case 0x314E:
			*normals = hangul_letter_hieuh;
			return 1;
		case 0x314F:
			*normals = hangul_letter_a;
			return 1;
		case 0x3150:
			*normals = hangul_letter_ae;
			return 1;
		case 0x3151:
			*normals = hangul_letter_ya;
			return 1;
		case 0x3152:
			*normals = hangul_letter_yae;
			return 1;
		case 0x3153:
			*normals = hangul_letter_eo;
			return 1;
		case 0x3154:
			*normals = hangul_letter_e;
			return 1;
		case 0x3155:
			*normals = hangul_letter_yeo;
			return 1;
		case 0x3156:
			*normals = hangul_letter_ye;
			return 1;
		case 0x3157:
			*normals = hangul_letter_o;
			return 1;
		case 0x3158:
			*normals = hangul_letter_wa;
			return 1;
		case 0x3159:
			*normals = hangul_letter_wae;
			return 1;
		case 0x315A:
			*normals = hangul_letter_oe;
			return 1;
		case 0x315B:
			*normals = hangul_letter_yo;
			return 1;
		case 0x315C:
			*normals = hangul_letter_u;
			return 1;
		case 0x315D:
			*normals = hangul_letter_weo;
			return 1;
		case 0x315E:
			*normals = hangul_letter_we;
			return 1;
		case 0x315F:
			*normals = hangul_letter_wi;
			return 1;
		case 0x3160:
			*normals = hangul_letter_yu;
			return 1;
		case 0x3161:
			*normals = hangul_letter_eu;
			return 1;
		case 0x3162:
			*normals = hangul_letter_yi;
			return 1;
		case 0x3163:
			*normals = hangul_letter_i;
			return 1;
		case 0x3164:
			*normals = hangul_filler;
			return 1;
		case 0x3165:
			*normals = hangul_letter_ssangnieun;
			return 1;
		case 0x3166:
			*normals = hangul_letter_nieun_tikeut;
			return 1;
		case 0x3167:
			*normals = hangul_letter_nieun_sios;
			return 1;
		case 0x3168:
			*normals = hangul_letter_nieun_pansios;
			return 1;
		case 0x3169:
			*normals = hangul_letter_rieul_kiyeok_sios;
			return 1;
		case 0x316A:
			*normals = hangul_letter_rieul_tikeut;
			return 1;
		case 0x316B:
			*normals = hangul_letter_rieul_pieup_sios;
			return 1;
		case 0x316C:
			*normals = hangul_letter_rieul_pansios;
			return 1;
		case 0x316D:
			*normals = hangul_letter_rieul_yeorinhieuh;
			return 1;
		case 0x316E:
			*normals = hangul_letter_mieum_pieup;
			return 1;
		case 0x316F:
			*normals = hangul_letter_mieum_sios;
			return 1;
		case 0x3170:
			*normals = hangul_letter_mieum_pansios;
			return 1;
		case 0x3171:
			*normals = hangul_letter_kapyeounmieum;
			return 1;
		case 0x3172:
			*normals = hangul_letter_pieup_kiyeok;
			return 1;
		case 0x3173:
			*normals = hangul_letter_pieup_tikeut;
			return 1;
		case 0x3174:
			*normals = hangul_letter_pieup_sios_kiyeok;
			return 1;
		case 0x3175:
			*normals = hangul_letter_pieup_sios_tikeut;
			return 1;
		case 0x3176:
			*normals = hangul_letter_pieup_cieuc;
			return 1;
		case 0x3177:
			*normals = hangul_letter_pieup_thieuth;
			return 1;
		case 0x3178:
			*normals = hangul_letter_kapyeounpieup;
			return 1;
		case 0x3179:
			*normals = hangul_letter_kapyeounssangpieup;
			return 1;
		case 0x317A:
			*normals = hangul_letter_sios_kiyeok;
			return 1;
		case 0x317B:
			*normals = hangul_letter_sios_nieun;
			return 1;
		case 0x317C:
			*normals = hangul_letter_sios_tikeut;
			return 1;
		case 0x317D:
			*normals = hangul_letter_sios_pieup;
			return 1;
		case 0x317E:
			*normals = hangul_letter_sios_cieuc;
			return 1;
		case 0x317F:
			*normals = hangul_letter_pansios;
			return 1;
		case 0x3180:
			*normals = hangul_letter_ssangieung;
			return 1;
		case 0x3181:
			*normals = hangul_letter_yesieung;
			return 1;
		case 0x3182:
			*normals = hangul_letter_yesieung_sios;
			return 1;
		case 0x3183:
			*normals = hangul_letter_yesieung_pansios;
			return 1;
		case 0x3184:
			*normals = hangul_letter_kapyeounphieuph;
			return 1;
		case 0x3185:
			*normals = hangul_letter_ssanghieuh;
			return 1;
		case 0x3186:
			*normals = hangul_letter_yeorinhieuh;
			return 1;
		case 0x3187:
			*normals = hangul_letter_yo_ya;
			return 1;
		case 0x3188:
			*normals = hangul_letter_yo_yae;
			return 1;
		case 0x3189:
			*normals = hangul_letter_yo_i;
			return 1;
		case 0x318A:
			*normals = hangul_letter_yu_yeo;
			return 1;
		case 0x318B:
			*normals = hangul_letter_yu_ye;
			return 1;
		case 0x318C:
			*normals = hangul_letter_yu_i;
			return 1;
		case 0x318D:
			*normals = hangul_letter_araea;
			return 1;
		case 0x318E:
			*normals = hangul_letter_araeae;
			return 1;
		case 0x3192:
			*normals = ideographic_annotation_one_mark;
			return 1;
		case 0x3193:
			*normals = ideographic_annotation_two_mark;
			return 1;
		case 0x3194:
			*normals = ideographic_annotation_three_mark;
			return 1;
		case 0x3195:
			*normals = ideographic_annotation_four_mark;
			return 1;
		case 0x3196:
			*normals = ideographic_annotation_top_mark;
			return 1;
		case 0x3197:
			*normals = ideographic_annotation_middle_mark;
			return 1;
		case 0x3198:
			*normals = ideographic_annotation_bottom_mark;
			return 1;
		case 0x3199:
			*normals = ideographic_annotation_first_mark;
			return 1;
		case 0x319A:
			*normals = ideographic_annotation_second_mark;
			return 1;
		case 0x319B:
			*normals = ideographic_annotation_third_mark;
			return 1;
		case 0x319C:
			*normals = ideographic_annotation_fourth_mark;
			return 1;
		case 0x319D:
			*normals = ideographic_annotation_heaven_mark;
			return 1;
		case 0x319E:
			*normals = ideographic_annotation_earth_mark;
			return 1;
		case 0x319F:
			*normals = ideographic_annotation_man_mark;
			return 1;
		case 0x3200:
			*normals = parenthesized_hangul_kiyeok;
			return 3;
		case 0x3201:
			*normals = parenthesized_hangul_nieun;
			return 3;
		case 0x3202:
			*normals = parenthesized_hangul_tikeut;
			return 3;
		case 0x3203:
			*normals = parenthesized_hangul_rieul;
			return 3;
		case 0x3204:
			*normals = parenthesized_hangul_mieum;
			return 3;
		case 0x3205:
			*normals = parenthesized_hangul_pieup;
			return 3;
		case 0x3206:
			*normals = parenthesized_hangul_sios;
			return 3;
		case 0x3207:
			*normals = parenthesized_hangul_ieung;
			return 3;
		case 0x3208:
			*normals = parenthesized_hangul_cieuc;
			return 3;
		case 0x3209:
			*normals = parenthesized_hangul_chieuch;
			return 3;
		case 0x320A:
			*normals = parenthesized_hangul_khieukh;
			return 3;
		case 0x320B:
			*normals = parenthesized_hangul_thieuth;
			return 3;
		case 0x320C:
			*normals = parenthesized_hangul_phieuph;
			return 3;
		case 0x320D:
			*normals = parenthesized_hangul_hieuh;
			return 3;
		case 0x320E:
			*normals = parenthesized_hangul_kiyeok_a;
			return 4;
		case 0x320F:
			*normals = parenthesized_hangul_nieun_a;
			return 4;
		case 0x3210:
			*normals = parenthesized_hangul_tikeut_a;
			return 4;
		case 0x3211:
			*normals = parenthesized_hangul_rieul_a;
			return 4;
		case 0x3212:
			*normals = parenthesized_hangul_mieum_a;
			return 4;
		case 0x3213:
			*normals = parenthesized_hangul_pieup_a;
			return 4;
		case 0x3214:
			*normals = parenthesized_hangul_sios_a;
			return 4;
		case 0x3215:
			*normals = parenthesized_hangul_ieung_a;
			return 4;
		case 0x3216:
			*normals = parenthesized_hangul_cieuc_a;
			return 4;
		case 0x3217:
			*normals = parenthesized_hangul_chieuch_a;
			return 4;
		case 0x3218:
			*normals = parenthesized_hangul_khieukh_a;
			return 4;
		case 0x3219:
			*normals = parenthesized_hangul_thieuth_a;
			return 4;
		case 0x321A:
			*normals = parenthesized_hangul_phieuph_a;
			return 4;
		case 0x321B:
			*normals = parenthesized_hangul_hieuh_a;
			return 4;
		case 0x321C:
			*normals = parenthesized_hangul_cieuc_u;
			return 4;
		case 0x321D:
			*normals = parenthesized_korean_character_ojeon;
			return 7;
		case 0x321E:
			*normals = parenthesized_korean_character_o_hu;
			return 6;
		case 0x3220:
			*normals = parenthesized_ideograph_one;
			return 3;
		case 0x3221:
			*normals = parenthesized_ideograph_two;
			return 3;
		case 0x3222:
			*normals = parenthesized_ideograph_three;
			return 3;
		case 0x3223:
			*normals = parenthesized_ideograph_four;
			return 3;
		case 0x3224:
			*normals = parenthesized_ideograph_five;
			return 3;
		case 0x3225:
			*normals = parenthesized_ideograph_six;
			return 3;
		case 0x3226:
			*normals = parenthesized_ideograph_seven;
			return 3;
		case 0x3227:
			*normals = parenthesized_ideograph_eight;
			return 3;
		case 0x3228:
			*normals = parenthesized_ideograph_nine;
			return 3;
		case 0x3229:
			*normals = parenthesized_ideograph_ten;
			return 3;
		case 0x322A:
			*normals = parenthesized_ideograph_moon;
			return 3;
		case 0x322B:
			*normals = parenthesized_ideograph_fire;
			return 3;
		case 0x322C:
			*normals = parenthesized_ideograph_water;
			return 3;
		case 0x322D:
			*normals = parenthesized_ideograph_wood;
			return 3;
		case 0x322E:
			*normals = parenthesized_ideograph_metal;
			return 3;
		case 0x322F:
			*normals = parenthesized_ideograph_earth;
			return 3;
		case 0x3230:
			*normals = parenthesized_ideograph_sun;
			return 3;
		case 0x3231:
			*normals = parenthesized_ideograph_stock;
			return 3;
		case 0x3232:
			*normals = parenthesized_ideograph_have;
			return 3;
		case 0x3233:
			*normals = parenthesized_ideograph_society;
			return 3;
		case 0x3234:
			*normals = parenthesized_ideograph_name;
			return 3;
		case 0x3235:
			*normals = parenthesized_ideograph_special;
			return 3;
		case 0x3236:
			*normals = parenthesized_ideograph_financial;
			return 3;
		case 0x3237:
			*normals = parenthesized_ideograph_congratulation;
			return 3;
		case 0x3238:
			*normals = parenthesized_ideograph_labor;
			return 3;
		case 0x3239:
			*normals = parenthesized_ideograph_represent;
			return 3;
		case 0x323A:
			*normals = parenthesized_ideograph_call;
			return 3;
		case 0x323B:
			*normals = parenthesized_ideograph_study;
			return 3;
		case 0x323C:
			*normals = parenthesized_ideograph_supervise;
			return 3;
		case 0x323D:
			*normals = parenthesized_ideograph_enterprise;
			return 3;
		case 0x323E:
			*normals = parenthesized_ideograph_resource;
			return 3;
		case 0x323F:
			*normals = parenthesized_ideograph_alliance;
			return 3;
		case 0x3240:
			*normals = parenthesized_ideograph_festival;
			return 3;
		case 0x3241:
			*normals = parenthesized_ideograph_rest;
			return 3;
		case 0x3242:
			*normals = parenthesized_ideograph_self;
			return 3;
		case 0x3243:
			*normals = parenthesized_ideograph_reach;
			return 3;
		case 0x3244:
			*normals = circled_ideograph_question;
			return 1;
		case 0x3245:
			*normals = circled_ideograph_kindergarten;
			return 1;
		case 0x3246:
			*normals = circled_ideograph_school;
			return 1;
		case 0x3247:
			*normals = circled_ideograph_koto;
			return 1;
		case 0x3250:
			*normals = partnership_sign;
			return 3;
		case 0x3251:
			*normals = circled_number_twenty_one;
			return 2;
		case 0x3252:
			*normals = circled_number_twenty_two;
			return 2;
		case 0x3253:
			*normals = circled_number_twenty_three;
			return 2;
		case 0x3254:
			*normals = circled_number_twenty_four;
			return 2;
		case 0x3255:
			*normals = circled_number_twenty_five;
			return 2;
		case 0x3256:
			*normals = circled_number_twenty_six;
			return 2;
		case 0x3257:
			*normals = circled_number_twenty_seven;
			return 2;
		case 0x3258:
			*normals = circled_number_twenty_eight;
			return 2;
		case 0x3259:
			*normals = circled_number_twenty_nine;
			return 2;
		case 0x325A:
			*normals = circled_number_thirty;
			return 2;
		case 0x325B:
			*normals = circled_number_thirty_one;
			return 2;
		case 0x325C:
			*normals = circled_number_thirty_two;
			return 2;
		case 0x325D:
			*normals = circled_number_thirty_three;
			return 2;
		case 0x325E:
			*normals = circled_number_thirty_four;
			return 2;
		case 0x325F:
			*normals = circled_number_thirty_five;
			return 2;
		case 0x3260:
			*normals = circled_hangul_kiyeok;
			return 1;
		case 0x3261:
			*normals = circled_hangul_nieun;
			return 1;
		case 0x3262:
			*normals = circled_hangul_tikeut;
			return 1;
		case 0x3263:
			*normals = circled_hangul_rieul;
			return 1;
		case 0x3264:
			*normals = circled_hangul_mieum;
			return 1;
		case 0x3265:
			*normals = circled_hangul_pieup;
			return 1;
		case 0x3266:
			*normals = circled_hangul_sios;
			return 1;
		case 0x3267:
			*normals = circled_hangul_ieung;
			return 1;
		case 0x3268:
			*normals = circled_hangul_cieuc;
			return 1;
		case 0x3269:
			*normals = circled_hangul_chieuch;
			return 1;
		case 0x326A:
			*normals = circled_hangul_khieukh;
			return 1;
		case 0x326B:
			*normals = circled_hangul_thieuth;
			return 1;
		case 0x326C:
			*normals = circled_hangul_phieuph;
			return 1;
		case 0x326D:
			*normals = circled_hangul_hieuh;
			return 1;
		case 0x326E:
			*normals = circled_hangul_kiyeok_a;
			return 2;
		case 0x326F:
			*normals = circled_hangul_nieun_a;
			return 2;
		case 0x3270:
			*normals = circled_hangul_tikeut_a;
			return 2;
		case 0x3271:
			*normals = circled_hangul_rieul_a;
			return 2;
		case 0x3272:
			*normals = circled_hangul_mieum_a;
			return 2;
		case 0x3273:
			*normals = circled_hangul_pieup_a;
			return 2;
		case 0x3274:
			*normals = circled_hangul_sios_a;
			return 2;
		case 0x3275:
			*normals = circled_hangul_ieung_a;
			return 2;
		case 0x3276:
			*normals = circled_hangul_cieuc_a;
			return 2;
		case 0x3277:
			*normals = circled_hangul_chieuch_a;
			return 2;
		case 0x3278:
			*normals = circled_hangul_khieukh_a;
			return 2;
		case 0x3279:
			*normals = circled_hangul_thieuth_a;
			return 2;
		case 0x327A:
			*normals = circled_hangul_phieuph_a;
			return 2;
		case 0x327B:
			*normals = circled_hangul_hieuh_a;
			return 2;
		case 0x327C:
			*normals = circled_korean_character_chamko;
			return 5;
		case 0x327D:
			*normals = circled_korean_character_jueui;
			return 4;
		case 0x327E:
			*normals = circled_hangul_ieung_u;
			return 2;
		case 0x3280:
			*normals = circled_ideograph_one;
			return 1;
		case 0x3281:
			*normals = circled_ideograph_two;
			return 1;
		case 0x3282:
			*normals = circled_ideograph_three;
			return 1;
		case 0x3283:
			*normals = circled_ideograph_four;
			return 1;
		case 0x3284:
			*normals = circled_ideograph_five;
			return 1;
		case 0x3285:
			*normals = circled_ideograph_six;
			return 1;
		case 0x3286:
			*normals = circled_ideograph_seven;
			return 1;
		case 0x3287:
			*normals = circled_ideograph_eight;
			return 1;
		case 0x3288:
			*normals = circled_ideograph_nine;
			return 1;
		case 0x3289:
			*normals = circled_ideograph_ten;
			return 1;
		case 0x328A:
			*normals = circled_ideograph_moon;
			return 1;
		case 0x328B:
			*normals = circled_ideograph_fire;
			return 1;
		case 0x328C:
			*normals = circled_ideograph_water;
			return 1;
		case 0x328D:
			*normals = circled_ideograph_wood;
			return 1;
		case 0x328E:
			*normals = circled_ideograph_metal;
			return 1;
		case 0x328F:
			*normals = circled_ideograph_earth;
			return 1;
		case 0x3290:
			*normals = circled_ideograph_sun;
			return 1;
		case 0x3291:
			*normals = circled_ideograph_stock;
			return 1;
		case 0x3292:
			*normals = circled_ideograph_have;
			return 1;
		case 0x3293:
			*normals = circled_ideograph_society;
			return 1;
		case 0x3294:
			*normals = circled_ideograph_name;
			return 1;
		case 0x3295:
			*normals = circled_ideograph_special;
			return 1;
		case 0x3296:
			*normals = circled_ideograph_financial;
			return 1;
		case 0x3297:
			*normals = circled_ideograph_congratulation;
			return 1;
		case 0x3298:
			*normals = circled_ideograph_labor;
			return 1;
		case 0x3299:
			*normals = circled_ideograph_secret;
			return 1;
		case 0x329A:
			*normals = circled_ideograph_male;
			return 1;
		case 0x329B:
			*normals = circled_ideograph_female;
			return 1;
		case 0x329C:
			*normals = circled_ideograph_suitable;
			return 1;
		case 0x329D:
			*normals = circled_ideograph_excellent;
			return 1;
		case 0x329E:
			*normals = circled_ideograph_print;
			return 1;
		case 0x329F:
			*normals = circled_ideograph_attention;
			return 1;
		case 0x32A0:
			*normals = circled_ideograph_item;
			return 1;
		case 0x32A1:
			*normals = circled_ideograph_rest;
			return 1;
		case 0x32A2:
			*normals = circled_ideograph_copy;
			return 1;
		case 0x32A3:
			*normals = circled_ideograph_correct;
			return 1;
		case 0x32A4:
			*normals = circled_ideograph_high;
			return 1;
		case 0x32A5:
			*normals = circled_ideograph_centre;
			return 1;
		case 0x32A6:
			*normals = circled_ideograph_low;
			return 1;
		case 0x32A7:
			*normals = circled_ideograph_left;
			return 1;
		case 0x32A8:
			*normals = circled_ideograph_right;
			return 1;
		case 0x32A9:
			*normals = circled_ideograph_medicine;
			return 1;
		case 0x32AA:
			*normals = circled_ideograph_religion;
			return 1;
		case 0x32AB:
			*normals = circled_ideograph_study;
			return 1;
		case 0x32AC:
			*normals = circled_ideograph_supervise;
			return 1;
		case 0x32AD:
			*normals = circled_ideograph_enterprise;
			return 1;
		case 0x32AE:
			*normals = circled_ideograph_resource;
			return 1;
		case 0x32AF:
			*normals = circled_ideograph_alliance;
			return 1;
		case 0x32B0:
			*normals = circled_ideograph_night;
			return 1;
		case 0x32B1:
			*normals = circled_number_thirty_six;
			return 2;
		case 0x32B2:
			*normals = circled_number_thirty_seven;
			return 2;
		case 0x32B3:
			*normals = circled_number_thirty_eight;
			return 2;
		case 0x32B4:
			*normals = circled_number_thirty_nine;
			return 2;
		case 0x32B5:
			*normals = circled_number_forty;
			return 2;
		case 0x32B6:
			*normals = circled_number_forty_one;
			return 2;
		case 0x32B7:
			*normals = circled_number_forty_two;
			return 2;
		case 0x32B8:
			*normals = circled_number_forty_three;
			return 2;
		case 0x32B9:
			*normals = circled_number_forty_four;
			return 2;
		case 0x32BA:
			*normals = circled_number_forty_five;
			return 2;
		case 0x32BB:
			*normals = circled_number_forty_six;
			return 2;
		case 0x32BC:
			*normals = circled_number_forty_seven;
			return 2;
		case 0x32BD:
			*normals = circled_number_forty_eight;
			return 2;
		case 0x32BE:
			*normals = circled_number_forty_nine;
			return 2;
		case 0x32BF:
			*normals = circled_number_fifty;
			return 2;
		case 0x32C0:
			*normals = ideographic_telegraph_symbol_for_january;
			return 2;
		case 0x32C1:
			*normals = ideographic_telegraph_symbol_for_february;
			return 2;
		case 0x32C2:
			*normals = ideographic_telegraph_symbol_for_march;
			return 2;
		case 0x32C3:
			*normals = ideographic_telegraph_symbol_for_april;
			return 2;
		case 0x32C4:
			*normals = ideographic_telegraph_symbol_for_may;
			return 2;
		case 0x32C5:
			*normals = ideographic_telegraph_symbol_for_june;
			return 2;
		case 0x32C6:
			*normals = ideographic_telegraph_symbol_for_july;
			return 2;
		case 0x32C7:
			*normals = ideographic_telegraph_symbol_for_august;
			return 2;
		case 0x32C8:
			*normals = ideographic_telegraph_symbol_for_september;
			return 2;
		case 0x32C9:
			*normals = ideographic_telegraph_symbol_for_october;
			return 3;
		case 0x32CA:
			*normals = ideographic_telegraph_symbol_for_november;
			return 3;
		case 0x32CB:
			*normals = ideographic_telegraph_symbol_for_december;
			return 3;
		case 0x32CC:
			*normals = square_hg;
			return 2;
		case 0x32CD:
			*normals = square_erg;
			return 3;
		case 0x32CE:
			*normals = square_ev;
			return 2;
		case 0x32CF:
			*normals = limited_liability_sign;
			return 3;
		case 0x32D0:
			*normals = circled_katakana_a;
			return 1;
		case 0x32D1:
			*normals = circled_katakana_i;
			return 1;
		case 0x32D2:
			*normals = circled_katakana_u;
			return 1;
		case 0x32D3:
			*normals = circled_katakana_e;
			return 1;
		case 0x32D4:
			*normals = circled_katakana_o;
			return 1;
		case 0x32D5:
			*normals = circled_katakana_ka;
			return 1;
		case 0x32D6:
			*normals = circled_katakana_ki;
			return 1;
		case 0x32D7:
			*normals = circled_katakana_ku;
			return 1;
		case 0x32D8:
			*normals = circled_katakana_ke;
			return 1;
		case 0x32D9:
			*normals = circled_katakana_ko;
			return 1;
		case 0x32DA:
			*normals = circled_katakana_sa;
			return 1;
		case 0x32DB:
			*normals = circled_katakana_si;
			return 1;
		case 0x32DC:
			*normals = circled_katakana_su;
			return 1;
		case 0x32DD:
			*normals = circled_katakana_se;
			return 1;
		case 0x32DE:
			*normals = circled_katakana_so;
			return 1;
		case 0x32DF:
			*normals = circled_katakana_ta;
			return 1;
		case 0x32E0:
			*normals = circled_katakana_ti;
			return 1;
		case 0x32E1:
			*normals = circled_katakana_tu;
			return 1;
		case 0x32E2:
			*normals = circled_katakana_te;
			return 1;
		case 0x32E3:
			*normals = circled_katakana_to;
			return 1;
		case 0x32E4:
			*normals = circled_katakana_na;
			return 1;
		case 0x32E5:
			*normals = circled_katakana_ni;
			return 1;
		case 0x32E6:
			*normals = circled_katakana_nu;
			return 1;
		case 0x32E7:
			*normals = circled_katakana_ne;
			return 1;
		case 0x32E8:
			*normals = circled_katakana_no;
			return 1;
		case 0x32E9:
			*normals = circled_katakana_ha;
			return 1;
		case 0x32EA:
			*normals = circled_katakana_hi;
			return 1;
		case 0x32EB:
			*normals = circled_katakana_hu;
			return 1;
		case 0x32EC:
			*normals = circled_katakana_he;
			return 1;
		case 0x32ED:
			*normals = circled_katakana_ho;
			return 1;
		case 0x32EE:
			*normals = circled_katakana_ma;
			return 1;
		case 0x32EF:
			*normals = circled_katakana_mi;
			return 1;
		case 0x32F0:
			*normals = circled_katakana_mu;
			return 1;
		case 0x32F1:
			*normals = circled_katakana_me;
			return 1;
		case 0x32F2:
			*normals = circled_katakana_mo;
			return 1;
		case 0x32F3:
			*normals = circled_katakana_ya;
			return 1;
		case 0x32F4:
			*normals = circled_katakana_yu;
			return 1;
		case 0x32F5:
			*normals = circled_katakana_yo;
			return 1;
		case 0x32F6:
			*normals = circled_katakana_ra;
			return 1;
		case 0x32F7:
			*normals = circled_katakana_ri;
			return 1;
		case 0x32F8:
			*normals = circled_katakana_ru;
			return 1;
		case 0x32F9:
			*normals = circled_katakana_re;
			return 1;
		case 0x32FA:
			*normals = circled_katakana_ro;
			return 1;
		case 0x32FB:
			*normals = circled_katakana_wa;
			return 1;
		case 0x32FC:
			*normals = circled_katakana_wi;
			return 1;
		case 0x32FD:
			*normals = circled_katakana_we;
			return 1;
		case 0x32FE:
			*normals = circled_katakana_wo;
			return 1;
		case 0x32FF:
			*normals = square_era_name_reiwa;
			return 2;
		case 0x3300:
			*normals = square_apaato;
			return 4;
		case 0x3301:
			*normals = square_aruhua;
			return 4;
		case 0x3302:
			*normals = square_anpea;
			return 4;
		case 0x3303:
			*normals = square_aaru;
			return 3;
		case 0x3304:
			*normals = square_iningu;
			return 4;
		case 0x3305:
			*normals = square_inti;
			return 3;
		case 0x3306:
			*normals = square_uon;
			return 3;
		case 0x3307:
			*normals = square_esukuudo;
			return 5;
		case 0x3308:
			*normals = square_eekaa;
			return 4;
		case 0x3309:
			*normals = square_onsu;
			return 3;
		case 0x330A:
			*normals = square_oomu;
			return 3;
		case 0x330B:
			*normals = square_kairi;
			return 3;
		case 0x330C:
			*normals = square_karatto;
			return 4;
		case 0x330D:
			*normals = square_karorii;
			return 4;
		case 0x330E:
			*normals = square_garon;
			return 3;
		case 0x330F:
			*normals = square_ganma;
			return 3;
		case 0x3310:
			*normals = square_giga;
			return 2;
		case 0x3311:
			*normals = square_ginii;
			return 3;
		case 0x3312:
			*normals = square_kyurii;
			return 4;
		case 0x3313:
			*normals = square_girudaa;
			return 4;
		case 0x3314:
			*normals = square_kiro;
			return 2;
		case 0x3315:
			*normals = square_kiroguramu;
			return 5;
		case 0x3316:
			*normals = square_kiromeetoru;
			return 6;
		case 0x3317:
			*normals = square_kirowatto;
			return 5;
		case 0x3318:
			*normals = square_guramu;
			return 3;
		case 0x3319:
			*normals = square_guramuton;
			return 5;
		case 0x331A:
			*normals = square_kuruzeiro;
			return 5;
		case 0x331B:
			*normals = square_kuroone;
			return 4;
		case 0x331C:
			*normals = square_keesu;
			return 3;
		case 0x331D:
			*normals = square_koruna;
			return 3;
		case 0x331E:
			*normals = square_koopo;
			return 3;
		case 0x331F:
			*normals = square_saikuru;
			return 4;
		case 0x3320:
			*normals = square_santiimu;
			return 5;
		case 0x3321:
			*normals = square_siringu;
			return 4;
		case 0x3322:
			*normals = square_senti;
			return 3;
		case 0x3323:
			*normals = square_sento;
			return 3;
		case 0x3324:
			*normals = square_daasu;
			return 3;
		case 0x3325:
			*normals = square_desi;
			return 2;
		case 0x3326:
			*normals = square_doru;
			return 2;
		case 0x3327:
			*normals = square_ton;
			return 2;
		case 0x3328:
			*normals = square_nano;
			return 2;
		case 0x3329:
			*normals = square_notto;
			return 3;
		case 0x332A:
			*normals = square_haitu;
			return 3;
		case 0x332B:
			*normals = square_paasento;
			return 5;
		case 0x332C:
			*normals = square_paatu;
			return 3;
		case 0x332D:
			*normals = square_baareru;
			return 4;
		case 0x332E:
			*normals = square_piasutoru;
			return 5;
		case 0x332F:
			*normals = square_pikuru;
			return 3;
		case 0x3330:
			*normals = square_piko;
			return 2;
		case 0x3331:
			*normals = square_biru;
			return 2;
		case 0x3332:
			*normals = square_huaraddo;
			return 5;
		case 0x3333:
			*normals = square_huiito;
			return 4;
		case 0x3334:
			*normals = square_bussyeru;
			return 5;
		case 0x3335:
			*normals = square_huran;
			return 3;
		case 0x3336:
			*normals = square_hekutaaru;
			return 5;
		case 0x3337:
			*normals = square_peso;
			return 2;
		case 0x3338:
			*normals = square_penihi;
			return 3;
		case 0x3339:
			*normals = square_herutu;
			return 3;
		case 0x333A:
			*normals = square_pensu;
			return 3;
		case 0x333B:
			*normals = square_peezi;
			return 3;
		case 0x333C:
			*normals = square_beeta;
			return 3;
		case 0x333D:
			*normals = square_pointo;
			return 4;
		case 0x333E:
			*normals = square_boruto;
			return 3;
		case 0x333F:
			*normals = square_hon;
			return 2;
		case 0x3340:
			*normals = square_pondo;
			return 3;
		case 0x3341:
			*normals = square_hooru;
			return 3;
		case 0x3342:
			*normals = square_hoon;
			return 3;
		case 0x3343:
			*normals = square_maikuro;
			return 4;
		case 0x3344:
			*normals = square_mairu;
			return 3;
		case 0x3345:
			*normals = square_mahha;
			return 3;
		case 0x3346:
			*normals = square_maruku;
			return 3;
		case 0x3347:
			*normals = square_mansyon;
			return 5;
		case 0x3348:
			*normals = square_mikuron;
			return 4;
		case 0x3349:
			*normals = square_miri;
			return 2;
		case 0x334A:
			*normals = square_miribaaru;
			return 5;
		case 0x334B:
			*normals = square_mega;
			return 2;
		case 0x334C:
			*normals = square_megaton;
			return 4;
		case 0x334D:
			*normals = square_meetoru;
			return 4;
		case 0x334E:
			*normals = square_yaado;
			return 3;
		case 0x334F:
			*normals = square_yaaru;
			return 3;
		case 0x3350:
			*normals = square_yuan;
			return 3;
		case 0x3351:
			*normals = square_rittoru;
			return 4;
		case 0x3352:
			*normals = square_rira;
			return 2;
		case 0x3353:
			*normals = square_rupii;
			return 3;
		case 0x3354:
			*normals = square_ruuburu;
			return 4;
		case 0x3355:
			*normals = square_remu;
			return 2;
		case 0x3356:
			*normals = square_rentogen;
			return 5;
		case 0x3357:
			*normals = square_watto;
			return 3;
		case 0x3358:
			*normals = ideographic_telegraph_symbol_for_hour_zero;
			return 2;
		case 0x3359:
			*normals = ideographic_telegraph_symbol_for_hour_one;
			return 2;
		case 0x335A:
			*normals = ideographic_telegraph_symbol_for_hour_two;
			return 2;
		case 0x335B:
			*normals = ideographic_telegraph_symbol_for_hour_three;
			return 2;
		case 0x335C:
			*normals = ideographic_telegraph_symbol_for_hour_four;
			return 2;
		case 0x335D:
			*normals = ideographic_telegraph_symbol_for_hour_five;
			return 2;
		case 0x335E:
			*normals = ideographic_telegraph_symbol_for_hour_six;
			return 2;
		case 0x335F:
			*normals = ideographic_telegraph_symbol_for_hour_seven;
			return 2;
		case 0x3360:
			*normals = ideographic_telegraph_symbol_for_hour_eight;
			return 2;
		case 0x3361:
			*normals = ideographic_telegraph_symbol_for_hour_nine;
			return 2;
		case 0x3362:
			*normals = ideographic_telegraph_symbol_for_hour_ten;
			return 3;
		case 0x3363:
			*normals = ideographic_telegraph_symbol_for_hour_eleven;
			return 3;
		case 0x3364:
			*normals = ideographic_telegraph_symbol_for_hour_twelve;
			return 3;
		case 0x3365:
			*normals = ideographic_telegraph_symbol_for_hour_thirteen;
			return 3;
		case 0x3366:
			*normals = ideographic_telegraph_symbol_for_hour_fourteen;
			return 3;
		case 0x3367:
			*normals = ideographic_telegraph_symbol_for_hour_fifteen;
			return 3;
		case 0x3368:
			*normals = ideographic_telegraph_symbol_for_hour_sixteen;
			return 3;
		case 0x3369:
			*normals = ideographic_telegraph_symbol_for_hour_seventeen;
			return 3;
		case 0x336A:
			*normals = ideographic_telegraph_symbol_for_hour_eighteen;
			return 3;
		case 0x336B:
			*normals = ideographic_telegraph_symbol_for_hour_nineteen;
			return 3;
		case 0x336C:
			*normals = ideographic_telegraph_symbol_for_hour_twenty;
			return 3;
		case 0x336D:
			*normals = ideographic_telegraph_symbol_for_hour_twenty_one;
			return 3;
		case 0x336E:
			*normals = ideographic_telegraph_symbol_for_hour_twenty_two;
			return 3;
		case 0x336F:
			*normals = ideographic_telegraph_symbol_for_hour_twenty_three;
			return 3;
		case 0x3370:
			*normals = ideographic_telegraph_symbol_for_hour_twenty_four;
			return 3;
		case 0x3371:
			*normals = square_hpa;
			return 3;
		case 0x3372:
			*normals = square_da;
			return 2;
		case 0x3373:
			*normals = square_au;
			return 2;
		case 0x3374:
			*normals = square_bar;
			return 3;
		case 0x3375:
			*normals = square_ov;
			return 2;
		case 0x3376:
			*normals = square_pc;
			return 2;
		case 0x3377:
			*normals = square_dm;
			return 2;
		case 0x3378:
			*normals = square_dm_squared;
			return 3;
		case 0x3379:
			*normals = square_dm_cubed;
			return 3;
		case 0x337A:
			*normals = square_iu;
			return 2;
		case 0x337B:
			*normals = square_era_name_heisei;
			return 2;
		case 0x337C:
			*normals = square_era_name_syouwa;
			return 2;
		case 0x337D:
			*normals = square_era_name_taisyou;
			return 2;
		case 0x337E:
			*normals = square_era_name_meizi;
			return 2;
		case 0x337F:
			*normals = square_corporation;
			return 4;
		case 0x3380:
			*normals = square_pa_amps;
			return 2;
		case 0x3381:
			*normals = square_na;
			return 2;
		case 0x3382:
			*normals = square_mu_a;
			return 2;
		case 0x3383:
			*normals = square_ma;
			return 2;
		case 0x3384:
			*normals = square_ka;
			return 2;
		case 0x3385:
			*normals = square_kb;
			return 2;
		case 0x3386:
			*normals = square_mb;
			return 2;
		case 0x3387:
			*normals = square_gb;
			return 2;
		case 0x3388:
			*normals = square_cal;
			return 3;
		case 0x3389:
			*normals = square_kcal;
			return 4;
		case 0x338A:
			*normals = square_pf;
			return 2;
		case 0x338B:
			*normals = square_nf;
			return 2;
		case 0x338C:
			*normals = square_mu_f;
			return 2;
		case 0x338D:
			*normals = square_mu_g;
			return 2;
		case 0x338E:
			*normals = square_mg;
			return 2;
		case 0x338F:
			*normals = square_kg;
			return 2;
		case 0x3390:
			*normals = square_hz;
			return 2;
		case 0x3391:
			*normals = square_khz;
			return 3;
		case 0x3392:
			*normals = square_mhz;
			return 3;
		case 0x3393:
			*normals = square_ghz;
			return 3;
		case 0x3394:
			*normals = square_thz;
			return 3;
		case 0x3395:
			*normals = square_mu_l;
			return 2;
		case 0x3396:
			*normals = square_ml;
			return 2;
		case 0x3397:
			*normals = square_dl;
			return 2;
		case 0x3398:
			*normals = square_kl;
			return 2;
		case 0x3399:
			*normals = square_fm;
			return 2;
		case 0x339A:
			*normals = square_nm;
			return 2;
		case 0x339B:
			*normals = square_mu_m;
			return 2;
		case 0x339C:
			*normals = square_mm;
			return 2;
		case 0x339D:
			*normals = square_cm;
			return 2;
		case 0x339E:
			*normals = square_km;
			return 2;
		case 0x339F:
			*normals = square_mm_squared;
			return 3;
		case 0x33A0:
			*normals = square_cm_squared;
			return 3;
		case 0x33A1:
			*normals = square_m_squared;
			return 2;
		case 0x33A2:
			*normals = square_km_squared;
			return 3;
		case 0x33A3:
			*normals = square_mm_cubed;
			return 3;
		case 0x33A4:
			*normals = square_cm_cubed;
			return 3;
		case 0x33A5:
			*normals = square_m_cubed;
			return 2;
		case 0x33A6:
			*normals = square_km_cubed;
			return 3;
		case 0x33A7:
			*normals = square_m_over_s;
			return 3;
		case 0x33A8:
			*normals = square_m_over_s_squared;
			return 4;
		case 0x33A9:
			*normals = square_pa;
			return 2;
		case 0x33AA:
			*normals = square_kpa;
			return 3;
		case 0x33AB:
			*normals = square_mpa;
			return 3;
		case 0x33AC:
			*normals = square_gpa;
			return 3;
		case 0x33AD:
			*normals = square_rad;
			return 3;
		case 0x33AE:
			*normals = square_rad_over_s;
			return 5;
		case 0x33AF:
			*normals = square_rad_over_s_squared;
			return 6;
		case 0x33B0:
			*normals = square_ps;
			return 2;
		case 0x33B1:
			*normals = square_ns;
			return 2;
		case 0x33B2:
			*normals = square_mu_s;
			return 2;
		case 0x33B3:
			*normals = square_ms;
			return 2;
		case 0x33B4:
			*normals = square_pv;
			return 2;
		case 0x33B5:
			*normals = square_nv;
			return 2;
		case 0x33B6:
			*normals = square_mu_v;
			return 2;
		case 0x33B7:
			*normals = square_mv;
			return 2;
		case 0x33B8:
			*normals = square_kv;
			return 2;
		case 0x33B9:
			*normals = square_mv_mega;
			return 2;
		case 0x33BA:
			*normals = square_pw;
			return 2;
		case 0x33BB:
			*normals = square_nw;
			return 2;
		case 0x33BC:
			*normals = square_mu_w;
			return 2;
		case 0x33BD:
			*normals = square_mw;
			return 2;
		case 0x33BE:
			*normals = square_kw;
			return 2;
		case 0x33BF:
			*normals = square_mw_mega;
			return 2;
		case 0x33C0:
			*normals = square_k_ohm;
			return 2;
		case 0x33C1:
			*normals = square_m_ohm;
			return 2;
		case 0x33C2:
			*normals = square_am;
			return 4;
		case 0x33C3:
			*normals = square_bq;
			return 2;
		case 0x33C4:
			*normals = square_cc;
			return 2;
		case 0x33C5:
			*normals = square_cd;
			return 2;
		case 0x33C6:
			*normals = square_c_over_kg;
			return 4;
		case 0x33C7:
			*normals = square_co;
			return 3;
		case 0x33C8:
			*normals = square_db;
			return 2;
		case 0x33C9:
			*normals = square_gy;
			return 2;
		case 0x33CA:
			*normals = square_ha;
			return 2;
		case 0x33CB:
			*normals = square_hp;
			return 2;
		case 0x33CC:
			*normals = square_in;
			return 2;
		case 0x33CD:
			*normals = square_kk;
			return 2;
		case 0x33CE:
			*normals = square_km_capital;
			return 2;
		case 0x33CF:
			*normals = square_kt;
			return 2;
		case 0x33D0:
			*normals = square_lm;
			return 2;
		case 0x33D1:
			*normals = square_ln;
			return 2;
		case 0x33D2:
			*normals = square_log;
			return 3;
		case 0x33D3:
			*normals = square_lx;
			return 2;
		case 0x33D4:
			*normals = square_mb_small;
			return 2;
		case 0x33D5:
			*normals = square_mil;
			return 3;
		case 0x33D6:
			*normals = square_mol;
			return 3;
		case 0x33D7:
			*normals = square_ph;
			return 2;
		case 0x33D8:
			*normals = square_pm;
			return 4;
		case 0x33D9:
			*normals = square_ppm;
			return 3;
		case 0x33DA:
			*normals = square_pr;
			return 2;
		case 0x33DB:
			*normals = square_sr;
			return 2;
		case 0x33DC:
			*normals = square_sv;
			return 2;
		case 0x33DD:
			*normals = square_wb;
			return 2;
		case 0x33DE:
			*normals = square_v_over_m;
			return 3;
		case 0x33DF:
			*normals = square_a_over_m;
			return 3;
		case 0x33E0:
			*normals = ideographic_telegraph_symbol_for_day_one;
			return 2;
		case 0x33E1:
			*normals = ideographic_telegraph_symbol_for_day_two;
			return 2;
		case 0x33E2:
			*normals = ideographic_telegraph_symbol_for_day_three;
			return 2;
		case 0x33E3:
			*normals = ideographic_telegraph_symbol_for_day_four;
			return 2;
		case 0x33E4:
			*normals = ideographic_telegraph_symbol_for_day_five;
			return 2;
		case 0x33E5:
			*normals = ideographic_telegraph_symbol_for_day_six;
			return 2;
		case 0x33E6:
			*normals = ideographic_telegraph_symbol_for_day_seven;
			return 2;
		case 0x33E7:
			*normals = ideographic_telegraph_symbol_for_day_eight;
			return 2;
		case 0x33E8:
			*normals = ideographic_telegraph_symbol_for_day_nine;
			return 2;
		case 0x33E9:
			*normals = ideographic_telegraph_symbol_for_day_ten;
			return 3;
		case 0x33EA:
			*normals = ideographic_telegraph_symbol_for_day_eleven;
			return 3;
		case 0x33EB:
			*normals = ideographic_telegraph_symbol_for_day_twelve;
			return 3;
		case 0x33EC:
			*normals = ideographic_telegraph_symbol_for_day_thirteen;
			return 3;
		case 0x33ED:
			*normals = ideographic_telegraph_symbol_for_day_fourteen;
			return 3;
		case 0x33EE:
			*normals = ideographic_telegraph_symbol_for_day_fifteen;
			return 3;
		case 0x33EF:
			*normals = ideographic_telegraph_symbol_for_day_sixteen;
			return 3;
		case 0x33F0:
			*normals = ideographic_telegraph_symbol_for_day_seventeen;
			return 3;
		case 0x33F1:
			*normals = ideographic_telegraph_symbol_for_day_eighteen;
			return 3;
		case 0x33F2:
			*normals = ideographic_telegraph_symbol_for_day_nineteen;
			return 3;
		case 0x33F3:
			*normals = ideographic_telegraph_symbol_for_day_twenty;
			return 3;
		case 0x33F4:
			*normals = ideographic_telegraph_symbol_for_day_twenty_one;
			return 3;
		case 0x33F5:
			*normals = ideographic_telegraph_symbol_for_day_twenty_two;
			return 3;
		case 0x33F6:
			*normals = ideographic_telegraph_symbol_for_day_twenty_three;
			return 3;
		case 0x33F7:
			*normals = ideographic_telegraph_symbol_for_day_twenty_four;
			return 3;
		case 0x33F8:
			*normals = ideographic_telegraph_symbol_for_day_twenty_five;
			return 3;
		case 0x33F9:
			*normals = ideographic_telegraph_symbol_for_day_twenty_six;
			return 3;
		case 0x33FA:
			*normals = ideographic_telegraph_symbol_for_day_twenty_seven;
			return 3;
		case 0x33FB:
			*normals = ideographic_telegraph_symbol_for_day_twenty_eight;
			return 3;
		case 0x33FC:
			*normals = ideographic_telegraph_symbol_for_day_twenty_nine;
			return 3;
		case 0x33FD:
			*normals = ideographic_telegraph_symbol_for_day_thirty;
			return 3;
		case 0x33FE:
			*normals = ideographic_telegraph_symbol_for_day_thirty_one;
			return 3;
		case 0x33FF:
			*normals = square_gal;
			return 3;
		case 0xA69C:
			*normals = modifier_letter_cyrillic_hard_sign;
			return 1;
		case 0xA69D:
			*normals = modifier_letter_cyrillic_soft_sign;
			return 1;
		case 0xA770:
			*normals = modifier_letter_us;
			return 1;
		case 0xA7F8:
			*normals = modifier_letter_capital_h_with_stroke;
			return 1;
		case 0xA7F9:
			*normals = modifier_letter_small_ligature_oe;
			return 1;
		case 0xAB5C:
			*normals = modifier_letter_small_heng;
			return 1;
		case 0xAB5D:
			*normals = modifier_letter_small_l_with_inverted_lazy_s;
			return 1;
		case 0xAB5E:
			*normals = modifier_letter_small_l_with_middle_tilde;
			return 1;
		case 0xAB5F:
			*normals = modifier_letter_small_u_with_left_hook;
			return 1;
		case 0xAB69:
			*normals = modifier_letter_small_turned_w;
			return 1;
		case 0xF900:
			*normals = cjk_compatibility_ideograph_f900;
			return 1;
		case 0xF901:
			*normals = cjk_compatibility_ideograph_f901;
			return 1;
		case 0xF902:
			*normals = cjk_compatibility_ideograph_f902;
			return 1;
		case 0xF903:
			*normals = cjk_compatibility_ideograph_f903;
			return 1;
		case 0xF904:
			*normals = cjk_compatibility_ideograph_f904;
			return 1;
		case 0xF905:
			*normals = cjk_compatibility_ideograph_f905;
			return 1;
		case 0xF906:
			*normals = cjk_compatibility_ideograph_f906;
			return 1;
		case 0xF907:
			*normals = cjk_compatibility_ideograph_f907;
			return 1;
		case 0xF908:
			*normals = cjk_compatibility_ideograph_f908;
			return 1;
		case 0xF909:
			*normals = cjk_compatibility_ideograph_f909;
			return 1;
		case 0xF90A:
			*normals = cjk_compatibility_ideograph_f90a;
			return 1;
		case 0xF90B:
			*normals = cjk_compatibility_ideograph_f90b;
			return 1;
		case 0xF90C:
			*normals = cjk_compatibility_ideograph_f90c;
			return 1;
		case 0xF90D:
			*normals = cjk_compatibility_ideograph_f90d;
			return 1;
		case 0xF90E:
			*normals = cjk_compatibility_ideograph_f90e;
			return 1;
		case 0xF90F:
			*normals = cjk_compatibility_ideograph_f90f;
			return 1;
		case 0xF910:
			*normals = cjk_compatibility_ideograph_f910;
			return 1;
		case 0xF911:
			*normals = cjk_compatibility_ideograph_f911;
			return 1;
		case 0xF912:
			*normals = cjk_compatibility_ideograph_f912;
			return 1;
		case 0xF913:
			*normals = cjk_compatibility_ideograph_f913;
			return 1;
		case 0xF914:
			*normals = cjk_compatibility_ideograph_f914;
			return 1;
		case 0xF915:
			*normals = cjk_compatibility_ideograph_f915;
			return 1;
		case 0xF916:
			*normals = cjk_compatibility_ideograph_f916;
			return 1;
		case 0xF917:
			*normals = cjk_compatibility_ideograph_f917;
			return 1;
		case 0xF918:
			*normals = cjk_compatibility_ideograph_f918;
			return 1;
		case 0xF919:
			*normals = cjk_compatibility_ideograph_f919;
			return 1;
		case 0xF91A:
			*normals = cjk_compatibility_ideograph_f91a;
			return 1;
		case 0xF91B:
			*normals = cjk_compatibility_ideograph_f91b;
			return 1;
		case 0xF91C:
			*normals = cjk_compatibility_ideograph_f91c;
			return 1;
		case 0xF91D:
			*normals = cjk_compatibility_ideograph_f91d;
			return 1;
		case 0xF91E:
			*normals = cjk_compatibility_ideograph_f91e;
			return 1;
		case 0xF91F:
			*normals = cjk_compatibility_ideograph_f91f;
			return 1;
		case 0xF920:
			*normals = cjk_compatibility_ideograph_f920;
			return 1;
		case 0xF921:
			*normals = cjk_compatibility_ideograph_f921;
			return 1;
		case 0xF922:
			*normals = cjk_compatibility_ideograph_f922;
			return 1;
		case 0xF923:
			*normals = cjk_compatibility_ideograph_f923;
			return 1;
		case 0xF924:
			*normals = cjk_compatibility_ideograph_f924;
			return 1;
		case 0xF925:
			*normals = cjk_compatibility_ideograph_f925;
			return 1;
		case 0xF926:
			*normals = cjk_compatibility_ideograph_f926;
			return 1;
		case 0xF927:
			*normals = cjk_compatibility_ideograph_f927;
			return 1;
		case 0xF928:
			*normals = cjk_compatibility_ideograph_f928;
			return 1;
		case 0xF929:
			*normals = cjk_compatibility_ideograph_f929;
			return 1;
		case 0xF92A:
			*normals = cjk_compatibility_ideograph_f92a;
			return 1;
		case 0xF92B:
			*normals = cjk_compatibility_ideograph_f92b;
			return 1;
		case 0xF92C:
			*normals = cjk_compatibility_ideograph_f92c;
			return 1;
		case 0xF92D:
			*normals = cjk_compatibility_ideograph_f92d;
			return 1;
		case 0xF92E:
			*normals = cjk_compatibility_ideograph_f92e;
			return 1;
		case 0xF92F:
			*normals = cjk_compatibility_ideograph_f92f;
			return 1;
		case 0xF930:
			*normals = cjk_compatibility_ideograph_f930;
			return 1;
		case 0xF931:
			*normals = cjk_compatibility_ideograph_f931;
			return 1;
		case 0xF932:
			*normals = cjk_compatibility_ideograph_f932;
			return 1;
		case 0xF933:
			*normals = cjk_compatibility_ideograph_f933;
			return 1;
		case 0xF934:
			*normals = cjk_compatibility_ideograph_f934;
			return 1;
		case 0xF935:
			*normals = cjk_compatibility_ideograph_f935;
			return 1;
		case 0xF936:
			*normals = cjk_compatibility_ideograph_f936;
			return 1;
		case 0xF937:
			*normals = cjk_compatibility_ideograph_f937;
			return 1;
		case 0xF938:
			*normals = cjk_compatibility_ideograph_f938;
			return 1;
		case 0xF939:
			*normals = cjk_compatibility_ideograph_f939;
			return 1;
		case 0xF93A:
			*normals = cjk_compatibility_ideograph_f93a;
			return 1;
		case 0xF93B:
			*normals = cjk_compatibility_ideograph_f93b;
			return 1;
		case 0xF93C:
			*normals = cjk_compatibility_ideograph_f93c;
			return 1;
		case 0xF93D:
			*normals = cjk_compatibility_ideograph_f93d;
			return 1;
		case 0xF93E:
			*normals = cjk_compatibility_ideograph_f93e;
			return 1;
		case 0xF93F:
			*normals = cjk_compatibility_ideograph_f93f;
			return 1;
		case 0xF940:
			*normals = cjk_compatibility_ideograph_f940;
			return 1;
		case 0xF941:
			*normals = cjk_compatibility_ideograph_f941;
			return 1;
		case 0xF942:
			*normals = cjk_compatibility_ideograph_f942;
			return 1;
		case 0xF943:
			*normals = cjk_compatibility_ideograph_f943;
			return 1;
		case 0xF944:
			*normals = cjk_compatibility_ideograph_f944;
			return 1;
		case 0xF945:
			*normals = cjk_compatibility_ideograph_f945;
			return 1;
		case 0xF946:
			*normals = cjk_compatibility_ideograph_f946;
			return 1;
		case 0xF947:
			*normals = cjk_compatibility_ideograph_f947;
			return 1;
		case 0xF948:
			*normals = cjk_compatibility_ideograph_f948;
			return 1;
		case 0xF949:
			*normals = cjk_compatibility_ideograph_f949;
			return 1;
		case 0xF94A:
			*normals = cjk_compatibility_ideograph_f94a;
			return 1;
		case 0xF94B:
			*normals = cjk_compatibility_ideograph_f94b;
			return 1;
		case 0xF94C:
			*normals = cjk_compatibility_ideograph_f94c;
			return 1;
		case 0xF94D:
			*normals = cjk_compatibility_ideograph_f94d;
			return 1;
		case 0xF94E:
			*normals = cjk_compatibility_ideograph_f94e;
			return 1;
		case 0xF94F:
			*normals = cjk_compatibility_ideograph_f94f;
			return 1;
		case 0xF950:
			*normals = cjk_compatibility_ideograph_f950;
			return 1;
		case 0xF951:
			*normals = cjk_compatibility_ideograph_f951;
			return 1;
		case 0xF952:
			*normals = cjk_compatibility_ideograph_f952;
			return 1;
		case 0xF953:
			*normals = cjk_compatibility_ideograph_f953;
			return 1;
		case 0xF954:
			*normals = cjk_compatibility_ideograph_f954;
			return 1;
		case 0xF955:
			*normals = cjk_compatibility_ideograph_f955;
			return 1;
		case 0xF956:
			*normals = cjk_compatibility_ideograph_f956;
			return 1;
		case 0xF957:
			*normals = cjk_compatibility_ideograph_f957;
			return 1;
		case 0xF958:
			*normals = cjk_compatibility_ideograph_f958;
			return 1;
		case 0xF959:
			*normals = cjk_compatibility_ideograph_f959;
			return 1;
		case 0xF95A:
			*normals = cjk_compatibility_ideograph_f95a;
			return 1;
		case 0xF95B:
			*normals = cjk_compatibility_ideograph_f95b;
			return 1;
		case 0xF95C:
			*normals = cjk_compatibility_ideograph_f95c;
			return 1;
		case 0xF95D:
			*normals = cjk_compatibility_ideograph_f95d;
			return 1;
		case 0xF95E:
			*normals = cjk_compatibility_ideograph_f95e;
			return 1;
		case 0xF95F:
			*normals = cjk_compatibility_ideograph_f95f;
			return 1;
		case 0xF960:
			*normals = cjk_compatibility_ideograph_f960;
			return 1;
		case 0xF961:
			*normals = cjk_compatibility_ideograph_f961;
			return 1;
		case 0xF962:
			*normals = cjk_compatibility_ideograph_f962;
			return 1;
		case 0xF963:
			*normals = cjk_compatibility_ideograph_f963;
			return 1;
		case 0xF964:
			*normals = cjk_compatibility_ideograph_f964;
			return 1;
		case 0xF965:
			*normals = cjk_compatibility_ideograph_f965;
			return 1;
		case 0xF966:
			*normals = cjk_compatibility_ideograph_f966;
			return 1;
		case 0xF967:
			*normals = cjk_compatibility_ideograph_f967;
			return 1;
		case 0xF968:
			*normals = cjk_compatibility_ideograph_f968;
			return 1;
		case 0xF969:
			*normals = cjk_compatibility_ideograph_f969;
			return 1;
		case 0xF96A:
			*normals = cjk_compatibility_ideograph_f96a;
			return 1;
		case 0xF96B:
			*normals = cjk_compatibility_ideograph_f96b;
			return 1;
		case 0xF96C:
			*normals = cjk_compatibility_ideograph_f96c;
			return 1;
		case 0xF96D:
			*normals = cjk_compatibility_ideograph_f96d;
			return 1;
		case 0xF96E:
			*normals = cjk_compatibility_ideograph_f96e;
			return 1;
		case 0xF96F:
			*normals = cjk_compatibility_ideograph_f96f;
			return 1;
		case 0xF970:
			*normals = cjk_compatibility_ideograph_f970;
			return 1;
		case 0xF971:
			*normals = cjk_compatibility_ideograph_f971;
			return 1;
		case 0xF972:
			*normals = cjk_compatibility_ideograph_f972;
			return 1;
		case 0xF973:
			*normals = cjk_compatibility_ideograph_f973;
			return 1;
		case 0xF974:
			*normals = cjk_compatibility_ideograph_f974;
			return 1;
		case 0xF975:
			*normals = cjk_compatibility_ideograph_f975;
			return 1;
		case 0xF976:
			*normals = cjk_compatibility_ideograph_f976;
			return 1;
		case 0xF977:
			*normals = cjk_compatibility_ideograph_f977;
			return 1;
		case 0xF978:
			*normals = cjk_compatibility_ideograph_f978;
			return 1;
		case 0xF979:
			*normals = cjk_compatibility_ideograph_f979;
			return 1;
		case 0xF97A:
			*normals = cjk_compatibility_ideograph_f97a;
			return 1;
		case 0xF97B:
			*normals = cjk_compatibility_ideograph_f97b;
			return 1;
		case 0xF97C:
			*normals = cjk_compatibility_ideograph_f97c;
			return 1;
		case 0xF97D:
			*normals = cjk_compatibility_ideograph_f97d;
			return 1;
		case 0xF97E:
			*normals = cjk_compatibility_ideograph_f97e;
			return 1;
		case 0xF97F:
			*normals = cjk_compatibility_ideograph_f97f;
			return 1;
		case 0xF980:
			*normals = cjk_compatibility_ideograph_f980;
			return 1;
		case 0xF981:
			*normals = cjk_compatibility_ideograph_f981;
			return 1;
		case 0xF982:
			*normals = cjk_compatibility_ideograph_f982;
			return 1;
		case 0xF983:
			*normals = cjk_compatibility_ideograph_f983;
			return 1;
		case 0xF984:
			*normals = cjk_compatibility_ideograph_f984;
			return 1;
		case 0xF985:
			*normals = cjk_compatibility_ideograph_f985;
			return 1;
		case 0xF986:
			*normals = cjk_compatibility_ideograph_f986;
			return 1;
		case 0xF987:
			*normals = cjk_compatibility_ideograph_f987;
			return 1;
		case 0xF988:
			*normals = cjk_compatibility_ideograph_f988;
			return 1;
		case 0xF989:
			*normals = cjk_compatibility_ideograph_f989;
			return 1;
		case 0xF98A:
			*normals = cjk_compatibility_ideograph_f98a;
			return 1;
		case 0xF98B:
			*normals = cjk_compatibility_ideograph_f98b;
			return 1;
		case 0xF98C:
			*normals = cjk_compatibility_ideograph_f98c;
			return 1;
		case 0xF98D:
			*normals = cjk_compatibility_ideograph_f98d;
			return 1;
		case 0xF98E:
			*normals = cjk_compatibility_ideograph_f98e;
			return 1;
		case 0xF98F:
			*normals = cjk_compatibility_ideograph_f98f;
			return 1;
		case 0xF990:
			*normals = cjk_compatibility_ideograph_f990;
			return 1;
		case 0xF991:
			*normals = cjk_compatibility_ideograph_f991;
			return 1;
		case 0xF992:
			*normals = cjk_compatibility_ideograph_f992;
			return 1;
		case 0xF993:
			*normals = cjk_compatibility_ideograph_f993;
			return 1;
		case 0xF994:
			*normals = cjk_compatibility_ideograph_f994;
			return 1;
		case 0xF995:
			*normals = cjk_compatibility_ideograph_f995;
			return 1;
		case 0xF996:
			*normals = cjk_compatibility_ideograph_f996;
			return 1;
		case 0xF997:
			*normals = cjk_compatibility_ideograph_f997;
			return 1;
		case 0xF998:
			*normals = cjk_compatibility_ideograph_f998;
			return 1;
		case 0xF999:
			*normals = cjk_compatibility_ideograph_f999;
			return 1;
		case 0xF99A:
			*normals = cjk_compatibility_ideograph_f99a;
			return 1;
		case 0xF99B:
			*normals = cjk_compatibility_ideograph_f99b;
			return 1;
		case 0xF99C:
			*normals = cjk_compatibility_ideograph_f99c;
			return 1;
		case 0xF99D:
			*normals = cjk_compatibility_ideograph_f99d;
			return 1;
		case 0xF99E:
			*normals = cjk_compatibility_ideograph_f99e;
			return 1;
		case 0xF99F:
			*normals = cjk_compatibility_ideograph_f99f;
			return 1;
		case 0xF9A0:
			*normals = cjk_compatibility_ideograph_f9a0;
			return 1;
		case 0xF9A1:
			*normals = cjk_compatibility_ideograph_f9a1;
			return 1;
		case 0xF9A2:
			*normals = cjk_compatibility_ideograph_f9a2;
			return 1;
		case 0xF9A3:
			*normals = cjk_compatibility_ideograph_f9a3;
			return 1;
		case 0xF9A4:
			*normals = cjk_compatibility_ideograph_f9a4;
			return 1;
		case 0xF9A5:
			*normals = cjk_compatibility_ideograph_f9a5;
			return 1;
		case 0xF9A6:
			*normals = cjk_compatibility_ideograph_f9a6;
			return 1;
		case 0xF9A7:
			*normals = cjk_compatibility_ideograph_f9a7;
			return 1;
		case 0xF9A8:
			*normals = cjk_compatibility_ideograph_f9a8;
			return 1;
		case 0xF9A9:
			*normals = cjk_compatibility_ideograph_f9a9;
			return 1;
		case 0xF9AA:
			*normals = cjk_compatibility_ideograph_f9aa;
			return 1;
		case 0xF9AB:
			*normals = cjk_compatibility_ideograph_f9ab;
			return 1;
		case 0xF9AC:
			*normals = cjk_compatibility_ideograph_f9ac;
			return 1;
		case 0xF9AD:
			*normals = cjk_compatibility_ideograph_f9ad;
			return 1;
		case 0xF9AE:
			*normals = cjk_compatibility_ideograph_f9ae;
			return 1;
		case 0xF9AF:
			*normals = cjk_compatibility_ideograph_f9af;
			return 1;
		case 0xF9B0:
			*normals = cjk_compatibility_ideograph_f9b0;
			return 1;
		case 0xF9B1:
			*normals = cjk_compatibility_ideograph_f9b1;
			return 1;
		case 0xF9B2:
			*normals = cjk_compatibility_ideograph_f9b2;
			return 1;
		case 0xF9B3:
			*normals = cjk_compatibility_ideograph_f9b3;
			return 1;
		case 0xF9B4:
			*normals = cjk_compatibility_ideograph_f9b4;
			return 1;
		case 0xF9B5:
			*normals = cjk_compatibility_ideograph_f9b5;
			return 1;
		case 0xF9B6:
			*normals = cjk_compatibility_ideograph_f9b6;
			return 1;
		case 0xF9B7:
			*normals = cjk_compatibility_ideograph_f9b7;
			return 1;
		case 0xF9B8:
			*normals = cjk_compatibility_ideograph_f9b8;
			return 1;
		case 0xF9B9:
			*normals = cjk_compatibility_ideograph_f9b9;
			return 1;
		case 0xF9BA:
			*normals = cjk_compatibility_ideograph_f9ba;
			return 1;
		case 0xF9BB:
			*normals = cjk_compatibility_ideograph_f9bb;
			return 1;
		case 0xF9BC:
			*normals = cjk_compatibility_ideograph_f9bc;
			return 1;
		case 0xF9BD:
			*normals = cjk_compatibility_ideograph_f9bd;
			return 1;
		case 0xF9BE:
			*normals = cjk_compatibility_ideograph_f9be;
			return 1;
		case 0xF9BF:
			*normals = cjk_compatibility_ideograph_f9bf;
			return 1;
		case 0xF9C0:
			*normals = cjk_compatibility_ideograph_f9c0;
			return 1;
		case 0xF9C1:
			*normals = cjk_compatibility_ideograph_f9c1;
			return 1;
		case 0xF9C2:
			*normals = cjk_compatibility_ideograph_f9c2;
			return 1;
		case 0xF9C3:
			*normals = cjk_compatibility_ideograph_f9c3;
			return 1;
		case 0xF9C4:
			*normals = cjk_compatibility_ideograph_f9c4;
			return 1;
		case 0xF9C5:
			*normals = cjk_compatibility_ideograph_f9c5;
			return 1;
		case 0xF9C6:
			*normals = cjk_compatibility_ideograph_f9c6;
			return 1;
		case 0xF9C7:
			*normals = cjk_compatibility_ideograph_f9c7;
			return 1;
		case 0xF9C8:
			*normals = cjk_compatibility_ideograph_f9c8;
			return 1;
		case 0xF9C9:
			*normals = cjk_compatibility_ideograph_f9c9;
			return 1;
		case 0xF9CA:
			*normals = cjk_compatibility_ideograph_f9ca;
			return 1;
		case 0xF9CB:
			*normals = cjk_compatibility_ideograph_f9cb;
			return 1;
		case 0xF9CC:
			*normals = cjk_compatibility_ideograph_f9cc;
			return 1;
		case 0xF9CD:
			*normals = cjk_compatibility_ideograph_f9cd;
			return 1;
		case 0xF9CE:
			*normals = cjk_compatibility_ideograph_f9ce;
			return 1;
		case 0xF9CF:
			*normals = cjk_compatibility_ideograph_f9cf;
			return 1;
		case 0xF9D0:
			*normals = cjk_compatibility_ideograph_f9d0;
			return 1;
		case 0xF9D1:
			*normals = cjk_compatibility_ideograph_f9d1;
			return 1;
		case 0xF9D2:
			*normals = cjk_compatibility_ideograph_f9d2;
			return 1;
		case 0xF9D3:
			*normals = cjk_compatibility_ideograph_f9d3;
			return 1;
		case 0xF9D4:
			*normals = cjk_compatibility_ideograph_f9d4;
			return 1;
		case 0xF9D5:
			*normals = cjk_compatibility_ideograph_f9d5;
			return 1;
		case 0xF9D6:
			*normals = cjk_compatibility_ideograph_f9d6;
			return 1;
		case 0xF9D7:
			*normals = cjk_compatibility_ideograph_f9d7;
			return 1;
		case 0xF9D8:
			*normals = cjk_compatibility_ideograph_f9d8;
			return 1;
		case 0xF9D9:
			*normals = cjk_compatibility_ideograph_f9d9;
			return 1;
		case 0xF9DA:
			*normals = cjk_compatibility_ideograph_f9da;
			return 1;
		case 0xF9DB:
			*normals = cjk_compatibility_ideograph_f9db;
			return 1;
		case 0xF9DC:
			*normals = cjk_compatibility_ideograph_f9dc;
			return 1;
		case 0xF9DD:
			*normals = cjk_compatibility_ideograph_f9dd;
			return 1;
		case 0xF9DE:
			*normals = cjk_compatibility_ideograph_f9de;
			return 1;
		case 0xF9DF:
			*normals = cjk_compatibility_ideograph_f9df;
			return 1;
		case 0xF9E0:
			*normals = cjk_compatibility_ideograph_f9e0;
			return 1;
		case 0xF9E1:
			*normals = cjk_compatibility_ideograph_f9e1;
			return 1;
		case 0xF9E2:
			*normals = cjk_compatibility_ideograph_f9e2;
			return 1;
		case 0xF9E3:
			*normals = cjk_compatibility_ideograph_f9e3;
			return 1;
		case 0xF9E4:
			*normals = cjk_compatibility_ideograph_f9e4;
			return 1;
		case 0xF9E5:
			*normals = cjk_compatibility_ideograph_f9e5;
			return 1;
		case 0xF9E6:
			*normals = cjk_compatibility_ideograph_f9e6;
			return 1;
		case 0xF9E7:
			*normals = cjk_compatibility_ideograph_f9e7;
			return 1;
		case 0xF9E8:
			*normals = cjk_compatibility_ideograph_f9e8;
			return 1;
		case 0xF9E9:
			*normals = cjk_compatibility_ideograph_f9e9;
			return 1;
		case 0xF9EA:
			*normals = cjk_compatibility_ideograph_f9ea;
			return 1;
		case 0xF9EB:
			*normals = cjk_compatibility_ideograph_f9eb;
			return 1;
		case 0xF9EC:
			*normals = cjk_compatibility_ideograph_f9ec;
			return 1;
		case 0xF9ED:
			*normals = cjk_compatibility_ideograph_f9ed;
			return 1;
		case 0xF9EE:
			*normals = cjk_compatibility_ideograph_f9ee;
			return 1;
		case 0xF9EF:
			*normals = cjk_compatibility_ideograph_f9ef;
			return 1;
		case 0xF9F0:
			*normals = cjk_compatibility_ideograph_f9f0;
			return 1;
		case 0xF9F1:
			*normals = cjk_compatibility_ideograph_f9f1;
			return 1;
		case 0xF9F2:
			*normals = cjk_compatibility_ideograph_f9f2;
			return 1;
		case 0xF9F3:
			*normals = cjk_compatibility_ideograph_f9f3;
			return 1;
		case 0xF9F4:
			*normals = cjk_compatibility_ideograph_f9f4;
			return 1;
		case 0xF9F5:
			*normals = cjk_compatibility_ideograph_f9f5;
			return 1;
		case 0xF9F6:
			*normals = cjk_compatibility_ideograph_f9f6;
			return 1;
		case 0xF9F7:
			*normals = cjk_compatibility_ideograph_f9f7;
			return 1;
		case 0xF9F8:
			*normals = cjk_compatibility_ideograph_f9f8;
			return 1;
		case 0xF9F9:
			*normals = cjk_compatibility_ideograph_f9f9;
			return 1;
		case 0xF9FA:
			*normals = cjk_compatibility_ideograph_f9fa;
			return 1;
		case 0xF9FB:
			*normals = cjk_compatibility_ideograph_f9fb;
			return 1;
		case 0xF9FC:
			*normals = cjk_compatibility_ideograph_f9fc;
			return 1;
		case 0xF9FD:
			*normals = cjk_compatibility_ideograph_f9fd;
			return 1;
		case 0xF9FE:
			*normals = cjk_compatibility_ideograph_f9fe;
			return 1;
		case 0xF9FF:
			*normals = cjk_compatibility_ideograph_f9ff;
			return 1;
		case 0xFA00:
			*normals = cjk_compatibility_ideograph_fa00;
			return 1;
		case 0xFA01:
			*normals = cjk_compatibility_ideograph_fa01;
			return 1;
		case 0xFA02:
			*normals = cjk_compatibility_ideograph_fa02;
			return 1;
		case 0xFA03:
			*normals = cjk_compatibility_ideograph_fa03;
			return 1;
		case 0xFA04:
			*normals = cjk_compatibility_ideograph_fa04;
			return 1;
		case 0xFA05:
			*normals = cjk_compatibility_ideograph_fa05;
			return 1;
		case 0xFA06:
			*normals = cjk_compatibility_ideograph_fa06;
			return 1;
		case 0xFA07:
			*normals = cjk_compatibility_ideograph_fa07;
			return 1;
		case 0xFA08:
			*normals = cjk_compatibility_ideograph_fa08;
			return 1;
		case 0xFA09:
			*normals = cjk_compatibility_ideograph_fa09;
			return 1;
		case 0xFA0A:
			*normals = cjk_compatibility_ideograph_fa0a;
			return 1;
		case 0xFA0B:
			*normals = cjk_compatibility_ideograph_fa0b;
			return 1;
		case 0xFA0C:
			*normals = cjk_compatibility_ideograph_fa0c;
			return 1;
		case 0xFA0D:
			*normals = cjk_compatibility_ideograph_fa0d;
			return 1;
		case 0xFA10:
			*normals = cjk_compatibility_ideograph_fa10;
			return 1;
		case 0xFA12:
			*normals = cjk_compatibility_ideograph_fa12;
			return 1;
		case 0xFA15:
			*normals = cjk_compatibility_ideograph_fa15;
			return 1;
		case 0xFA16:
			*normals = cjk_compatibility_ideograph_fa16;
			return 1;
		case 0xFA17:
			*normals = cjk_compatibility_ideograph_fa17;
			return 1;
		case 0xFA18:
			*normals = cjk_compatibility_ideograph_fa18;
			return 1;
		case 0xFA19:
			*normals = cjk_compatibility_ideograph_fa19;
			return 1;
		case 0xFA1A:
			*normals = cjk_compatibility_ideograph_fa1a;
			return 1;
		case 0xFA1B:
			*normals = cjk_compatibility_ideograph_fa1b;
			return 1;
		case 0xFA1C:
			*normals = cjk_compatibility_ideograph_fa1c;
			return 1;
		case 0xFA1D:
			*normals = cjk_compatibility_ideograph_fa1d;
			return 1;
		case 0xFA1E:
			*normals = cjk_compatibility_ideograph_fa1e;
			return 1;
		case 0xFA20:
			*normals = cjk_compatibility_ideograph_fa20;
			return 1;
		case 0xFA22:
			*normals = cjk_compatibility_ideograph_fa22;
			return 1;
		case 0xFA25:
			*normals = cjk_compatibility_ideograph_fa25;
			return 1;
		case 0xFA26:
			*normals = cjk_compatibility_ideograph_fa26;
			return 1;
		case 0xFA2A:
			*normals = cjk_compatibility_ideograph_fa2a;
			return 1;
		case 0xFA2B:
			*normals = cjk_compatibility_ideograph_fa2b;
			return 1;
		case 0xFA2C:
			*normals = cjk_compatibility_ideograph_fa2c;
			return 1;
		case 0xFA2D:
			*normals = cjk_compatibility_ideograph_fa2d;
			return 1;
		case 0xFA2E:
			*normals = cjk_compatibility_ideograph_fa2e;
			return 1;
		case 0xFA2F:
			*normals = cjk_compatibility_ideograph_fa2f;
			return 1;
		case 0xFA30:
			*normals = cjk_compatibility_ideograph_fa30;
			return 1;
		case 0xFA31:
			*normals = cjk_compatibility_ideograph_fa31;
			return 1;
		case 0xFA32:
			*normals = cjk_compatibility_ideograph_fa32;
			return 1;
		case 0xFA33:
			*normals = cjk_compatibility_ideograph_fa33;
			return 1;
		case 0xFA34:
			*normals = cjk_compatibility_ideograph_fa34;
			return 1;
		case 0xFA35:
			*normals = cjk_compatibility_ideograph_fa35;
			return 1;
		case 0xFA36:
			*normals = cjk_compatibility_ideograph_fa36;
			return 1;
		case 0xFA37:
			*normals = cjk_compatibility_ideograph_fa37;
			return 1;
		case 0xFA38:
			*normals = cjk_compatibility_ideograph_fa38;
			return 1;
		case 0xFA39:
			*normals = cjk_compatibility_ideograph_fa39;
			return 1;
		case 0xFA3A:
			*normals = cjk_compatibility_ideograph_fa3a;
			return 1;
		case 0xFA3B:
			*normals = cjk_compatibility_ideograph_fa3b;
			return 1;
		case 0xFA3C:
			*normals = cjk_compatibility_ideograph_fa3c;
			return 1;
		case 0xFA3D:
			*normals = cjk_compatibility_ideograph_fa3d;
			return 1;
		case 0xFA3E:
			*normals = cjk_compatibility_ideograph_fa3e;
			return 1;
		case 0xFA3F:
			*normals = cjk_compatibility_ideograph_fa3f;
			return 1;
		case 0xFA40:
			*normals = cjk_compatibility_ideograph_fa40;
			return 1;
		case 0xFA41:
			*normals = cjk_compatibility_ideograph_fa41;
			return 1;
		case 0xFA42:
			*normals = cjk_compatibility_ideograph_fa42;
			return 1;
		case 0xFA43:
			*normals = cjk_compatibility_ideograph_fa43;
			return 1;
		case 0xFA44:
			*normals = cjk_compatibility_ideograph_fa44;
			return 1;
		case 0xFA45:
			*normals = cjk_compatibility_ideograph_fa45;
			return 1;
		case 0xFA46:
			*normals = cjk_compatibility_ideograph_fa46;
			return 1;
		case 0xFA47:
			*normals = cjk_compatibility_ideograph_fa47;
			return 1;
		case 0xFA48:
			*normals = cjk_compatibility_ideograph_fa48;
			return 1;
		case 0xFA49:
			*normals = cjk_compatibility_ideograph_fa49;
			return 1;
		case 0xFA4A:
			*normals = cjk_compatibility_ideograph_fa4a;
			return 1;
		case 0xFA4B:
			*normals = cjk_compatibility_ideograph_fa4b;
			return 1;
		case 0xFA4C:
			*normals = cjk_compatibility_ideograph_fa4c;
			return 1;
		case 0xFA4D:
			*normals = cjk_compatibility_ideograph_fa4d;
			return 1;
		case 0xFA4E:
			*normals = cjk_compatibility_ideograph_fa4e;
			return 1;
		case 0xFA4F:
			*normals = cjk_compatibility_ideograph_fa4f;
			return 1;
		case 0xFA50:
			*normals = cjk_compatibility_ideograph_fa50;
			return 1;
		case 0xFA51:
			*normals = cjk_compatibility_ideograph_fa51;
			return 1;
		case 0xFA52:
			*normals = cjk_compatibility_ideograph_fa52;
			return 1;
		case 0xFA53:
			*normals = cjk_compatibility_ideograph_fa53;
			return 1;
		case 0xFA54:
			*normals = cjk_compatibility_ideograph_fa54;
			return 1;
		case 0xFA55:
			*normals = cjk_compatibility_ideograph_fa55;
			return 1;
		case 0xFA56:
			*normals = cjk_compatibility_ideograph_fa56;
			return 1;
		case 0xFA57:
			*normals = cjk_compatibility_ideograph_fa57;
			return 1;
		case 0xFA58:
			*normals = cjk_compatibility_ideograph_fa58;
			return 1;
		case 0xFA59:
			*normals = cjk_compatibility_ideograph_fa59;
			return 1;
		case 0xFA5A:
			*normals = cjk_compatibility_ideograph_fa5a;
			return 1;
		case 0xFA5B:
			*normals = cjk_compatibility_ideograph_fa5b;
			return 1;
		case 0xFA5C:
			*normals = cjk_compatibility_ideograph_fa5c;
			return 1;
		case 0xFA5D:
			*normals = cjk_compatibility_ideograph_fa5d;
			return 1;
		case 0xFA5E:
			*normals = cjk_compatibility_ideograph_fa5e;
			return 1;
		case 0xFA5F:
			*normals = cjk_compatibility_ideograph_fa5f;
			return 1;
		case 0xFA60:
			*normals = cjk_compatibility_ideograph_fa60;
			return 1;
		case 0xFA61:
			*normals = cjk_compatibility_ideograph_fa61;
			return 1;
		case 0xFA62:
			*normals = cjk_compatibility_ideograph_fa62;
			return 1;
		case 0xFA63:
			*normals = cjk_compatibility_ideograph_fa63;
			return 1;
		case 0xFA64:
			*normals = cjk_compatibility_ideograph_fa64;
			return 1;
		case 0xFA65:
			*normals = cjk_compatibility_ideograph_fa65;
			return 1;
		case 0xFA66:
			*normals = cjk_compatibility_ideograph_fa66;
			return 1;
		case 0xFA67:
			*normals = cjk_compatibility_ideograph_fa67;
			return 1;
		case 0xFA68:
			*normals = cjk_compatibility_ideograph_fa68;
			return 1;
		case 0xFA69:
			*normals = cjk_compatibility_ideograph_fa69;
			return 1;
		case 0xFA6A:
			*normals = cjk_compatibility_ideograph_fa6a;
			return 1;
		case 0xFA6B:
			*normals = cjk_compatibility_ideograph_fa6b;
			return 1;
		case 0xFA6C:
			*normals = cjk_compatibility_ideograph_fa6c;
			return 1;
		case 0xFA6D:
			*normals = cjk_compatibility_ideograph_fa6d;
			return 1;
		case 0xFA70:
			*normals = cjk_compatibility_ideograph_fa70;
			return 1;
		case 0xFA71:
			*normals = cjk_compatibility_ideograph_fa71;
			return 1;
		case 0xFA72:
			*normals = cjk_compatibility_ideograph_fa72;
			return 1;
		case 0xFA73:
			*normals = cjk_compatibility_ideograph_fa73;
			return 1;
		case 0xFA74:
			*normals = cjk_compatibility_ideograph_fa74;
			return 1;
		case 0xFA75:
			*normals = cjk_compatibility_ideograph_fa75;
			return 1;
		case 0xFA76:
			*normals = cjk_compatibility_ideograph_fa76;
			return 1;
		case 0xFA77:
			*normals = cjk_compatibility_ideograph_fa77;
			return 1;
		case 0xFA78:
			*normals = cjk_compatibility_ideograph_fa78;
			return 1;
		case 0xFA79:
			*normals = cjk_compatibility_ideograph_fa79;
			return 1;
		case 0xFA7A:
			*normals = cjk_compatibility_ideograph_fa7a;
			return 1;
		case 0xFA7B:
			*normals = cjk_compatibility_ideograph_fa7b;
			return 1;
		case 0xFA7C:
			*normals = cjk_compatibility_ideograph_fa7c;
			return 1;
		case 0xFA7D:
			*normals = cjk_compatibility_ideograph_fa7d;
			return 1;
		case 0xFA7E:
			*normals = cjk_compatibility_ideograph_fa7e;
			return 1;
		case 0xFA7F:
			*normals = cjk_compatibility_ideograph_fa7f;
			return 1;
		case 0xFA80:
			*normals = cjk_compatibility_ideograph_fa80;
			return 1;
		case 0xFA81:
			*normals = cjk_compatibility_ideograph_fa81;
			return 1;
		case 0xFA82:
			*normals = cjk_compatibility_ideograph_fa82;
			return 1;
		case 0xFA83:
			*normals = cjk_compatibility_ideograph_fa83;
			return 1;
		case 0xFA84:
			*normals = cjk_compatibility_ideograph_fa84;
			return 1;
		case 0xFA85:
			*normals = cjk_compatibility_ideograph_fa85;
			return 1;
		case 0xFA86:
			*normals = cjk_compatibility_ideograph_fa86;
			return 1;
		case 0xFA87:
			*normals = cjk_compatibility_ideograph_fa87;
			return 1;
		case 0xFA88:
			*normals = cjk_compatibility_ideograph_fa88;
			return 1;
		case 0xFA89:
			*normals = cjk_compatibility_ideograph_fa89;
			return 1;
		case 0xFA8A:
			*normals = cjk_compatibility_ideograph_fa8a;
			return 1;
		case 0xFA8B:
			*normals = cjk_compatibility_ideograph_fa8b;
			return 1;
		case 0xFA8C:
			*normals = cjk_compatibility_ideograph_fa8c;
			return 1;
		case 0xFA8D:
			*normals = cjk_compatibility_ideograph_fa8d;
			return 1;
		case 0xFA8E:
			*normals = cjk_compatibility_ideograph_fa8e;
			return 1;
		case 0xFA8F:
			*normals = cjk_compatibility_ideograph_fa8f;
			return 1;
		case 0xFA90:
			*normals = cjk_compatibility_ideograph_fa90;
			return 1;
		case 0xFA91:
			*normals = cjk_compatibility_ideograph_fa91;
			return 1;
		case 0xFA92:
			*normals = cjk_compatibility_ideograph_fa92;
			return 1;
		case 0xFA93:
			*normals = cjk_compatibility_ideograph_fa93;
			return 1;
		case 0xFA94:
			*normals = cjk_compatibility_ideograph_fa94;
			return 1;
		case 0xFA95:
			*normals = cjk_compatibility_ideograph_fa95;
			return 1;
		case 0xFA96:
			*normals = cjk_compatibility_ideograph_fa96;
			return 1;
		case 0xFA97:
			*normals = cjk_compatibility_ideograph_fa97;
			return 1;
		case 0xFA98:
			*normals = cjk_compatibility_ideograph_fa98;
			return 1;
		case 0xFA99:
			*normals = cjk_compatibility_ideograph_fa99;
			return 1;
		case 0xFA9A:
			*normals = cjk_compatibility_ideograph_fa9a;
			return 1;
		case 0xFA9B:
			*normals = cjk_compatibility_ideograph_fa9b;
			return 1;
		case 0xFA9C:
			*normals = cjk_compatibility_ideograph_fa9c;
			return 1;
		case 0xFA9D:
			*normals = cjk_compatibility_ideograph_fa9d;
			return 1;
		case 0xFA9E:
			*normals = cjk_compatibility_ideograph_fa9e;
			return 1;
		case 0xFA9F:
			*normals = cjk_compatibility_ideograph_fa9f;
			return 1;
		case 0xFAA0:
			*normals = cjk_compatibility_ideograph_faa0;
			return 1;
		case 0xFAA1:
			*normals = cjk_compatibility_ideograph_faa1;
			return 1;
		case 0xFAA2:
			*normals = cjk_compatibility_ideograph_faa2;
			return 1;
		case 0xFAA3:
			*normals = cjk_compatibility_ideograph_faa3;
			return 1;
		case 0xFAA4:
			*normals = cjk_compatibility_ideograph_faa4;
			return 1;
		case 0xFAA5:
			*normals = cjk_compatibility_ideograph_faa5;
			return 1;
		case 0xFAA6:
			*normals = cjk_compatibility_ideograph_faa6;
			return 1;
		case 0xFAA7:
			*normals = cjk_compatibility_ideograph_faa7;
			return 1;
		case 0xFAA8:
			*normals = cjk_compatibility_ideograph_faa8;
			return 1;
		case 0xFAA9:
			*normals = cjk_compatibility_ideograph_faa9;
			return 1;
		case 0xFAAA:
			*normals = cjk_compatibility_ideograph_faaa;
			return 1;
		case 0xFAAB:
			*normals = cjk_compatibility_ideograph_faab;
			return 1;
		case 0xFAAC:
			*normals = cjk_compatibility_ideograph_faac;
			return 1;
		case 0xFAAD:
			*normals = cjk_compatibility_ideograph_faad;
			return 1;
		case 0xFAAE:
			*normals = cjk_compatibility_ideograph_faae;
			return 1;
		case 0xFAAF:
			*normals = cjk_compatibility_ideograph_faaf;
			return 1;
		case 0xFAB0:
			*normals = cjk_compatibility_ideograph_fab0;
			return 1;
		case 0xFAB1:
			*normals = cjk_compatibility_ideograph_fab1;
			return 1;
		case 0xFAB2:
			*normals = cjk_compatibility_ideograph_fab2;
			return 1;
		case 0xFAB3:
			*normals = cjk_compatibility_ideograph_fab3;
			return 1;
		case 0xFAB4:
			*normals = cjk_compatibility_ideograph_fab4;
			return 1;
		case 0xFAB5:
			*normals = cjk_compatibility_ideograph_fab5;
			return 1;
		case 0xFAB6:
			*normals = cjk_compatibility_ideograph_fab6;
			return 1;
		case 0xFAB7:
			*normals = cjk_compatibility_ideograph_fab7;
			return 1;
		case 0xFAB8:
			*normals = cjk_compatibility_ideograph_fab8;
			return 1;
		case 0xFAB9:
			*normals = cjk_compatibility_ideograph_fab9;
			return 1;
		case 0xFABA:
			*normals = cjk_compatibility_ideograph_faba;
			return 1;
		case 0xFABB:
			*normals = cjk_compatibility_ideograph_fabb;
			return 1;
		case 0xFABC:
			*normals = cjk_compatibility_ideograph_fabc;
			return 1;
		case 0xFABD:
			*normals = cjk_compatibility_ideograph_fabd;
			return 1;
		case 0xFABE:
			*normals = cjk_compatibility_ideograph_fabe;
			return 1;
		case 0xFABF:
			*normals = cjk_compatibility_ideograph_fabf;
			return 1;
		case 0xFAC0:
			*normals = cjk_compatibility_ideograph_fac0;
			return 1;
		case 0xFAC1:
			*normals = cjk_compatibility_ideograph_fac1;
			return 1;
		case 0xFAC2:
			*normals = cjk_compatibility_ideograph_fac2;
			return 1;
		case 0xFAC3:
			*normals = cjk_compatibility_ideograph_fac3;
			return 1;
		case 0xFAC4:
			*normals = cjk_compatibility_ideograph_fac4;
			return 1;
		case 0xFAC5:
			*normals = cjk_compatibility_ideograph_fac5;
			return 1;
		case 0xFAC6:
			*normals = cjk_compatibility_ideograph_fac6;
			return 1;
		case 0xFAC7:
			*normals = cjk_compatibility_ideograph_fac7;
			return 1;
		case 0xFAC8:
			*normals = cjk_compatibility_ideograph_fac8;
			return 1;
		case 0xFAC9:
			*normals = cjk_compatibility_ideograph_fac9;
			return 1;
		case 0xFACA:
			*normals = cjk_compatibility_ideograph_faca;
			return 1;
		case 0xFACB:
			*normals = cjk_compatibility_ideograph_facb;
			return 1;
		case 0xFACC:
			*normals = cjk_compatibility_ideograph_facc;
			return 1;
		case 0xFACD:
			*normals = cjk_compatibility_ideograph_facd;
			return 1;
		case 0xFACE:
			*normals = cjk_compatibility_ideograph_face;
			return 1;
		case 0xFACF:
			*normals = cjk_compatibility_ideograph_facf;
			return 1;
		case 0xFAD0:
			*normals = cjk_compatibility_ideograph_fad0;
			return 1;
		case 0xFAD1:
			*normals = cjk_compatibility_ideograph_fad1;
			return 1;
		case 0xFAD2:
			*normals = cjk_compatibility_ideograph_fad2;
			return 1;
		case 0xFAD3:
			*normals = cjk_compatibility_ideograph_fad3;
			return 1;
		case 0xFAD4:
			*normals = cjk_compatibility_ideograph_fad4;
			return 1;
		case 0xFAD5:
			*normals = cjk_compatibility_ideograph_fad5;
			return 1;
		case 0xFAD6:
			*normals = cjk_compatibility_ideograph_fad6;
			return 1;
		case 0xFAD7:
			*normals = cjk_compatibility_ideograph_fad7;
			return 1;
		case 0xFAD8:
			*normals = cjk_compatibility_ideograph_fad8;
			return 1;
		case 0xFAD9:
			*normals = cjk_compatibility_ideograph_fad9;
			return 1;
		case 0xFB00:
			*normals = latin_small_ligature_ff;
			return 2;
		case 0xFB01:
			*normals = latin_small_ligature_fi;
			return 2;
		case 0xFB02:
			*normals = latin_small_ligature_fl;
			return 2;
		case 0xFB03:
			*normals = latin_small_ligature_ffi;
			return 3;
		case 0xFB04:
			*normals = latin_small_ligature_ffl;
			return 3;
		case 0xFB05:
			*normals = latin_small_ligature_long_s_t;
			return 2;
		case 0xFB06:
			*normals = latin_small_ligature_st;
			return 2;
		case 0xFB13:
			*normals = armenian_small_ligature_men_now;
			return 2;
		case 0xFB14:
			*normals = armenian_small_ligature_men_ech;
			return 2;
		case 0xFB15:
			*normals = armenian_small_ligature_men_ini;
			return 2;
		case 0xFB16:
			*normals = armenian_small_ligature_vew_now;
			return 2;
		case 0xFB17:
			*normals = armenian_small_ligature_men_xeh;
			return 2;
		case 0xFB1D:
			*normals = hebrew_letter_yod_with_hiriq;
			return 2;
		case 0xFB1F:
			*normals = hebrew_ligature_yiddish_yod_yod_patah;
			return 2;
		case 0xFB20:
			*normals = hebrew_letter_alternative_ayin;
			return 1;
		case 0xFB21:
			*normals = hebrew_letter_wide_alef;
			return 1;
		case 0xFB22:
			*normals = hebrew_letter_wide_dalet;
			return 1;
		case 0xFB23:
			*normals = hebrew_letter_wide_he;
			return 1;
		case 0xFB24:
			*normals = hebrew_letter_wide_kaf;
			return 1;
		case 0xFB25:
			*normals = hebrew_letter_wide_lamed;
			return 1;
		case 0xFB26:
			*normals = hebrew_letter_wide_final_mem;
			return 1;
		case 0xFB27:
			*normals = hebrew_letter_wide_resh;
			return 1;
		case 0xFB28:
			*normals = hebrew_letter_wide_tav;
			return 1;
		case 0xFB29:
			*normals = hebrew_letter_alternative_plus_sign;
			return 1;
		case 0xFB2A:
			*normals = hebrew_letter_shin_with_shin_dot;
			return 2;
		case 0xFB2B:
			*normals = hebrew_letter_shin_with_sin_dot;
			return 2;
		case 0xFB2C:
			*normals = hebrew_letter_shin_with_dagesh_and_shin_dot;
			return 2;
		case 0xFB2D:
			*normals = hebrew_letter_shin_with_dagesh_and_sin_dot;
			return 2;
		case 0xFB2E:
			*normals = hebrew_letter_alef_with_patah;
			return 2;
		case 0xFB2F:
			*normals = hebrew_letter_alef_with_qamats;
			return 2;
		case 0xFB30:
			*normals = hebrew_letter_alef_with_mapiq;
			return 2;
		case 0xFB31:
			*normals = hebrew_letter_bet_with_dagesh;
			return 2;
		case 0xFB32:
			*normals = hebrew_letter_gimel_with_dagesh;
			return 2;
		case 0xFB33:
			*normals = hebrew_letter_dalet_with_dagesh;
			return 2;
		case 0xFB34:
			*normals = hebrew_letter_he_with_mapiq;
			return 2;
		case 0xFB35:
			*normals = hebrew_letter_vav_with_dagesh;
			return 2;
		case 0xFB36:
			*normals = hebrew_letter_zayin_with_dagesh;
			return 2;
		case 0xFB38:
			*normals = hebrew_letter_tet_with_dagesh;
			return 2;
		case 0xFB39:
			*normals = hebrew_letter_yod_with_dagesh;
			return 2;
		case 0xFB3A:
			*normals = hebrew_letter_final_kaf_with_dagesh;
			return 2;
		case 0xFB3B:
			*normals = hebrew_letter_kaf_with_dagesh;
			return 2;
		case 0xFB3C:
			*normals = hebrew_letter_lamed_with_dagesh;
			return 2;
		case 0xFB3E:
			*normals = hebrew_letter_mem_with_dagesh;
			return 2;
		case 0xFB40:
			*normals = hebrew_letter_nun_with_dagesh;
			return 2;
		case 0xFB41:
			*normals = hebrew_letter_samekh_with_dagesh;
			return 2;
		case 0xFB43:
			*normals = hebrew_letter_final_pe_with_dagesh;
			return 2;
		case 0xFB44:
			*normals = hebrew_letter_pe_with_dagesh;
			return 2;
		case 0xFB46:
			*normals = hebrew_letter_tsadi_with_dagesh;
			return 2;
		case 0xFB47:
			*normals = hebrew_letter_qof_with_dagesh;
			return 2;
		case 0xFB48:
			*normals = hebrew_letter_resh_with_dagesh;
			return 2;
		case 0xFB49:
			*normals = hebrew_letter_shin_with_dagesh;
			return 2;
		case 0xFB4A:
			*normals = hebrew_letter_tav_with_dagesh;
			return 2;
		case 0xFB4B:
			*normals = hebrew_letter_vav_with_holam;
			return 2;
		case 0xFB4C:
			*normals = hebrew_letter_bet_with_rafe;
			return 2;
		case 0xFB4D:
			*normals = hebrew_letter_kaf_with_rafe;
			return 2;
		case 0xFB4E:
			*normals = hebrew_letter_pe_with_rafe;
			return 2;
		case 0xFB4F:
			*normals = hebrew_ligature_alef_lamed;
			return 2;
		case 0xFB50:
			*normals = arabic_letter_alef_wasla_isolated_form;
			return 1;
		case 0xFB51:
			*normals = arabic_letter_alef_wasla_final_form;
			return 1;
		case 0xFB52:
			*normals = arabic_letter_beeh_isolated_form;
			return 1;
		case 0xFB53:
			*normals = arabic_letter_beeh_final_form;
			return 1;
		case 0xFB54:
			*normals = arabic_letter_beeh_initial_form;
			return 1;
		case 0xFB55:
			*normals = arabic_letter_beeh_medial_form;
			return 1;
		case 0xFB56:
			*normals = arabic_letter_peh_isolated_form;
			return 1;
		case 0xFB57:
			*normals = arabic_letter_peh_final_form;
			return 1;
		case 0xFB58:
			*normals = arabic_letter_peh_initial_form;
			return 1;
		case 0xFB59:
			*normals = arabic_letter_peh_medial_form;
			return 1;
		case 0xFB5A:
			*normals = arabic_letter_beheh_isolated_form;
			return 1;
		case 0xFB5B:
			*normals = arabic_letter_beheh_final_form;
			return 1;
		case 0xFB5C:
			*normals = arabic_letter_beheh_initial_form;
			return 1;
		case 0xFB5D:
			*normals = arabic_letter_beheh_medial_form;
			return 1;
		case 0xFB5E:
			*normals = arabic_letter_tteheh_isolated_form;
			return 1;
		case 0xFB5F:
			*normals = arabic_letter_tteheh_final_form;
			return 1;
		case 0xFB60:
			*normals = arabic_letter_tteheh_initial_form;
			return 1;
		case 0xFB61:
			*normals = arabic_letter_tteheh_medial_form;
			return 1;
		case 0xFB62:
			*normals = arabic_letter_teheh_isolated_form;
			return 1;
		case 0xFB63:
			*normals = arabic_letter_teheh_final_form;
			return 1;
		case 0xFB64:
			*normals = arabic_letter_teheh_initial_form;
			return 1;
		case 0xFB65:
			*normals = arabic_letter_teheh_medial_form;
			return 1;
		case 0xFB66:
			*normals = arabic_letter_tteh_isolated_form;
			return 1;
		case 0xFB67:
			*normals = arabic_letter_tteh_final_form;
			return 1;
		case 0xFB68:
			*normals = arabic_letter_tteh_initial_form;
			return 1;
		case 0xFB69:
			*normals = arabic_letter_tteh_medial_form;
			return 1;
		case 0xFB6A:
			*normals = arabic_letter_veh_isolated_form;
			return 1;
		case 0xFB6B:
			*normals = arabic_letter_veh_final_form;
			return 1;
		case 0xFB6C:
			*normals = arabic_letter_veh_initial_form;
			return 1;
		case 0xFB6D:
			*normals = arabic_letter_veh_medial_form;
			return 1;
		case 0xFB6E:
			*normals = arabic_letter_peheh_isolated_form;
			return 1;
		case 0xFB6F:
			*normals = arabic_letter_peheh_final_form;
			return 1;
		case 0xFB70:
			*normals = arabic_letter_peheh_initial_form;
			return 1;
		case 0xFB71:
			*normals = arabic_letter_peheh_medial_form;
			return 1;
		case 0xFB72:
			*normals = arabic_letter_dyeh_isolated_form;
			return 1;
		case 0xFB73:
			*normals = arabic_letter_dyeh_final_form;
			return 1;
		case 0xFB74:
			*normals = arabic_letter_dyeh_initial_form;
			return 1;
		case 0xFB75:
			*normals = arabic_letter_dyeh_medial_form;
			return 1;
		case 0xFB76:
			*normals = arabic_letter_nyeh_isolated_form;
			return 1;
		case 0xFB77:
			*normals = arabic_letter_nyeh_final_form;
			return 1;
		case 0xFB78:
			*normals = arabic_letter_nyeh_initial_form;
			return 1;
		case 0xFB79:
			*normals = arabic_letter_nyeh_medial_form;
			return 1;
		case 0xFB7A:
			*normals = arabic_letter_tcheh_isolated_form;
			return 1;
		case 0xFB7B:
			*normals = arabic_letter_tcheh_final_form;
			return 1;
		case 0xFB7C:
			*normals = arabic_letter_tcheh_initial_form;
			return 1;
		case 0xFB7D:
			*normals = arabic_letter_tcheh_medial_form;
			return 1;
		case 0xFB7E:
			*normals = arabic_letter_tcheheh_isolated_form;
			return 1;
		case 0xFB7F:
			*normals = arabic_letter_tcheheh_final_form;
			return 1;
		case 0xFB80:
			*normals = arabic_letter_tcheheh_initial_form;
			return 1;
		case 0xFB81:
			*normals = arabic_letter_tcheheh_medial_form;
			return 1;
		case 0xFB82:
			*normals = arabic_letter_ddahal_isolated_form;
			return 1;
		case 0xFB83:
			*normals = arabic_letter_ddahal_final_form;
			return 1;
		case 0xFB84:
			*normals = arabic_letter_dahal_isolated_form;
			return 1;
		case 0xFB85:
			*normals = arabic_letter_dahal_final_form;
			return 1;
		case 0xFB86:
			*normals = arabic_letter_dul_isolated_form;
			return 1;
		case 0xFB87:
			*normals = arabic_letter_dul_final_form;
			return 1;
		case 0xFB88:
			*normals = arabic_letter_ddal_isolated_form;
			return 1;
		case 0xFB89:
			*normals = arabic_letter_ddal_final_form;
			return 1;
		case 0xFB8A:
			*normals = arabic_letter_jeh_isolated_form;
			return 1;
		case 0xFB8B:
			*normals = arabic_letter_jeh_final_form;
			return 1;
		case 0xFB8C:
			*normals = arabic_letter_rreh_isolated_form;
			return 1;
		case 0xFB8D:
			*normals = arabic_letter_rreh_final_form;
			return 1;
		case 0xFB8E:
			*normals = arabic_letter_keheh_isolated_form;
			return 1;
		case 0xFB8F:
			*normals = arabic_letter_keheh_final_form;
			return 1;
		case 0xFB90:
			*normals = arabic_letter_keheh_initial_form;
			return 1;
		case 0xFB91:
			*normals = arabic_letter_keheh_medial_form;
			return 1;
		case 0xFB92:
			*normals = arabic_letter_gaf_isolated_form;
			return 1;
		case 0xFB93:
			*normals = arabic_letter_gaf_final_form;
			return 1;
		case 0xFB94:
			*normals = arabic_letter_gaf_initial_form;
			return 1;
		case 0xFB95:
			*normals = arabic_letter_gaf_medial_form;
			return 1;
		case 0xFB96:
			*normals = arabic_letter_gueh_isolated_form;
			return 1;
		case 0xFB97:
			*normals = arabic_letter_gueh_final_form;
			return 1;
		case 0xFB98:
			*normals = arabic_letter_gueh_initial_form;
			return 1;
		case 0xFB99:
			*normals = arabic_letter_gueh_medial_form;
			return 1;
		case 0xFB9A:
			*normals = arabic_letter_ngoeh_isolated_form;
			return 1;
		case 0xFB9B:
			*normals = arabic_letter_ngoeh_final_form;
			return 1;
		case 0xFB9C:
			*normals = arabic_letter_ngoeh_initial_form;
			return 1;
		case 0xFB9D:
			*normals = arabic_letter_ngoeh_medial_form;
			return 1;
		case 0xFB9E:
			*normals = arabic_letter_noon_ghunna_isolated_form;
			return 1;
		case 0xFB9F:
			*normals = arabic_letter_noon_ghunna_final_form;
			return 1;
		case 0xFBA0:
			*normals = arabic_letter_rnoon_isolated_form;
			return 1;
		case 0xFBA1:
			*normals = arabic_letter_rnoon_final_form;
			return 1;
		case 0xFBA2:
			*normals = arabic_letter_rnoon_initial_form;
			return 1;
		case 0xFBA3:
			*normals = arabic_letter_rnoon_medial_form;
			return 1;
		case 0xFBA4:
			*normals = arabic_letter_heh_with_yeh_above_isolated_form;
			return 1;
		case 0xFBA5:
			*normals = arabic_letter_heh_with_yeh_above_final_form;
			return 1;
		case 0xFBA6:
			*normals = arabic_letter_heh_goal_isolated_form;
			return 1;
		case 0xFBA7:
			*normals = arabic_letter_heh_goal_final_form;
			return 1;
		case 0xFBA8:
			*normals = arabic_letter_heh_goal_initial_form;
			return 1;
		case 0xFBA9:
			*normals = arabic_letter_heh_goal_medial_form;
			return 1;
		case 0xFBAA:
			*normals = arabic_letter_heh_doachashmee_isolated_form;
			return 1;
		case 0xFBAB:
			*normals = arabic_letter_heh_doachashmee_final_form;
			return 1;
		case 0xFBAC:
			*normals = arabic_letter_heh_doachashmee_initial_form;
			return 1;
		case 0xFBAD:
			*normals = arabic_letter_heh_doachashmee_medial_form;
			return 1;
		case 0xFBAE:
			*normals = arabic_letter_yeh_barree_isolated_form;
			return 1;
		case 0xFBAF:
			*normals = arabic_letter_yeh_barree_final_form;
			return 1;
		case 0xFBB0:
			*normals = arabic_letter_yeh_barree_with_hamza_above_isolated_form;
			return 1;
		case 0xFBB1:
			*normals = arabic_letter_yeh_barree_with_hamza_above_final_form;
			return 1;
		case 0xFBD3:
			*normals = arabic_letter_ng_isolated_form;
			return 1;
		case 0xFBD4:
			*normals = arabic_letter_ng_final_form;
			return 1;
		case 0xFBD5:
			*normals = arabic_letter_ng_initial_form;
			return 1;
		case 0xFBD6:
			*normals = arabic_letter_ng_medial_form;
			return 1;
		case 0xFBD7:
			*normals = arabic_letter_u_isolated_form;
			return 1;
		case 0xFBD8:
			*normals = arabic_letter_u_final_form;
			return 1;
		case 0xFBD9:
			*normals = arabic_letter_oe_isolated_form;
			return 1;
		case 0xFBDA:
			*normals = arabic_letter_oe_final_form;
			return 1;
		case 0xFBDB:
			*normals = arabic_letter_yu_isolated_form;
			return 1;
		case 0xFBDC:
			*normals = arabic_letter_yu_final_form;
			return 1;
		case 0xFBDD:
			*normals = arabic_letter_u_with_hamza_above_isolated_form;
			return 1;
		case 0xFBDE:
			*normals = arabic_letter_ve_isolated_form;
			return 1;
		case 0xFBDF:
			*normals = arabic_letter_ve_final_form;
			return 1;
		case 0xFBE0:
			*normals = arabic_letter_kirghiz_oe_isolated_form;
			return 1;
		case 0xFBE1:
			*normals = arabic_letter_kirghiz_oe_final_form;
			return 1;
		case 0xFBE2:
			*normals = arabic_letter_kirghiz_yu_isolated_form;
			return 1;
		case 0xFBE3:
			*normals = arabic_letter_kirghiz_yu_final_form;
			return 1;
		case 0xFBE4:
			*normals = arabic_letter_e_isolated_form;
			return 1;
		case 0xFBE5:
			*normals = arabic_letter_e_final_form;
			return 1;
		case 0xFBE6:
			*normals = arabic_letter_e_initial_form;
			return 1;
		case 0xFBE7:
			*normals = arabic_letter_e_medial_form;
			return 1;
		case 0xFBE8:
			*normals = arabic_letter_uighur_kazakh_kirghiz_alef_maksura_initial_form;
			return 1;
		case 0xFBE9:
			*normals = arabic_letter_uighur_kazakh_kirghiz_alef_maksura_medial_form;
			return 1;
		case 0xFBEA:
			*normals = arabic_ligature_yeh_with_hamza_above_with_alef_isolated_form;
			return 2;
		case 0xFBEB:
			*normals = arabic_ligature_yeh_with_hamza_above_with_alef_final_form;
			return 2;
		case 0xFBEC:
			*normals = arabic_ligature_yeh_with_hamza_above_with_ae_isolated_form;
			return 2;
		case 0xFBED:
			*normals = arabic_ligature_yeh_with_hamza_above_with_ae_final_form;
			return 2;
		case 0xFBEE:
			*normals = arabic_ligature_yeh_with_hamza_above_with_waw_isolated_form;
			return 2;
		case 0xFBEF:
			*normals = arabic_ligature_yeh_with_hamza_above_with_waw_final_form;
			return 2;
		case 0xFBF0:
			*normals = arabic_ligature_yeh_with_hamza_above_with_u_isolated_form;
			return 2;
		case 0xFBF1:
			*normals = arabic_ligature_yeh_with_hamza_above_with_u_final_form;
			return 2;
		case 0xFBF2:
			*normals = arabic_ligature_yeh_with_hamza_above_with_oe_isolated_form;
			return 2;
		case 0xFBF3:
			*normals = arabic_ligature_yeh_with_hamza_above_with_oe_final_form;
			return 2;
		case 0xFBF4:
			*normals = arabic_ligature_yeh_with_hamza_above_with_yu_isolated_form;
			return 2;
		case 0xFBF5:
			*normals = arabic_ligature_yeh_with_hamza_above_with_yu_final_form;
			return 2;
		case 0xFBF6:
			*normals = arabic_ligature_yeh_with_hamza_above_with_e_isolated_form;
			return 2;
		case 0xFBF7:
			*normals = arabic_ligature_yeh_with_hamza_above_with_e_final_form;
			return 2;
		case 0xFBF8:
			*normals = arabic_ligature_yeh_with_hamza_above_with_e_initial_form;
			return 2;
		case 0xFBF9:
			*normals = arabic_ligature_uighur_kirghiz_yeh_with_hamza_above_with_alef_maksura_isolated_form;
			return 2;
		case 0xFBFA:
			*normals = arabic_ligature_uighur_kirghiz_yeh_with_hamza_above_with_alef_maksura_final_form;
			return 2;
		case 0xFBFB:
			*normals = arabic_ligature_uighur_kirghiz_yeh_with_hamza_above_with_alef_maksura_initial_form;
			return 2;
		case 0xFBFC:
			*normals = arabic_letter_farsi_yeh_isolated_form;
			return 1;
		case 0xFBFD:
			*normals = arabic_letter_farsi_yeh_final_form;
			return 1;
		case 0xFBFE:
			*normals = arabic_letter_farsi_yeh_initial_form;
			return 1;
		case 0xFBFF:
			*normals = arabic_letter_farsi_yeh_medial_form;
			return 1;
		case 0xFC00:
			*normals = arabic_ligature_yeh_with_hamza_above_with_jeem_isolated_form;
			return 2;
		case 0xFC01:
			*normals = arabic_ligature_yeh_with_hamza_above_with_hah_isolated_form;
			return 2;
		case 0xFC02:
			*normals = arabic_ligature_yeh_with_hamza_above_with_meem_isolated_form;
			return 2;
		case 0xFC03:
			*normals = arabic_ligature_yeh_with_hamza_above_with_alef_maksura_isolated_form;
			return 2;
		case 0xFC04:
			*normals = arabic_ligature_yeh_with_hamza_above_with_yeh_isolated_form;
			return 2;
		case 0xFC05:
			*normals = arabic_ligature_beh_with_jeem_isolated_form;
			return 2;
		case 0xFC06:
			*normals = arabic_ligature_beh_with_hah_isolated_form;
			return 2;
		case 0xFC07:
			*normals = arabic_ligature_beh_with_khah_isolated_form;
			return 2;
		case 0xFC08:
			*normals = arabic_ligature_beh_with_meem_isolated_form;
			return 2;
		case 0xFC09:
			*normals = arabic_ligature_beh_with_alef_maksura_isolated_form;
			return 2;
		case 0xFC0A:
			*normals = arabic_ligature_beh_with_yeh_isolated_form;
			return 2;
		case 0xFC0B:
			*normals = arabic_ligature_teh_with_jeem_isolated_form;
			return 2;
		case 0xFC0C:
			*normals = arabic_ligature_teh_with_hah_isolated_form;
			return 2;
		case 0xFC0D:
			*normals = arabic_ligature_teh_with_khah_isolated_form;
			return 2;
		case 0xFC0E:
			*normals = arabic_ligature_teh_with_meem_isolated_form;
			return 2;
		case 0xFC0F:
			*normals = arabic_ligature_teh_with_alef_maksura_isolated_form;
			return 2;
		case 0xFC10:
			*normals = arabic_ligature_teh_with_yeh_isolated_form;
			return 2;
		case 0xFC11:
			*normals = arabic_ligature_theh_with_jeem_isolated_form;
			return 2;
		case 0xFC12:
			*normals = arabic_ligature_theh_with_meem_isolated_form;
			return 2;
		case 0xFC13:
			*normals = arabic_ligature_theh_with_alef_maksura_isolated_form;
			return 2;
		case 0xFC14:
			*normals = arabic_ligature_theh_with_yeh_isolated_form;
			return 2;
		case 0xFC15:
			*normals = arabic_ligature_jeem_with_hah_isolated_form;
			return 2;
		case 0xFC16:
			*normals = arabic_ligature_jeem_with_meem_isolated_form;
			return 2;
		case 0xFC17:
			*normals = arabic_ligature_hah_with_jeem_isolated_form;
			return 2;
		case 0xFC18:
			*normals = arabic_ligature_hah_with_meem_isolated_form;
			return 2;
		case 0xFC19:
			*normals = arabic_ligature_khah_with_jeem_isolated_form;
			return 2;
		case 0xFC1A:
			*normals = arabic_ligature_khah_with_hah_isolated_form;
			return 2;
		case 0xFC1B:
			*normals = arabic_ligature_khah_with_meem_isolated_form;
			return 2;
		case 0xFC1C:
			*normals = arabic_ligature_seen_with_jeem_isolated_form;
			return 2;
		case 0xFC1D:
			*normals = arabic_ligature_seen_with_hah_isolated_form;
			return 2;
		case 0xFC1E:
			*normals = arabic_ligature_seen_with_khah_isolated_form;
			return 2;
		case 0xFC1F:
			*normals = arabic_ligature_seen_with_meem_isolated_form;
			return 2;
		case 0xFC20:
			*normals = arabic_ligature_sad_with_hah_isolated_form;
			return 2;
		case 0xFC21:
			*normals = arabic_ligature_sad_with_meem_isolated_form;
			return 2;
		case 0xFC22:
			*normals = arabic_ligature_dad_with_jeem_isolated_form;
			return 2;
		case 0xFC23:
			*normals = arabic_ligature_dad_with_hah_isolated_form;
			return 2;
		case 0xFC24:
			*normals = arabic_ligature_dad_with_khah_isolated_form;
			return 2;
		case 0xFC25:
			*normals = arabic_ligature_dad_with_meem_isolated_form;
			return 2;
		case 0xFC26:
			*normals = arabic_ligature_tah_with_hah_isolated_form;
			return 2;
		case 0xFC27:
			*normals = arabic_ligature_tah_with_meem_isolated_form;
			return 2;
		case 0xFC28:
			*normals = arabic_ligature_zah_with_meem_isolated_form;
			return 2;
		case 0xFC29:
			*normals = arabic_ligature_ain_with_jeem_isolated_form;
			return 2;
		case 0xFC2A:
			*normals = arabic_ligature_ain_with_meem_isolated_form;
			return 2;
		case 0xFC2B:
			*normals = arabic_ligature_ghain_with_jeem_isolated_form;
			return 2;
		case 0xFC2C:
			*normals = arabic_ligature_ghain_with_meem_isolated_form;
			return 2;
		case 0xFC2D:
			*normals = arabic_ligature_feh_with_jeem_isolated_form;
			return 2;
		case 0xFC2E:
			*normals = arabic_ligature_feh_with_hah_isolated_form;
			return 2;
		case 0xFC2F:
			*normals = arabic_ligature_feh_with_khah_isolated_form;
			return 2;
		case 0xFC30:
			*normals = arabic_ligature_feh_with_meem_isolated_form;
			return 2;
		case 0xFC31:
			*normals = arabic_ligature_feh_with_alef_maksura_isolated_form;
			return 2;
		case 0xFC32:
			*normals = arabic_ligature_feh_with_yeh_isolated_form;
			return 2;
		case 0xFC33:
			*normals = arabic_ligature_qaf_with_hah_isolated_form;
			return 2;
		case 0xFC34:
			*normals = arabic_ligature_qaf_with_meem_isolated_form;
			return 2;
		case 0xFC35:
			*normals = arabic_ligature_qaf_with_alef_maksura_isolated_form;
			return 2;
		case 0xFC36:
			*normals = arabic_ligature_qaf_with_yeh_isolated_form;
			return 2;
		case 0xFC37:
			*normals = arabic_ligature_kaf_with_alef_isolated_form;
			return 2;
		case 0xFC38:
			*normals = arabic_ligature_kaf_with_jeem_isolated_form;
			return 2;
		case 0xFC39:
			*normals = arabic_ligature_kaf_with_hah_isolated_form;
			return 2;
		case 0xFC3A:
			*normals = arabic_ligature_kaf_with_khah_isolated_form;
			return 2;
		case 0xFC3B:
			*normals = arabic_ligature_kaf_with_lam_isolated_form;
			return 2;
		case 0xFC3C:
			*normals = arabic_ligature_kaf_with_meem_isolated_form;
			return 2;
		case 0xFC3D:
			*normals = arabic_ligature_kaf_with_alef_maksura_isolated_form;
			return 2;
		case 0xFC3E:
			*normals = arabic_ligature_kaf_with_yeh_isolated_form;
			return 2;
		case 0xFC3F:
			*normals = arabic_ligature_lam_with_jeem_isolated_form;
			return 2;
		case 0xFC40:
			*normals = arabic_ligature_lam_with_hah_isolated_form;
			return 2;
		case 0xFC41:
			*normals = arabic_ligature_lam_with_khah_isolated_form;
			return 2;
		case 0xFC42:
			*normals = arabic_ligature_lam_with_meem_isolated_form;
			return 2;
		case 0xFC43:
			*normals = arabic_ligature_lam_with_alef_maksura_isolated_form;
			return 2;
		case 0xFC44:
			*normals = arabic_ligature_lam_with_yeh_isolated_form;
			return 2;
		case 0xFC45:
			*normals = arabic_ligature_meem_with_jeem_isolated_form;
			return 2;
		case 0xFC46:
			*normals = arabic_ligature_meem_with_hah_isolated_form;
			return 2;
		case 0xFC47:
			*normals = arabic_ligature_meem_with_khah_isolated_form;
			return 2;
		case 0xFC48:
			*normals = arabic_ligature_meem_with_meem_isolated_form;
			return 2;
		case 0xFC49:
			*normals = arabic_ligature_meem_with_alef_maksura_isolated_form;
			return 2;
		case 0xFC4A:
			*normals = arabic_ligature_meem_with_yeh_isolated_form;
			return 2;
		case 0xFC4B:
			*normals = arabic_ligature_noon_with_jeem_isolated_form;
			return 2;
		case 0xFC4C:
			*normals = arabic_ligature_noon_with_hah_isolated_form;
			return 2;
		case 0xFC4D:
			*normals = arabic_ligature_noon_with_khah_isolated_form;
			return 2;
		case 0xFC4E:
			*normals = arabic_ligature_noon_with_meem_isolated_form;
			return 2;
		case 0xFC4F:
			*normals = arabic_ligature_noon_with_alef_maksura_isolated_form;
			return 2;
		case 0xFC50:
			*normals = arabic_ligature_noon_with_yeh_isolated_form;
			return 2;
		case 0xFC51:
			*normals = arabic_ligature_heh_with_jeem_isolated_form;
			return 2;
		case 0xFC52:
			*normals = arabic_ligature_heh_with_meem_isolated_form;
			return 2;
		case 0xFC53:
			*normals = arabic_ligature_heh_with_alef_maksura_isolated_form;
			return 2;
		case 0xFC54:
			*normals = arabic_ligature_heh_with_yeh_isolated_form;
			return 2;
		case 0xFC55:
			*normals = arabic_ligature_yeh_with_jeem_isolated_form;
			return 2;
		case 0xFC56:
			*normals = arabic_ligature_yeh_with_hah_isolated_form;
			return 2;
		case 0xFC57:
			*normals = arabic_ligature_yeh_with_khah_isolated_form;
			return 2;
		case 0xFC58:
			*normals = arabic_ligature_yeh_with_meem_isolated_form;
			return 2;
		case 0xFC59:
			*normals = arabic_ligature_yeh_with_alef_maksura_isolated_form;
			return 2;
		case 0xFC5A:
			*normals = arabic_ligature_yeh_with_yeh_isolated_form;
			return 2;
		case 0xFC5B:
			*normals = arabic_ligature_thal_with_superscript_alef_isolated_form;
			return 2;
		case 0xFC5C:
			*normals = arabic_ligature_reh_with_superscript_alef_isolated_form;
			return 2;
		case 0xFC5D:
			*normals = arabic_ligature_alef_maksura_with_superscript_alef_isolated_form;
			return 2;
		case 0xFC5E:
			*normals = arabic_ligature_shadda_with_dammatan_isolated_form;
			return 3;
		case 0xFC5F:
			*normals = arabic_ligature_shadda_with_kasratan_isolated_form;
			return 3;
		case 0xFC60:
			*normals = arabic_ligature_shadda_with_fatha_isolated_form;
			return 3;
		case 0xFC61:
			*normals = arabic_ligature_shadda_with_damma_isolated_form;
			return 3;
		case 0xFC62:
			*normals = arabic_ligature_shadda_with_kasra_isolated_form;
			return 3;
		case 0xFC63:
			*normals = arabic_ligature_shadda_with_superscript_alef_isolated_form;
			return 3;
		case 0xFC64:
			*normals = arabic_ligature_yeh_with_hamza_above_with_reh_final_form;
			return 2;
		case 0xFC65:
			*normals = arabic_ligature_yeh_with_hamza_above_with_zain_final_form;
			return 2;
		case 0xFC66:
			*normals = arabic_ligature_yeh_with_hamza_above_with_meem_final_form;
			return 2;
		case 0xFC67:
			*normals = arabic_ligature_yeh_with_hamza_above_with_noon_final_form;
			return 2;
		case 0xFC68:
			*normals = arabic_ligature_yeh_with_hamza_above_with_alef_maksura_final_form;
			return 2;
		case 0xFC69:
			*normals = arabic_ligature_yeh_with_hamza_above_with_yeh_final_form;
			return 2;
		case 0xFC6A:
			*normals = arabic_ligature_beh_with_reh_final_form;
			return 2;
		case 0xFC6B:
			*normals = arabic_ligature_beh_with_zain_final_form;
			return 2;
		case 0xFC6C:
			*normals = arabic_ligature_beh_with_meem_final_form;
			return 2;
		case 0xFC6D:
			*normals = arabic_ligature_beh_with_noon_final_form;
			return 2;
		case 0xFC6E:
			*normals = arabic_ligature_beh_with_alef_maksura_final_form;
			return 2;
		case 0xFC6F:
			*normals = arabic_ligature_beh_with_yeh_final_form;
			return 2;
		case 0xFC70:
			*normals = arabic_ligature_teh_with_reh_final_form;
			return 2;
		case 0xFC71:
			*normals = arabic_ligature_teh_with_zain_final_form;
			return 2;
		case 0xFC72:
			*normals = arabic_ligature_teh_with_meem_final_form;
			return 2;
		case 0xFC73:
			*normals = arabic_ligature_teh_with_noon_final_form;
			return 2;
		case 0xFC74:
			*normals = arabic_ligature_teh_with_alef_maksura_final_form;
			return 2;
		case 0xFC75:
			*normals = arabic_ligature_teh_with_yeh_final_form;
			return 2;
		case 0xFC76:
			*normals = arabic_ligature_theh_with_reh_final_form;
			return 2;
		case 0xFC77:
			*normals = arabic_ligature_theh_with_zain_final_form;
			return 2;
		case 0xFC78:
			*normals = arabic_ligature_theh_with_meem_final_form;
			return 2;
		case 0xFC79:
			*normals = arabic_ligature_theh_with_noon_final_form;
			return 2;
		case 0xFC7A:
			*normals = arabic_ligature_theh_with_alef_maksura_final_form;
			return 2;
		case 0xFC7B:
			*normals = arabic_ligature_theh_with_yeh_final_form;
			return 2;
		case 0xFC7C:
			*normals = arabic_ligature_feh_with_alef_maksura_final_form;
			return 2;
		case 0xFC7D:
			*normals = arabic_ligature_feh_with_yeh_final_form;
			return 2;
		case 0xFC7E:
			*normals = arabic_ligature_qaf_with_alef_maksura_final_form;
			return 2;
		case 0xFC7F:
			*normals = arabic_ligature_qaf_with_yeh_final_form;
			return 2;
		case 0xFC80:
			*normals = arabic_ligature_kaf_with_alef_final_form;
			return 2;
		case 0xFC81:
			*normals = arabic_ligature_kaf_with_lam_final_form;
			return 2;
		case 0xFC82:
			*normals = arabic_ligature_kaf_with_meem_final_form;
			return 2;
		case 0xFC83:
			*normals = arabic_ligature_kaf_with_alef_maksura_final_form;
			return 2;
		case 0xFC84:
			*normals = arabic_ligature_kaf_with_yeh_final_form;
			return 2;
		case 0xFC85:
			*normals = arabic_ligature_lam_with_meem_final_form;
			return 2;
		case 0xFC86:
			*normals = arabic_ligature_lam_with_alef_maksura_final_form;
			return 2;
		case 0xFC87:
			*normals = arabic_ligature_lam_with_yeh_final_form;
			return 2;
		case 0xFC88:
			*normals = arabic_ligature_meem_with_alef_final_form;
			return 2;
		case 0xFC89:
			*normals = arabic_ligature_meem_with_meem_final_form;
			return 2;
		case 0xFC8A:
			*normals = arabic_ligature_noon_with_reh_final_form;
			return 2;
		case 0xFC8B:
			*normals = arabic_ligature_noon_with_zain_final_form;
			return 2;
		case 0xFC8C:
			*normals = arabic_ligature_noon_with_meem_final_form;
			return 2;
		case 0xFC8D:
			*normals = arabic_ligature_noon_with_noon_final_form;
			return 2;
		case 0xFC8E:
			*normals = arabic_ligature_noon_with_alef_maksura_final_form;
			return 2;
		case 0xFC8F:
			*normals = arabic_ligature_noon_with_yeh_final_form;
			return 2;
		case 0xFC90:
			*normals = arabic_ligature_alef_maksura_with_superscript_alef_final_form;
			return 2;
		case 0xFC91:
			*normals = arabic_ligature_yeh_with_reh_final_form;
			return 2;
		case 0xFC92:
			*normals = arabic_ligature_yeh_with_zain_final_form;
			return 2;
		case 0xFC93:
			*normals = arabic_ligature_yeh_with_meem_final_form;
			return 2;
		case 0xFC94:
			*normals = arabic_ligature_yeh_with_noon_final_form;
			return 2;
		case 0xFC95:
			*normals = arabic_ligature_yeh_with_alef_maksura_final_form;
			return 2;
		case 0xFC96:
			*normals = arabic_ligature_yeh_with_yeh_final_form;
			return 2;
		case 0xFC97:
			*normals = arabic_ligature_yeh_with_hamza_above_with_jeem_initial_form;
			return 2;
		case 0xFC98:
			*normals = arabic_ligature_yeh_with_hamza_above_with_hah_initial_form;
			return 2;
		case 0xFC99:
			*normals = arabic_ligature_yeh_with_hamza_above_with_khah_initial_form;
			return 2;
		case 0xFC9A:
			*normals = arabic_ligature_yeh_with_hamza_above_with_meem_initial_form;
			return 2;
		case 0xFC9B:
			*normals = arabic_ligature_yeh_with_hamza_above_with_heh_initial_form;
			return 2;
		case 0xFC9C:
			*normals = arabic_ligature_beh_with_jeem_initial_form;
			return 2;
		case 0xFC9D:
			*normals = arabic_ligature_beh_with_hah_initial_form;
			return 2;
		case 0xFC9E:
			*normals = arabic_ligature_beh_with_khah_initial_form;
			return 2;
		case 0xFC9F:
			*normals = arabic_ligature_beh_with_meem_initial_form;
			return 2;
		case 0xFCA0:
			*normals = arabic_ligature_beh_with_heh_initial_form;
			return 2;
		case 0xFCA1:
			*normals = arabic_ligature_teh_with_jeem_initial_form;
			return 2;
		case 0xFCA2:
			*normals = arabic_ligature_teh_with_hah_initial_form;
			return 2;
		case 0xFCA3:
			*normals = arabic_ligature_teh_with_khah_initial_form;
			return 2;
		case 0xFCA4:
			*normals = arabic_ligature_teh_with_meem_initial_form;
			return 2;
		case 0xFCA5:
			*normals = arabic_ligature_teh_with_heh_initial_form;
			return 2;
		case 0xFCA6:
			*normals = arabic_ligature_theh_with_meem_initial_form;
			return 2;
		case 0xFCA7:
			*normals = arabic_ligature_jeem_with_hah_initial_form;
			return 2;
		case 0xFCA8:
			*normals = arabic_ligature_jeem_with_meem_initial_form;
			return 2;
		case 0xFCA9:
			*normals = arabic_ligature_hah_with_jeem_initial_form;
			return 2;
		case 0xFCAA:
			*normals = arabic_ligature_hah_with_meem_initial_form;
			return 2;
		case 0xFCAB:
			*normals = arabic_ligature_khah_with_jeem_initial_form;
			return 2;
		case 0xFCAC:
			*normals = arabic_ligature_khah_with_meem_initial_form;
			return 2;
		case 0xFCAD:
			*normals = arabic_ligature_seen_with_jeem_initial_form;
			return 2;
		case 0xFCAE:
			*normals = arabic_ligature_seen_with_hah_initial_form;
			return 2;
		case 0xFCAF:
			*normals = arabic_ligature_seen_with_khah_initial_form;
			return 2;
		case 0xFCB0:
			*normals = arabic_ligature_seen_with_meem_initial_form;
			return 2;
		case 0xFCB1:
			*normals = arabic_ligature_sad_with_hah_initial_form;
			return 2;
		case 0xFCB2:
			*normals = arabic_ligature_sad_with_khah_initial_form;
			return 2;
		case 0xFCB3:
			*normals = arabic_ligature_sad_with_meem_initial_form;
			return 2;
		case 0xFCB4:
			*normals = arabic_ligature_dad_with_jeem_initial_form;
			return 2;
		case 0xFCB5:
			*normals = arabic_ligature_dad_with_hah_initial_form;
			return 2;
		case 0xFCB6:
			*normals = arabic_ligature_dad_with_khah_initial_form;
			return 2;
		case 0xFCB7:
			*normals = arabic_ligature_dad_with_meem_initial_form;
			return 2;
		case 0xFCB8:
			*normals = arabic_ligature_tah_with_hah_initial_form;
			return 2;
		case 0xFCB9:
			*normals = arabic_ligature_zah_with_meem_initial_form;
			return 2;
		case 0xFCBA:
			*normals = arabic_ligature_ain_with_jeem_initial_form;
			return 2;
		case 0xFCBB:
			*normals = arabic_ligature_ain_with_meem_initial_form;
			return 2;
		case 0xFCBC:
			*normals = arabic_ligature_ghain_with_jeem_initial_form;
			return 2;
		case 0xFCBD:
			*normals = arabic_ligature_ghain_with_meem_initial_form;
			return 2;
		case 0xFCBE:
			*normals = arabic_ligature_feh_with_jeem_initial_form;
			return 2;
		case 0xFCBF:
			*normals = arabic_ligature_feh_with_hah_initial_form;
			return 2;
		case 0xFCC0:
			*normals = arabic_ligature_feh_with_khah_initial_form;
			return 2;
		case 0xFCC1:
			*normals = arabic_ligature_feh_with_meem_initial_form;
			return 2;
		case 0xFCC2:
			*normals = arabic_ligature_qaf_with_hah_initial_form;
			return 2;
		case 0xFCC3:
			*normals = arabic_ligature_qaf_with_meem_initial_form;
			return 2;
		case 0xFCC4:
			*normals = arabic_ligature_kaf_with_jeem_initial_form;
			return 2;
		case 0xFCC5:
			*normals = arabic_ligature_kaf_with_hah_initial_form;
			return 2;
		case 0xFCC6:
			*normals = arabic_ligature_kaf_with_khah_initial_form;
			return 2;
		case 0xFCC7:
			*normals = arabic_ligature_kaf_with_lam_initial_form;
			return 2;
		case 0xFCC8:
			*normals = arabic_ligature_kaf_with_meem_initial_form;
			return 2;
		case 0xFCC9:
			*normals = arabic_ligature_lam_with_jeem_initial_form;
			return 2;
		case 0xFCCA:
			*normals = arabic_ligature_lam_with_hah_initial_form;
			return 2;
		case 0xFCCB:
			*normals = arabic_ligature_lam_with_khah_initial_form;
			return 2;
		case 0xFCCC:
			*normals = arabic_ligature_lam_with_meem_initial_form;
			return 2;
		case 0xFCCD:
			*normals = arabic_ligature_lam_with_heh_initial_form;
			return 2;
		case 0xFCCE:
			*normals = arabic_ligature_meem_with_jeem_initial_form;
			return 2;
		case 0xFCCF:
			*normals = arabic_ligature_meem_with_hah_initial_form;
			return 2;
		case 0xFCD0:
			*normals = arabic_ligature_meem_with_khah_initial_form;
			return 2;
		case 0xFCD1:
			*normals = arabic_ligature_meem_with_meem_initial_form;
			return 2;
		case 0xFCD2:
			*normals = arabic_ligature_noon_with_jeem_initial_form;
			return 2;
		case 0xFCD3:
			*normals = arabic_ligature_noon_with_hah_initial_form;
			return 2;
		case 0xFCD4:
			*normals = arabic_ligature_noon_with_khah_initial_form;
			return 2;
		case 0xFCD5:
			*normals = arabic_ligature_noon_with_meem_initial_form;
			return 2;
		case 0xFCD6:
			*normals = arabic_ligature_noon_with_heh_initial_form;
			return 2;
		case 0xFCD7:
			*normals = arabic_ligature_heh_with_jeem_initial_form;
			return 2;
		case 0xFCD8:
			*normals = arabic_ligature_heh_with_meem_initial_form;
			return 2;
		case 0xFCD9:
			*normals = arabic_ligature_heh_with_superscript_alef_initial_form;
			return 2;
		case 0xFCDA:
			*normals = arabic_ligature_yeh_with_jeem_initial_form;
			return 2;
		case 0xFCDB:
			*normals = arabic_ligature_yeh_with_hah_initial_form;
			return 2;
		case 0xFCDC:
			*normals = arabic_ligature_yeh_with_khah_initial_form;
			return 2;
		case 0xFCDD:
			*normals = arabic_ligature_yeh_with_meem_initial_form;
			return 2;
		case 0xFCDE:
			*normals = arabic_ligature_yeh_with_heh_initial_form;
			return 2;
		case 0xFCDF:
			*normals = arabic_ligature_yeh_with_hamza_above_with_meem_medial_form;
			return 2;
		case 0xFCE0:
			*normals = arabic_ligature_yeh_with_hamza_above_with_heh_medial_form;
			return 2;
		case 0xFCE1:
			*normals = arabic_ligature_beh_with_meem_medial_form;
			return 2;
		case 0xFCE2:
			*normals = arabic_ligature_beh_with_heh_medial_form;
			return 2;
		case 0xFCE3:
			*normals = arabic_ligature_teh_with_meem_medial_form;
			return 2;
		case 0xFCE4:
			*normals = arabic_ligature_teh_with_heh_medial_form;
			return 2;
		case 0xFCE5:
			*normals = arabic_ligature_theh_with_meem_medial_form;
			return 2;
		case 0xFCE6:
			*normals = arabic_ligature_theh_with_heh_medial_form;
			return 2;
		case 0xFCE7:
			*normals = arabic_ligature_seen_with_meem_medial_form;
			return 2;
		case 0xFCE8:
			*normals = arabic_ligature_seen_with_heh_medial_form;
			return 2;
		case 0xFCE9:
			*normals = arabic_ligature_sheen_with_meem_medial_form;
			return 2;
		case 0xFCEA:
			*normals = arabic_ligature_sheen_with_heh_medial_form;
			return 2;
		case 0xFCEB:
			*normals = arabic_ligature_kaf_with_lam_medial_form;
			return 2;
		case 0xFCEC:
			*normals = arabic_ligature_kaf_with_meem_medial_form;
			return 2;
		case 0xFCED:
			*normals = arabic_ligature_lam_with_meem_medial_form;
			return 2;
		case 0xFCEE:
			*normals = arabic_ligature_noon_with_meem_medial_form;
			return 2;
		case 0xFCEF:
			*normals = arabic_ligature_noon_with_heh_medial_form;
			return 2;
		case 0xFCF0:
			*normals = arabic_ligature_yeh_with_meem_medial_form;
			return 2;
		case 0xFCF1:
			*normals = arabic_ligature_yeh_with_heh_medial_form;
			return 2;
		case 0xFCF2:
			*normals = arabic_ligature_shadda_with_fatha_medial_form;
			return 3;
		case 0xFCF3:
			*normals = arabic_ligature_shadda_with_damma_medial_form;
			return 3;
		case 0xFCF4:
			*normals = arabic_ligature_shadda_with_kasra_medial_form;
			return 3;
		case 0xFCF5:
			*normals = arabic_ligature_tah_with_alef_maksura_isolated_form;
			return 2;
		case 0xFCF6:
			*normals = arabic_ligature_tah_with_yeh_isolated_form;
			return 2;
		case 0xFCF7:
			*normals = arabic_ligature_ain_with_alef_maksura_isolated_form;
			return 2;
		case 0xFCF8:
			*normals = arabic_ligature_ain_with_yeh_isolated_form;
			return 2;
		case 0xFCF9:
			*normals = arabic_ligature_ghain_with_alef_maksura_isolated_form;
			return 2;
		case 0xFCFA:
			*normals = arabic_ligature_ghain_with_yeh_isolated_form;
			return 2;
		case 0xFCFB:
			*normals = arabic_ligature_seen_with_alef_maksura_isolated_form;
			return 2;
		case 0xFCFC:
			*normals = arabic_ligature_seen_with_yeh_isolated_form;
			return 2;
		case 0xFCFD:
			*normals = arabic_ligature_sheen_with_alef_maksura_isolated_form;
			return 2;
		case 0xFCFE:
			*normals = arabic_ligature_sheen_with_yeh_isolated_form;
			return 2;
		case 0xFCFF:
			*normals = arabic_ligature_hah_with_alef_maksura_isolated_form;
			return 2;
		case 0xFD00:
			*normals = arabic_ligature_hah_with_yeh_isolated_form;
			return 2;
		case 0xFD01:
			*normals = arabic_ligature_jeem_with_alef_maksura_isolated_form;
			return 2;
		case 0xFD02:
			*normals = arabic_ligature_jeem_with_yeh_isolated_form;
			return 2;
		case 0xFD03:
			*normals = arabic_ligature_khah_with_alef_maksura_isolated_form;
			return 2;
		case 0xFD04:
			*normals = arabic_ligature_khah_with_yeh_isolated_form;
			return 2;
		case 0xFD05:
			*normals = arabic_ligature_sad_with_alef_maksura_isolated_form;
			return 2;
		case 0xFD06:
			*normals = arabic_ligature_sad_with_yeh_isolated_form;
			return 2;
		case 0xFD07:
			*normals = arabic_ligature_dad_with_alef_maksura_isolated_form;
			return 2;
		case 0xFD08:
			*normals = arabic_ligature_dad_with_yeh_isolated_form;
			return 2;
		case 0xFD09:
			*normals = arabic_ligature_sheen_with_jeem_isolated_form;
			return 2;
		case 0xFD0A:
			*normals = arabic_ligature_sheen_with_hah_isolated_form;
			return 2;
		case 0xFD0B:
			*normals = arabic_ligature_sheen_with_khah_isolated_form;
			return 2;
		case 0xFD0C:
			*normals = arabic_ligature_sheen_with_meem_isolated_form;
			return 2;
		case 0xFD0D:
			*normals = arabic_ligature_sheen_with_reh_isolated_form;
			return 2;
		case 0xFD0E:
			*normals = arabic_ligature_seen_with_reh_isolated_form;
			return 2;
		case 0xFD0F:
			*normals = arabic_ligature_sad_with_reh_isolated_form;
			return 2;
		case 0xFD10:
			*normals = arabic_ligature_dad_with_reh_isolated_form;
			return 2;
		case 0xFD11:
			*normals = arabic_ligature_tah_with_alef_maksura_final_form;
			return 2;
		case 0xFD12:
			*normals = arabic_ligature_tah_with_yeh_final_form;
			return 2;
		case 0xFD13:
			*normals = arabic_ligature_ain_with_alef_maksura_final_form;
			return 2;
		case 0xFD14:
			*normals = arabic_ligature_ain_with_yeh_final_form;
			return 2;
		case 0xFD15:
			*normals = arabic_ligature_ghain_with_alef_maksura_final_form;
			return 2;
		case 0xFD16:
			*normals = arabic_ligature_ghain_with_yeh_final_form;
			return 2;
		case 0xFD17:
			*normals = arabic_ligature_seen_with_alef_maksura_final_form;
			return 2;
		case 0xFD18:
			*normals = arabic_ligature_seen_with_yeh_final_form;
			return 2;
		case 0xFD19:
			*normals = arabic_ligature_sheen_with_alef_maksura_final_form;
			return 2;
		case 0xFD1A:
			*normals = arabic_ligature_sheen_with_yeh_final_form;
			return 2;
		case 0xFD1B:
			*normals = arabic_ligature_hah_with_alef_maksura_final_form;
			return 2;
		case 0xFD1C:
			*normals = arabic_ligature_hah_with_yeh_final_form;
			return 2;
		case 0xFD1D:
			*normals = arabic_ligature_jeem_with_alef_maksura_final_form;
			return 2;
		case 0xFD1E:
			*normals = arabic_ligature_jeem_with_yeh_final_form;
			return 2;
		case 0xFD1F:
			*normals = arabic_ligature_khah_with_alef_maksura_final_form;
			return 2;
		case 0xFD20:
			*normals = arabic_ligature_khah_with_yeh_final_form;
			return 2;
		case 0xFD21:
			*normals = arabic_ligature_sad_with_alef_maksura_final_form;
			return 2;
		case 0xFD22:
			*normals = arabic_ligature_sad_with_yeh_final_form;
			return 2;
		case 0xFD23:
			*normals = arabic_ligature_dad_with_alef_maksura_final_form;
			return 2;
		case 0xFD24:
			*normals = arabic_ligature_dad_with_yeh_final_form;
			return 2;
		case 0xFD25:
			*normals = arabic_ligature_sheen_with_jeem_final_form;
			return 2;
		case 0xFD26:
			*normals = arabic_ligature_sheen_with_hah_final_form;
			return 2;
		case 0xFD27:
			*normals = arabic_ligature_sheen_with_khah_final_form;
			return 2;
		case 0xFD28:
			*normals = arabic_ligature_sheen_with_meem_final_form;
			return 2;
		case 0xFD29:
			*normals = arabic_ligature_sheen_with_reh_final_form;
			return 2;
		case 0xFD2A:
			*normals = arabic_ligature_seen_with_reh_final_form;
			return 2;
		case 0xFD2B:
			*normals = arabic_ligature_sad_with_reh_final_form;
			return 2;
		case 0xFD2C:
			*normals = arabic_ligature_dad_with_reh_final_form;
			return 2;
		case 0xFD2D:
			*normals = arabic_ligature_sheen_with_jeem_initial_form;
			return 2;
		case 0xFD2E:
			*normals = arabic_ligature_sheen_with_hah_initial_form;
			return 2;
		case 0xFD2F:
			*normals = arabic_ligature_sheen_with_khah_initial_form;
			return 2;
		case 0xFD30:
			*normals = arabic_ligature_sheen_with_meem_initial_form;
			return 2;
		case 0xFD31:
			*normals = arabic_ligature_seen_with_heh_initial_form;
			return 2;
		case 0xFD32:
			*normals = arabic_ligature_sheen_with_heh_initial_form;
			return 2;
		case 0xFD33:
			*normals = arabic_ligature_tah_with_meem_initial_form;
			return 2;
		case 0xFD34:
			*normals = arabic_ligature_seen_with_jeem_medial_form;
			return 2;
		case 0xFD35:
			*normals = arabic_ligature_seen_with_hah_medial_form;
			return 2;
		case 0xFD36:
			*normals = arabic_ligature_seen_with_khah_medial_form;
			return 2;
		case 0xFD37:
			*normals = arabic_ligature_sheen_with_jeem_medial_form;
			return 2;
		case 0xFD38:
			*normals = arabic_ligature_sheen_with_hah_medial_form;
			return 2;
		case 0xFD39:
			*normals = arabic_ligature_sheen_with_khah_medial_form;
			return 2;
		case 0xFD3A:
			*normals = arabic_ligature_tah_with_meem_medial_form;
			return 2;
		case 0xFD3B:
			*normals = arabic_ligature_zah_with_meem_medial_form;
			return 2;
		case 0xFD3C:
			*normals = arabic_ligature_alef_with_fathatan_final_form;
			return 2;
		case 0xFD3D:
			*normals = arabic_ligature_alef_with_fathatan_isolated_form;
			return 2;
		case 0xFD50:
			*normals = arabic_ligature_teh_with_jeem_with_meem_initial_form;
			return 3;
		case 0xFD51:
			*normals = arabic_ligature_teh_with_hah_with_jeem_final_form;
			return 3;
		case 0xFD52:
			*normals = arabic_ligature_teh_with_hah_with_jeem_initial_form;
			return 3;
		case 0xFD53:
			*normals = arabic_ligature_teh_with_hah_with_meem_initial_form;
			return 3;
		case 0xFD54:
			*normals = arabic_ligature_teh_with_khah_with_meem_initial_form;
			return 3;
		case 0xFD55:
			*normals = arabic_ligature_teh_with_meem_with_jeem_initial_form;
			return 3;
		case 0xFD56:
			*normals = arabic_ligature_teh_with_meem_with_hah_initial_form;
			return 3;
		case 0xFD57:
			*normals = arabic_ligature_teh_with_meem_with_khah_initial_form;
			return 3;
		case 0xFD58:
			*normals = arabic_ligature_jeem_with_meem_with_hah_final_form;
			return 3;
		case 0xFD59:
			*normals = arabic_ligature_jeem_with_meem_with_hah_initial_form;
			return 3;
		case 0xFD5A:
			*normals = arabic_ligature_hah_with_meem_with_yeh_final_form;
			return 3;
		case 0xFD5B:
			*normals = arabic_ligature_hah_with_meem_with_alef_maksura_final_form;
			return 3;
		case 0xFD5C:
			*normals = arabic_ligature_seen_with_hah_with_jeem_initial_form;
			return 3;
		case 0xFD5D:
			*normals = arabic_ligature_seen_with_jeem_with_hah_initial_form;
			return 3;
		case 0xFD5E:
			*normals = arabic_ligature_seen_with_jeem_with_alef_maksura_final_form;
			return 3;
		case 0xFD5F:
			*normals = arabic_ligature_seen_with_meem_with_hah_final_form;
			return 3;
		case 0xFD60:
			*normals = arabic_ligature_seen_with_meem_with_hah_initial_form;
			return 3;
		case 0xFD61:
			*normals = arabic_ligature_seen_with_meem_with_jeem_initial_form;
			return 3;
		case 0xFD62:
			*normals = arabic_ligature_seen_with_meem_with_meem_final_form;
			return 3;
		case 0xFD63:
			*normals = arabic_ligature_seen_with_meem_with_meem_initial_form;
			return 3;
		case 0xFD64:
			*normals = arabic_ligature_sad_with_hah_with_hah_final_form;
			return 3;
		case 0xFD65:
			*normals = arabic_ligature_sad_with_hah_with_hah_initial_form;
			return 3;
		case 0xFD66:
			*normals = arabic_ligature_sad_with_meem_with_meem_final_form;
			return 3;
		case 0xFD67:
			*normals = arabic_ligature_sheen_with_hah_with_meem_final_form;
			return 3;
		case 0xFD68:
			*normals = arabic_ligature_sheen_with_hah_with_meem_initial_form;
			return 3;
		case 0xFD69:
			*normals = arabic_ligature_sheen_with_jeem_with_yeh_final_form;
			return 3;
		case 0xFD6A:
			*normals = arabic_ligature_sheen_with_meem_with_khah_final_form;
			return 3;
		case 0xFD6B:
			*normals = arabic_ligature_sheen_with_meem_with_khah_initial_form;
			return 3;
		case 0xFD6C:
			*normals = arabic_ligature_sheen_with_meem_with_meem_final_form;
			return 3;
		case 0xFD6D:
			*normals = arabic_ligature_sheen_with_meem_with_meem_initial_form;
			return 3;
		case 0xFD6E:
			*normals = arabic_ligature_dad_with_hah_with_alef_maksura_final_form;
			return 3;
		case 0xFD6F:
			*normals = arabic_ligature_dad_with_khah_with_meem_final_form;
			return 3;
		case 0xFD70:
			*normals = arabic_ligature_dad_with_khah_with_meem_initial_form;
			return 3;
		case 0xFD71:
			*normals = arabic_ligature_tah_with_meem_with_hah_final_form;
			return 3;
		case 0xFD72:
			*normals = arabic_ligature_tah_with_meem_with_hah_initial_form;
			return 3;
		case 0xFD73:
			*normals = arabic_ligature_tah_with_meem_with_meem_initial_form;
			return 3;
		case 0xFD74:
			*normals = arabic_ligature_tah_with_meem_with_yeh_final_form;
			return 3;
		case 0xFD75:
			*normals = arabic_ligature_ain_with_jeem_with_meem_final_form;
			return 3;
		case 0xFD76:
			*normals = arabic_ligature_ain_with_meem_with_meem_final_form;
			return 3;
		case 0xFD77:
			*normals = arabic_ligature_ain_with_meem_with_meem_initial_form;
			return 3;
		case 0xFD78:
			*normals = arabic_ligature_ain_with_meem_with_alef_maksura_final_form;
			return 3;
		case 0xFD79:
			*normals = arabic_ligature_ghain_with_meem_with_meem_final_form;
			return 3;
		case 0xFD7A:
			*normals = arabic_ligature_ghain_with_meem_with_yeh_final_form;
			return 3;
		case 0xFD7B:
			*normals = arabic_ligature_ghain_with_meem_with_alef_maksura_final_form;
			return 3;
		case 0xFD7C:
			*normals = arabic_ligature_feh_with_khah_with_meem_final_form;
			return 3;
		case 0xFD7D:
			*normals = arabic_ligature_feh_with_khah_with_meem_initial_form;
			return 3;
		case 0xFD7E:
			*normals = arabic_ligature_qaf_with_meem_with_hah_final_form;
			return 3;
		case 0xFD7F:
			*normals = arabic_ligature_qaf_with_meem_with_meem_final_form;
			return 3;
		case 0xFD80:
			*normals = arabic_ligature_lam_with_hah_with_meem_final_form;
			return 3;
		case 0xFD81:
			*normals = arabic_ligature_lam_with_hah_with_yeh_final_form;
			return 3;
		case 0xFD82:
			*normals = arabic_ligature_lam_with_hah_with_alef_maksura_final_form;
			return 3;
		case 0xFD83:
			*normals = arabic_ligature_lam_with_jeem_with_jeem_initial_form;
			return 3;
		case 0xFD84:
			*normals = arabic_ligature_lam_with_jeem_with_jeem_final_form;
			return 3;
		case 0xFD85:
			*normals = arabic_ligature_lam_with_khah_with_meem_final_form;
			return 3;
		case 0xFD86:
			*normals = arabic_ligature_lam_with_khah_with_meem_initial_form;
			return 3;
		case 0xFD87:
			*normals = arabic_ligature_lam_with_meem_with_hah_final_form;
			return 3;
		case 0xFD88:
			*normals = arabic_ligature_lam_with_meem_with_hah_initial_form;
			return 3;
		case 0xFD89:
			*normals = arabic_ligature_meem_with_hah_with_jeem_initial_form;
			return 3;
		case 0xFD8A:
			*normals = arabic_ligature_meem_with_hah_with_meem_initial_form;
			return 3;
		case 0xFD8B:
			*normals = arabic_ligature_meem_with_hah_with_yeh_final_form;
			return 3;
		case 0xFD8C:
			*normals = arabic_ligature_meem_with_jeem_with_hah_initial_form;
			return 3;
		case 0xFD8D:
			*normals = arabic_ligature_meem_with_jeem_with_meem_initial_form;
			return 3;
		case 0xFD8E:
			*normals = arabic_ligature_meem_with_khah_with_jeem_initial_form;
			return 3;
		case 0xFD8F:
			*normals = arabic_ligature_meem_with_khah_with_meem_initial_form;
			return 3;
		case 0xFD92:
			*normals = arabic_ligature_meem_with_jeem_with_khah_initial_form;
			return 3;
		case 0xFD93:
			*normals = arabic_ligature_heh_with_meem_with_jeem_initial_form;
			return 3;
		case 0xFD94:
			*normals = arabic_ligature_heh_with_meem_with_meem_initial_form;
			return 3;
		case 0xFD95:
			*normals = arabic_ligature_noon_with_hah_with_meem_initial_form;
			return 3;
		case 0xFD96:
			*normals = arabic_ligature_noon_with_hah_with_alef_maksura_final_form;
			return 3;
		case 0xFD97:
			*normals = arabic_ligature_noon_with_jeem_with_meem_final_form;
			return 3;
		case 0xFD98:
			*normals = arabic_ligature_noon_with_jeem_with_meem_initial_form;
			return 3;
		case 0xFD99:
			*normals = arabic_ligature_noon_with_jeem_with_alef_maksura_final_form;
			return 3;
		case 0xFD9A:
			*normals = arabic_ligature_noon_with_meem_with_yeh_final_form;
			return 3;
		case 0xFD9B:
			*normals = arabic_ligature_noon_with_meem_with_alef_maksura_final_form;
			return 3;
		case 0xFD9C:
			*normals = arabic_ligature_yeh_with_meem_with_meem_final_form;
			return 3;
		case 0xFD9D:
			*normals = arabic_ligature_yeh_with_meem_with_meem_initial_form;
			return 3;
		case 0xFD9E:
			*normals = arabic_ligature_beh_with_khah_with_yeh_final_form;
			return 3;
		case 0xFD9F:
			*normals = arabic_ligature_teh_with_jeem_with_yeh_final_form;
			return 3;
		case 0xFDA0:
			*normals = arabic_ligature_teh_with_jeem_with_alef_maksura_final_form;
			return 3;
		case 0xFDA1:
			*normals = arabic_ligature_teh_with_khah_with_yeh_final_form;
			return 3;
		case 0xFDA2:
			*normals = arabic_ligature_teh_with_khah_with_alef_maksura_final_form;
			return 3;
		case 0xFDA3:
			*normals = arabic_ligature_teh_with_meem_with_yeh_final_form;
			return 3;
		case 0xFDA4:
			*normals = arabic_ligature_teh_with_meem_with_alef_maksura_final_form;
			return 3;
		case 0xFDA5:
			*normals = arabic_ligature_jeem_with_meem_with_yeh_final_form;
			return 3;
		case 0xFDA6:
			*normals = arabic_ligature_jeem_with_hah_with_alef_maksura_final_form;
			return 3;
		case 0xFDA7:
			*normals = arabic_ligature_jeem_with_meem_with_alef_maksura_final_form;
			return 3;
		case 0xFDA8:
			*normals = arabic_ligature_seen_with_khah_with_alef_maksura_final_form;
			return 3;
		case 0xFDA9:
			*normals = arabic_ligature_sad_with_hah_with_yeh_final_form;
			return 3;
		case 0xFDAA:
			*normals = arabic_ligature_sheen_with_hah_with_yeh_final_form;
			return 3;
		case 0xFDAB:
			*normals = arabic_ligature_dad_with_hah_with_yeh_final_form;
			return 3;
		case 0xFDAC:
			*normals = arabic_ligature_lam_with_jeem_with_yeh_final_form;
			return 3;
		case 0xFDAD:
			*normals = arabic_ligature_lam_with_meem_with_yeh_final_form;
			return 3;
		case 0xFDAE:
			*normals = arabic_ligature_yeh_with_hah_with_yeh_final_form;
			return 3;
		case 0xFDAF:
			*normals = arabic_ligature_yeh_with_jeem_with_yeh_final_form;
			return 3;
		case 0xFDB0:
			*normals = arabic_ligature_yeh_with_meem_with_yeh_final_form;
			return 3;
		case 0xFDB1:
			*normals = arabic_ligature_meem_with_meem_with_yeh_final_form;
			return 3;
		case 0xFDB2:
			*normals = arabic_ligature_qaf_with_meem_with_yeh_final_form;
			return 3;
		case 0xFDB3:
			*normals = arabic_ligature_noon_with_hah_with_yeh_final_form;
			return 3;
		case 0xFDB4:
			*normals = arabic_ligature_qaf_with_meem_with_hah_initial_form;
			return 3;
		case 0xFDB5:
			*normals = arabic_ligature_lam_with_hah_with_meem_initial_form;
			return 3;
		case 0xFDB6:
			*normals = arabic_ligature_ain_with_meem_with_yeh_final_form;
			return 3;
		case 0xFDB7:
			*normals = arabic_ligature_kaf_with_meem_with_yeh_final_form;
			return 3;
		case 0xFDB8:
			*normals = arabic_ligature_noon_with_jeem_with_hah_initial_form;
			return 3;
		case 0xFDB9:
			*normals = arabic_ligature_meem_with_khah_with_yeh_final_form;
			return 3;
		case 0xFDBA:
			*normals = arabic_ligature_lam_with_jeem_with_meem_initial_form;
			return 3;
		case 0xFDBB:
			*normals = arabic_ligature_kaf_with_meem_with_meem_final_form;
			return 3;
		case 0xFDBC:
			*normals = arabic_ligature_lam_with_jeem_with_meem_final_form;
			return 3;
		case 0xFDBD:
			*normals = arabic_ligature_noon_with_jeem_with_hah_final_form;
			return 3;
		case 0xFDBE:
			*normals = arabic_ligature_jeem_with_hah_with_yeh_final_form;
			return 3;
		case 0xFDBF:
			*normals = arabic_ligature_hah_with_jeem_with_yeh_final_form;
			return 3;
		case 0xFDC0:
			*normals = arabic_ligature_meem_with_jeem_with_yeh_final_form;
			return 3;
		case 0xFDC1:
			*normals = arabic_ligature_feh_with_meem_with_yeh_final_form;
			return 3;
		case 0xFDC2:
			*normals = arabic_ligature_beh_with_hah_with_yeh_final_form;
			return 3;
		case 0xFDC3:
			*normals = arabic_ligature_kaf_with_meem_with_meem_initial_form;
			return 3;
		case 0xFDC4:
			*normals = arabic_ligature_ain_with_jeem_with_meem_initial_form;
			return 3;
		case 0xFDC5:
			*normals = arabic_ligature_sad_with_meem_with_meem_initial_form;
			return 3;
		case 0xFDC6:
			*normals = arabic_ligature_seen_with_khah_with_yeh_final_form;
			return 3;
		case 0xFDC7:
			*normals = arabic_ligature_noon_with_jeem_with_yeh_final_form;
			return 3;
		case 0xFDF0:
			*normals = arabic_ligature_salla_used_as_koranic_stop_sign_isolated_form;
			return 3;
		case 0xFDF1:
			*normals = arabic_ligature_qala_used_as_koranic_stop_sign_isolated_form;
			return 3;
		case 0xFDF2:
			*normals = arabic_ligature_allah_isolated_form;
			return 4;
		case 0xFDF3:
			*normals = arabic_ligature_akbar_isolated_form;
			return 4;
		case 0xFDF4:
			*normals = arabic_ligature_mohammad_isolated_form;
			return 4;
		case 0xFDF5:
			*normals = arabic_ligature_salam_isolated_form;
			return 4;
		case 0xFDF6:
			*normals = arabic_ligature_rasoul_isolated_form;
			return 4;
		case 0xFDF7:
			*normals = arabic_ligature_alayhe_isolated_form;
			return 4;
		case 0xFDF8:
			*normals = arabic_ligature_wasallam_isolated_form;
			return 4;
		case 0xFDF9:
			*normals = arabic_ligature_salla_isolated_form;
			return 3;
		case 0xFDFA:
			*normals = arabic_ligature_sallallahou_alayhe_wasallam;
			return 18;
		case 0xFDFB:
			*normals = arabic_ligature_jallajalalouhou;
			return 8;
		case 0xFDFC:
			*normals = rial_sign;
			return 4;
		case 0xFE10:
			*normals = presentation_form_for_vertical_comma;
			return 1;
		case 0xFE11:
			*normals = presentation_form_for_vertical_ideographic_comma;
			return 1;
		case 0xFE12:
			*normals = presentation_form_for_vertical_ideographic_full_stop;
			return 1;
		case 0xFE13:
			*normals = presentation_form_for_vertical_colon;
			return 1;
		case 0xFE14:
			*normals = presentation_form_for_vertical_semicolon;
			return 1;
		case 0xFE15:
			*normals = presentation_form_for_vertical_exclamation_mark;
			return 1;
		case 0xFE16:
			*normals = presentation_form_for_vertical_question_mark;
			return 1;
		case 0xFE17:
			*normals = presentation_form_for_vertical_left_white_lenticular_bracket;
			return 1;
		case 0xFE18:
			*normals = presentation_form_for_vertical_right_white_lenticular_brakcet;
			return 1;
		case 0xFE19:
			*normals = presentation_form_for_vertical_horizontal_ellipsis;
			return 1;
		case 0xFE30:
			*normals = presentation_form_for_vertical_two_dot_leader;
			return 1;
		case 0xFE31:
			*normals = presentation_form_for_vertical_em_dash;
			return 1;
		case 0xFE32:
			*normals = presentation_form_for_vertical_en_dash;
			return 1;
		case 0xFE33:
			*normals = presentation_form_for_vertical_low_line;
			return 1;
		case 0xFE34:
			*normals = presentation_form_for_vertical_wavy_low_line;
			return 1;
		case 0xFE35:
			*normals = presentation_form_for_vertical_left_parenthesis;
			return 1;
		case 0xFE36:
			*normals = presentation_form_for_vertical_right_parenthesis;
			return 1;
		case 0xFE37:
			*normals = presentation_form_for_vertical_left_curly_bracket;
			return 1;
		case 0xFE38:
			*normals = presentation_form_for_vertical_right_curly_bracket;
			return 1;
		case 0xFE39:
			*normals = presentation_form_for_vertical_left_tortoise_shell_bracket;
			return 1;
		case 0xFE3A:
			*normals = presentation_form_for_vertical_right_tortoise_shell_bracket;
			return 1;
		case 0xFE3B:
			*normals = presentation_form_for_vertical_left_black_lenticular_bracket;
			return 1;
		case 0xFE3C:
			*normals = presentation_form_for_vertical_right_black_lenticular_bracket;
			return 1;
		case 0xFE3D:
			*normals = presentation_form_for_vertical_left_double_angle_bracket;
			return 1;
		case 0xFE3E:
			*normals = presentation_form_for_vertical_right_double_angle_bracket;
			return 1;
		case 0xFE3F:
			*normals = presentation_form_for_vertical_left_angle_bracket;
			return 1;
		case 0xFE40:
			*normals = presentation_form_for_vertical_right_angle_bracket;
			return 1;
		case 0xFE41:
			*normals = presentation_form_for_vertical_left_corner_bracket;
			return 1;
		case 0xFE42:
			*normals = presentation_form_for_vertical_right_corner_bracket;
			return 1;
		case 0xFE43:
			*normals = presentation_form_for_vertical_left_white_corner_bracket;
			return 1;
		case 0xFE44:
			*normals = presentation_form_for_vertical_right_white_corner_bracket;
			return 1;
		case 0xFE47:
			*normals = presentation_form_for_vertical_left_square_bracket;
			return 1;
		case 0xFE48:
			*normals = presentation_form_for_vertical_right_square_bracket;
			return 1;
		case 0xFE49:
			*normals = dashed_overline;
			return 1;
		case 0xFE4A:
			*normals = centreline_overline;
			return 1;
		case 0xFE4B:
			*normals = wavy_overline;
			return 1;
		case 0xFE4C:
			*normals = double_wavy_overline;
			return 1;
		case 0xFE4D:
			*normals = dashed_low_line;
			return 1;
		case 0xFE4E:
			*normals = centreline_low_line;
			return 1;
		case 0xFE4F:
			*normals = wavy_low_line;
			return 1;
		case 0xFE50:
			*normals = small_comma;
			return 1;
		case 0xFE51:
			*normals = small_ideographic_comma;
			return 1;
		case 0xFE52:
			*normals = small_full_stop;
			return 1;
		case 0xFE54:
			*normals = small_semicolon;
			return 1;
		case 0xFE55:
			*normals = small_colon;
			return 1;
		case 0xFE56:
			*normals = small_question_mark;
			return 1;
		case 0xFE57:
			*normals = small_exclamation_mark;
			return 1;
		case 0xFE58:
			*normals = small_em_dash;
			return 1;
		case 0xFE59:
			*normals = small_left_parenthesis;
			return 1;
		case 0xFE5A:
			*normals = small_right_parenthesis;
			return 1;
		case 0xFE5B:
			*normals = small_left_curly_bracket;
			return 1;
		case 0xFE5C:
			*normals = small_right_curly_bracket;
			return 1;
		case 0xFE5D:
			*normals = small_left_tortoise_shell_bracket;
			return 1;
		case 0xFE5E:
			*normals = small_right_tortoise_shell_bracket;
			return 1;
		case 0xFE5F:
			*normals = small_number_sign;
			return 1;
		case 0xFE60:
			*normals = small_ampersand;
			return 1;
		case 0xFE61:
			*normals = small_asterisk;
			return 1;
		case 0xFE62:
			*normals = small_plus_sign;
			return 1;
		case 0xFE63:
			*normals = small_hyphen_minus;
			return 1;
		case 0xFE64:
			*normals = small_less_than_sign;
			return 1;
		case 0xFE65:
			*normals = small_greater_than_sign;
			return 1;
		case 0xFE66:
			*normals = small_equals_sign;
			return 1;
		case 0xFE68:
			*normals = small_reverse_solidus;
			return 1;
		case 0xFE69:
			*normals = small_dollar_sign;
			return 1;
		case 0xFE6A:
			*normals = small_percent_sign;
			return 1;
		case 0xFE6B:
			*normals = small_commercial_at;
			return 1;
		case 0xFE70:
			*normals = arabic_fathatan_isolated_form;
			return 2;
		case 0xFE71:
			*normals = arabic_tatweel_with_fathatan_above;
			return 2;
		case 0xFE72:
			*normals = arabic_dammatan_isolated_form;
			return 2;
		case 0xFE74:
			*normals = arabic_kasratan_isolated_form;
			return 2;
		case 0xFE76:
			*normals = arabic_fatha_isolated_form;
			return 2;
		case 0xFE77:
			*normals = arabic_fatha_medial_form;
			return 2;
		case 0xFE78:
			*normals = arabic_damma_isolated_form;
			return 2;
		case 0xFE79:
			*normals = arabic_damma_medial_form;
			return 2;
		case 0xFE7A:
			*normals = arabic_kasra_isolated_form;
			return 2;
		case 0xFE7B:
			*normals = arabic_kasra_medial_form;
			return 2;
		case 0xFE7C:
			*normals = arabic_shadda_isolated_form;
			return 2;
		case 0xFE7D:
			*normals = arabic_shadda_medial_form;
			return 2;
		case 0xFE7E:
			*normals = arabic_sukun_isolated_form;
			return 2;
		case 0xFE7F:
			*normals = arabic_sukun_medial_form;
			return 2;
		case 0xFE80:
			*normals = arabic_letter_hamza_isolated_form;
			return 1;
		case 0xFE81:
			*normals = arabic_letter_alef_with_madda_above_isolated_form;
			return 1;
		case 0xFE82:
			*normals = arabic_letter_alef_with_madda_above_final_form;
			return 1;
		case 0xFE83:
			*normals = arabic_letter_alef_with_hamza_above_isolated_form;
			return 1;
		case 0xFE84:
			*normals = arabic_letter_alef_with_hamza_above_final_form;
			return 1;
		case 0xFE85:
			*normals = arabic_letter_waw_with_hamza_above_isolated_form;
			return 1;
		case 0xFE86:
			*normals = arabic_letter_waw_with_hamza_above_final_form;
			return 1;
		case 0xFE87:
			*normals = arabic_letter_alef_with_hamza_below_isolated_form;
			return 1;
		case 0xFE88:
			*normals = arabic_letter_alef_with_hamza_below_final_form;
			return 1;
		case 0xFE89:
			*normals = arabic_letter_yeh_with_hamza_above_isolated_form;
			return 1;
		case 0xFE8A:
			*normals = arabic_letter_yeh_with_hamza_above_final_form;
			return 1;
		case 0xFE8B:
			*normals = arabic_letter_yeh_with_hamza_above_initial_form;
			return 1;
		case 0xFE8C:
			*normals = arabic_letter_yeh_with_hamza_above_medial_form;
			return 1;
		case 0xFE8D:
			*normals = arabic_letter_alef_isolated_form;
			return 1;
		case 0xFE8E:
			*normals = arabic_letter_alef_final_form;
			return 1;
		case 0xFE8F:
			*normals = arabic_letter_beh_isolated_form;
			return 1;
		case 0xFE90:
			*normals = arabic_letter_beh_final_form;
			return 1;
		case 0xFE91:
			*normals = arabic_letter_beh_initial_form;
			return 1;
		case 0xFE92:
			*normals = arabic_letter_beh_medial_form;
			return 1;
		case 0xFE93:
			*normals = arabic_letter_teh_marbuta_isolated_form;
			return 1;
		case 0xFE94:
			*normals = arabic_letter_teh_marbuta_final_form;
			return 1;
		case 0xFE95:
			*normals = arabic_letter_teh_isolated_form;
			return 1;
		case 0xFE96:
			*normals = arabic_letter_teh_final_form;
			return 1;
		case 0xFE97:
			*normals = arabic_letter_teh_initial_form;
			return 1;
		case 0xFE98:
			*normals = arabic_letter_teh_medial_form;
			return 1;
		case 0xFE99:
			*normals = arabic_letter_theh_isolated_form;
			return 1;
		case 0xFE9A:
			*normals = arabic_letter_theh_final_form;
			return 1;
		case 0xFE9B:
			*normals = arabic_letter_theh_initial_form;
			return 1;
		case 0xFE9C:
			*normals = arabic_letter_theh_medial_form;
			return 1;
		case 0xFE9D:
			*normals = arabic_letter_jeem_isolated_form;
			return 1;
		case 0xFE9E:
			*normals = arabic_letter_jeem_final_form;
			return 1;
		case 0xFE9F:
			*normals = arabic_letter_jeem_initial_form;
			return 1;
		case 0xFEA0:
			*normals = arabic_letter_jeem_medial_form;
			return 1;
		case 0xFEA1:
			*normals = arabic_letter_hah_isolated_form;
			return 1;
		case 0xFEA2:
			*normals = arabic_letter_hah_final_form;
			return 1;
		case 0xFEA3:
			*normals = arabic_letter_hah_initial_form;
			return 1;
		case 0xFEA4:
			*normals = arabic_letter_hah_medial_form;
			return 1;
		case 0xFEA5:
			*normals = arabic_letter_khah_isolated_form;
			return 1;
		case 0xFEA6:
			*normals = arabic_letter_khah_final_form;
			return 1;
		case 0xFEA7:
			*normals = arabic_letter_khah_initial_form;
			return 1;
		case 0xFEA8:
			*normals = arabic_letter_khah_medial_form;
			return 1;
		case 0xFEA9:
			*normals = arabic_letter_dal_isolated_form;
			return 1;
		case 0xFEAA:
			*normals = arabic_letter_dal_final_form;
			return 1;
		case 0xFEAB:
			*normals = arabic_letter_thal_isolated_form;
			return 1;
		case 0xFEAC:
			*normals = arabic_letter_thal_final_form;
			return 1;
		case 0xFEAD:
			*normals = arabic_letter_reh_isolated_form;
			return 1;
		case 0xFEAE:
			*normals = arabic_letter_reh_final_form;
			return 1;
		case 0xFEAF:
			*normals = arabic_letter_zain_isolated_form;
			return 1;
		case 0xFEB0:
			*normals = arabic_letter_zain_final_form;
			return 1;
		case 0xFEB1:
			*normals = arabic_letter_seen_isolated_form;
			return 1;
		case 0xFEB2:
			*normals = arabic_letter_seen_final_form;
			return 1;
		case 0xFEB3:
			*normals = arabic_letter_seen_initial_form;
			return 1;
		case 0xFEB4:
			*normals = arabic_letter_seen_medial_form;
			return 1;
		case 0xFEB5:
			*normals = arabic_letter_sheen_isolated_form;
			return 1;
		case 0xFEB6:
			*normals = arabic_letter_sheen_final_form;
			return 1;
		case 0xFEB7:
			*normals = arabic_letter_sheen_initial_form;
			return 1;
		case 0xFEB8:
			*normals = arabic_letter_sheen_medial_form;
			return 1;
		case 0xFEB9:
			*normals = arabic_letter_sad_isolated_form;
			return 1;
		case 0xFEBA:
			*normals = arabic_letter_sad_final_form;
			return 1;
		case 0xFEBB:
			*normals = arabic_letter_sad_initial_form;
			return 1;
		case 0xFEBC:
			*normals = arabic_letter_sad_medial_form;
			return 1;
		case 0xFEBD:
			*normals = arabic_letter_dad_isolated_form;
			return 1;
		case 0xFEBE:
			*normals = arabic_letter_dad_final_form;
			return 1;
		case 0xFEBF:
			*normals = arabic_letter_dad_initial_form;
			return 1;
		case 0xFEC0:
			*normals = arabic_letter_dad_medial_form;
			return 1;
		case 0xFEC1:
			*normals = arabic_letter_tah_isolated_form;
			return 1;
		case 0xFEC2:
			*normals = arabic_letter_tah_final_form;
			return 1;
		case 0xFEC3:
			*normals = arabic_letter_tah_initial_form;
			return 1;
		case 0xFEC4:
			*normals = arabic_letter_tah_medial_form;
			return 1;
		case 0xFEC5:
			*normals = arabic_letter_zah_isolated_form;
			return 1;
		case 0xFEC6:
			*normals = arabic_letter_zah_final_form;
			return 1;
		case 0xFEC7:
			*normals = arabic_letter_zah_initial_form;
			return 1;
		case 0xFEC8:
			*normals = arabic_letter_zah_medial_form;
			return 1;
		case 0xFEC9:
			*normals = arabic_letter_ain_isolated_form;
			return 1;
		case 0xFECA:
			*normals = arabic_letter_ain_final_form;
			return 1;
		case 0xFECB:
			*normals = arabic_letter_ain_initial_form;
			return 1;
		case 0xFECC:
			*normals = arabic_letter_ain_medial_form;
			return 1;
		case 0xFECD:
			*normals = arabic_letter_ghain_isolated_form;
			return 1;
		case 0xFECE:
			*normals = arabic_letter_ghain_final_form;
			return 1;
		case 0xFECF:
			*normals = arabic_letter_ghain_initial_form;
			return 1;
		case 0xFED0:
			*normals = arabic_letter_ghain_medial_form;
			return 1;
		case 0xFED1:
			*normals = arabic_letter_feh_isolated_form;
			return 1;
		case 0xFED2:
			*normals = arabic_letter_feh_final_form;
			return 1;
		case 0xFED3:
			*normals = arabic_letter_feh_initial_form;
			return 1;
		case 0xFED4:
			*normals = arabic_letter_feh_medial_form;
			return 1;
		case 0xFED5:
			*normals = arabic_letter_qaf_isolated_form;
			return 1;
		case 0xFED6:
			*normals = arabic_letter_qaf_final_form;
			return 1;
		case 0xFED7:
			*normals = arabic_letter_qaf_initial_form;
			return 1;
		case 0xFED8:
			*normals = arabic_letter_qaf_medial_form;
			return 1;
		case 0xFED9:
			*normals = arabic_letter_kaf_isolated_form;
			return 1;
		case 0xFEDA:
			*normals = arabic_letter_kaf_final_form;
			return 1;
		case 0xFEDB:
			*normals = arabic_letter_kaf_initial_form;
			return 1;
		case 0xFEDC:
			*normals = arabic_letter_kaf_medial_form;
			return 1;
		case 0xFEDD:
			*normals = arabic_letter_lam_isolated_form;
			return 1;
		case 0xFEDE:
			*normals = arabic_letter_lam_final_form;
			return 1;
		case 0xFEDF:
			*normals = arabic_letter_lam_initial_form;
			return 1;
		case 0xFEE0:
			*normals = arabic_letter_lam_medial_form;
			return 1;
		case 0xFEE1:
			*normals = arabic_letter_meem_isolated_form;
			return 1;
		case 0xFEE2:
			*normals = arabic_letter_meem_final_form;
			return 1;
		case 0xFEE3:
			*normals = arabic_letter_meem_initial_form;
			return 1;
		case 0xFEE4:
			*normals = arabic_letter_meem_medial_form;
			return 1;
		case 0xFEE5:
			*normals = arabic_letter_noon_isolated_form;
			return 1;
		case 0xFEE6:
			*normals = arabic_letter_noon_final_form;
			return 1;
		case 0xFEE7:
			*normals = arabic_letter_noon_initial_form;
			return 1;
		case 0xFEE8:
			*normals = arabic_letter_noon_medial_form;
			return 1;
		case 0xFEE9:
			*normals = arabic_letter_heh_isolated_form;
			return 1;
		case 0xFEEA:
			*normals = arabic_letter_heh_final_form;
			return 1;
		case 0xFEEB:
			*normals = arabic_letter_heh_initial_form;
			return 1;
		case 0xFEEC:
			*normals = arabic_letter_heh_medial_form;
			return 1;
		case 0xFEED:
			*normals = arabic_letter_waw_isolated_form;
			return 1;
		case 0xFEEE:
			*normals = arabic_letter_waw_final_form;
			return 1;
		case 0xFEEF:
			*normals = arabic_letter_alef_maksura_isolated_form;
			return 1;
		case 0xFEF0:
			*normals = arabic_letter_alef_maksura_final_form;
			return 1;
		case 0xFEF1:
			*normals = arabic_letter_yeh_isolated_form;
			return 1;
		case 0xFEF2:
			*normals = arabic_letter_yeh_final_form;
			return 1;
		case 0xFEF3:
			*normals = arabic_letter_yeh_initial_form;
			return 1;
		case 0xFEF4:
			*normals = arabic_letter_yeh_medial_form;
			return 1;
		case 0xFEF5:
			*normals = arabic_ligature_lam_with_alef_with_madda_above_isolated_form;
			return 2;
		case 0xFEF6:
			*normals = arabic_ligature_lam_with_alef_with_madda_above_final_form;
			return 2;
		case 0xFEF7:
			*normals = arabic_ligature_lam_with_alef_with_hamza_above_isolated_form;
			return 2;
		case 0xFEF8:
			*normals = arabic_ligature_lam_with_alef_with_hamza_above_final_form;
			return 2;
		case 0xFEF9:
			*normals = arabic_ligature_lam_with_alef_with_hamza_below_isolated_form;
			return 2;
		case 0xFEFA:
			*normals = arabic_ligature_lam_with_alef_with_hamza_below_final_form;
			return 2;
		case 0xFEFB:
			*normals = arabic_ligature_lam_with_alef_isolated_form;
			return 2;
		case 0xFEFC:
			*normals = arabic_ligature_lam_with_alef_final_form;
			return 2;
		case 0xFF01:
			*normals = fullwidth_exclamation_mark;
			return 1;
		case 0xFF02:
			*normals = fullwidth_quotation_mark;
			return 1;
		case 0xFF03:
			*normals = fullwidth_number_sign;
			return 1;
		case 0xFF04:
			*normals = fullwidth_dollar_sign;
			return 1;
		case 0xFF05:
			*normals = fullwidth_percent_sign;
			return 1;
		case 0xFF06:
			*normals = fullwidth_ampersand;
			return 1;
		case 0xFF07:
			*normals = fullwidth_apostrophe;
			return 1;
		case 0xFF08:
			*normals = fullwidth_left_parenthesis;
			return 1;
		case 0xFF09:
			*normals = fullwidth_right_parenthesis;
			return 1;
		case 0xFF0A:
			*normals = fullwidth_asterisk;
			return 1;
		case 0xFF0B:
			*normals = fullwidth_plus_sign;
			return 1;
		case 0xFF0C:
			*normals = fullwidth_comma;
			return 1;
		case 0xFF0D:
			*normals = fullwidth_hyphen_minus;
			return 1;
		case 0xFF0E:
			*normals = fullwidth_full_stop;
			return 1;
		case 0xFF0F:
			*normals = fullwidth_solidus;
			return 1;
		case 0xFF10:
			*normals = fullwidth_digit_zero;
			return 1;
		case 0xFF11:
			*normals = fullwidth_digit_one;
			return 1;
		case 0xFF12:
			*normals = fullwidth_digit_two;
			return 1;
		case 0xFF13:
			*normals = fullwidth_digit_three;
			return 1;
		case 0xFF14:
			*normals = fullwidth_digit_four;
			return 1;
		case 0xFF15:
			*normals = fullwidth_digit_five;
			return 1;
		case 0xFF16:
			*normals = fullwidth_digit_six;
			return 1;
		case 0xFF17:
			*normals = fullwidth_digit_seven;
			return 1;
		case 0xFF18:
			*normals = fullwidth_digit_eight;
			return 1;
		case 0xFF19:
			*normals = fullwidth_digit_nine;
			return 1;
		case 0xFF1A:
			*normals = fullwidth_colon;
			return 1;
		case 0xFF1B:
			*normals = fullwidth_semicolon;
			return 1;
		case 0xFF1C:
			*normals = fullwidth_less_than_sign;
			return 1;
		case 0xFF1D:
			*normals = fullwidth_equals_sign;
			return 1;
		case 0xFF1E:
			*normals = fullwidth_greater_than_sign;
			return 1;
		case 0xFF1F:
			*normals = fullwidth_question_mark;
			return 1;
		case 0xFF20:
			*normals = fullwidth_commercial_at;
			return 1;
		case 0xFF21:
			*normals = fullwidth_latin_capital_letter_a;
			return 1;
		case 0xFF22:
			*normals = fullwidth_latin_capital_letter_b;
			return 1;
		case 0xFF23:
			*normals = fullwidth_latin_capital_letter_c;
			return 1;
		case 0xFF24:
			*normals = fullwidth_latin_capital_letter_d;
			return 1;
		case 0xFF25:
			*normals = fullwidth_latin_capital_letter_e;
			return 1;
		case 0xFF26:
			*normals = fullwidth_latin_capital_letter_f;
			return 1;
		case 0xFF27:
			*normals = fullwidth_latin_capital_letter_g;
			return 1;
		case 0xFF28:
			*normals = fullwidth_latin_capital_letter_h;
			return 1;
		case 0xFF29:
			*normals = fullwidth_latin_capital_letter_i;
			return 1;
		case 0xFF2A:
			*normals = fullwidth_latin_capital_letter_j;
			return 1;
		case 0xFF2B:
			*normals = fullwidth_latin_capital_letter_k;
			return 1;
		case 0xFF2C:
			*normals = fullwidth_latin_capital_letter_l;
			return 1;
		case 0xFF2D:
			*normals = fullwidth_latin_capital_letter_m;
			return 1;
		case 0xFF2E:
			*normals = fullwidth_latin_capital_letter_n;
			return 1;
		case 0xFF2F:
			*normals = fullwidth_latin_capital_letter_o;
			return 1;
		case 0xFF30:
			*normals = fullwidth_latin_capital_letter_p;
			return 1;
		case 0xFF31:
			*normals = fullwidth_latin_capital_letter_q;
			return 1;
		case 0xFF32:
			*normals = fullwidth_latin_capital_letter_r;
			return 1;
		case 0xFF33:
			*normals = fullwidth_latin_capital_letter_s;
			return 1;
		case 0xFF34:
			*normals = fullwidth_latin_capital_letter_t;
			return 1;
		case 0xFF35:
			*normals = fullwidth_latin_capital_letter_u;
			return 1;
		case 0xFF36:
			*normals = fullwidth_latin_capital_letter_v;
			return 1;
		case 0xFF37:
			*normals = fullwidth_latin_capital_letter_w;
			return 1;
		case 0xFF38:
			*normals = fullwidth_latin_capital_letter_x;
			return 1;
		case 0xFF39:
			*normals = fullwidth_latin_capital_letter_y;
			return 1;
		case 0xFF3A:
			*normals = fullwidth_latin_capital_letter_z;
			return 1;
		case 0xFF3B:
			*normals = fullwidth_left_square_bracket;
			return 1;
		case 0xFF3C:
			*normals = fullwidth_reverse_solidus;
			return 1;
		case 0xFF3D:
			*normals = fullwidth_right_square_bracket;
			return 1;
		case 0xFF3E:
			*normals = fullwidth_circumflex_accent;
			return 1;
		case 0xFF3F:
			*normals = fullwidth_low_line;
			return 1;
		case 0xFF40:
			*normals = fullwidth_grave_accent;
			return 1;
		case 0xFF41:
			*normals = fullwidth_latin_small_letter_a;
			return 1;
		case 0xFF42:
			*normals = fullwidth_latin_small_letter_b;
			return 1;
		case 0xFF43:
			*normals = fullwidth_latin_small_letter_c;
			return 1;
		case 0xFF44:
			*normals = fullwidth_latin_small_letter_d;
			return 1;
		case 0xFF45:
			*normals = fullwidth_latin_small_letter_e;
			return 1;
		case 0xFF46:
			*normals = fullwidth_latin_small_letter_f;
			return 1;
		case 0xFF47:
			*normals = fullwidth_latin_small_letter_g;
			return 1;
		case 0xFF48:
			*normals = fullwidth_latin_small_letter_h;
			return 1;
		case 0xFF49:
			*normals = fullwidth_latin_small_letter_i;
			return 1;
		case 0xFF4A:
			*normals = fullwidth_latin_small_letter_j;
			return 1;
		case 0xFF4B:
			*normals = fullwidth_latin_small_letter_k;
			return 1;
		case 0xFF4C:
			*normals = fullwidth_latin_small_letter_l;
			return 1;
		case 0xFF4D:
			*normals = fullwidth_latin_small_letter_m;
			return 1;
		case 0xFF4E:
			*normals = fullwidth_latin_small_letter_n;
			return 1;
		case 0xFF4F:
			*normals = fullwidth_latin_small_letter_o;
			return 1;
		case 0xFF50:
			*normals = fullwidth_latin_small_letter_p;
			return 1;
		case 0xFF51:
			*normals = fullwidth_latin_small_letter_q;
			return 1;
		case 0xFF52:
			*normals = fullwidth_latin_small_letter_r;
			return 1;
		case 0xFF53:
			*normals = fullwidth_latin_small_letter_s;
			return 1;
		case 0xFF54:
			*normals = fullwidth_latin_small_letter_t;
			return 1;
		case 0xFF55:
			*normals = fullwidth_latin_small_letter_u;
			return 1;
		case 0xFF56:
			*normals = fullwidth_latin_small_letter_v;
			return 1;
		case 0xFF57:
			*normals = fullwidth_latin_small_letter_w;
			return 1;
		case 0xFF58:
			*normals = fullwidth_latin_small_letter_x;
			return 1;
		case 0xFF59:
			*normals = fullwidth_latin_small_letter_y;
			return 1;
		case 0xFF5A:
			*normals = fullwidth_latin_small_letter_z;
			return 1;
		case 0xFF5B:
			*normals = fullwidth_left_curly_bracket;
			return 1;
		case 0xFF5C:
			*normals = fullwidth_vertical_line;
			return 1;
		case 0xFF5D:
			*normals = fullwidth_right_curly_bracket;
			return 1;
		case 0xFF5E:
			*normals = fullwidth_tilde;
			return 1;
		case 0xFF5F:
			*normals = fullwidth_left_white_parenthesis;
			return 1;
		case 0xFF60:
			*normals = fullwidth_right_white_parenthesis;
			return 1;
		case 0xFF61:
			*normals = halfwidth_ideographic_full_stop;
			return 1;
		case 0xFF62:
			*normals = halfwidth_left_corner_bracket;
			return 1;
		case 0xFF63:
			*normals = halfwidth_right_corner_bracket;
			return 1;
		case 0xFF64:
			*normals = halfwidth_ideographic_comma;
			return 1;
		case 0xFF65:
			*normals = halfwidth_katakana_middle_dot;
			return 1;
		case 0xFF66:
			*normals = halfwidth_katakana_letter_wo;
			return 1;
		case 0xFF67:
			*normals = halfwidth_katakana_letter_small_a;
			return 1;
		case 0xFF68:
			*normals = halfwidth_katakana_letter_small_i;
			return 1;
		case 0xFF69:
			*normals = halfwidth_katakana_letter_small_u;
			return 1;
		case 0xFF6A:
			*normals = halfwidth_katakana_letter_small_e;
			return 1;
		case 0xFF6B:
			*normals = halfwidth_katakana_letter_small_o;
			return 1;
		case 0xFF6C:
			*normals = halfwidth_katakana_letter_small_ya;
			return 1;
		case 0xFF6D:
			*normals = halfwidth_katakana_letter_small_yu;
			return 1;
		case 0xFF6E:
			*normals = halfwidth_katakana_letter_small_yo;
			return 1;
		case 0xFF6F:
			*normals = halfwidth_katakana_letter_small_tu;
			return 1;
		case 0xFF70:
			*normals = halfwidth_katakana_hiragana_prolonged_sound_mark;
			return 1;
		case 0xFF71:
			*normals = halfwidth_katakana_letter_a;
			return 1;
		case 0xFF72:
			*normals = halfwidth_katakana_letter_i;
			return 1;
		case 0xFF73:
			*normals = halfwidth_katakana_letter_u;
			return 1;
		case 0xFF74:
			*normals = halfwidth_katakana_letter_e;
			return 1;
		case 0xFF75:
			*normals = halfwidth_katakana_letter_o;
			return 1;
		case 0xFF76:
			*normals = halfwidth_katakana_letter_ka;
			return 1;
		case 0xFF77:
			*normals = halfwidth_katakana_letter_ki;
			return 1;
		case 0xFF78:
			*normals = halfwidth_katakana_letter_ku;
			return 1;
		case 0xFF79:
			*normals = halfwidth_katakana_letter_ke;
			return 1;
		case 0xFF7A:
			*normals = halfwidth_katakana_letter_ko;
			return 1;
		case 0xFF7B:
			*normals = halfwidth_katakana_letter_sa;
			return 1;
		case 0xFF7C:
			*normals = halfwidth_katakana_letter_si;
			return 1;
		case 0xFF7D:
			*normals = halfwidth_katakana_letter_su;
			return 1;
		case 0xFF7E:
			*normals = halfwidth_katakana_letter_se;
			return 1;
		case 0xFF7F:
			*normals = halfwidth_katakana_letter_so;
			return 1;
		case 0xFF80:
			*normals = halfwidth_katakana_letter_ta;
			return 1;
		case 0xFF81:
			*normals = halfwidth_katakana_letter_ti;
			return 1;
		case 0xFF82:
			*normals = halfwidth_katakana_letter_tu;
			return 1;
		case 0xFF83:
			*normals = halfwidth_katakana_letter_te;
			return 1;
		case 0xFF84:
			*normals = halfwidth_katakana_letter_to;
			return 1;
		case 0xFF85:
			*normals = halfwidth_katakana_letter_na;
			return 1;
		case 0xFF86:
			*normals = halfwidth_katakana_letter_ni;
			return 1;
		case 0xFF87:
			*normals = halfwidth_katakana_letter_nu;
			return 1;
		case 0xFF88:
			*normals = halfwidth_katakana_letter_ne;
			return 1;
		case 0xFF89:
			*normals = halfwidth_katakana_letter_no;
			return 1;
		case 0xFF8A:
			*normals = halfwidth_katakana_letter_ha;
			return 1;
		case 0xFF8B:
			*normals = halfwidth_katakana_letter_hi;
			return 1;
		case 0xFF8C:
			*normals = halfwidth_katakana_letter_hu;
			return 1;
		case 0xFF8D:
			*normals = halfwidth_katakana_letter_he;
			return 1;
		case 0xFF8E:
			*normals = halfwidth_katakana_letter_ho;
			return 1;
		case 0xFF8F:
			*normals = halfwidth_katakana_letter_ma;
			return 1;
		case 0xFF90:
			*normals = halfwidth_katakana_letter_mi;
			return 1;
		case 0xFF91:
			*normals = halfwidth_katakana_letter_mu;
			return 1;
		case 0xFF92:
			*normals = halfwidth_katakana_letter_me;
			return 1;
		case 0xFF93:
			*normals = halfwidth_katakana_letter_mo;
			return 1;
		case 0xFF94:
			*normals = halfwidth_katakana_letter_ya;
			return 1;
		case 0xFF95:
			*normals = halfwidth_katakana_letter_yu;
			return 1;
		case 0xFF96:
			*normals = halfwidth_katakana_letter_yo;
			return 1;
		case 0xFF97:
			*normals = halfwidth_katakana_letter_ra;
			return 1;
		case 0xFF98:
			*normals = halfwidth_katakana_letter_ri;
			return 1;
		case 0xFF99:
			*normals = halfwidth_katakana_letter_ru;
			return 1;
		case 0xFF9A:
			*normals = halfwidth_katakana_letter_re;
			return 1;
		case 0xFF9B:
			*normals = halfwidth_katakana_letter_ro;
			return 1;
		case 0xFF9C:
			*normals = halfwidth_katakana_letter_wa;
			return 1;
		case 0xFF9D:
			*normals = halfwidth_katakana_letter_n;
			return 1;
		case 0xFF9E:
			*normals = halfwidth_katakana_voiced_sound_mark;
			return 1;
		case 0xFF9F:
			*normals = halfwidth_katakana_semi_voiced_sound_mark;
			return 1;
		case 0xFFA0:
			*normals = halfwidth_hangul_filler;
			return 1;
		case 0xFFA1:
			*normals = halfwidth_hangul_letter_kiyeok;
			return 1;
		case 0xFFA2:
			*normals = halfwidth_hangul_letter_ssangkiyeok;
			return 1;
		case 0xFFA3:
			*normals = halfwidth_hangul_letter_kiyeok_sios;
			return 1;
		case 0xFFA4:
			*normals = halfwidth_hangul_letter_nieun;
			return 1;
		case 0xFFA5:
			*normals = halfwidth_hangul_letter_nieun_cieuc;
			return 1;
		case 0xFFA6:
			*normals = halfwidth_hangul_letter_nieun_hieuh;
			return 1;
		case 0xFFA7:
			*normals = halfwidth_hangul_letter_tikeut;
			return 1;
		case 0xFFA8:
			*normals = halfwidth_hangul_letter_ssangtikeut;
			return 1;
		case 0xFFA9:
			*normals = halfwidth_hangul_letter_rieul;
			return 1;
		case 0xFFAA:
			*normals = halfwidth_hangul_letter_rieul_kiyeok;
			return 1;
		case 0xFFAB:
			*normals = halfwidth_hangul_letter_rieul_mieum;
			return 1;
		case 0xFFAC:
			*normals = halfwidth_hangul_letter_rieul_pieup;
			return 1;
		case 0xFFAD:
			*normals = halfwidth_hangul_letter_rieul_sios;
			return 1;
		case 0xFFAE:
			*normals = halfwidth_hangul_letter_rieul_thieuth;
			return 1;
		case 0xFFAF:
			*normals = halfwidth_hangul_letter_rieul_phieuph;
			return 1;
		case 0xFFB0:
			*normals = halfwidth_hangul_letter_rieul_hieuh;
			return 1;
		case 0xFFB1:
			*normals = halfwidth_hangul_letter_mieum;
			return 1;
		case 0xFFB2:
			*normals = halfwidth_hangul_letter_pieup;
			return 1;
		case 0xFFB3:
			*normals = halfwidth_hangul_letter_ssangpieup;
			return 1;
		case 0xFFB4:
			*normals = halfwidth_hangul_letter_pieup_sios;
			return 1;
		case 0xFFB5:
			*normals = halfwidth_hangul_letter_sios;
			return 1;
		case 0xFFB6:
			*normals = halfwidth_hangul_letter_ssangsios;
			return 1;
		case 0xFFB7:
			*normals = halfwidth_hangul_letter_ieung;
			return 1;
		case 0xFFB8:
			*normals = halfwidth_hangul_letter_cieuc;
			return 1;
		case 0xFFB9:
			*normals = halfwidth_hangul_letter_ssangcieuc;
			return 1;
		case 0xFFBA:
			*normals = halfwidth_hangul_letter_chieuch;
			return 1;
		case 0xFFBB:
			*normals = halfwidth_hangul_letter_khieukh;
			return 1;
		case 0xFFBC:
			*normals = halfwidth_hangul_letter_thieuth;
			return 1;
		case 0xFFBD:
			*normals = halfwidth_hangul_letter_phieuph;
			return 1;
		case 0xFFBE:
			*normals = halfwidth_hangul_letter_hieuh;
			return 1;
		case 0xFFC2:
			*normals = halfwidth_hangul_letter_a;
			return 1;
		case 0xFFC3:
			*normals = halfwidth_hangul_letter_ae;
			return 1;
		case 0xFFC4:
			*normals = halfwidth_hangul_letter_ya;
			return 1;
		case 0xFFC5:
			*normals = halfwidth_hangul_letter_yae;
			return 1;
		case 0xFFC6:
			*normals = halfwidth_hangul_letter_eo;
			return 1;
		case 0xFFC7:
			*normals = halfwidth_hangul_letter_e;
			return 1;
		case 0xFFCA:
			*normals = halfwidth_hangul_letter_yeo;
			return 1;
		case 0xFFCB:
			*normals = halfwidth_hangul_letter_ye;
			return 1;
		case 0xFFCC:
			*normals = halfwidth_hangul_letter_o;
			return 1;
		case 0xFFCD:
			*normals = halfwidth_hangul_letter_wa;
			return 1;
		case 0xFFCE:
			*normals = halfwidth_hangul_letter_wae;
			return 1;
		case 0xFFCF:
			*normals = halfwidth_hangul_letter_oe;
			return 1;
		case 0xFFD2:
			*normals = halfwidth_hangul_letter_yo;
			return 1;
		case 0xFFD3:
			*normals = halfwidth_hangul_letter_u;
			return 1;
		case 0xFFD4:
			*normals = halfwidth_hangul_letter_weo;
			return 1;
		case 0xFFD5:
			*normals = halfwidth_hangul_letter_we;
			return 1;
		case 0xFFD6:
			*normals = halfwidth_hangul_letter_wi;
			return 1;
		case 0xFFD7:
			*normals = halfwidth_hangul_letter_yu;
			return 1;
		case 0xFFDA:
			*normals = halfwidth_hangul_letter_eu;
			return 1;
		case 0xFFDB:
			*normals = halfwidth_hangul_letter_yi;
			return 1;
		case 0xFFDC:
			*normals = halfwidth_hangul_letter_i;
			return 1;
		case 0xFFE0:
			*normals = fullwidth_cent_sign;
			return 1;
		case 0xFFE1:
			*normals = fullwidth_pound_sign;
			return 1;
		case 0xFFE2:
			*normals = fullwidth_not_sign;
			return 1;
		case 0xFFE3:
			*normals = fullwidth_macron;
			return 1;
		case 0xFFE4:
			*normals = fullwidth_broken_bar;
			return 1;
		case 0xFFE5:
			*normals = fullwidth_yen_sign;
			return 1;
		case 0xFFE6:
			*normals = fullwidth_won_sign;
			return 1;
		case 0xFFE8:
			*normals = halfwidth_forms_light_vertical;
			return 1;
		case 0xFFE9:
			*normals = halfwidth_leftwards_arrow;
			return 1;
		case 0xFFEA:
			*normals = halfwidth_upwards_arrow;
			return 1;
		case 0xFFEB:
			*normals = halfwidth_rightwards_arrow;
			return 1;
		case 0xFFEC:
			*normals = halfwidth_downwards_arrow;
			return 1;
		case 0xFFED:
			*normals = halfwidth_black_square;
			return 1;
		case 0xFFEE:
			*normals = halfwidth_white_circle;
			return 1;
		case 0x1109A:
			*normals = kaithi_letter_dddha;
			return 2;
		case 0x1109C:
			*normals = kaithi_letter_rha;
			return 2;
		case 0x110AB:
			*normals = kaithi_letter_va;
			return 2;
		case 0x1112E:
			*normals = chakma_vowel_sign_o;
			return 2;
		case 0x1112F:
			*normals = chakma_vowel_sign_au;
			return 2;
		case 0x1134B:
			*normals = grantha_vowel_sign_oo;
			return 2;
		case 0x1134C:
			*normals = grantha_vowel_sign_au;
			return 2;
		case 0x114BB:
			*normals = tirhuta_vowel_sign_ai;
			return 2;
		case 0x114BC:
			*normals = tirhuta_vowel_sign_o;
			return 2;
		case 0x114BE:
			*normals = tirhuta_vowel_sign_au;
			return 2;
		case 0x115BA:
			*normals = siddham_vowel_sign_o;
			return 2;
		case 0x115BB:
			*normals = siddham_vowel_sign_au;
			return 2;
		case 0x11938:
			*normals = dives_akuru_vowel_sign_o;
			return 2;
		case 0x1D15E:
			*normals = musical_symbol_half_note;
			return 2;
		case 0x1D15F:
			*normals = musical_symbol_quarter_note;
			return 2;
		case 0x1D160:
			*normals = musical_symbol_eighth_note;
			return 2;
		case 0x1D161:
			*normals = musical_symbol_sixteenth_note;
			return 2;
		case 0x1D162:
			*normals = musical_symbol_thirty_second_note;
			return 2;
		case 0x1D163:
			*normals = musical_symbol_sixty_fourth_note;
			return 2;
		case 0x1D164:
			*normals = musical_symbol_one_hundred_twenty_eighth_note;
			return 2;
		case 0x1D1BB:
			*normals = musical_symbol_minima;
			return 2;
		case 0x1D1BC:
			*normals = musical_symbol_minima_black;
			return 2;
		case 0x1D1BD:
			*normals = musical_symbol_semiminima_white;
			return 2;
		case 0x1D1BE:
			*normals = musical_symbol_semiminima_black;
			return 2;
		case 0x1D1BF:
			*normals = musical_symbol_fusa_white;
			return 2;
		case 0x1D1C0:
			*normals = musical_symbol_fusa_black;
			return 2;
		case 0x1D400:
			*normals = mathematical_bold_capital_a;
			return 1;
		case 0x1D401:
			*normals = mathematical_bold_capital_b;
			return 1;
		case 0x1D402:
			*normals = mathematical_bold_capital_c;
			return 1;
		case 0x1D403:
			*normals = mathematical_bold_capital_d;
			return 1;
		case 0x1D404:
			*normals = mathematical_bold_capital_e;
			return 1;
		case 0x1D405:
			*normals = mathematical_bold_capital_f;
			return 1;
		case 0x1D406:
			*normals = mathematical_bold_capital_g;
			return 1;
		case 0x1D407:
			*normals = mathematical_bold_capital_h;
			return 1;
		case 0x1D408:
			*normals = mathematical_bold_capital_i;
			return 1;
		case 0x1D409:
			*normals = mathematical_bold_capital_j;
			return 1;
		case 0x1D40A:
			*normals = mathematical_bold_capital_k;
			return 1;
		case 0x1D40B:
			*normals = mathematical_bold_capital_l;
			return 1;
		case 0x1D40C:
			*normals = mathematical_bold_capital_m;
			return 1;
		case 0x1D40D:
			*normals = mathematical_bold_capital_n;
			return 1;
		case 0x1D40E:
			*normals = mathematical_bold_capital_o;
			return 1;
		case 0x1D40F:
			*normals = mathematical_bold_capital_p;
			return 1;
		case 0x1D410:
			*normals = mathematical_bold_capital_q;
			return 1;
		case 0x1D411:
			*normals = mathematical_bold_capital_r;
			return 1;
		case 0x1D412:
			*normals = mathematical_bold_capital_s;
			return 1;
		case 0x1D413:
			*normals = mathematical_bold_capital_t;
			return 1;
		case 0x1D414:
			*normals = mathematical_bold_capital_u;
			return 1;
		case 0x1D415:
			*normals = mathematical_bold_capital_v;
			return 1;
		case 0x1D416:
			*normals = mathematical_bold_capital_w;
			return 1;
		case 0x1D417:
			*normals = mathematical_bold_capital_x;
			return 1;
		case 0x1D418:
			*normals = mathematical_bold_capital_y;
			return 1;
		case 0x1D419:
			*normals = mathematical_bold_capital_z;
			return 1;
		case 0x1D41A:
			*normals = mathematical_bold_small_a;
			return 1;
		case 0x1D41B:
			*normals = mathematical_bold_small_b;
			return 1;
		case 0x1D41C:
			*normals = mathematical_bold_small_c;
			return 1;
		case 0x1D41D:
			*normals = mathematical_bold_small_d;
			return 1;
		case 0x1D41E:
			*normals = mathematical_bold_small_e;
			return 1;
		case 0x1D41F:
			*normals = mathematical_bold_small_f;
			return 1;
		case 0x1D420:
			*normals = mathematical_bold_small_g;
			return 1;
		case 0x1D421:
			*normals = mathematical_bold_small_h;
			return 1;
		case 0x1D422:
			*normals = mathematical_bold_small_i;
			return 1;
		case 0x1D423:
			*normals = mathematical_bold_small_j;
			return 1;
		case 0x1D424:
			*normals = mathematical_bold_small_k;
			return 1;
		case 0x1D425:
			*normals = mathematical_bold_small_l;
			return 1;
		case 0x1D426:
			*normals = mathematical_bold_small_m;
			return 1;
		case 0x1D427:
			*normals = mathematical_bold_small_n;
			return 1;
		case 0x1D428:
			*normals = mathematical_bold_small_o;
			return 1;
		case 0x1D429:
			*normals = mathematical_bold_small_p;
			return 1;
		case 0x1D42A:
			*normals = mathematical_bold_small_q;
			return 1;
		case 0x1D42B:
			*normals = mathematical_bold_small_r;
			return 1;
		case 0x1D42C:
			*normals = mathematical_bold_small_s;
			return 1;
		case 0x1D42D:
			*normals = mathematical_bold_small_t;
			return 1;
		case 0x1D42E:
			*normals = mathematical_bold_small_u;
			return 1;
		case 0x1D42F:
			*normals = mathematical_bold_small_v;
			return 1;
		case 0x1D430:
			*normals = mathematical_bold_small_w;
			return 1;
		case 0x1D431:
			*normals = mathematical_bold_small_x;
			return 1;
		case 0x1D432:
			*normals = mathematical_bold_small_y;
			return 1;
		case 0x1D433:
			*normals = mathematical_bold_small_z;
			return 1;
		case 0x1D434:
			*normals = mathematical_italic_capital_a;
			return 1;
		case 0x1D435:
			*normals = mathematical_italic_capital_b;
			return 1;
		case 0x1D436:
			*normals = mathematical_italic_capital_c;
			return 1;
		case 0x1D437:
			*normals = mathematical_italic_capital_d;
			return 1;
		case 0x1D438:
			*normals = mathematical_italic_capital_e;
			return 1;
		case 0x1D439:
			*normals = mathematical_italic_capital_f;
			return 1;
		case 0x1D43A:
			*normals = mathematical_italic_capital_g;
			return 1;
		case 0x1D43B:
			*normals = mathematical_italic_capital_h;
			return 1;
		case 0x1D43C:
			*normals = mathematical_italic_capital_i;
			return 1;
		case 0x1D43D:
			*normals = mathematical_italic_capital_j;
			return 1;
		case 0x1D43E:
			*normals = mathematical_italic_capital_k;
			return 1;
		case 0x1D43F:
			*normals = mathematical_italic_capital_l;
			return 1;
		case 0x1D440:
			*normals = mathematical_italic_capital_m;
			return 1;
		case 0x1D441:
			*normals = mathematical_italic_capital_n;
			return 1;
		case 0x1D442:
			*normals = mathematical_italic_capital_o;
			return 1;
		case 0x1D443:
			*normals = mathematical_italic_capital_p;
			return 1;
		case 0x1D444:
			*normals = mathematical_italic_capital_q;
			return 1;
		case 0x1D445:
			*normals = mathematical_italic_capital_r;
			return 1;
		case 0x1D446:
			*normals = mathematical_italic_capital_s;
			return 1;
		case 0x1D447:
			*normals = mathematical_italic_capital_t;
			return 1;
		case 0x1D448:
			*normals = mathematical_italic_capital_u;
			return 1;
		case 0x1D449:
			*normals = mathematical_italic_capital_v;
			return 1;
		case 0x1D44A:
			*normals = mathematical_italic_capital_w;
			return 1;
		case 0x1D44B:
			*normals = mathematical_italic_capital_x;
			return 1;
		case 0x1D44C:
			*normals = mathematical_italic_capital_y;
			return 1;
		case 0x1D44D:
			*normals = mathematical_italic_capital_z;
			return 1;
		case 0x1D44E:
			*normals = mathematical_italic_small_a;
			return 1;
		case 0x1D44F:
			*normals = mathematical_italic_small_b;
			return 1;
		case 0x1D450:
			*normals = mathematical_italic_small_c;
			return 1;
		case 0x1D451:
			*normals = mathematical_italic_small_d;
			return 1;
		case 0x1D452:
			*normals = mathematical_italic_small_e;
			return 1;
		case 0x1D453:
			*normals = mathematical_italic_small_f;
			return 1;
		case 0x1D454:
			*normals = mathematical_italic_small_g;
			return 1;
		case 0x1D456:
			*normals = mathematical_italic_small_i;
			return 1;
		case 0x1D457:
			*normals = mathematical_italic_small_j;
			return 1;
		case 0x1D458:
			*normals = mathematical_italic_small_k;
			return 1;
		case 0x1D459:
			*normals = mathematical_italic_small_l;
			return 1;
		case 0x1D45A:
			*normals = mathematical_italic_small_m;
			return 1;
		case 0x1D45B:
			*normals = mathematical_italic_small_n;
			return 1;
		case 0x1D45C:
			*normals = mathematical_italic_small_o;
			return 1;
		case 0x1D45D:
			*normals = mathematical_italic_small_p;
			return 1;
		case 0x1D45E:
			*normals = mathematical_italic_small_q;
			return 1;
		case 0x1D45F:
			*normals = mathematical_italic_small_r;
			return 1;
		case 0x1D460:
			*normals = mathematical_italic_small_s;
			return 1;
		case 0x1D461:
			*normals = mathematical_italic_small_t;
			return 1;
		case 0x1D462:
			*normals = mathematical_italic_small_u;
			return 1;
		case 0x1D463:
			*normals = mathematical_italic_small_v;
			return 1;
		case 0x1D464:
			*normals = mathematical_italic_small_w;
			return 1;
		case 0x1D465:
			*normals = mathematical_italic_small_x;
			return 1;
		case 0x1D466:
			*normals = mathematical_italic_small_y;
			return 1;
		case 0x1D467:
			*normals = mathematical_italic_small_z;
			return 1;
		case 0x1D468:
			*normals = mathematical_bold_italic_capital_a;
			return 1;
		case 0x1D469:
			*normals = mathematical_bold_italic_capital_b;
			return 1;
		case 0x1D46A:
			*normals = mathematical_bold_italic_capital_c;
			return 1;
		case 0x1D46B:
			*normals = mathematical_bold_italic_capital_d;
			return 1;
		case 0x1D46C:
			*normals = mathematical_bold_italic_capital_e;
			return 1;
		case 0x1D46D:
			*normals = mathematical_bold_italic_capital_f;
			return 1;
		case 0x1D46E:
			*normals = mathematical_bold_italic_capital_g;
			return 1;
		case 0x1D46F:
			*normals = mathematical_bold_italic_capital_h;
			return 1;
		case 0x1D470:
			*normals = mathematical_bold_italic_capital_i;
			return 1;
		case 0x1D471:
			*normals = mathematical_bold_italic_capital_j;
			return 1;
		case 0x1D472:
			*normals = mathematical_bold_italic_capital_k;
			return 1;
		case 0x1D473:
			*normals = mathematical_bold_italic_capital_l;
			return 1;
		case 0x1D474:
			*normals = mathematical_bold_italic_capital_m;
			return 1;
		case 0x1D475:
			*normals = mathematical_bold_italic_capital_n;
			return 1;
		case 0x1D476:
			*normals = mathematical_bold_italic_capital_o;
			return 1;
		case 0x1D477:
			*normals = mathematical_bold_italic_capital_p;
			return 1;
		case 0x1D478:
			*normals = mathematical_bold_italic_capital_q;
			return 1;
		case 0x1D479:
			*normals = mathematical_bold_italic_capital_r;
			return 1;
		case 0x1D47A:
			*normals = mathematical_bold_italic_capital_s;
			return 1;
		case 0x1D47B:
			*normals = mathematical_bold_italic_capital_t;
			return 1;
		case 0x1D47C:
			*normals = mathematical_bold_italic_capital_u;
			return 1;
		case 0x1D47D:
			*normals = mathematical_bold_italic_capital_v;
			return 1;
		case 0x1D47E:
			*normals = mathematical_bold_italic_capital_w;
			return 1;
		case 0x1D47F:
			*normals = mathematical_bold_italic_capital_x;
			return 1;
		case 0x1D480:
			*normals = mathematical_bold_italic_capital_y;
			return 1;
		case 0x1D481:
			*normals = mathematical_bold_italic_capital_z;
			return 1;
		case 0x1D482:
			*normals = mathematical_bold_italic_small_a;
			return 1;
		case 0x1D483:
			*normals = mathematical_bold_italic_small_b;
			return 1;
		case 0x1D484:
			*normals = mathematical_bold_italic_small_c;
			return 1;
		case 0x1D485:
			*normals = mathematical_bold_italic_small_d;
			return 1;
		case 0x1D486:
			*normals = mathematical_bold_italic_small_e;
			return 1;
		case 0x1D487:
			*normals = mathematical_bold_italic_small_f;
			return 1;
		case 0x1D488:
			*normals = mathematical_bold_italic_small_g;
			return 1;
		case 0x1D489:
			*normals = mathematical_bold_italic_small_h;
			return 1;
		case 0x1D48A:
			*normals = mathematical_bold_italic_small_i;
			return 1;
		case 0x1D48B:
			*normals = mathematical_bold_italic_small_j;
			return 1;
		case 0x1D48C:
			*normals = mathematical_bold_italic_small_k;
			return 1;
		case 0x1D48D:
			*normals = mathematical_bold_italic_small_l;
			return 1;
		case 0x1D48E:
			*normals = mathematical_bold_italic_small_m;
			return 1;
		case 0x1D48F:
			*normals = mathematical_bold_italic_small_n;
			return 1;
		case 0x1D490:
			*normals = mathematical_bold_italic_small_o;
			return 1;
		case 0x1D491:
			*normals = mathematical_bold_italic_small_p;
			return 1;
		case 0x1D492:
			*normals = mathematical_bold_italic_small_q;
			return 1;
		case 0x1D493:
			*normals = mathematical_bold_italic_small_r;
			return 1;
		case 0x1D494:
			*normals = mathematical_bold_italic_small_s;
			return 1;
		case 0x1D495:
			*normals = mathematical_bold_italic_small_t;
			return 1;
		case 0x1D496:
			*normals = mathematical_bold_italic_small_u;
			return 1;
		case 0x1D497:
			*normals = mathematical_bold_italic_small_v;
			return 1;
		case 0x1D498:
			*normals = mathematical_bold_italic_small_w;
			return 1;
		case 0x1D499:
			*normals = mathematical_bold_italic_small_x;
			return 1;
		case 0x1D49A:
			*normals = mathematical_bold_italic_small_y;
			return 1;
		case 0x1D49B:
			*normals = mathematical_bold_italic_small_z;
			return 1;
		case 0x1D49C:
			*normals = mathematical_script_capital_a;
			return 1;
		case 0x1D49E:
			*normals = mathematical_script_capital_c;
			return 1;
		case 0x1D49F:
			*normals = mathematical_script_capital_d;
			return 1;
		case 0x1D4A2:
			*normals = mathematical_script_capital_g;
			return 1;
		case 0x1D4A5:
			*normals = mathematical_script_capital_j;
			return 1;
		case 0x1D4A6:
			*normals = mathematical_script_capital_k;
			return 1;
		case 0x1D4A9:
			*normals = mathematical_script_capital_n;
			return 1;
		case 0x1D4AA:
			*normals = mathematical_script_capital_o;
			return 1;
		case 0x1D4AB:
			*normals = mathematical_script_capital_p;
			return 1;
		case 0x1D4AC:
			*normals = mathematical_script_capital_q;
			return 1;
		case 0x1D4AE:
			*normals = mathematical_script_capital_s;
			return 1;
		case 0x1D4AF:
			*normals = mathematical_script_capital_t;
			return 1;
		case 0x1D4B0:
			*normals = mathematical_script_capital_u;
			return 1;
		case 0x1D4B1:
			*normals = mathematical_script_capital_v;
			return 1;
		case 0x1D4B2:
			*normals = mathematical_script_capital_w;
			return 1;
		case 0x1D4B3:
			*normals = mathematical_script_capital_x;
			return 1;
		case 0x1D4B4:
			*normals = mathematical_script_capital_y;
			return 1;
		case 0x1D4B5:
			*normals = mathematical_script_capital_z;
			return 1;
		case 0x1D4B6:
			*normals = mathematical_script_small_a;
			return 1;
		case 0x1D4B7:
			*normals = mathematical_script_small_b;
			return 1;
		case 0x1D4B8:
			*normals = mathematical_script_small_c;
			return 1;
		case 0x1D4B9:
			*normals = mathematical_script_small_d;
			return 1;
		case 0x1D4BB:
			*normals = mathematical_script_small_f;
			return 1;
		case 0x1D4BD:
			*normals = mathematical_script_small_h;
			return 1;
		case 0x1D4BE:
			*normals = mathematical_script_small_i;
			return 1;
		case 0x1D4BF:
			*normals = mathematical_script_small_j;
			return 1;
		case 0x1D4C0:
			*normals = mathematical_script_small_k;
			return 1;
		case 0x1D4C1:
			*normals = mathematical_script_small_l;
			return 1;
		case 0x1D4C2:
			*normals = mathematical_script_small_m;
			return 1;
		case 0x1D4C3:
			*normals = mathematical_script_small_n;
			return 1;
		case 0x1D4C5:
			*normals = mathematical_script_small_p;
			return 1;
		case 0x1D4C6:
			*normals = mathematical_script_small_q;
			return 1;
		case 0x1D4C7:
			*normals = mathematical_script_small_r;
			return 1;
		case 0x1D4C8:
			*normals = mathematical_script_small_s;
			return 1;
		case 0x1D4C9:
			*normals = mathematical_script_small_t;
			return 1;
		case 0x1D4CA:
			*normals = mathematical_script_small_u;
			return 1;
		case 0x1D4CB:
			*normals = mathematical_script_small_v;
			return 1;
		case 0x1D4CC:
			*normals = mathematical_script_small_w;
			return 1;
		case 0x1D4CD:
			*normals = mathematical_script_small_x;
			return 1;
		case 0x1D4CE:
			*normals = mathematical_script_small_y;
			return 1;
		case 0x1D4CF:
			*normals = mathematical_script_small_z;
			return 1;
		case 0x1D4D0:
			*normals = mathematical_bold_script_capital_a;
			return 1;
		case 0x1D4D1:
			*normals = mathematical_bold_script_capital_b;
			return 1;
		case 0x1D4D2:
			*normals = mathematical_bold_script_capital_c;
			return 1;
		case 0x1D4D3:
			*normals = mathematical_bold_script_capital_d;
			return 1;
		case 0x1D4D4:
			*normals = mathematical_bold_script_capital_e;
			return 1;
		case 0x1D4D5:
			*normals = mathematical_bold_script_capital_f;
			return 1;
		case 0x1D4D6:
			*normals = mathematical_bold_script_capital_g;
			return 1;
		case 0x1D4D7:
			*normals = mathematical_bold_script_capital_h;
			return 1;
		case 0x1D4D8:
			*normals = mathematical_bold_script_capital_i;
			return 1;
		case 0x1D4D9:
			*normals = mathematical_bold_script_capital_j;
			return 1;
		case 0x1D4DA:
			*normals = mathematical_bold_script_capital_k;
			return 1;
		case 0x1D4DB:
			*normals = mathematical_bold_script_capital_l;
			return 1;
		case 0x1D4DC:
			*normals = mathematical_bold_script_capital_m;
			return 1;
		case 0x1D4DD:
			*normals = mathematical_bold_script_capital_n;
			return 1;
		case 0x1D4DE:
			*normals = mathematical_bold_script_capital_o;
			return 1;
		case 0x1D4DF:
			*normals = mathematical_bold_script_capital_p;
			return 1;
		case 0x1D4E0:
			*normals = mathematical_bold_script_capital_q;
			return 1;
		case 0x1D4E1:
			*normals = mathematical_bold_script_capital_r;
			return 1;
		case 0x1D4E2:
			*normals = mathematical_bold_script_capital_s;
			return 1;
		case 0x1D4E3:
			*normals = mathematical_bold_script_capital_t;
			return 1;
		case 0x1D4E4:
			*normals = mathematical_bold_script_capital_u;
			return 1;
		case 0x1D4E5:
			*normals = mathematical_bold_script_capital_v;
			return 1;
		case 0x1D4E6:
			*normals = mathematical_bold_script_capital_w;
			return 1;
		case 0x1D4E7:
			*normals = mathematical_bold_script_capital_x;
			return 1;
		case 0x1D4E8:
			*normals = mathematical_bold_script_capital_y;
			return 1;
		case 0x1D4E9:
			*normals = mathematical_bold_script_capital_z;
			return 1;
		case 0x1D4EA:
			*normals = mathematical_bold_script_small_a;
			return 1;
		case 0x1D4EB:
			*normals = mathematical_bold_script_small_b;
			return 1;
		case 0x1D4EC:
			*normals = mathematical_bold_script_small_c;
			return 1;
		case 0x1D4ED:
			*normals = mathematical_bold_script_small_d;
			return 1;
		case 0x1D4EE:
			*normals = mathematical_bold_script_small_e;
			return 1;
		case 0x1D4EF:
			*normals = mathematical_bold_script_small_f;
			return 1;
		case 0x1D4F0:
			*normals = mathematical_bold_script_small_g;
			return 1;
		case 0x1D4F1:
			*normals = mathematical_bold_script_small_h;
			return 1;
		case 0x1D4F2:
			*normals = mathematical_bold_script_small_i;
			return 1;
		case 0x1D4F3:
			*normals = mathematical_bold_script_small_j;
			return 1;
		case 0x1D4F4:
			*normals = mathematical_bold_script_small_k;
			return 1;
		case 0x1D4F5:
			*normals = mathematical_bold_script_small_l;
			return 1;
		case 0x1D4F6:
			*normals = mathematical_bold_script_small_m;
			return 1;
		case 0x1D4F7:
			*normals = mathematical_bold_script_small_n;
			return 1;
		case 0x1D4F8:
			*normals = mathematical_bold_script_small_o;
			return 1;
		case 0x1D4F9:
			*normals = mathematical_bold_script_small_p;
			return 1;
		case 0x1D4FA:
			*normals = mathematical_bold_script_small_q;
			return 1;
		case 0x1D4FB:
			*normals = mathematical_bold_script_small_r;
			return 1;
		case 0x1D4FC:
			*normals = mathematical_bold_script_small_s;
			return 1;
		case 0x1D4FD:
			*normals = mathematical_bold_script_small_t;
			return 1;
		case 0x1D4FE:
			*normals = mathematical_bold_script_small_u;
			return 1;
		case 0x1D4FF:
			*normals = mathematical_bold_script_small_v;
			return 1;
		case 0x1D500:
			*normals = mathematical_bold_script_small_w;
			return 1;
		case 0x1D501:
			*normals = mathematical_bold_script_small_x;
			return 1;
		case 0x1D502:
			*normals = mathematical_bold_script_small_y;
			return 1;
		case 0x1D503:
			*normals = mathematical_bold_script_small_z;
			return 1;
		case 0x1D504:
			*normals = mathematical_fraktur_capital_a;
			return 1;
		case 0x1D505:
			*normals = mathematical_fraktur_capital_b;
			return 1;
		case 0x1D507:
			*normals = mathematical_fraktur_capital_d;
			return 1;
		case 0x1D508:
			*normals = mathematical_fraktur_capital_e;
			return 1;
		case 0x1D509:
			*normals = mathematical_fraktur_capital_f;
			return 1;
		case 0x1D50A:
			*normals = mathematical_fraktur_capital_g;
			return 1;
		case 0x1D50D:
			*normals = mathematical_fraktur_capital_j;
			return 1;
		case 0x1D50E:
			*normals = mathematical_fraktur_capital_k;
			return 1;
		case 0x1D50F:
			*normals = mathematical_fraktur_capital_l;
			return 1;
		case 0x1D510:
			*normals = mathematical_fraktur_capital_m;
			return 1;
		case 0x1D511:
			*normals = mathematical_fraktur_capital_n;
			return 1;
		case 0x1D512:
			*normals = mathematical_fraktur_capital_o;
			return 1;
		case 0x1D513:
			*normals = mathematical_fraktur_capital_p;
			return 1;
		case 0x1D514:
			*normals = mathematical_fraktur_capital_q;
			return 1;
		case 0x1D516:
			*normals = mathematical_fraktur_capital_s;
			return 1;
		case 0x1D517:
			*normals = mathematical_fraktur_capital_t;
			return 1;
		case 0x1D518:
			*normals = mathematical_fraktur_capital_u;
			return 1;
		case 0x1D519:
			*normals = mathematical_fraktur_capital_v;
			return 1;
		case 0x1D51A:
			*normals = mathematical_fraktur_capital_w;
			return 1;
		case 0x1D51B:
			*normals = mathematical_fraktur_capital_x;
			return 1;
		case 0x1D51C:
			*normals = mathematical_fraktur_capital_y;
			return 1;
		case 0x1D51E:
			*normals = mathematical_fraktur_small_a;
			return 1;
		case 0x1D51F:
			*normals = mathematical_fraktur_small_b;
			return 1;
		case 0x1D520:
			*normals = mathematical_fraktur_small_c;
			return 1;
		case 0x1D521:
			*normals = mathematical_fraktur_small_d;
			return 1;
		case 0x1D522:
			*normals = mathematical_fraktur_small_e;
			return 1;
		case 0x1D523:
			*normals = mathematical_fraktur_small_f;
			return 1;
		case 0x1D524:
			*normals = mathematical_fraktur_small_g;
			return 1;
		case 0x1D525:
			*normals = mathematical_fraktur_small_h;
			return 1;
		case 0x1D526:
			*normals = mathematical_fraktur_small_i;
			return 1;
		case 0x1D527:
			*normals = mathematical_fraktur_small_j;
			return 1;
		case 0x1D528:
			*normals = mathematical_fraktur_small_k;
			return 1;
		case 0x1D529:
			*normals = mathematical_fraktur_small_l;
			return 1;
		case 0x1D52A:
			*normals = mathematical_fraktur_small_m;
			return 1;
		case 0x1D52B:
			*normals = mathematical_fraktur_small_n;
			return 1;
		case 0x1D52C:
			*normals = mathematical_fraktur_small_o;
			return 1;
		case 0x1D52D:
			*normals = mathematical_fraktur_small_p;
			return 1;
		case 0x1D52E:
			*normals = mathematical_fraktur_small_q;
			return 1;
		case 0x1D52F:
			*normals = mathematical_fraktur_small_r;
			return 1;
		case 0x1D530:
			*normals = mathematical_fraktur_small_s;
			return 1;
		case 0x1D531:
			*normals = mathematical_fraktur_small_t;
			return 1;
		case 0x1D532:
			*normals = mathematical_fraktur_small_u;
			return 1;
		case 0x1D533:
			*normals = mathematical_fraktur_small_v;
			return 1;
		case 0x1D534:
			*normals = mathematical_fraktur_small_w;
			return 1;
		case 0x1D535:
			*normals = mathematical_fraktur_small_x;
			return 1;
		case 0x1D536:
			*normals = mathematical_fraktur_small_y;
			return 1;
		case 0x1D537:
			*normals = mathematical_fraktur_small_z;
			return 1;
		case 0x1D538:
			*normals = mathematical_double_struck_capital_a;
			return 1;
		case 0x1D539:
			*normals = mathematical_double_struck_capital_b;
			return 1;
		case 0x1D53B:
			*normals = mathematical_double_struck_capital_d;
			return 1;
		case 0x1D53C:
			*normals = mathematical_double_struck_capital_e;
			return 1;
		case 0x1D53D:
			*normals = mathematical_double_struck_capital_f;
			return 1;
		case 0x1D53E:
			*normals = mathematical_double_struck_capital_g;
			return 1;
		case 0x1D540:
			*normals = mathematical_double_struck_capital_i;
			return 1;
		case 0x1D541:
			*normals = mathematical_double_struck_capital_j;
			return 1;
		case 0x1D542:
			*normals = mathematical_double_struck_capital_k;
			return 1;
		case 0x1D543:
			*normals = mathematical_double_struck_capital_l;
			return 1;
		case 0x1D544:
			*normals = mathematical_double_struck_capital_m;
			return 1;
		case 0x1D546:
			*normals = mathematical_double_struck_capital_o;
			return 1;
		case 0x1D54A:
			*normals = mathematical_double_struck_capital_s;
			return 1;
		case 0x1D54B:
			*normals = mathematical_double_struck_capital_t;
			return 1;
		case 0x1D54C:
			*normals = mathematical_double_struck_capital_u;
			return 1;
		case 0x1D54D:
			*normals = mathematical_double_struck_capital_v;
			return 1;
		case 0x1D54E:
			*normals = mathematical_double_struck_capital_w;
			return 1;
		case 0x1D54F:
			*normals = mathematical_double_struck_capital_x;
			return 1;
		case 0x1D550:
			*normals = mathematical_double_struck_capital_y;
			return 1;
		case 0x1D552:
			*normals = mathematical_double_struck_small_a;
			return 1;
		case 0x1D553:
			*normals = mathematical_double_struck_small_b;
			return 1;
		case 0x1D554:
			*normals = mathematical_double_struck_small_c;
			return 1;
		case 0x1D555:
			*normals = mathematical_double_struck_small_d;
			return 1;
		case 0x1D556:
			*normals = mathematical_double_struck_small_e;
			return 1;
		case 0x1D557:
			*normals = mathematical_double_struck_small_f;
			return 1;
		case 0x1D558:
			*normals = mathematical_double_struck_small_g;
			return 1;
		case 0x1D559:
			*normals = mathematical_double_struck_small_h;
			return 1;
		case 0x1D55A:
			*normals = mathematical_double_struck_small_i;
			return 1;
		case 0x1D55B:
			*normals = mathematical_double_struck_small_j;
			return 1;
		case 0x1D55C:
			*normals = mathematical_double_struck_small_k;
			return 1;
		case 0x1D55D:
			*normals = mathematical_double_struck_small_l;
			return 1;
		case 0x1D55E:
			*normals = mathematical_double_struck_small_m;
			return 1;
		case 0x1D55F:
			*normals = mathematical_double_struck_small_n;
			return 1;
		case 0x1D560:
			*normals = mathematical_double_struck_small_o;
			return 1;
		case 0x1D561:
			*normals = mathematical_double_struck_small_p;
			return 1;
		case 0x1D562:
			*normals = mathematical_double_struck_small_q;
			return 1;
		case 0x1D563:
			*normals = mathematical_double_struck_small_r;
			return 1;
		case 0x1D564:
			*normals = mathematical_double_struck_small_s;
			return 1;
		case 0x1D565:
			*normals = mathematical_double_struck_small_t;
			return 1;
		case 0x1D566:
			*normals = mathematical_double_struck_small_u;
			return 1;
		case 0x1D567:
			*normals = mathematical_double_struck_small_v;
			return 1;
		case 0x1D568:
			*normals = mathematical_double_struck_small_w;
			return 1;
		case 0x1D569:
			*normals = mathematical_double_struck_small_x;
			return 1;
		case 0x1D56A:
			*normals = mathematical_double_struck_small_y;
			return 1;
		case 0x1D56B:
			*normals = mathematical_double_struck_small_z;
			return 1;
		case 0x1D56C:
			*normals = mathematical_bold_fraktur_capital_a;
			return 1;
		case 0x1D56D:
			*normals = mathematical_bold_fraktur_capital_b;
			return 1;
		case 0x1D56E:
			*normals = mathematical_bold_fraktur_capital_c;
			return 1;
		case 0x1D56F:
			*normals = mathematical_bold_fraktur_capital_d;
			return 1;
		case 0x1D570:
			*normals = mathematical_bold_fraktur_capital_e;
			return 1;
		case 0x1D571:
			*normals = mathematical_bold_fraktur_capital_f;
			return 1;
		case 0x1D572:
			*normals = mathematical_bold_fraktur_capital_g;
			return 1;
		case 0x1D573:
			*normals = mathematical_bold_fraktur_capital_h;
			return 1;
		case 0x1D574:
			*normals = mathematical_bold_fraktur_capital_i;
			return 1;
		case 0x1D575:
			*normals = mathematical_bold_fraktur_capital_j;
			return 1;
		case 0x1D576:
			*normals = mathematical_bold_fraktur_capital_k;
			return 1;
		case 0x1D577:
			*normals = mathematical_bold_fraktur_capital_l;
			return 1;
		case 0x1D578:
			*normals = mathematical_bold_fraktur_capital_m;
			return 1;
		case 0x1D579:
			*normals = mathematical_bold_fraktur_capital_n;
			return 1;
		case 0x1D57A:
			*normals = mathematical_bold_fraktur_capital_o;
			return 1;
		case 0x1D57B:
			*normals = mathematical_bold_fraktur_capital_p;
			return 1;
		case 0x1D57C:
			*normals = mathematical_bold_fraktur_capital_q;
			return 1;
		case 0x1D57D:
			*normals = mathematical_bold_fraktur_capital_r;
			return 1;
		case 0x1D57E:
			*normals = mathematical_bold_fraktur_capital_s;
			return 1;
		case 0x1D57F:
			*normals = mathematical_bold_fraktur_capital_t;
			return 1;
		case 0x1D580:
			*normals = mathematical_bold_fraktur_capital_u;
			return 1;
		case 0x1D581:
			*normals = mathematical_bold_fraktur_capital_v;
			return 1;
		case 0x1D582:
			*normals = mathematical_bold_fraktur_capital_w;
			return 1;
		case 0x1D583:
			*normals = mathematical_bold_fraktur_capital_x;
			return 1;
		case 0x1D584:
			*normals = mathematical_bold_fraktur_capital_y;
			return 1;
		case 0x1D585:
			*normals = mathematical_bold_fraktur_capital_z;
			return 1;
		case 0x1D586:
			*normals = mathematical_bold_fraktur_small_a;
			return 1;
		case 0x1D587:
			*normals = mathematical_bold_fraktur_small_b;
			return 1;
		case 0x1D588:
			*normals = mathematical_bold_fraktur_small_c;
			return 1;
		case 0x1D589:
			*normals = mathematical_bold_fraktur_small_d;
			return 1;
		case 0x1D58A:
			*normals = mathematical_bold_fraktur_small_e;
			return 1;
		case 0x1D58B:
			*normals = mathematical_bold_fraktur_small_f;
			return 1;
		case 0x1D58C:
			*normals = mathematical_bold_fraktur_small_g;
			return 1;
		case 0x1D58D:
			*normals = mathematical_bold_fraktur_small_h;
			return 1;
		case 0x1D58E:
			*normals = mathematical_bold_fraktur_small_i;
			return 1;
		case 0x1D58F:
			*normals = mathematical_bold_fraktur_small_j;
			return 1;
		case 0x1D590:
			*normals = mathematical_bold_fraktur_small_k;
			return 1;
		case 0x1D591:
			*normals = mathematical_bold_fraktur_small_l;
			return 1;
		case 0x1D592:
			*normals = mathematical_bold_fraktur_small_m;
			return 1;
		case 0x1D593:
			*normals = mathematical_bold_fraktur_small_n;
			return 1;
		case 0x1D594:
			*normals = mathematical_bold_fraktur_small_o;
			return 1;
		case 0x1D595:
			*normals = mathematical_bold_fraktur_small_p;
			return 1;
		case 0x1D596:
			*normals = mathematical_bold_fraktur_small_q;
			return 1;
		case 0x1D597:
			*normals = mathematical_bold_fraktur_small_r;
			return 1;
		case 0x1D598:
			*normals = mathematical_bold_fraktur_small_s;
			return 1;
		case 0x1D599:
			*normals = mathematical_bold_fraktur_small_t;
			return 1;
		case 0x1D59A:
			*normals = mathematical_bold_fraktur_small_u;
			return 1;
		case 0x1D59B:
			*normals = mathematical_bold_fraktur_small_v;
			return 1;
		case 0x1D59C:
			*normals = mathematical_bold_fraktur_small_w;
			return 1;
		case 0x1D59D:
			*normals = mathematical_bold_fraktur_small_x;
			return 1;
		case 0x1D59E:
			*normals = mathematical_bold_fraktur_small_y;
			return 1;
		case 0x1D59F:
			*normals = mathematical_bold_fraktur_small_z;
			return 1;
		case 0x1D5A0:
			*normals = mathematical_sans_serif_capital_a;
			return 1;
		case 0x1D5A1:
			*normals = mathematical_sans_serif_capital_b;
			return 1;
		case 0x1D5A2:
			*normals = mathematical_sans_serif_capital_c;
			return 1;
		case 0x1D5A3:
			*normals = mathematical_sans_serif_capital_d;
			return 1;
		case 0x1D5A4:
			*normals = mathematical_sans_serif_capital_e;
			return 1;
		case 0x1D5A5:
			*normals = mathematical_sans_serif_capital_f;
			return 1;
		case 0x1D5A6:
			*normals = mathematical_sans_serif_capital_g;
			return 1;
		case 0x1D5A7:
			*normals = mathematical_sans_serif_capital_h;
			return 1;
		case 0x1D5A8:
			*normals = mathematical_sans_serif_capital_i;
			return 1;
		case 0x1D5A9:
			*normals = mathematical_sans_serif_capital_j;
			return 1;
		case 0x1D5AA:
			*normals = mathematical_sans_serif_capital_k;
			return 1;
		case 0x1D5AB:
			*normals = mathematical_sans_serif_capital_l;
			return 1;
		case 0x1D5AC:
			*normals = mathematical_sans_serif_capital_m;
			return 1;
		case 0x1D5AD:
			*normals = mathematical_sans_serif_capital_n;
			return 1;
		case 0x1D5AE:
			*normals = mathematical_sans_serif_capital_o;
			return 1;
		case 0x1D5AF:
			*normals = mathematical_sans_serif_capital_p;
			return 1;
		case 0x1D5B0:
			*normals = mathematical_sans_serif_capital_q;
			return 1;
		case 0x1D5B1:
			*normals = mathematical_sans_serif_capital_r;
			return 1;
		case 0x1D5B2:
			*normals = mathematical_sans_serif_capital_s;
			return 1;
		case 0x1D5B3:
			*normals = mathematical_sans_serif_capital_t;
			return 1;
		case 0x1D5B4:
			*normals = mathematical_sans_serif_capital_u;
			return 1;
		case 0x1D5B5:
			*normals = mathematical_sans_serif_capital_v;
			return 1;
		case 0x1D5B6:
			*normals = mathematical_sans_serif_capital_w;
			return 1;
		case 0x1D5B7:
			*normals = mathematical_sans_serif_capital_x;
			return 1;
		case 0x1D5B8:
			*normals = mathematical_sans_serif_capital_y;
			return 1;
		case 0x1D5B9:
			*normals = mathematical_sans_serif_capital_z;
			return 1;
		case 0x1D5BA:
			*normals = mathematical_sans_serif_small_a;
			return 1;
		case 0x1D5BB:
			*normals = mathematical_sans_serif_small_b;
			return 1;
		case 0x1D5BC:
			*normals = mathematical_sans_serif_small_c;
			return 1;
		case 0x1D5BD:
			*normals = mathematical_sans_serif_small_d;
			return 1;
		case 0x1D5BE:
			*normals = mathematical_sans_serif_small_e;
			return 1;
		case 0x1D5BF:
			*normals = mathematical_sans_serif_small_f;
			return 1;
		case 0x1D5C0:
			*normals = mathematical_sans_serif_small_g;
			return 1;
		case 0x1D5C1:
			*normals = mathematical_sans_serif_small_h;
			return 1;
		case 0x1D5C2:
			*normals = mathematical_sans_serif_small_i;
			return 1;
		case 0x1D5C3:
			*normals = mathematical_sans_serif_small_j;
			return 1;
		case 0x1D5C4:
			*normals = mathematical_sans_serif_small_k;
			return 1;
		case 0x1D5C5:
			*normals = mathematical_sans_serif_small_l;
			return 1;
		case 0x1D5C6:
			*normals = mathematical_sans_serif_small_m;
			return 1;
		case 0x1D5C7:
			*normals = mathematical_sans_serif_small_n;
			return 1;
		case 0x1D5C8:
			*normals = mathematical_sans_serif_small_o;
			return 1;
		case 0x1D5C9:
			*normals = mathematical_sans_serif_small_p;
			return 1;
		case 0x1D5CA:
			*normals = mathematical_sans_serif_small_q;
			return 1;
		case 0x1D5CB:
			*normals = mathematical_sans_serif_small_r;
			return 1;
		case 0x1D5CC:
			*normals = mathematical_sans_serif_small_s;
			return 1;
		case 0x1D5CD:
			*normals = mathematical_sans_serif_small_t;
			return 1;
		case 0x1D5CE:
			*normals = mathematical_sans_serif_small_u;
			return 1;
		case 0x1D5CF:
			*normals = mathematical_sans_serif_small_v;
			return 1;
		case 0x1D5D0:
			*normals = mathematical_sans_serif_small_w;
			return 1;
		case 0x1D5D1:
			*normals = mathematical_sans_serif_small_x;
			return 1;
		case 0x1D5D2:
			*normals = mathematical_sans_serif_small_y;
			return 1;
		case 0x1D5D3:
			*normals = mathematical_sans_serif_small_z;
			return 1;
		case 0x1D5D4:
			*normals = mathematical_sans_serif_bold_capital_a;
			return 1;
		case 0x1D5D5:
			*normals = mathematical_sans_serif_bold_capital_b;
			return 1;
		case 0x1D5D6:
			*normals = mathematical_sans_serif_bold_capital_c;
			return 1;
		case 0x1D5D7:
			*normals = mathematical_sans_serif_bold_capital_d;
			return 1;
		case 0x1D5D8:
			*normals = mathematical_sans_serif_bold_capital_e;
			return 1;
		case 0x1D5D9:
			*normals = mathematical_sans_serif_bold_capital_f;
			return 1;
		case 0x1D5DA:
			*normals = mathematical_sans_serif_bold_capital_g;
			return 1;
		case 0x1D5DB:
			*normals = mathematical_sans_serif_bold_capital_h;
			return 1;
		case 0x1D5DC:
			*normals = mathematical_sans_serif_bold_capital_i;
			return 1;
		case 0x1D5DD:
			*normals = mathematical_sans_serif_bold_capital_j;
			return 1;
		case 0x1D5DE:
			*normals = mathematical_sans_serif_bold_capital_k;
			return 1;
		case 0x1D5DF:
			*normals = mathematical_sans_serif_bold_capital_l;
			return 1;
		case 0x1D5E0:
			*normals = mathematical_sans_serif_bold_capital_m;
			return 1;
		case 0x1D5E1:
			*normals = mathematical_sans_serif_bold_capital_n;
			return 1;
		case 0x1D5E2:
			*normals = mathematical_sans_serif_bold_capital_o;
			return 1;
		case 0x1D5E3:
			*normals = mathematical_sans_serif_bold_capital_p;
			return 1;
		case 0x1D5E4:
			*normals = mathematical_sans_serif_bold_capital_q;
			return 1;
		case 0x1D5E5:
			*normals = mathematical_sans_serif_bold_capital_r;
			return 1;
		case 0x1D5E6:
			*normals = mathematical_sans_serif_bold_capital_s;
			return 1;
		case 0x1D5E7:
			*normals = mathematical_sans_serif_bold_capital_t;
			return 1;
		case 0x1D5E8:
			*normals = mathematical_sans_serif_bold_capital_u;
			return 1;
		case 0x1D5E9:
			*normals = mathematical_sans_serif_bold_capital_v;
			return 1;
		case 0x1D5EA:
			*normals = mathematical_sans_serif_bold_capital_w;
			return 1;
		case 0x1D5EB:
			*normals = mathematical_sans_serif_bold_capital_x;
			return 1;
		case 0x1D5EC:
			*normals = mathematical_sans_serif_bold_capital_y;
			return 1;
		case 0x1D5ED:
			*normals = mathematical_sans_serif_bold_capital_z;
			return 1;
		case 0x1D5EE:
			*normals = mathematical_sans_serif_bold_small_a;
			return 1;
		case 0x1D5EF:
			*normals = mathematical_sans_serif_bold_small_b;
			return 1;
		case 0x1D5F0:
			*normals = mathematical_sans_serif_bold_small_c;
			return 1;
		case 0x1D5F1:
			*normals = mathematical_sans_serif_bold_small_d;
			return 1;
		case 0x1D5F2:
			*normals = mathematical_sans_serif_bold_small_e;
			return 1;
		case 0x1D5F3:
			*normals = mathematical_sans_serif_bold_small_f;
			return 1;
		case 0x1D5F4:
			*normals = mathematical_sans_serif_bold_small_g;
			return 1;
		case 0x1D5F5:
			*normals = mathematical_sans_serif_bold_small_h;
			return 1;
		case 0x1D5F6:
			*normals = mathematical_sans_serif_bold_small_i;
			return 1;
		case 0x1D5F7:
			*normals = mathematical_sans_serif_bold_small_j;
			return 1;
		case 0x1D5F8:
			*normals = mathematical_sans_serif_bold_small_k;
			return 1;
		case 0x1D5F9:
			*normals = mathematical_sans_serif_bold_small_l;
			return 1;
		case 0x1D5FA:
			*normals = mathematical_sans_serif_bold_small_m;
			return 1;
		case 0x1D5FB:
			*normals = mathematical_sans_serif_bold_small_n;
			return 1;
		case 0x1D5FC:
			*normals = mathematical_sans_serif_bold_small_o;
			return 1;
		case 0x1D5FD:
			*normals = mathematical_sans_serif_bold_small_p;
			return 1;
		case 0x1D5FE:
			*normals = mathematical_sans_serif_bold_small_q;
			return 1;
		case 0x1D5FF:
			*normals = mathematical_sans_serif_bold_small_r;
			return 1;
		case 0x1D600:
			*normals = mathematical_sans_serif_bold_small_s;
			return 1;
		case 0x1D601:
			*normals = mathematical_sans_serif_bold_small_t;
			return 1;
		case 0x1D602:
			*normals = mathematical_sans_serif_bold_small_u;
			return 1;
		case 0x1D603:
			*normals = mathematical_sans_serif_bold_small_v;
			return 1;
		case 0x1D604:
			*normals = mathematical_sans_serif_bold_small_w;
			return 1;
		case 0x1D605:
			*normals = mathematical_sans_serif_bold_small_x;
			return 1;
		case 0x1D606:
			*normals = mathematical_sans_serif_bold_small_y;
			return 1;
		case 0x1D607:
			*normals = mathematical_sans_serif_bold_small_z;
			return 1;
		case 0x1D608:
			*normals = mathematical_sans_serif_italic_capital_a;
			return 1;
		case 0x1D609:
			*normals = mathematical_sans_serif_italic_capital_b;
			return 1;
		case 0x1D60A:
			*normals = mathematical_sans_serif_italic_capital_c;
			return 1;
		case 0x1D60B:
			*normals = mathematical_sans_serif_italic_capital_d;
			return 1;
		case 0x1D60C:
			*normals = mathematical_sans_serif_italic_capital_e;
			return 1;
		case 0x1D60D:
			*normals = mathematical_sans_serif_italic_capital_f;
			return 1;
		case 0x1D60E:
			*normals = mathematical_sans_serif_italic_capital_g;
			return 1;
		case 0x1D60F:
			*normals = mathematical_sans_serif_italic_capital_h;
			return 1;
		case 0x1D610:
			*normals = mathematical_sans_serif_italic_capital_i;
			return 1;
		case 0x1D611:
			*normals = mathematical_sans_serif_italic_capital_j;
			return 1;
		case 0x1D612:
			*normals = mathematical_sans_serif_italic_capital_k;
			return 1;
		case 0x1D613:
			*normals = mathematical_sans_serif_italic_capital_l;
			return 1;
		case 0x1D614:
			*normals = mathematical_sans_serif_italic_capital_m;
			return 1;
		case 0x1D615:
			*normals = mathematical_sans_serif_italic_capital_n;
			return 1;
		case 0x1D616:
			*normals = mathematical_sans_serif_italic_capital_o;
			return 1;
		case 0x1D617:
			*normals = mathematical_sans_serif_italic_capital_p;
			return 1;
		case 0x1D618:
			*normals = mathematical_sans_serif_italic_capital_q;
			return 1;
		case 0x1D619:
			*normals = mathematical_sans_serif_italic_capital_r;
			return 1;
		case 0x1D61A:
			*normals = mathematical_sans_serif_italic_capital_s;
			return 1;
		case 0x1D61B:
			*normals = mathematical_sans_serif_italic_capital_t;
			return 1;
		case 0x1D61C:
			*normals = mathematical_sans_serif_italic_capital_u;
			return 1;
		case 0x1D61D:
			*normals = mathematical_sans_serif_italic_capital_v;
			return 1;
		case 0x1D61E:
			*normals = mathematical_sans_serif_italic_capital_w;
			return 1;
		case 0x1D61F:
			*normals = mathematical_sans_serif_italic_capital_x;
			return 1;
		case 0x1D620:
			*normals = mathematical_sans_serif_italic_capital_y;
			return 1;
		case 0x1D621:
			*normals = mathematical_sans_serif_italic_capital_z;
			return 1;
		case 0x1D622:
			*normals = mathematical_sans_serif_italic_small_a;
			return 1;
		case 0x1D623:
			*normals = mathematical_sans_serif_italic_small_b;
			return 1;
		case 0x1D624:
			*normals = mathematical_sans_serif_italic_small_c;
			return 1;
		case 0x1D625:
			*normals = mathematical_sans_serif_italic_small_d;
			return 1;
		case 0x1D626:
			*normals = mathematical_sans_serif_italic_small_e;
			return 1;
		case 0x1D627:
			*normals = mathematical_sans_serif_italic_small_f;
			return 1;
		case 0x1D628:
			*normals = mathematical_sans_serif_italic_small_g;
			return 1;
		case 0x1D629:
			*normals = mathematical_sans_serif_italic_small_h;
			return 1;
		case 0x1D62A:
			*normals = mathematical_sans_serif_italic_small_i;
			return 1;
		case 0x1D62B:
			*normals = mathematical_sans_serif_italic_small_j;
			return 1;
		case 0x1D62C:
			*normals = mathematical_sans_serif_italic_small_k;
			return 1;
		case 0x1D62D:
			*normals = mathematical_sans_serif_italic_small_l;
			return 1;
		case 0x1D62E:
			*normals = mathematical_sans_serif_italic_small_m;
			return 1;
		case 0x1D62F:
			*normals = mathematical_sans_serif_italic_small_n;
			return 1;
		case 0x1D630:
			*normals = mathematical_sans_serif_italic_small_o;
			return 1;
		case 0x1D631:
			*normals = mathematical_sans_serif_italic_small_p;
			return 1;
		case 0x1D632:
			*normals = mathematical_sans_serif_italic_small_q;
			return 1;
		case 0x1D633:
			*normals = mathematical_sans_serif_italic_small_r;
			return 1;
		case 0x1D634:
			*normals = mathematical_sans_serif_italic_small_s;
			return 1;
		case 0x1D635:
			*normals = mathematical_sans_serif_italic_small_t;
			return 1;
		case 0x1D636:
			*normals = mathematical_sans_serif_italic_small_u;
			return 1;
		case 0x1D637:
			*normals = mathematical_sans_serif_italic_small_v;
			return 1;
		case 0x1D638:
			*normals = mathematical_sans_serif_italic_small_w;
			return 1;
		case 0x1D639:
			*normals = mathematical_sans_serif_italic_small_x;
			return 1;
		case 0x1D63A:
			*normals = mathematical_sans_serif_italic_small_y;
			return 1;
		case 0x1D63B:
			*normals = mathematical_sans_serif_italic_small_z;
			return 1;
		case 0x1D63C:
			*normals = mathematical_sans_serif_bold_italic_capital_a;
			return 1;
		case 0x1D63D:
			*normals = mathematical_sans_serif_bold_italic_capital_b;
			return 1;
		case 0x1D63E:
			*normals = mathematical_sans_serif_bold_italic_capital_c;
			return 1;
		case 0x1D63F:
			*normals = mathematical_sans_serif_bold_italic_capital_d;
			return 1;
		case 0x1D640:
			*normals = mathematical_sans_serif_bold_italic_capital_e;
			return 1;
		case 0x1D641:
			*normals = mathematical_sans_serif_bold_italic_capital_f;
			return 1;
		case 0x1D642:
			*normals = mathematical_sans_serif_bold_italic_capital_g;
			return 1;
		case 0x1D643:
			*normals = mathematical_sans_serif_bold_italic_capital_h;
			return 1;
		case 0x1D644:
			*normals = mathematical_sans_serif_bold_italic_capital_i;
			return 1;
		case 0x1D645:
			*normals = mathematical_sans_serif_bold_italic_capital_j;
			return 1;
		case 0x1D646:
			*normals = mathematical_sans_serif_bold_italic_capital_k;
			return 1;
		case 0x1D647:
			*normals = mathematical_sans_serif_bold_italic_capital_l;
			return 1;
		case 0x1D648:
			*normals = mathematical_sans_serif_bold_italic_capital_m;
			return 1;
		case 0x1D649:
			*normals = mathematical_sans_serif_bold_italic_capital_n;
			return 1;
		case 0x1D64A:
			*normals = mathematical_sans_serif_bold_italic_capital_o;
			return 1;
		case 0x1D64B:
			*normals = mathematical_sans_serif_bold_italic_capital_p;
			return 1;
		case 0x1D64C:
			*normals = mathematical_sans_serif_bold_italic_capital_q;
			return 1;
		case 0x1D64D:
			*normals = mathematical_sans_serif_bold_italic_capital_r;
			return 1;
		case 0x1D64E:
			*normals = mathematical_sans_serif_bold_italic_capital_s;
			return 1;
		case 0x1D64F:
			*normals = mathematical_sans_serif_bold_italic_capital_t;
			return 1;
		case 0x1D650:
			*normals = mathematical_sans_serif_bold_italic_capital_u;
			return 1;
		case 0x1D651:
			*normals = mathematical_sans_serif_bold_italic_capital_v;
			return 1;
		case 0x1D652:
			*normals = mathematical_sans_serif_bold_italic_capital_w;
			return 1;
		case 0x1D653:
			*normals = mathematical_sans_serif_bold_italic_capital_x;
			return 1;
		case 0x1D654:
			*normals = mathematical_sans_serif_bold_italic_capital_y;
			return 1;
		case 0x1D655:
			*normals = mathematical_sans_serif_bold_italic_capital_z;
			return 1;
		case 0x1D656:
			*normals = mathematical_sans_serif_bold_italic_small_a;
			return 1;
		case 0x1D657:
			*normals = mathematical_sans_serif_bold_italic_small_b;
			return 1;
		case 0x1D658:
			*normals = mathematical_sans_serif_bold_italic_small_c;
			return 1;
		case 0x1D659:
			*normals = mathematical_sans_serif_bold_italic_small_d;
			return 1;
		case 0x1D65A:
			*normals = mathematical_sans_serif_bold_italic_small_e;
			return 1;
		case 0x1D65B:
			*normals = mathematical_sans_serif_bold_italic_small_f;
			return 1;
		case 0x1D65C:
			*normals = mathematical_sans_serif_bold_italic_small_g;
			return 1;
		case 0x1D65D:
			*normals = mathematical_sans_serif_bold_italic_small_h;
			return 1;
		case 0x1D65E:
			*normals = mathematical_sans_serif_bold_italic_small_i;
			return 1;
		case 0x1D65F:
			*normals = mathematical_sans_serif_bold_italic_small_j;
			return 1;
		case 0x1D660:
			*normals = mathematical_sans_serif_bold_italic_small_k;
			return 1;
		case 0x1D661:
			*normals = mathematical_sans_serif_bold_italic_small_l;
			return 1;
		case 0x1D662:
			*normals = mathematical_sans_serif_bold_italic_small_m;
			return 1;
		case 0x1D663:
			*normals = mathematical_sans_serif_bold_italic_small_n;
			return 1;
		case 0x1D664:
			*normals = mathematical_sans_serif_bold_italic_small_o;
			return 1;
		case 0x1D665:
			*normals = mathematical_sans_serif_bold_italic_small_p;
			return 1;
		case 0x1D666:
			*normals = mathematical_sans_serif_bold_italic_small_q;
			return 1;
		case 0x1D667:
			*normals = mathematical_sans_serif_bold_italic_small_r;
			return 1;
		case 0x1D668:
			*normals = mathematical_sans_serif_bold_italic_small_s;
			return 1;
		case 0x1D669:
			*normals = mathematical_sans_serif_bold_italic_small_t;
			return 1;
		case 0x1D66A:
			*normals = mathematical_sans_serif_bold_italic_small_u;
			return 1;
		case 0x1D66B:
			*normals = mathematical_sans_serif_bold_italic_small_v;
			return 1;
		case 0x1D66C:
			*normals = mathematical_sans_serif_bold_italic_small_w;
			return 1;
		case 0x1D66D:
			*normals = mathematical_sans_serif_bold_italic_small_x;
			return 1;
		case 0x1D66E:
			*normals = mathematical_sans_serif_bold_italic_small_y;
			return 1;
		case 0x1D66F:
			*normals = mathematical_sans_serif_bold_italic_small_z;
			return 1;
		case 0x1D670:
			*normals = mathematical_monospace_capital_a;
			return 1;
		case 0x1D671:
			*normals = mathematical_monospace_capital_b;
			return 1;
		case 0x1D672:
			*normals = mathematical_monospace_capital_c;
			return 1;
		case 0x1D673:
			*normals = mathematical_monospace_capital_d;
			return 1;
		case 0x1D674:
			*normals = mathematical_monospace_capital_e;
			return 1;
		case 0x1D675:
			*normals = mathematical_monospace_capital_f;
			return 1;
		case 0x1D676:
			*normals = mathematical_monospace_capital_g;
			return 1;
		case 0x1D677:
			*normals = mathematical_monospace_capital_h;
			return 1;
		case 0x1D678:
			*normals = mathematical_monospace_capital_i;
			return 1;
		case 0x1D679:
			*normals = mathematical_monospace_capital_j;
			return 1;
		case 0x1D67A:
			*normals = mathematical_monospace_capital_k;
			return 1;
		case 0x1D67B:
			*normals = mathematical_monospace_capital_l;
			return 1;
		case 0x1D67C:
			*normals = mathematical_monospace_capital_m;
			return 1;
		case 0x1D67D:
			*normals = mathematical_monospace_capital_n;
			return 1;
		case 0x1D67E:
			*normals = mathematical_monospace_capital_o;
			return 1;
		case 0x1D67F:
			*normals = mathematical_monospace_capital_p;
			return 1;
		case 0x1D680:
			*normals = mathematical_monospace_capital_q;
			return 1;
		case 0x1D681:
			*normals = mathematical_monospace_capital_r;
			return 1;
		case 0x1D682:
			*normals = mathematical_monospace_capital_s;
			return 1;
		case 0x1D683:
			*normals = mathematical_monospace_capital_t;
			return 1;
		case 0x1D684:
			*normals = mathematical_monospace_capital_u;
			return 1;
		case 0x1D685:
			*normals = mathematical_monospace_capital_v;
			return 1;
		case 0x1D686:
			*normals = mathematical_monospace_capital_w;
			return 1;
		case 0x1D687:
			*normals = mathematical_monospace_capital_x;
			return 1;
		case 0x1D688:
			*normals = mathematical_monospace_capital_y;
			return 1;
		case 0x1D689:
			*normals = mathematical_monospace_capital_z;
			return 1;
		case 0x1D68A:
			*normals = mathematical_monospace_small_a;
			return 1;
		case 0x1D68B:
			*normals = mathematical_monospace_small_b;
			return 1;
		case 0x1D68C:
			*normals = mathematical_monospace_small_c;
			return 1;
		case 0x1D68D:
			*normals = mathematical_monospace_small_d;
			return 1;
		case 0x1D68E:
			*normals = mathematical_monospace_small_e;
			return 1;
		case 0x1D68F:
			*normals = mathematical_monospace_small_f;
			return 1;
		case 0x1D690:
			*normals = mathematical_monospace_small_g;
			return 1;
		case 0x1D691:
			*normals = mathematical_monospace_small_h;
			return 1;
		case 0x1D692:
			*normals = mathematical_monospace_small_i;
			return 1;
		case 0x1D693:
			*normals = mathematical_monospace_small_j;
			return 1;
		case 0x1D694:
			*normals = mathematical_monospace_small_k;
			return 1;
		case 0x1D695:
			*normals = mathematical_monospace_small_l;
			return 1;
		case 0x1D696:
			*normals = mathematical_monospace_small_m;
			return 1;
		case 0x1D697:
			*normals = mathematical_monospace_small_n;
			return 1;
		case 0x1D698:
			*normals = mathematical_monospace_small_o;
			return 1;
		case 0x1D699:
			*normals = mathematical_monospace_small_p;
			return 1;
		case 0x1D69A:
			*normals = mathematical_monospace_small_q;
			return 1;
		case 0x1D69B:
			*normals = mathematical_monospace_small_r;
			return 1;
		case 0x1D69C:
			*normals = mathematical_monospace_small_s;
			return 1;
		case 0x1D69D:
			*normals = mathematical_monospace_small_t;
			return 1;
		case 0x1D69E:
			*normals = mathematical_monospace_small_u;
			return 1;
		case 0x1D69F:
			*normals = mathematical_monospace_small_v;
			return 1;
		case 0x1D6A0:
			*normals = mathematical_monospace_small_w;
			return 1;
		case 0x1D6A1:
			*normals = mathematical_monospace_small_x;
			return 1;
		case 0x1D6A2:
			*normals = mathematical_monospace_small_y;
			return 1;
		case 0x1D6A3:
			*normals = mathematical_monospace_small_z;
			return 1;
		case 0x1D6A4:
			*normals = mathematical_italic_small_dotless_i;
			return 1;
		case 0x1D6A5:
			*normals = mathematical_italic_small_dotless_j;
			return 1;
		case 0x1D6A8:
			*normals = mathematical_bold_capital_alpha;
			return 1;
		case 0x1D6A9:
			*normals = mathematical_bold_capital_beta;
			return 1;
		case 0x1D6AA:
			*normals = mathematical_bold_capital_gamma;
			return 1;
		case 0x1D6AB:
			*normals = mathematical_bold_capital_delta;
			return 1;
		case 0x1D6AC:
			*normals = mathematical_bold_capital_epsilon;
			return 1;
		case 0x1D6AD:
			*normals = mathematical_bold_capital_zeta;
			return 1;
		case 0x1D6AE:
			*normals = mathematical_bold_capital_eta;
			return 1;
		case 0x1D6AF:
			*normals = mathematical_bold_capital_theta;
			return 1;
		case 0x1D6B0:
			*normals = mathematical_bold_capital_iota;
			return 1;
		case 0x1D6B1:
			*normals = mathematical_bold_capital_kappa;
			return 1;
		case 0x1D6B2:
			*normals = mathematical_bold_capital_lamda;
			return 1;
		case 0x1D6B3:
			*normals = mathematical_bold_capital_mu;
			return 1;
		case 0x1D6B4:
			*normals = mathematical_bold_capital_nu;
			return 1;
		case 0x1D6B5:
			*normals = mathematical_bold_capital_xi;
			return 1;
		case 0x1D6B6:
			*normals = mathematical_bold_capital_omicron;
			return 1;
		case 0x1D6B7:
			*normals = mathematical_bold_capital_pi;
			return 1;
		case 0x1D6B8:
			*normals = mathematical_bold_capital_rho;
			return 1;
		case 0x1D6B9:
			*normals = mathematical_bold_capital_theta_symbol;
			return 1;
		case 0x1D6BA:
			*normals = mathematical_bold_capital_sigma;
			return 1;
		case 0x1D6BB:
			*normals = mathematical_bold_capital_tau;
			return 1;
		case 0x1D6BC:
			*normals = mathematical_bold_capital_upsilon;
			return 1;
		case 0x1D6BD:
			*normals = mathematical_bold_capital_phi;
			return 1;
		case 0x1D6BE:
			*normals = mathematical_bold_capital_chi;
			return 1;
		case 0x1D6BF:
			*normals = mathematical_bold_capital_psi;
			return 1;
		case 0x1D6C0:
			*normals = mathematical_bold_capital_omega;
			return 1;
		case 0x1D6C1:
			*normals = mathematical_bold_nabla;
			return 1;
		case 0x1D6C2:
			*normals = mathematical_bold_small_alpha;
			return 1;
		case 0x1D6C3:
			*normals = mathematical_bold_small_beta;
			return 1;
		case 0x1D6C4:
			*normals = mathematical_bold_small_gamma;
			return 1;
		case 0x1D6C5:
			*normals = mathematical_bold_small_delta;
			return 1;
		case 0x1D6C6:
			*normals = mathematical_bold_small_epsilon;
			return 1;
		case 0x1D6C7:
			*normals = mathematical_bold_small_zeta;
			return 1;
		case 0x1D6C8:
			*normals = mathematical_bold_small_eta;
			return 1;
		case 0x1D6C9:
			*normals = mathematical_bold_small_theta;
			return 1;
		case 0x1D6CA:
			*normals = mathematical_bold_small_iota;
			return 1;
		case 0x1D6CB:
			*normals = mathematical_bold_small_kappa;
			return 1;
		case 0x1D6CC:
			*normals = mathematical_bold_small_lamda;
			return 1;
		case 0x1D6CD:
			*normals = mathematical_bold_small_mu;
			return 1;
		case 0x1D6CE:
			*normals = mathematical_bold_small_nu;
			return 1;
		case 0x1D6CF:
			*normals = mathematical_bold_small_xi;
			return 1;
		case 0x1D6D0:
			*normals = mathematical_bold_small_omicron;
			return 1;
		case 0x1D6D1:
			*normals = mathematical_bold_small_pi;
			return 1;
		case 0x1D6D2:
			*normals = mathematical_bold_small_rho;
			return 1;
		case 0x1D6D3:
			*normals = mathematical_bold_small_final_sigma;
			return 1;
		case 0x1D6D4:
			*normals = mathematical_bold_small_sigma;
			return 1;
		case 0x1D6D5:
			*normals = mathematical_bold_small_tau;
			return 1;
		case 0x1D6D6:
			*normals = mathematical_bold_small_upsilon;
			return 1;
		case 0x1D6D7:
			*normals = mathematical_bold_small_phi;
			return 1;
		case 0x1D6D8:
			*normals = mathematical_bold_small_chi;
			return 1;
		case 0x1D6D9:
			*normals = mathematical_bold_small_psi;
			return 1;
		case 0x1D6DA:
			*normals = mathematical_bold_small_omega;
			return 1;
		case 0x1D6DB:
			*normals = mathematical_bold_partial_differential;
			return 1;
		case 0x1D6DC:
			*normals = mathematical_bold_epsilon_symbol;
			return 1;
		case 0x1D6DD:
			*normals = mathematical_bold_theta_symbol;
			return 1;
		case 0x1D6DE:
			*normals = mathematical_bold_kappa_symbol;
			return 1;
		case 0x1D6DF:
			*normals = mathematical_bold_phi_symbol;
			return 1;
		case 0x1D6E0:
			*normals = mathematical_bold_rho_symbol;
			return 1;
		case 0x1D6E1:
			*normals = mathematical_bold_pi_symbol;
			return 1;
		case 0x1D6E2:
			*normals = mathematical_italic_capital_alpha;
			return 1;
		case 0x1D6E3:
			*normals = mathematical_italic_capital_beta;
			return 1;
		case 0x1D6E4:
			*normals = mathematical_italic_capital_gamma;
			return 1;
		case 0x1D6E5:
			*normals = mathematical_italic_capital_delta;
			return 1;
		case 0x1D6E6:
			*normals = mathematical_italic_capital_epsilon;
			return 1;
		case 0x1D6E7:
			*normals = mathematical_italic_capital_zeta;
			return 1;
		case 0x1D6E8:
			*normals = mathematical_italic_capital_eta;
			return 1;
		case 0x1D6E9:
			*normals = mathematical_italic_capital_theta;
			return 1;
		case 0x1D6EA:
			*normals = mathematical_italic_capital_iota;
			return 1;
		case 0x1D6EB:
			*normals = mathematical_italic_capital_kappa;
			return 1;
		case 0x1D6EC:
			*normals = mathematical_italic_capital_lamda;
			return 1;
		case 0x1D6ED:
			*normals = mathematical_italic_capital_mu;
			return 1;
		case 0x1D6EE:
			*normals = mathematical_italic_capital_nu;
			return 1;
		case 0x1D6EF:
			*normals = mathematical_italic_capital_xi;
			return 1;
		case 0x1D6F0:
			*normals = mathematical_italic_capital_omicron;
			return 1;
		case 0x1D6F1:
			*normals = mathematical_italic_capital_pi;
			return 1;
		case 0x1D6F2:
			*normals = mathematical_italic_capital_rho;
			return 1;
		case 0x1D6F3:
			*normals = mathematical_italic_capital_theta_symbol;
			return 1;
		case 0x1D6F4:
			*normals = mathematical_italic_capital_sigma;
			return 1;
		case 0x1D6F5:
			*normals = mathematical_italic_capital_tau;
			return 1;
		case 0x1D6F6:
			*normals = mathematical_italic_capital_upsilon;
			return 1;
		case 0x1D6F7:
			*normals = mathematical_italic_capital_phi;
			return 1;
		case 0x1D6F8:
			*normals = mathematical_italic_capital_chi;
			return 1;
		case 0x1D6F9:
			*normals = mathematical_italic_capital_psi;
			return 1;
		case 0x1D6FA:
			*normals = mathematical_italic_capital_omega;
			return 1;
		case 0x1D6FB:
			*normals = mathematical_italic_nabla;
			return 1;
		case 0x1D6FC:
			*normals = mathematical_italic_small_alpha;
			return 1;
		case 0x1D6FD:
			*normals = mathematical_italic_small_beta;
			return 1;
		case 0x1D6FE:
			*normals = mathematical_italic_small_gamma;
			return 1;
		case 0x1D6FF:
			*normals = mathematical_italic_small_delta;
			return 1;
		case 0x1D700:
			*normals = mathematical_italic_small_epsilon;
			return 1;
		case 0x1D701:
			*normals = mathematical_italic_small_zeta;
			return 1;
		case 0x1D702:
			*normals = mathematical_italic_small_eta;
			return 1;
		case 0x1D703:
			*normals = mathematical_italic_small_theta;
			return 1;
		case 0x1D704:
			*normals = mathematical_italic_small_iota;
			return 1;
		case 0x1D705:
			*normals = mathematical_italic_small_kappa;
			return 1;
		case 0x1D706:
			*normals = mathematical_italic_small_lamda;
			return 1;
		case 0x1D707:
			*normals = mathematical_italic_small_mu;
			return 1;
		case 0x1D708:
			*normals = mathematical_italic_small_nu;
			return 1;
		case 0x1D709:
			*normals = mathematical_italic_small_xi;
			return 1;
		case 0x1D70A:
			*normals = mathematical_italic_small_omicron;
			return 1;
		case 0x1D70B:
			*normals = mathematical_italic_small_pi;
			return 1;
		case 0x1D70C:
			*normals = mathematical_italic_small_rho;
			return 1;
		case 0x1D70D:
			*normals = mathematical_italic_small_final_sigma;
			return 1;
		case 0x1D70E:
			*normals = mathematical_italic_small_sigma;
			return 1;
		case 0x1D70F:
			*normals = mathematical_italic_small_tau;
			return 1;
		case 0x1D710:
			*normals = mathematical_italic_small_upsilon;
			return 1;
		case 0x1D711:
			*normals = mathematical_italic_small_phi;
			return 1;
		case 0x1D712:
			*normals = mathematical_italic_small_chi;
			return 1;
		case 0x1D713:
			*normals = mathematical_italic_small_psi;
			return 1;
		case 0x1D714:
			*normals = mathematical_italic_small_omega;
			return 1;
		case 0x1D715:
			*normals = mathematical_italic_partial_differential;
			return 1;
		case 0x1D716:
			*normals = mathematical_italic_epsilon_symbol;
			return 1;
		case 0x1D717:
			*normals = mathematical_italic_theta_symbol;
			return 1;
		case 0x1D718:
			*normals = mathematical_italic_kappa_symbol;
			return 1;
		case 0x1D719:
			*normals = mathematical_italic_phi_symbol;
			return 1;
		case 0x1D71A:
			*normals = mathematical_italic_rho_symbol;
			return 1;
		case 0x1D71B:
			*normals = mathematical_italic_pi_symbol;
			return 1;
		case 0x1D71C:
			*normals = mathematical_bold_italic_capital_alpha;
			return 1;
		case 0x1D71D:
			*normals = mathematical_bold_italic_capital_beta;
			return 1;
		case 0x1D71E:
			*normals = mathematical_bold_italic_capital_gamma;
			return 1;
		case 0x1D71F:
			*normals = mathematical_bold_italic_capital_delta;
			return 1;
		case 0x1D720:
			*normals = mathematical_bold_italic_capital_epsilon;
			return 1;
		case 0x1D721:
			*normals = mathematical_bold_italic_capital_zeta;
			return 1;
		case 0x1D722:
			*normals = mathematical_bold_italic_capital_eta;
			return 1;
		case 0x1D723:
			*normals = mathematical_bold_italic_capital_theta;
			return 1;
		case 0x1D724:
			*normals = mathematical_bold_italic_capital_iota;
			return 1;
		case 0x1D725:
			*normals = mathematical_bold_italic_capital_kappa;
			return 1;
		case 0x1D726:
			*normals = mathematical_bold_italic_capital_lamda;
			return 1;
		case 0x1D727:
			*normals = mathematical_bold_italic_capital_mu;
			return 1;
		case 0x1D728:
			*normals = mathematical_bold_italic_capital_nu;
			return 1;
		case 0x1D729:
			*normals = mathematical_bold_italic_capital_xi;
			return 1;
		case 0x1D72A:
			*normals = mathematical_bold_italic_capital_omicron;
			return 1;
		case 0x1D72B:
			*normals = mathematical_bold_italic_capital_pi;
			return 1;
		case 0x1D72C:
			*normals = mathematical_bold_italic_capital_rho;
			return 1;
		case 0x1D72D:
			*normals = mathematical_bold_italic_capital_theta_symbol;
			return 1;
		case 0x1D72E:
			*normals = mathematical_bold_italic_capital_sigma;
			return 1;
		case 0x1D72F:
			*normals = mathematical_bold_italic_capital_tau;
			return 1;
		case 0x1D730:
			*normals = mathematical_bold_italic_capital_upsilon;
			return 1;
		case 0x1D731:
			*normals = mathematical_bold_italic_capital_phi;
			return 1;
		case 0x1D732:
			*normals = mathematical_bold_italic_capital_chi;
			return 1;
		case 0x1D733:
			*normals = mathematical_bold_italic_capital_psi;
			return 1;
		case 0x1D734:
			*normals = mathematical_bold_italic_capital_omega;
			return 1;
		case 0x1D735:
			*normals = mathematical_bold_italic_nabla;
			return 1;
		case 0x1D736:
			*normals = mathematical_bold_italic_small_alpha;
			return 1;
		case 0x1D737:
			*normals = mathematical_bold_italic_small_beta;
			return 1;
		case 0x1D738:
			*normals = mathematical_bold_italic_small_gamma;
			return 1;
		case 0x1D739:
			*normals = mathematical_bold_italic_small_delta;
			return 1;
		case 0x1D73A:
			*normals = mathematical_bold_italic_small_epsilon;
			return 1;
		case 0x1D73B:
			*normals = mathematical_bold_italic_small_zeta;
			return 1;
		case 0x1D73C:
			*normals = mathematical_bold_italic_small_eta;
			return 1;
		case 0x1D73D:
			*normals = mathematical_bold_italic_small_theta;
			return 1;
		case 0x1D73E:
			*normals = mathematical_bold_italic_small_iota;
			return 1;
		case 0x1D73F:
			*normals = mathematical_bold_italic_small_kappa;
			return 1;
		case 0x1D740:
			*normals = mathematical_bold_italic_small_lamda;
			return 1;
		case 0x1D741:
			*normals = mathematical_bold_italic_small_mu;
			return 1;
		case 0x1D742:
			*normals = mathematical_bold_italic_small_nu;
			return 1;
		case 0x1D743:
			*normals = mathematical_bold_italic_small_xi;
			return 1;
		case 0x1D744:
			*normals = mathematical_bold_italic_small_omicron;
			return 1;
		case 0x1D745:
			*normals = mathematical_bold_italic_small_pi;
			return 1;
		case 0x1D746:
			*normals = mathematical_bold_italic_small_rho;
			return 1;
		case 0x1D747:
			*normals = mathematical_bold_italic_small_final_sigma;
			return 1;
		case 0x1D748:
			*normals = mathematical_bold_italic_small_sigma;
			return 1;
		case 0x1D749:
			*normals = mathematical_bold_italic_small_tau;
			return 1;
		case 0x1D74A:
			*normals = mathematical_bold_italic_small_upsilon;
			return 1;
		case 0x1D74B:
			*normals = mathematical_bold_italic_small_phi;
			return 1;
		case 0x1D74C:
			*normals = mathematical_bold_italic_small_chi;
			return 1;
		case 0x1D74D:
			*normals = mathematical_bold_italic_small_psi;
			return 1;
		case 0x1D74E:
			*normals = mathematical_bold_italic_small_omega;
			return 1;
		case 0x1D74F:
			*normals = mathematical_bold_italic_partial_differential;
			return 1;
		case 0x1D750:
			*normals = mathematical_bold_italic_epsilon_symbol;
			return 1;
		case 0x1D751:
			*normals = mathematical_bold_italic_theta_symbol;
			return 1;
		case 0x1D752:
			*normals = mathematical_bold_italic_kappa_symbol;
			return 1;
		case 0x1D753:
			*normals = mathematical_bold_italic_phi_symbol;
			return 1;
		case 0x1D754:
			*normals = mathematical_bold_italic_rho_symbol;
			return 1;
		case 0x1D755:
			*normals = mathematical_bold_italic_pi_symbol;
			return 1;
		case 0x1D756:
			*normals = mathematical_sans_serif_bold_capital_alpha;
			return 1;
		case 0x1D757:
			*normals = mathematical_sans_serif_bold_capital_beta;
			return 1;
		case 0x1D758:
			*normals = mathematical_sans_serif_bold_capital_gamma;
			return 1;
		case 0x1D759:
			*normals = mathematical_sans_serif_bold_capital_delta;
			return 1;
		case 0x1D75A:
			*normals = mathematical_sans_serif_bold_capital_epsilon;
			return 1;
		case 0x1D75B:
			*normals = mathematical_sans_serif_bold_capital_zeta;
			return 1;
		case 0x1D75C:
			*normals = mathematical_sans_serif_bold_capital_eta;
			return 1;
		case 0x1D75D:
			*normals = mathematical_sans_serif_bold_capital_theta;
			return 1;
		case 0x1D75E:
			*normals = mathematical_sans_serif_bold_capital_iota;
			return 1;
		case 0x1D75F:
			*normals = mathematical_sans_serif_bold_capital_kappa;
			return 1;
		case 0x1D760:
			*normals = mathematical_sans_serif_bold_capital_lamda;
			return 1;
		case 0x1D761:
			*normals = mathematical_sans_serif_bold_capital_mu;
			return 1;
		case 0x1D762:
			*normals = mathematical_sans_serif_bold_capital_nu;
			return 1;
		case 0x1D763:
			*normals = mathematical_sans_serif_bold_capital_xi;
			return 1;
		case 0x1D764:
			*normals = mathematical_sans_serif_bold_capital_omicron;
			return 1;
		case 0x1D765:
			*normals = mathematical_sans_serif_bold_capital_pi;
			return 1;
		case 0x1D766:
			*normals = mathematical_sans_serif_bold_capital_rho;
			return 1;
		case 0x1D767:
			*normals = mathematical_sans_serif_bold_capital_theta_symbol;
			return 1;
		case 0x1D768:
			*normals = mathematical_sans_serif_bold_capital_sigma;
			return 1;
		case 0x1D769:
			*normals = mathematical_sans_serif_bold_capital_tau;
			return 1;
		case 0x1D76A:
			*normals = mathematical_sans_serif_bold_capital_upsilon;
			return 1;
		case 0x1D76B:
			*normals = mathematical_sans_serif_bold_capital_phi;
			return 1;
		case 0x1D76C:
			*normals = mathematical_sans_serif_bold_capital_chi;
			return 1;
		case 0x1D76D:
			*normals = mathematical_sans_serif_bold_capital_psi;
			return 1;
		case 0x1D76E:
			*normals = mathematical_sans_serif_bold_capital_omega;
			return 1;
		case 0x1D76F:
			*normals = mathematical_sans_serif_bold_nabla;
			return 1;
		case 0x1D770:
			*normals = mathematical_sans_serif_bold_small_alpha;
			return 1;
		case 0x1D771:
			*normals = mathematical_sans_serif_bold_small_beta;
			return 1;
		case 0x1D772:
			*normals = mathematical_sans_serif_bold_small_gamma;
			return 1;
		case 0x1D773:
			*normals = mathematical_sans_serif_bold_small_delta;
			return 1;
		case 0x1D774:
			*normals = mathematical_sans_serif_bold_small_epsilon;
			return 1;
		case 0x1D775:
			*normals = mathematical_sans_serif_bold_small_zeta;
			return 1;
		case 0x1D776:
			*normals = mathematical_sans_serif_bold_small_eta;
			return 1;
		case 0x1D777:
			*normals = mathematical_sans_serif_bold_small_theta;
			return 1;
		case 0x1D778:
			*normals = mathematical_sans_serif_bold_small_iota;
			return 1;
		case 0x1D779:
			*normals = mathematical_sans_serif_bold_small_kappa;
			return 1;
		case 0x1D77A:
			*normals = mathematical_sans_serif_bold_small_lamda;
			return 1;
		case 0x1D77B:
			*normals = mathematical_sans_serif_bold_small_mu;
			return 1;
		case 0x1D77C:
			*normals = mathematical_sans_serif_bold_small_nu;
			return 1;
		case 0x1D77D:
			*normals = mathematical_sans_serif_bold_small_xi;
			return 1;
		case 0x1D77E:
			*normals = mathematical_sans_serif_bold_small_omicron;
			return 1;
		case 0x1D77F:
			*normals = mathematical_sans_serif_bold_small_pi;
			return 1;
		case 0x1D780:
			*normals = mathematical_sans_serif_bold_small_rho;
			return 1;
		case 0x1D781:
			*normals = mathematical_sans_serif_bold_small_final_sigma;
			return 1;
		case 0x1D782:
			*normals = mathematical_sans_serif_bold_small_sigma;
			return 1;
		case 0x1D783:
			*normals = mathematical_sans_serif_bold_small_tau;
			return 1;
		case 0x1D784:
			*normals = mathematical_sans_serif_bold_small_upsilon;
			return 1;
		case 0x1D785:
			*normals = mathematical_sans_serif_bold_small_phi;
			return 1;
		case 0x1D786:
			*normals = mathematical_sans_serif_bold_small_chi;
			return 1;
		case 0x1D787:
			*normals = mathematical_sans_serif_bold_small_psi;
			return 1;
		case 0x1D788:
			*normals = mathematical_sans_serif_bold_small_omega;
			return 1;
		case 0x1D789:
			*normals = mathematical_sans_serif_bold_partial_differential;
			return 1;
		case 0x1D78A:
			*normals = mathematical_sans_serif_bold_epsilon_symbol;
			return 1;
		case 0x1D78B:
			*normals = mathematical_sans_serif_bold_theta_symbol;
			return 1;
		case 0x1D78C:
			*normals = mathematical_sans_serif_bold_kappa_symbol;
			return 1;
		case 0x1D78D:
			*normals = mathematical_sans_serif_bold_phi_symbol;
			return 1;
		case 0x1D78E:
			*normals = mathematical_sans_serif_bold_rho_symbol;
			return 1;
		case 0x1D78F:
			*normals = mathematical_sans_serif_bold_pi_symbol;
			return 1;
		case 0x1D790:
			*normals = mathematical_sans_serif_bold_italic_capital_alpha;
			return 1;
		case 0x1D791:
			*normals = mathematical_sans_serif_bold_italic_capital_beta;
			return 1;
		case 0x1D792:
			*normals = mathematical_sans_serif_bold_italic_capital_gamma;
			return 1;
		case 0x1D793:
			*normals = mathematical_sans_serif_bold_italic_capital_delta;
			return 1;
		case 0x1D794:
			*normals = mathematical_sans_serif_bold_italic_capital_epsilon;
			return 1;
		case 0x1D795:
			*normals = mathematical_sans_serif_bold_italic_capital_zeta;
			return 1;
		case 0x1D796:
			*normals = mathematical_sans_serif_bold_italic_capital_eta;
			return 1;
		case 0x1D797:
			*normals = mathematical_sans_serif_bold_italic_capital_theta;
			return 1;
		case 0x1D798:
			*normals = mathematical_sans_serif_bold_italic_capital_iota;
			return 1;
		case 0x1D799:
			*normals = mathematical_sans_serif_bold_italic_capital_kappa;
			return 1;
		case 0x1D79A:
			*normals = mathematical_sans_serif_bold_italic_capital_lamda;
			return 1;
		case 0x1D79B:
			*normals = mathematical_sans_serif_bold_italic_capital_mu;
			return 1;
		case 0x1D79C:
			*normals = mathematical_sans_serif_bold_italic_capital_nu;
			return 1;
		case 0x1D79D:
			*normals = mathematical_sans_serif_bold_italic_capital_xi;
			return 1;
		case 0x1D79E:
			*normals = mathematical_sans_serif_bold_italic_capital_omicron;
			return 1;
		case 0x1D79F:
			*normals = mathematical_sans_serif_bold_italic_capital_pi;
			return 1;
		case 0x1D7A0:
			*normals = mathematical_sans_serif_bold_italic_capital_rho;
			return 1;
		case 0x1D7A1:
			*normals = mathematical_sans_serif_bold_italic_capital_theta_symbol;
			return 1;
		case 0x1D7A2:
			*normals = mathematical_sans_serif_bold_italic_capital_sigma;
			return 1;
		case 0x1D7A3:
			*normals = mathematical_sans_serif_bold_italic_capital_tau;
			return 1;
		case 0x1D7A4:
			*normals = mathematical_sans_serif_bold_italic_capital_upsilon;
			return 1;
		case 0x1D7A5:
			*normals = mathematical_sans_serif_bold_italic_capital_phi;
			return 1;
		case 0x1D7A6:
			*normals = mathematical_sans_serif_bold_italic_capital_chi;
			return 1;
		case 0x1D7A7:
			*normals = mathematical_sans_serif_bold_italic_capital_psi;
			return 1;
		case 0x1D7A8:
			*normals = mathematical_sans_serif_bold_italic_capital_omega;
			return 1;
		case 0x1D7A9:
			*normals = mathematical_sans_serif_bold_italic_nabla;
			return 1;
		case 0x1D7AA:
			*normals = mathematical_sans_serif_bold_italic_small_alpha;
			return 1;
		case 0x1D7AB:
			*normals = mathematical_sans_serif_bold_italic_small_beta;
			return 1;
		case 0x1D7AC:
			*normals = mathematical_sans_serif_bold_italic_small_gamma;
			return 1;
		case 0x1D7AD:
			*normals = mathematical_sans_serif_bold_italic_small_delta;
			return 1;
		case 0x1D7AE:
			*normals = mathematical_sans_serif_bold_italic_small_epsilon;
			return 1;
		case 0x1D7AF:
			*normals = mathematical_sans_serif_bold_italic_small_zeta;
			return 1;
		case 0x1D7B0:
			*normals = mathematical_sans_serif_bold_italic_small_eta;
			return 1;
		case 0x1D7B1:
			*normals = mathematical_sans_serif_bold_italic_small_theta;
			return 1;
		case 0x1D7B2:
			*normals = mathematical_sans_serif_bold_italic_small_iota;
			return 1;
		case 0x1D7B3:
			*normals = mathematical_sans_serif_bold_italic_small_kappa;
			return 1;
		case 0x1D7B4:
			*normals = mathematical_sans_serif_bold_italic_small_lamda;
			return 1;
		case 0x1D7B5:
			*normals = mathematical_sans_serif_bold_italic_small_mu;
			return 1;
		case 0x1D7B6:
			*normals = mathematical_sans_serif_bold_italic_small_nu;
			return 1;
		case 0x1D7B7:
			*normals = mathematical_sans_serif_bold_italic_small_xi;
			return 1;
		case 0x1D7B8:
			*normals = mathematical_sans_serif_bold_italic_small_omicron;
			return 1;
		case 0x1D7B9:
			*normals = mathematical_sans_serif_bold_italic_small_pi;
			return 1;
		case 0x1D7BA:
			*normals = mathematical_sans_serif_bold_italic_small_rho;
			return 1;
		case 0x1D7BB:
			*normals = mathematical_sans_serif_bold_italic_small_final_sigma;
			return 1;
		case 0x1D7BC:
			*normals = mathematical_sans_serif_bold_italic_small_sigma;
			return 1;
		case 0x1D7BD:
			*normals = mathematical_sans_serif_bold_italic_small_tau;
			return 1;
		case 0x1D7BE:
			*normals = mathematical_sans_serif_bold_italic_small_upsilon;
			return 1;
		case 0x1D7BF:
			*normals = mathematical_sans_serif_bold_italic_small_phi;
			return 1;
		case 0x1D7C0:
			*normals = mathematical_sans_serif_bold_italic_small_chi;
			return 1;
		case 0x1D7C1:
			*normals = mathematical_sans_serif_bold_italic_small_psi;
			return 1;
		case 0x1D7C2:
			*normals = mathematical_sans_serif_bold_italic_small_omega;
			return 1;
		case 0x1D7C3:
			*normals = mathematical_sans_serif_bold_italic_partial_differential;
			return 1;
		case 0x1D7C4:
			*normals = mathematical_sans_serif_bold_italic_epsilon_symbol;
			return 1;
		case 0x1D7C5:
			*normals = mathematical_sans_serif_bold_italic_theta_symbol;
			return 1;
		case 0x1D7C6:
			*normals = mathematical_sans_serif_bold_italic_kappa_symbol;
			return 1;
		case 0x1D7C7:
			*normals = mathematical_sans_serif_bold_italic_phi_symbol;
			return 1;
		case 0x1D7C8:
			*normals = mathematical_sans_serif_bold_italic_rho_symbol;
			return 1;
		case 0x1D7C9:
			*normals = mathematical_sans_serif_bold_italic_pi_symbol;
			return 1;
		case 0x1D7CA:
			*normals = mathematical_bold_capital_digamma;
			return 1;
		case 0x1D7CB:
			*normals = mathematical_bold_small_digamma;
			return 1;
		case 0x1D7CE:
			*normals = mathematical_bold_digit_zero;
			return 1;
		case 0x1D7CF:
			*normals = mathematical_bold_digit_one;
			return 1;
		case 0x1D7D0:
			*normals = mathematical_bold_digit_two;
			return 1;
		case 0x1D7D1:
			*normals = mathematical_bold_digit_three;
			return 1;
		case 0x1D7D2:
			*normals = mathematical_bold_digit_four;
			return 1;
		case 0x1D7D3:
			*normals = mathematical_bold_digit_five;
			return 1;
		case 0x1D7D4:
			*normals = mathematical_bold_digit_six;
			return 1;
		case 0x1D7D5:
			*normals = mathematical_bold_digit_seven;
			return 1;
		case 0x1D7D6:
			*normals = mathematical_bold_digit_eight;
			return 1;
		case 0x1D7D7:
			*normals = mathematical_bold_digit_nine;
			return 1;
		case 0x1D7D8:
			*normals = mathematical_double_struck_digit_zero;
			return 1;
		case 0x1D7D9:
			*normals = mathematical_double_struck_digit_one;
			return 1;
		case 0x1D7DA:
			*normals = mathematical_double_struck_digit_two;
			return 1;
		case 0x1D7DB:
			*normals = mathematical_double_struck_digit_three;
			return 1;
		case 0x1D7DC:
			*normals = mathematical_double_struck_digit_four;
			return 1;
		case 0x1D7DD:
			*normals = mathematical_double_struck_digit_five;
			return 1;
		case 0x1D7DE:
			*normals = mathematical_double_struck_digit_six;
			return 1;
		case 0x1D7DF:
			*normals = mathematical_double_struck_digit_seven;
			return 1;
		case 0x1D7E0:
			*normals = mathematical_double_struck_digit_eight;
			return 1;
		case 0x1D7E1:
			*normals = mathematical_double_struck_digit_nine;
			return 1;
		case 0x1D7E2:
			*normals = mathematical_sans_serif_digit_zero;
			return 1;
		case 0x1D7E3:
			*normals = mathematical_sans_serif_digit_one;
			return 1;
		case 0x1D7E4:
			*normals = mathematical_sans_serif_digit_two;
			return 1;
		case 0x1D7E5:
			*normals = mathematical_sans_serif_digit_three;
			return 1;
		case 0x1D7E6:
			*normals = mathematical_sans_serif_digit_four;
			return 1;
		case 0x1D7E7:
			*normals = mathematical_sans_serif_digit_five;
			return 1;
		case 0x1D7E8:
			*normals = mathematical_sans_serif_digit_six;
			return 1;
		case 0x1D7E9:
			*normals = mathematical_sans_serif_digit_seven;
			return 1;
		case 0x1D7EA:
			*normals = mathematical_sans_serif_digit_eight;
			return 1;
		case 0x1D7EB:
			*normals = mathematical_sans_serif_digit_nine;
			return 1;
		case 0x1D7EC:
			*normals = mathematical_sans_serif_bold_digit_zero;
			return 1;
		case 0x1D7ED:
			*normals = mathematical_sans_serif_bold_digit_one;
			return 1;
		case 0x1D7EE:
			*normals = mathematical_sans_serif_bold_digit_two;
			return 1;
		case 0x1D7EF:
			*normals = mathematical_sans_serif_bold_digit_three;
			return 1;
		case 0x1D7F0:
			*normals = mathematical_sans_serif_bold_digit_four;
			return 1;
		case 0x1D7F1:
			*normals = mathematical_sans_serif_bold_digit_five;
			return 1;
		case 0x1D7F2:
			*normals = mathematical_sans_serif_bold_digit_six;
			return 1;
		case 0x1D7F3:
			*normals = mathematical_sans_serif_bold_digit_seven;
			return 1;
		case 0x1D7F4:
			*normals = mathematical_sans_serif_bold_digit_eight;
			return 1;
		case 0x1D7F5:
			*normals = mathematical_sans_serif_bold_digit_nine;
			return 1;
		case 0x1D7F6:
			*normals = mathematical_monospace_digit_zero;
			return 1;
		case 0x1D7F7:
			*normals = mathematical_monospace_digit_one;
			return 1;
		case 0x1D7F8:
			*normals = mathematical_monospace_digit_two;
			return 1;
		case 0x1D7F9:
			*normals = mathematical_monospace_digit_three;
			return 1;
		case 0x1D7FA:
			*normals = mathematical_monospace_digit_four;
			return 1;
		case 0x1D7FB:
			*normals = mathematical_monospace_digit_five;
			return 1;
		case 0x1D7FC:
			*normals = mathematical_monospace_digit_six;
			return 1;
		case 0x1D7FD:
			*normals = mathematical_monospace_digit_seven;
			return 1;
		case 0x1D7FE:
			*normals = mathematical_monospace_digit_eight;
			return 1;
		case 0x1D7FF:
			*normals = mathematical_monospace_digit_nine;
			return 1;
		case 0x1EE00:
			*normals = arabic_mathematical_alef;
			return 1;
		case 0x1EE01:
			*normals = arabic_mathematical_beh;
			return 1;
		case 0x1EE02:
			*normals = arabic_mathematical_jeem;
			return 1;
		case 0x1EE03:
			*normals = arabic_mathematical_dal;
			return 1;
		case 0x1EE05:
			*normals = arabic_mathematical_waw;
			return 1;
		case 0x1EE06:
			*normals = arabic_mathematical_zain;
			return 1;
		case 0x1EE07:
			*normals = arabic_mathematical_hah;
			return 1;
		case 0x1EE08:
			*normals = arabic_mathematical_tah;
			return 1;
		case 0x1EE09:
			*normals = arabic_mathematical_yeh;
			return 1;
		case 0x1EE0A:
			*normals = arabic_mathematical_kaf;
			return 1;
		case 0x1EE0B:
			*normals = arabic_mathematical_lam;
			return 1;
		case 0x1EE0C:
			*normals = arabic_mathematical_meem;
			return 1;
		case 0x1EE0D:
			*normals = arabic_mathematical_noon;
			return 1;
		case 0x1EE0E:
			*normals = arabic_mathematical_seen;
			return 1;
		case 0x1EE0F:
			*normals = arabic_mathematical_ain;
			return 1;
		case 0x1EE10:
			*normals = arabic_mathematical_feh;
			return 1;
		case 0x1EE11:
			*normals = arabic_mathematical_sad;
			return 1;
		case 0x1EE12:
			*normals = arabic_mathematical_qaf;
			return 1;
		case 0x1EE13:
			*normals = arabic_mathematical_reh;
			return 1;
		case 0x1EE14:
			*normals = arabic_mathematical_sheen;
			return 1;
		case 0x1EE15:
			*normals = arabic_mathematical_teh;
			return 1;
		case 0x1EE16:
			*normals = arabic_mathematical_theh;
			return 1;
		case 0x1EE17:
			*normals = arabic_mathematical_khah;
			return 1;
		case 0x1EE18:
			*normals = arabic_mathematical_thal;
			return 1;
		case 0x1EE19:
			*normals = arabic_mathematical_dad;
			return 1;
		case 0x1EE1A:
			*normals = arabic_mathematical_zah;
			return 1;
		case 0x1EE1B:
			*normals = arabic_mathematical_ghain;
			return 1;
		case 0x1EE1C:
			*normals = arabic_mathematical_dotless_beh;
			return 1;
		case 0x1EE1D:
			*normals = arabic_mathematical_dotless_noon;
			return 1;
		case 0x1EE1E:
			*normals = arabic_mathematical_dotless_feh;
			return 1;
		case 0x1EE1F:
			*normals = arabic_mathematical_dotless_qaf;
			return 1;
		case 0x1EE21:
			*normals = arabic_mathematical_initial_beh;
			return 1;
		case 0x1EE22:
			*normals = arabic_mathematical_initial_jeem;
			return 1;
		case 0x1EE24:
			*normals = arabic_mathematical_initial_heh;
			return 1;
		case 0x1EE27:
			*normals = arabic_mathematical_initial_hah;
			return 1;
		case 0x1EE29:
			*normals = arabic_mathematical_initial_yeh;
			return 1;
		case 0x1EE2A:
			*normals = arabic_mathematical_initial_kaf;
			return 1;
		case 0x1EE2B:
			*normals = arabic_mathematical_initial_lam;
			return 1;
		case 0x1EE2C:
			*normals = arabic_mathematical_initial_meem;
			return 1;
		case 0x1EE2D:
			*normals = arabic_mathematical_initial_noon;
			return 1;
		case 0x1EE2E:
			*normals = arabic_mathematical_initial_seen;
			return 1;
		case 0x1EE2F:
			*normals = arabic_mathematical_initial_ain;
			return 1;
		case 0x1EE30:
			*normals = arabic_mathematical_initial_feh;
			return 1;
		case 0x1EE31:
			*normals = arabic_mathematical_initial_sad;
			return 1;
		case 0x1EE32:
			*normals = arabic_mathematical_initial_qaf;
			return 1;
		case 0x1EE34:
			*normals = arabic_mathematical_initial_sheen;
			return 1;
		case 0x1EE35:
			*normals = arabic_mathematical_initial_teh;
			return 1;
		case 0x1EE36:
			*normals = arabic_mathematical_initial_theh;
			return 1;
		case 0x1EE37:
			*normals = arabic_mathematical_initial_khah;
			return 1;
		case 0x1EE39:
			*normals = arabic_mathematical_initial_dad;
			return 1;
		case 0x1EE3B:
			*normals = arabic_mathematical_initial_ghain;
			return 1;
		case 0x1EE42:
			*normals = arabic_mathematical_tailed_jeem;
			return 1;
		case 0x1EE47:
			*normals = arabic_mathematical_tailed_hah;
			return 1;
		case 0x1EE49:
			*normals = arabic_mathematical_tailed_yeh;
			return 1;
		case 0x1EE4B:
			*normals = arabic_mathematical_tailed_lam;
			return 1;
		case 0x1EE4D:
			*normals = arabic_mathematical_tailed_noon;
			return 1;
		case 0x1EE4E:
			*normals = arabic_mathematical_tailed_seen;
			return 1;
		case 0x1EE4F:
			*normals = arabic_mathematical_tailed_ain;
			return 1;
		case 0x1EE51:
			*normals = arabic_mathematical_tailed_sad;
			return 1;
		case 0x1EE52:
			*normals = arabic_mathematical_tailed_qaf;
			return 1;
		case 0x1EE54:
			*normals = arabic_mathematical_tailed_sheen;
			return 1;
		case 0x1EE57:
			*normals = arabic_mathematical_tailed_khah;
			return 1;
		case 0x1EE59:
			*normals = arabic_mathematical_tailed_dad;
			return 1;
		case 0x1EE5B:
			*normals = arabic_mathematical_tailed_ghain;
			return 1;
		case 0x1EE5D:
			*normals = arabic_mathematical_tailed_dotless_noon;
			return 1;
		case 0x1EE5F:
			*normals = arabic_mathematical_tailed_dotless_qaf;
			return 1;
		case 0x1EE61:
			*normals = arabic_mathematical_stretched_beh;
			return 1;
		case 0x1EE62:
			*normals = arabic_mathematical_stretched_jeem;
			return 1;
		case 0x1EE64:
			*normals = arabic_mathematical_stretched_heh;
			return 1;
		case 0x1EE67:
			*normals = arabic_mathematical_stretched_hah;
			return 1;
		case 0x1EE68:
			*normals = arabic_mathematical_stretched_tah;
			return 1;
		case 0x1EE69:
			*normals = arabic_mathematical_stretched_yeh;
			return 1;
		case 0x1EE6A:
			*normals = arabic_mathematical_stretched_kaf;
			return 1;
		case 0x1EE6C:
			*normals = arabic_mathematical_stretched_meem;
			return 1;
		case 0x1EE6D:
			*normals = arabic_mathematical_stretched_noon;
			return 1;
		case 0x1EE6E:
			*normals = arabic_mathematical_stretched_seen;
			return 1;
		case 0x1EE6F:
			*normals = arabic_mathematical_stretched_ain;
			return 1;
		case 0x1EE70:
			*normals = arabic_mathematical_stretched_feh;
			return 1;
		case 0x1EE71:
			*normals = arabic_mathematical_stretched_sad;
			return 1;
		case 0x1EE72:
			*normals = arabic_mathematical_stretched_qaf;
			return 1;
		case 0x1EE74:
			*normals = arabic_mathematical_stretched_sheen;
			return 1;
		case 0x1EE75:
			*normals = arabic_mathematical_stretched_teh;
			return 1;
		case 0x1EE76:
			*normals = arabic_mathematical_stretched_theh;
			return 1;
		case 0x1EE77:
			*normals = arabic_mathematical_stretched_khah;
			return 1;
		case 0x1EE79:
			*normals = arabic_mathematical_stretched_dad;
			return 1;
		case 0x1EE7A:
			*normals = arabic_mathematical_stretched_zah;
			return 1;
		case 0x1EE7B:
			*normals = arabic_mathematical_stretched_ghain;
			return 1;
		case 0x1EE7C:
			*normals = arabic_mathematical_stretched_dotless_beh;
			return 1;
		case 0x1EE7E:
			*normals = arabic_mathematical_stretched_dotless_feh;
			return 1;
		case 0x1EE80:
			*normals = arabic_mathematical_looped_alef;
			return 1;
		case 0x1EE81:
			*normals = arabic_mathematical_looped_beh;
			return 1;
		case 0x1EE82:
			*normals = arabic_mathematical_looped_jeem;
			return 1;
		case 0x1EE83:
			*normals = arabic_mathematical_looped_dal;
			return 1;
		case 0x1EE84:
			*normals = arabic_mathematical_looped_heh;
			return 1;
		case 0x1EE85:
			*normals = arabic_mathematical_looped_waw;
			return 1;
		case 0x1EE86:
			*normals = arabic_mathematical_looped_zain;
			return 1;
		case 0x1EE87:
			*normals = arabic_mathematical_looped_hah;
			return 1;
		case 0x1EE88:
			*normals = arabic_mathematical_looped_tah;
			return 1;
		case 0x1EE89:
			*normals = arabic_mathematical_looped_yeh;
			return 1;
		case 0x1EE8B:
			*normals = arabic_mathematical_looped_lam;
			return 1;
		case 0x1EE8C:
			*normals = arabic_mathematical_looped_meem;
			return 1;
		case 0x1EE8D:
			*normals = arabic_mathematical_looped_noon;
			return 1;
		case 0x1EE8E:
			*normals = arabic_mathematical_looped_seen;
			return 1;
		case 0x1EE8F:
			*normals = arabic_mathematical_looped_ain;
			return 1;
		case 0x1EE90:
			*normals = arabic_mathematical_looped_feh;
			return 1;
		case 0x1EE91:
			*normals = arabic_mathematical_looped_sad;
			return 1;
		case 0x1EE92:
			*normals = arabic_mathematical_looped_qaf;
			return 1;
		case 0x1EE93:
			*normals = arabic_mathematical_looped_reh;
			return 1;
		case 0x1EE94:
			*normals = arabic_mathematical_looped_sheen;
			return 1;
		case 0x1EE95:
			*normals = arabic_mathematical_looped_teh;
			return 1;
		case 0x1EE96:
			*normals = arabic_mathematical_looped_theh;
			return 1;
		case 0x1EE97:
			*normals = arabic_mathematical_looped_khah;
			return 1;
		case 0x1EE98:
			*normals = arabic_mathematical_looped_thal;
			return 1;
		case 0x1EE99:
			*normals = arabic_mathematical_looped_dad;
			return 1;
		case 0x1EE9A:
			*normals = arabic_mathematical_looped_zah;
			return 1;
		case 0x1EE9B:
			*normals = arabic_mathematical_looped_ghain;
			return 1;
		case 0x1EEA1:
			*normals = arabic_mathematical_double_struck_beh;
			return 1;
		case 0x1EEA2:
			*normals = arabic_mathematical_double_struck_jeem;
			return 1;
		case 0x1EEA3:
			*normals = arabic_mathematical_double_struck_dal;
			return 1;
		case 0x1EEA5:
			*normals = arabic_mathematical_double_struck_waw;
			return 1;
		case 0x1EEA6:
			*normals = arabic_mathematical_double_struck_zain;
			return 1;
		case 0x1EEA7:
			*normals = arabic_mathematical_double_struck_hah;
			return 1;
		case 0x1EEA8:
			*normals = arabic_mathematical_double_struck_tah;
			return 1;
		case 0x1EEA9:
			*normals = arabic_mathematical_double_struck_yeh;
			return 1;
		case 0x1EEAB:
			*normals = arabic_mathematical_double_struck_lam;
			return 1;
		case 0x1EEAC:
			*normals = arabic_mathematical_double_struck_meem;
			return 1;
		case 0x1EEAD:
			*normals = arabic_mathematical_double_struck_noon;
			return 1;
		case 0x1EEAE:
			*normals = arabic_mathematical_double_struck_seen;
			return 1;
		case 0x1EEAF:
			*normals = arabic_mathematical_double_struck_ain;
			return 1;
		case 0x1EEB0:
			*normals = arabic_mathematical_double_struck_feh;
			return 1;
		case 0x1EEB1:
			*normals = arabic_mathematical_double_struck_sad;
			return 1;
		case 0x1EEB2:
			*normals = arabic_mathematical_double_struck_qaf;
			return 1;
		case 0x1EEB3:
			*normals = arabic_mathematical_double_struck_reh;
			return 1;
		case 0x1EEB4:
			*normals = arabic_mathematical_double_struck_sheen;
			return 1;
		case 0x1EEB5:
			*normals = arabic_mathematical_double_struck_teh;
			return 1;
		case 0x1EEB6:
			*normals = arabic_mathematical_double_struck_theh;
			return 1;
		case 0x1EEB7:
			*normals = arabic_mathematical_double_struck_khah;
			return 1;
		case 0x1EEB8:
			*normals = arabic_mathematical_double_struck_thal;
			return 1;
		case 0x1EEB9:
			*normals = arabic_mathematical_double_struck_dad;
			return 1;
		case 0x1EEBA:
			*normals = arabic_mathematical_double_struck_zah;
			return 1;
		case 0x1EEBB:
			*normals = arabic_mathematical_double_struck_ghain;
			return 1;
		case 0x1F100:
			*normals = digit_zero_full_stop;
			return 2;
		case 0x1F101:
			*normals = digit_zero_comma;
			return 2;
		case 0x1F102:
			*normals = digit_one_comma;
			return 2;
		case 0x1F103:
			*normals = digit_two_comma;
			return 2;
		case 0x1F104:
			*normals = digit_three_comma;
			return 2;
		case 0x1F105:
			*normals = digit_four_comma;
			return 2;
		case 0x1F106:
			*normals = digit_five_comma;
			return 2;
		case 0x1F107:
			*normals = digit_six_comma;
			return 2;
		case 0x1F108:
			*normals = digit_seven_comma;
			return 2;
		case 0x1F109:
			*normals = digit_eight_comma;
			return 2;
		case 0x1F10A:
			*normals = digit_nine_comma;
			return 2;
		case 0x1F110:
			*normals = parenthesized_latin_capital_letter_a;
			return 3;
		case 0x1F111:
			*normals = parenthesized_latin_capital_letter_b;
			return 3;
		case 0x1F112:
			*normals = parenthesized_latin_capital_letter_c;
			return 3;
		case 0x1F113:
			*normals = parenthesized_latin_capital_letter_d;
			return 3;
		case 0x1F114:
			*normals = parenthesized_latin_capital_letter_e;
			return 3;
		case 0x1F115:
			*normals = parenthesized_latin_capital_letter_f;
			return 3;
		case 0x1F116:
			*normals = parenthesized_latin_capital_letter_g;
			return 3;
		case 0x1F117:
			*normals = parenthesized_latin_capital_letter_h;
			return 3;
		case 0x1F118:
			*normals = parenthesized_latin_capital_letter_i;
			return 3;
		case 0x1F119:
			*normals = parenthesized_latin_capital_letter_j;
			return 3;
		case 0x1F11A:
			*normals = parenthesized_latin_capital_letter_k;
			return 3;
		case 0x1F11B:
			*normals = parenthesized_latin_capital_letter_l;
			return 3;
		case 0x1F11C:
			*normals = parenthesized_latin_capital_letter_m;
			return 3;
		case 0x1F11D:
			*normals = parenthesized_latin_capital_letter_n;
			return 3;
		case 0x1F11E:
			*normals = parenthesized_latin_capital_letter_o;
			return 3;
		case 0x1F11F:
			*normals = parenthesized_latin_capital_letter_p;
			return 3;
		case 0x1F120:
			*normals = parenthesized_latin_capital_letter_q;
			return 3;
		case 0x1F121:
			*normals = parenthesized_latin_capital_letter_r;
			return 3;
		case 0x1F122:
			*normals = parenthesized_latin_capital_letter_s;
			return 3;
		case 0x1F123:
			*normals = parenthesized_latin_capital_letter_t;
			return 3;
		case 0x1F124:
			*normals = parenthesized_latin_capital_letter_u;
			return 3;
		case 0x1F125:
			*normals = parenthesized_latin_capital_letter_v;
			return 3;
		case 0x1F126:
			*normals = parenthesized_latin_capital_letter_w;
			return 3;
		case 0x1F127:
			*normals = parenthesized_latin_capital_letter_x;
			return 3;
		case 0x1F128:
			*normals = parenthesized_latin_capital_letter_y;
			return 3;
		case 0x1F129:
			*normals = parenthesized_latin_capital_letter_z;
			return 3;
		case 0x1F12A:
			*normals = tortoise_shell_bracketed_latin_capital_letter_s;
			return 3;
		case 0x1F12B:
			*normals = circled_italic_latin_capital_letter_c;
			return 1;
		case 0x1F12C:
			*normals = circled_italic_latin_capital_letter_r;
			return 1;
		case 0x1F12D:
			*normals = circled_cd;
			return 2;
		case 0x1F12E:
			*normals = circled_wz;
			return 2;
		case 0x1F130:
			*normals = squared_latin_capital_letter_a;
			return 1;
		case 0x1F131:
			*normals = squared_latin_capital_letter_b;
			return 1;
		case 0x1F132:
			*normals = squared_latin_capital_letter_c;
			return 1;
		case 0x1F133:
			*normals = squared_latin_capital_letter_d;
			return 1;
		case 0x1F134:
			*normals = squared_latin_capital_letter_e;
			return 1;
		case 0x1F135:
			*normals = squared_latin_capital_letter_f;
			return 1;
		case 0x1F136:
			*normals = squared_latin_capital_letter_g;
			return 1;
		case 0x1F137:
			*normals = squared_latin_capital_letter_h;
			return 1;
		case 0x1F138:
			*normals = squared_latin_capital_letter_i;
			return 1;
		case 0x1F139:
			*normals = squared_latin_capital_letter_j;
			return 1;
		case 0x1F13A:
			*normals = squared_latin_capital_letter_k;
			return 1;
		case 0x1F13B:
			*normals = squared_latin_capital_letter_l;
			return 1;
		case 0x1F13C:
			*normals = squared_latin_capital_letter_m;
			return 1;
		case 0x1F13D:
			*normals = squared_latin_capital_letter_n;
			return 1;
		case 0x1F13E:
			*normals = squared_latin_capital_letter_o;
			return 1;
		case 0x1F13F:
			*normals = squared_latin_capital_letter_p;
			return 1;
		case 0x1F140:
			*normals = squared_latin_capital_letter_q;
			return 1;
		case 0x1F141:
			*normals = squared_latin_capital_letter_r;
			return 1;
		case 0x1F142:
			*normals = squared_latin_capital_letter_s;
			return 1;
		case 0x1F143:
			*normals = squared_latin_capital_letter_t;
			return 1;
		case 0x1F144:
			*normals = squared_latin_capital_letter_u;
			return 1;
		case 0x1F145:
			*normals = squared_latin_capital_letter_v;
			return 1;
		case 0x1F146:
			*normals = squared_latin_capital_letter_w;
			return 1;
		case 0x1F147:
			*normals = squared_latin_capital_letter_x;
			return 1;
		case 0x1F148:
			*normals = squared_latin_capital_letter_y;
			return 1;
		case 0x1F149:
			*normals = squared_latin_capital_letter_z;
			return 1;
		case 0x1F14A:
			*normals = squared_hv;
			return 2;
		case 0x1F14B:
			*normals = squared_mv;
			return 2;
		case 0x1F14C:
			*normals = squared_sd;
			return 2;
		case 0x1F14D:
			*normals = squared_ss;
			return 2;
		case 0x1F14E:
			*normals = squared_ppv;
			return 3;
		case 0x1F14F:
			*normals = squared_wc;
			return 2;
		case 0x1F16A:
			*normals = raised_mc_sign;
			return 2;
		case 0x1F16B:
			*normals = raised_md_sign;
			return 2;
		case 0x1F16C:
			*normals = raised_mr_sign;
			return 2;
		case 0x1F190:
			*normals = square_dj;
			return 2;
		case 0x1F200:
			*normals = square_hiragana_hoka;
			return 2;
		case 0x1F201:
			*normals = squared_katakana_koko;
			return 2;
		case 0x1F202:
			*normals = squared_katakana_sa;
			return 1;
		case 0x1F210:
			*normals = squared_cjk_unified_ideograph_624b;
			return 1;
		case 0x1F211:
			*normals = squared_cjk_unified_ideograph_5b57;
			return 1;
		case 0x1F212:
			*normals = squared_cjk_unified_ideograph_53cc;
			return 1;
		case 0x1F213:
			*normals = squared_katakana_de;
			return 1;
		case 0x1F214:
			*normals = squared_cjk_unified_ideograph_4e8c;
			return 1;
		case 0x1F215:
			*normals = squared_cjk_unified_ideograph_591a;
			return 1;
		case 0x1F216:
			*normals = squared_cjk_unified_ideograph_89e3;
			return 1;
		case 0x1F217:
			*normals = squared_cjk_unified_ideograph_5929;
			return 1;
		case 0x1F218:
			*normals = squared_cjk_unified_ideograph_4ea4;
			return 1;
		case 0x1F219:
			*normals = squared_cjk_unified_ideograph_6620;
			return 1;
		case 0x1F21A:
			*normals = squared_cjk_unified_ideograph_7121;
			return 1;
		case 0x1F21B:
			*normals = squared_cjk_unified_ideograph_6599;
			return 1;
		case 0x1F21C:
			*normals = squared_cjk_unified_ideograph_524d;
			return 1;
		case 0x1F21D:
			*normals = squared_cjk_unified_ideograph_5f8c;
			return 1;
		case 0x1F21E:
			*normals = squared_cjk_unified_ideograph_518d;
			return 1;
		case 0x1F21F:
			*normals = squared_cjk_unified_ideograph_65b0;
			return 1;
		case 0x1F220:
			*normals = squared_cjk_unified_ideograph_521d;
			return 1;
		case 0x1F221:
			*normals = squared_cjk_unified_ideograph_7d42;
			return 1;
		case 0x1F222:
			*normals = squared_cjk_unified_ideograph_751f;
			return 1;
		case 0x1F223:
			*normals = squared_cjk_unified_ideograph_8ca9;
			return 1;
		case 0x1F224:
			*normals = squared_cjk_unified_ideograph_58f0;
			return 1;
		case 0x1F225:
			*normals = squared_cjk_unified_ideograph_5439;
			return 1;
		case 0x1F226:
			*normals = squared_cjk_unified_ideograph_6f14;
			return 1;
		case 0x1F227:
			*normals = squared_cjk_unified_ideograph_6295;
			return 1;
		case 0x1F228:
			*normals = squared_cjk_unified_ideograph_6355;
			return 1;
		case 0x1F229:
			*normals = squared_cjk_unified_ideograph_4e00;
			return 1;
		case 0x1F22A:
			*normals = squared_cjk_unified_ideograph_4e09;
			return 1;
		case 0x1F22B:
			*normals = squared_cjk_unified_ideograph_904a;
			return 1;
		case 0x1F22C:
			*normals = squared_cjk_unified_ideograph_5de6;
			return 1;
		case 0x1F22D:
			*normals = squared_cjk_unified_ideograph_4e2d;
			return 1;
		case 0x1F22E:
			*normals = squared_cjk_unified_ideograph_53f3;
			return 1;
		case 0x1F22F:
			*normals = squared_cjk_unified_ideograph_6307;
			return 1;
		case 0x1F230:
			*normals = squared_cjk_unified_ideograph_8d70;
			return 1;
		case 0x1F231:
			*normals = squared_cjk_unified_ideograph_6253;
			return 1;
		case 0x1F232:
			*normals = squared_cjk_unified_ideograph_7981;
			return 1;
		case 0x1F233:
			*normals = squared_cjk_unified_ideograph_7a7a;
			return 1;
		case 0x1F234:
			*normals = squared_cjk_unified_ideograph_5408;
			return 1;
		case 0x1F235:
			*normals = squared_cjk_unified_ideograph_6e80;
			return 1;
		case 0x1F236:
			*normals = squared_cjk_unified_ideograph_6709;
			return 1;
		case 0x1F237:
			*normals = squared_cjk_unified_ideograph_6708;
			return 1;
		case 0x1F238:
			*normals = squared_cjk_unified_ideograph_7533;
			return 1;
		case 0x1F239:
			*normals = squared_cjk_unified_ideograph_5272;
			return 1;
		case 0x1F23A:
			*normals = squared_cjk_unified_ideograph_55b6;
			return 1;
		case 0x1F23B:
			*normals = squared_cjk_unified_ideograph_914d;
			return 1;
		case 0x1F240:
			*normals = tortoise_shell_bracketed_cjk_unified_ideograph_672c;
			return 3;
		case 0x1F241:
			*normals = tortoise_shell_bracketed_cjk_unified_ideograph_4e09;
			return 3;
		case 0x1F242:
			*normals = tortoise_shell_bracketed_cjk_unified_ideograph_4e8c;
			return 3;
		case 0x1F243:
			*normals = tortoise_shell_bracketed_cjk_unified_ideograph_5b89;
			return 3;
		case 0x1F244:
			*normals = tortoise_shell_bracketed_cjk_unified_ideograph_70b9;
			return 3;
		case 0x1F245:
			*normals = tortoise_shell_bracketed_cjk_unified_ideograph_6253;
			return 3;
		case 0x1F246:
			*normals = tortoise_shell_bracketed_cjk_unified_ideograph_76d7;
			return 3;
		case 0x1F247:
			*normals = tortoise_shell_bracketed_cjk_unified_ideograph_52dd;
			return 3;
		case 0x1F248:
			*normals = tortoise_shell_bracketed_cjk_unified_ideograph_6557;
			return 3;
		case 0x1F250:
			*normals = circled_ideograph_advantage;
			return 1;
		case 0x1F251:
			*normals = circled_ideograph_accept;
			return 1;
		case 0x1FBF0:
			*normals = segmented_digit_zero;
			return 1;
		case 0x1FBF1:
			*normals = segmented_digit_one;
			return 1;
		case 0x1FBF2:
			*normals = segmented_digit_two;
			return 1;
		case 0x1FBF3:
			*normals = segmented_digit_three;
			return 1;
		case 0x1FBF4:
			*normals = segmented_digit_four;
			return 1;
		case 0x1FBF5:
			*normals = segmented_digit_five;
			return 1;
		case 0x1FBF6:
			*normals = segmented_digit_six;
			return 1;
		case 0x1FBF7:
			*normals = segmented_digit_seven;
			return 1;
		case 0x1FBF8:
			*normals = segmented_digit_eight;
			return 1;
		case 0x1FBF9:
			*normals = segmented_digit_nine;
			return 1;
		case 0x2F800:
			*normals = cjk_compatibility_ideograph_2f800;
			return 1;
		case 0x2F801:
			*normals = cjk_compatibility_ideograph_2f801;
			return 1;
		case 0x2F802:
			*normals = cjk_compatibility_ideograph_2f802;
			return 1;
		case 0x2F803:
			*normals = cjk_compatibility_ideograph_2f803;
			return 1;
		case 0x2F804:
			*normals = cjk_compatibility_ideograph_2f804;
			return 1;
		case 0x2F805:
			*normals = cjk_compatibility_ideograph_2f805;
			return 1;
		case 0x2F806:
			*normals = cjk_compatibility_ideograph_2f806;
			return 1;
		case 0x2F807:
			*normals = cjk_compatibility_ideograph_2f807;
			return 1;
		case 0x2F808:
			*normals = cjk_compatibility_ideograph_2f808;
			return 1;
		case 0x2F809:
			*normals = cjk_compatibility_ideograph_2f809;
			return 1;
		case 0x2F80A:
			*normals = cjk_compatibility_ideograph_2f80a;
			return 1;
		case 0x2F80B:
			*normals = cjk_compatibility_ideograph_2f80b;
			return 1;
		case 0x2F80C:
			*normals = cjk_compatibility_ideograph_2f80c;
			return 1;
		case 0x2F80D:
			*normals = cjk_compatibility_ideograph_2f80d;
			return 1;
		case 0x2F80E:
			*normals = cjk_compatibility_ideograph_2f80e;
			return 1;
		case 0x2F80F:
			*normals = cjk_compatibility_ideograph_2f80f;
			return 1;
		case 0x2F810:
			*normals = cjk_compatibility_ideograph_2f810;
			return 1;
		case 0x2F811:
			*normals = cjk_compatibility_ideograph_2f811;
			return 1;
		case 0x2F812:
			*normals = cjk_compatibility_ideograph_2f812;
			return 1;
		case 0x2F813:
			*normals = cjk_compatibility_ideograph_2f813;
			return 1;
		case 0x2F814:
			*normals = cjk_compatibility_ideograph_2f814;
			return 1;
		case 0x2F815:
			*normals = cjk_compatibility_ideograph_2f815;
			return 1;
		case 0x2F816:
			*normals = cjk_compatibility_ideograph_2f816;
			return 1;
		case 0x2F817:
			*normals = cjk_compatibility_ideograph_2f817;
			return 1;
		case 0x2F818:
			*normals = cjk_compatibility_ideograph_2f818;
			return 1;
		case 0x2F819:
			*normals = cjk_compatibility_ideograph_2f819;
			return 1;
		case 0x2F81A:
			*normals = cjk_compatibility_ideograph_2f81a;
			return 1;
		case 0x2F81B:
			*normals = cjk_compatibility_ideograph_2f81b;
			return 1;
		case 0x2F81C:
			*normals = cjk_compatibility_ideograph_2f81c;
			return 1;
		case 0x2F81D:
			*normals = cjk_compatibility_ideograph_2f81d;
			return 1;
		case 0x2F81E:
			*normals = cjk_compatibility_ideograph_2f81e;
			return 1;
		case 0x2F81F:
			*normals = cjk_compatibility_ideograph_2f81f;
			return 1;
		case 0x2F820:
			*normals = cjk_compatibility_ideograph_2f820;
			return 1;
		case 0x2F821:
			*normals = cjk_compatibility_ideograph_2f821;
			return 1;
		case 0x2F822:
			*normals = cjk_compatibility_ideograph_2f822;
			return 1;
		case 0x2F823:
			*normals = cjk_compatibility_ideograph_2f823;
			return 1;
		case 0x2F824:
			*normals = cjk_compatibility_ideograph_2f824;
			return 1;
		case 0x2F825:
			*normals = cjk_compatibility_ideograph_2f825;
			return 1;
		case 0x2F826:
			*normals = cjk_compatibility_ideograph_2f826;
			return 1;
		case 0x2F827:
			*normals = cjk_compatibility_ideograph_2f827;
			return 1;
		case 0x2F828:
			*normals = cjk_compatibility_ideograph_2f828;
			return 1;
		case 0x2F829:
			*normals = cjk_compatibility_ideograph_2f829;
			return 1;
		case 0x2F82A:
			*normals = cjk_compatibility_ideograph_2f82a;
			return 1;
		case 0x2F82B:
			*normals = cjk_compatibility_ideograph_2f82b;
			return 1;
		case 0x2F82C:
			*normals = cjk_compatibility_ideograph_2f82c;
			return 1;
		case 0x2F82D:
			*normals = cjk_compatibility_ideograph_2f82d;
			return 1;
		case 0x2F82E:
			*normals = cjk_compatibility_ideograph_2f82e;
			return 1;
		case 0x2F82F:
			*normals = cjk_compatibility_ideograph_2f82f;
			return 1;
		case 0x2F830:
			*normals = cjk_compatibility_ideograph_2f830;
			return 1;
		case 0x2F831:
			*normals = cjk_compatibility_ideograph_2f831;
			return 1;
		case 0x2F832:
			*normals = cjk_compatibility_ideograph_2f832;
			return 1;
		case 0x2F833:
			*normals = cjk_compatibility_ideograph_2f833;
			return 1;
		case 0x2F834:
			*normals = cjk_compatibility_ideograph_2f834;
			return 1;
		case 0x2F835:
			*normals = cjk_compatibility_ideograph_2f835;
			return 1;
		case 0x2F836:
			*normals = cjk_compatibility_ideograph_2f836;
			return 1;
		case 0x2F837:
			*normals = cjk_compatibility_ideograph_2f837;
			return 1;
		case 0x2F838:
			*normals = cjk_compatibility_ideograph_2f838;
			return 1;
		case 0x2F839:
			*normals = cjk_compatibility_ideograph_2f839;
			return 1;
		case 0x2F83A:
			*normals = cjk_compatibility_ideograph_2f83a;
			return 1;
		case 0x2F83B:
			*normals = cjk_compatibility_ideograph_2f83b;
			return 1;
		case 0x2F83C:
			*normals = cjk_compatibility_ideograph_2f83c;
			return 1;
		case 0x2F83D:
			*normals = cjk_compatibility_ideograph_2f83d;
			return 1;
		case 0x2F83E:
			*normals = cjk_compatibility_ideograph_2f83e;
			return 1;
		case 0x2F83F:
			*normals = cjk_compatibility_ideograph_2f83f;
			return 1;
		case 0x2F840:
			*normals = cjk_compatibility_ideograph_2f840;
			return 1;
		case 0x2F841:
			*normals = cjk_compatibility_ideograph_2f841;
			return 1;
		case 0x2F842:
			*normals = cjk_compatibility_ideograph_2f842;
			return 1;
		case 0x2F843:
			*normals = cjk_compatibility_ideograph_2f843;
			return 1;
		case 0x2F844:
			*normals = cjk_compatibility_ideograph_2f844;
			return 1;
		case 0x2F845:
			*normals = cjk_compatibility_ideograph_2f845;
			return 1;
		case 0x2F846:
			*normals = cjk_compatibility_ideograph_2f846;
			return 1;
		case 0x2F847:
			*normals = cjk_compatibility_ideograph_2f847;
			return 1;
		case 0x2F848:
			*normals = cjk_compatibility_ideograph_2f848;
			return 1;
		case 0x2F849:
			*normals = cjk_compatibility_ideograph_2f849;
			return 1;
		case 0x2F84A:
			*normals = cjk_compatibility_ideograph_2f84a;
			return 1;
		case 0x2F84B:
			*normals = cjk_compatibility_ideograph_2f84b;
			return 1;
		case 0x2F84C:
			*normals = cjk_compatibility_ideograph_2f84c;
			return 1;
		case 0x2F84D:
			*normals = cjk_compatibility_ideograph_2f84d;
			return 1;
		case 0x2F84E:
			*normals = cjk_compatibility_ideograph_2f84e;
			return 1;
		case 0x2F84F:
			*normals = cjk_compatibility_ideograph_2f84f;
			return 1;
		case 0x2F850:
			*normals = cjk_compatibility_ideograph_2f850;
			return 1;
		case 0x2F851:
			*normals = cjk_compatibility_ideograph_2f851;
			return 1;
		case 0x2F852:
			*normals = cjk_compatibility_ideograph_2f852;
			return 1;
		case 0x2F853:
			*normals = cjk_compatibility_ideograph_2f853;
			return 1;
		case 0x2F854:
			*normals = cjk_compatibility_ideograph_2f854;
			return 1;
		case 0x2F855:
			*normals = cjk_compatibility_ideograph_2f855;
			return 1;
		case 0x2F856:
			*normals = cjk_compatibility_ideograph_2f856;
			return 1;
		case 0x2F857:
			*normals = cjk_compatibility_ideograph_2f857;
			return 1;
		case 0x2F858:
			*normals = cjk_compatibility_ideograph_2f858;
			return 1;
		case 0x2F859:
			*normals = cjk_compatibility_ideograph_2f859;
			return 1;
		case 0x2F85A:
			*normals = cjk_compatibility_ideograph_2f85a;
			return 1;
		case 0x2F85B:
			*normals = cjk_compatibility_ideograph_2f85b;
			return 1;
		case 0x2F85C:
			*normals = cjk_compatibility_ideograph_2f85c;
			return 1;
		case 0x2F85D:
			*normals = cjk_compatibility_ideograph_2f85d;
			return 1;
		case 0x2F85E:
			*normals = cjk_compatibility_ideograph_2f85e;
			return 1;
		case 0x2F85F:
			*normals = cjk_compatibility_ideograph_2f85f;
			return 1;
		case 0x2F860:
			*normals = cjk_compatibility_ideograph_2f860;
			return 1;
		case 0x2F861:
			*normals = cjk_compatibility_ideograph_2f861;
			return 1;
		case 0x2F862:
			*normals = cjk_compatibility_ideograph_2f862;
			return 1;
		case 0x2F863:
			*normals = cjk_compatibility_ideograph_2f863;
			return 1;
		case 0x2F864:
			*normals = cjk_compatibility_ideograph_2f864;
			return 1;
		case 0x2F865:
			*normals = cjk_compatibility_ideograph_2f865;
			return 1;
		case 0x2F866:
			*normals = cjk_compatibility_ideograph_2f866;
			return 1;
		case 0x2F867:
			*normals = cjk_compatibility_ideograph_2f867;
			return 1;
		case 0x2F868:
			*normals = cjk_compatibility_ideograph_2f868;
			return 1;
		case 0x2F869:
			*normals = cjk_compatibility_ideograph_2f869;
			return 1;
		case 0x2F86A:
			*normals = cjk_compatibility_ideograph_2f86a;
			return 1;
		case 0x2F86B:
			*normals = cjk_compatibility_ideograph_2f86b;
			return 1;
		case 0x2F86C:
			*normals = cjk_compatibility_ideograph_2f86c;
			return 1;
		case 0x2F86D:
			*normals = cjk_compatibility_ideograph_2f86d;
			return 1;
		case 0x2F86E:
			*normals = cjk_compatibility_ideograph_2f86e;
			return 1;
		case 0x2F86F:
			*normals = cjk_compatibility_ideograph_2f86f;
			return 1;
		case 0x2F870:
			*normals = cjk_compatibility_ideograph_2f870;
			return 1;
		case 0x2F871:
			*normals = cjk_compatibility_ideograph_2f871;
			return 1;
		case 0x2F872:
			*normals = cjk_compatibility_ideograph_2f872;
			return 1;
		case 0x2F873:
			*normals = cjk_compatibility_ideograph_2f873;
			return 1;
		case 0x2F874:
			*normals = cjk_compatibility_ideograph_2f874;
			return 1;
		case 0x2F875:
			*normals = cjk_compatibility_ideograph_2f875;
			return 1;
		case 0x2F876:
			*normals = cjk_compatibility_ideograph_2f876;
			return 1;
		case 0x2F877:
			*normals = cjk_compatibility_ideograph_2f877;
			return 1;
		case 0x2F878:
			*normals = cjk_compatibility_ideograph_2f878;
			return 1;
		case 0x2F879:
			*normals = cjk_compatibility_ideograph_2f879;
			return 1;
		case 0x2F87A:
			*normals = cjk_compatibility_ideograph_2f87a;
			return 1;
		case 0x2F87B:
			*normals = cjk_compatibility_ideograph_2f87b;
			return 1;
		case 0x2F87C:
			*normals = cjk_compatibility_ideograph_2f87c;
			return 1;
		case 0x2F87D:
			*normals = cjk_compatibility_ideograph_2f87d;
			return 1;
		case 0x2F87E:
			*normals = cjk_compatibility_ideograph_2f87e;
			return 1;
		case 0x2F87F:
			*normals = cjk_compatibility_ideograph_2f87f;
			return 1;
		case 0x2F880:
			*normals = cjk_compatibility_ideograph_2f880;
			return 1;
		case 0x2F881:
			*normals = cjk_compatibility_ideograph_2f881;
			return 1;
		case 0x2F882:
			*normals = cjk_compatibility_ideograph_2f882;
			return 1;
		case 0x2F883:
			*normals = cjk_compatibility_ideograph_2f883;
			return 1;
		case 0x2F884:
			*normals = cjk_compatibility_ideograph_2f884;
			return 1;
		case 0x2F885:
			*normals = cjk_compatibility_ideograph_2f885;
			return 1;
		case 0x2F886:
			*normals = cjk_compatibility_ideograph_2f886;
			return 1;
		case 0x2F887:
			*normals = cjk_compatibility_ideograph_2f887;
			return 1;
		case 0x2F888:
			*normals = cjk_compatibility_ideograph_2f888;
			return 1;
		case 0x2F889:
			*normals = cjk_compatibility_ideograph_2f889;
			return 1;
		case 0x2F88A:
			*normals = cjk_compatibility_ideograph_2f88a;
			return 1;
		case 0x2F88B:
			*normals = cjk_compatibility_ideograph_2f88b;
			return 1;
		case 0x2F88C:
			*normals = cjk_compatibility_ideograph_2f88c;
			return 1;
		case 0x2F88D:
			*normals = cjk_compatibility_ideograph_2f88d;
			return 1;
		case 0x2F88E:
			*normals = cjk_compatibility_ideograph_2f88e;
			return 1;
		case 0x2F88F:
			*normals = cjk_compatibility_ideograph_2f88f;
			return 1;
		case 0x2F890:
			*normals = cjk_compatibility_ideograph_2f890;
			return 1;
		case 0x2F891:
			*normals = cjk_compatibility_ideograph_2f891;
			return 1;
		case 0x2F892:
			*normals = cjk_compatibility_ideograph_2f892;
			return 1;
		case 0x2F893:
			*normals = cjk_compatibility_ideograph_2f893;
			return 1;
		case 0x2F894:
			*normals = cjk_compatibility_ideograph_2f894;
			return 1;
		case 0x2F895:
			*normals = cjk_compatibility_ideograph_2f895;
			return 1;
		case 0x2F896:
			*normals = cjk_compatibility_ideograph_2f896;
			return 1;
		case 0x2F897:
			*normals = cjk_compatibility_ideograph_2f897;
			return 1;
		case 0x2F898:
			*normals = cjk_compatibility_ideograph_2f898;
			return 1;
		case 0x2F899:
			*normals = cjk_compatibility_ideograph_2f899;
			return 1;
		case 0x2F89A:
			*normals = cjk_compatibility_ideograph_2f89a;
			return 1;
		case 0x2F89B:
			*normals = cjk_compatibility_ideograph_2f89b;
			return 1;
		case 0x2F89C:
			*normals = cjk_compatibility_ideograph_2f89c;
			return 1;
		case 0x2F89D:
			*normals = cjk_compatibility_ideograph_2f89d;
			return 1;
		case 0x2F89E:
			*normals = cjk_compatibility_ideograph_2f89e;
			return 1;
		case 0x2F89F:
			*normals = cjk_compatibility_ideograph_2f89f;
			return 1;
		case 0x2F8A0:
			*normals = cjk_compatibility_ideograph_2f8a0;
			return 1;
		case 0x2F8A1:
			*normals = cjk_compatibility_ideograph_2f8a1;
			return 1;
		case 0x2F8A2:
			*normals = cjk_compatibility_ideograph_2f8a2;
			return 1;
		case 0x2F8A3:
			*normals = cjk_compatibility_ideograph_2f8a3;
			return 1;
		case 0x2F8A4:
			*normals = cjk_compatibility_ideograph_2f8a4;
			return 1;
		case 0x2F8A5:
			*normals = cjk_compatibility_ideograph_2f8a5;
			return 1;
		case 0x2F8A6:
			*normals = cjk_compatibility_ideograph_2f8a6;
			return 1;
		case 0x2F8A7:
			*normals = cjk_compatibility_ideograph_2f8a7;
			return 1;
		case 0x2F8A8:
			*normals = cjk_compatibility_ideograph_2f8a8;
			return 1;
		case 0x2F8A9:
			*normals = cjk_compatibility_ideograph_2f8a9;
			return 1;
		case 0x2F8AA:
			*normals = cjk_compatibility_ideograph_2f8aa;
			return 1;
		case 0x2F8AB:
			*normals = cjk_compatibility_ideograph_2f8ab;
			return 1;
		case 0x2F8AC:
			*normals = cjk_compatibility_ideograph_2f8ac;
			return 1;
		case 0x2F8AD:
			*normals = cjk_compatibility_ideograph_2f8ad;
			return 1;
		case 0x2F8AE:
			*normals = cjk_compatibility_ideograph_2f8ae;
			return 1;
		case 0x2F8AF:
			*normals = cjk_compatibility_ideograph_2f8af;
			return 1;
		case 0x2F8B0:
			*normals = cjk_compatibility_ideograph_2f8b0;
			return 1;
		case 0x2F8B1:
			*normals = cjk_compatibility_ideograph_2f8b1;
			return 1;
		case 0x2F8B2:
			*normals = cjk_compatibility_ideograph_2f8b2;
			return 1;
		case 0x2F8B3:
			*normals = cjk_compatibility_ideograph_2f8b3;
			return 1;
		case 0x2F8B4:
			*normals = cjk_compatibility_ideograph_2f8b4;
			return 1;
		case 0x2F8B5:
			*normals = cjk_compatibility_ideograph_2f8b5;
			return 1;
		case 0x2F8B6:
			*normals = cjk_compatibility_ideograph_2f8b6;
			return 1;
		case 0x2F8B7:
			*normals = cjk_compatibility_ideograph_2f8b7;
			return 1;
		case 0x2F8B8:
			*normals = cjk_compatibility_ideograph_2f8b8;
			return 1;
		case 0x2F8B9:
			*normals = cjk_compatibility_ideograph_2f8b9;
			return 1;
		case 0x2F8BA:
			*normals = cjk_compatibility_ideograph_2f8ba;
			return 1;
		case 0x2F8BB:
			*normals = cjk_compatibility_ideograph_2f8bb;
			return 1;
		case 0x2F8BC:
			*normals = cjk_compatibility_ideograph_2f8bc;
			return 1;
		case 0x2F8BD:
			*normals = cjk_compatibility_ideograph_2f8bd;
			return 1;
		case 0x2F8BE:
			*normals = cjk_compatibility_ideograph_2f8be;
			return 1;
		case 0x2F8BF:
			*normals = cjk_compatibility_ideograph_2f8bf;
			return 1;
		case 0x2F8C0:
			*normals = cjk_compatibility_ideograph_2f8c0;
			return 1;
		case 0x2F8C1:
			*normals = cjk_compatibility_ideograph_2f8c1;
			return 1;
		case 0x2F8C2:
			*normals = cjk_compatibility_ideograph_2f8c2;
			return 1;
		case 0x2F8C3:
			*normals = cjk_compatibility_ideograph_2f8c3;
			return 1;
		case 0x2F8C4:
			*normals = cjk_compatibility_ideograph_2f8c4;
			return 1;
		case 0x2F8C5:
			*normals = cjk_compatibility_ideograph_2f8c5;
			return 1;
		case 0x2F8C6:
			*normals = cjk_compatibility_ideograph_2f8c6;
			return 1;
		case 0x2F8C7:
			*normals = cjk_compatibility_ideograph_2f8c7;
			return 1;
		case 0x2F8C8:
			*normals = cjk_compatibility_ideograph_2f8c8;
			return 1;
		case 0x2F8C9:
			*normals = cjk_compatibility_ideograph_2f8c9;
			return 1;
		case 0x2F8CA:
			*normals = cjk_compatibility_ideograph_2f8ca;
			return 1;
		case 0x2F8CB:
			*normals = cjk_compatibility_ideograph_2f8cb;
			return 1;
		case 0x2F8CC:
			*normals = cjk_compatibility_ideograph_2f8cc;
			return 1;
		case 0x2F8CD:
			*normals = cjk_compatibility_ideograph_2f8cd;
			return 1;
		case 0x2F8CE:
			*normals = cjk_compatibility_ideograph_2f8ce;
			return 1;
		case 0x2F8CF:
			*normals = cjk_compatibility_ideograph_2f8cf;
			return 1;
		case 0x2F8D0:
			*normals = cjk_compatibility_ideograph_2f8d0;
			return 1;
		case 0x2F8D1:
			*normals = cjk_compatibility_ideograph_2f8d1;
			return 1;
		case 0x2F8D2:
			*normals = cjk_compatibility_ideograph_2f8d2;
			return 1;
		case 0x2F8D3:
			*normals = cjk_compatibility_ideograph_2f8d3;
			return 1;
		case 0x2F8D4:
			*normals = cjk_compatibility_ideograph_2f8d4;
			return 1;
		case 0x2F8D5:
			*normals = cjk_compatibility_ideograph_2f8d5;
			return 1;
		case 0x2F8D6:
			*normals = cjk_compatibility_ideograph_2f8d6;
			return 1;
		case 0x2F8D7:
			*normals = cjk_compatibility_ideograph_2f8d7;
			return 1;
		case 0x2F8D8:
			*normals = cjk_compatibility_ideograph_2f8d8;
			return 1;
		case 0x2F8D9:
			*normals = cjk_compatibility_ideograph_2f8d9;
			return 1;
		case 0x2F8DA:
			*normals = cjk_compatibility_ideograph_2f8da;
			return 1;
		case 0x2F8DB:
			*normals = cjk_compatibility_ideograph_2f8db;
			return 1;
		case 0x2F8DC:
			*normals = cjk_compatibility_ideograph_2f8dc;
			return 1;
		case 0x2F8DD:
			*normals = cjk_compatibility_ideograph_2f8dd;
			return 1;
		case 0x2F8DE:
			*normals = cjk_compatibility_ideograph_2f8de;
			return 1;
		case 0x2F8DF:
			*normals = cjk_compatibility_ideograph_2f8df;
			return 1;
		case 0x2F8E0:
			*normals = cjk_compatibility_ideograph_2f8e0;
			return 1;
		case 0x2F8E1:
			*normals = cjk_compatibility_ideograph_2f8e1;
			return 1;
		case 0x2F8E2:
			*normals = cjk_compatibility_ideograph_2f8e2;
			return 1;
		case 0x2F8E3:
			*normals = cjk_compatibility_ideograph_2f8e3;
			return 1;
		case 0x2F8E4:
			*normals = cjk_compatibility_ideograph_2f8e4;
			return 1;
		case 0x2F8E5:
			*normals = cjk_compatibility_ideograph_2f8e5;
			return 1;
		case 0x2F8E6:
			*normals = cjk_compatibility_ideograph_2f8e6;
			return 1;
		case 0x2F8E7:
			*normals = cjk_compatibility_ideograph_2f8e7;
			return 1;
		case 0x2F8E8:
			*normals = cjk_compatibility_ideograph_2f8e8;
			return 1;
		case 0x2F8E9:
			*normals = cjk_compatibility_ideograph_2f8e9;
			return 1;
		case 0x2F8EA:
			*normals = cjk_compatibility_ideograph_2f8ea;
			return 1;
		case 0x2F8EB:
			*normals = cjk_compatibility_ideograph_2f8eb;
			return 1;
		case 0x2F8EC:
			*normals = cjk_compatibility_ideograph_2f8ec;
			return 1;
		case 0x2F8ED:
			*normals = cjk_compatibility_ideograph_2f8ed;
			return 1;
		case 0x2F8EE:
			*normals = cjk_compatibility_ideograph_2f8ee;
			return 1;
		case 0x2F8EF:
			*normals = cjk_compatibility_ideograph_2f8ef;
			return 1;
		case 0x2F8F0:
			*normals = cjk_compatibility_ideograph_2f8f0;
			return 1;
		case 0x2F8F1:
			*normals = cjk_compatibility_ideograph_2f8f1;
			return 1;
		case 0x2F8F2:
			*normals = cjk_compatibility_ideograph_2f8f2;
			return 1;
		case 0x2F8F3:
			*normals = cjk_compatibility_ideograph_2f8f3;
			return 1;
		case 0x2F8F4:
			*normals = cjk_compatibility_ideograph_2f8f4;
			return 1;
		case 0x2F8F5:
			*normals = cjk_compatibility_ideograph_2f8f5;
			return 1;
		case 0x2F8F6:
			*normals = cjk_compatibility_ideograph_2f8f6;
			return 1;
		case 0x2F8F7:
			*normals = cjk_compatibility_ideograph_2f8f7;
			return 1;
		case 0x2F8F8:
			*normals = cjk_compatibility_ideograph_2f8f8;
			return 1;
		case 0x2F8F9:
			*normals = cjk_compatibility_ideograph_2f8f9;
			return 1;
		case 0x2F8FA:
			*normals = cjk_compatibility_ideograph_2f8fa;
			return 1;
		case 0x2F8FB:
			*normals = cjk_compatibility_ideograph_2f8fb;
			return 1;
		case 0x2F8FC:
			*normals = cjk_compatibility_ideograph_2f8fc;
			return 1;
		case 0x2F8FD:
			*normals = cjk_compatibility_ideograph_2f8fd;
			return 1;
		case 0x2F8FE:
			*normals = cjk_compatibility_ideograph_2f8fe;
			return 1;
		case 0x2F8FF:
			*normals = cjk_compatibility_ideograph_2f8ff;
			return 1;
		case 0x2F900:
			*normals = cjk_compatibility_ideograph_2f900;
			return 1;
		case 0x2F901:
			*normals = cjk_compatibility_ideograph_2f901;
			return 1;
		case 0x2F902:
			*normals = cjk_compatibility_ideograph_2f902;
			return 1;
		case 0x2F903:
			*normals = cjk_compatibility_ideograph_2f903;
			return 1;
		case 0x2F904:
			*normals = cjk_compatibility_ideograph_2f904;
			return 1;
		case 0x2F905:
			*normals = cjk_compatibility_ideograph_2f905;
			return 1;
		case 0x2F906:
			*normals = cjk_compatibility_ideograph_2f906;
			return 1;
		case 0x2F907:
			*normals = cjk_compatibility_ideograph_2f907;
			return 1;
		case 0x2F908:
			*normals = cjk_compatibility_ideograph_2f908;
			return 1;
		case 0x2F909:
			*normals = cjk_compatibility_ideograph_2f909;
			return 1;
		case 0x2F90A:
			*normals = cjk_compatibility_ideograph_2f90a;
			return 1;
		case 0x2F90B:
			*normals = cjk_compatibility_ideograph_2f90b;
			return 1;
		case 0x2F90C:
			*normals = cjk_compatibility_ideograph_2f90c;
			return 1;
		case 0x2F90D:
			*normals = cjk_compatibility_ideograph_2f90d;
			return 1;
		case 0x2F90E:
			*normals = cjk_compatibility_ideograph_2f90e;
			return 1;
		case 0x2F90F:
			*normals = cjk_compatibility_ideograph_2f90f;
			return 1;
		case 0x2F910:
			*normals = cjk_compatibility_ideograph_2f910;
			return 1;
		case 0x2F911:
			*normals = cjk_compatibility_ideograph_2f911;
			return 1;
		case 0x2F912:
			*normals = cjk_compatibility_ideograph_2f912;
			return 1;
		case 0x2F913:
			*normals = cjk_compatibility_ideograph_2f913;
			return 1;
		case 0x2F914:
			*normals = cjk_compatibility_ideograph_2f914;
			return 1;
		case 0x2F915:
			*normals = cjk_compatibility_ideograph_2f915;
			return 1;
		case 0x2F916:
			*normals = cjk_compatibility_ideograph_2f916;
			return 1;
		case 0x2F917:
			*normals = cjk_compatibility_ideograph_2f917;
			return 1;
		case 0x2F918:
			*normals = cjk_compatibility_ideograph_2f918;
			return 1;
		case 0x2F919:
			*normals = cjk_compatibility_ideograph_2f919;
			return 1;
		case 0x2F91A:
			*normals = cjk_compatibility_ideograph_2f91a;
			return 1;
		case 0x2F91B:
			*normals = cjk_compatibility_ideograph_2f91b;
			return 1;
		case 0x2F91C:
			*normals = cjk_compatibility_ideograph_2f91c;
			return 1;
		case 0x2F91D:
			*normals = cjk_compatibility_ideograph_2f91d;
			return 1;
		case 0x2F91E:
			*normals = cjk_compatibility_ideograph_2f91e;
			return 1;
		case 0x2F91F:
			*normals = cjk_compatibility_ideograph_2f91f;
			return 1;
		case 0x2F920:
			*normals = cjk_compatibility_ideograph_2f920;
			return 1;
		case 0x2F921:
			*normals = cjk_compatibility_ideograph_2f921;
			return 1;
		case 0x2F922:
			*normals = cjk_compatibility_ideograph_2f922;
			return 1;
		case 0x2F923:
			*normals = cjk_compatibility_ideograph_2f923;
			return 1;
		case 0x2F924:
			*normals = cjk_compatibility_ideograph_2f924;
			return 1;
		case 0x2F925:
			*normals = cjk_compatibility_ideograph_2f925;
			return 1;
		case 0x2F926:
			*normals = cjk_compatibility_ideograph_2f926;
			return 1;
		case 0x2F927:
			*normals = cjk_compatibility_ideograph_2f927;
			return 1;
		case 0x2F928:
			*normals = cjk_compatibility_ideograph_2f928;
			return 1;
		case 0x2F929:
			*normals = cjk_compatibility_ideograph_2f929;
			return 1;
		case 0x2F92A:
			*normals = cjk_compatibility_ideograph_2f92a;
			return 1;
		case 0x2F92B:
			*normals = cjk_compatibility_ideograph_2f92b;
			return 1;
		case 0x2F92C:
			*normals = cjk_compatibility_ideograph_2f92c;
			return 1;
		case 0x2F92D:
			*normals = cjk_compatibility_ideograph_2f92d;
			return 1;
		case 0x2F92E:
			*normals = cjk_compatibility_ideograph_2f92e;
			return 1;
		case 0x2F92F:
			*normals = cjk_compatibility_ideograph_2f92f;
			return 1;
		case 0x2F930:
			*normals = cjk_compatibility_ideograph_2f930;
			return 1;
		case 0x2F931:
			*normals = cjk_compatibility_ideograph_2f931;
			return 1;
		case 0x2F932:
			*normals = cjk_compatibility_ideograph_2f932;
			return 1;
		case 0x2F933:
			*normals = cjk_compatibility_ideograph_2f933;
			return 1;
		case 0x2F934:
			*normals = cjk_compatibility_ideograph_2f934;
			return 1;
		case 0x2F935:
			*normals = cjk_compatibility_ideograph_2f935;
			return 1;
		case 0x2F936:
			*normals = cjk_compatibility_ideograph_2f936;
			return 1;
		case 0x2F937:
			*normals = cjk_compatibility_ideograph_2f937;
			return 1;
		case 0x2F938:
			*normals = cjk_compatibility_ideograph_2f938;
			return 1;
		case 0x2F939:
			*normals = cjk_compatibility_ideograph_2f939;
			return 1;
		case 0x2F93A:
			*normals = cjk_compatibility_ideograph_2f93a;
			return 1;
		case 0x2F93B:
			*normals = cjk_compatibility_ideograph_2f93b;
			return 1;
		case 0x2F93C:
			*normals = cjk_compatibility_ideograph_2f93c;
			return 1;
		case 0x2F93D:
			*normals = cjk_compatibility_ideograph_2f93d;
			return 1;
		case 0x2F93E:
			*normals = cjk_compatibility_ideograph_2f93e;
			return 1;
		case 0x2F93F:
			*normals = cjk_compatibility_ideograph_2f93f;
			return 1;
		case 0x2F940:
			*normals = cjk_compatibility_ideograph_2f940;
			return 1;
		case 0x2F941:
			*normals = cjk_compatibility_ideograph_2f941;
			return 1;
		case 0x2F942:
			*normals = cjk_compatibility_ideograph_2f942;
			return 1;
		case 0x2F943:
			*normals = cjk_compatibility_ideograph_2f943;
			return 1;
		case 0x2F944:
			*normals = cjk_compatibility_ideograph_2f944;
			return 1;
		case 0x2F945:
			*normals = cjk_compatibility_ideograph_2f945;
			return 1;
		case 0x2F946:
			*normals = cjk_compatibility_ideograph_2f946;
			return 1;
		case 0x2F947:
			*normals = cjk_compatibility_ideograph_2f947;
			return 1;
		case 0x2F948:
			*normals = cjk_compatibility_ideograph_2f948;
			return 1;
		case 0x2F949:
			*normals = cjk_compatibility_ideograph_2f949;
			return 1;
		case 0x2F94A:
			*normals = cjk_compatibility_ideograph_2f94a;
			return 1;
		case 0x2F94B:
			*normals = cjk_compatibility_ideograph_2f94b;
			return 1;
		case 0x2F94C:
			*normals = cjk_compatibility_ideograph_2f94c;
			return 1;
		case 0x2F94D:
			*normals = cjk_compatibility_ideograph_2f94d;
			return 1;
		case 0x2F94E:
			*normals = cjk_compatibility_ideograph_2f94e;
			return 1;
		case 0x2F94F:
			*normals = cjk_compatibility_ideograph_2f94f;
			return 1;
		case 0x2F950:
			*normals = cjk_compatibility_ideograph_2f950;
			return 1;
		case 0x2F951:
			*normals = cjk_compatibility_ideograph_2f951;
			return 1;
		case 0x2F952:
			*normals = cjk_compatibility_ideograph_2f952;
			return 1;
		case 0x2F953:
			*normals = cjk_compatibility_ideograph_2f953;
			return 1;
		case 0x2F954:
			*normals = cjk_compatibility_ideograph_2f954;
			return 1;
		case 0x2F955:
			*normals = cjk_compatibility_ideograph_2f955;
			return 1;
		case 0x2F956:
			*normals = cjk_compatibility_ideograph_2f956;
			return 1;
		case 0x2F957:
			*normals = cjk_compatibility_ideograph_2f957;
			return 1;
		case 0x2F958:
			*normals = cjk_compatibility_ideograph_2f958;
			return 1;
		case 0x2F959:
			*normals = cjk_compatibility_ideograph_2f959;
			return 1;
		case 0x2F95A:
			*normals = cjk_compatibility_ideograph_2f95a;
			return 1;
		case 0x2F95B:
			*normals = cjk_compatibility_ideograph_2f95b;
			return 1;
		case 0x2F95C:
			*normals = cjk_compatibility_ideograph_2f95c;
			return 1;
		case 0x2F95D:
			*normals = cjk_compatibility_ideograph_2f95d;
			return 1;
		case 0x2F95E:
			*normals = cjk_compatibility_ideograph_2f95e;
			return 1;
		case 0x2F95F:
			*normals = cjk_compatibility_ideograph_2f95f;
			return 1;
		case 0x2F960:
			*normals = cjk_compatibility_ideograph_2f960;
			return 1;
		case 0x2F961:
			*normals = cjk_compatibility_ideograph_2f961;
			return 1;
		case 0x2F962:
			*normals = cjk_compatibility_ideograph_2f962;
			return 1;
		case 0x2F963:
			*normals = cjk_compatibility_ideograph_2f963;
			return 1;
		case 0x2F964:
			*normals = cjk_compatibility_ideograph_2f964;
			return 1;
		case 0x2F965:
			*normals = cjk_compatibility_ideograph_2f965;
			return 1;
		case 0x2F966:
			*normals = cjk_compatibility_ideograph_2f966;
			return 1;
		case 0x2F967:
			*normals = cjk_compatibility_ideograph_2f967;
			return 1;
		case 0x2F968:
			*normals = cjk_compatibility_ideograph_2f968;
			return 1;
		case 0x2F969:
			*normals = cjk_compatibility_ideograph_2f969;
			return 1;
		case 0x2F96A:
			*normals = cjk_compatibility_ideograph_2f96a;
			return 1;
		case 0x2F96B:
			*normals = cjk_compatibility_ideograph_2f96b;
			return 1;
		case 0x2F96C:
			*normals = cjk_compatibility_ideograph_2f96c;
			return 1;
		case 0x2F96D:
			*normals = cjk_compatibility_ideograph_2f96d;
			return 1;
		case 0x2F96E:
			*normals = cjk_compatibility_ideograph_2f96e;
			return 1;
		case 0x2F96F:
			*normals = cjk_compatibility_ideograph_2f96f;
			return 1;
		case 0x2F970:
			*normals = cjk_compatibility_ideograph_2f970;
			return 1;
		case 0x2F971:
			*normals = cjk_compatibility_ideograph_2f971;
			return 1;
		case 0x2F972:
			*normals = cjk_compatibility_ideograph_2f972;
			return 1;
		case 0x2F973:
			*normals = cjk_compatibility_ideograph_2f973;
			return 1;
		case 0x2F974:
			*normals = cjk_compatibility_ideograph_2f974;
			return 1;
		case 0x2F975:
			*normals = cjk_compatibility_ideograph_2f975;
			return 1;
		case 0x2F976:
			*normals = cjk_compatibility_ideograph_2f976;
			return 1;
		case 0x2F977:
			*normals = cjk_compatibility_ideograph_2f977;
			return 1;
		case 0x2F978:
			*normals = cjk_compatibility_ideograph_2f978;
			return 1;
		case 0x2F979:
			*normals = cjk_compatibility_ideograph_2f979;
			return 1;
		case 0x2F97A:
			*normals = cjk_compatibility_ideograph_2f97a;
			return 1;
		case 0x2F97B:
			*normals = cjk_compatibility_ideograph_2f97b;
			return 1;
		case 0x2F97C:
			*normals = cjk_compatibility_ideograph_2f97c;
			return 1;
		case 0x2F97D:
			*normals = cjk_compatibility_ideograph_2f97d;
			return 1;
		case 0x2F97E:
			*normals = cjk_compatibility_ideograph_2f97e;
			return 1;
		case 0x2F97F:
			*normals = cjk_compatibility_ideograph_2f97f;
			return 1;
		case 0x2F980:
			*normals = cjk_compatibility_ideograph_2f980;
			return 1;
		case 0x2F981:
			*normals = cjk_compatibility_ideograph_2f981;
			return 1;
		case 0x2F982:
			*normals = cjk_compatibility_ideograph_2f982;
			return 1;
		case 0x2F983:
			*normals = cjk_compatibility_ideograph_2f983;
			return 1;
		case 0x2F984:
			*normals = cjk_compatibility_ideograph_2f984;
			return 1;
		case 0x2F985:
			*normals = cjk_compatibility_ideograph_2f985;
			return 1;
		case 0x2F986:
			*normals = cjk_compatibility_ideograph_2f986;
			return 1;
		case 0x2F987:
			*normals = cjk_compatibility_ideograph_2f987;
			return 1;
		case 0x2F988:
			*normals = cjk_compatibility_ideograph_2f988;
			return 1;
		case 0x2F989:
			*normals = cjk_compatibility_ideograph_2f989;
			return 1;
		case 0x2F98A:
			*normals = cjk_compatibility_ideograph_2f98a;
			return 1;
		case 0x2F98B:
			*normals = cjk_compatibility_ideograph_2f98b;
			return 1;
		case 0x2F98C:
			*normals = cjk_compatibility_ideograph_2f98c;
			return 1;
		case 0x2F98D:
			*normals = cjk_compatibility_ideograph_2f98d;
			return 1;
		case 0x2F98E:
			*normals = cjk_compatibility_ideograph_2f98e;
			return 1;
		case 0x2F98F:
			*normals = cjk_compatibility_ideograph_2f98f;
			return 1;
		case 0x2F990:
			*normals = cjk_compatibility_ideograph_2f990;
			return 1;
		case 0x2F991:
			*normals = cjk_compatibility_ideograph_2f991;
			return 1;
		case 0x2F992:
			*normals = cjk_compatibility_ideograph_2f992;
			return 1;
		case 0x2F993:
			*normals = cjk_compatibility_ideograph_2f993;
			return 1;
		case 0x2F994:
			*normals = cjk_compatibility_ideograph_2f994;
			return 1;
		case 0x2F995:
			*normals = cjk_compatibility_ideograph_2f995;
			return 1;
		case 0x2F996:
			*normals = cjk_compatibility_ideograph_2f996;
			return 1;
		case 0x2F997:
			*normals = cjk_compatibility_ideograph_2f997;
			return 1;
		case 0x2F998:
			*normals = cjk_compatibility_ideograph_2f998;
			return 1;
		case 0x2F999:
			*normals = cjk_compatibility_ideograph_2f999;
			return 1;
		case 0x2F99A:
			*normals = cjk_compatibility_ideograph_2f99a;
			return 1;
		case 0x2F99B:
			*normals = cjk_compatibility_ideograph_2f99b;
			return 1;
		case 0x2F99C:
			*normals = cjk_compatibility_ideograph_2f99c;
			return 1;
		case 0x2F99D:
			*normals = cjk_compatibility_ideograph_2f99d;
			return 1;
		case 0x2F99E:
			*normals = cjk_compatibility_ideograph_2f99e;
			return 1;
		case 0x2F99F:
			*normals = cjk_compatibility_ideograph_2f99f;
			return 1;
		case 0x2F9A0:
			*normals = cjk_compatibility_ideograph_2f9a0;
			return 1;
		case 0x2F9A1:
			*normals = cjk_compatibility_ideograph_2f9a1;
			return 1;
		case 0x2F9A2:
			*normals = cjk_compatibility_ideograph_2f9a2;
			return 1;
		case 0x2F9A3:
			*normals = cjk_compatibility_ideograph_2f9a3;
			return 1;
		case 0x2F9A4:
			*normals = cjk_compatibility_ideograph_2f9a4;
			return 1;
		case 0x2F9A5:
			*normals = cjk_compatibility_ideograph_2f9a5;
			return 1;
		case 0x2F9A6:
			*normals = cjk_compatibility_ideograph_2f9a6;
			return 1;
		case 0x2F9A7:
			*normals = cjk_compatibility_ideograph_2f9a7;
			return 1;
		case 0x2F9A8:
			*normals = cjk_compatibility_ideograph_2f9a8;
			return 1;
		case 0x2F9A9:
			*normals = cjk_compatibility_ideograph_2f9a9;
			return 1;
		case 0x2F9AA:
			*normals = cjk_compatibility_ideograph_2f9aa;
			return 1;
		case 0x2F9AB:
			*normals = cjk_compatibility_ideograph_2f9ab;
			return 1;
		case 0x2F9AC:
			*normals = cjk_compatibility_ideograph_2f9ac;
			return 1;
		case 0x2F9AD:
			*normals = cjk_compatibility_ideograph_2f9ad;
			return 1;
		case 0x2F9AE:
			*normals = cjk_compatibility_ideograph_2f9ae;
			return 1;
		case 0x2F9AF:
			*normals = cjk_compatibility_ideograph_2f9af;
			return 1;
		case 0x2F9B0:
			*normals = cjk_compatibility_ideograph_2f9b0;
			return 1;
		case 0x2F9B1:
			*normals = cjk_compatibility_ideograph_2f9b1;
			return 1;
		case 0x2F9B2:
			*normals = cjk_compatibility_ideograph_2f9b2;
			return 1;
		case 0x2F9B3:
			*normals = cjk_compatibility_ideograph_2f9b3;
			return 1;
		case 0x2F9B4:
			*normals = cjk_compatibility_ideograph_2f9b4;
			return 1;
		case 0x2F9B5:
			*normals = cjk_compatibility_ideograph_2f9b5;
			return 1;
		case 0x2F9B6:
			*normals = cjk_compatibility_ideograph_2f9b6;
			return 1;
		case 0x2F9B7:
			*normals = cjk_compatibility_ideograph_2f9b7;
			return 1;
		case 0x2F9B8:
			*normals = cjk_compatibility_ideograph_2f9b8;
			return 1;
		case 0x2F9B9:
			*normals = cjk_compatibility_ideograph_2f9b9;
			return 1;
		case 0x2F9BA:
			*normals = cjk_compatibility_ideograph_2f9ba;
			return 1;
		case 0x2F9BB:
			*normals = cjk_compatibility_ideograph_2f9bb;
			return 1;
		case 0x2F9BC:
			*normals = cjk_compatibility_ideograph_2f9bc;
			return 1;
		case 0x2F9BD:
			*normals = cjk_compatibility_ideograph_2f9bd;
			return 1;
		case 0x2F9BE:
			*normals = cjk_compatibility_ideograph_2f9be;
			return 1;
		case 0x2F9BF:
			*normals = cjk_compatibility_ideograph_2f9bf;
			return 1;
		case 0x2F9C0:
			*normals = cjk_compatibility_ideograph_2f9c0;
			return 1;
		case 0x2F9C1:
			*normals = cjk_compatibility_ideograph_2f9c1;
			return 1;
		case 0x2F9C2:
			*normals = cjk_compatibility_ideograph_2f9c2;
			return 1;
		case 0x2F9C3:
			*normals = cjk_compatibility_ideograph_2f9c3;
			return 1;
		case 0x2F9C4:
			*normals = cjk_compatibility_ideograph_2f9c4;
			return 1;
		case 0x2F9C5:
			*normals = cjk_compatibility_ideograph_2f9c5;
			return 1;
		case 0x2F9C6:
			*normals = cjk_compatibility_ideograph_2f9c6;
			return 1;
		case 0x2F9C7:
			*normals = cjk_compatibility_ideograph_2f9c7;
			return 1;
		case 0x2F9C8:
			*normals = cjk_compatibility_ideograph_2f9c8;
			return 1;
		case 0x2F9C9:
			*normals = cjk_compatibility_ideograph_2f9c9;
			return 1;
		case 0x2F9CA:
			*normals = cjk_compatibility_ideograph_2f9ca;
			return 1;
		case 0x2F9CB:
			*normals = cjk_compatibility_ideograph_2f9cb;
			return 1;
		case 0x2F9CC:
			*normals = cjk_compatibility_ideograph_2f9cc;
			return 1;
		case 0x2F9CD:
			*normals = cjk_compatibility_ideograph_2f9cd;
			return 1;
		case 0x2F9CE:
			*normals = cjk_compatibility_ideograph_2f9ce;
			return 1;
		case 0x2F9CF:
			*normals = cjk_compatibility_ideograph_2f9cf;
			return 1;
		case 0x2F9D0:
			*normals = cjk_compatibility_ideograph_2f9d0;
			return 1;
		case 0x2F9D1:
			*normals = cjk_compatibility_ideograph_2f9d1;
			return 1;
		case 0x2F9D2:
			*normals = cjk_compatibility_ideograph_2f9d2;
			return 1;
		case 0x2F9D3:
			*normals = cjk_compatibility_ideograph_2f9d3;
			return 1;
		case 0x2F9D4:
			*normals = cjk_compatibility_ideograph_2f9d4;
			return 1;
		case 0x2F9D5:
			*normals = cjk_compatibility_ideograph_2f9d5;
			return 1;
		case 0x2F9D6:
			*normals = cjk_compatibility_ideograph_2f9d6;
			return 1;
		case 0x2F9D7:
			*normals = cjk_compatibility_ideograph_2f9d7;
			return 1;
		case 0x2F9D8:
			*normals = cjk_compatibility_ideograph_2f9d8;
			return 1;
		case 0x2F9D9:
			*normals = cjk_compatibility_ideograph_2f9d9;
			return 1;
		case 0x2F9DA:
			*normals = cjk_compatibility_ideograph_2f9da;
			return 1;
		case 0x2F9DB:
			*normals = cjk_compatibility_ideograph_2f9db;
			return 1;
		case 0x2F9DC:
			*normals = cjk_compatibility_ideograph_2f9dc;
			return 1;
		case 0x2F9DD:
			*normals = cjk_compatibility_ideograph_2f9dd;
			return 1;
		case 0x2F9DE:
			*normals = cjk_compatibility_ideograph_2f9de;
			return 1;
		case 0x2F9DF:
			*normals = cjk_compatibility_ideograph_2f9df;
			return 1;
		case 0x2F9E0:
			*normals = cjk_compatibility_ideograph_2f9e0;
			return 1;
		case 0x2F9E1:
			*normals = cjk_compatibility_ideograph_2f9e1;
			return 1;
		case 0x2F9E2:
			*normals = cjk_compatibility_ideograph_2f9e2;
			return 1;
		case 0x2F9E3:
			*normals = cjk_compatibility_ideograph_2f9e3;
			return 1;
		case 0x2F9E4:
			*normals = cjk_compatibility_ideograph_2f9e4;
			return 1;
		case 0x2F9E5:
			*normals = cjk_compatibility_ideograph_2f9e5;
			return 1;
		case 0x2F9E6:
			*normals = cjk_compatibility_ideograph_2f9e6;
			return 1;
		case 0x2F9E7:
			*normals = cjk_compatibility_ideograph_2f9e7;
			return 1;
		case 0x2F9E8:
			*normals = cjk_compatibility_ideograph_2f9e8;
			return 1;
		case 0x2F9E9:
			*normals = cjk_compatibility_ideograph_2f9e9;
			return 1;
		case 0x2F9EA:
			*normals = cjk_compatibility_ideograph_2f9ea;
			return 1;
		case 0x2F9EB:
			*normals = cjk_compatibility_ideograph_2f9eb;
			return 1;
		case 0x2F9EC:
			*normals = cjk_compatibility_ideograph_2f9ec;
			return 1;
		case 0x2F9ED:
			*normals = cjk_compatibility_ideograph_2f9ed;
			return 1;
		case 0x2F9EE:
			*normals = cjk_compatibility_ideograph_2f9ee;
			return 1;
		case 0x2F9EF:
			*normals = cjk_compatibility_ideograph_2f9ef;
			return 1;
		case 0x2F9F0:
			*normals = cjk_compatibility_ideograph_2f9f0;
			return 1;
		case 0x2F9F1:
			*normals = cjk_compatibility_ideograph_2f9f1;
			return 1;
		case 0x2F9F2:
			*normals = cjk_compatibility_ideograph_2f9f2;
			return 1;
		case 0x2F9F3:
			*normals = cjk_compatibility_ideograph_2f9f3;
			return 1;
		case 0x2F9F4:
			*normals = cjk_compatibility_ideograph_2f9f4;
			return 1;
		case 0x2F9F5:
			*normals = cjk_compatibility_ideograph_2f9f5;
			return 1;
		case 0x2F9F6:
			*normals = cjk_compatibility_ideograph_2f9f6;
			return 1;
		case 0x2F9F7:
			*normals = cjk_compatibility_ideograph_2f9f7;
			return 1;
		case 0x2F9F8:
			*normals = cjk_compatibility_ideograph_2f9f8;
			return 1;
		case 0x2F9F9:
			*normals = cjk_compatibility_ideograph_2f9f9;
			return 1;
		case 0x2F9FA:
			*normals = cjk_compatibility_ideograph_2f9fa;
			return 1;
		case 0x2F9FB:
			*normals = cjk_compatibility_ideograph_2f9fb;
			return 1;
		case 0x2F9FC:
			*normals = cjk_compatibility_ideograph_2f9fc;
			return 1;
		case 0x2F9FD:
			*normals = cjk_compatibility_ideograph_2f9fd;
			return 1;
		case 0x2F9FE:
			*normals = cjk_compatibility_ideograph_2f9fe;
			return 1;
		case 0x2F9FF:
			*normals = cjk_compatibility_ideograph_2f9ff;
			return 1;
		case 0x2FA00:
			*normals = cjk_compatibility_ideograph_2fa00;
			return 1;
		case 0x2FA01:
			*normals = cjk_compatibility_ideograph_2fa01;
			return 1;
		case 0x2FA02:
			*normals = cjk_compatibility_ideograph_2fa02;
			return 1;
		case 0x2FA03:
			*normals = cjk_compatibility_ideograph_2fa03;
			return 1;
		case 0x2FA04:
			*normals = cjk_compatibility_ideograph_2fa04;
			return 1;
		case 0x2FA05:
			*normals = cjk_compatibility_ideograph_2fa05;
			return 1;
		case 0x2FA06:
			*normals = cjk_compatibility_ideograph_2fa06;
			return 1;
		case 0x2FA07:
			*normals = cjk_compatibility_ideograph_2fa07;
			return 1;
		case 0x2FA08:
			*normals = cjk_compatibility_ideograph_2fa08;
			return 1;
		case 0x2FA09:
			*normals = cjk_compatibility_ideograph_2fa09;
			return 1;
		case 0x2FA0A:
			*normals = cjk_compatibility_ideograph_2fa0a;
			return 1;
		case 0x2FA0B:
			*normals = cjk_compatibility_ideograph_2fa0b;
			return 1;
		case 0x2FA0C:
			*normals = cjk_compatibility_ideograph_2fa0c;
			return 1;
		case 0x2FA0D:
			*normals = cjk_compatibility_ideograph_2fa0d;
			return 1;
		case 0x2FA0E:
			*normals = cjk_compatibility_ideograph_2fa0e;
			return 1;
		case 0x2FA0F:
			*normals = cjk_compatibility_ideograph_2fa0f;
			return 1;
		case 0x2FA10:
			*normals = cjk_compatibility_ideograph_2fa10;
			return 1;
		case 0x2FA11:
			*normals = cjk_compatibility_ideograph_2fa11;
			return 1;
		case 0x2FA12:
			*normals = cjk_compatibility_ideograph_2fa12;
			return 1;
		case 0x2FA13:
			*normals = cjk_compatibility_ideograph_2fa13;
			return 1;
		case 0x2FA14:
			*normals = cjk_compatibility_ideograph_2fa14;
			return 1;
		case 0x2FA15:
			*normals = cjk_compatibility_ideograph_2fa15;
			return 1;
		case 0x2FA16:
			*normals = cjk_compatibility_ideograph_2fa16;
			return 1;
		case 0x2FA17:
			*normals = cjk_compatibility_ideograph_2fa17;
			return 1;
		case 0x2FA18:
			*normals = cjk_compatibility_ideograph_2fa18;
			return 1;
		case 0x2FA19:
			*normals = cjk_compatibility_ideograph_2fa19;
			return 1;
		case 0x2FA1A:
			*normals = cjk_compatibility_ideograph_2fa1a;
			return 1;
		case 0x2FA1B:
			*normals = cjk_compatibility_ideograph_2fa1b;
			return 1;
		case 0x2FA1C:
			*normals = cjk_compatibility_ideograph_2fa1c;
			return 1;
		case 0x2FA1D:
			*normals = cjk_compatibility_ideograph_2fa1d;
			return 1;
	}
	return 0;
}

Unicode_Category unicode_category(uint32_t codepoint) {
	switch (codepoint) {
		case 0x0000: return Unicode_Category_CC;
		case 0x0001: return Unicode_Category_CC;
		case 0x0002: return Unicode_Category_CC;
		case 0x0003: return Unicode_Category_CC;
		case 0x0004: return Unicode_Category_CC;
		case 0x0005: return Unicode_Category_CC;
		case 0x0006: return Unicode_Category_CC;
		case 0x0007: return Unicode_Category_CC;
		case 0x0008: return Unicode_Category_CC;
		case 0x0009: return Unicode_Category_CC;
		case 0x000A: return Unicode_Category_CC;
		case 0x000B: return Unicode_Category_CC;
		case 0x000C: return Unicode_Category_CC;
		case 0x000D: return Unicode_Category_CC;
		case 0x000E: return Unicode_Category_CC;
		case 0x000F: return Unicode_Category_CC;
		case 0x0010: return Unicode_Category_CC;
		case 0x0011: return Unicode_Category_CC;
		case 0x0012: return Unicode_Category_CC;
		case 0x0013: return Unicode_Category_CC;
		case 0x0014: return Unicode_Category_CC;
		case 0x0015: return Unicode_Category_CC;
		case 0x0016: return Unicode_Category_CC;
		case 0x0017: return Unicode_Category_CC;
		case 0x0018: return Unicode_Category_CC;
		case 0x0019: return Unicode_Category_CC;
		case 0x001A: return Unicode_Category_CC;
		case 0x001B: return Unicode_Category_CC;
		case 0x001C: return Unicode_Category_CC;
		case 0x001D: return Unicode_Category_CC;
		case 0x001E: return Unicode_Category_CC;
		case 0x001F: return Unicode_Category_CC;
		case 0x0020: return Unicode_Category_ZS;
		case 0x0021: return Unicode_Category_PO;
		case 0x0022: return Unicode_Category_PO;
		case 0x0023: return Unicode_Category_PO;
		case 0x0024: return Unicode_Category_SC;
		case 0x0025: return Unicode_Category_PO;
		case 0x0026: return Unicode_Category_PO;
		case 0x0027: return Unicode_Category_PO;
		case 0x0028: return Unicode_Category_PS;
		case 0x0029: return Unicode_Category_PE;
		case 0x002A: return Unicode_Category_PO;
		case 0x002B: return Unicode_Category_SM;
		case 0x002C: return Unicode_Category_PO;
		case 0x002D: return Unicode_Category_PD;
		case 0x002E: return Unicode_Category_PO;
		case 0x002F: return Unicode_Category_PO;
		case 0x0030: return Unicode_Category_ND;
		case 0x0031: return Unicode_Category_ND;
		case 0x0032: return Unicode_Category_ND;
		case 0x0033: return Unicode_Category_ND;
		case 0x0034: return Unicode_Category_ND;
		case 0x0035: return Unicode_Category_ND;
		case 0x0036: return Unicode_Category_ND;
		case 0x0037: return Unicode_Category_ND;
		case 0x0038: return Unicode_Category_ND;
		case 0x0039: return Unicode_Category_ND;
		case 0x003A: return Unicode_Category_PO;
		case 0x003B: return Unicode_Category_PO;
		case 0x003C: return Unicode_Category_SM;
		case 0x003D: return Unicode_Category_SM;
		case 0x003E: return Unicode_Category_SM;
		case 0x003F: return Unicode_Category_PO;
		case 0x0040: return Unicode_Category_PO;
		case 0x0041: return Unicode_Category_LU;
		case 0x0042: return Unicode_Category_LU;
		case 0x0043: return Unicode_Category_LU;
		case 0x0044: return Unicode_Category_LU;
		case 0x0045: return Unicode_Category_LU;
		case 0x0046: return Unicode_Category_LU;
		case 0x0047: return Unicode_Category_LU;
		case 0x0048: return Unicode_Category_LU;
		case 0x0049: return Unicode_Category_LU;
		case 0x004A: return Unicode_Category_LU;
		case 0x004B: return Unicode_Category_LU;
		case 0x004C: return Unicode_Category_LU;
		case 0x004D: return Unicode_Category_LU;
		case 0x004E: return Unicode_Category_LU;
		case 0x004F: return Unicode_Category_LU;
		case 0x0050: return Unicode_Category_LU;
		case 0x0051: return Unicode_Category_LU;
		case 0x0052: return Unicode_Category_LU;
		case 0x0053: return Unicode_Category_LU;
		case 0x0054: return Unicode_Category_LU;
		case 0x0055: return Unicode_Category_LU;
		case 0x0056: return Unicode_Category_LU;
		case 0x0057: return Unicode_Category_LU;
		case 0x0058: return Unicode_Category_LU;
		case 0x0059: return Unicode_Category_LU;
		case 0x005A: return Unicode_Category_LU;
		case 0x005B: return Unicode_Category_PS;
		case 0x005C: return Unicode_Category_PO;
		case 0x005D: return Unicode_Category_PE;
		case 0x005E: return Unicode_Category_SK;
		case 0x005F: return Unicode_Category_PC;
		case 0x0060: return Unicode_Category_SK;
		case 0x0061: return Unicode_Category_LL;
		case 0x0062: return Unicode_Category_LL;
		case 0x0063: return Unicode_Category_LL;
		case 0x0064: return Unicode_Category_LL;
		case 0x0065: return Unicode_Category_LL;
		case 0x0066: return Unicode_Category_LL;
		case 0x0067: return Unicode_Category_LL;
		case 0x0068: return Unicode_Category_LL;
		case 0x0069: return Unicode_Category_LL;
		case 0x006A: return Unicode_Category_LL;
		case 0x006B: return Unicode_Category_LL;
		case 0x006C: return Unicode_Category_LL;
		case 0x006D: return Unicode_Category_LL;
		case 0x006E: return Unicode_Category_LL;
		case 0x006F: return Unicode_Category_LL;
		case 0x0070: return Unicode_Category_LL;
		case 0x0071: return Unicode_Category_LL;
		case 0x0072: return Unicode_Category_LL;
		case 0x0073: return Unicode_Category_LL;
		case 0x0074: return Unicode_Category_LL;
		case 0x0075: return Unicode_Category_LL;
		case 0x0076: return Unicode_Category_LL;
		case 0x0077: return Unicode_Category_LL;
		case 0x0078: return Unicode_Category_LL;
		case 0x0079: return Unicode_Category_LL;
		case 0x007A: return Unicode_Category_LL;
		case 0x007B: return Unicode_Category_PS;
		case 0x007C: return Unicode_Category_SM;
		case 0x007D: return Unicode_Category_PE;
		case 0x007E: return Unicode_Category_SM;
		case 0x007F: return Unicode_Category_CC;
		case 0x0080: return Unicode_Category_CC;
		case 0x0081: return Unicode_Category_CC;
		case 0x0082: return Unicode_Category_CC;
		case 0x0083: return Unicode_Category_CC;
		case 0x0084: return Unicode_Category_CC;
		case 0x0085: return Unicode_Category_CC;
		case 0x0086: return Unicode_Category_CC;
		case 0x0087: return Unicode_Category_CC;
		case 0x0088: return Unicode_Category_CC;
		case 0x0089: return Unicode_Category_CC;
		case 0x008A: return Unicode_Category_CC;
		case 0x008B: return Unicode_Category_CC;
		case 0x008C: return Unicode_Category_CC;
		case 0x008D: return Unicode_Category_CC;
		case 0x008E: return Unicode_Category_CC;
		case 0x008F: return Unicode_Category_CC;
		case 0x0090: return Unicode_Category_CC;
		case 0x0091: return Unicode_Category_CC;
		case 0x0092: return Unicode_Category_CC;
		case 0x0093: return Unicode_Category_CC;
		case 0x0094: return Unicode_Category_CC;
		case 0x0095: return Unicode_Category_CC;
		case 0x0096: return Unicode_Category_CC;
		case 0x0097: return Unicode_Category_CC;
		case 0x0098: return Unicode_Category_CC;
		case 0x0099: return Unicode_Category_CC;
		case 0x009A: return Unicode_Category_CC;
		case 0x009B: return Unicode_Category_CC;
		case 0x009C: return Unicode_Category_CC;
		case 0x009D: return Unicode_Category_CC;
		case 0x009E: return Unicode_Category_CC;
		case 0x009F: return Unicode_Category_CC;
		case 0x00A0: return Unicode_Category_ZS;
		case 0x00A1: return Unicode_Category_PO;
		case 0x00A2: return Unicode_Category_SC;
		case 0x00A3: return Unicode_Category_SC;
		case 0x00A4: return Unicode_Category_SC;
		case 0x00A5: return Unicode_Category_SC;
		case 0x00A6: return Unicode_Category_SO;
		case 0x00A7: return Unicode_Category_PO;
		case 0x00A8: return Unicode_Category_SK;
		case 0x00A9: return Unicode_Category_SO;
		case 0x00AA: return Unicode_Category_LO;
		case 0x00AB: return Unicode_Category_PI;
		case 0x00AC: return Unicode_Category_SM;
		case 0x00AD: return Unicode_Category_CF;
		case 0x00AE: return Unicode_Category_SO;
		case 0x00AF: return Unicode_Category_SK;
		case 0x00B0: return Unicode_Category_SO;
		case 0x00B1: return Unicode_Category_SM;
		case 0x00B2: return Unicode_Category_NO;
		case 0x00B3: return Unicode_Category_NO;
		case 0x00B4: return Unicode_Category_SK;
		case 0x00B5: return Unicode_Category_LL;
		case 0x00B6: return Unicode_Category_PO;
		case 0x00B7: return Unicode_Category_PO;
		case 0x00B8: return Unicode_Category_SK;
		case 0x00B9: return Unicode_Category_NO;
		case 0x00BA: return Unicode_Category_LO;
		case 0x00BB: return Unicode_Category_PF;
		case 0x00BC: return Unicode_Category_NO;
		case 0x00BD: return Unicode_Category_NO;
		case 0x00BE: return Unicode_Category_NO;
		case 0x00BF: return Unicode_Category_PO;
		case 0x00C0: return Unicode_Category_LU;
		case 0x00C1: return Unicode_Category_LU;
		case 0x00C2: return Unicode_Category_LU;
		case 0x00C3: return Unicode_Category_LU;
		case 0x00C4: return Unicode_Category_LU;
		case 0x00C5: return Unicode_Category_LU;
		case 0x00C6: return Unicode_Category_LU;
		case 0x00C7: return Unicode_Category_LU;
		case 0x00C8: return Unicode_Category_LU;
		case 0x00C9: return Unicode_Category_LU;
		case 0x00CA: return Unicode_Category_LU;
		case 0x00CB: return Unicode_Category_LU;
		case 0x00CC: return Unicode_Category_LU;
		case 0x00CD: return Unicode_Category_LU;
		case 0x00CE: return Unicode_Category_LU;
		case 0x00CF: return Unicode_Category_LU;
		case 0x00D0: return Unicode_Category_LU;
		case 0x00D1: return Unicode_Category_LU;
		case 0x00D2: return Unicode_Category_LU;
		case 0x00D3: return Unicode_Category_LU;
		case 0x00D4: return Unicode_Category_LU;
		case 0x00D5: return Unicode_Category_LU;
		case 0x00D6: return Unicode_Category_LU;
		case 0x00D7: return Unicode_Category_SM;
		case 0x00D8: return Unicode_Category_LU;
		case 0x00D9: return Unicode_Category_LU;
		case 0x00DA: return Unicode_Category_LU;
		case 0x00DB: return Unicode_Category_LU;
		case 0x00DC: return Unicode_Category_LU;
		case 0x00DD: return Unicode_Category_LU;
		case 0x00DE: return Unicode_Category_LU;
		case 0x00DF: return Unicode_Category_LL;
		case 0x00E0: return Unicode_Category_LL;
		case 0x00E1: return Unicode_Category_LL;
		case 0x00E2: return Unicode_Category_LL;
		case 0x00E3: return Unicode_Category_LL;
		case 0x00E4: return Unicode_Category_LL;
		case 0x00E5: return Unicode_Category_LL;
		case 0x00E6: return Unicode_Category_LL;
		case 0x00E7: return Unicode_Category_LL;
		case 0x00E8: return Unicode_Category_LL;
		case 0x00E9: return Unicode_Category_LL;
		case 0x00EA: return Unicode_Category_LL;
		case 0x00EB: return Unicode_Category_LL;
		case 0x00EC: return Unicode_Category_LL;
		case 0x00ED: return Unicode_Category_LL;
		case 0x00EE: return Unicode_Category_LL;
		case 0x00EF: return Unicode_Category_LL;
		case 0x00F0: return Unicode_Category_LL;
		case 0x00F1: return Unicode_Category_LL;
		case 0x00F2: return Unicode_Category_LL;
		case 0x00F3: return Unicode_Category_LL;
		case 0x00F4: return Unicode_Category_LL;
		case 0x00F5: return Unicode_Category_LL;
		case 0x00F6: return Unicode_Category_LL;
		case 0x00F7: return Unicode_Category_SM;
		case 0x00F8: return Unicode_Category_LL;
		case 0x00F9: return Unicode_Category_LL;
		case 0x00FA: return Unicode_Category_LL;
		case 0x00FB: return Unicode_Category_LL;
		case 0x00FC: return Unicode_Category_LL;
		case 0x00FD: return Unicode_Category_LL;
		case 0x00FE: return Unicode_Category_LL;
		case 0x00FF: return Unicode_Category_LL;
		case 0x0100: return Unicode_Category_LU;
		case 0x0101: return Unicode_Category_LL;
		case 0x0102: return Unicode_Category_LU;
		case 0x0103: return Unicode_Category_LL;
		case 0x0104: return Unicode_Category_LU;
		case 0x0105: return Unicode_Category_LL;
		case 0x0106: return Unicode_Category_LU;
		case 0x0107: return Unicode_Category_LL;
		case 0x0108: return Unicode_Category_LU;
		case 0x0109: return Unicode_Category_LL;
		case 0x010A: return Unicode_Category_LU;
		case 0x010B: return Unicode_Category_LL;
		case 0x010C: return Unicode_Category_LU;
		case 0x010D: return Unicode_Category_LL;
		case 0x010E: return Unicode_Category_LU;
		case 0x010F: return Unicode_Category_LL;
		case 0x0110: return Unicode_Category_LU;
		case 0x0111: return Unicode_Category_LL;
		case 0x0112: return Unicode_Category_LU;
		case 0x0113: return Unicode_Category_LL;
		case 0x0114: return Unicode_Category_LU;
		case 0x0115: return Unicode_Category_LL;
		case 0x0116: return Unicode_Category_LU;
		case 0x0117: return Unicode_Category_LL;
		case 0x0118: return Unicode_Category_LU;
		case 0x0119: return Unicode_Category_LL;
		case 0x011A: return Unicode_Category_LU;
		case 0x011B: return Unicode_Category_LL;
		case 0x011C: return Unicode_Category_LU;
		case 0x011D: return Unicode_Category_LL;
		case 0x011E: return Unicode_Category_LU;
		case 0x011F: return Unicode_Category_LL;
		case 0x0120: return Unicode_Category_LU;
		case 0x0121: return Unicode_Category_LL;
		case 0x0122: return Unicode_Category_LU;
		case 0x0123: return Unicode_Category_LL;
		case 0x0124: return Unicode_Category_LU;
		case 0x0125: return Unicode_Category_LL;
		case 0x0126: return Unicode_Category_LU;
		case 0x0127: return Unicode_Category_LL;
		case 0x0128: return Unicode_Category_LU;
		case 0x0129: return Unicode_Category_LL;
		case 0x012A: return Unicode_Category_LU;
		case 0x012B: return Unicode_Category_LL;
		case 0x012C: return Unicode_Category_LU;
		case 0x012D: return Unicode_Category_LL;
		case 0x012E: return Unicode_Category_LU;
		case 0x012F: return Unicode_Category_LL;
		case 0x0130: return Unicode_Category_LU;
		case 0x0131: return Unicode_Category_LL;
		case 0x0132: return Unicode_Category_LU;
		case 0x0133: return Unicode_Category_LL;
		case 0x0134: return Unicode_Category_LU;
		case 0x0135: return Unicode_Category_LL;
		case 0x0136: return Unicode_Category_LU;
		case 0x0137: return Unicode_Category_LL;
		case 0x0138: return Unicode_Category_LL;
		case 0x0139: return Unicode_Category_LU;
		case 0x013A: return Unicode_Category_LL;
		case 0x013B: return Unicode_Category_LU;
		case 0x013C: return Unicode_Category_LL;
		case 0x013D: return Unicode_Category_LU;
		case 0x013E: return Unicode_Category_LL;
		case 0x013F: return Unicode_Category_LU;
		case 0x0140: return Unicode_Category_LL;
		case 0x0141: return Unicode_Category_LU;
		case 0x0142: return Unicode_Category_LL;
		case 0x0143: return Unicode_Category_LU;
		case 0x0144: return Unicode_Category_LL;
		case 0x0145: return Unicode_Category_LU;
		case 0x0146: return Unicode_Category_LL;
		case 0x0147: return Unicode_Category_LU;
		case 0x0148: return Unicode_Category_LL;
		case 0x0149: return Unicode_Category_LL;
		case 0x014A: return Unicode_Category_LU;
		case 0x014B: return Unicode_Category_LL;
		case 0x014C: return Unicode_Category_LU;
		case 0x014D: return Unicode_Category_LL;
		case 0x014E: return Unicode_Category_LU;
		case 0x014F: return Unicode_Category_LL;
		case 0x0150: return Unicode_Category_LU;
		case 0x0151: return Unicode_Category_LL;
		case 0x0152: return Unicode_Category_LU;
		case 0x0153: return Unicode_Category_LL;
		case 0x0154: return Unicode_Category_LU;
		case 0x0155: return Unicode_Category_LL;
		case 0x0156: return Unicode_Category_LU;
		case 0x0157: return Unicode_Category_LL;
		case 0x0158: return Unicode_Category_LU;
		case 0x0159: return Unicode_Category_LL;
		case 0x015A: return Unicode_Category_LU;
		case 0x015B: return Unicode_Category_LL;
		case 0x015C: return Unicode_Category_LU;
		case 0x015D: return Unicode_Category_LL;
		case 0x015E: return Unicode_Category_LU;
		case 0x015F: return Unicode_Category_LL;
		case 0x0160: return Unicode_Category_LU;
		case 0x0161: return Unicode_Category_LL;
		case 0x0162: return Unicode_Category_LU;
		case 0x0163: return Unicode_Category_LL;
		case 0x0164: return Unicode_Category_LU;
		case 0x0165: return Unicode_Category_LL;
		case 0x0166: return Unicode_Category_LU;
		case 0x0167: return Unicode_Category_LL;
		case 0x0168: return Unicode_Category_LU;
		case 0x0169: return Unicode_Category_LL;
		case 0x016A: return Unicode_Category_LU;
		case 0x016B: return Unicode_Category_LL;
		case 0x016C: return Unicode_Category_LU;
		case 0x016D: return Unicode_Category_LL;
		case 0x016E: return Unicode_Category_LU;
		case 0x016F: return Unicode_Category_LL;
		case 0x0170: return Unicode_Category_LU;
		case 0x0171: return Unicode_Category_LL;
		case 0x0172: return Unicode_Category_LU;
		case 0x0173: return Unicode_Category_LL;
		case 0x0174: return Unicode_Category_LU;
		case 0x0175: return Unicode_Category_LL;
		case 0x0176: return Unicode_Category_LU;
		case 0x0177: return Unicode_Category_LL;
		case 0x0178: return Unicode_Category_LU;
		case 0x0179: return Unicode_Category_LU;
		case 0x017A: return Unicode_Category_LL;
		case 0x017B: return Unicode_Category_LU;
		case 0x017C: return Unicode_Category_LL;
		case 0x017D: return Unicode_Category_LU;
		case 0x017E: return Unicode_Category_LL;
		case 0x017F: return Unicode_Category_LL;
		case 0x0180: return Unicode_Category_LL;
		case 0x0181: return Unicode_Category_LU;
		case 0x0182: return Unicode_Category_LU;
		case 0x0183: return Unicode_Category_LL;
		case 0x0184: return Unicode_Category_LU;
		case 0x0185: return Unicode_Category_LL;
		case 0x0186: return Unicode_Category_LU;
		case 0x0187: return Unicode_Category_LU;
		case 0x0188: return Unicode_Category_LL;
		case 0x0189: return Unicode_Category_LU;
		case 0x018A: return Unicode_Category_LU;
		case 0x018B: return Unicode_Category_LU;
		case 0x018C: return Unicode_Category_LL;
		case 0x018D: return Unicode_Category_LL;
		case 0x018E: return Unicode_Category_LU;
		case 0x018F: return Unicode_Category_LU;
		case 0x0190: return Unicode_Category_LU;
		case 0x0191: return Unicode_Category_LU;
		case 0x0192: return Unicode_Category_LL;
		case 0x0193: return Unicode_Category_LU;
		case 0x0194: return Unicode_Category_LU;
		case 0x0195: return Unicode_Category_LL;
		case 0x0196: return Unicode_Category_LU;
		case 0x0197: return Unicode_Category_LU;
		case 0x0198: return Unicode_Category_LU;
		case 0x0199: return Unicode_Category_LL;
		case 0x019A: return Unicode_Category_LL;
		case 0x019B: return Unicode_Category_LL;
		case 0x019C: return Unicode_Category_LU;
		case 0x019D: return Unicode_Category_LU;
		case 0x019E: return Unicode_Category_LL;
		case 0x019F: return Unicode_Category_LU;
		case 0x01A0: return Unicode_Category_LU;
		case 0x01A1: return Unicode_Category_LL;
		case 0x01A2: return Unicode_Category_LU;
		case 0x01A3: return Unicode_Category_LL;
		case 0x01A4: return Unicode_Category_LU;
		case 0x01A5: return Unicode_Category_LL;
		case 0x01A6: return Unicode_Category_LU;
		case 0x01A7: return Unicode_Category_LU;
		case 0x01A8: return Unicode_Category_LL;
		case 0x01A9: return Unicode_Category_LU;
		case 0x01AA: return Unicode_Category_LL;
		case 0x01AB: return Unicode_Category_LL;
		case 0x01AC: return Unicode_Category_LU;
		case 0x01AD: return Unicode_Category_LL;
		case 0x01AE: return Unicode_Category_LU;
		case 0x01AF: return Unicode_Category_LU;
		case 0x01B0: return Unicode_Category_LL;
		case 0x01B1: return Unicode_Category_LU;
		case 0x01B2: return Unicode_Category_LU;
		case 0x01B3: return Unicode_Category_LU;
		case 0x01B4: return Unicode_Category_LL;
		case 0x01B5: return Unicode_Category_LU;
		case 0x01B6: return Unicode_Category_LL;
		case 0x01B7: return Unicode_Category_LU;
		case 0x01B8: return Unicode_Category_LU;
		case 0x01B9: return Unicode_Category_LL;
		case 0x01BA: return Unicode_Category_LL;
		case 0x01BB: return Unicode_Category_LO;
		case 0x01BC: return Unicode_Category_LU;
		case 0x01BD: return Unicode_Category_LL;
		case 0x01BE: return Unicode_Category_LL;
		case 0x01BF: return Unicode_Category_LL;
		case 0x01C0: return Unicode_Category_LO;
		case 0x01C1: return Unicode_Category_LO;
		case 0x01C2: return Unicode_Category_LO;
		case 0x01C3: return Unicode_Category_LO;
		case 0x01C4: return Unicode_Category_LU;
		case 0x01C5: return Unicode_Category_LT;
		case 0x01C6: return Unicode_Category_LL;
		case 0x01C7: return Unicode_Category_LU;
		case 0x01C8: return Unicode_Category_LT;
		case 0x01C9: return Unicode_Category_LL;
		case 0x01CA: return Unicode_Category_LU;
		case 0x01CB: return Unicode_Category_LT;
		case 0x01CC: return Unicode_Category_LL;
		case 0x01CD: return Unicode_Category_LU;
		case 0x01CE: return Unicode_Category_LL;
		case 0x01CF: return Unicode_Category_LU;
		case 0x01D0: return Unicode_Category_LL;
		case 0x01D1: return Unicode_Category_LU;
		case 0x01D2: return Unicode_Category_LL;
		case 0x01D3: return Unicode_Category_LU;
		case 0x01D4: return Unicode_Category_LL;
		case 0x01D5: return Unicode_Category_LU;
		case 0x01D6: return Unicode_Category_LL;
		case 0x01D7: return Unicode_Category_LU;
		case 0x01D8: return Unicode_Category_LL;
		case 0x01D9: return Unicode_Category_LU;
		case 0x01DA: return Unicode_Category_LL;
		case 0x01DB: return Unicode_Category_LU;
		case 0x01DC: return Unicode_Category_LL;
		case 0x01DD: return Unicode_Category_LL;
		case 0x01DE: return Unicode_Category_LU;
		case 0x01DF: return Unicode_Category_LL;
		case 0x01E0: return Unicode_Category_LU;
		case 0x01E1: return Unicode_Category_LL;
		case 0x01E2: return Unicode_Category_LU;
		case 0x01E3: return Unicode_Category_LL;
		case 0x01E4: return Unicode_Category_LU;
		case 0x01E5: return Unicode_Category_LL;
		case 0x01E6: return Unicode_Category_LU;
		case 0x01E7: return Unicode_Category_LL;
		case 0x01E8: return Unicode_Category_LU;
		case 0x01E9: return Unicode_Category_LL;
		case 0x01EA: return Unicode_Category_LU;
		case 0x01EB: return Unicode_Category_LL;
		case 0x01EC: return Unicode_Category_LU;
		case 0x01ED: return Unicode_Category_LL;
		case 0x01EE: return Unicode_Category_LU;
		case 0x01EF: return Unicode_Category_LL;
		case 0x01F0: return Unicode_Category_LL;
		case 0x01F1: return Unicode_Category_LU;
		case 0x01F2: return Unicode_Category_LT;
		case 0x01F3: return Unicode_Category_LL;
		case 0x01F4: return Unicode_Category_LU;
		case 0x01F5: return Unicode_Category_LL;
		case 0x01F6: return Unicode_Category_LU;
		case 0x01F7: return Unicode_Category_LU;
		case 0x01F8: return Unicode_Category_LU;
		case 0x01F9: return Unicode_Category_LL;
		case 0x01FA: return Unicode_Category_LU;
		case 0x01FB: return Unicode_Category_LL;
		case 0x01FC: return Unicode_Category_LU;
		case 0x01FD: return Unicode_Category_LL;
		case 0x01FE: return Unicode_Category_LU;
		case 0x01FF: return Unicode_Category_LL;
		case 0x0200: return Unicode_Category_LU;
		case 0x0201: return Unicode_Category_LL;
		case 0x0202: return Unicode_Category_LU;
		case 0x0203: return Unicode_Category_LL;
		case 0x0204: return Unicode_Category_LU;
		case 0x0205: return Unicode_Category_LL;
		case 0x0206: return Unicode_Category_LU;
		case 0x0207: return Unicode_Category_LL;
		case 0x0208: return Unicode_Category_LU;
		case 0x0209: return Unicode_Category_LL;
		case 0x020A: return Unicode_Category_LU;
		case 0x020B: return Unicode_Category_LL;
		case 0x020C: return Unicode_Category_LU;
		case 0x020D: return Unicode_Category_LL;
		case 0x020E: return Unicode_Category_LU;
		case 0x020F: return Unicode_Category_LL;
		case 0x0210: return Unicode_Category_LU;
		case 0x0211: return Unicode_Category_LL;
		case 0x0212: return Unicode_Category_LU;
		case 0x0213: return Unicode_Category_LL;
		case 0x0214: return Unicode_Category_LU;
		case 0x0215: return Unicode_Category_LL;
		case 0x0216: return Unicode_Category_LU;
		case 0x0217: return Unicode_Category_LL;
		case 0x0218: return Unicode_Category_LU;
		case 0x0219: return Unicode_Category_LL;
		case 0x021A: return Unicode_Category_LU;
		case 0x021B: return Unicode_Category_LL;
		case 0x021C: return Unicode_Category_LU;
		case 0x021D: return Unicode_Category_LL;
		case 0x021E: return Unicode_Category_LU;
		case 0x021F: return Unicode_Category_LL;
		case 0x0220: return Unicode_Category_LU;
		case 0x0221: return Unicode_Category_LL;
		case 0x0222: return Unicode_Category_LU;
		case 0x0223: return Unicode_Category_LL;
		case 0x0224: return Unicode_Category_LU;
		case 0x0225: return Unicode_Category_LL;
		case 0x0226: return Unicode_Category_LU;
		case 0x0227: return Unicode_Category_LL;
		case 0x0228: return Unicode_Category_LU;
		case 0x0229: return Unicode_Category_LL;
		case 0x022A: return Unicode_Category_LU;
		case 0x022B: return Unicode_Category_LL;
		case 0x022C: return Unicode_Category_LU;
		case 0x022D: return Unicode_Category_LL;
		case 0x022E: return Unicode_Category_LU;
		case 0x022F: return Unicode_Category_LL;
		case 0x0230: return Unicode_Category_LU;
		case 0x0231: return Unicode_Category_LL;
		case 0x0232: return Unicode_Category_LU;
		case 0x0233: return Unicode_Category_LL;
		case 0x0234: return Unicode_Category_LL;
		case 0x0235: return Unicode_Category_LL;
		case 0x0236: return Unicode_Category_LL;
		case 0x0237: return Unicode_Category_LL;
		case 0x0238: return Unicode_Category_LL;
		case 0x0239: return Unicode_Category_LL;
		case 0x023A: return Unicode_Category_LU;
		case 0x023B: return Unicode_Category_LU;
		case 0x023C: return Unicode_Category_LL;
		case 0x023D: return Unicode_Category_LU;
		case 0x023E: return Unicode_Category_LU;
		case 0x023F: return Unicode_Category_LL;
		case 0x0240: return Unicode_Category_LL;
		case 0x0241: return Unicode_Category_LU;
		case 0x0242: return Unicode_Category_LL;
		case 0x0243: return Unicode_Category_LU;
		case 0x0244: return Unicode_Category_LU;
		case 0x0245: return Unicode_Category_LU;
		case 0x0246: return Unicode_Category_LU;
		case 0x0247: return Unicode_Category_LL;
		case 0x0248: return Unicode_Category_LU;
		case 0x0249: return Unicode_Category_LL;
		case 0x024A: return Unicode_Category_LU;
		case 0x024B: return Unicode_Category_LL;
		case 0x024C: return Unicode_Category_LU;
		case 0x024D: return Unicode_Category_LL;
		case 0x024E: return Unicode_Category_LU;
		case 0x024F: return Unicode_Category_LL;
		case 0x0250: return Unicode_Category_LL;
		case 0x0251: return Unicode_Category_LL;
		case 0x0252: return Unicode_Category_LL;
		case 0x0253: return Unicode_Category_LL;
		case 0x0254: return Unicode_Category_LL;
		case 0x0255: return Unicode_Category_LL;
		case 0x0256: return Unicode_Category_LL;
		case 0x0257: return Unicode_Category_LL;
		case 0x0258: return Unicode_Category_LL;
		case 0x0259: return Unicode_Category_LL;
		case 0x025A: return Unicode_Category_LL;
		case 0x025B: return Unicode_Category_LL;
		case 0x025C: return Unicode_Category_LL;
		case 0x025D: return Unicode_Category_LL;
		case 0x025E: return Unicode_Category_LL;
		case 0x025F: return Unicode_Category_LL;
		case 0x0260: return Unicode_Category_LL;
		case 0x0261: return Unicode_Category_LL;
		case 0x0262: return Unicode_Category_LL;
		case 0x0263: return Unicode_Category_LL;
		case 0x0264: return Unicode_Category_LL;
		case 0x0265: return Unicode_Category_LL;
		case 0x0266: return Unicode_Category_LL;
		case 0x0267: return Unicode_Category_LL;
		case 0x0268: return Unicode_Category_LL;
		case 0x0269: return Unicode_Category_LL;
		case 0x026A: return Unicode_Category_LL;
		case 0x026B: return Unicode_Category_LL;
		case 0x026C: return Unicode_Category_LL;
		case 0x026D: return Unicode_Category_LL;
		case 0x026E: return Unicode_Category_LL;
		case 0x026F: return Unicode_Category_LL;
		case 0x0270: return Unicode_Category_LL;
		case 0x0271: return Unicode_Category_LL;
		case 0x0272: return Unicode_Category_LL;
		case 0x0273: return Unicode_Category_LL;
		case 0x0274: return Unicode_Category_LL;
		case 0x0275: return Unicode_Category_LL;
		case 0x0276: return Unicode_Category_LL;
		case 0x0277: return Unicode_Category_LL;
		case 0x0278: return Unicode_Category_LL;
		case 0x0279: return Unicode_Category_LL;
		case 0x027A: return Unicode_Category_LL;
		case 0x027B: return Unicode_Category_LL;
		case 0x027C: return Unicode_Category_LL;
		case 0x027D: return Unicode_Category_LL;
		case 0x027E: return Unicode_Category_LL;
		case 0x027F: return Unicode_Category_LL;
		case 0x0280: return Unicode_Category_LL;
		case 0x0281: return Unicode_Category_LL;
		case 0x0282: return Unicode_Category_LL;
		case 0x0283: return Unicode_Category_LL;
		case 0x0284: return Unicode_Category_LL;
		case 0x0285: return Unicode_Category_LL;
		case 0x0286: return Unicode_Category_LL;
		case 0x0287: return Unicode_Category_LL;
		case 0x0288: return Unicode_Category_LL;
		case 0x0289: return Unicode_Category_LL;
		case 0x028A: return Unicode_Category_LL;
		case 0x028B: return Unicode_Category_LL;
		case 0x028C: return Unicode_Category_LL;
		case 0x028D: return Unicode_Category_LL;
		case 0x028E: return Unicode_Category_LL;
		case 0x028F: return Unicode_Category_LL;
		case 0x0290: return Unicode_Category_LL;
		case 0x0291: return Unicode_Category_LL;
		case 0x0292: return Unicode_Category_LL;
		case 0x0293: return Unicode_Category_LL;
		case 0x0294: return Unicode_Category_LO;
		case 0x0295: return Unicode_Category_LL;
		case 0x0296: return Unicode_Category_LL;
		case 0x0297: return Unicode_Category_LL;
		case 0x0298: return Unicode_Category_LL;
		case 0x0299: return Unicode_Category_LL;
		case 0x029A: return Unicode_Category_LL;
		case 0x029B: return Unicode_Category_LL;
		case 0x029C: return Unicode_Category_LL;
		case 0x029D: return Unicode_Category_LL;
		case 0x029E: return Unicode_Category_LL;
		case 0x029F: return Unicode_Category_LL;
		case 0x02A0: return Unicode_Category_LL;
		case 0x02A1: return Unicode_Category_LL;
		case 0x02A2: return Unicode_Category_LL;
		case 0x02A3: return Unicode_Category_LL;
		case 0x02A4: return Unicode_Category_LL;
		case 0x02A5: return Unicode_Category_LL;
		case 0x02A6: return Unicode_Category_LL;
		case 0x02A7: return Unicode_Category_LL;
		case 0x02A8: return Unicode_Category_LL;
		case 0x02A9: return Unicode_Category_LL;
		case 0x02AA: return Unicode_Category_LL;
		case 0x02AB: return Unicode_Category_LL;
		case 0x02AC: return Unicode_Category_LL;
		case 0x02AD: return Unicode_Category_LL;
		case 0x02AE: return Unicode_Category_LL;
		case 0x02AF: return Unicode_Category_LL;
		case 0x02B0: return Unicode_Category_LM;
		case 0x02B1: return Unicode_Category_LM;
		case 0x02B2: return Unicode_Category_LM;
		case 0x02B3: return Unicode_Category_LM;
		case 0x02B4: return Unicode_Category_LM;
		case 0x02B5: return Unicode_Category_LM;
		case 0x02B6: return Unicode_Category_LM;
		case 0x02B7: return Unicode_Category_LM;
		case 0x02B8: return Unicode_Category_LM;
		case 0x02B9: return Unicode_Category_LM;
		case 0x02BA: return Unicode_Category_LM;
		case 0x02BB: return Unicode_Category_LM;
		case 0x02BC: return Unicode_Category_LM;
		case 0x02BD: return Unicode_Category_LM;
		case 0x02BE: return Unicode_Category_LM;
		case 0x02BF: return Unicode_Category_LM;
		case 0x02C0: return Unicode_Category_LM;
		case 0x02C1: return Unicode_Category_LM;
		case 0x02C2: return Unicode_Category_SK;
		case 0x02C3: return Unicode_Category_SK;
		case 0x02C4: return Unicode_Category_SK;
		case 0x02C5: return Unicode_Category_SK;
		case 0x02C6: return Unicode_Category_LM;
		case 0x02C7: return Unicode_Category_LM;
		case 0x02C8: return Unicode_Category_LM;
		case 0x02C9: return Unicode_Category_LM;
		case 0x02CA: return Unicode_Category_LM;
		case 0x02CB: return Unicode_Category_LM;
		case 0x02CC: return Unicode_Category_LM;
		case 0x02CD: return Unicode_Category_LM;
		case 0x02CE: return Unicode_Category_LM;
		case 0x02CF: return Unicode_Category_LM;
		case 0x02D0: return Unicode_Category_LM;
		case 0x02D1: return Unicode_Category_LM;
		case 0x02D2: return Unicode_Category_SK;
		case 0x02D3: return Unicode_Category_SK;
		case 0x02D4: return Unicode_Category_SK;
		case 0x02D5: return Unicode_Category_SK;
		case 0x02D6: return Unicode_Category_SK;
		case 0x02D7: return Unicode_Category_SK;
		case 0x02D8: return Unicode_Category_SK;
		case 0x02D9: return Unicode_Category_SK;
		case 0x02DA: return Unicode_Category_SK;
		case 0x02DB: return Unicode_Category_SK;
		case 0x02DC: return Unicode_Category_SK;
		case 0x02DD: return Unicode_Category_SK;
		case 0x02DE: return Unicode_Category_SK;
		case 0x02DF: return Unicode_Category_SK;
		case 0x02E0: return Unicode_Category_LM;
		case 0x02E1: return Unicode_Category_LM;
		case 0x02E2: return Unicode_Category_LM;
		case 0x02E3: return Unicode_Category_LM;
		case 0x02E4: return Unicode_Category_LM;
		case 0x02E5: return Unicode_Category_SK;
		case 0x02E6: return Unicode_Category_SK;
		case 0x02E7: return Unicode_Category_SK;
		case 0x02E8: return Unicode_Category_SK;
		case 0x02E9: return Unicode_Category_SK;
		case 0x02EA: return Unicode_Category_SK;
		case 0x02EB: return Unicode_Category_SK;
		case 0x02EC: return Unicode_Category_LM;
		case 0x02ED: return Unicode_Category_SK;
		case 0x02EE: return Unicode_Category_LM;
		case 0x02EF: return Unicode_Category_SK;
		case 0x02F0: return Unicode_Category_SK;
		case 0x02F1: return Unicode_Category_SK;
		case 0x02F2: return Unicode_Category_SK;
		case 0x02F3: return Unicode_Category_SK;
		case 0x02F4: return Unicode_Category_SK;
		case 0x02F5: return Unicode_Category_SK;
		case 0x02F6: return Unicode_Category_SK;
		case 0x02F7: return Unicode_Category_SK;
		case 0x02F8: return Unicode_Category_SK;
		case 0x02F9: return Unicode_Category_SK;
		case 0x02FA: return Unicode_Category_SK;
		case 0x02FB: return Unicode_Category_SK;
		case 0x02FC: return Unicode_Category_SK;
		case 0x02FD: return Unicode_Category_SK;
		case 0x02FE: return Unicode_Category_SK;
		case 0x02FF: return Unicode_Category_SK;
		case 0x0300: return Unicode_Category_MN;
		case 0x0301: return Unicode_Category_MN;
		case 0x0302: return Unicode_Category_MN;
		case 0x0303: return Unicode_Category_MN;
		case 0x0304: return Unicode_Category_MN;
		case 0x0305: return Unicode_Category_MN;
		case 0x0306: return Unicode_Category_MN;
		case 0x0307: return Unicode_Category_MN;
		case 0x0308: return Unicode_Category_MN;
		case 0x0309: return Unicode_Category_MN;
		case 0x030A: return Unicode_Category_MN;
		case 0x030B: return Unicode_Category_MN;
		case 0x030C: return Unicode_Category_MN;
		case 0x030D: return Unicode_Category_MN;
		case 0x030E: return Unicode_Category_MN;
		case 0x030F: return Unicode_Category_MN;
		case 0x0310: return Unicode_Category_MN;
		case 0x0311: return Unicode_Category_MN;
		case 0x0312: return Unicode_Category_MN;
		case 0x0313: return Unicode_Category_MN;
		case 0x0314: return Unicode_Category_MN;
		case 0x0315: return Unicode_Category_MN;
		case 0x0316: return Unicode_Category_MN;
		case 0x0317: return Unicode_Category_MN;
		case 0x0318: return Unicode_Category_MN;
		case 0x0319: return Unicode_Category_MN;
		case 0x031A: return Unicode_Category_MN;
		case 0x031B: return Unicode_Category_MN;
		case 0x031C: return Unicode_Category_MN;
		case 0x031D: return Unicode_Category_MN;
		case 0x031E: return Unicode_Category_MN;
		case 0x031F: return Unicode_Category_MN;
		case 0x0320: return Unicode_Category_MN;
		case 0x0321: return Unicode_Category_MN;
		case 0x0322: return Unicode_Category_MN;
		case 0x0323: return Unicode_Category_MN;
		case 0x0324: return Unicode_Category_MN;
		case 0x0325: return Unicode_Category_MN;
		case 0x0326: return Unicode_Category_MN;
		case 0x0327: return Unicode_Category_MN;
		case 0x0328: return Unicode_Category_MN;
		case 0x0329: return Unicode_Category_MN;
		case 0x032A: return Unicode_Category_MN;
		case 0x032B: return Unicode_Category_MN;
		case 0x032C: return Unicode_Category_MN;
		case 0x032D: return Unicode_Category_MN;
		case 0x032E: return Unicode_Category_MN;
		case 0x032F: return Unicode_Category_MN;
		case 0x0330: return Unicode_Category_MN;
		case 0x0331: return Unicode_Category_MN;
		case 0x0332: return Unicode_Category_MN;
		case 0x0333: return Unicode_Category_MN;
		case 0x0334: return Unicode_Category_MN;
		case 0x0335: return Unicode_Category_MN;
		case 0x0336: return Unicode_Category_MN;
		case 0x0337: return Unicode_Category_MN;
		case 0x0338: return Unicode_Category_MN;
		case 0x0339: return Unicode_Category_MN;
		case 0x033A: return Unicode_Category_MN;
		case 0x033B: return Unicode_Category_MN;
		case 0x033C: return Unicode_Category_MN;
		case 0x033D: return Unicode_Category_MN;
		case 0x033E: return Unicode_Category_MN;
		case 0x033F: return Unicode_Category_MN;
		case 0x0340: return Unicode_Category_MN;
		case 0x0341: return Unicode_Category_MN;
		case 0x0342: return Unicode_Category_MN;
		case 0x0343: return Unicode_Category_MN;
		case 0x0344: return Unicode_Category_MN;
		case 0x0345: return Unicode_Category_MN;
		case 0x0346: return Unicode_Category_MN;
		case 0x0347: return Unicode_Category_MN;
		case 0x0348: return Unicode_Category_MN;
		case 0x0349: return Unicode_Category_MN;
		case 0x034A: return Unicode_Category_MN;
		case 0x034B: return Unicode_Category_MN;
		case 0x034C: return Unicode_Category_MN;
		case 0x034D: return Unicode_Category_MN;
		case 0x034E: return Unicode_Category_MN;
		case 0x034F: return Unicode_Category_MN;
		case 0x0350: return Unicode_Category_MN;
		case 0x0351: return Unicode_Category_MN;
		case 0x0352: return Unicode_Category_MN;
		case 0x0353: return Unicode_Category_MN;
		case 0x0354: return Unicode_Category_MN;
		case 0x0355: return Unicode_Category_MN;
		case 0x0356: return Unicode_Category_MN;
		case 0x0357: return Unicode_Category_MN;
		case 0x0358: return Unicode_Category_MN;
		case 0x0359: return Unicode_Category_MN;
		case 0x035A: return Unicode_Category_MN;
		case 0x035B: return Unicode_Category_MN;
		case 0x035C: return Unicode_Category_MN;
		case 0x035D: return Unicode_Category_MN;
		case 0x035E: return Unicode_Category_MN;
		case 0x035F: return Unicode_Category_MN;
		case 0x0360: return Unicode_Category_MN;
		case 0x0361: return Unicode_Category_MN;
		case 0x0362: return Unicode_Category_MN;
		case 0x0363: return Unicode_Category_MN;
		case 0x0364: return Unicode_Category_MN;
		case 0x0365: return Unicode_Category_MN;
		case 0x0366: return Unicode_Category_MN;
		case 0x0367: return Unicode_Category_MN;
		case 0x0368: return Unicode_Category_MN;
		case 0x0369: return Unicode_Category_MN;
		case 0x036A: return Unicode_Category_MN;
		case 0x036B: return Unicode_Category_MN;
		case 0x036C: return Unicode_Category_MN;
		case 0x036D: return Unicode_Category_MN;
		case 0x036E: return Unicode_Category_MN;
		case 0x036F: return Unicode_Category_MN;
		case 0x0370: return Unicode_Category_LU;
		case 0x0371: return Unicode_Category_LL;
		case 0x0372: return Unicode_Category_LU;
		case 0x0373: return Unicode_Category_LL;
		case 0x0374: return Unicode_Category_LM;
		case 0x0375: return Unicode_Category_SK;
		case 0x0376: return Unicode_Category_LU;
		case 0x0377: return Unicode_Category_LL;
		case 0x037A: return Unicode_Category_LM;
		case 0x037B: return Unicode_Category_LL;
		case 0x037C: return Unicode_Category_LL;
		case 0x037D: return Unicode_Category_LL;
		case 0x037E: return Unicode_Category_PO;
		case 0x037F: return Unicode_Category_LU;
		case 0x0384: return Unicode_Category_SK;
		case 0x0385: return Unicode_Category_SK;
		case 0x0386: return Unicode_Category_LU;
		case 0x0387: return Unicode_Category_PO;
		case 0x0388: return Unicode_Category_LU;
		case 0x0389: return Unicode_Category_LU;
		case 0x038A: return Unicode_Category_LU;
		case 0x038C: return Unicode_Category_LU;
		case 0x038E: return Unicode_Category_LU;
		case 0x038F: return Unicode_Category_LU;
		case 0x0390: return Unicode_Category_LL;
		case 0x0391: return Unicode_Category_LU;
		case 0x0392: return Unicode_Category_LU;
		case 0x0393: return Unicode_Category_LU;
		case 0x0394: return Unicode_Category_LU;
		case 0x0395: return Unicode_Category_LU;
		case 0x0396: return Unicode_Category_LU;
		case 0x0397: return Unicode_Category_LU;
		case 0x0398: return Unicode_Category_LU;
		case 0x0399: return Unicode_Category_LU;
		case 0x039A: return Unicode_Category_LU;
		case 0x039B: return Unicode_Category_LU;
		case 0x039C: return Unicode_Category_LU;
		case 0x039D: return Unicode_Category_LU;
		case 0x039E: return Unicode_Category_LU;
		case 0x039F: return Unicode_Category_LU;
		case 0x03A0: return Unicode_Category_LU;
		case 0x03A1: return Unicode_Category_LU;
		case 0x03A3: return Unicode_Category_LU;
		case 0x03A4: return Unicode_Category_LU;
		case 0x03A5: return Unicode_Category_LU;
		case 0x03A6: return Unicode_Category_LU;
		case 0x03A7: return Unicode_Category_LU;
		case 0x03A8: return Unicode_Category_LU;
		case 0x03A9: return Unicode_Category_LU;
		case 0x03AA: return Unicode_Category_LU;
		case 0x03AB: return Unicode_Category_LU;
		case 0x03AC: return Unicode_Category_LL;
		case 0x03AD: return Unicode_Category_LL;
		case 0x03AE: return Unicode_Category_LL;
		case 0x03AF: return Unicode_Category_LL;
		case 0x03B0: return Unicode_Category_LL;
		case 0x03B1: return Unicode_Category_LL;
		case 0x03B2: return Unicode_Category_LL;
		case 0x03B3: return Unicode_Category_LL;
		case 0x03B4: return Unicode_Category_LL;
		case 0x03B5: return Unicode_Category_LL;
		case 0x03B6: return Unicode_Category_LL;
		case 0x03B7: return Unicode_Category_LL;
		case 0x03B8: return Unicode_Category_LL;
		case 0x03B9: return Unicode_Category_LL;
		case 0x03BA: return Unicode_Category_LL;
		case 0x03BB: return Unicode_Category_LL;
		case 0x03BC: return Unicode_Category_LL;
		case 0x03BD: return Unicode_Category_LL;
		case 0x03BE: return Unicode_Category_LL;
		case 0x03BF: return Unicode_Category_LL;
		case 0x03C0: return Unicode_Category_LL;
		case 0x03C1: return Unicode_Category_LL;
		case 0x03C2: return Unicode_Category_LL;
		case 0x03C3: return Unicode_Category_LL;
		case 0x03C4: return Unicode_Category_LL;
		case 0x03C5: return Unicode_Category_LL;
		case 0x03C6: return Unicode_Category_LL;
		case 0x03C7: return Unicode_Category_LL;
		case 0x03C8: return Unicode_Category_LL;
		case 0x03C9: return Unicode_Category_LL;
		case 0x03CA: return Unicode_Category_LL;
		case 0x03CB: return Unicode_Category_LL;
		case 0x03CC: return Unicode_Category_LL;
		case 0x03CD: return Unicode_Category_LL;
		case 0x03CE: return Unicode_Category_LL;
		case 0x03CF: return Unicode_Category_LU;
		case 0x03D0: return Unicode_Category_LL;
		case 0x03D1: return Unicode_Category_LL;
		case 0x03D2: return Unicode_Category_LU;
		case 0x03D3: return Unicode_Category_LU;
		case 0x03D4: return Unicode_Category_LU;
		case 0x03D5: return Unicode_Category_LL;
		case 0x03D6: return Unicode_Category_LL;
		case 0x03D7: return Unicode_Category_LL;
		case 0x03D8: return Unicode_Category_LU;
		case 0x03D9: return Unicode_Category_LL;
		case 0x03DA: return Unicode_Category_LU;
		case 0x03DB: return Unicode_Category_LL;
		case 0x03DC: return Unicode_Category_LU;
		case 0x03DD: return Unicode_Category_LL;
		case 0x03DE: return Unicode_Category_LU;
		case 0x03DF: return Unicode_Category_LL;
		case 0x03E0: return Unicode_Category_LU;
		case 0x03E1: return Unicode_Category_LL;
		case 0x03E2: return Unicode_Category_LU;
		case 0x03E3: return Unicode_Category_LL;
		case 0x03E4: return Unicode_Category_LU;
		case 0x03E5: return Unicode_Category_LL;
		case 0x03E6: return Unicode_Category_LU;
		case 0x03E7: return Unicode_Category_LL;
		case 0x03E8: return Unicode_Category_LU;
		case 0x03E9: return Unicode_Category_LL;
		case 0x03EA: return Unicode_Category_LU;
		case 0x03EB: return Unicode_Category_LL;
		case 0x03EC: return Unicode_Category_LU;
		case 0x03ED: return Unicode_Category_LL;
		case 0x03EE: return Unicode_Category_LU;
		case 0x03EF: return Unicode_Category_LL;
		case 0x03F0: return Unicode_Category_LL;
		case 0x03F1: return Unicode_Category_LL;
		case 0x03F2: return Unicode_Category_LL;
		case 0x03F3: return Unicode_Category_LL;
		case 0x03F4: return Unicode_Category_LU;
		case 0x03F5: return Unicode_Category_LL;
		case 0x03F6: return Unicode_Category_SM;
		case 0x03F7: return Unicode_Category_LU;
		case 0x03F8: return Unicode_Category_LL;
		case 0x03F9: return Unicode_Category_LU;
		case 0x03FA: return Unicode_Category_LU;
		case 0x03FB: return Unicode_Category_LL;
		case 0x03FC: return Unicode_Category_LL;
		case 0x03FD: return Unicode_Category_LU;
		case 0x03FE: return Unicode_Category_LU;
		case 0x03FF: return Unicode_Category_LU;
		case 0x0400: return Unicode_Category_LU;
		case 0x0401: return Unicode_Category_LU;
		case 0x0402: return Unicode_Category_LU;
		case 0x0403: return Unicode_Category_LU;
		case 0x0404: return Unicode_Category_LU;
		case 0x0405: return Unicode_Category_LU;
		case 0x0406: return Unicode_Category_LU;
		case 0x0407: return Unicode_Category_LU;
		case 0x0408: return Unicode_Category_LU;
		case 0x0409: return Unicode_Category_LU;
		case 0x040A: return Unicode_Category_LU;
		case 0x040B: return Unicode_Category_LU;
		case 0x040C: return Unicode_Category_LU;
		case 0x040D: return Unicode_Category_LU;
		case 0x040E: return Unicode_Category_LU;
		case 0x040F: return Unicode_Category_LU;
		case 0x0410: return Unicode_Category_LU;
		case 0x0411: return Unicode_Category_LU;
		case 0x0412: return Unicode_Category_LU;
		case 0x0413: return Unicode_Category_LU;
		case 0x0414: return Unicode_Category_LU;
		case 0x0415: return Unicode_Category_LU;
		case 0x0416: return Unicode_Category_LU;
		case 0x0417: return Unicode_Category_LU;
		case 0x0418: return Unicode_Category_LU;
		case 0x0419: return Unicode_Category_LU;
		case 0x041A: return Unicode_Category_LU;
		case 0x041B: return Unicode_Category_LU;
		case 0x041C: return Unicode_Category_LU;
		case 0x041D: return Unicode_Category_LU;
		case 0x041E: return Unicode_Category_LU;
		case 0x041F: return Unicode_Category_LU;
		case 0x0420: return Unicode_Category_LU;
		case 0x0421: return Unicode_Category_LU;
		case 0x0422: return Unicode_Category_LU;
		case 0x0423: return Unicode_Category_LU;
		case 0x0424: return Unicode_Category_LU;
		case 0x0425: return Unicode_Category_LU;
		case 0x0426: return Unicode_Category_LU;
		case 0x0427: return Unicode_Category_LU;
		case 0x0428: return Unicode_Category_LU;
		case 0x0429: return Unicode_Category_LU;
		case 0x042A: return Unicode_Category_LU;
		case 0x042B: return Unicode_Category_LU;
		case 0x042C: return Unicode_Category_LU;
		case 0x042D: return Unicode_Category_LU;
		case 0x042E: return Unicode_Category_LU;
		case 0x042F: return Unicode_Category_LU;
		case 0x0430: return Unicode_Category_LL;
		case 0x0431: return Unicode_Category_LL;
		case 0x0432: return Unicode_Category_LL;
		case 0x0433: return Unicode_Category_LL;
		case 0x0434: return Unicode_Category_LL;
		case 0x0435: return Unicode_Category_LL;
		case 0x0436: return Unicode_Category_LL;
		case 0x0437: return Unicode_Category_LL;
		case 0x0438: return Unicode_Category_LL;
		case 0x0439: return Unicode_Category_LL;
		case 0x043A: return Unicode_Category_LL;
		case 0x043B: return Unicode_Category_LL;
		case 0x043C: return Unicode_Category_LL;
		case 0x043D: return Unicode_Category_LL;
		case 0x043E: return Unicode_Category_LL;
		case 0x043F: return Unicode_Category_LL;
		case 0x0440: return Unicode_Category_LL;
		case 0x0441: return Unicode_Category_LL;
		case 0x0442: return Unicode_Category_LL;
		case 0x0443: return Unicode_Category_LL;
		case 0x0444: return Unicode_Category_LL;
		case 0x0445: return Unicode_Category_LL;
		case 0x0446: return Unicode_Category_LL;
		case 0x0447: return Unicode_Category_LL;
		case 0x0448: return Unicode_Category_LL;
		case 0x0449: return Unicode_Category_LL;
		case 0x044A: return Unicode_Category_LL;
		case 0x044B: return Unicode_Category_LL;
		case 0x044C: return Unicode_Category_LL;
		case 0x044D: return Unicode_Category_LL;
		case 0x044E: return Unicode_Category_LL;
		case 0x044F: return Unicode_Category_LL;
		case 0x0450: return Unicode_Category_LL;
		case 0x0451: return Unicode_Category_LL;
		case 0x0452: return Unicode_Category_LL;
		case 0x0453: return Unicode_Category_LL;
		case 0x0454: return Unicode_Category_LL;
		case 0x0455: return Unicode_Category_LL;
		case 0x0456: return Unicode_Category_LL;
		case 0x0457: return Unicode_Category_LL;
		case 0x0458: return Unicode_Category_LL;
		case 0x0459: return Unicode_Category_LL;
		case 0x045A: return Unicode_Category_LL;
		case 0x045B: return Unicode_Category_LL;
		case 0x045C: return Unicode_Category_LL;
		case 0x045D: return Unicode_Category_LL;
		case 0x045E: return Unicode_Category_LL;
		case 0x045F: return Unicode_Category_LL;
		case 0x0460: return Unicode_Category_LU;
		case 0x0461: return Unicode_Category_LL;
		case 0x0462: return Unicode_Category_LU;
		case 0x0463: return Unicode_Category_LL;
		case 0x0464: return Unicode_Category_LU;
		case 0x0465: return Unicode_Category_LL;
		case 0x0466: return Unicode_Category_LU;
		case 0x0467: return Unicode_Category_LL;
		case 0x0468: return Unicode_Category_LU;
		case 0x0469: return Unicode_Category_LL;
		case 0x046A: return Unicode_Category_LU;
		case 0x046B: return Unicode_Category_LL;
		case 0x046C: return Unicode_Category_LU;
		case 0x046D: return Unicode_Category_LL;
		case 0x046E: return Unicode_Category_LU;
		case 0x046F: return Unicode_Category_LL;
		case 0x0470: return Unicode_Category_LU;
		case 0x0471: return Unicode_Category_LL;
		case 0x0472: return Unicode_Category_LU;
		case 0x0473: return Unicode_Category_LL;
		case 0x0474: return Unicode_Category_LU;
		case 0x0475: return Unicode_Category_LL;
		case 0x0476: return Unicode_Category_LU;
		case 0x0477: return Unicode_Category_LL;
		case 0x0478: return Unicode_Category_LU;
		case 0x0479: return Unicode_Category_LL;
		case 0x047A: return Unicode_Category_LU;
		case 0x047B: return Unicode_Category_LL;
		case 0x047C: return Unicode_Category_LU;
		case 0x047D: return Unicode_Category_LL;
		case 0x047E: return Unicode_Category_LU;
		case 0x047F: return Unicode_Category_LL;
		case 0x0480: return Unicode_Category_LU;
		case 0x0481: return Unicode_Category_LL;
		case 0x0482: return Unicode_Category_SO;
		case 0x0483: return Unicode_Category_MN;
		case 0x0484: return Unicode_Category_MN;
		case 0x0485: return Unicode_Category_MN;
		case 0x0486: return Unicode_Category_MN;
		case 0x0487: return Unicode_Category_MN;
		case 0x0488: return Unicode_Category_ME;
		case 0x0489: return Unicode_Category_ME;
		case 0x048A: return Unicode_Category_LU;
		case 0x048B: return Unicode_Category_LL;
		case 0x048C: return Unicode_Category_LU;
		case 0x048D: return Unicode_Category_LL;
		case 0x048E: return Unicode_Category_LU;
		case 0x048F: return Unicode_Category_LL;
		case 0x0490: return Unicode_Category_LU;
		case 0x0491: return Unicode_Category_LL;
		case 0x0492: return Unicode_Category_LU;
		case 0x0493: return Unicode_Category_LL;
		case 0x0494: return Unicode_Category_LU;
		case 0x0495: return Unicode_Category_LL;
		case 0x0496: return Unicode_Category_LU;
		case 0x0497: return Unicode_Category_LL;
		case 0x0498: return Unicode_Category_LU;
		case 0x0499: return Unicode_Category_LL;
		case 0x049A: return Unicode_Category_LU;
		case 0x049B: return Unicode_Category_LL;
		case 0x049C: return Unicode_Category_LU;
		case 0x049D: return Unicode_Category_LL;
		case 0x049E: return Unicode_Category_LU;
		case 0x049F: return Unicode_Category_LL;
		case 0x04A0: return Unicode_Category_LU;
		case 0x04A1: return Unicode_Category_LL;
		case 0x04A2: return Unicode_Category_LU;
		case 0x04A3: return Unicode_Category_LL;
		case 0x04A4: return Unicode_Category_LU;
		case 0x04A5: return Unicode_Category_LL;
		case 0x04A6: return Unicode_Category_LU;
		case 0x04A7: return Unicode_Category_LL;
		case 0x04A8: return Unicode_Category_LU;
		case 0x04A9: return Unicode_Category_LL;
		case 0x04AA: return Unicode_Category_LU;
		case 0x04AB: return Unicode_Category_LL;
		case 0x04AC: return Unicode_Category_LU;
		case 0x04AD: return Unicode_Category_LL;
		case 0x04AE: return Unicode_Category_LU;
		case 0x04AF: return Unicode_Category_LL;
		case 0x04B0: return Unicode_Category_LU;
		case 0x04B1: return Unicode_Category_LL;
		case 0x04B2: return Unicode_Category_LU;
		case 0x04B3: return Unicode_Category_LL;
		case 0x04B4: return Unicode_Category_LU;
		case 0x04B5: return Unicode_Category_LL;
		case 0x04B6: return Unicode_Category_LU;
		case 0x04B7: return Unicode_Category_LL;
		case 0x04B8: return Unicode_Category_LU;
		case 0x04B9: return Unicode_Category_LL;
		case 0x04BA: return Unicode_Category_LU;
		case 0x04BB: return Unicode_Category_LL;
		case 0x04BC: return Unicode_Category_LU;
		case 0x04BD: return Unicode_Category_LL;
		case 0x04BE: return Unicode_Category_LU;
		case 0x04BF: return Unicode_Category_LL;
		case 0x04C0: return Unicode_Category_LU;
		case 0x04C1: return Unicode_Category_LU;
		case 0x04C2: return Unicode_Category_LL;
		case 0x04C3: return Unicode_Category_LU;
		case 0x04C4: return Unicode_Category_LL;
		case 0x04C5: return Unicode_Category_LU;
		case 0x04C6: return Unicode_Category_LL;
		case 0x04C7: return Unicode_Category_LU;
		case 0x04C8: return Unicode_Category_LL;
		case 0x04C9: return Unicode_Category_LU;
		case 0x04CA: return Unicode_Category_LL;
		case 0x04CB: return Unicode_Category_LU;
		case 0x04CC: return Unicode_Category_LL;
		case 0x04CD: return Unicode_Category_LU;
		case 0x04CE: return Unicode_Category_LL;
		case 0x04CF: return Unicode_Category_LL;
		case 0x04D0: return Unicode_Category_LU;
		case 0x04D1: return Unicode_Category_LL;
		case 0x04D2: return Unicode_Category_LU;
		case 0x04D3: return Unicode_Category_LL;
		case 0x04D4: return Unicode_Category_LU;
		case 0x04D5: return Unicode_Category_LL;
		case 0x04D6: return Unicode_Category_LU;
		case 0x04D7: return Unicode_Category_LL;
		case 0x04D8: return Unicode_Category_LU;
		case 0x04D9: return Unicode_Category_LL;
		case 0x04DA: return Unicode_Category_LU;
		case 0x04DB: return Unicode_Category_LL;
		case 0x04DC: return Unicode_Category_LU;
		case 0x04DD: return Unicode_Category_LL;
		case 0x04DE: return Unicode_Category_LU;
		case 0x04DF: return Unicode_Category_LL;
		case 0x04E0: return Unicode_Category_LU;
		case 0x04E1: return Unicode_Category_LL;
		case 0x04E2: return Unicode_Category_LU;
		case 0x04E3: return Unicode_Category_LL;
		case 0x04E4: return Unicode_Category_LU;
		case 0x04E5: return Unicode_Category_LL;
		case 0x04E6: return Unicode_Category_LU;
		case 0x04E7: return Unicode_Category_LL;
		case 0x04E8: return Unicode_Category_LU;
		case 0x04E9: return Unicode_Category_LL;
		case 0x04EA: return Unicode_Category_LU;
		case 0x04EB: return Unicode_Category_LL;
		case 0x04EC: return Unicode_Category_LU;
		case 0x04ED: return Unicode_Category_LL;
		case 0x04EE: return Unicode_Category_LU;
		case 0x04EF: return Unicode_Category_LL;
		case 0x04F0: return Unicode_Category_LU;
		case 0x04F1: return Unicode_Category_LL;
		case 0x04F2: return Unicode_Category_LU;
		case 0x04F3: return Unicode_Category_LL;
		case 0x04F4: return Unicode_Category_LU;
		case 0x04F5: return Unicode_Category_LL;
		case 0x04F6: return Unicode_Category_LU;
		case 0x04F7: return Unicode_Category_LL;
		case 0x04F8: return Unicode_Category_LU;
		case 0x04F9: return Unicode_Category_LL;
		case 0x04FA: return Unicode_Category_LU;
		case 0x04FB: return Unicode_Category_LL;
		case 0x04FC: return Unicode_Category_LU;
		case 0x04FD: return Unicode_Category_LL;
		case 0x04FE: return Unicode_Category_LU;
		case 0x04FF: return Unicode_Category_LL;
		case 0x0500: return Unicode_Category_LU;
		case 0x0501: return Unicode_Category_LL;
		case 0x0502: return Unicode_Category_LU;
		case 0x0503: return Unicode_Category_LL;
		case 0x0504: return Unicode_Category_LU;
		case 0x0505: return Unicode_Category_LL;
		case 0x0506: return Unicode_Category_LU;
		case 0x0507: return Unicode_Category_LL;
		case 0x0508: return Unicode_Category_LU;
		case 0x0509: return Unicode_Category_LL;
		case 0x050A: return Unicode_Category_LU;
		case 0x050B: return Unicode_Category_LL;
		case 0x050C: return Unicode_Category_LU;
		case 0x050D: return Unicode_Category_LL;
		case 0x050E: return Unicode_Category_LU;
		case 0x050F: return Unicode_Category_LL;
		case 0x0510: return Unicode_Category_LU;
		case 0x0511: return Unicode_Category_LL;
		case 0x0512: return Unicode_Category_LU;
		case 0x0513: return Unicode_Category_LL;
		case 0x0514: return Unicode_Category_LU;
		case 0x0515: return Unicode_Category_LL;
		case 0x0516: return Unicode_Category_LU;
		case 0x0517: return Unicode_Category_LL;
		case 0x0518: return Unicode_Category_LU;
		case 0x0519: return Unicode_Category_LL;
		case 0x051A: return Unicode_Category_LU;
		case 0x051B: return Unicode_Category_LL;
		case 0x051C: return Unicode_Category_LU;
		case 0x051D: return Unicode_Category_LL;
		case 0x051E: return Unicode_Category_LU;
		case 0x051F: return Unicode_Category_LL;
		case 0x0520: return Unicode_Category_LU;
		case 0x0521: return Unicode_Category_LL;
		case 0x0522: return Unicode_Category_LU;
		case 0x0523: return Unicode_Category_LL;
		case 0x0524: return Unicode_Category_LU;
		case 0x0525: return Unicode_Category_LL;
		case 0x0526: return Unicode_Category_LU;
		case 0x0527: return Unicode_Category_LL;
		case 0x0528: return Unicode_Category_LU;
		case 0x0529: return Unicode_Category_LL;
		case 0x052A: return Unicode_Category_LU;
		case 0x052B: return Unicode_Category_LL;
		case 0x052C: return Unicode_Category_LU;
		case 0x052D: return Unicode_Category_LL;
		case 0x052E: return Unicode_Category_LU;
		case 0x052F: return Unicode_Category_LL;
		case 0x0531: return Unicode_Category_LU;
		case 0x0532: return Unicode_Category_LU;
		case 0x0533: return Unicode_Category_LU;
		case 0x0534: return Unicode_Category_LU;
		case 0x0535: return Unicode_Category_LU;
		case 0x0536: return Unicode_Category_LU;
		case 0x0537: return Unicode_Category_LU;
		case 0x0538: return Unicode_Category_LU;
		case 0x0539: return Unicode_Category_LU;
		case 0x053A: return Unicode_Category_LU;
		case 0x053B: return Unicode_Category_LU;
		case 0x053C: return Unicode_Category_LU;
		case 0x053D: return Unicode_Category_LU;
		case 0x053E: return Unicode_Category_LU;
		case 0x053F: return Unicode_Category_LU;
		case 0x0540: return Unicode_Category_LU;
		case 0x0541: return Unicode_Category_LU;
		case 0x0542: return Unicode_Category_LU;
		case 0x0543: return Unicode_Category_LU;
		case 0x0544: return Unicode_Category_LU;
		case 0x0545: return Unicode_Category_LU;
		case 0x0546: return Unicode_Category_LU;
		case 0x0547: return Unicode_Category_LU;
		case 0x0548: return Unicode_Category_LU;
		case 0x0549: return Unicode_Category_LU;
		case 0x054A: return Unicode_Category_LU;
		case 0x054B: return Unicode_Category_LU;
		case 0x054C: return Unicode_Category_LU;
		case 0x054D: return Unicode_Category_LU;
		case 0x054E: return Unicode_Category_LU;
		case 0x054F: return Unicode_Category_LU;
		case 0x0550: return Unicode_Category_LU;
		case 0x0551: return Unicode_Category_LU;
		case 0x0552: return Unicode_Category_LU;
		case 0x0553: return Unicode_Category_LU;
		case 0x0554: return Unicode_Category_LU;
		case 0x0555: return Unicode_Category_LU;
		case 0x0556: return Unicode_Category_LU;
		case 0x0559: return Unicode_Category_LM;
		case 0x055A: return Unicode_Category_PO;
		case 0x055B: return Unicode_Category_PO;
		case 0x055C: return Unicode_Category_PO;
		case 0x055D: return Unicode_Category_PO;
		case 0x055E: return Unicode_Category_PO;
		case 0x055F: return Unicode_Category_PO;
		case 0x0560: return Unicode_Category_LL;
		case 0x0561: return Unicode_Category_LL;
		case 0x0562: return Unicode_Category_LL;
		case 0x0563: return Unicode_Category_LL;
		case 0x0564: return Unicode_Category_LL;
		case 0x0565: return Unicode_Category_LL;
		case 0x0566: return Unicode_Category_LL;
		case 0x0567: return Unicode_Category_LL;
		case 0x0568: return Unicode_Category_LL;
		case 0x0569: return Unicode_Category_LL;
		case 0x056A: return Unicode_Category_LL;
		case 0x056B: return Unicode_Category_LL;
		case 0x056C: return Unicode_Category_LL;
		case 0x056D: return Unicode_Category_LL;
		case 0x056E: return Unicode_Category_LL;
		case 0x056F: return Unicode_Category_LL;
		case 0x0570: return Unicode_Category_LL;
		case 0x0571: return Unicode_Category_LL;
		case 0x0572: return Unicode_Category_LL;
		case 0x0573: return Unicode_Category_LL;
		case 0x0574: return Unicode_Category_LL;
		case 0x0575: return Unicode_Category_LL;
		case 0x0576: return Unicode_Category_LL;
		case 0x0577: return Unicode_Category_LL;
		case 0x0578: return Unicode_Category_LL;
		case 0x0579: return Unicode_Category_LL;
		case 0x057A: return Unicode_Category_LL;
		case 0x057B: return Unicode_Category_LL;
		case 0x057C: return Unicode_Category_LL;
		case 0x057D: return Unicode_Category_LL;
		case 0x057E: return Unicode_Category_LL;
		case 0x057F: return Unicode_Category_LL;
		case 0x0580: return Unicode_Category_LL;
		case 0x0581: return Unicode_Category_LL;
		case 0x0582: return Unicode_Category_LL;
		case 0x0583: return Unicode_Category_LL;
		case 0x0584: return Unicode_Category_LL;
		case 0x0585: return Unicode_Category_LL;
		case 0x0586: return Unicode_Category_LL;
		case 0x0587: return Unicode_Category_LL;
		case 0x0588: return Unicode_Category_LL;
		case 0x0589: return Unicode_Category_PO;
		case 0x058A: return Unicode_Category_PD;
		case 0x058D: return Unicode_Category_SO;
		case 0x058E: return Unicode_Category_SO;
		case 0x058F: return Unicode_Category_SC;
		case 0x0591: return Unicode_Category_MN;
		case 0x0592: return Unicode_Category_MN;
		case 0x0593: return Unicode_Category_MN;
		case 0x0594: return Unicode_Category_MN;
		case 0x0595: return Unicode_Category_MN;
		case 0x0596: return Unicode_Category_MN;
		case 0x0597: return Unicode_Category_MN;
		case 0x0598: return Unicode_Category_MN;
		case 0x0599: return Unicode_Category_MN;
		case 0x059A: return Unicode_Category_MN;
		case 0x059B: return Unicode_Category_MN;
		case 0x059C: return Unicode_Category_MN;
		case 0x059D: return Unicode_Category_MN;
		case 0x059E: return Unicode_Category_MN;
		case 0x059F: return Unicode_Category_MN;
		case 0x05A0: return Unicode_Category_MN;
		case 0x05A1: return Unicode_Category_MN;
		case 0x05A2: return Unicode_Category_MN;
		case 0x05A3: return Unicode_Category_MN;
		case 0x05A4: return Unicode_Category_MN;
		case 0x05A5: return Unicode_Category_MN;
		case 0x05A6: return Unicode_Category_MN;
		case 0x05A7: return Unicode_Category_MN;
		case 0x05A8: return Unicode_Category_MN;
		case 0x05A9: return Unicode_Category_MN;
		case 0x05AA: return Unicode_Category_MN;
		case 0x05AB: return Unicode_Category_MN;
		case 0x05AC: return Unicode_Category_MN;
		case 0x05AD: return Unicode_Category_MN;
		case 0x05AE: return Unicode_Category_MN;
		case 0x05AF: return Unicode_Category_MN;
		case 0x05B0: return Unicode_Category_MN;
		case 0x05B1: return Unicode_Category_MN;
		case 0x05B2: return Unicode_Category_MN;
		case 0x05B3: return Unicode_Category_MN;
		case 0x05B4: return Unicode_Category_MN;
		case 0x05B5: return Unicode_Category_MN;
		case 0x05B6: return Unicode_Category_MN;
		case 0x05B7: return Unicode_Category_MN;
		case 0x05B8: return Unicode_Category_MN;
		case 0x05B9: return Unicode_Category_MN;
		case 0x05BA: return Unicode_Category_MN;
		case 0x05BB: return Unicode_Category_MN;
		case 0x05BC: return Unicode_Category_MN;
		case 0x05BD: return Unicode_Category_MN;
		case 0x05BE: return Unicode_Category_PD;
		case 0x05BF: return Unicode_Category_MN;
		case 0x05C0: return Unicode_Category_PO;
		case 0x05C1: return Unicode_Category_MN;
		case 0x05C2: return Unicode_Category_MN;
		case 0x05C3: return Unicode_Category_PO;
		case 0x05C4: return Unicode_Category_MN;
		case 0x05C5: return Unicode_Category_MN;
		case 0x05C6: return Unicode_Category_PO;
		case 0x05C7: return Unicode_Category_MN;
		case 0x05D0: return Unicode_Category_LO;
		case 0x05D1: return Unicode_Category_LO;
		case 0x05D2: return Unicode_Category_LO;
		case 0x05D3: return Unicode_Category_LO;
		case 0x05D4: return Unicode_Category_LO;
		case 0x05D5: return Unicode_Category_LO;
		case 0x05D6: return Unicode_Category_LO;
		case 0x05D7: return Unicode_Category_LO;
		case 0x05D8: return Unicode_Category_LO;
		case 0x05D9: return Unicode_Category_LO;
		case 0x05DA: return Unicode_Category_LO;
		case 0x05DB: return Unicode_Category_LO;
		case 0x05DC: return Unicode_Category_LO;
		case 0x05DD: return Unicode_Category_LO;
		case 0x05DE: return Unicode_Category_LO;
		case 0x05DF: return Unicode_Category_LO;
		case 0x05E0: return Unicode_Category_LO;
		case 0x05E1: return Unicode_Category_LO;
		case 0x05E2: return Unicode_Category_LO;
		case 0x05E3: return Unicode_Category_LO;
		case 0x05E4: return Unicode_Category_LO;
		case 0x05E5: return Unicode_Category_LO;
		case 0x05E6: return Unicode_Category_LO;
		case 0x05E7: return Unicode_Category_LO;
		case 0x05E8: return Unicode_Category_LO;
		case 0x05E9: return Unicode_Category_LO;
		case 0x05EA: return Unicode_Category_LO;
		case 0x05EF: return Unicode_Category_LO;
		case 0x05F0: return Unicode_Category_LO;
		case 0x05F1: return Unicode_Category_LO;
		case 0x05F2: return Unicode_Category_LO;
		case 0x05F3: return Unicode_Category_PO;
		case 0x05F4: return Unicode_Category_PO;
		case 0x0600: return Unicode_Category_CF;
		case 0x0601: return Unicode_Category_CF;
		case 0x0602: return Unicode_Category_CF;
		case 0x0603: return Unicode_Category_CF;
		case 0x0604: return Unicode_Category_CF;
		case 0x0605: return Unicode_Category_CF;
		case 0x0606: return Unicode_Category_SM;
		case 0x0607: return Unicode_Category_SM;
		case 0x0608: return Unicode_Category_SM;
		case 0x0609: return Unicode_Category_PO;
		case 0x060A: return Unicode_Category_PO;
		case 0x060B: return Unicode_Category_SC;
		case 0x060C: return Unicode_Category_PO;
		case 0x060D: return Unicode_Category_PO;
		case 0x060E: return Unicode_Category_SO;
		case 0x060F: return Unicode_Category_SO;
		case 0x0610: return Unicode_Category_MN;
		case 0x0611: return Unicode_Category_MN;
		case 0x0612: return Unicode_Category_MN;
		case 0x0613: return Unicode_Category_MN;
		case 0x0614: return Unicode_Category_MN;
		case 0x0615: return Unicode_Category_MN;
		case 0x0616: return Unicode_Category_MN;
		case 0x0617: return Unicode_Category_MN;
		case 0x0618: return Unicode_Category_MN;
		case 0x0619: return Unicode_Category_MN;
		case 0x061A: return Unicode_Category_MN;
		case 0x061B: return Unicode_Category_PO;
		case 0x061C: return Unicode_Category_CF;
		case 0x061E: return Unicode_Category_PO;
		case 0x061F: return Unicode_Category_PO;
		case 0x0620: return Unicode_Category_LO;
		case 0x0621: return Unicode_Category_LO;
		case 0x0622: return Unicode_Category_LO;
		case 0x0623: return Unicode_Category_LO;
		case 0x0624: return Unicode_Category_LO;
		case 0x0625: return Unicode_Category_LO;
		case 0x0626: return Unicode_Category_LO;
		case 0x0627: return Unicode_Category_LO;
		case 0x0628: return Unicode_Category_LO;
		case 0x0629: return Unicode_Category_LO;
		case 0x062A: return Unicode_Category_LO;
		case 0x062B: return Unicode_Category_LO;
		case 0x062C: return Unicode_Category_LO;
		case 0x062D: return Unicode_Category_LO;
		case 0x062E: return Unicode_Category_LO;
		case 0x062F: return Unicode_Category_LO;
		case 0x0630: return Unicode_Category_LO;
		case 0x0631: return Unicode_Category_LO;
		case 0x0632: return Unicode_Category_LO;
		case 0x0633: return Unicode_Category_LO;
		case 0x0634: return Unicode_Category_LO;
		case 0x0635: return Unicode_Category_LO;
		case 0x0636: return Unicode_Category_LO;
		case 0x0637: return Unicode_Category_LO;
		case 0x0638: return Unicode_Category_LO;
		case 0x0639: return Unicode_Category_LO;
		case 0x063A: return Unicode_Category_LO;
		case 0x063B: return Unicode_Category_LO;
		case 0x063C: return Unicode_Category_LO;
		case 0x063D: return Unicode_Category_LO;
		case 0x063E: return Unicode_Category_LO;
		case 0x063F: return Unicode_Category_LO;
		case 0x0640: return Unicode_Category_LM;
		case 0x0641: return Unicode_Category_LO;
		case 0x0642: return Unicode_Category_LO;
		case 0x0643: return Unicode_Category_LO;
		case 0x0644: return Unicode_Category_LO;
		case 0x0645: return Unicode_Category_LO;
		case 0x0646: return Unicode_Category_LO;
		case 0x0647: return Unicode_Category_LO;
		case 0x0648: return Unicode_Category_LO;
		case 0x0649: return Unicode_Category_LO;
		case 0x064A: return Unicode_Category_LO;
		case 0x064B: return Unicode_Category_MN;
		case 0x064C: return Unicode_Category_MN;
		case 0x064D: return Unicode_Category_MN;
		case 0x064E: return Unicode_Category_MN;
		case 0x064F: return Unicode_Category_MN;
		case 0x0650: return Unicode_Category_MN;
		case 0x0651: return Unicode_Category_MN;
		case 0x0652: return Unicode_Category_MN;
		case 0x0653: return Unicode_Category_MN;
		case 0x0654: return Unicode_Category_MN;
		case 0x0655: return Unicode_Category_MN;
		case 0x0656: return Unicode_Category_MN;
		case 0x0657: return Unicode_Category_MN;
		case 0x0658: return Unicode_Category_MN;
		case 0x0659: return Unicode_Category_MN;
		case 0x065A: return Unicode_Category_MN;
		case 0x065B: return Unicode_Category_MN;
		case 0x065C: return Unicode_Category_MN;
		case 0x065D: return Unicode_Category_MN;
		case 0x065E: return Unicode_Category_MN;
		case 0x065F: return Unicode_Category_MN;
		case 0x0660: return Unicode_Category_ND;
		case 0x0661: return Unicode_Category_ND;
		case 0x0662: return Unicode_Category_ND;
		case 0x0663: return Unicode_Category_ND;
		case 0x0664: return Unicode_Category_ND;
		case 0x0665: return Unicode_Category_ND;
		case 0x0666: return Unicode_Category_ND;
		case 0x0667: return Unicode_Category_ND;
		case 0x0668: return Unicode_Category_ND;
		case 0x0669: return Unicode_Category_ND;
		case 0x066A: return Unicode_Category_PO;
		case 0x066B: return Unicode_Category_PO;
		case 0x066C: return Unicode_Category_PO;
		case 0x066D: return Unicode_Category_PO;
		case 0x066E: return Unicode_Category_LO;
		case 0x066F: return Unicode_Category_LO;
		case 0x0670: return Unicode_Category_MN;
		case 0x0671: return Unicode_Category_LO;
		case 0x0672: return Unicode_Category_LO;
		case 0x0673: return Unicode_Category_LO;
		case 0x0674: return Unicode_Category_LO;
		case 0x0675: return Unicode_Category_LO;
		case 0x0676: return Unicode_Category_LO;
		case 0x0677: return Unicode_Category_LO;
		case 0x0678: return Unicode_Category_LO;
		case 0x0679: return Unicode_Category_LO;
		case 0x067A: return Unicode_Category_LO;
		case 0x067B: return Unicode_Category_LO;
		case 0x067C: return Unicode_Category_LO;
		case 0x067D: return Unicode_Category_LO;
		case 0x067E: return Unicode_Category_LO;
		case 0x067F: return Unicode_Category_LO;
		case 0x0680: return Unicode_Category_LO;
		case 0x0681: return Unicode_Category_LO;
		case 0x0682: return Unicode_Category_LO;
		case 0x0683: return Unicode_Category_LO;
		case 0x0684: return Unicode_Category_LO;
		case 0x0685: return Unicode_Category_LO;
		case 0x0686: return Unicode_Category_LO;
		case 0x0687: return Unicode_Category_LO;
		case 0x0688: return Unicode_Category_LO;
		case 0x0689: return Unicode_Category_LO;
		case 0x068A: return Unicode_Category_LO;
		case 0x068B: return Unicode_Category_LO;
		case 0x068C: return Unicode_Category_LO;
		case 0x068D: return Unicode_Category_LO;
		case 0x068E: return Unicode_Category_LO;
		case 0x068F: return Unicode_Category_LO;
		case 0x0690: return Unicode_Category_LO;
		case 0x0691: return Unicode_Category_LO;
		case 0x0692: return Unicode_Category_LO;
		case 0x0693: return Unicode_Category_LO;
		case 0x0694: return Unicode_Category_LO;
		case 0x0695: return Unicode_Category_LO;
		case 0x0696: return Unicode_Category_LO;
		case 0x0697: return Unicode_Category_LO;
		case 0x0698: return Unicode_Category_LO;
		case 0x0699: return Unicode_Category_LO;
		case 0x069A: return Unicode_Category_LO;
		case 0x069B: return Unicode_Category_LO;
		case 0x069C: return Unicode_Category_LO;
		case 0x069D: return Unicode_Category_LO;
		case 0x069E: return Unicode_Category_LO;
		case 0x069F: return Unicode_Category_LO;
		case 0x06A0: return Unicode_Category_LO;
		case 0x06A1: return Unicode_Category_LO;
		case 0x06A2: return Unicode_Category_LO;
		case 0x06A3: return Unicode_Category_LO;
		case 0x06A4: return Unicode_Category_LO;
		case 0x06A5: return Unicode_Category_LO;
		case 0x06A6: return Unicode_Category_LO;
		case 0x06A7: return Unicode_Category_LO;
		case 0x06A8: return Unicode_Category_LO;
		case 0x06A9: return Unicode_Category_LO;
		case 0x06AA: return Unicode_Category_LO;
		case 0x06AB: return Unicode_Category_LO;
		case 0x06AC: return Unicode_Category_LO;
		case 0x06AD: return Unicode_Category_LO;
		case 0x06AE: return Unicode_Category_LO;
		case 0x06AF: return Unicode_Category_LO;
		case 0x06B0: return Unicode_Category_LO;
		case 0x06B1: return Unicode_Category_LO;
		case 0x06B2: return Unicode_Category_LO;
		case 0x06B3: return Unicode_Category_LO;
		case 0x06B4: return Unicode_Category_LO;
		case 0x06B5: return Unicode_Category_LO;
		case 0x06B6: return Unicode_Category_LO;
		case 0x06B7: return Unicode_Category_LO;
		case 0x06B8: return Unicode_Category_LO;
		case 0x06B9: return Unicode_Category_LO;
		case 0x06BA: return Unicode_Category_LO;
		case 0x06BB: return Unicode_Category_LO;
		case 0x06BC: return Unicode_Category_LO;
		case 0x06BD: return Unicode_Category_LO;
		case 0x06BE: return Unicode_Category_LO;
		case 0x06BF: return Unicode_Category_LO;
		case 0x06C0: return Unicode_Category_LO;
		case 0x06C1: return Unicode_Category_LO;
		case 0x06C2: return Unicode_Category_LO;
		case 0x06C3: return Unicode_Category_LO;
		case 0x06C4: return Unicode_Category_LO;
		case 0x06C5: return Unicode_Category_LO;
		case 0x06C6: return Unicode_Category_LO;
		case 0x06C7: return Unicode_Category_LO;
		case 0x06C8: return Unicode_Category_LO;
		case 0x06C9: return Unicode_Category_LO;
		case 0x06CA: return Unicode_Category_LO;
		case 0x06CB: return Unicode_Category_LO;
		case 0x06CC: return Unicode_Category_LO;
		case 0x06CD: return Unicode_Category_LO;
		case 0x06CE: return Unicode_Category_LO;
		case 0x06CF: return Unicode_Category_LO;
		case 0x06D0: return Unicode_Category_LO;
		case 0x06D1: return Unicode_Category_LO;
		case 0x06D2: return Unicode_Category_LO;
		case 0x06D3: return Unicode_Category_LO;
		case 0x06D4: return Unicode_Category_PO;
		case 0x06D5: return Unicode_Category_LO;
		case 0x06D6: return Unicode_Category_MN;
		case 0x06D7: return Unicode_Category_MN;
		case 0x06D8: return Unicode_Category_MN;
		case 0x06D9: return Unicode_Category_MN;
		case 0x06DA: return Unicode_Category_MN;
		case 0x06DB: return Unicode_Category_MN;
		case 0x06DC: return Unicode_Category_MN;
		case 0x06DD: return Unicode_Category_CF;
		case 0x06DE: return Unicode_Category_SO;
		case 0x06DF: return Unicode_Category_MN;
		case 0x06E0: return Unicode_Category_MN;
		case 0x06E1: return Unicode_Category_MN;
		case 0x06E2: return Unicode_Category_MN;
		case 0x06E3: return Unicode_Category_MN;
		case 0x06E4: return Unicode_Category_MN;
		case 0x06E5: return Unicode_Category_LM;
		case 0x06E6: return Unicode_Category_LM;
		case 0x06E7: return Unicode_Category_MN;
		case 0x06E8: return Unicode_Category_MN;
		case 0x06E9: return Unicode_Category_SO;
		case 0x06EA: return Unicode_Category_MN;
		case 0x06EB: return Unicode_Category_MN;
		case 0x06EC: return Unicode_Category_MN;
		case 0x06ED: return Unicode_Category_MN;
		case 0x06EE: return Unicode_Category_LO;
		case 0x06EF: return Unicode_Category_LO;
		case 0x06F0: return Unicode_Category_ND;
		case 0x06F1: return Unicode_Category_ND;
		case 0x06F2: return Unicode_Category_ND;
		case 0x06F3: return Unicode_Category_ND;
		case 0x06F4: return Unicode_Category_ND;
		case 0x06F5: return Unicode_Category_ND;
		case 0x06F6: return Unicode_Category_ND;
		case 0x06F7: return Unicode_Category_ND;
		case 0x06F8: return Unicode_Category_ND;
		case 0x06F9: return Unicode_Category_ND;
		case 0x06FA: return Unicode_Category_LO;
		case 0x06FB: return Unicode_Category_LO;
		case 0x06FC: return Unicode_Category_LO;
		case 0x06FD: return Unicode_Category_SO;
		case 0x06FE: return Unicode_Category_SO;
		case 0x06FF: return Unicode_Category_LO;
		case 0x0700: return Unicode_Category_PO;
		case 0x0701: return Unicode_Category_PO;
		case 0x0702: return Unicode_Category_PO;
		case 0x0703: return Unicode_Category_PO;
		case 0x0704: return Unicode_Category_PO;
		case 0x0705: return Unicode_Category_PO;
		case 0x0706: return Unicode_Category_PO;
		case 0x0707: return Unicode_Category_PO;
		case 0x0708: return Unicode_Category_PO;
		case 0x0709: return Unicode_Category_PO;
		case 0x070A: return Unicode_Category_PO;
		case 0x070B: return Unicode_Category_PO;
		case 0x070C: return Unicode_Category_PO;
		case 0x070D: return Unicode_Category_PO;
		case 0x070F: return Unicode_Category_CF;
		case 0x0710: return Unicode_Category_LO;
		case 0x0711: return Unicode_Category_MN;
		case 0x0712: return Unicode_Category_LO;
		case 0x0713: return Unicode_Category_LO;
		case 0x0714: return Unicode_Category_LO;
		case 0x0715: return Unicode_Category_LO;
		case 0x0716: return Unicode_Category_LO;
		case 0x0717: return Unicode_Category_LO;
		case 0x0718: return Unicode_Category_LO;
		case 0x0719: return Unicode_Category_LO;
		case 0x071A: return Unicode_Category_LO;
		case 0x071B: return Unicode_Category_LO;
		case 0x071C: return Unicode_Category_LO;
		case 0x071D: return Unicode_Category_LO;
		case 0x071E: return Unicode_Category_LO;
		case 0x071F: return Unicode_Category_LO;
		case 0x0720: return Unicode_Category_LO;
		case 0x0721: return Unicode_Category_LO;
		case 0x0722: return Unicode_Category_LO;
		case 0x0723: return Unicode_Category_LO;
		case 0x0724: return Unicode_Category_LO;
		case 0x0725: return Unicode_Category_LO;
		case 0x0726: return Unicode_Category_LO;
		case 0x0727: return Unicode_Category_LO;
		case 0x0728: return Unicode_Category_LO;
		case 0x0729: return Unicode_Category_LO;
		case 0x072A: return Unicode_Category_LO;
		case 0x072B: return Unicode_Category_LO;
		case 0x072C: return Unicode_Category_LO;
		case 0x072D: return Unicode_Category_LO;
		case 0x072E: return Unicode_Category_LO;
		case 0x072F: return Unicode_Category_LO;
		case 0x0730: return Unicode_Category_MN;
		case 0x0731: return Unicode_Category_MN;
		case 0x0732: return Unicode_Category_MN;
		case 0x0733: return Unicode_Category_MN;
		case 0x0734: return Unicode_Category_MN;
		case 0x0735: return Unicode_Category_MN;
		case 0x0736: return Unicode_Category_MN;
		case 0x0737: return Unicode_Category_MN;
		case 0x0738: return Unicode_Category_MN;
		case 0x0739: return Unicode_Category_MN;
		case 0x073A: return Unicode_Category_MN;
		case 0x073B: return Unicode_Category_MN;
		case 0x073C: return Unicode_Category_MN;
		case 0x073D: return Unicode_Category_MN;
		case 0x073E: return Unicode_Category_MN;
		case 0x073F: return Unicode_Category_MN;
		case 0x0740: return Unicode_Category_MN;
		case 0x0741: return Unicode_Category_MN;
		case 0x0742: return Unicode_Category_MN;
		case 0x0743: return Unicode_Category_MN;
		case 0x0744: return Unicode_Category_MN;
		case 0x0745: return Unicode_Category_MN;
		case 0x0746: return Unicode_Category_MN;
		case 0x0747: return Unicode_Category_MN;
		case 0x0748: return Unicode_Category_MN;
		case 0x0749: return Unicode_Category_MN;
		case 0x074A: return Unicode_Category_MN;
		case 0x074D: return Unicode_Category_LO;
		case 0x074E: return Unicode_Category_LO;
		case 0x074F: return Unicode_Category_LO;
		case 0x0750: return Unicode_Category_LO;
		case 0x0751: return Unicode_Category_LO;
		case 0x0752: return Unicode_Category_LO;
		case 0x0753: return Unicode_Category_LO;
		case 0x0754: return Unicode_Category_LO;
		case 0x0755: return Unicode_Category_LO;
		case 0x0756: return Unicode_Category_LO;
		case 0x0757: return Unicode_Category_LO;
		case 0x0758: return Unicode_Category_LO;
		case 0x0759: return Unicode_Category_LO;
		case 0x075A: return Unicode_Category_LO;
		case 0x075B: return Unicode_Category_LO;
		case 0x075C: return Unicode_Category_LO;
		case 0x075D: return Unicode_Category_LO;
		case 0x075E: return Unicode_Category_LO;
		case 0x075F: return Unicode_Category_LO;
		case 0x0760: return Unicode_Category_LO;
		case 0x0761: return Unicode_Category_LO;
		case 0x0762: return Unicode_Category_LO;
		case 0x0763: return Unicode_Category_LO;
		case 0x0764: return Unicode_Category_LO;
		case 0x0765: return Unicode_Category_LO;
		case 0x0766: return Unicode_Category_LO;
		case 0x0767: return Unicode_Category_LO;
		case 0x0768: return Unicode_Category_LO;
		case 0x0769: return Unicode_Category_LO;
		case 0x076A: return Unicode_Category_LO;
		case 0x076B: return Unicode_Category_LO;
		case 0x076C: return Unicode_Category_LO;
		case 0x076D: return Unicode_Category_LO;
		case 0x076E: return Unicode_Category_LO;
		case 0x076F: return Unicode_Category_LO;
		case 0x0770: return Unicode_Category_LO;
		case 0x0771: return Unicode_Category_LO;
		case 0x0772: return Unicode_Category_LO;
		case 0x0773: return Unicode_Category_LO;
		case 0x0774: return Unicode_Category_LO;
		case 0x0775: return Unicode_Category_LO;
		case 0x0776: return Unicode_Category_LO;
		case 0x0777: return Unicode_Category_LO;
		case 0x0778: return Unicode_Category_LO;
		case 0x0779: return Unicode_Category_LO;
		case 0x077A: return Unicode_Category_LO;
		case 0x077B: return Unicode_Category_LO;
		case 0x077C: return Unicode_Category_LO;
		case 0x077D: return Unicode_Category_LO;
		case 0x077E: return Unicode_Category_LO;
		case 0x077F: return Unicode_Category_LO;
		case 0x0780: return Unicode_Category_LO;
		case 0x0781: return Unicode_Category_LO;
		case 0x0782: return Unicode_Category_LO;
		case 0x0783: return Unicode_Category_LO;
		case 0x0784: return Unicode_Category_LO;
		case 0x0785: return Unicode_Category_LO;
		case 0x0786: return Unicode_Category_LO;
		case 0x0787: return Unicode_Category_LO;
		case 0x0788: return Unicode_Category_LO;
		case 0x0789: return Unicode_Category_LO;
		case 0x078A: return Unicode_Category_LO;
		case 0x078B: return Unicode_Category_LO;
		case 0x078C: return Unicode_Category_LO;
		case 0x078D: return Unicode_Category_LO;
		case 0x078E: return Unicode_Category_LO;
		case 0x078F: return Unicode_Category_LO;
		case 0x0790: return Unicode_Category_LO;
		case 0x0791: return Unicode_Category_LO;
		case 0x0792: return Unicode_Category_LO;
		case 0x0793: return Unicode_Category_LO;
		case 0x0794: return Unicode_Category_LO;
		case 0x0795: return Unicode_Category_LO;
		case 0x0796: return Unicode_Category_LO;
		case 0x0797: return Unicode_Category_LO;
		case 0x0798: return Unicode_Category_LO;
		case 0x0799: return Unicode_Category_LO;
		case 0x079A: return Unicode_Category_LO;
		case 0x079B: return Unicode_Category_LO;
		case 0x079C: return Unicode_Category_LO;
		case 0x079D: return Unicode_Category_LO;
		case 0x079E: return Unicode_Category_LO;
		case 0x079F: return Unicode_Category_LO;
		case 0x07A0: return Unicode_Category_LO;
		case 0x07A1: return Unicode_Category_LO;
		case 0x07A2: return Unicode_Category_LO;
		case 0x07A3: return Unicode_Category_LO;
		case 0x07A4: return Unicode_Category_LO;
		case 0x07A5: return Unicode_Category_LO;
		case 0x07A6: return Unicode_Category_MN;
		case 0x07A7: return Unicode_Category_MN;
		case 0x07A8: return Unicode_Category_MN;
		case 0x07A9: return Unicode_Category_MN;
		case 0x07AA: return Unicode_Category_MN;
		case 0x07AB: return Unicode_Category_MN;
		case 0x07AC: return Unicode_Category_MN;
		case 0x07AD: return Unicode_Category_MN;
		case 0x07AE: return Unicode_Category_MN;
		case 0x07AF: return Unicode_Category_MN;
		case 0x07B0: return Unicode_Category_MN;
		case 0x07B1: return Unicode_Category_LO;
		case 0x07C0: return Unicode_Category_ND;
		case 0x07C1: return Unicode_Category_ND;
		case 0x07C2: return Unicode_Category_ND;
		case 0x07C3: return Unicode_Category_ND;
		case 0x07C4: return Unicode_Category_ND;
		case 0x07C5: return Unicode_Category_ND;
		case 0x07C6: return Unicode_Category_ND;
		case 0x07C7: return Unicode_Category_ND;
		case 0x07C8: return Unicode_Category_ND;
		case 0x07C9: return Unicode_Category_ND;
		case 0x07CA: return Unicode_Category_LO;
		case 0x07CB: return Unicode_Category_LO;
		case 0x07CC: return Unicode_Category_LO;
		case 0x07CD: return Unicode_Category_LO;
		case 0x07CE: return Unicode_Category_LO;
		case 0x07CF: return Unicode_Category_LO;
		case 0x07D0: return Unicode_Category_LO;
		case 0x07D1: return Unicode_Category_LO;
		case 0x07D2: return Unicode_Category_LO;
		case 0x07D3: return Unicode_Category_LO;
		case 0x07D4: return Unicode_Category_LO;
		case 0x07D5: return Unicode_Category_LO;
		case 0x07D6: return Unicode_Category_LO;
		case 0x07D7: return Unicode_Category_LO;
		case 0x07D8: return Unicode_Category_LO;
		case 0x07D9: return Unicode_Category_LO;
		case 0x07DA: return Unicode_Category_LO;
		case 0x07DB: return Unicode_Category_LO;
		case 0x07DC: return Unicode_Category_LO;
		case 0x07DD: return Unicode_Category_LO;
		case 0x07DE: return Unicode_Category_LO;
		case 0x07DF: return Unicode_Category_LO;
		case 0x07E0: return Unicode_Category_LO;
		case 0x07E1: return Unicode_Category_LO;
		case 0x07E2: return Unicode_Category_LO;
		case 0x07E3: return Unicode_Category_LO;
		case 0x07E4: return Unicode_Category_LO;
		case 0x07E5: return Unicode_Category_LO;
		case 0x07E6: return Unicode_Category_LO;
		case 0x07E7: return Unicode_Category_LO;
		case 0x07E8: return Unicode_Category_LO;
		case 0x07E9: return Unicode_Category_LO;
		case 0x07EA: return Unicode_Category_LO;
		case 0x07EB: return Unicode_Category_MN;
		case 0x07EC: return Unicode_Category_MN;
		case 0x07ED: return Unicode_Category_MN;
		case 0x07EE: return Unicode_Category_MN;
		case 0x07EF: return Unicode_Category_MN;
		case 0x07F0: return Unicode_Category_MN;
		case 0x07F1: return Unicode_Category_MN;
		case 0x07F2: return Unicode_Category_MN;
		case 0x07F3: return Unicode_Category_MN;
		case 0x07F4: return Unicode_Category_LM;
		case 0x07F5: return Unicode_Category_LM;
		case 0x07F6: return Unicode_Category_SO;
		case 0x07F7: return Unicode_Category_PO;
		case 0x07F8: return Unicode_Category_PO;
		case 0x07F9: return Unicode_Category_PO;
		case 0x07FA: return Unicode_Category_LM;
		case 0x07FD: return Unicode_Category_MN;
		case 0x07FE: return Unicode_Category_SC;
		case 0x07FF: return Unicode_Category_SC;
		case 0x0800: return Unicode_Category_LO;
		case 0x0801: return Unicode_Category_LO;
		case 0x0802: return Unicode_Category_LO;
		case 0x0803: return Unicode_Category_LO;
		case 0x0804: return Unicode_Category_LO;
		case 0x0805: return Unicode_Category_LO;
		case 0x0806: return Unicode_Category_LO;
		case 0x0807: return Unicode_Category_LO;
		case 0x0808: return Unicode_Category_LO;
		case 0x0809: return Unicode_Category_LO;
		case 0x080A: return Unicode_Category_LO;
		case 0x080B: return Unicode_Category_LO;
		case 0x080C: return Unicode_Category_LO;
		case 0x080D: return Unicode_Category_LO;
		case 0x080E: return Unicode_Category_LO;
		case 0x080F: return Unicode_Category_LO;
		case 0x0810: return Unicode_Category_LO;
		case 0x0811: return Unicode_Category_LO;
		case 0x0812: return Unicode_Category_LO;
		case 0x0813: return Unicode_Category_LO;
		case 0x0814: return Unicode_Category_LO;
		case 0x0815: return Unicode_Category_LO;
		case 0x0816: return Unicode_Category_MN;
		case 0x0817: return Unicode_Category_MN;
		case 0x0818: return Unicode_Category_MN;
		case 0x0819: return Unicode_Category_MN;
		case 0x081A: return Unicode_Category_LM;
		case 0x081B: return Unicode_Category_MN;
		case 0x081C: return Unicode_Category_MN;
		case 0x081D: return Unicode_Category_MN;
		case 0x081E: return Unicode_Category_MN;
		case 0x081F: return Unicode_Category_MN;
		case 0x0820: return Unicode_Category_MN;
		case 0x0821: return Unicode_Category_MN;
		case 0x0822: return Unicode_Category_MN;
		case 0x0823: return Unicode_Category_MN;
		case 0x0824: return Unicode_Category_LM;
		case 0x0825: return Unicode_Category_MN;
		case 0x0826: return Unicode_Category_MN;
		case 0x0827: return Unicode_Category_MN;
		case 0x0828: return Unicode_Category_LM;
		case 0x0829: return Unicode_Category_MN;
		case 0x082A: return Unicode_Category_MN;
		case 0x082B: return Unicode_Category_MN;
		case 0x082C: return Unicode_Category_MN;
		case 0x082D: return Unicode_Category_MN;
		case 0x0830: return Unicode_Category_PO;
		case 0x0831: return Unicode_Category_PO;
		case 0x0832: return Unicode_Category_PO;
		case 0x0833: return Unicode_Category_PO;
		case 0x0834: return Unicode_Category_PO;
		case 0x0835: return Unicode_Category_PO;
		case 0x0836: return Unicode_Category_PO;
		case 0x0837: return Unicode_Category_PO;
		case 0x0838: return Unicode_Category_PO;
		case 0x0839: return Unicode_Category_PO;
		case 0x083A: return Unicode_Category_PO;
		case 0x083B: return Unicode_Category_PO;
		case 0x083C: return Unicode_Category_PO;
		case 0x083D: return Unicode_Category_PO;
		case 0x083E: return Unicode_Category_PO;
		case 0x0840: return Unicode_Category_LO;
		case 0x0841: return Unicode_Category_LO;
		case 0x0842: return Unicode_Category_LO;
		case 0x0843: return Unicode_Category_LO;
		case 0x0844: return Unicode_Category_LO;
		case 0x0845: return Unicode_Category_LO;
		case 0x0846: return Unicode_Category_LO;
		case 0x0847: return Unicode_Category_LO;
		case 0x0848: return Unicode_Category_LO;
		case 0x0849: return Unicode_Category_LO;
		case 0x084A: return Unicode_Category_LO;
		case 0x084B: return Unicode_Category_LO;
		case 0x084C: return Unicode_Category_LO;
		case 0x084D: return Unicode_Category_LO;
		case 0x084E: return Unicode_Category_LO;
		case 0x084F: return Unicode_Category_LO;
		case 0x0850: return Unicode_Category_LO;
		case 0x0851: return Unicode_Category_LO;
		case 0x0852: return Unicode_Category_LO;
		case 0x0853: return Unicode_Category_LO;
		case 0x0854: return Unicode_Category_LO;
		case 0x0855: return Unicode_Category_LO;
		case 0x0856: return Unicode_Category_LO;
		case 0x0857: return Unicode_Category_LO;
		case 0x0858: return Unicode_Category_LO;
		case 0x0859: return Unicode_Category_MN;
		case 0x085A: return Unicode_Category_MN;
		case 0x085B: return Unicode_Category_MN;
		case 0x085E: return Unicode_Category_PO;
		case 0x0860: return Unicode_Category_LO;
		case 0x0861: return Unicode_Category_LO;
		case 0x0862: return Unicode_Category_LO;
		case 0x0863: return Unicode_Category_LO;
		case 0x0864: return Unicode_Category_LO;
		case 0x0865: return Unicode_Category_LO;
		case 0x0866: return Unicode_Category_LO;
		case 0x0867: return Unicode_Category_LO;
		case 0x0868: return Unicode_Category_LO;
		case 0x0869: return Unicode_Category_LO;
		case 0x086A: return Unicode_Category_LO;
		case 0x08A0: return Unicode_Category_LO;
		case 0x08A1: return Unicode_Category_LO;
		case 0x08A2: return Unicode_Category_LO;
		case 0x08A3: return Unicode_Category_LO;
		case 0x08A4: return Unicode_Category_LO;
		case 0x08A5: return Unicode_Category_LO;
		case 0x08A6: return Unicode_Category_LO;
		case 0x08A7: return Unicode_Category_LO;
		case 0x08A8: return Unicode_Category_LO;
		case 0x08A9: return Unicode_Category_LO;
		case 0x08AA: return Unicode_Category_LO;
		case 0x08AB: return Unicode_Category_LO;
		case 0x08AC: return Unicode_Category_LO;
		case 0x08AD: return Unicode_Category_LO;
		case 0x08AE: return Unicode_Category_LO;
		case 0x08AF: return Unicode_Category_LO;
		case 0x08B0: return Unicode_Category_LO;
		case 0x08B1: return Unicode_Category_LO;
		case 0x08B2: return Unicode_Category_LO;
		case 0x08B3: return Unicode_Category_LO;
		case 0x08B4: return Unicode_Category_LO;
		case 0x08B6: return Unicode_Category_LO;
		case 0x08B7: return Unicode_Category_LO;
		case 0x08B8: return Unicode_Category_LO;
		case 0x08B9: return Unicode_Category_LO;
		case 0x08BA: return Unicode_Category_LO;
		case 0x08BB: return Unicode_Category_LO;
		case 0x08BC: return Unicode_Category_LO;
		case 0x08BD: return Unicode_Category_LO;
		case 0x08BE: return Unicode_Category_LO;
		case 0x08BF: return Unicode_Category_LO;
		case 0x08C0: return Unicode_Category_LO;
		case 0x08C1: return Unicode_Category_LO;
		case 0x08C2: return Unicode_Category_LO;
		case 0x08C3: return Unicode_Category_LO;
		case 0x08C4: return Unicode_Category_LO;
		case 0x08C5: return Unicode_Category_LO;
		case 0x08C6: return Unicode_Category_LO;
		case 0x08C7: return Unicode_Category_LO;
		case 0x08D3: return Unicode_Category_MN;
		case 0x08D4: return Unicode_Category_MN;
		case 0x08D5: return Unicode_Category_MN;
		case 0x08D6: return Unicode_Category_MN;
		case 0x08D7: return Unicode_Category_MN;
		case 0x08D8: return Unicode_Category_MN;
		case 0x08D9: return Unicode_Category_MN;
		case 0x08DA: return Unicode_Category_MN;
		case 0x08DB: return Unicode_Category_MN;
		case 0x08DC: return Unicode_Category_MN;
		case 0x08DD: return Unicode_Category_MN;
		case 0x08DE: return Unicode_Category_MN;
		case 0x08DF: return Unicode_Category_MN;
		case 0x08E0: return Unicode_Category_MN;
		case 0x08E1: return Unicode_Category_MN;
		case 0x08E2: return Unicode_Category_CF;
		case 0x08E3: return Unicode_Category_MN;
		case 0x08E4: return Unicode_Category_MN;
		case 0x08E5: return Unicode_Category_MN;
		case 0x08E6: return Unicode_Category_MN;
		case 0x08E7: return Unicode_Category_MN;
		case 0x08E8: return Unicode_Category_MN;
		case 0x08E9: return Unicode_Category_MN;
		case 0x08EA: return Unicode_Category_MN;
		case 0x08EB: return Unicode_Category_MN;
		case 0x08EC: return Unicode_Category_MN;
		case 0x08ED: return Unicode_Category_MN;
		case 0x08EE: return Unicode_Category_MN;
		case 0x08EF: return Unicode_Category_MN;
		case 0x08F0: return Unicode_Category_MN;
		case 0x08F1: return Unicode_Category_MN;
		case 0x08F2: return Unicode_Category_MN;
		case 0x08F3: return Unicode_Category_MN;
		case 0x08F4: return Unicode_Category_MN;
		case 0x08F5: return Unicode_Category_MN;
		case 0x08F6: return Unicode_Category_MN;
		case 0x08F7: return Unicode_Category_MN;
		case 0x08F8: return Unicode_Category_MN;
		case 0x08F9: return Unicode_Category_MN;
		case 0x08FA: return Unicode_Category_MN;
		case 0x08FB: return Unicode_Category_MN;
		case 0x08FC: return Unicode_Category_MN;
		case 0x08FD: return Unicode_Category_MN;
		case 0x08FE: return Unicode_Category_MN;
		case 0x08FF: return Unicode_Category_MN;
		case 0x0900: return Unicode_Category_MN;
		case 0x0901: return Unicode_Category_MN;
		case 0x0902: return Unicode_Category_MN;
		case 0x0903: return Unicode_Category_MC;
		case 0x0904: return Unicode_Category_LO;
		case 0x0905: return Unicode_Category_LO;
		case 0x0906: return Unicode_Category_LO;
		case 0x0907: return Unicode_Category_LO;
		case 0x0908: return Unicode_Category_LO;
		case 0x0909: return Unicode_Category_LO;
		case 0x090A: return Unicode_Category_LO;
		case 0x090B: return Unicode_Category_LO;
		case 0x090C: return Unicode_Category_LO;
		case 0x090D: return Unicode_Category_LO;
		case 0x090E: return Unicode_Category_LO;
		case 0x090F: return Unicode_Category_LO;
		case 0x0910: return Unicode_Category_LO;
		case 0x0911: return Unicode_Category_LO;
		case 0x0912: return Unicode_Category_LO;
		case 0x0913: return Unicode_Category_LO;
		case 0x0914: return Unicode_Category_LO;
		case 0x0915: return Unicode_Category_LO;
		case 0x0916: return Unicode_Category_LO;
		case 0x0917: return Unicode_Category_LO;
		case 0x0918: return Unicode_Category_LO;
		case 0x0919: return Unicode_Category_LO;
		case 0x091A: return Unicode_Category_LO;
		case 0x091B: return Unicode_Category_LO;
		case 0x091C: return Unicode_Category_LO;
		case 0x091D: return Unicode_Category_LO;
		case 0x091E: return Unicode_Category_LO;
		case 0x091F: return Unicode_Category_LO;
		case 0x0920: return Unicode_Category_LO;
		case 0x0921: return Unicode_Category_LO;
		case 0x0922: return Unicode_Category_LO;
		case 0x0923: return Unicode_Category_LO;
		case 0x0924: return Unicode_Category_LO;
		case 0x0925: return Unicode_Category_LO;
		case 0x0926: return Unicode_Category_LO;
		case 0x0927: return Unicode_Category_LO;
		case 0x0928: return Unicode_Category_LO;
		case 0x0929: return Unicode_Category_LO;
		case 0x092A: return Unicode_Category_LO;
		case 0x092B: return Unicode_Category_LO;
		case 0x092C: return Unicode_Category_LO;
		case 0x092D: return Unicode_Category_LO;
		case 0x092E: return Unicode_Category_LO;
		case 0x092F: return Unicode_Category_LO;
		case 0x0930: return Unicode_Category_LO;
		case 0x0931: return Unicode_Category_LO;
		case 0x0932: return Unicode_Category_LO;
		case 0x0933: return Unicode_Category_LO;
		case 0x0934: return Unicode_Category_LO;
		case 0x0935: return Unicode_Category_LO;
		case 0x0936: return Unicode_Category_LO;
		case 0x0937: return Unicode_Category_LO;
		case 0x0938: return Unicode_Category_LO;
		case 0x0939: return Unicode_Category_LO;
		case 0x093A: return Unicode_Category_MN;
		case 0x093B: return Unicode_Category_MC;
		case 0x093C: return Unicode_Category_MN;
		case 0x093D: return Unicode_Category_LO;
		case 0x093E: return Unicode_Category_MC;
		case 0x093F: return Unicode_Category_MC;
		case 0x0940: return Unicode_Category_MC;
		case 0x0941: return Unicode_Category_MN;
		case 0x0942: return Unicode_Category_MN;
		case 0x0943: return Unicode_Category_MN;
		case 0x0944: return Unicode_Category_MN;
		case 0x0945: return Unicode_Category_MN;
		case 0x0946: return Unicode_Category_MN;
		case 0x0947: return Unicode_Category_MN;
		case 0x0948: return Unicode_Category_MN;
		case 0x0949: return Unicode_Category_MC;
		case 0x094A: return Unicode_Category_MC;
		case 0x094B: return Unicode_Category_MC;
		case 0x094C: return Unicode_Category_MC;
		case 0x094D: return Unicode_Category_MN;
		case 0x094E: return Unicode_Category_MC;
		case 0x094F: return Unicode_Category_MC;
		case 0x0950: return Unicode_Category_LO;
		case 0x0951: return Unicode_Category_MN;
		case 0x0952: return Unicode_Category_MN;
		case 0x0953: return Unicode_Category_MN;
		case 0x0954: return Unicode_Category_MN;
		case 0x0955: return Unicode_Category_MN;
		case 0x0956: return Unicode_Category_MN;
		case 0x0957: return Unicode_Category_MN;
		case 0x0958: return Unicode_Category_LO;
		case 0x0959: return Unicode_Category_LO;
		case 0x095A: return Unicode_Category_LO;
		case 0x095B: return Unicode_Category_LO;
		case 0x095C: return Unicode_Category_LO;
		case 0x095D: return Unicode_Category_LO;
		case 0x095E: return Unicode_Category_LO;
		case 0x095F: return Unicode_Category_LO;
		case 0x0960: return Unicode_Category_LO;
		case 0x0961: return Unicode_Category_LO;
		case 0x0962: return Unicode_Category_MN;
		case 0x0963: return Unicode_Category_MN;
		case 0x0964: return Unicode_Category_PO;
		case 0x0965: return Unicode_Category_PO;
		case 0x0966: return Unicode_Category_ND;
		case 0x0967: return Unicode_Category_ND;
		case 0x0968: return Unicode_Category_ND;
		case 0x0969: return Unicode_Category_ND;
		case 0x096A: return Unicode_Category_ND;
		case 0x096B: return Unicode_Category_ND;
		case 0x096C: return Unicode_Category_ND;
		case 0x096D: return Unicode_Category_ND;
		case 0x096E: return Unicode_Category_ND;
		case 0x096F: return Unicode_Category_ND;
		case 0x0970: return Unicode_Category_PO;
		case 0x0971: return Unicode_Category_LM;
		case 0x0972: return Unicode_Category_LO;
		case 0x0973: return Unicode_Category_LO;
		case 0x0974: return Unicode_Category_LO;
		case 0x0975: return Unicode_Category_LO;
		case 0x0976: return Unicode_Category_LO;
		case 0x0977: return Unicode_Category_LO;
		case 0x0978: return Unicode_Category_LO;
		case 0x0979: return Unicode_Category_LO;
		case 0x097A: return Unicode_Category_LO;
		case 0x097B: return Unicode_Category_LO;
		case 0x097C: return Unicode_Category_LO;
		case 0x097D: return Unicode_Category_LO;
		case 0x097E: return Unicode_Category_LO;
		case 0x097F: return Unicode_Category_LO;
		case 0x0980: return Unicode_Category_LO;
		case 0x0981: return Unicode_Category_MN;
		case 0x0982: return Unicode_Category_MC;
		case 0x0983: return Unicode_Category_MC;
		case 0x0985: return Unicode_Category_LO;
		case 0x0986: return Unicode_Category_LO;
		case 0x0987: return Unicode_Category_LO;
		case 0x0988: return Unicode_Category_LO;
		case 0x0989: return Unicode_Category_LO;
		case 0x098A: return Unicode_Category_LO;
		case 0x098B: return Unicode_Category_LO;
		case 0x098C: return Unicode_Category_LO;
		case 0x098F: return Unicode_Category_LO;
		case 0x0990: return Unicode_Category_LO;
		case 0x0993: return Unicode_Category_LO;
		case 0x0994: return Unicode_Category_LO;
		case 0x0995: return Unicode_Category_LO;
		case 0x0996: return Unicode_Category_LO;
		case 0x0997: return Unicode_Category_LO;
		case 0x0998: return Unicode_Category_LO;
		case 0x0999: return Unicode_Category_LO;
		case 0x099A: return Unicode_Category_LO;
		case 0x099B: return Unicode_Category_LO;
		case 0x099C: return Unicode_Category_LO;
		case 0x099D: return Unicode_Category_LO;
		case 0x099E: return Unicode_Category_LO;
		case 0x099F: return Unicode_Category_LO;
		case 0x09A0: return Unicode_Category_LO;
		case 0x09A1: return Unicode_Category_LO;
		case 0x09A2: return Unicode_Category_LO;
		case 0x09A3: return Unicode_Category_LO;
		case 0x09A4: return Unicode_Category_LO;
		case 0x09A5: return Unicode_Category_LO;
		case 0x09A6: return Unicode_Category_LO;
		case 0x09A7: return Unicode_Category_LO;
		case 0x09A8: return Unicode_Category_LO;
		case 0x09AA: return Unicode_Category_LO;
		case 0x09AB: return Unicode_Category_LO;
		case 0x09AC: return Unicode_Category_LO;
		case 0x09AD: return Unicode_Category_LO;
		case 0x09AE: return Unicode_Category_LO;
		case 0x09AF: return Unicode_Category_LO;
		case 0x09B0: return Unicode_Category_LO;
		case 0x09B2: return Unicode_Category_LO;
		case 0x09B6: return Unicode_Category_LO;
		case 0x09B7: return Unicode_Category_LO;
		case 0x09B8: return Unicode_Category_LO;
		case 0x09B9: return Unicode_Category_LO;
		case 0x09BC: return Unicode_Category_MN;
		case 0x09BD: return Unicode_Category_LO;
		case 0x09BE: return Unicode_Category_MC;
		case 0x09BF: return Unicode_Category_MC;
		case 0x09C0: return Unicode_Category_MC;
		case 0x09C1: return Unicode_Category_MN;
		case 0x09C2: return Unicode_Category_MN;
		case 0x09C3: return Unicode_Category_MN;
		case 0x09C4: return Unicode_Category_MN;
		case 0x09C7: return Unicode_Category_MC;
		case 0x09C8: return Unicode_Category_MC;
		case 0x09CB: return Unicode_Category_MC;
		case 0x09CC: return Unicode_Category_MC;
		case 0x09CD: return Unicode_Category_MN;
		case 0x09CE: return Unicode_Category_LO;
		case 0x09D7: return Unicode_Category_MC;
		case 0x09DC: return Unicode_Category_LO;
		case 0x09DD: return Unicode_Category_LO;
		case 0x09DF: return Unicode_Category_LO;
		case 0x09E0: return Unicode_Category_LO;
		case 0x09E1: return Unicode_Category_LO;
		case 0x09E2: return Unicode_Category_MN;
		case 0x09E3: return Unicode_Category_MN;
		case 0x09E6: return Unicode_Category_ND;
		case 0x09E7: return Unicode_Category_ND;
		case 0x09E8: return Unicode_Category_ND;
		case 0x09E9: return Unicode_Category_ND;
		case 0x09EA: return Unicode_Category_ND;
		case 0x09EB: return Unicode_Category_ND;
		case 0x09EC: return Unicode_Category_ND;
		case 0x09ED: return Unicode_Category_ND;
		case 0x09EE: return Unicode_Category_ND;
		case 0x09EF: return Unicode_Category_ND;
		case 0x09F0: return Unicode_Category_LO;
		case 0x09F1: return Unicode_Category_LO;
		case 0x09F2: return Unicode_Category_SC;
		case 0x09F3: return Unicode_Category_SC;
		case 0x09F4: return Unicode_Category_NO;
		case 0x09F5: return Unicode_Category_NO;
		case 0x09F6: return Unicode_Category_NO;
		case 0x09F7: return Unicode_Category_NO;
		case 0x09F8: return Unicode_Category_NO;
		case 0x09F9: return Unicode_Category_NO;
		case 0x09FA: return Unicode_Category_SO;
		case 0x09FB: return Unicode_Category_SC;
		case 0x09FC: return Unicode_Category_LO;
		case 0x09FD: return Unicode_Category_PO;
		case 0x09FE: return Unicode_Category_MN;
		case 0x0A01: return Unicode_Category_MN;
		case 0x0A02: return Unicode_Category_MN;
		case 0x0A03: return Unicode_Category_MC;
		case 0x0A05: return Unicode_Category_LO;
		case 0x0A06: return Unicode_Category_LO;
		case 0x0A07: return Unicode_Category_LO;
		case 0x0A08: return Unicode_Category_LO;
		case 0x0A09: return Unicode_Category_LO;
		case 0x0A0A: return Unicode_Category_LO;
		case 0x0A0F: return Unicode_Category_LO;
		case 0x0A10: return Unicode_Category_LO;
		case 0x0A13: return Unicode_Category_LO;
		case 0x0A14: return Unicode_Category_LO;
		case 0x0A15: return Unicode_Category_LO;
		case 0x0A16: return Unicode_Category_LO;
		case 0x0A17: return Unicode_Category_LO;
		case 0x0A18: return Unicode_Category_LO;
		case 0x0A19: return Unicode_Category_LO;
		case 0x0A1A: return Unicode_Category_LO;
		case 0x0A1B: return Unicode_Category_LO;
		case 0x0A1C: return Unicode_Category_LO;
		case 0x0A1D: return Unicode_Category_LO;
		case 0x0A1E: return Unicode_Category_LO;
		case 0x0A1F: return Unicode_Category_LO;
		case 0x0A20: return Unicode_Category_LO;
		case 0x0A21: return Unicode_Category_LO;
		case 0x0A22: return Unicode_Category_LO;
		case 0x0A23: return Unicode_Category_LO;
		case 0x0A24: return Unicode_Category_LO;
		case 0x0A25: return Unicode_Category_LO;
		case 0x0A26: return Unicode_Category_LO;
		case 0x0A27: return Unicode_Category_LO;
		case 0x0A28: return Unicode_Category_LO;
		case 0x0A2A: return Unicode_Category_LO;
		case 0x0A2B: return Unicode_Category_LO;
		case 0x0A2C: return Unicode_Category_LO;
		case 0x0A2D: return Unicode_Category_LO;
		case 0x0A2E: return Unicode_Category_LO;
		case 0x0A2F: return Unicode_Category_LO;
		case 0x0A30: return Unicode_Category_LO;
		case 0x0A32: return Unicode_Category_LO;
		case 0x0A33: return Unicode_Category_LO;
		case 0x0A35: return Unicode_Category_LO;
		case 0x0A36: return Unicode_Category_LO;
		case 0x0A38: return Unicode_Category_LO;
		case 0x0A39: return Unicode_Category_LO;
		case 0x0A3C: return Unicode_Category_MN;
		case 0x0A3E: return Unicode_Category_MC;
		case 0x0A3F: return Unicode_Category_MC;
		case 0x0A40: return Unicode_Category_MC;
		case 0x0A41: return Unicode_Category_MN;
		case 0x0A42: return Unicode_Category_MN;
		case 0x0A47: return Unicode_Category_MN;
		case 0x0A48: return Unicode_Category_MN;
		case 0x0A4B: return Unicode_Category_MN;
		case 0x0A4C: return Unicode_Category_MN;
		case 0x0A4D: return Unicode_Category_MN;
		case 0x0A51: return Unicode_Category_MN;
		case 0x0A59: return Unicode_Category_LO;
		case 0x0A5A: return Unicode_Category_LO;
		case 0x0A5B: return Unicode_Category_LO;
		case 0x0A5C: return Unicode_Category_LO;
		case 0x0A5E: return Unicode_Category_LO;
		case 0x0A66: return Unicode_Category_ND;
		case 0x0A67: return Unicode_Category_ND;
		case 0x0A68: return Unicode_Category_ND;
		case 0x0A69: return Unicode_Category_ND;
		case 0x0A6A: return Unicode_Category_ND;
		case 0x0A6B: return Unicode_Category_ND;
		case 0x0A6C: return Unicode_Category_ND;
		case 0x0A6D: return Unicode_Category_ND;
		case 0x0A6E: return Unicode_Category_ND;
		case 0x0A6F: return Unicode_Category_ND;
		case 0x0A70: return Unicode_Category_MN;
		case 0x0A71: return Unicode_Category_MN;
		case 0x0A72: return Unicode_Category_LO;
		case 0x0A73: return Unicode_Category_LO;
		case 0x0A74: return Unicode_Category_LO;
		case 0x0A75: return Unicode_Category_MN;
		case 0x0A76: return Unicode_Category_PO;
		case 0x0A81: return Unicode_Category_MN;
		case 0x0A82: return Unicode_Category_MN;
		case 0x0A83: return Unicode_Category_MC;
		case 0x0A85: return Unicode_Category_LO;
		case 0x0A86: return Unicode_Category_LO;
		case 0x0A87: return Unicode_Category_LO;
		case 0x0A88: return Unicode_Category_LO;
		case 0x0A89: return Unicode_Category_LO;
		case 0x0A8A: return Unicode_Category_LO;
		case 0x0A8B: return Unicode_Category_LO;
		case 0x0A8C: return Unicode_Category_LO;
		case 0x0A8D: return Unicode_Category_LO;
		case 0x0A8F: return Unicode_Category_LO;
		case 0x0A90: return Unicode_Category_LO;
		case 0x0A91: return Unicode_Category_LO;
		case 0x0A93: return Unicode_Category_LO;
		case 0x0A94: return Unicode_Category_LO;
		case 0x0A95: return Unicode_Category_LO;
		case 0x0A96: return Unicode_Category_LO;
		case 0x0A97: return Unicode_Category_LO;
		case 0x0A98: return Unicode_Category_LO;
		case 0x0A99: return Unicode_Category_LO;
		case 0x0A9A: return Unicode_Category_LO;
		case 0x0A9B: return Unicode_Category_LO;
		case 0x0A9C: return Unicode_Category_LO;
		case 0x0A9D: return Unicode_Category_LO;
		case 0x0A9E: return Unicode_Category_LO;
		case 0x0A9F: return Unicode_Category_LO;
		case 0x0AA0: return Unicode_Category_LO;
		case 0x0AA1: return Unicode_Category_LO;
		case 0x0AA2: return Unicode_Category_LO;
		case 0x0AA3: return Unicode_Category_LO;
		case 0x0AA4: return Unicode_Category_LO;
		case 0x0AA5: return Unicode_Category_LO;
		case 0x0AA6: return Unicode_Category_LO;
		case 0x0AA7: return Unicode_Category_LO;
		case 0x0AA8: return Unicode_Category_LO;
		case 0x0AAA: return Unicode_Category_LO;
		case 0x0AAB: return Unicode_Category_LO;
		case 0x0AAC: return Unicode_Category_LO;
		case 0x0AAD: return Unicode_Category_LO;
		case 0x0AAE: return Unicode_Category_LO;
		case 0x0AAF: return Unicode_Category_LO;
		case 0x0AB0: return Unicode_Category_LO;
		case 0x0AB2: return Unicode_Category_LO;
		case 0x0AB3: return Unicode_Category_LO;
		case 0x0AB5: return Unicode_Category_LO;
		case 0x0AB6: return Unicode_Category_LO;
		case 0x0AB7: return Unicode_Category_LO;
		case 0x0AB8: return Unicode_Category_LO;
		case 0x0AB9: return Unicode_Category_LO;
		case 0x0ABC: return Unicode_Category_MN;
		case 0x0ABD: return Unicode_Category_LO;
		case 0x0ABE: return Unicode_Category_MC;
		case 0x0ABF: return Unicode_Category_MC;
		case 0x0AC0: return Unicode_Category_MC;
		case 0x0AC1: return Unicode_Category_MN;
		case 0x0AC2: return Unicode_Category_MN;
		case 0x0AC3: return Unicode_Category_MN;
		case 0x0AC4: return Unicode_Category_MN;
		case 0x0AC5: return Unicode_Category_MN;
		case 0x0AC7: return Unicode_Category_MN;
		case 0x0AC8: return Unicode_Category_MN;
		case 0x0AC9: return Unicode_Category_MC;
		case 0x0ACB: return Unicode_Category_MC;
		case 0x0ACC: return Unicode_Category_MC;
		case 0x0ACD: return Unicode_Category_MN;
		case 0x0AD0: return Unicode_Category_LO;
		case 0x0AE0: return Unicode_Category_LO;
		case 0x0AE1: return Unicode_Category_LO;
		case 0x0AE2: return Unicode_Category_MN;
		case 0x0AE3: return Unicode_Category_MN;
		case 0x0AE6: return Unicode_Category_ND;
		case 0x0AE7: return Unicode_Category_ND;
		case 0x0AE8: return Unicode_Category_ND;
		case 0x0AE9: return Unicode_Category_ND;
		case 0x0AEA: return Unicode_Category_ND;
		case 0x0AEB: return Unicode_Category_ND;
		case 0x0AEC: return Unicode_Category_ND;
		case 0x0AED: return Unicode_Category_ND;
		case 0x0AEE: return Unicode_Category_ND;
		case 0x0AEF: return Unicode_Category_ND;
		case 0x0AF0: return Unicode_Category_PO;
		case 0x0AF1: return Unicode_Category_SC;
		case 0x0AF9: return Unicode_Category_LO;
		case 0x0AFA: return Unicode_Category_MN;
		case 0x0AFB: return Unicode_Category_MN;
		case 0x0AFC: return Unicode_Category_MN;
		case 0x0AFD: return Unicode_Category_MN;
		case 0x0AFE: return Unicode_Category_MN;
		case 0x0AFF: return Unicode_Category_MN;
		case 0x0B01: return Unicode_Category_MN;
		case 0x0B02: return Unicode_Category_MC;
		case 0x0B03: return Unicode_Category_MC;
		case 0x0B05: return Unicode_Category_LO;
		case 0x0B06: return Unicode_Category_LO;
		case 0x0B07: return Unicode_Category_LO;
		case 0x0B08: return Unicode_Category_LO;
		case 0x0B09: return Unicode_Category_LO;
		case 0x0B0A: return Unicode_Category_LO;
		case 0x0B0B: return Unicode_Category_LO;
		case 0x0B0C: return Unicode_Category_LO;
		case 0x0B0F: return Unicode_Category_LO;
		case 0x0B10: return Unicode_Category_LO;
		case 0x0B13: return Unicode_Category_LO;
		case 0x0B14: return Unicode_Category_LO;
		case 0x0B15: return Unicode_Category_LO;
		case 0x0B16: return Unicode_Category_LO;
		case 0x0B17: return Unicode_Category_LO;
		case 0x0B18: return Unicode_Category_LO;
		case 0x0B19: return Unicode_Category_LO;
		case 0x0B1A: return Unicode_Category_LO;
		case 0x0B1B: return Unicode_Category_LO;
		case 0x0B1C: return Unicode_Category_LO;
		case 0x0B1D: return Unicode_Category_LO;
		case 0x0B1E: return Unicode_Category_LO;
		case 0x0B1F: return Unicode_Category_LO;
		case 0x0B20: return Unicode_Category_LO;
		case 0x0B21: return Unicode_Category_LO;
		case 0x0B22: return Unicode_Category_LO;
		case 0x0B23: return Unicode_Category_LO;
		case 0x0B24: return Unicode_Category_LO;
		case 0x0B25: return Unicode_Category_LO;
		case 0x0B26: return Unicode_Category_LO;
		case 0x0B27: return Unicode_Category_LO;
		case 0x0B28: return Unicode_Category_LO;
		case 0x0B2A: return Unicode_Category_LO;
		case 0x0B2B: return Unicode_Category_LO;
		case 0x0B2C: return Unicode_Category_LO;
		case 0x0B2D: return Unicode_Category_LO;
		case 0x0B2E: return Unicode_Category_LO;
		case 0x0B2F: return Unicode_Category_LO;
		case 0x0B30: return Unicode_Category_LO;
		case 0x0B32: return Unicode_Category_LO;
		case 0x0B33: return Unicode_Category_LO;
		case 0x0B35: return Unicode_Category_LO;
		case 0x0B36: return Unicode_Category_LO;
		case 0x0B37: return Unicode_Category_LO;
		case 0x0B38: return Unicode_Category_LO;
		case 0x0B39: return Unicode_Category_LO;
		case 0x0B3C: return Unicode_Category_MN;
		case 0x0B3D: return Unicode_Category_LO;
		case 0x0B3E: return Unicode_Category_MC;
		case 0x0B3F: return Unicode_Category_MN;
		case 0x0B40: return Unicode_Category_MC;
		case 0x0B41: return Unicode_Category_MN;
		case 0x0B42: return Unicode_Category_MN;
		case 0x0B43: return Unicode_Category_MN;
		case 0x0B44: return Unicode_Category_MN;
		case 0x0B47: return Unicode_Category_MC;
		case 0x0B48: return Unicode_Category_MC;
		case 0x0B4B: return Unicode_Category_MC;
		case 0x0B4C: return Unicode_Category_MC;
		case 0x0B4D: return Unicode_Category_MN;
		case 0x0B55: return Unicode_Category_MN;
		case 0x0B56: return Unicode_Category_MN;
		case 0x0B57: return Unicode_Category_MC;
		case 0x0B5C: return Unicode_Category_LO;
		case 0x0B5D: return Unicode_Category_LO;
		case 0x0B5F: return Unicode_Category_LO;
		case 0x0B60: return Unicode_Category_LO;
		case 0x0B61: return Unicode_Category_LO;
		case 0x0B62: return Unicode_Category_MN;
		case 0x0B63: return Unicode_Category_MN;
		case 0x0B66: return Unicode_Category_ND;
		case 0x0B67: return Unicode_Category_ND;
		case 0x0B68: return Unicode_Category_ND;
		case 0x0B69: return Unicode_Category_ND;
		case 0x0B6A: return Unicode_Category_ND;
		case 0x0B6B: return Unicode_Category_ND;
		case 0x0B6C: return Unicode_Category_ND;
		case 0x0B6D: return Unicode_Category_ND;
		case 0x0B6E: return Unicode_Category_ND;
		case 0x0B6F: return Unicode_Category_ND;
		case 0x0B70: return Unicode_Category_SO;
		case 0x0B71: return Unicode_Category_LO;
		case 0x0B72: return Unicode_Category_NO;
		case 0x0B73: return Unicode_Category_NO;
		case 0x0B74: return Unicode_Category_NO;
		case 0x0B75: return Unicode_Category_NO;
		case 0x0B76: return Unicode_Category_NO;
		case 0x0B77: return Unicode_Category_NO;
		case 0x0B82: return Unicode_Category_MN;
		case 0x0B83: return Unicode_Category_LO;
		case 0x0B85: return Unicode_Category_LO;
		case 0x0B86: return Unicode_Category_LO;
		case 0x0B87: return Unicode_Category_LO;
		case 0x0B88: return Unicode_Category_LO;
		case 0x0B89: return Unicode_Category_LO;
		case 0x0B8A: return Unicode_Category_LO;
		case 0x0B8E: return Unicode_Category_LO;
		case 0x0B8F: return Unicode_Category_LO;
		case 0x0B90: return Unicode_Category_LO;
		case 0x0B92: return Unicode_Category_LO;
		case 0x0B93: return Unicode_Category_LO;
		case 0x0B94: return Unicode_Category_LO;
		case 0x0B95: return Unicode_Category_LO;
		case 0x0B99: return Unicode_Category_LO;
		case 0x0B9A: return Unicode_Category_LO;
		case 0x0B9C: return Unicode_Category_LO;
		case 0x0B9E: return Unicode_Category_LO;
		case 0x0B9F: return Unicode_Category_LO;
		case 0x0BA3: return Unicode_Category_LO;
		case 0x0BA4: return Unicode_Category_LO;
		case 0x0BA8: return Unicode_Category_LO;
		case 0x0BA9: return Unicode_Category_LO;
		case 0x0BAA: return Unicode_Category_LO;
		case 0x0BAE: return Unicode_Category_LO;
		case 0x0BAF: return Unicode_Category_LO;
		case 0x0BB0: return Unicode_Category_LO;
		case 0x0BB1: return Unicode_Category_LO;
		case 0x0BB2: return Unicode_Category_LO;
		case 0x0BB3: return Unicode_Category_LO;
		case 0x0BB4: return Unicode_Category_LO;
		case 0x0BB5: return Unicode_Category_LO;
		case 0x0BB6: return Unicode_Category_LO;
		case 0x0BB7: return Unicode_Category_LO;
		case 0x0BB8: return Unicode_Category_LO;
		case 0x0BB9: return Unicode_Category_LO;
		case 0x0BBE: return Unicode_Category_MC;
		case 0x0BBF: return Unicode_Category_MC;
		case 0x0BC0: return Unicode_Category_MN;
		case 0x0BC1: return Unicode_Category_MC;
		case 0x0BC2: return Unicode_Category_MC;
		case 0x0BC6: return Unicode_Category_MC;
		case 0x0BC7: return Unicode_Category_MC;
		case 0x0BC8: return Unicode_Category_MC;
		case 0x0BCA: return Unicode_Category_MC;
		case 0x0BCB: return Unicode_Category_MC;
		case 0x0BCC: return Unicode_Category_MC;
		case 0x0BCD: return Unicode_Category_MN;
		case 0x0BD0: return Unicode_Category_LO;
		case 0x0BD7: return Unicode_Category_MC;
		case 0x0BE6: return Unicode_Category_ND;
		case 0x0BE7: return Unicode_Category_ND;
		case 0x0BE8: return Unicode_Category_ND;
		case 0x0BE9: return Unicode_Category_ND;
		case 0x0BEA: return Unicode_Category_ND;
		case 0x0BEB: return Unicode_Category_ND;
		case 0x0BEC: return Unicode_Category_ND;
		case 0x0BED: return Unicode_Category_ND;
		case 0x0BEE: return Unicode_Category_ND;
		case 0x0BEF: return Unicode_Category_ND;
		case 0x0BF0: return Unicode_Category_NO;
		case 0x0BF1: return Unicode_Category_NO;
		case 0x0BF2: return Unicode_Category_NO;
		case 0x0BF3: return Unicode_Category_SO;
		case 0x0BF4: return Unicode_Category_SO;
		case 0x0BF5: return Unicode_Category_SO;
		case 0x0BF6: return Unicode_Category_SO;
		case 0x0BF7: return Unicode_Category_SO;
		case 0x0BF8: return Unicode_Category_SO;
		case 0x0BF9: return Unicode_Category_SC;
		case 0x0BFA: return Unicode_Category_SO;
		case 0x0C00: return Unicode_Category_MN;
		case 0x0C01: return Unicode_Category_MC;
		case 0x0C02: return Unicode_Category_MC;
		case 0x0C03: return Unicode_Category_MC;
		case 0x0C04: return Unicode_Category_MN;
		case 0x0C05: return Unicode_Category_LO;
		case 0x0C06: return Unicode_Category_LO;
		case 0x0C07: return Unicode_Category_LO;
		case 0x0C08: return Unicode_Category_LO;
		case 0x0C09: return Unicode_Category_LO;
		case 0x0C0A: return Unicode_Category_LO;
		case 0x0C0B: return Unicode_Category_LO;
		case 0x0C0C: return Unicode_Category_LO;
		case 0x0C0E: return Unicode_Category_LO;
		case 0x0C0F: return Unicode_Category_LO;
		case 0x0C10: return Unicode_Category_LO;
		case 0x0C12: return Unicode_Category_LO;
		case 0x0C13: return Unicode_Category_LO;
		case 0x0C14: return Unicode_Category_LO;
		case 0x0C15: return Unicode_Category_LO;
		case 0x0C16: return Unicode_Category_LO;
		case 0x0C17: return Unicode_Category_LO;
		case 0x0C18: return Unicode_Category_LO;
		case 0x0C19: return Unicode_Category_LO;
		case 0x0C1A: return Unicode_Category_LO;
		case 0x0C1B: return Unicode_Category_LO;
		case 0x0C1C: return Unicode_Category_LO;
		case 0x0C1D: return Unicode_Category_LO;
		case 0x0C1E: return Unicode_Category_LO;
		case 0x0C1F: return Unicode_Category_LO;
		case 0x0C20: return Unicode_Category_LO;
		case 0x0C21: return Unicode_Category_LO;
		case 0x0C22: return Unicode_Category_LO;
		case 0x0C23: return Unicode_Category_LO;
		case 0x0C24: return Unicode_Category_LO;
		case 0x0C25: return Unicode_Category_LO;
		case 0x0C26: return Unicode_Category_LO;
		case 0x0C27: return Unicode_Category_LO;
		case 0x0C28: return Unicode_Category_LO;
		case 0x0C2A: return Unicode_Category_LO;
		case 0x0C2B: return Unicode_Category_LO;
		case 0x0C2C: return Unicode_Category_LO;
		case 0x0C2D: return Unicode_Category_LO;
		case 0x0C2E: return Unicode_Category_LO;
		case 0x0C2F: return Unicode_Category_LO;
		case 0x0C30: return Unicode_Category_LO;
		case 0x0C31: return Unicode_Category_LO;
		case 0x0C32: return Unicode_Category_LO;
		case 0x0C33: return Unicode_Category_LO;
		case 0x0C34: return Unicode_Category_LO;
		case 0x0C35: return Unicode_Category_LO;
		case 0x0C36: return Unicode_Category_LO;
		case 0x0C37: return Unicode_Category_LO;
		case 0x0C38: return Unicode_Category_LO;
		case 0x0C39: return Unicode_Category_LO;
		case 0x0C3D: return Unicode_Category_LO;
		case 0x0C3E: return Unicode_Category_MN;
		case 0x0C3F: return Unicode_Category_MN;
		case 0x0C40: return Unicode_Category_MN;
		case 0x0C41: return Unicode_Category_MC;
		case 0x0C42: return Unicode_Category_MC;
		case 0x0C43: return Unicode_Category_MC;
		case 0x0C44: return Unicode_Category_MC;
		case 0x0C46: return Unicode_Category_MN;
		case 0x0C47: return Unicode_Category_MN;
		case 0x0C48: return Unicode_Category_MN;
		case 0x0C4A: return Unicode_Category_MN;
		case 0x0C4B: return Unicode_Category_MN;
		case 0x0C4C: return Unicode_Category_MN;
		case 0x0C4D: return Unicode_Category_MN;
		case 0x0C55: return Unicode_Category_MN;
		case 0x0C56: return Unicode_Category_MN;
		case 0x0C58: return Unicode_Category_LO;
		case 0x0C59: return Unicode_Category_LO;
		case 0x0C5A: return Unicode_Category_LO;
		case 0x0C60: return Unicode_Category_LO;
		case 0x0C61: return Unicode_Category_LO;
		case 0x0C62: return Unicode_Category_MN;
		case 0x0C63: return Unicode_Category_MN;
		case 0x0C66: return Unicode_Category_ND;
		case 0x0C67: return Unicode_Category_ND;
		case 0x0C68: return Unicode_Category_ND;
		case 0x0C69: return Unicode_Category_ND;
		case 0x0C6A: return Unicode_Category_ND;
		case 0x0C6B: return Unicode_Category_ND;
		case 0x0C6C: return Unicode_Category_ND;
		case 0x0C6D: return Unicode_Category_ND;
		case 0x0C6E: return Unicode_Category_ND;
		case 0x0C6F: return Unicode_Category_ND;
		case 0x0C77: return Unicode_Category_PO;
		case 0x0C78: return Unicode_Category_NO;
		case 0x0C79: return Unicode_Category_NO;
		case 0x0C7A: return Unicode_Category_NO;
		case 0x0C7B: return Unicode_Category_NO;
		case 0x0C7C: return Unicode_Category_NO;
		case 0x0C7D: return Unicode_Category_NO;
		case 0x0C7E: return Unicode_Category_NO;
		case 0x0C7F: return Unicode_Category_SO;
		case 0x0C80: return Unicode_Category_LO;
		case 0x0C81: return Unicode_Category_MN;
		case 0x0C82: return Unicode_Category_MC;
		case 0x0C83: return Unicode_Category_MC;
		case 0x0C84: return Unicode_Category_PO;
		case 0x0C85: return Unicode_Category_LO;
		case 0x0C86: return Unicode_Category_LO;
		case 0x0C87: return Unicode_Category_LO;
		case 0x0C88: return Unicode_Category_LO;
		case 0x0C89: return Unicode_Category_LO;
		case 0x0C8A: return Unicode_Category_LO;
		case 0x0C8B: return Unicode_Category_LO;
		case 0x0C8C: return Unicode_Category_LO;
		case 0x0C8E: return Unicode_Category_LO;
		case 0x0C8F: return Unicode_Category_LO;
		case 0x0C90: return Unicode_Category_LO;
		case 0x0C92: return Unicode_Category_LO;
		case 0x0C93: return Unicode_Category_LO;
		case 0x0C94: return Unicode_Category_LO;
		case 0x0C95: return Unicode_Category_LO;
		case 0x0C96: return Unicode_Category_LO;
		case 0x0C97: return Unicode_Category_LO;
		case 0x0C98: return Unicode_Category_LO;
		case 0x0C99: return Unicode_Category_LO;
		case 0x0C9A: return Unicode_Category_LO;
		case 0x0C9B: return Unicode_Category_LO;
		case 0x0C9C: return Unicode_Category_LO;
		case 0x0C9D: return Unicode_Category_LO;
		case 0x0C9E: return Unicode_Category_LO;
		case 0x0C9F: return Unicode_Category_LO;
		case 0x0CA0: return Unicode_Category_LO;
		case 0x0CA1: return Unicode_Category_LO;
		case 0x0CA2: return Unicode_Category_LO;
		case 0x0CA3: return Unicode_Category_LO;
		case 0x0CA4: return Unicode_Category_LO;
		case 0x0CA5: return Unicode_Category_LO;
		case 0x0CA6: return Unicode_Category_LO;
		case 0x0CA7: return Unicode_Category_LO;
		case 0x0CA8: return Unicode_Category_LO;
		case 0x0CAA: return Unicode_Category_LO;
		case 0x0CAB: return Unicode_Category_LO;
		case 0x0CAC: return Unicode_Category_LO;
		case 0x0CAD: return Unicode_Category_LO;
		case 0x0CAE: return Unicode_Category_LO;
		case 0x0CAF: return Unicode_Category_LO;
		case 0x0CB0: return Unicode_Category_LO;
		case 0x0CB1: return Unicode_Category_LO;
		case 0x0CB2: return Unicode_Category_LO;
		case 0x0CB3: return Unicode_Category_LO;
		case 0x0CB5: return Unicode_Category_LO;
		case 0x0CB6: return Unicode_Category_LO;
		case 0x0CB7: return Unicode_Category_LO;
		case 0x0CB8: return Unicode_Category_LO;
		case 0x0CB9: return Unicode_Category_LO;
		case 0x0CBC: return Unicode_Category_MN;
		case 0x0CBD: return Unicode_Category_LO;
		case 0x0CBE: return Unicode_Category_MC;
		case 0x0CBF: return Unicode_Category_MN;
		case 0x0CC0: return Unicode_Category_MC;
		case 0x0CC1: return Unicode_Category_MC;
		case 0x0CC2: return Unicode_Category_MC;
		case 0x0CC3: return Unicode_Category_MC;
		case 0x0CC4: return Unicode_Category_MC;
		case 0x0CC6: return Unicode_Category_MN;
		case 0x0CC7: return Unicode_Category_MC;
		case 0x0CC8: return Unicode_Category_MC;
		case 0x0CCA: return Unicode_Category_MC;
		case 0x0CCB: return Unicode_Category_MC;
		case 0x0CCC: return Unicode_Category_MN;
		case 0x0CCD: return Unicode_Category_MN;
		case 0x0CD5: return Unicode_Category_MC;
		case 0x0CD6: return Unicode_Category_MC;
		case 0x0CDE: return Unicode_Category_LO;
		case 0x0CE0: return Unicode_Category_LO;
		case 0x0CE1: return Unicode_Category_LO;
		case 0x0CE2: return Unicode_Category_MN;
		case 0x0CE3: return Unicode_Category_MN;
		case 0x0CE6: return Unicode_Category_ND;
		case 0x0CE7: return Unicode_Category_ND;
		case 0x0CE8: return Unicode_Category_ND;
		case 0x0CE9: return Unicode_Category_ND;
		case 0x0CEA: return Unicode_Category_ND;
		case 0x0CEB: return Unicode_Category_ND;
		case 0x0CEC: return Unicode_Category_ND;
		case 0x0CED: return Unicode_Category_ND;
		case 0x0CEE: return Unicode_Category_ND;
		case 0x0CEF: return Unicode_Category_ND;
		case 0x0CF1: return Unicode_Category_LO;
		case 0x0CF2: return Unicode_Category_LO;
		case 0x0D00: return Unicode_Category_MN;
		case 0x0D01: return Unicode_Category_MN;
		case 0x0D02: return Unicode_Category_MC;
		case 0x0D03: return Unicode_Category_MC;
		case 0x0D04: return Unicode_Category_LO;
		case 0x0D05: return Unicode_Category_LO;
		case 0x0D06: return Unicode_Category_LO;
		case 0x0D07: return Unicode_Category_LO;
		case 0x0D08: return Unicode_Category_LO;
		case 0x0D09: return Unicode_Category_LO;
		case 0x0D0A: return Unicode_Category_LO;
		case 0x0D0B: return Unicode_Category_LO;
		case 0x0D0C: return Unicode_Category_LO;
		case 0x0D0E: return Unicode_Category_LO;
		case 0x0D0F: return Unicode_Category_LO;
		case 0x0D10: return Unicode_Category_LO;
		case 0x0D12: return Unicode_Category_LO;
		case 0x0D13: return Unicode_Category_LO;
		case 0x0D14: return Unicode_Category_LO;
		case 0x0D15: return Unicode_Category_LO;
		case 0x0D16: return Unicode_Category_LO;
		case 0x0D17: return Unicode_Category_LO;
		case 0x0D18: return Unicode_Category_LO;
		case 0x0D19: return Unicode_Category_LO;
		case 0x0D1A: return Unicode_Category_LO;
		case 0x0D1B: return Unicode_Category_LO;
		case 0x0D1C: return Unicode_Category_LO;
		case 0x0D1D: return Unicode_Category_LO;
		case 0x0D1E: return Unicode_Category_LO;
		case 0x0D1F: return Unicode_Category_LO;
		case 0x0D20: return Unicode_Category_LO;
		case 0x0D21: return Unicode_Category_LO;
		case 0x0D22: return Unicode_Category_LO;
		case 0x0D23: return Unicode_Category_LO;
		case 0x0D24: return Unicode_Category_LO;
		case 0x0D25: return Unicode_Category_LO;
		case 0x0D26: return Unicode_Category_LO;
		case 0x0D27: return Unicode_Category_LO;
		case 0x0D28: return Unicode_Category_LO;
		case 0x0D29: return Unicode_Category_LO;
		case 0x0D2A: return Unicode_Category_LO;
		case 0x0D2B: return Unicode_Category_LO;
		case 0x0D2C: return Unicode_Category_LO;
		case 0x0D2D: return Unicode_Category_LO;
		case 0x0D2E: return Unicode_Category_LO;
		case 0x0D2F: return Unicode_Category_LO;
		case 0x0D30: return Unicode_Category_LO;
		case 0x0D31: return Unicode_Category_LO;
		case 0x0D32: return Unicode_Category_LO;
		case 0x0D33: return Unicode_Category_LO;
		case 0x0D34: return Unicode_Category_LO;
		case 0x0D35: return Unicode_Category_LO;
		case 0x0D36: return Unicode_Category_LO;
		case 0x0D37: return Unicode_Category_LO;
		case 0x0D38: return Unicode_Category_LO;
		case 0x0D39: return Unicode_Category_LO;
		case 0x0D3A: return Unicode_Category_LO;
		case 0x0D3B: return Unicode_Category_MN;
		case 0x0D3C: return Unicode_Category_MN;
		case 0x0D3D: return Unicode_Category_LO;
		case 0x0D3E: return Unicode_Category_MC;
		case 0x0D3F: return Unicode_Category_MC;
		case 0x0D40: return Unicode_Category_MC;
		case 0x0D41: return Unicode_Category_MN;
		case 0x0D42: return Unicode_Category_MN;
		case 0x0D43: return Unicode_Category_MN;
		case 0x0D44: return Unicode_Category_MN;
		case 0x0D46: return Unicode_Category_MC;
		case 0x0D47: return Unicode_Category_MC;
		case 0x0D48: return Unicode_Category_MC;
		case 0x0D4A: return Unicode_Category_MC;
		case 0x0D4B: return Unicode_Category_MC;
		case 0x0D4C: return Unicode_Category_MC;
		case 0x0D4D: return Unicode_Category_MN;
		case 0x0D4E: return Unicode_Category_LO;
		case 0x0D4F: return Unicode_Category_SO;
		case 0x0D54: return Unicode_Category_LO;
		case 0x0D55: return Unicode_Category_LO;
		case 0x0D56: return Unicode_Category_LO;
		case 0x0D57: return Unicode_Category_MC;
		case 0x0D58: return Unicode_Category_NO;
		case 0x0D59: return Unicode_Category_NO;
		case 0x0D5A: return Unicode_Category_NO;
		case 0x0D5B: return Unicode_Category_NO;
		case 0x0D5C: return Unicode_Category_NO;
		case 0x0D5D: return Unicode_Category_NO;
		case 0x0D5E: return Unicode_Category_NO;
		case 0x0D5F: return Unicode_Category_LO;
		case 0x0D60: return Unicode_Category_LO;
		case 0x0D61: return Unicode_Category_LO;
		case 0x0D62: return Unicode_Category_MN;
		case 0x0D63: return Unicode_Category_MN;
		case 0x0D66: return Unicode_Category_ND;
		case 0x0D67: return Unicode_Category_ND;
		case 0x0D68: return Unicode_Category_ND;
		case 0x0D69: return Unicode_Category_ND;
		case 0x0D6A: return Unicode_Category_ND;
		case 0x0D6B: return Unicode_Category_ND;
		case 0x0D6C: return Unicode_Category_ND;
		case 0x0D6D: return Unicode_Category_ND;
		case 0x0D6E: return Unicode_Category_ND;
		case 0x0D6F: return Unicode_Category_ND;
		case 0x0D70: return Unicode_Category_NO;
		case 0x0D71: return Unicode_Category_NO;
		case 0x0D72: return Unicode_Category_NO;
		case 0x0D73: return Unicode_Category_NO;
		case 0x0D74: return Unicode_Category_NO;
		case 0x0D75: return Unicode_Category_NO;
		case 0x0D76: return Unicode_Category_NO;
		case 0x0D77: return Unicode_Category_NO;
		case 0x0D78: return Unicode_Category_NO;
		case 0x0D79: return Unicode_Category_SO;
		case 0x0D7A: return Unicode_Category_LO;
		case 0x0D7B: return Unicode_Category_LO;
		case 0x0D7C: return Unicode_Category_LO;
		case 0x0D7D: return Unicode_Category_LO;
		case 0x0D7E: return Unicode_Category_LO;
		case 0x0D7F: return Unicode_Category_LO;
		case 0x0D81: return Unicode_Category_MN;
		case 0x0D82: return Unicode_Category_MC;
		case 0x0D83: return Unicode_Category_MC;
		case 0x0D85: return Unicode_Category_LO;
		case 0x0D86: return Unicode_Category_LO;
		case 0x0D87: return Unicode_Category_LO;
		case 0x0D88: return Unicode_Category_LO;
		case 0x0D89: return Unicode_Category_LO;
		case 0x0D8A: return Unicode_Category_LO;
		case 0x0D8B: return Unicode_Category_LO;
		case 0x0D8C: return Unicode_Category_LO;
		case 0x0D8D: return Unicode_Category_LO;
		case 0x0D8E: return Unicode_Category_LO;
		case 0x0D8F: return Unicode_Category_LO;
		case 0x0D90: return Unicode_Category_LO;
		case 0x0D91: return Unicode_Category_LO;
		case 0x0D92: return Unicode_Category_LO;
		case 0x0D93: return Unicode_Category_LO;
		case 0x0D94: return Unicode_Category_LO;
		case 0x0D95: return Unicode_Category_LO;
		case 0x0D96: return Unicode_Category_LO;
		case 0x0D9A: return Unicode_Category_LO;
		case 0x0D9B: return Unicode_Category_LO;
		case 0x0D9C: return Unicode_Category_LO;
		case 0x0D9D: return Unicode_Category_LO;
		case 0x0D9E: return Unicode_Category_LO;
		case 0x0D9F: return Unicode_Category_LO;
		case 0x0DA0: return Unicode_Category_LO;
		case 0x0DA1: return Unicode_Category_LO;
		case 0x0DA2: return Unicode_Category_LO;
		case 0x0DA3: return Unicode_Category_LO;
		case 0x0DA4: return Unicode_Category_LO;
		case 0x0DA5: return Unicode_Category_LO;
		case 0x0DA6: return Unicode_Category_LO;
		case 0x0DA7: return Unicode_Category_LO;
		case 0x0DA8: return Unicode_Category_LO;
		case 0x0DA9: return Unicode_Category_LO;
		case 0x0DAA: return Unicode_Category_LO;
		case 0x0DAB: return Unicode_Category_LO;
		case 0x0DAC: return Unicode_Category_LO;
		case 0x0DAD: return Unicode_Category_LO;
		case 0x0DAE: return Unicode_Category_LO;
		case 0x0DAF: return Unicode_Category_LO;
		case 0x0DB0: return Unicode_Category_LO;
		case 0x0DB1: return Unicode_Category_LO;
		case 0x0DB3: return Unicode_Category_LO;
		case 0x0DB4: return Unicode_Category_LO;
		case 0x0DB5: return Unicode_Category_LO;
		case 0x0DB6: return Unicode_Category_LO;
		case 0x0DB7: return Unicode_Category_LO;
		case 0x0DB8: return Unicode_Category_LO;
		case 0x0DB9: return Unicode_Category_LO;
		case 0x0DBA: return Unicode_Category_LO;
		case 0x0DBB: return Unicode_Category_LO;
		case 0x0DBD: return Unicode_Category_LO;
		case 0x0DC0: return Unicode_Category_LO;
		case 0x0DC1: return Unicode_Category_LO;
		case 0x0DC2: return Unicode_Category_LO;
		case 0x0DC3: return Unicode_Category_LO;
		case 0x0DC4: return Unicode_Category_LO;
		case 0x0DC5: return Unicode_Category_LO;
		case 0x0DC6: return Unicode_Category_LO;
		case 0x0DCA: return Unicode_Category_MN;
		case 0x0DCF: return Unicode_Category_MC;
		case 0x0DD0: return Unicode_Category_MC;
		case 0x0DD1: return Unicode_Category_MC;
		case 0x0DD2: return Unicode_Category_MN;
		case 0x0DD3: return Unicode_Category_MN;
		case 0x0DD4: return Unicode_Category_MN;
		case 0x0DD6: return Unicode_Category_MN;
		case 0x0DD8: return Unicode_Category_MC;
		case 0x0DD9: return Unicode_Category_MC;
		case 0x0DDA: return Unicode_Category_MC;
		case 0x0DDB: return Unicode_Category_MC;
		case 0x0DDC: return Unicode_Category_MC;
		case 0x0DDD: return Unicode_Category_MC;
		case 0x0DDE: return Unicode_Category_MC;
		case 0x0DDF: return Unicode_Category_MC;
		case 0x0DE6: return Unicode_Category_ND;
		case 0x0DE7: return Unicode_Category_ND;
		case 0x0DE8: return Unicode_Category_ND;
		case 0x0DE9: return Unicode_Category_ND;
		case 0x0DEA: return Unicode_Category_ND;
		case 0x0DEB: return Unicode_Category_ND;
		case 0x0DEC: return Unicode_Category_ND;
		case 0x0DED: return Unicode_Category_ND;
		case 0x0DEE: return Unicode_Category_ND;
		case 0x0DEF: return Unicode_Category_ND;
		case 0x0DF2: return Unicode_Category_MC;
		case 0x0DF3: return Unicode_Category_MC;
		case 0x0DF4: return Unicode_Category_PO;
		case 0x0E01: return Unicode_Category_LO;
		case 0x0E02: return Unicode_Category_LO;
		case 0x0E03: return Unicode_Category_LO;
		case 0x0E04: return Unicode_Category_LO;
		case 0x0E05: return Unicode_Category_LO;
		case 0x0E06: return Unicode_Category_LO;
		case 0x0E07: return Unicode_Category_LO;
		case 0x0E08: return Unicode_Category_LO;
		case 0x0E09: return Unicode_Category_LO;
		case 0x0E0A: return Unicode_Category_LO;
		case 0x0E0B: return Unicode_Category_LO;
		case 0x0E0C: return Unicode_Category_LO;
		case 0x0E0D: return Unicode_Category_LO;
		case 0x0E0E: return Unicode_Category_LO;
		case 0x0E0F: return Unicode_Category_LO;
		case 0x0E10: return Unicode_Category_LO;
		case 0x0E11: return Unicode_Category_LO;
		case 0x0E12: return Unicode_Category_LO;
		case 0x0E13: return Unicode_Category_LO;
		case 0x0E14: return Unicode_Category_LO;
		case 0x0E15: return Unicode_Category_LO;
		case 0x0E16: return Unicode_Category_LO;
		case 0x0E17: return Unicode_Category_LO;
		case 0x0E18: return Unicode_Category_LO;
		case 0x0E19: return Unicode_Category_LO;
		case 0x0E1A: return Unicode_Category_LO;
		case 0x0E1B: return Unicode_Category_LO;
		case 0x0E1C: return Unicode_Category_LO;
		case 0x0E1D: return Unicode_Category_LO;
		case 0x0E1E: return Unicode_Category_LO;
		case 0x0E1F: return Unicode_Category_LO;
		case 0x0E20: return Unicode_Category_LO;
		case 0x0E21: return Unicode_Category_LO;
		case 0x0E22: return Unicode_Category_LO;
		case 0x0E23: return Unicode_Category_LO;
		case 0x0E24: return Unicode_Category_LO;
		case 0x0E25: return Unicode_Category_LO;
		case 0x0E26: return Unicode_Category_LO;
		case 0x0E27: return Unicode_Category_LO;
		case 0x0E28: return Unicode_Category_LO;
		case 0x0E29: return Unicode_Category_LO;
		case 0x0E2A: return Unicode_Category_LO;
		case 0x0E2B: return Unicode_Category_LO;
		case 0x0E2C: return Unicode_Category_LO;
		case 0x0E2D: return Unicode_Category_LO;
		case 0x0E2E: return Unicode_Category_LO;
		case 0x0E2F: return Unicode_Category_LO;
		case 0x0E30: return Unicode_Category_LO;
		case 0x0E31: return Unicode_Category_MN;
		case 0x0E32: return Unicode_Category_LO;
		case 0x0E33: return Unicode_Category_LO;
		case 0x0E34: return Unicode_Category_MN;
		case 0x0E35: return Unicode_Category_MN;
		case 0x0E36: return Unicode_Category_MN;
		case 0x0E37: return Unicode_Category_MN;
		case 0x0E38: return Unicode_Category_MN;
		case 0x0E39: return Unicode_Category_MN;
		case 0x0E3A: return Unicode_Category_MN;
		case 0x0E3F: return Unicode_Category_SC;
		case 0x0E40: return Unicode_Category_LO;
		case 0x0E41: return Unicode_Category_LO;
		case 0x0E42: return Unicode_Category_LO;
		case 0x0E43: return Unicode_Category_LO;
		case 0x0E44: return Unicode_Category_LO;
		case 0x0E45: return Unicode_Category_LO;
		case 0x0E46: return Unicode_Category_LM;
		case 0x0E47: return Unicode_Category_MN;
		case 0x0E48: return Unicode_Category_MN;
		case 0x0E49: return Unicode_Category_MN;
		case 0x0E4A: return Unicode_Category_MN;
		case 0x0E4B: return Unicode_Category_MN;
		case 0x0E4C: return Unicode_Category_MN;
		case 0x0E4D: return Unicode_Category_MN;
		case 0x0E4E: return Unicode_Category_MN;
		case 0x0E4F: return Unicode_Category_PO;
		case 0x0E50: return Unicode_Category_ND;
		case 0x0E51: return Unicode_Category_ND;
		case 0x0E52: return Unicode_Category_ND;
		case 0x0E53: return Unicode_Category_ND;
		case 0x0E54: return Unicode_Category_ND;
		case 0x0E55: return Unicode_Category_ND;
		case 0x0E56: return Unicode_Category_ND;
		case 0x0E57: return Unicode_Category_ND;
		case 0x0E58: return Unicode_Category_ND;
		case 0x0E59: return Unicode_Category_ND;
		case 0x0E5A: return Unicode_Category_PO;
		case 0x0E5B: return Unicode_Category_PO;
		case 0x0E81: return Unicode_Category_LO;
		case 0x0E82: return Unicode_Category_LO;
		case 0x0E84: return Unicode_Category_LO;
		case 0x0E86: return Unicode_Category_LO;
		case 0x0E87: return Unicode_Category_LO;
		case 0x0E88: return Unicode_Category_LO;
		case 0x0E89: return Unicode_Category_LO;
		case 0x0E8A: return Unicode_Category_LO;
		case 0x0E8C: return Unicode_Category_LO;
		case 0x0E8D: return Unicode_Category_LO;
		case 0x0E8E: return Unicode_Category_LO;
		case 0x0E8F: return Unicode_Category_LO;
		case 0x0E90: return Unicode_Category_LO;
		case 0x0E91: return Unicode_Category_LO;
		case 0x0E92: return Unicode_Category_LO;
		case 0x0E93: return Unicode_Category_LO;
		case 0x0E94: return Unicode_Category_LO;
		case 0x0E95: return Unicode_Category_LO;
		case 0x0E96: return Unicode_Category_LO;
		case 0x0E97: return Unicode_Category_LO;
		case 0x0E98: return Unicode_Category_LO;
		case 0x0E99: return Unicode_Category_LO;
		case 0x0E9A: return Unicode_Category_LO;
		case 0x0E9B: return Unicode_Category_LO;
		case 0x0E9C: return Unicode_Category_LO;
		case 0x0E9D: return Unicode_Category_LO;
		case 0x0E9E: return Unicode_Category_LO;
		case 0x0E9F: return Unicode_Category_LO;
		case 0x0EA0: return Unicode_Category_LO;
		case 0x0EA1: return Unicode_Category_LO;
		case 0x0EA2: return Unicode_Category_LO;
		case 0x0EA3: return Unicode_Category_LO;
		case 0x0EA5: return Unicode_Category_LO;
		case 0x0EA7: return Unicode_Category_LO;
		case 0x0EA8: return Unicode_Category_LO;
		case 0x0EA9: return Unicode_Category_LO;
		case 0x0EAA: return Unicode_Category_LO;
		case 0x0EAB: return Unicode_Category_LO;
		case 0x0EAC: return Unicode_Category_LO;
		case 0x0EAD: return Unicode_Category_LO;
		case 0x0EAE: return Unicode_Category_LO;
		case 0x0EAF: return Unicode_Category_LO;
		case 0x0EB0: return Unicode_Category_LO;
		case 0x0EB1: return Unicode_Category_MN;
		case 0x0EB2: return Unicode_Category_LO;
		case 0x0EB3: return Unicode_Category_LO;
		case 0x0EB4: return Unicode_Category_MN;
		case 0x0EB5: return Unicode_Category_MN;
		case 0x0EB6: return Unicode_Category_MN;
		case 0x0EB7: return Unicode_Category_MN;
		case 0x0EB8: return Unicode_Category_MN;
		case 0x0EB9: return Unicode_Category_MN;
		case 0x0EBA: return Unicode_Category_MN;
		case 0x0EBB: return Unicode_Category_MN;
		case 0x0EBC: return Unicode_Category_MN;
		case 0x0EBD: return Unicode_Category_LO;
		case 0x0EC0: return Unicode_Category_LO;
		case 0x0EC1: return Unicode_Category_LO;
		case 0x0EC2: return Unicode_Category_LO;
		case 0x0EC3: return Unicode_Category_LO;
		case 0x0EC4: return Unicode_Category_LO;
		case 0x0EC6: return Unicode_Category_LM;
		case 0x0EC8: return Unicode_Category_MN;
		case 0x0EC9: return Unicode_Category_MN;
		case 0x0ECA: return Unicode_Category_MN;
		case 0x0ECB: return Unicode_Category_MN;
		case 0x0ECC: return Unicode_Category_MN;
		case 0x0ECD: return Unicode_Category_MN;
		case 0x0ED0: return Unicode_Category_ND;
		case 0x0ED1: return Unicode_Category_ND;
		case 0x0ED2: return Unicode_Category_ND;
		case 0x0ED3: return Unicode_Category_ND;
		case 0x0ED4: return Unicode_Category_ND;
		case 0x0ED5: return Unicode_Category_ND;
		case 0x0ED6: return Unicode_Category_ND;
		case 0x0ED7: return Unicode_Category_ND;
		case 0x0ED8: return Unicode_Category_ND;
		case 0x0ED9: return Unicode_Category_ND;
		case 0x0EDC: return Unicode_Category_LO;
		case 0x0EDD: return Unicode_Category_LO;
		case 0x0EDE: return Unicode_Category_LO;
		case 0x0EDF: return Unicode_Category_LO;
		case 0x0F00: return Unicode_Category_LO;
		case 0x0F01: return Unicode_Category_SO;
		case 0x0F02: return Unicode_Category_SO;
		case 0x0F03: return Unicode_Category_SO;
		case 0x0F04: return Unicode_Category_PO;
		case 0x0F05: return Unicode_Category_PO;
		case 0x0F06: return Unicode_Category_PO;
		case 0x0F07: return Unicode_Category_PO;
		case 0x0F08: return Unicode_Category_PO;
		case 0x0F09: return Unicode_Category_PO;
		case 0x0F0A: return Unicode_Category_PO;
		case 0x0F0B: return Unicode_Category_PO;
		case 0x0F0C: return Unicode_Category_PO;
		case 0x0F0D: return Unicode_Category_PO;
		case 0x0F0E: return Unicode_Category_PO;
		case 0x0F0F: return Unicode_Category_PO;
		case 0x0F10: return Unicode_Category_PO;
		case 0x0F11: return Unicode_Category_PO;
		case 0x0F12: return Unicode_Category_PO;
		case 0x0F13: return Unicode_Category_SO;
		case 0x0F14: return Unicode_Category_PO;
		case 0x0F15: return Unicode_Category_SO;
		case 0x0F16: return Unicode_Category_SO;
		case 0x0F17: return Unicode_Category_SO;
		case 0x0F18: return Unicode_Category_MN;
		case 0x0F19: return Unicode_Category_MN;
		case 0x0F1A: return Unicode_Category_SO;
		case 0x0F1B: return Unicode_Category_SO;
		case 0x0F1C: return Unicode_Category_SO;
		case 0x0F1D: return Unicode_Category_SO;
		case 0x0F1E: return Unicode_Category_SO;
		case 0x0F1F: return Unicode_Category_SO;
		case 0x0F20: return Unicode_Category_ND;
		case 0x0F21: return Unicode_Category_ND;
		case 0x0F22: return Unicode_Category_ND;
		case 0x0F23: return Unicode_Category_ND;
		case 0x0F24: return Unicode_Category_ND;
		case 0x0F25: return Unicode_Category_ND;
		case 0x0F26: return Unicode_Category_ND;
		case 0x0F27: return Unicode_Category_ND;
		case 0x0F28: return Unicode_Category_ND;
		case 0x0F29: return Unicode_Category_ND;
		case 0x0F2A: return Unicode_Category_NO;
		case 0x0F2B: return Unicode_Category_NO;
		case 0x0F2C: return Unicode_Category_NO;
		case 0x0F2D: return Unicode_Category_NO;
		case 0x0F2E: return Unicode_Category_NO;
		case 0x0F2F: return Unicode_Category_NO;
		case 0x0F30: return Unicode_Category_NO;
		case 0x0F31: return Unicode_Category_NO;
		case 0x0F32: return Unicode_Category_NO;
		case 0x0F33: return Unicode_Category_NO;
		case 0x0F34: return Unicode_Category_SO;
		case 0x0F35: return Unicode_Category_MN;
		case 0x0F36: return Unicode_Category_SO;
		case 0x0F37: return Unicode_Category_MN;
		case 0x0F38: return Unicode_Category_SO;
		case 0x0F39: return Unicode_Category_MN;
		case 0x0F3A: return Unicode_Category_PS;
		case 0x0F3B: return Unicode_Category_PE;
		case 0x0F3C: return Unicode_Category_PS;
		case 0x0F3D: return Unicode_Category_PE;
		case 0x0F3E: return Unicode_Category_MC;
		case 0x0F3F: return Unicode_Category_MC;
		case 0x0F40: return Unicode_Category_LO;
		case 0x0F41: return Unicode_Category_LO;
		case 0x0F42: return Unicode_Category_LO;
		case 0x0F43: return Unicode_Category_LO;
		case 0x0F44: return Unicode_Category_LO;
		case 0x0F45: return Unicode_Category_LO;
		case 0x0F46: return Unicode_Category_LO;
		case 0x0F47: return Unicode_Category_LO;
		case 0x0F49: return Unicode_Category_LO;
		case 0x0F4A: return Unicode_Category_LO;
		case 0x0F4B: return Unicode_Category_LO;
		case 0x0F4C: return Unicode_Category_LO;
		case 0x0F4D: return Unicode_Category_LO;
		case 0x0F4E: return Unicode_Category_LO;
		case 0x0F4F: return Unicode_Category_LO;
		case 0x0F50: return Unicode_Category_LO;
		case 0x0F51: return Unicode_Category_LO;
		case 0x0F52: return Unicode_Category_LO;
		case 0x0F53: return Unicode_Category_LO;
		case 0x0F54: return Unicode_Category_LO;
		case 0x0F55: return Unicode_Category_LO;
		case 0x0F56: return Unicode_Category_LO;
		case 0x0F57: return Unicode_Category_LO;
		case 0x0F58: return Unicode_Category_LO;
		case 0x0F59: return Unicode_Category_LO;
		case 0x0F5A: return Unicode_Category_LO;
		case 0x0F5B: return Unicode_Category_LO;
		case 0x0F5C: return Unicode_Category_LO;
		case 0x0F5D: return Unicode_Category_LO;
		case 0x0F5E: return Unicode_Category_LO;
		case 0x0F5F: return Unicode_Category_LO;
		case 0x0F60: return Unicode_Category_LO;
		case 0x0F61: return Unicode_Category_LO;
		case 0x0F62: return Unicode_Category_LO;
		case 0x0F63: return Unicode_Category_LO;
		case 0x0F64: return Unicode_Category_LO;
		case 0x0F65: return Unicode_Category_LO;
		case 0x0F66: return Unicode_Category_LO;
		case 0x0F67: return Unicode_Category_LO;
		case 0x0F68: return Unicode_Category_LO;
		case 0x0F69: return Unicode_Category_LO;
		case 0x0F6A: return Unicode_Category_LO;
		case 0x0F6B: return Unicode_Category_LO;
		case 0x0F6C: return Unicode_Category_LO;
		case 0x0F71: return Unicode_Category_MN;
		case 0x0F72: return Unicode_Category_MN;
		case 0x0F73: return Unicode_Category_MN;
		case 0x0F74: return Unicode_Category_MN;
		case 0x0F75: return Unicode_Category_MN;
		case 0x0F76: return Unicode_Category_MN;
		case 0x0F77: return Unicode_Category_MN;
		case 0x0F78: return Unicode_Category_MN;
		case 0x0F79: return Unicode_Category_MN;
		case 0x0F7A: return Unicode_Category_MN;
		case 0x0F7B: return Unicode_Category_MN;
		case 0x0F7C: return Unicode_Category_MN;
		case 0x0F7D: return Unicode_Category_MN;
		case 0x0F7E: return Unicode_Category_MN;
		case 0x0F7F: return Unicode_Category_MC;
		case 0x0F80: return Unicode_Category_MN;
		case 0x0F81: return Unicode_Category_MN;
		case 0x0F82: return Unicode_Category_MN;
		case 0x0F83: return Unicode_Category_MN;
		case 0x0F84: return Unicode_Category_MN;
		case 0x0F85: return Unicode_Category_PO;
		case 0x0F86: return Unicode_Category_MN;
		case 0x0F87: return Unicode_Category_MN;
		case 0x0F88: return Unicode_Category_LO;
		case 0x0F89: return Unicode_Category_LO;
		case 0x0F8A: return Unicode_Category_LO;
		case 0x0F8B: return Unicode_Category_LO;
		case 0x0F8C: return Unicode_Category_LO;
		case 0x0F8D: return Unicode_Category_MN;
		case 0x0F8E: return Unicode_Category_MN;
		case 0x0F8F: return Unicode_Category_MN;
		case 0x0F90: return Unicode_Category_MN;
		case 0x0F91: return Unicode_Category_MN;
		case 0x0F92: return Unicode_Category_MN;
		case 0x0F93: return Unicode_Category_MN;
		case 0x0F94: return Unicode_Category_MN;
		case 0x0F95: return Unicode_Category_MN;
		case 0x0F96: return Unicode_Category_MN;
		case 0x0F97: return Unicode_Category_MN;
		case 0x0F99: return Unicode_Category_MN;
		case 0x0F9A: return Unicode_Category_MN;
		case 0x0F9B: return Unicode_Category_MN;
		case 0x0F9C: return Unicode_Category_MN;
		case 0x0F9D: return Unicode_Category_MN;
		case 0x0F9E: return Unicode_Category_MN;
		case 0x0F9F: return Unicode_Category_MN;
		case 0x0FA0: return Unicode_Category_MN;
		case 0x0FA1: return Unicode_Category_MN;
		case 0x0FA2: return Unicode_Category_MN;
		case 0x0FA3: return Unicode_Category_MN;
		case 0x0FA4: return Unicode_Category_MN;
		case 0x0FA5: return Unicode_Category_MN;
		case 0x0FA6: return Unicode_Category_MN;
		case 0x0FA7: return Unicode_Category_MN;
		case 0x0FA8: return Unicode_Category_MN;
		case 0x0FA9: return Unicode_Category_MN;
		case 0x0FAA: return Unicode_Category_MN;
		case 0x0FAB: return Unicode_Category_MN;
		case 0x0FAC: return Unicode_Category_MN;
		case 0x0FAD: return Unicode_Category_MN;
		case 0x0FAE: return Unicode_Category_MN;
		case 0x0FAF: return Unicode_Category_MN;
		case 0x0FB0: return Unicode_Category_MN;
		case 0x0FB1: return Unicode_Category_MN;
		case 0x0FB2: return Unicode_Category_MN;
		case 0x0FB3: return Unicode_Category_MN;
		case 0x0FB4: return Unicode_Category_MN;
		case 0x0FB5: return Unicode_Category_MN;
		case 0x0FB6: return Unicode_Category_MN;
		case 0x0FB7: return Unicode_Category_MN;
		case 0x0FB8: return Unicode_Category_MN;
		case 0x0FB9: return Unicode_Category_MN;
		case 0x0FBA: return Unicode_Category_MN;
		case 0x0FBB: return Unicode_Category_MN;
		case 0x0FBC: return Unicode_Category_MN;
		case 0x0FBE: return Unicode_Category_SO;
		case 0x0FBF: return Unicode_Category_SO;
		case 0x0FC0: return Unicode_Category_SO;
		case 0x0FC1: return Unicode_Category_SO;
		case 0x0FC2: return Unicode_Category_SO;
		case 0x0FC3: return Unicode_Category_SO;
		case 0x0FC4: return Unicode_Category_SO;
		case 0x0FC5: return Unicode_Category_SO;
		case 0x0FC6: return Unicode_Category_MN;
		case 0x0FC7: return Unicode_Category_SO;
		case 0x0FC8: return Unicode_Category_SO;
		case 0x0FC9: return Unicode_Category_SO;
		case 0x0FCA: return Unicode_Category_SO;
		case 0x0FCB: return Unicode_Category_SO;
		case 0x0FCC: return Unicode_Category_SO;
		case 0x0FCE: return Unicode_Category_SO;
		case 0x0FCF: return Unicode_Category_SO;
		case 0x0FD0: return Unicode_Category_PO;
		case 0x0FD1: return Unicode_Category_PO;
		case 0x0FD2: return Unicode_Category_PO;
		case 0x0FD3: return Unicode_Category_PO;
		case 0x0FD4: return Unicode_Category_PO;
		case 0x0FD5: return Unicode_Category_SO;
		case 0x0FD6: return Unicode_Category_SO;
		case 0x0FD7: return Unicode_Category_SO;
		case 0x0FD8: return Unicode_Category_SO;
		case 0x0FD9: return Unicode_Category_PO;
		case 0x0FDA: return Unicode_Category_PO;
		case 0x1000: return Unicode_Category_LO;
		case 0x1001: return Unicode_Category_LO;
		case 0x1002: return Unicode_Category_LO;
		case 0x1003: return Unicode_Category_LO;
		case 0x1004: return Unicode_Category_LO;
		case 0x1005: return Unicode_Category_LO;
		case 0x1006: return Unicode_Category_LO;
		case 0x1007: return Unicode_Category_LO;
		case 0x1008: return Unicode_Category_LO;
		case 0x1009: return Unicode_Category_LO;
		case 0x100A: return Unicode_Category_LO;
		case 0x100B: return Unicode_Category_LO;
		case 0x100C: return Unicode_Category_LO;
		case 0x100D: return Unicode_Category_LO;
		case 0x100E: return Unicode_Category_LO;
		case 0x100F: return Unicode_Category_LO;
		case 0x1010: return Unicode_Category_LO;
		case 0x1011: return Unicode_Category_LO;
		case 0x1012: return Unicode_Category_LO;
		case 0x1013: return Unicode_Category_LO;
		case 0x1014: return Unicode_Category_LO;
		case 0x1015: return Unicode_Category_LO;
		case 0x1016: return Unicode_Category_LO;
		case 0x1017: return Unicode_Category_LO;
		case 0x1018: return Unicode_Category_LO;
		case 0x1019: return Unicode_Category_LO;
		case 0x101A: return Unicode_Category_LO;
		case 0x101B: return Unicode_Category_LO;
		case 0x101C: return Unicode_Category_LO;
		case 0x101D: return Unicode_Category_LO;
		case 0x101E: return Unicode_Category_LO;
		case 0x101F: return Unicode_Category_LO;
		case 0x1020: return Unicode_Category_LO;
		case 0x1021: return Unicode_Category_LO;
		case 0x1022: return Unicode_Category_LO;
		case 0x1023: return Unicode_Category_LO;
		case 0x1024: return Unicode_Category_LO;
		case 0x1025: return Unicode_Category_LO;
		case 0x1026: return Unicode_Category_LO;
		case 0x1027: return Unicode_Category_LO;
		case 0x1028: return Unicode_Category_LO;
		case 0x1029: return Unicode_Category_LO;
		case 0x102A: return Unicode_Category_LO;
		case 0x102B: return Unicode_Category_MC;
		case 0x102C: return Unicode_Category_MC;
		case 0x102D: return Unicode_Category_MN;
		case 0x102E: return Unicode_Category_MN;
		case 0x102F: return Unicode_Category_MN;
		case 0x1030: return Unicode_Category_MN;
		case 0x1031: return Unicode_Category_MC;
		case 0x1032: return Unicode_Category_MN;
		case 0x1033: return Unicode_Category_MN;
		case 0x1034: return Unicode_Category_MN;
		case 0x1035: return Unicode_Category_MN;
		case 0x1036: return Unicode_Category_MN;
		case 0x1037: return Unicode_Category_MN;
		case 0x1038: return Unicode_Category_MC;
		case 0x1039: return Unicode_Category_MN;
		case 0x103A: return Unicode_Category_MN;
		case 0x103B: return Unicode_Category_MC;
		case 0x103C: return Unicode_Category_MC;
		case 0x103D: return Unicode_Category_MN;
		case 0x103E: return Unicode_Category_MN;
		case 0x103F: return Unicode_Category_LO;
		case 0x1040: return Unicode_Category_ND;
		case 0x1041: return Unicode_Category_ND;
		case 0x1042: return Unicode_Category_ND;
		case 0x1043: return Unicode_Category_ND;
		case 0x1044: return Unicode_Category_ND;
		case 0x1045: return Unicode_Category_ND;
		case 0x1046: return Unicode_Category_ND;
		case 0x1047: return Unicode_Category_ND;
		case 0x1048: return Unicode_Category_ND;
		case 0x1049: return Unicode_Category_ND;
		case 0x104A: return Unicode_Category_PO;
		case 0x104B: return Unicode_Category_PO;
		case 0x104C: return Unicode_Category_PO;
		case 0x104D: return Unicode_Category_PO;
		case 0x104E: return Unicode_Category_PO;
		case 0x104F: return Unicode_Category_PO;
		case 0x1050: return Unicode_Category_LO;
		case 0x1051: return Unicode_Category_LO;
		case 0x1052: return Unicode_Category_LO;
		case 0x1053: return Unicode_Category_LO;
		case 0x1054: return Unicode_Category_LO;
		case 0x1055: return Unicode_Category_LO;
		case 0x1056: return Unicode_Category_MC;
		case 0x1057: return Unicode_Category_MC;
		case 0x1058: return Unicode_Category_MN;
		case 0x1059: return Unicode_Category_MN;
		case 0x105A: return Unicode_Category_LO;
		case 0x105B: return Unicode_Category_LO;
		case 0x105C: return Unicode_Category_LO;
		case 0x105D: return Unicode_Category_LO;
		case 0x105E: return Unicode_Category_MN;
		case 0x105F: return Unicode_Category_MN;
		case 0x1060: return Unicode_Category_MN;
		case 0x1061: return Unicode_Category_LO;
		case 0x1062: return Unicode_Category_MC;
		case 0x1063: return Unicode_Category_MC;
		case 0x1064: return Unicode_Category_MC;
		case 0x1065: return Unicode_Category_LO;
		case 0x1066: return Unicode_Category_LO;
		case 0x1067: return Unicode_Category_MC;
		case 0x1068: return Unicode_Category_MC;
		case 0x1069: return Unicode_Category_MC;
		case 0x106A: return Unicode_Category_MC;
		case 0x106B: return Unicode_Category_MC;
		case 0x106C: return Unicode_Category_MC;
		case 0x106D: return Unicode_Category_MC;
		case 0x106E: return Unicode_Category_LO;
		case 0x106F: return Unicode_Category_LO;
		case 0x1070: return Unicode_Category_LO;
		case 0x1071: return Unicode_Category_MN;
		case 0x1072: return Unicode_Category_MN;
		case 0x1073: return Unicode_Category_MN;
		case 0x1074: return Unicode_Category_MN;
		case 0x1075: return Unicode_Category_LO;
		case 0x1076: return Unicode_Category_LO;
		case 0x1077: return Unicode_Category_LO;
		case 0x1078: return Unicode_Category_LO;
		case 0x1079: return Unicode_Category_LO;
		case 0x107A: return Unicode_Category_LO;
		case 0x107B: return Unicode_Category_LO;
		case 0x107C: return Unicode_Category_LO;
		case 0x107D: return Unicode_Category_LO;
		case 0x107E: return Unicode_Category_LO;
		case 0x107F: return Unicode_Category_LO;
		case 0x1080: return Unicode_Category_LO;
		case 0x1081: return Unicode_Category_LO;
		case 0x1082: return Unicode_Category_MN;
		case 0x1083: return Unicode_Category_MC;
		case 0x1084: return Unicode_Category_MC;
		case 0x1085: return Unicode_Category_MN;
		case 0x1086: return Unicode_Category_MN;
		case 0x1087: return Unicode_Category_MC;
		case 0x1088: return Unicode_Category_MC;
		case 0x1089: return Unicode_Category_MC;
		case 0x108A: return Unicode_Category_MC;
		case 0x108B: return Unicode_Category_MC;
		case 0x108C: return Unicode_Category_MC;
		case 0x108D: return Unicode_Category_MN;
		case 0x108E: return Unicode_Category_LO;
		case 0x108F: return Unicode_Category_MC;
		case 0x1090: return Unicode_Category_ND;
		case 0x1091: return Unicode_Category_ND;
		case 0x1092: return Unicode_Category_ND;
		case 0x1093: return Unicode_Category_ND;
		case 0x1094: return Unicode_Category_ND;
		case 0x1095: return Unicode_Category_ND;
		case 0x1096: return Unicode_Category_ND;
		case 0x1097: return Unicode_Category_ND;
		case 0x1098: return Unicode_Category_ND;
		case 0x1099: return Unicode_Category_ND;
		case 0x109A: return Unicode_Category_MC;
		case 0x109B: return Unicode_Category_MC;
		case 0x109C: return Unicode_Category_MC;
		case 0x109D: return Unicode_Category_MN;
		case 0x109E: return Unicode_Category_SO;
		case 0x109F: return Unicode_Category_SO;
		case 0x10A0: return Unicode_Category_LU;
		case 0x10A1: return Unicode_Category_LU;
		case 0x10A2: return Unicode_Category_LU;
		case 0x10A3: return Unicode_Category_LU;
		case 0x10A4: return Unicode_Category_LU;
		case 0x10A5: return Unicode_Category_LU;
		case 0x10A6: return Unicode_Category_LU;
		case 0x10A7: return Unicode_Category_LU;
		case 0x10A8: return Unicode_Category_LU;
		case 0x10A9: return Unicode_Category_LU;
		case 0x10AA: return Unicode_Category_LU;
		case 0x10AB: return Unicode_Category_LU;
		case 0x10AC: return Unicode_Category_LU;
		case 0x10AD: return Unicode_Category_LU;
		case 0x10AE: return Unicode_Category_LU;
		case 0x10AF: return Unicode_Category_LU;
		case 0x10B0: return Unicode_Category_LU;
		case 0x10B1: return Unicode_Category_LU;
		case 0x10B2: return Unicode_Category_LU;
		case 0x10B3: return Unicode_Category_LU;
		case 0x10B4: return Unicode_Category_LU;
		case 0x10B5: return Unicode_Category_LU;
		case 0x10B6: return Unicode_Category_LU;
		case 0x10B7: return Unicode_Category_LU;
		case 0x10B8: return Unicode_Category_LU;
		case 0x10B9: return Unicode_Category_LU;
		case 0x10BA: return Unicode_Category_LU;
		case 0x10BB: return Unicode_Category_LU;
		case 0x10BC: return Unicode_Category_LU;
		case 0x10BD: return Unicode_Category_LU;
		case 0x10BE: return Unicode_Category_LU;
		case 0x10BF: return Unicode_Category_LU;
		case 0x10C0: return Unicode_Category_LU;
		case 0x10C1: return Unicode_Category_LU;
		case 0x10C2: return Unicode_Category_LU;
		case 0x10C3: return Unicode_Category_LU;
		case 0x10C4: return Unicode_Category_LU;
		case 0x10C5: return Unicode_Category_LU;
		case 0x10C7: return Unicode_Category_LU;
		case 0x10CD: return Unicode_Category_LU;
		case 0x10D0: return Unicode_Category_LL;
		case 0x10D1: return Unicode_Category_LL;
		case 0x10D2: return Unicode_Category_LL;
		case 0x10D3: return Unicode_Category_LL;
		case 0x10D4: return Unicode_Category_LL;
		case 0x10D5: return Unicode_Category_LL;
		case 0x10D6: return Unicode_Category_LL;
		case 0x10D7: return Unicode_Category_LL;
		case 0x10D8: return Unicode_Category_LL;
		case 0x10D9: return Unicode_Category_LL;
		case 0x10DA: return Unicode_Category_LL;
		case 0x10DB: return Unicode_Category_LL;
		case 0x10DC: return Unicode_Category_LL;
		case 0x10DD: return Unicode_Category_LL;
		case 0x10DE: return Unicode_Category_LL;
		case 0x10DF: return Unicode_Category_LL;
		case 0x10E0: return Unicode_Category_LL;
		case 0x10E1: return Unicode_Category_LL;
		case 0x10E2: return Unicode_Category_LL;
		case 0x10E3: return Unicode_Category_LL;
		case 0x10E4: return Unicode_Category_LL;
		case 0x10E5: return Unicode_Category_LL;
		case 0x10E6: return Unicode_Category_LL;
		case 0x10E7: return Unicode_Category_LL;
		case 0x10E8: return Unicode_Category_LL;
		case 0x10E9: return Unicode_Category_LL;
		case 0x10EA: return Unicode_Category_LL;
		case 0x10EB: return Unicode_Category_LL;
		case 0x10EC: return Unicode_Category_LL;
		case 0x10ED: return Unicode_Category_LL;
		case 0x10EE: return Unicode_Category_LL;
		case 0x10EF: return Unicode_Category_LL;
		case 0x10F0: return Unicode_Category_LL;
		case 0x10F1: return Unicode_Category_LL;
		case 0x10F2: return Unicode_Category_LL;
		case 0x10F3: return Unicode_Category_LL;
		case 0x10F4: return Unicode_Category_LL;
		case 0x10F5: return Unicode_Category_LL;
		case 0x10F6: return Unicode_Category_LL;
		case 0x10F7: return Unicode_Category_LL;
		case 0x10F8: return Unicode_Category_LL;
		case 0x10F9: return Unicode_Category_LL;
		case 0x10FA: return Unicode_Category_LL;
		case 0x10FB: return Unicode_Category_PO;
		case 0x10FC: return Unicode_Category_LM;
		case 0x10FD: return Unicode_Category_LL;
		case 0x10FE: return Unicode_Category_LL;
		case 0x10FF: return Unicode_Category_LL;
		case 0x1100: return Unicode_Category_LO;
		case 0x1101: return Unicode_Category_LO;
		case 0x1102: return Unicode_Category_LO;
		case 0x1103: return Unicode_Category_LO;
		case 0x1104: return Unicode_Category_LO;
		case 0x1105: return Unicode_Category_LO;
		case 0x1106: return Unicode_Category_LO;
		case 0x1107: return Unicode_Category_LO;
		case 0x1108: return Unicode_Category_LO;
		case 0x1109: return Unicode_Category_LO;
		case 0x110A: return Unicode_Category_LO;
		case 0x110B: return Unicode_Category_LO;
		case 0x110C: return Unicode_Category_LO;
		case 0x110D: return Unicode_Category_LO;
		case 0x110E: return Unicode_Category_LO;
		case 0x110F: return Unicode_Category_LO;
		case 0x1110: return Unicode_Category_LO;
		case 0x1111: return Unicode_Category_LO;
		case 0x1112: return Unicode_Category_LO;
		case 0x1113: return Unicode_Category_LO;
		case 0x1114: return Unicode_Category_LO;
		case 0x1115: return Unicode_Category_LO;
		case 0x1116: return Unicode_Category_LO;
		case 0x1117: return Unicode_Category_LO;
		case 0x1118: return Unicode_Category_LO;
		case 0x1119: return Unicode_Category_LO;
		case 0x111A: return Unicode_Category_LO;
		case 0x111B: return Unicode_Category_LO;
		case 0x111C: return Unicode_Category_LO;
		case 0x111D: return Unicode_Category_LO;
		case 0x111E: return Unicode_Category_LO;
		case 0x111F: return Unicode_Category_LO;
		case 0x1120: return Unicode_Category_LO;
		case 0x1121: return Unicode_Category_LO;
		case 0x1122: return Unicode_Category_LO;
		case 0x1123: return Unicode_Category_LO;
		case 0x1124: return Unicode_Category_LO;
		case 0x1125: return Unicode_Category_LO;
		case 0x1126: return Unicode_Category_LO;
		case 0x1127: return Unicode_Category_LO;
		case 0x1128: return Unicode_Category_LO;
		case 0x1129: return Unicode_Category_LO;
		case 0x112A: return Unicode_Category_LO;
		case 0x112B: return Unicode_Category_LO;
		case 0x112C: return Unicode_Category_LO;
		case 0x112D: return Unicode_Category_LO;
		case 0x112E: return Unicode_Category_LO;
		case 0x112F: return Unicode_Category_LO;
		case 0x1130: return Unicode_Category_LO;
		case 0x1131: return Unicode_Category_LO;
		case 0x1132: return Unicode_Category_LO;
		case 0x1133: return Unicode_Category_LO;
		case 0x1134: return Unicode_Category_LO;
		case 0x1135: return Unicode_Category_LO;
		case 0x1136: return Unicode_Category_LO;
		case 0x1137: return Unicode_Category_LO;
		case 0x1138: return Unicode_Category_LO;
		case 0x1139: return Unicode_Category_LO;
		case 0x113A: return Unicode_Category_LO;
		case 0x113B: return Unicode_Category_LO;
		case 0x113C: return Unicode_Category_LO;
		case 0x113D: return Unicode_Category_LO;
		case 0x113E: return Unicode_Category_LO;
		case 0x113F: return Unicode_Category_LO;
		case 0x1140: return Unicode_Category_LO;
		case 0x1141: return Unicode_Category_LO;
		case 0x1142: return Unicode_Category_LO;
		case 0x1143: return Unicode_Category_LO;
		case 0x1144: return Unicode_Category_LO;
		case 0x1145: return Unicode_Category_LO;
		case 0x1146: return Unicode_Category_LO;
		case 0x1147: return Unicode_Category_LO;
		case 0x1148: return Unicode_Category_LO;
		case 0x1149: return Unicode_Category_LO;
		case 0x114A: return Unicode_Category_LO;
		case 0x114B: return Unicode_Category_LO;
		case 0x114C: return Unicode_Category_LO;
		case 0x114D: return Unicode_Category_LO;
		case 0x114E: return Unicode_Category_LO;
		case 0x114F: return Unicode_Category_LO;
		case 0x1150: return Unicode_Category_LO;
		case 0x1151: return Unicode_Category_LO;
		case 0x1152: return Unicode_Category_LO;
		case 0x1153: return Unicode_Category_LO;
		case 0x1154: return Unicode_Category_LO;
		case 0x1155: return Unicode_Category_LO;
		case 0x1156: return Unicode_Category_LO;
		case 0x1157: return Unicode_Category_LO;
		case 0x1158: return Unicode_Category_LO;
		case 0x1159: return Unicode_Category_LO;
		case 0x115A: return Unicode_Category_LO;
		case 0x115B: return Unicode_Category_LO;
		case 0x115C: return Unicode_Category_LO;
		case 0x115D: return Unicode_Category_LO;
		case 0x115E: return Unicode_Category_LO;
		case 0x115F: return Unicode_Category_LO;
		case 0x1160: return Unicode_Category_LO;
		case 0x1161: return Unicode_Category_LO;
		case 0x1162: return Unicode_Category_LO;
		case 0x1163: return Unicode_Category_LO;
		case 0x1164: return Unicode_Category_LO;
		case 0x1165: return Unicode_Category_LO;
		case 0x1166: return Unicode_Category_LO;
		case 0x1167: return Unicode_Category_LO;
		case 0x1168: return Unicode_Category_LO;
		case 0x1169: return Unicode_Category_LO;
		case 0x116A: return Unicode_Category_LO;
		case 0x116B: return Unicode_Category_LO;
		case 0x116C: return Unicode_Category_LO;
		case 0x116D: return Unicode_Category_LO;
		case 0x116E: return Unicode_Category_LO;
		case 0x116F: return Unicode_Category_LO;
		case 0x1170: return Unicode_Category_LO;
		case 0x1171: return Unicode_Category_LO;
		case 0x1172: return Unicode_Category_LO;
		case 0x1173: return Unicode_Category_LO;
		case 0x1174: return Unicode_Category_LO;
		case 0x1175: return Unicode_Category_LO;
		case 0x1176: return Unicode_Category_LO;
		case 0x1177: return Unicode_Category_LO;
		case 0x1178: return Unicode_Category_LO;
		case 0x1179: return Unicode_Category_LO;
		case 0x117A: return Unicode_Category_LO;
		case 0x117B: return Unicode_Category_LO;
		case 0x117C: return Unicode_Category_LO;
		case 0x117D: return Unicode_Category_LO;
		case 0x117E: return Unicode_Category_LO;
		case 0x117F: return Unicode_Category_LO;
		case 0x1180: return Unicode_Category_LO;
		case 0x1181: return Unicode_Category_LO;
		case 0x1182: return Unicode_Category_LO;
		case 0x1183: return Unicode_Category_LO;
		case 0x1184: return Unicode_Category_LO;
		case 0x1185: return Unicode_Category_LO;
		case 0x1186: return Unicode_Category_LO;
		case 0x1187: return Unicode_Category_LO;
		case 0x1188: return Unicode_Category_LO;
		case 0x1189: return Unicode_Category_LO;
		case 0x118A: return Unicode_Category_LO;
		case 0x118B: return Unicode_Category_LO;
		case 0x118C: return Unicode_Category_LO;
		case 0x118D: return Unicode_Category_LO;
		case 0x118E: return Unicode_Category_LO;
		case 0x118F: return Unicode_Category_LO;
		case 0x1190: return Unicode_Category_LO;
		case 0x1191: return Unicode_Category_LO;
		case 0x1192: return Unicode_Category_LO;
		case 0x1193: return Unicode_Category_LO;
		case 0x1194: return Unicode_Category_LO;
		case 0x1195: return Unicode_Category_LO;
		case 0x1196: return Unicode_Category_LO;
		case 0x1197: return Unicode_Category_LO;
		case 0x1198: return Unicode_Category_LO;
		case 0x1199: return Unicode_Category_LO;
		case 0x119A: return Unicode_Category_LO;
		case 0x119B: return Unicode_Category_LO;
		case 0x119C: return Unicode_Category_LO;
		case 0x119D: return Unicode_Category_LO;
		case 0x119E: return Unicode_Category_LO;
		case 0x119F: return Unicode_Category_LO;
		case 0x11A0: return Unicode_Category_LO;
		case 0x11A1: return Unicode_Category_LO;
		case 0x11A2: return Unicode_Category_LO;
		case 0x11A3: return Unicode_Category_LO;
		case 0x11A4: return Unicode_Category_LO;
		case 0x11A5: return Unicode_Category_LO;
		case 0x11A6: return Unicode_Category_LO;
		case 0x11A7: return Unicode_Category_LO;
		case 0x11A8: return Unicode_Category_LO;
		case 0x11A9: return Unicode_Category_LO;
		case 0x11AA: return Unicode_Category_LO;
		case 0x11AB: return Unicode_Category_LO;
		case 0x11AC: return Unicode_Category_LO;
		case 0x11AD: return Unicode_Category_LO;
		case 0x11AE: return Unicode_Category_LO;
		case 0x11AF: return Unicode_Category_LO;
		case 0x11B0: return Unicode_Category_LO;
		case 0x11B1: return Unicode_Category_LO;
		case 0x11B2: return Unicode_Category_LO;
		case 0x11B3: return Unicode_Category_LO;
		case 0x11B4: return Unicode_Category_LO;
		case 0x11B5: return Unicode_Category_LO;
		case 0x11B6: return Unicode_Category_LO;
		case 0x11B7: return Unicode_Category_LO;
		case 0x11B8: return Unicode_Category_LO;
		case 0x11B9: return Unicode_Category_LO;
		case 0x11BA: return Unicode_Category_LO;
		case 0x11BB: return Unicode_Category_LO;
		case 0x11BC: return Unicode_Category_LO;
		case 0x11BD: return Unicode_Category_LO;
		case 0x11BE: return Unicode_Category_LO;
		case 0x11BF: return Unicode_Category_LO;
		case 0x11C0: return Unicode_Category_LO;
		case 0x11C1: return Unicode_Category_LO;
		case 0x11C2: return Unicode_Category_LO;
		case 0x11C3: return Unicode_Category_LO;
		case 0x11C4: return Unicode_Category_LO;
		case 0x11C5: return Unicode_Category_LO;
		case 0x11C6: return Unicode_Category_LO;
		case 0x11C7: return Unicode_Category_LO;
		case 0x11C8: return Unicode_Category_LO;
		case 0x11C9: return Unicode_Category_LO;
		case 0x11CA: return Unicode_Category_LO;
		case 0x11CB: return Unicode_Category_LO;
		case 0x11CC: return Unicode_Category_LO;
		case 0x11CD: return Unicode_Category_LO;
		case 0x11CE: return Unicode_Category_LO;
		case 0x11CF: return Unicode_Category_LO;
		case 0x11D0: return Unicode_Category_LO;
		case 0x11D1: return Unicode_Category_LO;
		case 0x11D2: return Unicode_Category_LO;
		case 0x11D3: return Unicode_Category_LO;
		case 0x11D4: return Unicode_Category_LO;
		case 0x11D5: return Unicode_Category_LO;
		case 0x11D6: return Unicode_Category_LO;
		case 0x11D7: return Unicode_Category_LO;
		case 0x11D8: return Unicode_Category_LO;
		case 0x11D9: return Unicode_Category_LO;
		case 0x11DA: return Unicode_Category_LO;
		case 0x11DB: return Unicode_Category_LO;
		case 0x11DC: return Unicode_Category_LO;
		case 0x11DD: return Unicode_Category_LO;
		case 0x11DE: return Unicode_Category_LO;
		case 0x11DF: return Unicode_Category_LO;
		case 0x11E0: return Unicode_Category_LO;
		case 0x11E1: return Unicode_Category_LO;
		case 0x11E2: return Unicode_Category_LO;
		case 0x11E3: return Unicode_Category_LO;
		case 0x11E4: return Unicode_Category_LO;
		case 0x11E5: return Unicode_Category_LO;
		case 0x11E6: return Unicode_Category_LO;
		case 0x11E7: return Unicode_Category_LO;
		case 0x11E8: return Unicode_Category_LO;
		case 0x11E9: return Unicode_Category_LO;
		case 0x11EA: return Unicode_Category_LO;
		case 0x11EB: return Unicode_Category_LO;
		case 0x11EC: return Unicode_Category_LO;
		case 0x11ED: return Unicode_Category_LO;
		case 0x11EE: return Unicode_Category_LO;
		case 0x11EF: return Unicode_Category_LO;
		case 0x11F0: return Unicode_Category_LO;
		case 0x11F1: return Unicode_Category_LO;
		case 0x11F2: return Unicode_Category_LO;
		case 0x11F3: return Unicode_Category_LO;
		case 0x11F4: return Unicode_Category_LO;
		case 0x11F5: return Unicode_Category_LO;
		case 0x11F6: return Unicode_Category_LO;
		case 0x11F7: return Unicode_Category_LO;
		case 0x11F8: return Unicode_Category_LO;
		case 0x11F9: return Unicode_Category_LO;
		case 0x11FA: return Unicode_Category_LO;
		case 0x11FB: return Unicode_Category_LO;
		case 0x11FC: return Unicode_Category_LO;
		case 0x11FD: return Unicode_Category_LO;
		case 0x11FE: return Unicode_Category_LO;
		case 0x11FF: return Unicode_Category_LO;
		case 0x1200: return Unicode_Category_LO;
		case 0x1201: return Unicode_Category_LO;
		case 0x1202: return Unicode_Category_LO;
		case 0x1203: return Unicode_Category_LO;
		case 0x1204: return Unicode_Category_LO;
		case 0x1205: return Unicode_Category_LO;
		case 0x1206: return Unicode_Category_LO;
		case 0x1207: return Unicode_Category_LO;
		case 0x1208: return Unicode_Category_LO;
		case 0x1209: return Unicode_Category_LO;
		case 0x120A: return Unicode_Category_LO;
		case 0x120B: return Unicode_Category_LO;
		case 0x120C: return Unicode_Category_LO;
		case 0x120D: return Unicode_Category_LO;
		case 0x120E: return Unicode_Category_LO;
		case 0x120F: return Unicode_Category_LO;
		case 0x1210: return Unicode_Category_LO;
		case 0x1211: return Unicode_Category_LO;
		case 0x1212: return Unicode_Category_LO;
		case 0x1213: return Unicode_Category_LO;
		case 0x1214: return Unicode_Category_LO;
		case 0x1215: return Unicode_Category_LO;
		case 0x1216: return Unicode_Category_LO;
		case 0x1217: return Unicode_Category_LO;
		case 0x1218: return Unicode_Category_LO;
		case 0x1219: return Unicode_Category_LO;
		case 0x121A: return Unicode_Category_LO;
		case 0x121B: return Unicode_Category_LO;
		case 0x121C: return Unicode_Category_LO;
		case 0x121D: return Unicode_Category_LO;
		case 0x121E: return Unicode_Category_LO;
		case 0x121F: return Unicode_Category_LO;
		case 0x1220: return Unicode_Category_LO;
		case 0x1221: return Unicode_Category_LO;
		case 0x1222: return Unicode_Category_LO;
		case 0x1223: return Unicode_Category_LO;
		case 0x1224: return Unicode_Category_LO;
		case 0x1225: return Unicode_Category_LO;
		case 0x1226: return Unicode_Category_LO;
		case 0x1227: return Unicode_Category_LO;
		case 0x1228: return Unicode_Category_LO;
		case 0x1229: return Unicode_Category_LO;
		case 0x122A: return Unicode_Category_LO;
		case 0x122B: return Unicode_Category_LO;
		case 0x122C: return Unicode_Category_LO;
		case 0x122D: return Unicode_Category_LO;
		case 0x122E: return Unicode_Category_LO;
		case 0x122F: return Unicode_Category_LO;
		case 0x1230: return Unicode_Category_LO;
		case 0x1231: return Unicode_Category_LO;
		case 0x1232: return Unicode_Category_LO;
		case 0x1233: return Unicode_Category_LO;
		case 0x1234: return Unicode_Category_LO;
		case 0x1235: return Unicode_Category_LO;
		case 0x1236: return Unicode_Category_LO;
		case 0x1237: return Unicode_Category_LO;
		case 0x1238: return Unicode_Category_LO;
		case 0x1239: return Unicode_Category_LO;
		case 0x123A: return Unicode_Category_LO;
		case 0x123B: return Unicode_Category_LO;
		case 0x123C: return Unicode_Category_LO;
		case 0x123D: return Unicode_Category_LO;
		case 0x123E: return Unicode_Category_LO;
		case 0x123F: return Unicode_Category_LO;
		case 0x1240: return Unicode_Category_LO;
		case 0x1241: return Unicode_Category_LO;
		case 0x1242: return Unicode_Category_LO;
		case 0x1243: return Unicode_Category_LO;
		case 0x1244: return Unicode_Category_LO;
		case 0x1245: return Unicode_Category_LO;
		case 0x1246: return Unicode_Category_LO;
		case 0x1247: return Unicode_Category_LO;
		case 0x1248: return Unicode_Category_LO;
		case 0x124A: return Unicode_Category_LO;
		case 0x124B: return Unicode_Category_LO;
		case 0x124C: return Unicode_Category_LO;
		case 0x124D: return Unicode_Category_LO;
		case 0x1250: return Unicode_Category_LO;
		case 0x1251: return Unicode_Category_LO;
		case 0x1252: return Unicode_Category_LO;
		case 0x1253: return Unicode_Category_LO;
		case 0x1254: return Unicode_Category_LO;
		case 0x1255: return Unicode_Category_LO;
		case 0x1256: return Unicode_Category_LO;
		case 0x1258: return Unicode_Category_LO;
		case 0x125A: return Unicode_Category_LO;
		case 0x125B: return Unicode_Category_LO;
		case 0x125C: return Unicode_Category_LO;
		case 0x125D: return Unicode_Category_LO;
		case 0x1260: return Unicode_Category_LO;
		case 0x1261: return Unicode_Category_LO;
		case 0x1262: return Unicode_Category_LO;
		case 0x1263: return Unicode_Category_LO;
		case 0x1264: return Unicode_Category_LO;
		case 0x1265: return Unicode_Category_LO;
		case 0x1266: return Unicode_Category_LO;
		case 0x1267: return Unicode_Category_LO;
		case 0x1268: return Unicode_Category_LO;
		case 0x1269: return Unicode_Category_LO;
		case 0x126A: return Unicode_Category_LO;
		case 0x126B: return Unicode_Category_LO;
		case 0x126C: return Unicode_Category_LO;
		case 0x126D: return Unicode_Category_LO;
		case 0x126E: return Unicode_Category_LO;
		case 0x126F: return Unicode_Category_LO;
		case 0x1270: return Unicode_Category_LO;
		case 0x1271: return Unicode_Category_LO;
		case 0x1272: return Unicode_Category_LO;
		case 0x1273: return Unicode_Category_LO;
		case 0x1274: return Unicode_Category_LO;
		case 0x1275: return Unicode_Category_LO;
		case 0x1276: return Unicode_Category_LO;
		case 0x1277: return Unicode_Category_LO;
		case 0x1278: return Unicode_Category_LO;
		case 0x1279: return Unicode_Category_LO;
		case 0x127A: return Unicode_Category_LO;
		case 0x127B: return Unicode_Category_LO;
		case 0x127C: return Unicode_Category_LO;
		case 0x127D: return Unicode_Category_LO;
		case 0x127E: return Unicode_Category_LO;
		case 0x127F: return Unicode_Category_LO;
		case 0x1280: return Unicode_Category_LO;
		case 0x1281: return Unicode_Category_LO;
		case 0x1282: return Unicode_Category_LO;
		case 0x1283: return Unicode_Category_LO;
		case 0x1284: return Unicode_Category_LO;
		case 0x1285: return Unicode_Category_LO;
		case 0x1286: return Unicode_Category_LO;
		case 0x1287: return Unicode_Category_LO;
		case 0x1288: return Unicode_Category_LO;
		case 0x128A: return Unicode_Category_LO;
		case 0x128B: return Unicode_Category_LO;
		case 0x128C: return Unicode_Category_LO;
		case 0x128D: return Unicode_Category_LO;
		case 0x1290: return Unicode_Category_LO;
		case 0x1291: return Unicode_Category_LO;
		case 0x1292: return Unicode_Category_LO;
		case 0x1293: return Unicode_Category_LO;
		case 0x1294: return Unicode_Category_LO;
		case 0x1295: return Unicode_Category_LO;
		case 0x1296: return Unicode_Category_LO;
		case 0x1297: return Unicode_Category_LO;
		case 0x1298: return Unicode_Category_LO;
		case 0x1299: return Unicode_Category_LO;
		case 0x129A: return Unicode_Category_LO;
		case 0x129B: return Unicode_Category_LO;
		case 0x129C: return Unicode_Category_LO;
		case 0x129D: return Unicode_Category_LO;
		case 0x129E: return Unicode_Category_LO;
		case 0x129F: return Unicode_Category_LO;
		case 0x12A0: return Unicode_Category_LO;
		case 0x12A1: return Unicode_Category_LO;
		case 0x12A2: return Unicode_Category_LO;
		case 0x12A3: return Unicode_Category_LO;
		case 0x12A4: return Unicode_Category_LO;
		case 0x12A5: return Unicode_Category_LO;
		case 0x12A6: return Unicode_Category_LO;
		case 0x12A7: return Unicode_Category_LO;
		case 0x12A8: return Unicode_Category_LO;
		case 0x12A9: return Unicode_Category_LO;
		case 0x12AA: return Unicode_Category_LO;
		case 0x12AB: return Unicode_Category_LO;
		case 0x12AC: return Unicode_Category_LO;
		case 0x12AD: return Unicode_Category_LO;
		case 0x12AE: return Unicode_Category_LO;
		case 0x12AF: return Unicode_Category_LO;
		case 0x12B0: return Unicode_Category_LO;
		case 0x12B2: return Unicode_Category_LO;
		case 0x12B3: return Unicode_Category_LO;
		case 0x12B4: return Unicode_Category_LO;
		case 0x12B5: return Unicode_Category_LO;
		case 0x12B8: return Unicode_Category_LO;
		case 0x12B9: return Unicode_Category_LO;
		case 0x12BA: return Unicode_Category_LO;
		case 0x12BB: return Unicode_Category_LO;
		case 0x12BC: return Unicode_Category_LO;
		case 0x12BD: return Unicode_Category_LO;
		case 0x12BE: return Unicode_Category_LO;
		case 0x12C0: return Unicode_Category_LO;
		case 0x12C2: return Unicode_Category_LO;
		case 0x12C3: return Unicode_Category_LO;
		case 0x12C4: return Unicode_Category_LO;
		case 0x12C5: return Unicode_Category_LO;
		case 0x12C8: return Unicode_Category_LO;
		case 0x12C9: return Unicode_Category_LO;
		case 0x12CA: return Unicode_Category_LO;
		case 0x12CB: return Unicode_Category_LO;
		case 0x12CC: return Unicode_Category_LO;
		case 0x12CD: return Unicode_Category_LO;
		case 0x12CE: return Unicode_Category_LO;
		case 0x12CF: return Unicode_Category_LO;
		case 0x12D0: return Unicode_Category_LO;
		case 0x12D1: return Unicode_Category_LO;
		case 0x12D2: return Unicode_Category_LO;
		case 0x12D3: return Unicode_Category_LO;
		case 0x12D4: return Unicode_Category_LO;
		case 0x12D5: return Unicode_Category_LO;
		case 0x12D6: return Unicode_Category_LO;
		case 0x12D8: return Unicode_Category_LO;
		case 0x12D9: return Unicode_Category_LO;
		case 0x12DA: return Unicode_Category_LO;
		case 0x12DB: return Unicode_Category_LO;
		case 0x12DC: return Unicode_Category_LO;
		case 0x12DD: return Unicode_Category_LO;
		case 0x12DE: return Unicode_Category_LO;
		case 0x12DF: return Unicode_Category_LO;
		case 0x12E0: return Unicode_Category_LO;
		case 0x12E1: return Unicode_Category_LO;
		case 0x12E2: return Unicode_Category_LO;
		case 0x12E3: return Unicode_Category_LO;
		case 0x12E4: return Unicode_Category_LO;
		case 0x12E5: return Unicode_Category_LO;
		case 0x12E6: return Unicode_Category_LO;
		case 0x12E7: return Unicode_Category_LO;
		case 0x12E8: return Unicode_Category_LO;
		case 0x12E9: return Unicode_Category_LO;
		case 0x12EA: return Unicode_Category_LO;
		case 0x12EB: return Unicode_Category_LO;
		case 0x12EC: return Unicode_Category_LO;
		case 0x12ED: return Unicode_Category_LO;
		case 0x12EE: return Unicode_Category_LO;
		case 0x12EF: return Unicode_Category_LO;
		case 0x12F0: return Unicode_Category_LO;
		case 0x12F1: return Unicode_Category_LO;
		case 0x12F2: return Unicode_Category_LO;
		case 0x12F3: return Unicode_Category_LO;
		case 0x12F4: return Unicode_Category_LO;
		case 0x12F5: return Unicode_Category_LO;
		case 0x12F6: return Unicode_Category_LO;
		case 0x12F7: return Unicode_Category_LO;
		case 0x12F8: return Unicode_Category_LO;
		case 0x12F9: return Unicode_Category_LO;
		case 0x12FA: return Unicode_Category_LO;
		case 0x12FB: return Unicode_Category_LO;
		case 0x12FC: return Unicode_Category_LO;
		case 0x12FD: return Unicode_Category_LO;
		case 0x12FE: return Unicode_Category_LO;
		case 0x12FF: return Unicode_Category_LO;
		case 0x1300: return Unicode_Category_LO;
		case 0x1301: return Unicode_Category_LO;
		case 0x1302: return Unicode_Category_LO;
		case 0x1303: return Unicode_Category_LO;
		case 0x1304: return Unicode_Category_LO;
		case 0x1305: return Unicode_Category_LO;
		case 0x1306: return Unicode_Category_LO;
		case 0x1307: return Unicode_Category_LO;
		case 0x1308: return Unicode_Category_LO;
		case 0x1309: return Unicode_Category_LO;
		case 0x130A: return Unicode_Category_LO;
		case 0x130B: return Unicode_Category_LO;
		case 0x130C: return Unicode_Category_LO;
		case 0x130D: return Unicode_Category_LO;
		case 0x130E: return Unicode_Category_LO;
		case 0x130F: return Unicode_Category_LO;
		case 0x1310: return Unicode_Category_LO;
		case 0x1312: return Unicode_Category_LO;
		case 0x1313: return Unicode_Category_LO;
		case 0x1314: return Unicode_Category_LO;
		case 0x1315: return Unicode_Category_LO;
		case 0x1318: return Unicode_Category_LO;
		case 0x1319: return Unicode_Category_LO;
		case 0x131A: return Unicode_Category_LO;
		case 0x131B: return Unicode_Category_LO;
		case 0x131C: return Unicode_Category_LO;
		case 0x131D: return Unicode_Category_LO;
		case 0x131E: return Unicode_Category_LO;
		case 0x131F: return Unicode_Category_LO;
		case 0x1320: return Unicode_Category_LO;
		case 0x1321: return Unicode_Category_LO;
		case 0x1322: return Unicode_Category_LO;
		case 0x1323: return Unicode_Category_LO;
		case 0x1324: return Unicode_Category_LO;
		case 0x1325: return Unicode_Category_LO;
		case 0x1326: return Unicode_Category_LO;
		case 0x1327: return Unicode_Category_LO;
		case 0x1328: return Unicode_Category_LO;
		case 0x1329: return Unicode_Category_LO;
		case 0x132A: return Unicode_Category_LO;
		case 0x132B: return Unicode_Category_LO;
		case 0x132C: return Unicode_Category_LO;
		case 0x132D: return Unicode_Category_LO;
		case 0x132E: return Unicode_Category_LO;
		case 0x132F: return Unicode_Category_LO;
		case 0x1330: return Unicode_Category_LO;
		case 0x1331: return Unicode_Category_LO;
		case 0x1332: return Unicode_Category_LO;
		case 0x1333: return Unicode_Category_LO;
		case 0x1334: return Unicode_Category_LO;
		case 0x1335: return Unicode_Category_LO;
		case 0x1336: return Unicode_Category_LO;
		case 0x1337: return Unicode_Category_LO;
		case 0x1338: return Unicode_Category_LO;
		case 0x1339: return Unicode_Category_LO;
		case 0x133A: return Unicode_Category_LO;
		case 0x133B: return Unicode_Category_LO;
		case 0x133C: return Unicode_Category_LO;
		case 0x133D: return Unicode_Category_LO;
		case 0x133E: return Unicode_Category_LO;
		case 0x133F: return Unicode_Category_LO;
		case 0x1340: return Unicode_Category_LO;
		case 0x1341: return Unicode_Category_LO;
		case 0x1342: return Unicode_Category_LO;
		case 0x1343: return Unicode_Category_LO;
		case 0x1344: return Unicode_Category_LO;
		case 0x1345: return Unicode_Category_LO;
		case 0x1346: return Unicode_Category_LO;
		case 0x1347: return Unicode_Category_LO;
		case 0x1348: return Unicode_Category_LO;
		case 0x1349: return Unicode_Category_LO;
		case 0x134A: return Unicode_Category_LO;
		case 0x134B: return Unicode_Category_LO;
		case 0x134C: return Unicode_Category_LO;
		case 0x134D: return Unicode_Category_LO;
		case 0x134E: return Unicode_Category_LO;
		case 0x134F: return Unicode_Category_LO;
		case 0x1350: return Unicode_Category_LO;
		case 0x1351: return Unicode_Category_LO;
		case 0x1352: return Unicode_Category_LO;
		case 0x1353: return Unicode_Category_LO;
		case 0x1354: return Unicode_Category_LO;
		case 0x1355: return Unicode_Category_LO;
		case 0x1356: return Unicode_Category_LO;
		case 0x1357: return Unicode_Category_LO;
		case 0x1358: return Unicode_Category_LO;
		case 0x1359: return Unicode_Category_LO;
		case 0x135A: return Unicode_Category_LO;
		case 0x135D: return Unicode_Category_MN;
		case 0x135E: return Unicode_Category_MN;
		case 0x135F: return Unicode_Category_MN;
		case 0x1360: return Unicode_Category_PO;
		case 0x1361: return Unicode_Category_PO;
		case 0x1362: return Unicode_Category_PO;
		case 0x1363: return Unicode_Category_PO;
		case 0x1364: return Unicode_Category_PO;
		case 0x1365: return Unicode_Category_PO;
		case 0x1366: return Unicode_Category_PO;
		case 0x1367: return Unicode_Category_PO;
		case 0x1368: return Unicode_Category_PO;
		case 0x1369: return Unicode_Category_NO;
		case 0x136A: return Unicode_Category_NO;
		case 0x136B: return Unicode_Category_NO;
		case 0x136C: return Unicode_Category_NO;
		case 0x136D: return Unicode_Category_NO;
		case 0x136E: return Unicode_Category_NO;
		case 0x136F: return Unicode_Category_NO;
		case 0x1370: return Unicode_Category_NO;
		case 0x1371: return Unicode_Category_NO;
		case 0x1372: return Unicode_Category_NO;
		case 0x1373: return Unicode_Category_NO;
		case 0x1374: return Unicode_Category_NO;
		case 0x1375: return Unicode_Category_NO;
		case 0x1376: return Unicode_Category_NO;
		case 0x1377: return Unicode_Category_NO;
		case 0x1378: return Unicode_Category_NO;
		case 0x1379: return Unicode_Category_NO;
		case 0x137A: return Unicode_Category_NO;
		case 0x137B: return Unicode_Category_NO;
		case 0x137C: return Unicode_Category_NO;
		case 0x1380: return Unicode_Category_LO;
		case 0x1381: return Unicode_Category_LO;
		case 0x1382: return Unicode_Category_LO;
		case 0x1383: return Unicode_Category_LO;
		case 0x1384: return Unicode_Category_LO;
		case 0x1385: return Unicode_Category_LO;
		case 0x1386: return Unicode_Category_LO;
		case 0x1387: return Unicode_Category_LO;
		case 0x1388: return Unicode_Category_LO;
		case 0x1389: return Unicode_Category_LO;
		case 0x138A: return Unicode_Category_LO;
		case 0x138B: return Unicode_Category_LO;
		case 0x138C: return Unicode_Category_LO;
		case 0x138D: return Unicode_Category_LO;
		case 0x138E: return Unicode_Category_LO;
		case 0x138F: return Unicode_Category_LO;
		case 0x1390: return Unicode_Category_SO;
		case 0x1391: return Unicode_Category_SO;
		case 0x1392: return Unicode_Category_SO;
		case 0x1393: return Unicode_Category_SO;
		case 0x1394: return Unicode_Category_SO;
		case 0x1395: return Unicode_Category_SO;
		case 0x1396: return Unicode_Category_SO;
		case 0x1397: return Unicode_Category_SO;
		case 0x1398: return Unicode_Category_SO;
		case 0x1399: return Unicode_Category_SO;
		case 0x13A0: return Unicode_Category_LU;
		case 0x13A1: return Unicode_Category_LU;
		case 0x13A2: return Unicode_Category_LU;
		case 0x13A3: return Unicode_Category_LU;
		case 0x13A4: return Unicode_Category_LU;
		case 0x13A5: return Unicode_Category_LU;
		case 0x13A6: return Unicode_Category_LU;
		case 0x13A7: return Unicode_Category_LU;
		case 0x13A8: return Unicode_Category_LU;
		case 0x13A9: return Unicode_Category_LU;
		case 0x13AA: return Unicode_Category_LU;
		case 0x13AB: return Unicode_Category_LU;
		case 0x13AC: return Unicode_Category_LU;
		case 0x13AD: return Unicode_Category_LU;
		case 0x13AE: return Unicode_Category_LU;
		case 0x13AF: return Unicode_Category_LU;
		case 0x13B0: return Unicode_Category_LU;
		case 0x13B1: return Unicode_Category_LU;
		case 0x13B2: return Unicode_Category_LU;
		case 0x13B3: return Unicode_Category_LU;
		case 0x13B4: return Unicode_Category_LU;
		case 0x13B5: return Unicode_Category_LU;
		case 0x13B6: return Unicode_Category_LU;
		case 0x13B7: return Unicode_Category_LU;
		case 0x13B8: return Unicode_Category_LU;
		case 0x13B9: return Unicode_Category_LU;
		case 0x13BA: return Unicode_Category_LU;
		case 0x13BB: return Unicode_Category_LU;
		case 0x13BC: return Unicode_Category_LU;
		case 0x13BD: return Unicode_Category_LU;
		case 0x13BE: return Unicode_Category_LU;
		case 0x13BF: return Unicode_Category_LU;
		case 0x13C0: return Unicode_Category_LU;
		case 0x13C1: return Unicode_Category_LU;
		case 0x13C2: return Unicode_Category_LU;
		case 0x13C3: return Unicode_Category_LU;
		case 0x13C4: return Unicode_Category_LU;
		case 0x13C5: return Unicode_Category_LU;
		case 0x13C6: return Unicode_Category_LU;
		case 0x13C7: return Unicode_Category_LU;
		case 0x13C8: return Unicode_Category_LU;
		case 0x13C9: return Unicode_Category_LU;
		case 0x13CA: return Unicode_Category_LU;
		case 0x13CB: return Unicode_Category_LU;
		case 0x13CC: return Unicode_Category_LU;
		case 0x13CD: return Unicode_Category_LU;
		case 0x13CE: return Unicode_Category_LU;
		case 0x13CF: return Unicode_Category_LU;
		case 0x13D0: return Unicode_Category_LU;
		case 0x13D1: return Unicode_Category_LU;
		case 0x13D2: return Unicode_Category_LU;
		case 0x13D3: return Unicode_Category_LU;
		case 0x13D4: return Unicode_Category_LU;
		case 0x13D5: return Unicode_Category_LU;
		case 0x13D6: return Unicode_Category_LU;
		case 0x13D7: return Unicode_Category_LU;
		case 0x13D8: return Unicode_Category_LU;
		case 0x13D9: return Unicode_Category_LU;
		case 0x13DA: return Unicode_Category_LU;
		case 0x13DB: return Unicode_Category_LU;
		case 0x13DC: return Unicode_Category_LU;
		case 0x13DD: return Unicode_Category_LU;
		case 0x13DE: return Unicode_Category_LU;
		case 0x13DF: return Unicode_Category_LU;
		case 0x13E0: return Unicode_Category_LU;
		case 0x13E1: return Unicode_Category_LU;
		case 0x13E2: return Unicode_Category_LU;
		case 0x13E3: return Unicode_Category_LU;
		case 0x13E4: return Unicode_Category_LU;
		case 0x13E5: return Unicode_Category_LU;
		case 0x13E6: return Unicode_Category_LU;
		case 0x13E7: return Unicode_Category_LU;
		case 0x13E8: return Unicode_Category_LU;
		case 0x13E9: return Unicode_Category_LU;
		case 0x13EA: return Unicode_Category_LU;
		case 0x13EB: return Unicode_Category_LU;
		case 0x13EC: return Unicode_Category_LU;
		case 0x13ED: return Unicode_Category_LU;
		case 0x13EE: return Unicode_Category_LU;
		case 0x13EF: return Unicode_Category_LU;
		case 0x13F0: return Unicode_Category_LU;
		case 0x13F1: return Unicode_Category_LU;
		case 0x13F2: return Unicode_Category_LU;
		case 0x13F3: return Unicode_Category_LU;
		case 0x13F4: return Unicode_Category_LU;
		case 0x13F5: return Unicode_Category_LU;
		case 0x13F8: return Unicode_Category_LL;
		case 0x13F9: return Unicode_Category_LL;
		case 0x13FA: return Unicode_Category_LL;
		case 0x13FB: return Unicode_Category_LL;
		case 0x13FC: return Unicode_Category_LL;
		case 0x13FD: return Unicode_Category_LL;
		case 0x1400: return Unicode_Category_PD;
		case 0x1401: return Unicode_Category_LO;
		case 0x1402: return Unicode_Category_LO;
		case 0x1403: return Unicode_Category_LO;
		case 0x1404: return Unicode_Category_LO;
		case 0x1405: return Unicode_Category_LO;
		case 0x1406: return Unicode_Category_LO;
		case 0x1407: return Unicode_Category_LO;
		case 0x1408: return Unicode_Category_LO;
		case 0x1409: return Unicode_Category_LO;
		case 0x140A: return Unicode_Category_LO;
		case 0x140B: return Unicode_Category_LO;
		case 0x140C: return Unicode_Category_LO;
		case 0x140D: return Unicode_Category_LO;
		case 0x140E: return Unicode_Category_LO;
		case 0x140F: return Unicode_Category_LO;
		case 0x1410: return Unicode_Category_LO;
		case 0x1411: return Unicode_Category_LO;
		case 0x1412: return Unicode_Category_LO;
		case 0x1413: return Unicode_Category_LO;
		case 0x1414: return Unicode_Category_LO;
		case 0x1415: return Unicode_Category_LO;
		case 0x1416: return Unicode_Category_LO;
		case 0x1417: return Unicode_Category_LO;
		case 0x1418: return Unicode_Category_LO;
		case 0x1419: return Unicode_Category_LO;
		case 0x141A: return Unicode_Category_LO;
		case 0x141B: return Unicode_Category_LO;
		case 0x141C: return Unicode_Category_LO;
		case 0x141D: return Unicode_Category_LO;
		case 0x141E: return Unicode_Category_LO;
		case 0x141F: return Unicode_Category_LO;
		case 0x1420: return Unicode_Category_LO;
		case 0x1421: return Unicode_Category_LO;
		case 0x1422: return Unicode_Category_LO;
		case 0x1423: return Unicode_Category_LO;
		case 0x1424: return Unicode_Category_LO;
		case 0x1425: return Unicode_Category_LO;
		case 0x1426: return Unicode_Category_LO;
		case 0x1427: return Unicode_Category_LO;
		case 0x1428: return Unicode_Category_LO;
		case 0x1429: return Unicode_Category_LO;
		case 0x142A: return Unicode_Category_LO;
		case 0x142B: return Unicode_Category_LO;
		case 0x142C: return Unicode_Category_LO;
		case 0x142D: return Unicode_Category_LO;
		case 0x142E: return Unicode_Category_LO;
		case 0x142F: return Unicode_Category_LO;
		case 0x1430: return Unicode_Category_LO;
		case 0x1431: return Unicode_Category_LO;
		case 0x1432: return Unicode_Category_LO;
		case 0x1433: return Unicode_Category_LO;
		case 0x1434: return Unicode_Category_LO;
		case 0x1435: return Unicode_Category_LO;
		case 0x1436: return Unicode_Category_LO;
		case 0x1437: return Unicode_Category_LO;
		case 0x1438: return Unicode_Category_LO;
		case 0x1439: return Unicode_Category_LO;
		case 0x143A: return Unicode_Category_LO;
		case 0x143B: return Unicode_Category_LO;
		case 0x143C: return Unicode_Category_LO;
		case 0x143D: return Unicode_Category_LO;
		case 0x143E: return Unicode_Category_LO;
		case 0x143F: return Unicode_Category_LO;
		case 0x1440: return Unicode_Category_LO;
		case 0x1441: return Unicode_Category_LO;
		case 0x1442: return Unicode_Category_LO;
		case 0x1443: return Unicode_Category_LO;
		case 0x1444: return Unicode_Category_LO;
		case 0x1445: return Unicode_Category_LO;
		case 0x1446: return Unicode_Category_LO;
		case 0x1447: return Unicode_Category_LO;
		case 0x1448: return Unicode_Category_LO;
		case 0x1449: return Unicode_Category_LO;
		case 0x144A: return Unicode_Category_LO;
		case 0x144B: return Unicode_Category_LO;
		case 0x144C: return Unicode_Category_LO;
		case 0x144D: return Unicode_Category_LO;
		case 0x144E: return Unicode_Category_LO;
		case 0x144F: return Unicode_Category_LO;
		case 0x1450: return Unicode_Category_LO;
		case 0x1451: return Unicode_Category_LO;
		case 0x1452: return Unicode_Category_LO;
		case 0x1453: return Unicode_Category_LO;
		case 0x1454: return Unicode_Category_LO;
		case 0x1455: return Unicode_Category_LO;
		case 0x1456: return Unicode_Category_LO;
		case 0x1457: return Unicode_Category_LO;
		case 0x1458: return Unicode_Category_LO;
		case 0x1459: return Unicode_Category_LO;
		case 0x145A: return Unicode_Category_LO;
		case 0x145B: return Unicode_Category_LO;
		case 0x145C: return Unicode_Category_LO;
		case 0x145D: return Unicode_Category_LO;
		case 0x145E: return Unicode_Category_LO;
		case 0x145F: return Unicode_Category_LO;
		case 0x1460: return Unicode_Category_LO;
		case 0x1461: return Unicode_Category_LO;
		case 0x1462: return Unicode_Category_LO;
		case 0x1463: return Unicode_Category_LO;
		case 0x1464: return Unicode_Category_LO;
		case 0x1465: return Unicode_Category_LO;
		case 0x1466: return Unicode_Category_LO;
		case 0x1467: return Unicode_Category_LO;
		case 0x1468: return Unicode_Category_LO;
		case 0x1469: return Unicode_Category_LO;
		case 0x146A: return Unicode_Category_LO;
		case 0x146B: return Unicode_Category_LO;
		case 0x146C: return Unicode_Category_LO;
		case 0x146D: return Unicode_Category_LO;
		case 0x146E: return Unicode_Category_LO;
		case 0x146F: return Unicode_Category_LO;
		case 0x1470: return Unicode_Category_LO;
		case 0x1471: return Unicode_Category_LO;
		case 0x1472: return Unicode_Category_LO;
		case 0x1473: return Unicode_Category_LO;
		case 0x1474: return Unicode_Category_LO;
		case 0x1475: return Unicode_Category_LO;
		case 0x1476: return Unicode_Category_LO;
		case 0x1477: return Unicode_Category_LO;
		case 0x1478: return Unicode_Category_LO;
		case 0x1479: return Unicode_Category_LO;
		case 0x147A: return Unicode_Category_LO;
		case 0x147B: return Unicode_Category_LO;
		case 0x147C: return Unicode_Category_LO;
		case 0x147D: return Unicode_Category_LO;
		case 0x147E: return Unicode_Category_LO;
		case 0x147F: return Unicode_Category_LO;
		case 0x1480: return Unicode_Category_LO;
		case 0x1481: return Unicode_Category_LO;
		case 0x1482: return Unicode_Category_LO;
		case 0x1483: return Unicode_Category_LO;
		case 0x1484: return Unicode_Category_LO;
		case 0x1485: return Unicode_Category_LO;
		case 0x1486: return Unicode_Category_LO;
		case 0x1487: return Unicode_Category_LO;
		case 0x1488: return Unicode_Category_LO;
		case 0x1489: return Unicode_Category_LO;
		case 0x148A: return Unicode_Category_LO;
		case 0x148B: return Unicode_Category_LO;
		case 0x148C: return Unicode_Category_LO;
		case 0x148D: return Unicode_Category_LO;
		case 0x148E: return Unicode_Category_LO;
		case 0x148F: return Unicode_Category_LO;
		case 0x1490: return Unicode_Category_LO;
		case 0x1491: return Unicode_Category_LO;
		case 0x1492: return Unicode_Category_LO;
		case 0x1493: return Unicode_Category_LO;
		case 0x1494: return Unicode_Category_LO;
		case 0x1495: return Unicode_Category_LO;
		case 0x1496: return Unicode_Category_LO;
		case 0x1497: return Unicode_Category_LO;
		case 0x1498: return Unicode_Category_LO;
		case 0x1499: return Unicode_Category_LO;
		case 0x149A: return Unicode_Category_LO;
		case 0x149B: return Unicode_Category_LO;
		case 0x149C: return Unicode_Category_LO;
		case 0x149D: return Unicode_Category_LO;
		case 0x149E: return Unicode_Category_LO;
		case 0x149F: return Unicode_Category_LO;
		case 0x14A0: return Unicode_Category_LO;
		case 0x14A1: return Unicode_Category_LO;
		case 0x14A2: return Unicode_Category_LO;
		case 0x14A3: return Unicode_Category_LO;
		case 0x14A4: return Unicode_Category_LO;
		case 0x14A5: return Unicode_Category_LO;
		case 0x14A6: return Unicode_Category_LO;
		case 0x14A7: return Unicode_Category_LO;
		case 0x14A8: return Unicode_Category_LO;
		case 0x14A9: return Unicode_Category_LO;
		case 0x14AA: return Unicode_Category_LO;
		case 0x14AB: return Unicode_Category_LO;
		case 0x14AC: return Unicode_Category_LO;
		case 0x14AD: return Unicode_Category_LO;
		case 0x14AE: return Unicode_Category_LO;
		case 0x14AF: return Unicode_Category_LO;
		case 0x14B0: return Unicode_Category_LO;
		case 0x14B1: return Unicode_Category_LO;
		case 0x14B2: return Unicode_Category_LO;
		case 0x14B3: return Unicode_Category_LO;
		case 0x14B4: return Unicode_Category_LO;
		case 0x14B5: return Unicode_Category_LO;
		case 0x14B6: return Unicode_Category_LO;
		case 0x14B7: return Unicode_Category_LO;
		case 0x14B8: return Unicode_Category_LO;
		case 0x14B9: return Unicode_Category_LO;
		case 0x14BA: return Unicode_Category_LO;
		case 0x14BB: return Unicode_Category_LO;
		case 0x14BC: return Unicode_Category_LO;
		case 0x14BD: return Unicode_Category_LO;
		case 0x14BE: return Unicode_Category_LO;
		case 0x14BF: return Unicode_Category_LO;
		case 0x14C0: return Unicode_Category_LO;
		case 0x14C1: return Unicode_Category_LO;
		case 0x14C2: return Unicode_Category_LO;
		case 0x14C3: return Unicode_Category_LO;
		case 0x14C4: return Unicode_Category_LO;
		case 0x14C5: return Unicode_Category_LO;
		case 0x14C6: return Unicode_Category_LO;
		case 0x14C7: return Unicode_Category_LO;
		case 0x14C8: return Unicode_Category_LO;
		case 0x14C9: return Unicode_Category_LO;
		case 0x14CA: return Unicode_Category_LO;
		case 0x14CB: return Unicode_Category_LO;
		case 0x14CC: return Unicode_Category_LO;
		case 0x14CD: return Unicode_Category_LO;
		case 0x14CE: return Unicode_Category_LO;
		case 0x14CF: return Unicode_Category_LO;
		case 0x14D0: return Unicode_Category_LO;
		case 0x14D1: return Unicode_Category_LO;
		case 0x14D2: return Unicode_Category_LO;
		case 0x14D3: return Unicode_Category_LO;
		case 0x14D4: return Unicode_Category_LO;
		case 0x14D5: return Unicode_Category_LO;
		case 0x14D6: return Unicode_Category_LO;
		case 0x14D7: return Unicode_Category_LO;
		case 0x14D8: return Unicode_Category_LO;
		case 0x14D9: return Unicode_Category_LO;
		case 0x14DA: return Unicode_Category_LO;
		case 0x14DB: return Unicode_Category_LO;
		case 0x14DC: return Unicode_Category_LO;
		case 0x14DD: return Unicode_Category_LO;
		case 0x14DE: return Unicode_Category_LO;
		case 0x14DF: return Unicode_Category_LO;
		case 0x14E0: return Unicode_Category_LO;
		case 0x14E1: return Unicode_Category_LO;
		case 0x14E2: return Unicode_Category_LO;
		case 0x14E3: return Unicode_Category_LO;
		case 0x14E4: return Unicode_Category_LO;
		case 0x14E5: return Unicode_Category_LO;
		case 0x14E6: return Unicode_Category_LO;
		case 0x14E7: return Unicode_Category_LO;
		case 0x14E8: return Unicode_Category_LO;
		case 0x14E9: return Unicode_Category_LO;
		case 0x14EA: return Unicode_Category_LO;
		case 0x14EB: return Unicode_Category_LO;
		case 0x14EC: return Unicode_Category_LO;
		case 0x14ED: return Unicode_Category_LO;
		case 0x14EE: return Unicode_Category_LO;
		case 0x14EF: return Unicode_Category_LO;
		case 0x14F0: return Unicode_Category_LO;
		case 0x14F1: return Unicode_Category_LO;
		case 0x14F2: return Unicode_Category_LO;
		case 0x14F3: return Unicode_Category_LO;
		case 0x14F4: return Unicode_Category_LO;
		case 0x14F5: return Unicode_Category_LO;
		case 0x14F6: return Unicode_Category_LO;
		case 0x14F7: return Unicode_Category_LO;
		case 0x14F8: return Unicode_Category_LO;
		case 0x14F9: return Unicode_Category_LO;
		case 0x14FA: return Unicode_Category_LO;
		case 0x14FB: return Unicode_Category_LO;
		case 0x14FC: return Unicode_Category_LO;
		case 0x14FD: return Unicode_Category_LO;
		case 0x14FE: return Unicode_Category_LO;
		case 0x14FF: return Unicode_Category_LO;
		case 0x1500: return Unicode_Category_LO;
		case 0x1501: return Unicode_Category_LO;
		case 0x1502: return Unicode_Category_LO;
		case 0x1503: return Unicode_Category_LO;
		case 0x1504: return Unicode_Category_LO;
		case 0x1505: return Unicode_Category_LO;
		case 0x1506: return Unicode_Category_LO;
		case 0x1507: return Unicode_Category_LO;
		case 0x1508: return Unicode_Category_LO;
		case 0x1509: return Unicode_Category_LO;
		case 0x150A: return Unicode_Category_LO;
		case 0x150B: return Unicode_Category_LO;
		case 0x150C: return Unicode_Category_LO;
		case 0x150D: return Unicode_Category_LO;
		case 0x150E: return Unicode_Category_LO;
		case 0x150F: return Unicode_Category_LO;
		case 0x1510: return Unicode_Category_LO;
		case 0x1511: return Unicode_Category_LO;
		case 0x1512: return Unicode_Category_LO;
		case 0x1513: return Unicode_Category_LO;
		case 0x1514: return Unicode_Category_LO;
		case 0x1515: return Unicode_Category_LO;
		case 0x1516: return Unicode_Category_LO;
		case 0x1517: return Unicode_Category_LO;
		case 0x1518: return Unicode_Category_LO;
		case 0x1519: return Unicode_Category_LO;
		case 0x151A: return Unicode_Category_LO;
		case 0x151B: return Unicode_Category_LO;
		case 0x151C: return Unicode_Category_LO;
		case 0x151D: return Unicode_Category_LO;
		case 0x151E: return Unicode_Category_LO;
		case 0x151F: return Unicode_Category_LO;
		case 0x1520: return Unicode_Category_LO;
		case 0x1521: return Unicode_Category_LO;
		case 0x1522: return Unicode_Category_LO;
		case 0x1523: return Unicode_Category_LO;
		case 0x1524: return Unicode_Category_LO;
		case 0x1525: return Unicode_Category_LO;
		case 0x1526: return Unicode_Category_LO;
		case 0x1527: return Unicode_Category_LO;
		case 0x1528: return Unicode_Category_LO;
		case 0x1529: return Unicode_Category_LO;
		case 0x152A: return Unicode_Category_LO;
		case 0x152B: return Unicode_Category_LO;
		case 0x152C: return Unicode_Category_LO;
		case 0x152D: return Unicode_Category_LO;
		case 0x152E: return Unicode_Category_LO;
		case 0x152F: return Unicode_Category_LO;
		case 0x1530: return Unicode_Category_LO;
		case 0x1531: return Unicode_Category_LO;
		case 0x1532: return Unicode_Category_LO;
		case 0x1533: return Unicode_Category_LO;
		case 0x1534: return Unicode_Category_LO;
		case 0x1535: return Unicode_Category_LO;
		case 0x1536: return Unicode_Category_LO;
		case 0x1537: return Unicode_Category_LO;
		case 0x1538: return Unicode_Category_LO;
		case 0x1539: return Unicode_Category_LO;
		case 0x153A: return Unicode_Category_LO;
		case 0x153B: return Unicode_Category_LO;
		case 0x153C: return Unicode_Category_LO;
		case 0x153D: return Unicode_Category_LO;
		case 0x153E: return Unicode_Category_LO;
		case 0x153F: return Unicode_Category_LO;
		case 0x1540: return Unicode_Category_LO;
		case 0x1541: return Unicode_Category_LO;
		case 0x1542: return Unicode_Category_LO;
		case 0x1543: return Unicode_Category_LO;
		case 0x1544: return Unicode_Category_LO;
		case 0x1545: return Unicode_Category_LO;
		case 0x1546: return Unicode_Category_LO;
		case 0x1547: return Unicode_Category_LO;
		case 0x1548: return Unicode_Category_LO;
		case 0x1549: return Unicode_Category_LO;
		case 0x154A: return Unicode_Category_LO;
		case 0x154B: return Unicode_Category_LO;
		case 0x154C: return Unicode_Category_LO;
		case 0x154D: return Unicode_Category_LO;
		case 0x154E: return Unicode_Category_LO;
		case 0x154F: return Unicode_Category_LO;
		case 0x1550: return Unicode_Category_LO;
		case 0x1551: return Unicode_Category_LO;
		case 0x1552: return Unicode_Category_LO;
		case 0x1553: return Unicode_Category_LO;
		case 0x1554: return Unicode_Category_LO;
		case 0x1555: return Unicode_Category_LO;
		case 0x1556: return Unicode_Category_LO;
		case 0x1557: return Unicode_Category_LO;
		case 0x1558: return Unicode_Category_LO;
		case 0x1559: return Unicode_Category_LO;
		case 0x155A: return Unicode_Category_LO;
		case 0x155B: return Unicode_Category_LO;
		case 0x155C: return Unicode_Category_LO;
		case 0x155D: return Unicode_Category_LO;
		case 0x155E: return Unicode_Category_LO;
		case 0x155F: return Unicode_Category_LO;
		case 0x1560: return Unicode_Category_LO;
		case 0x1561: return Unicode_Category_LO;
		case 0x1562: return Unicode_Category_LO;
		case 0x1563: return Unicode_Category_LO;
		case 0x1564: return Unicode_Category_LO;
		case 0x1565: return Unicode_Category_LO;
		case 0x1566: return Unicode_Category_LO;
		case 0x1567: return Unicode_Category_LO;
		case 0x1568: return Unicode_Category_LO;
		case 0x1569: return Unicode_Category_LO;
		case 0x156A: return Unicode_Category_LO;
		case 0x156B: return Unicode_Category_LO;
		case 0x156C: return Unicode_Category_LO;
		case 0x156D: return Unicode_Category_LO;
		case 0x156E: return Unicode_Category_LO;
		case 0x156F: return Unicode_Category_LO;
		case 0x1570: return Unicode_Category_LO;
		case 0x1571: return Unicode_Category_LO;
		case 0x1572: return Unicode_Category_LO;
		case 0x1573: return Unicode_Category_LO;
		case 0x1574: return Unicode_Category_LO;
		case 0x1575: return Unicode_Category_LO;
		case 0x1576: return Unicode_Category_LO;
		case 0x1577: return Unicode_Category_LO;
		case 0x1578: return Unicode_Category_LO;
		case 0x1579: return Unicode_Category_LO;
		case 0x157A: return Unicode_Category_LO;
		case 0x157B: return Unicode_Category_LO;
		case 0x157C: return Unicode_Category_LO;
		case 0x157D: return Unicode_Category_LO;
		case 0x157E: return Unicode_Category_LO;
		case 0x157F: return Unicode_Category_LO;
		case 0x1580: return Unicode_Category_LO;
		case 0x1581: return Unicode_Category_LO;
		case 0x1582: return Unicode_Category_LO;
		case 0x1583: return Unicode_Category_LO;
		case 0x1584: return Unicode_Category_LO;
		case 0x1585: return Unicode_Category_LO;
		case 0x1586: return Unicode_Category_LO;
		case 0x1587: return Unicode_Category_LO;
		case 0x1588: return Unicode_Category_LO;
		case 0x1589: return Unicode_Category_LO;
		case 0x158A: return Unicode_Category_LO;
		case 0x158B: return Unicode_Category_LO;
		case 0x158C: return Unicode_Category_LO;
		case 0x158D: return Unicode_Category_LO;
		case 0x158E: return Unicode_Category_LO;
		case 0x158F: return Unicode_Category_LO;
		case 0x1590: return Unicode_Category_LO;
		case 0x1591: return Unicode_Category_LO;
		case 0x1592: return Unicode_Category_LO;
		case 0x1593: return Unicode_Category_LO;
		case 0x1594: return Unicode_Category_LO;
		case 0x1595: return Unicode_Category_LO;
		case 0x1596: return Unicode_Category_LO;
		case 0x1597: return Unicode_Category_LO;
		case 0x1598: return Unicode_Category_LO;
		case 0x1599: return Unicode_Category_LO;
		case 0x159A: return Unicode_Category_LO;
		case 0x159B: return Unicode_Category_LO;
		case 0x159C: return Unicode_Category_LO;
		case 0x159D: return Unicode_Category_LO;
		case 0x159E: return Unicode_Category_LO;
		case 0x159F: return Unicode_Category_LO;
		case 0x15A0: return Unicode_Category_LO;
		case 0x15A1: return Unicode_Category_LO;
		case 0x15A2: return Unicode_Category_LO;
		case 0x15A3: return Unicode_Category_LO;
		case 0x15A4: return Unicode_Category_LO;
		case 0x15A5: return Unicode_Category_LO;
		case 0x15A6: return Unicode_Category_LO;
		case 0x15A7: return Unicode_Category_LO;
		case 0x15A8: return Unicode_Category_LO;
		case 0x15A9: return Unicode_Category_LO;
		case 0x15AA: return Unicode_Category_LO;
		case 0x15AB: return Unicode_Category_LO;
		case 0x15AC: return Unicode_Category_LO;
		case 0x15AD: return Unicode_Category_LO;
		case 0x15AE: return Unicode_Category_LO;
		case 0x15AF: return Unicode_Category_LO;
		case 0x15B0: return Unicode_Category_LO;
		case 0x15B1: return Unicode_Category_LO;
		case 0x15B2: return Unicode_Category_LO;
		case 0x15B3: return Unicode_Category_LO;
		case 0x15B4: return Unicode_Category_LO;
		case 0x15B5: return Unicode_Category_LO;
		case 0x15B6: return Unicode_Category_LO;
		case 0x15B7: return Unicode_Category_LO;
		case 0x15B8: return Unicode_Category_LO;
		case 0x15B9: return Unicode_Category_LO;
		case 0x15BA: return Unicode_Category_LO;
		case 0x15BB: return Unicode_Category_LO;
		case 0x15BC: return Unicode_Category_LO;
		case 0x15BD: return Unicode_Category_LO;
		case 0x15BE: return Unicode_Category_LO;
		case 0x15BF: return Unicode_Category_LO;
		case 0x15C0: return Unicode_Category_LO;
		case 0x15C1: return Unicode_Category_LO;
		case 0x15C2: return Unicode_Category_LO;
		case 0x15C3: return Unicode_Category_LO;
		case 0x15C4: return Unicode_Category_LO;
		case 0x15C5: return Unicode_Category_LO;
		case 0x15C6: return Unicode_Category_LO;
		case 0x15C7: return Unicode_Category_LO;
		case 0x15C8: return Unicode_Category_LO;
		case 0x15C9: return Unicode_Category_LO;
		case 0x15CA: return Unicode_Category_LO;
		case 0x15CB: return Unicode_Category_LO;
		case 0x15CC: return Unicode_Category_LO;
		case 0x15CD: return Unicode_Category_LO;
		case 0x15CE: return Unicode_Category_LO;
		case 0x15CF: return Unicode_Category_LO;
		case 0x15D0: return Unicode_Category_LO;
		case 0x15D1: return Unicode_Category_LO;
		case 0x15D2: return Unicode_Category_LO;
		case 0x15D3: return Unicode_Category_LO;
		case 0x15D4: return Unicode_Category_LO;
		case 0x15D5: return Unicode_Category_LO;
		case 0x15D6: return Unicode_Category_LO;
		case 0x15D7: return Unicode_Category_LO;
		case 0x15D8: return Unicode_Category_LO;
		case 0x15D9: return Unicode_Category_LO;
		case 0x15DA: return Unicode_Category_LO;
		case 0x15DB: return Unicode_Category_LO;
		case 0x15DC: return Unicode_Category_LO;
		case 0x15DD: return Unicode_Category_LO;
		case 0x15DE: return Unicode_Category_LO;
		case 0x15DF: return Unicode_Category_LO;
		case 0x15E0: return Unicode_Category_LO;
		case 0x15E1: return Unicode_Category_LO;
		case 0x15E2: return Unicode_Category_LO;
		case 0x15E3: return Unicode_Category_LO;
		case 0x15E4: return Unicode_Category_LO;
		case 0x15E5: return Unicode_Category_LO;
		case 0x15E6: return Unicode_Category_LO;
		case 0x15E7: return Unicode_Category_LO;
		case 0x15E8: return Unicode_Category_LO;
		case 0x15E9: return Unicode_Category_LO;
		case 0x15EA: return Unicode_Category_LO;
		case 0x15EB: return Unicode_Category_LO;
		case 0x15EC: return Unicode_Category_LO;
		case 0x15ED: return Unicode_Category_LO;
		case 0x15EE: return Unicode_Category_LO;
		case 0x15EF: return Unicode_Category_LO;
		case 0x15F0: return Unicode_Category_LO;
		case 0x15F1: return Unicode_Category_LO;
		case 0x15F2: return Unicode_Category_LO;
		case 0x15F3: return Unicode_Category_LO;
		case 0x15F4: return Unicode_Category_LO;
		case 0x15F5: return Unicode_Category_LO;
		case 0x15F6: return Unicode_Category_LO;
		case 0x15F7: return Unicode_Category_LO;
		case 0x15F8: return Unicode_Category_LO;
		case 0x15F9: return Unicode_Category_LO;
		case 0x15FA: return Unicode_Category_LO;
		case 0x15FB: return Unicode_Category_LO;
		case 0x15FC: return Unicode_Category_LO;
		case 0x15FD: return Unicode_Category_LO;
		case 0x15FE: return Unicode_Category_LO;
		case 0x15FF: return Unicode_Category_LO;
		case 0x1600: return Unicode_Category_LO;
		case 0x1601: return Unicode_Category_LO;
		case 0x1602: return Unicode_Category_LO;
		case 0x1603: return Unicode_Category_LO;
		case 0x1604: return Unicode_Category_LO;
		case 0x1605: return Unicode_Category_LO;
		case 0x1606: return Unicode_Category_LO;
		case 0x1607: return Unicode_Category_LO;
		case 0x1608: return Unicode_Category_LO;
		case 0x1609: return Unicode_Category_LO;
		case 0x160A: return Unicode_Category_LO;
		case 0x160B: return Unicode_Category_LO;
		case 0x160C: return Unicode_Category_LO;
		case 0x160D: return Unicode_Category_LO;
		case 0x160E: return Unicode_Category_LO;
		case 0x160F: return Unicode_Category_LO;
		case 0x1610: return Unicode_Category_LO;
		case 0x1611: return Unicode_Category_LO;
		case 0x1612: return Unicode_Category_LO;
		case 0x1613: return Unicode_Category_LO;
		case 0x1614: return Unicode_Category_LO;
		case 0x1615: return Unicode_Category_LO;
		case 0x1616: return Unicode_Category_LO;
		case 0x1617: return Unicode_Category_LO;
		case 0x1618: return Unicode_Category_LO;
		case 0x1619: return Unicode_Category_LO;
		case 0x161A: return Unicode_Category_LO;
		case 0x161B: return Unicode_Category_LO;
		case 0x161C: return Unicode_Category_LO;
		case 0x161D: return Unicode_Category_LO;
		case 0x161E: return Unicode_Category_LO;
		case 0x161F: return Unicode_Category_LO;
		case 0x1620: return Unicode_Category_LO;
		case 0x1621: return Unicode_Category_LO;
		case 0x1622: return Unicode_Category_LO;
		case 0x1623: return Unicode_Category_LO;
		case 0x1624: return Unicode_Category_LO;
		case 0x1625: return Unicode_Category_LO;
		case 0x1626: return Unicode_Category_LO;
		case 0x1627: return Unicode_Category_LO;
		case 0x1628: return Unicode_Category_LO;
		case 0x1629: return Unicode_Category_LO;
		case 0x162A: return Unicode_Category_LO;
		case 0x162B: return Unicode_Category_LO;
		case 0x162C: return Unicode_Category_LO;
		case 0x162D: return Unicode_Category_LO;
		case 0x162E: return Unicode_Category_LO;
		case 0x162F: return Unicode_Category_LO;
		case 0x1630: return Unicode_Category_LO;
		case 0x1631: return Unicode_Category_LO;
		case 0x1632: return Unicode_Category_LO;
		case 0x1633: return Unicode_Category_LO;
		case 0x1634: return Unicode_Category_LO;
		case 0x1635: return Unicode_Category_LO;
		case 0x1636: return Unicode_Category_LO;
		case 0x1637: return Unicode_Category_LO;
		case 0x1638: return Unicode_Category_LO;
		case 0x1639: return Unicode_Category_LO;
		case 0x163A: return Unicode_Category_LO;
		case 0x163B: return Unicode_Category_LO;
		case 0x163C: return Unicode_Category_LO;
		case 0x163D: return Unicode_Category_LO;
		case 0x163E: return Unicode_Category_LO;
		case 0x163F: return Unicode_Category_LO;
		case 0x1640: return Unicode_Category_LO;
		case 0x1641: return Unicode_Category_LO;
		case 0x1642: return Unicode_Category_LO;
		case 0x1643: return Unicode_Category_LO;
		case 0x1644: return Unicode_Category_LO;
		case 0x1645: return Unicode_Category_LO;
		case 0x1646: return Unicode_Category_LO;
		case 0x1647: return Unicode_Category_LO;
		case 0x1648: return Unicode_Category_LO;
		case 0x1649: return Unicode_Category_LO;
		case 0x164A: return Unicode_Category_LO;
		case 0x164B: return Unicode_Category_LO;
		case 0x164C: return Unicode_Category_LO;
		case 0x164D: return Unicode_Category_LO;
		case 0x164E: return Unicode_Category_LO;
		case 0x164F: return Unicode_Category_LO;
		case 0x1650: return Unicode_Category_LO;
		case 0x1651: return Unicode_Category_LO;
		case 0x1652: return Unicode_Category_LO;
		case 0x1653: return Unicode_Category_LO;
		case 0x1654: return Unicode_Category_LO;
		case 0x1655: return Unicode_Category_LO;
		case 0x1656: return Unicode_Category_LO;
		case 0x1657: return Unicode_Category_LO;
		case 0x1658: return Unicode_Category_LO;
		case 0x1659: return Unicode_Category_LO;
		case 0x165A: return Unicode_Category_LO;
		case 0x165B: return Unicode_Category_LO;
		case 0x165C: return Unicode_Category_LO;
		case 0x165D: return Unicode_Category_LO;
		case 0x165E: return Unicode_Category_LO;
		case 0x165F: return Unicode_Category_LO;
		case 0x1660: return Unicode_Category_LO;
		case 0x1661: return Unicode_Category_LO;
		case 0x1662: return Unicode_Category_LO;
		case 0x1663: return Unicode_Category_LO;
		case 0x1664: return Unicode_Category_LO;
		case 0x1665: return Unicode_Category_LO;
		case 0x1666: return Unicode_Category_LO;
		case 0x1667: return Unicode_Category_LO;
		case 0x1668: return Unicode_Category_LO;
		case 0x1669: return Unicode_Category_LO;
		case 0x166A: return Unicode_Category_LO;
		case 0x166B: return Unicode_Category_LO;
		case 0x166C: return Unicode_Category_LO;
		case 0x166D: return Unicode_Category_SO;
		case 0x166E: return Unicode_Category_PO;
		case 0x166F: return Unicode_Category_LO;
		case 0x1670: return Unicode_Category_LO;
		case 0x1671: return Unicode_Category_LO;
		case 0x1672: return Unicode_Category_LO;
		case 0x1673: return Unicode_Category_LO;
		case 0x1674: return Unicode_Category_LO;
		case 0x1675: return Unicode_Category_LO;
		case 0x1676: return Unicode_Category_LO;
		case 0x1677: return Unicode_Category_LO;
		case 0x1678: return Unicode_Category_LO;
		case 0x1679: return Unicode_Category_LO;
		case 0x167A: return Unicode_Category_LO;
		case 0x167B: return Unicode_Category_LO;
		case 0x167C: return Unicode_Category_LO;
		case 0x167D: return Unicode_Category_LO;
		case 0x167E: return Unicode_Category_LO;
		case 0x167F: return Unicode_Category_LO;
		case 0x1680: return Unicode_Category_ZS;
		case 0x1681: return Unicode_Category_LO;
		case 0x1682: return Unicode_Category_LO;
		case 0x1683: return Unicode_Category_LO;
		case 0x1684: return Unicode_Category_LO;
		case 0x1685: return Unicode_Category_LO;
		case 0x1686: return Unicode_Category_LO;
		case 0x1687: return Unicode_Category_LO;
		case 0x1688: return Unicode_Category_LO;
		case 0x1689: return Unicode_Category_LO;
		case 0x168A: return Unicode_Category_LO;
		case 0x168B: return Unicode_Category_LO;
		case 0x168C: return Unicode_Category_LO;
		case 0x168D: return Unicode_Category_LO;
		case 0x168E: return Unicode_Category_LO;
		case 0x168F: return Unicode_Category_LO;
		case 0x1690: return Unicode_Category_LO;
		case 0x1691: return Unicode_Category_LO;
		case 0x1692: return Unicode_Category_LO;
		case 0x1693: return Unicode_Category_LO;
		case 0x1694: return Unicode_Category_LO;
		case 0x1695: return Unicode_Category_LO;
		case 0x1696: return Unicode_Category_LO;
		case 0x1697: return Unicode_Category_LO;
		case 0x1698: return Unicode_Category_LO;
		case 0x1699: return Unicode_Category_LO;
		case 0x169A: return Unicode_Category_LO;
		case 0x169B: return Unicode_Category_PS;
		case 0x169C: return Unicode_Category_PE;
		case 0x16A0: return Unicode_Category_LO;
		case 0x16A1: return Unicode_Category_LO;
		case 0x16A2: return Unicode_Category_LO;
		case 0x16A3: return Unicode_Category_LO;
		case 0x16A4: return Unicode_Category_LO;
		case 0x16A5: return Unicode_Category_LO;
		case 0x16A6: return Unicode_Category_LO;
		case 0x16A7: return Unicode_Category_LO;
		case 0x16A8: return Unicode_Category_LO;
		case 0x16A9: return Unicode_Category_LO;
		case 0x16AA: return Unicode_Category_LO;
		case 0x16AB: return Unicode_Category_LO;
		case 0x16AC: return Unicode_Category_LO;
		case 0x16AD: return Unicode_Category_LO;
		case 0x16AE: return Unicode_Category_LO;
		case 0x16AF: return Unicode_Category_LO;
		case 0x16B0: return Unicode_Category_LO;
		case 0x16B1: return Unicode_Category_LO;
		case 0x16B2: return Unicode_Category_LO;
		case 0x16B3: return Unicode_Category_LO;
		case 0x16B4: return Unicode_Category_LO;
		case 0x16B5: return Unicode_Category_LO;
		case 0x16B6: return Unicode_Category_LO;
		case 0x16B7: return Unicode_Category_LO;
		case 0x16B8: return Unicode_Category_LO;
		case 0x16B9: return Unicode_Category_LO;
		case 0x16BA: return Unicode_Category_LO;
		case 0x16BB: return Unicode_Category_LO;
		case 0x16BC: return Unicode_Category_LO;
		case 0x16BD: return Unicode_Category_LO;
		case 0x16BE: return Unicode_Category_LO;
		case 0x16BF: return Unicode_Category_LO;
		case 0x16C0: return Unicode_Category_LO;
		case 0x16C1: return Unicode_Category_LO;
		case 0x16C2: return Unicode_Category_LO;
		case 0x16C3: return Unicode_Category_LO;
		case 0x16C4: return Unicode_Category_LO;
		case 0x16C5: return Unicode_Category_LO;
		case 0x16C6: return Unicode_Category_LO;
		case 0x16C7: return Unicode_Category_LO;
		case 0x16C8: return Unicode_Category_LO;
		case 0x16C9: return Unicode_Category_LO;
		case 0x16CA: return Unicode_Category_LO;
		case 0x16CB: return Unicode_Category_LO;
		case 0x16CC: return Unicode_Category_LO;
		case 0x16CD: return Unicode_Category_LO;
		case 0x16CE: return Unicode_Category_LO;
		case 0x16CF: return Unicode_Category_LO;
		case 0x16D0: return Unicode_Category_LO;
		case 0x16D1: return Unicode_Category_LO;
		case 0x16D2: return Unicode_Category_LO;
		case 0x16D3: return Unicode_Category_LO;
		case 0x16D4: return Unicode_Category_LO;
		case 0x16D5: return Unicode_Category_LO;
		case 0x16D6: return Unicode_Category_LO;
		case 0x16D7: return Unicode_Category_LO;
		case 0x16D8: return Unicode_Category_LO;
		case 0x16D9: return Unicode_Category_LO;
		case 0x16DA: return Unicode_Category_LO;
		case 0x16DB: return Unicode_Category_LO;
		case 0x16DC: return Unicode_Category_LO;
		case 0x16DD: return Unicode_Category_LO;
		case 0x16DE: return Unicode_Category_LO;
		case 0x16DF: return Unicode_Category_LO;
		case 0x16E0: return Unicode_Category_LO;
		case 0x16E1: return Unicode_Category_LO;
		case 0x16E2: return Unicode_Category_LO;
		case 0x16E3: return Unicode_Category_LO;
		case 0x16E4: return Unicode_Category_LO;
		case 0x16E5: return Unicode_Category_LO;
		case 0x16E6: return Unicode_Category_LO;
		case 0x16E7: return Unicode_Category_LO;
		case 0x16E8: return Unicode_Category_LO;
		case 0x16E9: return Unicode_Category_LO;
		case 0x16EA: return Unicode_Category_LO;
		case 0x16EB: return Unicode_Category_PO;
		case 0x16EC: return Unicode_Category_PO;
		case 0x16ED: return Unicode_Category_PO;
		case 0x16EE: return Unicode_Category_NL;
		case 0x16EF: return Unicode_Category_NL;
		case 0x16F0: return Unicode_Category_NL;
		case 0x16F1: return Unicode_Category_LO;
		case 0x16F2: return Unicode_Category_LO;
		case 0x16F3: return Unicode_Category_LO;
		case 0x16F4: return Unicode_Category_LO;
		case 0x16F5: return Unicode_Category_LO;
		case 0x16F6: return Unicode_Category_LO;
		case 0x16F7: return Unicode_Category_LO;
		case 0x16F8: return Unicode_Category_LO;
		case 0x1700: return Unicode_Category_LO;
		case 0x1701: return Unicode_Category_LO;
		case 0x1702: return Unicode_Category_LO;
		case 0x1703: return Unicode_Category_LO;
		case 0x1704: return Unicode_Category_LO;
		case 0x1705: return Unicode_Category_LO;
		case 0x1706: return Unicode_Category_LO;
		case 0x1707: return Unicode_Category_LO;
		case 0x1708: return Unicode_Category_LO;
		case 0x1709: return Unicode_Category_LO;
		case 0x170A: return Unicode_Category_LO;
		case 0x170B: return Unicode_Category_LO;
		case 0x170C: return Unicode_Category_LO;
		case 0x170E: return Unicode_Category_LO;
		case 0x170F: return Unicode_Category_LO;
		case 0x1710: return Unicode_Category_LO;
		case 0x1711: return Unicode_Category_LO;
		case 0x1712: return Unicode_Category_MN;
		case 0x1713: return Unicode_Category_MN;
		case 0x1714: return Unicode_Category_MN;
		case 0x1720: return Unicode_Category_LO;
		case 0x1721: return Unicode_Category_LO;
		case 0x1722: return Unicode_Category_LO;
		case 0x1723: return Unicode_Category_LO;
		case 0x1724: return Unicode_Category_LO;
		case 0x1725: return Unicode_Category_LO;
		case 0x1726: return Unicode_Category_LO;
		case 0x1727: return Unicode_Category_LO;
		case 0x1728: return Unicode_Category_LO;
		case 0x1729: return Unicode_Category_LO;
		case 0x172A: return Unicode_Category_LO;
		case 0x172B: return Unicode_Category_LO;
		case 0x172C: return Unicode_Category_LO;
		case 0x172D: return Unicode_Category_LO;
		case 0x172E: return Unicode_Category_LO;
		case 0x172F: return Unicode_Category_LO;
		case 0x1730: return Unicode_Category_LO;
		case 0x1731: return Unicode_Category_LO;
		case 0x1732: return Unicode_Category_MN;
		case 0x1733: return Unicode_Category_MN;
		case 0x1734: return Unicode_Category_MN;
		case 0x1735: return Unicode_Category_PO;
		case 0x1736: return Unicode_Category_PO;
		case 0x1740: return Unicode_Category_LO;
		case 0x1741: return Unicode_Category_LO;
		case 0x1742: return Unicode_Category_LO;
		case 0x1743: return Unicode_Category_LO;
		case 0x1744: return Unicode_Category_LO;
		case 0x1745: return Unicode_Category_LO;
		case 0x1746: return Unicode_Category_LO;
		case 0x1747: return Unicode_Category_LO;
		case 0x1748: return Unicode_Category_LO;
		case 0x1749: return Unicode_Category_LO;
		case 0x174A: return Unicode_Category_LO;
		case 0x174B: return Unicode_Category_LO;
		case 0x174C: return Unicode_Category_LO;
		case 0x174D: return Unicode_Category_LO;
		case 0x174E: return Unicode_Category_LO;
		case 0x174F: return Unicode_Category_LO;
		case 0x1750: return Unicode_Category_LO;
		case 0x1751: return Unicode_Category_LO;
		case 0x1752: return Unicode_Category_MN;
		case 0x1753: return Unicode_Category_MN;
		case 0x1760: return Unicode_Category_LO;
		case 0x1761: return Unicode_Category_LO;
		case 0x1762: return Unicode_Category_LO;
		case 0x1763: return Unicode_Category_LO;
		case 0x1764: return Unicode_Category_LO;
		case 0x1765: return Unicode_Category_LO;
		case 0x1766: return Unicode_Category_LO;
		case 0x1767: return Unicode_Category_LO;
		case 0x1768: return Unicode_Category_LO;
		case 0x1769: return Unicode_Category_LO;
		case 0x176A: return Unicode_Category_LO;
		case 0x176B: return Unicode_Category_LO;
		case 0x176C: return Unicode_Category_LO;
		case 0x176E: return Unicode_Category_LO;
		case 0x176F: return Unicode_Category_LO;
		case 0x1770: return Unicode_Category_LO;
		case 0x1772: return Unicode_Category_MN;
		case 0x1773: return Unicode_Category_MN;
		case 0x1780: return Unicode_Category_LO;
		case 0x1781: return Unicode_Category_LO;
		case 0x1782: return Unicode_Category_LO;
		case 0x1783: return Unicode_Category_LO;
		case 0x1784: return Unicode_Category_LO;
		case 0x1785: return Unicode_Category_LO;
		case 0x1786: return Unicode_Category_LO;
		case 0x1787: return Unicode_Category_LO;
		case 0x1788: return Unicode_Category_LO;
		case 0x1789: return Unicode_Category_LO;
		case 0x178A: return Unicode_Category_LO;
		case 0x178B: return Unicode_Category_LO;
		case 0x178C: return Unicode_Category_LO;
		case 0x178D: return Unicode_Category_LO;
		case 0x178E: return Unicode_Category_LO;
		case 0x178F: return Unicode_Category_LO;
		case 0x1790: return Unicode_Category_LO;
		case 0x1791: return Unicode_Category_LO;
		case 0x1792: return Unicode_Category_LO;
		case 0x1793: return Unicode_Category_LO;
		case 0x1794: return Unicode_Category_LO;
		case 0x1795: return Unicode_Category_LO;
		case 0x1796: return Unicode_Category_LO;
		case 0x1797: return Unicode_Category_LO;
		case 0x1798: return Unicode_Category_LO;
		case 0x1799: return Unicode_Category_LO;
		case 0x179A: return Unicode_Category_LO;
		case 0x179B: return Unicode_Category_LO;
		case 0x179C: return Unicode_Category_LO;
		case 0x179D: return Unicode_Category_LO;
		case 0x179E: return Unicode_Category_LO;
		case 0x179F: return Unicode_Category_LO;
		case 0x17A0: return Unicode_Category_LO;
		case 0x17A1: return Unicode_Category_LO;
		case 0x17A2: return Unicode_Category_LO;
		case 0x17A3: return Unicode_Category_LO;
		case 0x17A4: return Unicode_Category_LO;
		case 0x17A5: return Unicode_Category_LO;
		case 0x17A6: return Unicode_Category_LO;
		case 0x17A7: return Unicode_Category_LO;
		case 0x17A8: return Unicode_Category_LO;
		case 0x17A9: return Unicode_Category_LO;
		case 0x17AA: return Unicode_Category_LO;
		case 0x17AB: return Unicode_Category_LO;
		case 0x17AC: return Unicode_Category_LO;
		case 0x17AD: return Unicode_Category_LO;
		case 0x17AE: return Unicode_Category_LO;
		case 0x17AF: return Unicode_Category_LO;
		case 0x17B0: return Unicode_Category_LO;
		case 0x17B1: return Unicode_Category_LO;
		case 0x17B2: return Unicode_Category_LO;
		case 0x17B3: return Unicode_Category_LO;
		case 0x17B4: return Unicode_Category_MN;
		case 0x17B5: return Unicode_Category_MN;
		case 0x17B6: return Unicode_Category_MC;
		case 0x17B7: return Unicode_Category_MN;
		case 0x17B8: return Unicode_Category_MN;
		case 0x17B9: return Unicode_Category_MN;
		case 0x17BA: return Unicode_Category_MN;
		case 0x17BB: return Unicode_Category_MN;
		case 0x17BC: return Unicode_Category_MN;
		case 0x17BD: return Unicode_Category_MN;
		case 0x17BE: return Unicode_Category_MC;
		case 0x17BF: return Unicode_Category_MC;
		case 0x17C0: return Unicode_Category_MC;
		case 0x17C1: return Unicode_Category_MC;
		case 0x17C2: return Unicode_Category_MC;
		case 0x17C3: return Unicode_Category_MC;
		case 0x17C4: return Unicode_Category_MC;
		case 0x17C5: return Unicode_Category_MC;
		case 0x17C6: return Unicode_Category_MN;
		case 0x17C7: return Unicode_Category_MC;
		case 0x17C8: return Unicode_Category_MC;
		case 0x17C9: return Unicode_Category_MN;
		case 0x17CA: return Unicode_Category_MN;
		case 0x17CB: return Unicode_Category_MN;
		case 0x17CC: return Unicode_Category_MN;
		case 0x17CD: return Unicode_Category_MN;
		case 0x17CE: return Unicode_Category_MN;
		case 0x17CF: return Unicode_Category_MN;
		case 0x17D0: return Unicode_Category_MN;
		case 0x17D1: return Unicode_Category_MN;
		case 0x17D2: return Unicode_Category_MN;
		case 0x17D3: return Unicode_Category_MN;
		case 0x17D4: return Unicode_Category_PO;
		case 0x17D5: return Unicode_Category_PO;
		case 0x17D6: return Unicode_Category_PO;
		case 0x17D7: return Unicode_Category_LM;
		case 0x17D8: return Unicode_Category_PO;
		case 0x17D9: return Unicode_Category_PO;
		case 0x17DA: return Unicode_Category_PO;
		case 0x17DB: return Unicode_Category_SC;
		case 0x17DC: return Unicode_Category_LO;
		case 0x17DD: return Unicode_Category_MN;
		case 0x17E0: return Unicode_Category_ND;
		case 0x17E1: return Unicode_Category_ND;
		case 0x17E2: return Unicode_Category_ND;
		case 0x17E3: return Unicode_Category_ND;
		case 0x17E4: return Unicode_Category_ND;
		case 0x17E5: return Unicode_Category_ND;
		case 0x17E6: return Unicode_Category_ND;
		case 0x17E7: return Unicode_Category_ND;
		case 0x17E8: return Unicode_Category_ND;
		case 0x17E9: return Unicode_Category_ND;
		case 0x17F0: return Unicode_Category_NO;
		case 0x17F1: return Unicode_Category_NO;
		case 0x17F2: return Unicode_Category_NO;
		case 0x17F3: return Unicode_Category_NO;
		case 0x17F4: return Unicode_Category_NO;
		case 0x17F5: return Unicode_Category_NO;
		case 0x17F6: return Unicode_Category_NO;
		case 0x17F7: return Unicode_Category_NO;
		case 0x17F8: return Unicode_Category_NO;
		case 0x17F9: return Unicode_Category_NO;
		case 0x1800: return Unicode_Category_PO;
		case 0x1801: return Unicode_Category_PO;
		case 0x1802: return Unicode_Category_PO;
		case 0x1803: return Unicode_Category_PO;
		case 0x1804: return Unicode_Category_PO;
		case 0x1805: return Unicode_Category_PO;
		case 0x1806: return Unicode_Category_PD;
		case 0x1807: return Unicode_Category_PO;
		case 0x1808: return Unicode_Category_PO;
		case 0x1809: return Unicode_Category_PO;
		case 0x180A: return Unicode_Category_PO;
		case 0x180B: return Unicode_Category_MN;
		case 0x180C: return Unicode_Category_MN;
		case 0x180D: return Unicode_Category_MN;
		case 0x180E: return Unicode_Category_CF;
		case 0x1810: return Unicode_Category_ND;
		case 0x1811: return Unicode_Category_ND;
		case 0x1812: return Unicode_Category_ND;
		case 0x1813: return Unicode_Category_ND;
		case 0x1814: return Unicode_Category_ND;
		case 0x1815: return Unicode_Category_ND;
		case 0x1816: return Unicode_Category_ND;
		case 0x1817: return Unicode_Category_ND;
		case 0x1818: return Unicode_Category_ND;
		case 0x1819: return Unicode_Category_ND;
		case 0x1820: return Unicode_Category_LO;
		case 0x1821: return Unicode_Category_LO;
		case 0x1822: return Unicode_Category_LO;
		case 0x1823: return Unicode_Category_LO;
		case 0x1824: return Unicode_Category_LO;
		case 0x1825: return Unicode_Category_LO;
		case 0x1826: return Unicode_Category_LO;
		case 0x1827: return Unicode_Category_LO;
		case 0x1828: return Unicode_Category_LO;
		case 0x1829: return Unicode_Category_LO;
		case 0x182A: return Unicode_Category_LO;
		case 0x182B: return Unicode_Category_LO;
		case 0x182C: return Unicode_Category_LO;
		case 0x182D: return Unicode_Category_LO;
		case 0x182E: return Unicode_Category_LO;
		case 0x182F: return Unicode_Category_LO;
		case 0x1830: return Unicode_Category_LO;
		case 0x1831: return Unicode_Category_LO;
		case 0x1832: return Unicode_Category_LO;
		case 0x1833: return Unicode_Category_LO;
		case 0x1834: return Unicode_Category_LO;
		case 0x1835: return Unicode_Category_LO;
		case 0x1836: return Unicode_Category_LO;
		case 0x1837: return Unicode_Category_LO;
		case 0x1838: return Unicode_Category_LO;
		case 0x1839: return Unicode_Category_LO;
		case 0x183A: return Unicode_Category_LO;
		case 0x183B: return Unicode_Category_LO;
		case 0x183C: return Unicode_Category_LO;
		case 0x183D: return Unicode_Category_LO;
		case 0x183E: return Unicode_Category_LO;
		case 0x183F: return Unicode_Category_LO;
		case 0x1840: return Unicode_Category_LO;
		case 0x1841: return Unicode_Category_LO;
		case 0x1842: return Unicode_Category_LO;
		case 0x1843: return Unicode_Category_LM;
		case 0x1844: return Unicode_Category_LO;
		case 0x1845: return Unicode_Category_LO;
		case 0x1846: return Unicode_Category_LO;
		case 0x1847: return Unicode_Category_LO;
		case 0x1848: return Unicode_Category_LO;
		case 0x1849: return Unicode_Category_LO;
		case 0x184A: return Unicode_Category_LO;
		case 0x184B: return Unicode_Category_LO;
		case 0x184C: return Unicode_Category_LO;
		case 0x184D: return Unicode_Category_LO;
		case 0x184E: return Unicode_Category_LO;
		case 0x184F: return Unicode_Category_LO;
		case 0x1850: return Unicode_Category_LO;
		case 0x1851: return Unicode_Category_LO;
		case 0x1852: return Unicode_Category_LO;
		case 0x1853: return Unicode_Category_LO;
		case 0x1854: return Unicode_Category_LO;
		case 0x1855: return Unicode_Category_LO;
		case 0x1856: return Unicode_Category_LO;
		case 0x1857: return Unicode_Category_LO;
		case 0x1858: return Unicode_Category_LO;
		case 0x1859: return Unicode_Category_LO;
		case 0x185A: return Unicode_Category_LO;
		case 0x185B: return Unicode_Category_LO;
		case 0x185C: return Unicode_Category_LO;
		case 0x185D: return Unicode_Category_LO;
		case 0x185E: return Unicode_Category_LO;
		case 0x185F: return Unicode_Category_LO;
		case 0x1860: return Unicode_Category_LO;
		case 0x1861: return Unicode_Category_LO;
		case 0x1862: return Unicode_Category_LO;
		case 0x1863: return Unicode_Category_LO;
		case 0x1864: return Unicode_Category_LO;
		case 0x1865: return Unicode_Category_LO;
		case 0x1866: return Unicode_Category_LO;
		case 0x1867: return Unicode_Category_LO;
		case 0x1868: return Unicode_Category_LO;
		case 0x1869: return Unicode_Category_LO;
		case 0x186A: return Unicode_Category_LO;
		case 0x186B: return Unicode_Category_LO;
		case 0x186C: return Unicode_Category_LO;
		case 0x186D: return Unicode_Category_LO;
		case 0x186E: return Unicode_Category_LO;
		case 0x186F: return Unicode_Category_LO;
		case 0x1870: return Unicode_Category_LO;
		case 0x1871: return Unicode_Category_LO;
		case 0x1872: return Unicode_Category_LO;
		case 0x1873: return Unicode_Category_LO;
		case 0x1874: return Unicode_Category_LO;
		case 0x1875: return Unicode_Category_LO;
		case 0x1876: return Unicode_Category_LO;
		case 0x1877: return Unicode_Category_LO;
		case 0x1878: return Unicode_Category_LO;
		case 0x1880: return Unicode_Category_LO;
		case 0x1881: return Unicode_Category_LO;
		case 0x1882: return Unicode_Category_LO;
		case 0x1883: return Unicode_Category_LO;
		case 0x1884: return Unicode_Category_LO;
		case 0x1885: return Unicode_Category_MN;
		case 0x1886: return Unicode_Category_MN;
		case 0x1887: return Unicode_Category_LO;
		case 0x1888: return Unicode_Category_LO;
		case 0x1889: return Unicode_Category_LO;
		case 0x188A: return Unicode_Category_LO;
		case 0x188B: return Unicode_Category_LO;
		case 0x188C: return Unicode_Category_LO;
		case 0x188D: return Unicode_Category_LO;
		case 0x188E: return Unicode_Category_LO;
		case 0x188F: return Unicode_Category_LO;
		case 0x1890: return Unicode_Category_LO;
		case 0x1891: return Unicode_Category_LO;
		case 0x1892: return Unicode_Category_LO;
		case 0x1893: return Unicode_Category_LO;
		case 0x1894: return Unicode_Category_LO;
		case 0x1895: return Unicode_Category_LO;
		case 0x1896: return Unicode_Category_LO;
		case 0x1897: return Unicode_Category_LO;
		case 0x1898: return Unicode_Category_LO;
		case 0x1899: return Unicode_Category_LO;
		case 0x189A: return Unicode_Category_LO;
		case 0x189B: return Unicode_Category_LO;
		case 0x189C: return Unicode_Category_LO;
		case 0x189D: return Unicode_Category_LO;
		case 0x189E: return Unicode_Category_LO;
		case 0x189F: return Unicode_Category_LO;
		case 0x18A0: return Unicode_Category_LO;
		case 0x18A1: return Unicode_Category_LO;
		case 0x18A2: return Unicode_Category_LO;
		case 0x18A3: return Unicode_Category_LO;
		case 0x18A4: return Unicode_Category_LO;
		case 0x18A5: return Unicode_Category_LO;
		case 0x18A6: return Unicode_Category_LO;
		case 0x18A7: return Unicode_Category_LO;
		case 0x18A8: return Unicode_Category_LO;
		case 0x18A9: return Unicode_Category_MN;
		case 0x18AA: return Unicode_Category_LO;
		case 0x18B0: return Unicode_Category_LO;
		case 0x18B1: return Unicode_Category_LO;
		case 0x18B2: return Unicode_Category_LO;
		case 0x18B3: return Unicode_Category_LO;
		case 0x18B4: return Unicode_Category_LO;
		case 0x18B5: return Unicode_Category_LO;
		case 0x18B6: return Unicode_Category_LO;
		case 0x18B7: return Unicode_Category_LO;
		case 0x18B8: return Unicode_Category_LO;
		case 0x18B9: return Unicode_Category_LO;
		case 0x18BA: return Unicode_Category_LO;
		case 0x18BB: return Unicode_Category_LO;
		case 0x18BC: return Unicode_Category_LO;
		case 0x18BD: return Unicode_Category_LO;
		case 0x18BE: return Unicode_Category_LO;
		case 0x18BF: return Unicode_Category_LO;
		case 0x18C0: return Unicode_Category_LO;
		case 0x18C1: return Unicode_Category_LO;
		case 0x18C2: return Unicode_Category_LO;
		case 0x18C3: return Unicode_Category_LO;
		case 0x18C4: return Unicode_Category_LO;
		case 0x18C5: return Unicode_Category_LO;
		case 0x18C6: return Unicode_Category_LO;
		case 0x18C7: return Unicode_Category_LO;
		case 0x18C8: return Unicode_Category_LO;
		case 0x18C9: return Unicode_Category_LO;
		case 0x18CA: return Unicode_Category_LO;
		case 0x18CB: return Unicode_Category_LO;
		case 0x18CC: return Unicode_Category_LO;
		case 0x18CD: return Unicode_Category_LO;
		case 0x18CE: return Unicode_Category_LO;
		case 0x18CF: return Unicode_Category_LO;
		case 0x18D0: return Unicode_Category_LO;
		case 0x18D1: return Unicode_Category_LO;
		case 0x18D2: return Unicode_Category_LO;
		case 0x18D3: return Unicode_Category_LO;
		case 0x18D4: return Unicode_Category_LO;
		case 0x18D5: return Unicode_Category_LO;
		case 0x18D6: return Unicode_Category_LO;
		case 0x18D7: return Unicode_Category_LO;
		case 0x18D8: return Unicode_Category_LO;
		case 0x18D9: return Unicode_Category_LO;
		case 0x18DA: return Unicode_Category_LO;
		case 0x18DB: return Unicode_Category_LO;
		case 0x18DC: return Unicode_Category_LO;
		case 0x18DD: return Unicode_Category_LO;
		case 0x18DE: return Unicode_Category_LO;
		case 0x18DF: return Unicode_Category_LO;
		case 0x18E0: return Unicode_Category_LO;
		case 0x18E1: return Unicode_Category_LO;
		case 0x18E2: return Unicode_Category_LO;
		case 0x18E3: return Unicode_Category_LO;
		case 0x18E4: return Unicode_Category_LO;
		case 0x18E5: return Unicode_Category_LO;
		case 0x18E6: return Unicode_Category_LO;
		case 0x18E7: return Unicode_Category_LO;
		case 0x18E8: return Unicode_Category_LO;
		case 0x18E9: return Unicode_Category_LO;
		case 0x18EA: return Unicode_Category_LO;
		case 0x18EB: return Unicode_Category_LO;
		case 0x18EC: return Unicode_Category_LO;
		case 0x18ED: return Unicode_Category_LO;
		case 0x18EE: return Unicode_Category_LO;
		case 0x18EF: return Unicode_Category_LO;
		case 0x18F0: return Unicode_Category_LO;
		case 0x18F1: return Unicode_Category_LO;
		case 0x18F2: return Unicode_Category_LO;
		case 0x18F3: return Unicode_Category_LO;
		case 0x18F4: return Unicode_Category_LO;
		case 0x18F5: return Unicode_Category_LO;
		case 0x1900: return Unicode_Category_LO;
		case 0x1901: return Unicode_Category_LO;
		case 0x1902: return Unicode_Category_LO;
		case 0x1903: return Unicode_Category_LO;
		case 0x1904: return Unicode_Category_LO;
		case 0x1905: return Unicode_Category_LO;
		case 0x1906: return Unicode_Category_LO;
		case 0x1907: return Unicode_Category_LO;
		case 0x1908: return Unicode_Category_LO;
		case 0x1909: return Unicode_Category_LO;
		case 0x190A: return Unicode_Category_LO;
		case 0x190B: return Unicode_Category_LO;
		case 0x190C: return Unicode_Category_LO;
		case 0x190D: return Unicode_Category_LO;
		case 0x190E: return Unicode_Category_LO;
		case 0x190F: return Unicode_Category_LO;
		case 0x1910: return Unicode_Category_LO;
		case 0x1911: return Unicode_Category_LO;
		case 0x1912: return Unicode_Category_LO;
		case 0x1913: return Unicode_Category_LO;
		case 0x1914: return Unicode_Category_LO;
		case 0x1915: return Unicode_Category_LO;
		case 0x1916: return Unicode_Category_LO;
		case 0x1917: return Unicode_Category_LO;
		case 0x1918: return Unicode_Category_LO;
		case 0x1919: return Unicode_Category_LO;
		case 0x191A: return Unicode_Category_LO;
		case 0x191B: return Unicode_Category_LO;
		case 0x191C: return Unicode_Category_LO;
		case 0x191D: return Unicode_Category_LO;
		case 0x191E: return Unicode_Category_LO;
		case 0x1920: return Unicode_Category_MN;
		case 0x1921: return Unicode_Category_MN;
		case 0x1922: return Unicode_Category_MN;
		case 0x1923: return Unicode_Category_MC;
		case 0x1924: return Unicode_Category_MC;
		case 0x1925: return Unicode_Category_MC;
		case 0x1926: return Unicode_Category_MC;
		case 0x1927: return Unicode_Category_MN;
		case 0x1928: return Unicode_Category_MN;
		case 0x1929: return Unicode_Category_MC;
		case 0x192A: return Unicode_Category_MC;
		case 0x192B: return Unicode_Category_MC;
		case 0x1930: return Unicode_Category_MC;
		case 0x1931: return Unicode_Category_MC;
		case 0x1932: return Unicode_Category_MN;
		case 0x1933: return Unicode_Category_MC;
		case 0x1934: return Unicode_Category_MC;
		case 0x1935: return Unicode_Category_MC;
		case 0x1936: return Unicode_Category_MC;
		case 0x1937: return Unicode_Category_MC;
		case 0x1938: return Unicode_Category_MC;
		case 0x1939: return Unicode_Category_MN;
		case 0x193A: return Unicode_Category_MN;
		case 0x193B: return Unicode_Category_MN;
		case 0x1940: return Unicode_Category_SO;
		case 0x1944: return Unicode_Category_PO;
		case 0x1945: return Unicode_Category_PO;
		case 0x1946: return Unicode_Category_ND;
		case 0x1947: return Unicode_Category_ND;
		case 0x1948: return Unicode_Category_ND;
		case 0x1949: return Unicode_Category_ND;
		case 0x194A: return Unicode_Category_ND;
		case 0x194B: return Unicode_Category_ND;
		case 0x194C: return Unicode_Category_ND;
		case 0x194D: return Unicode_Category_ND;
		case 0x194E: return Unicode_Category_ND;
		case 0x194F: return Unicode_Category_ND;
		case 0x1950: return Unicode_Category_LO;
		case 0x1951: return Unicode_Category_LO;
		case 0x1952: return Unicode_Category_LO;
		case 0x1953: return Unicode_Category_LO;
		case 0x1954: return Unicode_Category_LO;
		case 0x1955: return Unicode_Category_LO;
		case 0x1956: return Unicode_Category_LO;
		case 0x1957: return Unicode_Category_LO;
		case 0x1958: return Unicode_Category_LO;
		case 0x1959: return Unicode_Category_LO;
		case 0x195A: return Unicode_Category_LO;
		case 0x195B: return Unicode_Category_LO;
		case 0x195C: return Unicode_Category_LO;
		case 0x195D: return Unicode_Category_LO;
		case 0x195E: return Unicode_Category_LO;
		case 0x195F: return Unicode_Category_LO;
		case 0x1960: return Unicode_Category_LO;
		case 0x1961: return Unicode_Category_LO;
		case 0x1962: return Unicode_Category_LO;
		case 0x1963: return Unicode_Category_LO;
		case 0x1964: return Unicode_Category_LO;
		case 0x1965: return Unicode_Category_LO;
		case 0x1966: return Unicode_Category_LO;
		case 0x1967: return Unicode_Category_LO;
		case 0x1968: return Unicode_Category_LO;
		case 0x1969: return Unicode_Category_LO;
		case 0x196A: return Unicode_Category_LO;
		case 0x196B: return Unicode_Category_LO;
		case 0x196C: return Unicode_Category_LO;
		case 0x196D: return Unicode_Category_LO;
		case 0x1970: return Unicode_Category_LO;
		case 0x1971: return Unicode_Category_LO;
		case 0x1972: return Unicode_Category_LO;
		case 0x1973: return Unicode_Category_LO;
		case 0x1974: return Unicode_Category_LO;
		case 0x1980: return Unicode_Category_LO;
		case 0x1981: return Unicode_Category_LO;
		case 0x1982: return Unicode_Category_LO;
		case 0x1983: return Unicode_Category_LO;
		case 0x1984: return Unicode_Category_LO;
		case 0x1985: return Unicode_Category_LO;
		case 0x1986: return Unicode_Category_LO;
		case 0x1987: return Unicode_Category_LO;
		case 0x1988: return Unicode_Category_LO;
		case 0x1989: return Unicode_Category_LO;
		case 0x198A: return Unicode_Category_LO;
		case 0x198B: return Unicode_Category_LO;
		case 0x198C: return Unicode_Category_LO;
		case 0x198D: return Unicode_Category_LO;
		case 0x198E: return Unicode_Category_LO;
		case 0x198F: return Unicode_Category_LO;
		case 0x1990: return Unicode_Category_LO;
		case 0x1991: return Unicode_Category_LO;
		case 0x1992: return Unicode_Category_LO;
		case 0x1993: return Unicode_Category_LO;
		case 0x1994: return Unicode_Category_LO;
		case 0x1995: return Unicode_Category_LO;
		case 0x1996: return Unicode_Category_LO;
		case 0x1997: return Unicode_Category_LO;
		case 0x1998: return Unicode_Category_LO;
		case 0x1999: return Unicode_Category_LO;
		case 0x199A: return Unicode_Category_LO;
		case 0x199B: return Unicode_Category_LO;
		case 0x199C: return Unicode_Category_LO;
		case 0x199D: return Unicode_Category_LO;
		case 0x199E: return Unicode_Category_LO;
		case 0x199F: return Unicode_Category_LO;
		case 0x19A0: return Unicode_Category_LO;
		case 0x19A1: return Unicode_Category_LO;
		case 0x19A2: return Unicode_Category_LO;
		case 0x19A3: return Unicode_Category_LO;
		case 0x19A4: return Unicode_Category_LO;
		case 0x19A5: return Unicode_Category_LO;
		case 0x19A6: return Unicode_Category_LO;
		case 0x19A7: return Unicode_Category_LO;
		case 0x19A8: return Unicode_Category_LO;
		case 0x19A9: return Unicode_Category_LO;
		case 0x19AA: return Unicode_Category_LO;
		case 0x19AB: return Unicode_Category_LO;
		case 0x19B0: return Unicode_Category_LO;
		case 0x19B1: return Unicode_Category_LO;
		case 0x19B2: return Unicode_Category_LO;
		case 0x19B3: return Unicode_Category_LO;
		case 0x19B4: return Unicode_Category_LO;
		case 0x19B5: return Unicode_Category_LO;
		case 0x19B6: return Unicode_Category_LO;
		case 0x19B7: return Unicode_Category_LO;
		case 0x19B8: return Unicode_Category_LO;
		case 0x19B9: return Unicode_Category_LO;
		case 0x19BA: return Unicode_Category_LO;
		case 0x19BB: return Unicode_Category_LO;
		case 0x19BC: return Unicode_Category_LO;
		case 0x19BD: return Unicode_Category_LO;
		case 0x19BE: return Unicode_Category_LO;
		case 0x19BF: return Unicode_Category_LO;
		case 0x19C0: return Unicode_Category_LO;
		case 0x19C1: return Unicode_Category_LO;
		case 0x19C2: return Unicode_Category_LO;
		case 0x19C3: return Unicode_Category_LO;
		case 0x19C4: return Unicode_Category_LO;
		case 0x19C5: return Unicode_Category_LO;
		case 0x19C6: return Unicode_Category_LO;
		case 0x19C7: return Unicode_Category_LO;
		case 0x19C8: return Unicode_Category_LO;
		case 0x19C9: return Unicode_Category_LO;
		case 0x19D0: return Unicode_Category_ND;
		case 0x19D1: return Unicode_Category_ND;
		case 0x19D2: return Unicode_Category_ND;
		case 0x19D3: return Unicode_Category_ND;
		case 0x19D4: return Unicode_Category_ND;
		case 0x19D5: return Unicode_Category_ND;
		case 0x19D6: return Unicode_Category_ND;
		case 0x19D7: return Unicode_Category_ND;
		case 0x19D8: return Unicode_Category_ND;
		case 0x19D9: return Unicode_Category_ND;
		case 0x19DA: return Unicode_Category_NO;
		case 0x19DE: return Unicode_Category_SO;
		case 0x19DF: return Unicode_Category_SO;
		case 0x19E0: return Unicode_Category_SO;
		case 0x19E1: return Unicode_Category_SO;
		case 0x19E2: return Unicode_Category_SO;
		case 0x19E3: return Unicode_Category_SO;
		case 0x19E4: return Unicode_Category_SO;
		case 0x19E5: return Unicode_Category_SO;
		case 0x19E6: return Unicode_Category_SO;
		case 0x19E7: return Unicode_Category_SO;
		case 0x19E8: return Unicode_Category_SO;
		case 0x19E9: return Unicode_Category_SO;
		case 0x19EA: return Unicode_Category_SO;
		case 0x19EB: return Unicode_Category_SO;
		case 0x19EC: return Unicode_Category_SO;
		case 0x19ED: return Unicode_Category_SO;
		case 0x19EE: return Unicode_Category_SO;
		case 0x19EF: return Unicode_Category_SO;
		case 0x19F0: return Unicode_Category_SO;
		case 0x19F1: return Unicode_Category_SO;
		case 0x19F2: return Unicode_Category_SO;
		case 0x19F3: return Unicode_Category_SO;
		case 0x19F4: return Unicode_Category_SO;
		case 0x19F5: return Unicode_Category_SO;
		case 0x19F6: return Unicode_Category_SO;
		case 0x19F7: return Unicode_Category_SO;
		case 0x19F8: return Unicode_Category_SO;
		case 0x19F9: return Unicode_Category_SO;
		case 0x19FA: return Unicode_Category_SO;
		case 0x19FB: return Unicode_Category_SO;
		case 0x19FC: return Unicode_Category_SO;
		case 0x19FD: return Unicode_Category_SO;
		case 0x19FE: return Unicode_Category_SO;
		case 0x19FF: return Unicode_Category_SO;
		case 0x1A00: return Unicode_Category_LO;
		case 0x1A01: return Unicode_Category_LO;
		case 0x1A02: return Unicode_Category_LO;
		case 0x1A03: return Unicode_Category_LO;
		case 0x1A04: return Unicode_Category_LO;
		case 0x1A05: return Unicode_Category_LO;
		case 0x1A06: return Unicode_Category_LO;
		case 0x1A07: return Unicode_Category_LO;
		case 0x1A08: return Unicode_Category_LO;
		case 0x1A09: return Unicode_Category_LO;
		case 0x1A0A: return Unicode_Category_LO;
		case 0x1A0B: return Unicode_Category_LO;
		case 0x1A0C: return Unicode_Category_LO;
		case 0x1A0D: return Unicode_Category_LO;
		case 0x1A0E: return Unicode_Category_LO;
		case 0x1A0F: return Unicode_Category_LO;
		case 0x1A10: return Unicode_Category_LO;
		case 0x1A11: return Unicode_Category_LO;
		case 0x1A12: return Unicode_Category_LO;
		case 0x1A13: return Unicode_Category_LO;
		case 0x1A14: return Unicode_Category_LO;
		case 0x1A15: return Unicode_Category_LO;
		case 0x1A16: return Unicode_Category_LO;
		case 0x1A17: return Unicode_Category_MN;
		case 0x1A18: return Unicode_Category_MN;
		case 0x1A19: return Unicode_Category_MC;
		case 0x1A1A: return Unicode_Category_MC;
		case 0x1A1B: return Unicode_Category_MN;
		case 0x1A1E: return Unicode_Category_PO;
		case 0x1A1F: return Unicode_Category_PO;
		case 0x1A20: return Unicode_Category_LO;
		case 0x1A21: return Unicode_Category_LO;
		case 0x1A22: return Unicode_Category_LO;
		case 0x1A23: return Unicode_Category_LO;
		case 0x1A24: return Unicode_Category_LO;
		case 0x1A25: return Unicode_Category_LO;
		case 0x1A26: return Unicode_Category_LO;
		case 0x1A27: return Unicode_Category_LO;
		case 0x1A28: return Unicode_Category_LO;
		case 0x1A29: return Unicode_Category_LO;
		case 0x1A2A: return Unicode_Category_LO;
		case 0x1A2B: return Unicode_Category_LO;
		case 0x1A2C: return Unicode_Category_LO;
		case 0x1A2D: return Unicode_Category_LO;
		case 0x1A2E: return Unicode_Category_LO;
		case 0x1A2F: return Unicode_Category_LO;
		case 0x1A30: return Unicode_Category_LO;
		case 0x1A31: return Unicode_Category_LO;
		case 0x1A32: return Unicode_Category_LO;
		case 0x1A33: return Unicode_Category_LO;
		case 0x1A34: return Unicode_Category_LO;
		case 0x1A35: return Unicode_Category_LO;
		case 0x1A36: return Unicode_Category_LO;
		case 0x1A37: return Unicode_Category_LO;
		case 0x1A38: return Unicode_Category_LO;
		case 0x1A39: return Unicode_Category_LO;
		case 0x1A3A: return Unicode_Category_LO;
		case 0x1A3B: return Unicode_Category_LO;
		case 0x1A3C: return Unicode_Category_LO;
		case 0x1A3D: return Unicode_Category_LO;
		case 0x1A3E: return Unicode_Category_LO;
		case 0x1A3F: return Unicode_Category_LO;
		case 0x1A40: return Unicode_Category_LO;
		case 0x1A41: return Unicode_Category_LO;
		case 0x1A42: return Unicode_Category_LO;
		case 0x1A43: return Unicode_Category_LO;
		case 0x1A44: return Unicode_Category_LO;
		case 0x1A45: return Unicode_Category_LO;
		case 0x1A46: return Unicode_Category_LO;
		case 0x1A47: return Unicode_Category_LO;
		case 0x1A48: return Unicode_Category_LO;
		case 0x1A49: return Unicode_Category_LO;
		case 0x1A4A: return Unicode_Category_LO;
		case 0x1A4B: return Unicode_Category_LO;
		case 0x1A4C: return Unicode_Category_LO;
		case 0x1A4D: return Unicode_Category_LO;
		case 0x1A4E: return Unicode_Category_LO;
		case 0x1A4F: return Unicode_Category_LO;
		case 0x1A50: return Unicode_Category_LO;
		case 0x1A51: return Unicode_Category_LO;
		case 0x1A52: return Unicode_Category_LO;
		case 0x1A53: return Unicode_Category_LO;
		case 0x1A54: return Unicode_Category_LO;
		case 0x1A55: return Unicode_Category_MC;
		case 0x1A56: return Unicode_Category_MN;
		case 0x1A57: return Unicode_Category_MC;
		case 0x1A58: return Unicode_Category_MN;
		case 0x1A59: return Unicode_Category_MN;
		case 0x1A5A: return Unicode_Category_MN;
		case 0x1A5B: return Unicode_Category_MN;
		case 0x1A5C: return Unicode_Category_MN;
		case 0x1A5D: return Unicode_Category_MN;
		case 0x1A5E: return Unicode_Category_MN;
		case 0x1A60: return Unicode_Category_MN;
		case 0x1A61: return Unicode_Category_MC;
		case 0x1A62: return Unicode_Category_MN;
		case 0x1A63: return Unicode_Category_MC;
		case 0x1A64: return Unicode_Category_MC;
		case 0x1A65: return Unicode_Category_MN;
		case 0x1A66: return Unicode_Category_MN;
		case 0x1A67: return Unicode_Category_MN;
		case 0x1A68: return Unicode_Category_MN;
		case 0x1A69: return Unicode_Category_MN;
		case 0x1A6A: return Unicode_Category_MN;
		case 0x1A6B: return Unicode_Category_MN;
		case 0x1A6C: return Unicode_Category_MN;
		case 0x1A6D: return Unicode_Category_MC;
		case 0x1A6E: return Unicode_Category_MC;
		case 0x1A6F: return Unicode_Category_MC;
		case 0x1A70: return Unicode_Category_MC;
		case 0x1A71: return Unicode_Category_MC;
		case 0x1A72: return Unicode_Category_MC;
		case 0x1A73: return Unicode_Category_MN;
		case 0x1A74: return Unicode_Category_MN;
		case 0x1A75: return Unicode_Category_MN;
		case 0x1A76: return Unicode_Category_MN;
		case 0x1A77: return Unicode_Category_MN;
		case 0x1A78: return Unicode_Category_MN;
		case 0x1A79: return Unicode_Category_MN;
		case 0x1A7A: return Unicode_Category_MN;
		case 0x1A7B: return Unicode_Category_MN;
		case 0x1A7C: return Unicode_Category_MN;
		case 0x1A7F: return Unicode_Category_MN;
		case 0x1A80: return Unicode_Category_ND;
		case 0x1A81: return Unicode_Category_ND;
		case 0x1A82: return Unicode_Category_ND;
		case 0x1A83: return Unicode_Category_ND;
		case 0x1A84: return Unicode_Category_ND;
		case 0x1A85: return Unicode_Category_ND;
		case 0x1A86: return Unicode_Category_ND;
		case 0x1A87: return Unicode_Category_ND;
		case 0x1A88: return Unicode_Category_ND;
		case 0x1A89: return Unicode_Category_ND;
		case 0x1A90: return Unicode_Category_ND;
		case 0x1A91: return Unicode_Category_ND;
		case 0x1A92: return Unicode_Category_ND;
		case 0x1A93: return Unicode_Category_ND;
		case 0x1A94: return Unicode_Category_ND;
		case 0x1A95: return Unicode_Category_ND;
		case 0x1A96: return Unicode_Category_ND;
		case 0x1A97: return Unicode_Category_ND;
		case 0x1A98: return Unicode_Category_ND;
		case 0x1A99: return Unicode_Category_ND;
		case 0x1AA0: return Unicode_Category_PO;
		case 0x1AA1: return Unicode_Category_PO;
		case 0x1AA2: return Unicode_Category_PO;
		case 0x1AA3: return Unicode_Category_PO;
		case 0x1AA4: return Unicode_Category_PO;
		case 0x1AA5: return Unicode_Category_PO;
		case 0x1AA6: return Unicode_Category_PO;
		case 0x1AA7: return Unicode_Category_LM;
		case 0x1AA8: return Unicode_Category_PO;
		case 0x1AA9: return Unicode_Category_PO;
		case 0x1AAA: return Unicode_Category_PO;
		case 0x1AAB: return Unicode_Category_PO;
		case 0x1AAC: return Unicode_Category_PO;
		case 0x1AAD: return Unicode_Category_PO;
		case 0x1AB0: return Unicode_Category_MN;
		case 0x1AB1: return Unicode_Category_MN;
		case 0x1AB2: return Unicode_Category_MN;
		case 0x1AB3: return Unicode_Category_MN;
		case 0x1AB4: return Unicode_Category_MN;
		case 0x1AB5: return Unicode_Category_MN;
		case 0x1AB6: return Unicode_Category_MN;
		case 0x1AB7: return Unicode_Category_MN;
		case 0x1AB8: return Unicode_Category_MN;
		case 0x1AB9: return Unicode_Category_MN;
		case 0x1ABA: return Unicode_Category_MN;
		case 0x1ABB: return Unicode_Category_MN;
		case 0x1ABC: return Unicode_Category_MN;
		case 0x1ABD: return Unicode_Category_MN;
		case 0x1ABE: return Unicode_Category_ME;
		case 0x1ABF: return Unicode_Category_MN;
		case 0x1AC0: return Unicode_Category_MN;
		case 0x1B00: return Unicode_Category_MN;
		case 0x1B01: return Unicode_Category_MN;
		case 0x1B02: return Unicode_Category_MN;
		case 0x1B03: return Unicode_Category_MN;
		case 0x1B04: return Unicode_Category_MC;
		case 0x1B05: return Unicode_Category_LO;
		case 0x1B06: return Unicode_Category_LO;
		case 0x1B07: return Unicode_Category_LO;
		case 0x1B08: return Unicode_Category_LO;
		case 0x1B09: return Unicode_Category_LO;
		case 0x1B0A: return Unicode_Category_LO;
		case 0x1B0B: return Unicode_Category_LO;
		case 0x1B0C: return Unicode_Category_LO;
		case 0x1B0D: return Unicode_Category_LO;
		case 0x1B0E: return Unicode_Category_LO;
		case 0x1B0F: return Unicode_Category_LO;
		case 0x1B10: return Unicode_Category_LO;
		case 0x1B11: return Unicode_Category_LO;
		case 0x1B12: return Unicode_Category_LO;
		case 0x1B13: return Unicode_Category_LO;
		case 0x1B14: return Unicode_Category_LO;
		case 0x1B15: return Unicode_Category_LO;
		case 0x1B16: return Unicode_Category_LO;
		case 0x1B17: return Unicode_Category_LO;
		case 0x1B18: return Unicode_Category_LO;
		case 0x1B19: return Unicode_Category_LO;
		case 0x1B1A: return Unicode_Category_LO;
		case 0x1B1B: return Unicode_Category_LO;
		case 0x1B1C: return Unicode_Category_LO;
		case 0x1B1D: return Unicode_Category_LO;
		case 0x1B1E: return Unicode_Category_LO;
		case 0x1B1F: return Unicode_Category_LO;
		case 0x1B20: return Unicode_Category_LO;
		case 0x1B21: return Unicode_Category_LO;
		case 0x1B22: return Unicode_Category_LO;
		case 0x1B23: return Unicode_Category_LO;
		case 0x1B24: return Unicode_Category_LO;
		case 0x1B25: return Unicode_Category_LO;
		case 0x1B26: return Unicode_Category_LO;
		case 0x1B27: return Unicode_Category_LO;
		case 0x1B28: return Unicode_Category_LO;
		case 0x1B29: return Unicode_Category_LO;
		case 0x1B2A: return Unicode_Category_LO;
		case 0x1B2B: return Unicode_Category_LO;
		case 0x1B2C: return Unicode_Category_LO;
		case 0x1B2D: return Unicode_Category_LO;
		case 0x1B2E: return Unicode_Category_LO;
		case 0x1B2F: return Unicode_Category_LO;
		case 0x1B30: return Unicode_Category_LO;
		case 0x1B31: return Unicode_Category_LO;
		case 0x1B32: return Unicode_Category_LO;
		case 0x1B33: return Unicode_Category_LO;
		case 0x1B34: return Unicode_Category_MN;
		case 0x1B35: return Unicode_Category_MC;
		case 0x1B36: return Unicode_Category_MN;
		case 0x1B37: return Unicode_Category_MN;
		case 0x1B38: return Unicode_Category_MN;
		case 0x1B39: return Unicode_Category_MN;
		case 0x1B3A: return Unicode_Category_MN;
		case 0x1B3B: return Unicode_Category_MC;
		case 0x1B3C: return Unicode_Category_MN;
		case 0x1B3D: return Unicode_Category_MC;
		case 0x1B3E: return Unicode_Category_MC;
		case 0x1B3F: return Unicode_Category_MC;
		case 0x1B40: return Unicode_Category_MC;
		case 0x1B41: return Unicode_Category_MC;
		case 0x1B42: return Unicode_Category_MN;
		case 0x1B43: return Unicode_Category_MC;
		case 0x1B44: return Unicode_Category_MC;
		case 0x1B45: return Unicode_Category_LO;
		case 0x1B46: return Unicode_Category_LO;
		case 0x1B47: return Unicode_Category_LO;
		case 0x1B48: return Unicode_Category_LO;
		case 0x1B49: return Unicode_Category_LO;
		case 0x1B4A: return Unicode_Category_LO;
		case 0x1B4B: return Unicode_Category_LO;
		case 0x1B50: return Unicode_Category_ND;
		case 0x1B51: return Unicode_Category_ND;
		case 0x1B52: return Unicode_Category_ND;
		case 0x1B53: return Unicode_Category_ND;
		case 0x1B54: return Unicode_Category_ND;
		case 0x1B55: return Unicode_Category_ND;
		case 0x1B56: return Unicode_Category_ND;
		case 0x1B57: return Unicode_Category_ND;
		case 0x1B58: return Unicode_Category_ND;
		case 0x1B59: return Unicode_Category_ND;
		case 0x1B5A: return Unicode_Category_PO;
		case 0x1B5B: return Unicode_Category_PO;
		case 0x1B5C: return Unicode_Category_PO;
		case 0x1B5D: return Unicode_Category_PO;
		case 0x1B5E: return Unicode_Category_PO;
		case 0x1B5F: return Unicode_Category_PO;
		case 0x1B60: return Unicode_Category_PO;
		case 0x1B61: return Unicode_Category_SO;
		case 0x1B62: return Unicode_Category_SO;
		case 0x1B63: return Unicode_Category_SO;
		case 0x1B64: return Unicode_Category_SO;
		case 0x1B65: return Unicode_Category_SO;
		case 0x1B66: return Unicode_Category_SO;
		case 0x1B67: return Unicode_Category_SO;
		case 0x1B68: return Unicode_Category_SO;
		case 0x1B69: return Unicode_Category_SO;
		case 0x1B6A: return Unicode_Category_SO;
		case 0x1B6B: return Unicode_Category_MN;
		case 0x1B6C: return Unicode_Category_MN;
		case 0x1B6D: return Unicode_Category_MN;
		case 0x1B6E: return Unicode_Category_MN;
		case 0x1B6F: return Unicode_Category_MN;
		case 0x1B70: return Unicode_Category_MN;
		case 0x1B71: return Unicode_Category_MN;
		case 0x1B72: return Unicode_Category_MN;
		case 0x1B73: return Unicode_Category_MN;
		case 0x1B74: return Unicode_Category_SO;
		case 0x1B75: return Unicode_Category_SO;
		case 0x1B76: return Unicode_Category_SO;
		case 0x1B77: return Unicode_Category_SO;
		case 0x1B78: return Unicode_Category_SO;
		case 0x1B79: return Unicode_Category_SO;
		case 0x1B7A: return Unicode_Category_SO;
		case 0x1B7B: return Unicode_Category_SO;
		case 0x1B7C: return Unicode_Category_SO;
		case 0x1B80: return Unicode_Category_MN;
		case 0x1B81: return Unicode_Category_MN;
		case 0x1B82: return Unicode_Category_MC;
		case 0x1B83: return Unicode_Category_LO;
		case 0x1B84: return Unicode_Category_LO;
		case 0x1B85: return Unicode_Category_LO;
		case 0x1B86: return Unicode_Category_LO;
		case 0x1B87: return Unicode_Category_LO;
		case 0x1B88: return Unicode_Category_LO;
		case 0x1B89: return Unicode_Category_LO;
		case 0x1B8A: return Unicode_Category_LO;
		case 0x1B8B: return Unicode_Category_LO;
		case 0x1B8C: return Unicode_Category_LO;
		case 0x1B8D: return Unicode_Category_LO;
		case 0x1B8E: return Unicode_Category_LO;
		case 0x1B8F: return Unicode_Category_LO;
		case 0x1B90: return Unicode_Category_LO;
		case 0x1B91: return Unicode_Category_LO;
		case 0x1B92: return Unicode_Category_LO;
		case 0x1B93: return Unicode_Category_LO;
		case 0x1B94: return Unicode_Category_LO;
		case 0x1B95: return Unicode_Category_LO;
		case 0x1B96: return Unicode_Category_LO;
		case 0x1B97: return Unicode_Category_LO;
		case 0x1B98: return Unicode_Category_LO;
		case 0x1B99: return Unicode_Category_LO;
		case 0x1B9A: return Unicode_Category_LO;
		case 0x1B9B: return Unicode_Category_LO;
		case 0x1B9C: return Unicode_Category_LO;
		case 0x1B9D: return Unicode_Category_LO;
		case 0x1B9E: return Unicode_Category_LO;
		case 0x1B9F: return Unicode_Category_LO;
		case 0x1BA0: return Unicode_Category_LO;
		case 0x1BA1: return Unicode_Category_MC;
		case 0x1BA2: return Unicode_Category_MN;
		case 0x1BA3: return Unicode_Category_MN;
		case 0x1BA4: return Unicode_Category_MN;
		case 0x1BA5: return Unicode_Category_MN;
		case 0x1BA6: return Unicode_Category_MC;
		case 0x1BA7: return Unicode_Category_MC;
		case 0x1BA8: return Unicode_Category_MN;
		case 0x1BA9: return Unicode_Category_MN;
		case 0x1BAA: return Unicode_Category_MC;
		case 0x1BAB: return Unicode_Category_MN;
		case 0x1BAC: return Unicode_Category_MN;
		case 0x1BAD: return Unicode_Category_MN;
		case 0x1BAE: return Unicode_Category_LO;
		case 0x1BAF: return Unicode_Category_LO;
		case 0x1BB0: return Unicode_Category_ND;
		case 0x1BB1: return Unicode_Category_ND;
		case 0x1BB2: return Unicode_Category_ND;
		case 0x1BB3: return Unicode_Category_ND;
		case 0x1BB4: return Unicode_Category_ND;
		case 0x1BB5: return Unicode_Category_ND;
		case 0x1BB6: return Unicode_Category_ND;
		case 0x1BB7: return Unicode_Category_ND;
		case 0x1BB8: return Unicode_Category_ND;
		case 0x1BB9: return Unicode_Category_ND;
		case 0x1BBA: return Unicode_Category_LO;
		case 0x1BBB: return Unicode_Category_LO;
		case 0x1BBC: return Unicode_Category_LO;
		case 0x1BBD: return Unicode_Category_LO;
		case 0x1BBE: return Unicode_Category_LO;
		case 0x1BBF: return Unicode_Category_LO;
		case 0x1BC0: return Unicode_Category_LO;
		case 0x1BC1: return Unicode_Category_LO;
		case 0x1BC2: return Unicode_Category_LO;
		case 0x1BC3: return Unicode_Category_LO;
		case 0x1BC4: return Unicode_Category_LO;
		case 0x1BC5: return Unicode_Category_LO;
		case 0x1BC6: return Unicode_Category_LO;
		case 0x1BC7: return Unicode_Category_LO;
		case 0x1BC8: return Unicode_Category_LO;
		case 0x1BC9: return Unicode_Category_LO;
		case 0x1BCA: return Unicode_Category_LO;
		case 0x1BCB: return Unicode_Category_LO;
		case 0x1BCC: return Unicode_Category_LO;
		case 0x1BCD: return Unicode_Category_LO;
		case 0x1BCE: return Unicode_Category_LO;
		case 0x1BCF: return Unicode_Category_LO;
		case 0x1BD0: return Unicode_Category_LO;
		case 0x1BD1: return Unicode_Category_LO;
		case 0x1BD2: return Unicode_Category_LO;
		case 0x1BD3: return Unicode_Category_LO;
		case 0x1BD4: return Unicode_Category_LO;
		case 0x1BD5: return Unicode_Category_LO;
		case 0x1BD6: return Unicode_Category_LO;
		case 0x1BD7: return Unicode_Category_LO;
		case 0x1BD8: return Unicode_Category_LO;
		case 0x1BD9: return Unicode_Category_LO;
		case 0x1BDA: return Unicode_Category_LO;
		case 0x1BDB: return Unicode_Category_LO;
		case 0x1BDC: return Unicode_Category_LO;
		case 0x1BDD: return Unicode_Category_LO;
		case 0x1BDE: return Unicode_Category_LO;
		case 0x1BDF: return Unicode_Category_LO;
		case 0x1BE0: return Unicode_Category_LO;
		case 0x1BE1: return Unicode_Category_LO;
		case 0x1BE2: return Unicode_Category_LO;
		case 0x1BE3: return Unicode_Category_LO;
		case 0x1BE4: return Unicode_Category_LO;
		case 0x1BE5: return Unicode_Category_LO;
		case 0x1BE6: return Unicode_Category_MN;
		case 0x1BE7: return Unicode_Category_MC;
		case 0x1BE8: return Unicode_Category_MN;
		case 0x1BE9: return Unicode_Category_MN;
		case 0x1BEA: return Unicode_Category_MC;
		case 0x1BEB: return Unicode_Category_MC;
		case 0x1BEC: return Unicode_Category_MC;
		case 0x1BED: return Unicode_Category_MN;
		case 0x1BEE: return Unicode_Category_MC;
		case 0x1BEF: return Unicode_Category_MN;
		case 0x1BF0: return Unicode_Category_MN;
		case 0x1BF1: return Unicode_Category_MN;
		case 0x1BF2: return Unicode_Category_MC;
		case 0x1BF3: return Unicode_Category_MC;
		case 0x1BFC: return Unicode_Category_PO;
		case 0x1BFD: return Unicode_Category_PO;
		case 0x1BFE: return Unicode_Category_PO;
		case 0x1BFF: return Unicode_Category_PO;
		case 0x1C00: return Unicode_Category_LO;
		case 0x1C01: return Unicode_Category_LO;
		case 0x1C02: return Unicode_Category_LO;
		case 0x1C03: return Unicode_Category_LO;
		case 0x1C04: return Unicode_Category_LO;
		case 0x1C05: return Unicode_Category_LO;
		case 0x1C06: return Unicode_Category_LO;
		case 0x1C07: return Unicode_Category_LO;
		case 0x1C08: return Unicode_Category_LO;
		case 0x1C09: return Unicode_Category_LO;
		case 0x1C0A: return Unicode_Category_LO;
		case 0x1C0B: return Unicode_Category_LO;
		case 0x1C0C: return Unicode_Category_LO;
		case 0x1C0D: return Unicode_Category_LO;
		case 0x1C0E: return Unicode_Category_LO;
		case 0x1C0F: return Unicode_Category_LO;
		case 0x1C10: return Unicode_Category_LO;
		case 0x1C11: return Unicode_Category_LO;
		case 0x1C12: return Unicode_Category_LO;
		case 0x1C13: return Unicode_Category_LO;
		case 0x1C14: return Unicode_Category_LO;
		case 0x1C15: return Unicode_Category_LO;
		case 0x1C16: return Unicode_Category_LO;
		case 0x1C17: return Unicode_Category_LO;
		case 0x1C18: return Unicode_Category_LO;
		case 0x1C19: return Unicode_Category_LO;
		case 0x1C1A: return Unicode_Category_LO;
		case 0x1C1B: return Unicode_Category_LO;
		case 0x1C1C: return Unicode_Category_LO;
		case 0x1C1D: return Unicode_Category_LO;
		case 0x1C1E: return Unicode_Category_LO;
		case 0x1C1F: return Unicode_Category_LO;
		case 0x1C20: return Unicode_Category_LO;
		case 0x1C21: return Unicode_Category_LO;
		case 0x1C22: return Unicode_Category_LO;
		case 0x1C23: return Unicode_Category_LO;
		case 0x1C24: return Unicode_Category_MC;
		case 0x1C25: return Unicode_Category_MC;
		case 0x1C26: return Unicode_Category_MC;
		case 0x1C27: return Unicode_Category_MC;
		case 0x1C28: return Unicode_Category_MC;
		case 0x1C29: return Unicode_Category_MC;
		case 0x1C2A: return Unicode_Category_MC;
		case 0x1C2B: return Unicode_Category_MC;
		case 0x1C2C: return Unicode_Category_MN;
		case 0x1C2D: return Unicode_Category_MN;
		case 0x1C2E: return Unicode_Category_MN;
		case 0x1C2F: return Unicode_Category_MN;
		case 0x1C30: return Unicode_Category_MN;
		case 0x1C31: return Unicode_Category_MN;
		case 0x1C32: return Unicode_Category_MN;
		case 0x1C33: return Unicode_Category_MN;
		case 0x1C34: return Unicode_Category_MC;
		case 0x1C35: return Unicode_Category_MC;
		case 0x1C36: return Unicode_Category_MN;
		case 0x1C37: return Unicode_Category_MN;
		case 0x1C3B: return Unicode_Category_PO;
		case 0x1C3C: return Unicode_Category_PO;
		case 0x1C3D: return Unicode_Category_PO;
		case 0x1C3E: return Unicode_Category_PO;
		case 0x1C3F: return Unicode_Category_PO;
		case 0x1C40: return Unicode_Category_ND;
		case 0x1C41: return Unicode_Category_ND;
		case 0x1C42: return Unicode_Category_ND;
		case 0x1C43: return Unicode_Category_ND;
		case 0x1C44: return Unicode_Category_ND;
		case 0x1C45: return Unicode_Category_ND;
		case 0x1C46: return Unicode_Category_ND;
		case 0x1C47: return Unicode_Category_ND;
		case 0x1C48: return Unicode_Category_ND;
		case 0x1C49: return Unicode_Category_ND;
		case 0x1C4D: return Unicode_Category_LO;
		case 0x1C4E: return Unicode_Category_LO;
		case 0x1C4F: return Unicode_Category_LO;
		case 0x1C50: return Unicode_Category_ND;
		case 0x1C51: return Unicode_Category_ND;
		case 0x1C52: return Unicode_Category_ND;
		case 0x1C53: return Unicode_Category_ND;
		case 0x1C54: return Unicode_Category_ND;
		case 0x1C55: return Unicode_Category_ND;
		case 0x1C56: return Unicode_Category_ND;
		case 0x1C57: return Unicode_Category_ND;
		case 0x1C58: return Unicode_Category_ND;
		case 0x1C59: return Unicode_Category_ND;
		case 0x1C5A: return Unicode_Category_LO;
		case 0x1C5B: return Unicode_Category_LO;
		case 0x1C5C: return Unicode_Category_LO;
		case 0x1C5D: return Unicode_Category_LO;
		case 0x1C5E: return Unicode_Category_LO;
		case 0x1C5F: return Unicode_Category_LO;
		case 0x1C60: return Unicode_Category_LO;
		case 0x1C61: return Unicode_Category_LO;
		case 0x1C62: return Unicode_Category_LO;
		case 0x1C63: return Unicode_Category_LO;
		case 0x1C64: return Unicode_Category_LO;
		case 0x1C65: return Unicode_Category_LO;
		case 0x1C66: return Unicode_Category_LO;
		case 0x1C67: return Unicode_Category_LO;
		case 0x1C68: return Unicode_Category_LO;
		case 0x1C69: return Unicode_Category_LO;
		case 0x1C6A: return Unicode_Category_LO;
		case 0x1C6B: return Unicode_Category_LO;
		case 0x1C6C: return Unicode_Category_LO;
		case 0x1C6D: return Unicode_Category_LO;
		case 0x1C6E: return Unicode_Category_LO;
		case 0x1C6F: return Unicode_Category_LO;
		case 0x1C70: return Unicode_Category_LO;
		case 0x1C71: return Unicode_Category_LO;
		case 0x1C72: return Unicode_Category_LO;
		case 0x1C73: return Unicode_Category_LO;
		case 0x1C74: return Unicode_Category_LO;
		case 0x1C75: return Unicode_Category_LO;
		case 0x1C76: return Unicode_Category_LO;
		case 0x1C77: return Unicode_Category_LO;
		case 0x1C78: return Unicode_Category_LM;
		case 0x1C79: return Unicode_Category_LM;
		case 0x1C7A: return Unicode_Category_LM;
		case 0x1C7B: return Unicode_Category_LM;
		case 0x1C7C: return Unicode_Category_LM;
		case 0x1C7D: return Unicode_Category_LM;
		case 0x1C7E: return Unicode_Category_PO;
		case 0x1C7F: return Unicode_Category_PO;
		case 0x1C80: return Unicode_Category_LL;
		case 0x1C81: return Unicode_Category_LL;
		case 0x1C82: return Unicode_Category_LL;
		case 0x1C83: return Unicode_Category_LL;
		case 0x1C84: return Unicode_Category_LL;
		case 0x1C85: return Unicode_Category_LL;
		case 0x1C86: return Unicode_Category_LL;
		case 0x1C87: return Unicode_Category_LL;
		case 0x1C88: return Unicode_Category_LL;
		case 0x1C90: return Unicode_Category_LU;
		case 0x1C91: return Unicode_Category_LU;
		case 0x1C92: return Unicode_Category_LU;
		case 0x1C93: return Unicode_Category_LU;
		case 0x1C94: return Unicode_Category_LU;
		case 0x1C95: return Unicode_Category_LU;
		case 0x1C96: return Unicode_Category_LU;
		case 0x1C97: return Unicode_Category_LU;
		case 0x1C98: return Unicode_Category_LU;
		case 0x1C99: return Unicode_Category_LU;
		case 0x1C9A: return Unicode_Category_LU;
		case 0x1C9B: return Unicode_Category_LU;
		case 0x1C9C: return Unicode_Category_LU;
		case 0x1C9D: return Unicode_Category_LU;
		case 0x1C9E: return Unicode_Category_LU;
		case 0x1C9F: return Unicode_Category_LU;
		case 0x1CA0: return Unicode_Category_LU;
		case 0x1CA1: return Unicode_Category_LU;
		case 0x1CA2: return Unicode_Category_LU;
		case 0x1CA3: return Unicode_Category_LU;
		case 0x1CA4: return Unicode_Category_LU;
		case 0x1CA5: return Unicode_Category_LU;
		case 0x1CA6: return Unicode_Category_LU;
		case 0x1CA7: return Unicode_Category_LU;
		case 0x1CA8: return Unicode_Category_LU;
		case 0x1CA9: return Unicode_Category_LU;
		case 0x1CAA: return Unicode_Category_LU;
		case 0x1CAB: return Unicode_Category_LU;
		case 0x1CAC: return Unicode_Category_LU;
		case 0x1CAD: return Unicode_Category_LU;
		case 0x1CAE: return Unicode_Category_LU;
		case 0x1CAF: return Unicode_Category_LU;
		case 0x1CB0: return Unicode_Category_LU;
		case 0x1CB1: return Unicode_Category_LU;
		case 0x1CB2: return Unicode_Category_LU;
		case 0x1CB3: return Unicode_Category_LU;
		case 0x1CB4: return Unicode_Category_LU;
		case 0x1CB5: return Unicode_Category_LU;
		case 0x1CB6: return Unicode_Category_LU;
		case 0x1CB7: return Unicode_Category_LU;
		case 0x1CB8: return Unicode_Category_LU;
		case 0x1CB9: return Unicode_Category_LU;
		case 0x1CBA: return Unicode_Category_LU;
		case 0x1CBD: return Unicode_Category_LU;
		case 0x1CBE: return Unicode_Category_LU;
		case 0x1CBF: return Unicode_Category_LU;
		case 0x1CC0: return Unicode_Category_PO;
		case 0x1CC1: return Unicode_Category_PO;
		case 0x1CC2: return Unicode_Category_PO;
		case 0x1CC3: return Unicode_Category_PO;
		case 0x1CC4: return Unicode_Category_PO;
		case 0x1CC5: return Unicode_Category_PO;
		case 0x1CC6: return Unicode_Category_PO;
		case 0x1CC7: return Unicode_Category_PO;
		case 0x1CD0: return Unicode_Category_MN;
		case 0x1CD1: return Unicode_Category_MN;
		case 0x1CD2: return Unicode_Category_MN;
		case 0x1CD3: return Unicode_Category_PO;
		case 0x1CD4: return Unicode_Category_MN;
		case 0x1CD5: return Unicode_Category_MN;
		case 0x1CD6: return Unicode_Category_MN;
		case 0x1CD7: return Unicode_Category_MN;
		case 0x1CD8: return Unicode_Category_MN;
		case 0x1CD9: return Unicode_Category_MN;
		case 0x1CDA: return Unicode_Category_MN;
		case 0x1CDB: return Unicode_Category_MN;
		case 0x1CDC: return Unicode_Category_MN;
		case 0x1CDD: return Unicode_Category_MN;
		case 0x1CDE: return Unicode_Category_MN;
		case 0x1CDF: return Unicode_Category_MN;
		case 0x1CE0: return Unicode_Category_MN;
		case 0x1CE1: return Unicode_Category_MC;
		case 0x1CE2: return Unicode_Category_MN;
		case 0x1CE3: return Unicode_Category_MN;
		case 0x1CE4: return Unicode_Category_MN;
		case 0x1CE5: return Unicode_Category_MN;
		case 0x1CE6: return Unicode_Category_MN;
		case 0x1CE7: return Unicode_Category_MN;
		case 0x1CE8: return Unicode_Category_MN;
		case 0x1CE9: return Unicode_Category_LO;
		case 0x1CEA: return Unicode_Category_LO;
		case 0x1CEB: return Unicode_Category_LO;
		case 0x1CEC: return Unicode_Category_LO;
		case 0x1CED: return Unicode_Category_MN;
		case 0x1CEE: return Unicode_Category_LO;
		case 0x1CEF: return Unicode_Category_LO;
		case 0x1CF0: return Unicode_Category_LO;
		case 0x1CF1: return Unicode_Category_LO;
		case 0x1CF2: return Unicode_Category_LO;
		case 0x1CF3: return Unicode_Category_LO;
		case 0x1CF4: return Unicode_Category_MN;
		case 0x1CF5: return Unicode_Category_LO;
		case 0x1CF6: return Unicode_Category_LO;
		case 0x1CF7: return Unicode_Category_MC;
		case 0x1CF8: return Unicode_Category_MN;
		case 0x1CF9: return Unicode_Category_MN;
		case 0x1CFA: return Unicode_Category_LO;
		case 0x1D00: return Unicode_Category_LL;
		case 0x1D01: return Unicode_Category_LL;
		case 0x1D02: return Unicode_Category_LL;
		case 0x1D03: return Unicode_Category_LL;
		case 0x1D04: return Unicode_Category_LL;
		case 0x1D05: return Unicode_Category_LL;
		case 0x1D06: return Unicode_Category_LL;
		case 0x1D07: return Unicode_Category_LL;
		case 0x1D08: return Unicode_Category_LL;
		case 0x1D09: return Unicode_Category_LL;
		case 0x1D0A: return Unicode_Category_LL;
		case 0x1D0B: return Unicode_Category_LL;
		case 0x1D0C: return Unicode_Category_LL;
		case 0x1D0D: return Unicode_Category_LL;
		case 0x1D0E: return Unicode_Category_LL;
		case 0x1D0F: return Unicode_Category_LL;
		case 0x1D10: return Unicode_Category_LL;
		case 0x1D11: return Unicode_Category_LL;
		case 0x1D12: return Unicode_Category_LL;
		case 0x1D13: return Unicode_Category_LL;
		case 0x1D14: return Unicode_Category_LL;
		case 0x1D15: return Unicode_Category_LL;
		case 0x1D16: return Unicode_Category_LL;
		case 0x1D17: return Unicode_Category_LL;
		case 0x1D18: return Unicode_Category_LL;
		case 0x1D19: return Unicode_Category_LL;
		case 0x1D1A: return Unicode_Category_LL;
		case 0x1D1B: return Unicode_Category_LL;
		case 0x1D1C: return Unicode_Category_LL;
		case 0x1D1D: return Unicode_Category_LL;
		case 0x1D1E: return Unicode_Category_LL;
		case 0x1D1F: return Unicode_Category_LL;
		case 0x1D20: return Unicode_Category_LL;
		case 0x1D21: return Unicode_Category_LL;
		case 0x1D22: return Unicode_Category_LL;
		case 0x1D23: return Unicode_Category_LL;
		case 0x1D24: return Unicode_Category_LL;
		case 0x1D25: return Unicode_Category_LL;
		case 0x1D26: return Unicode_Category_LL;
		case 0x1D27: return Unicode_Category_LL;
		case 0x1D28: return Unicode_Category_LL;
		case 0x1D29: return Unicode_Category_LL;
		case 0x1D2A: return Unicode_Category_LL;
		case 0x1D2B: return Unicode_Category_LL;
		case 0x1D2C: return Unicode_Category_LM;
		case 0x1D2D: return Unicode_Category_LM;
		case 0x1D2E: return Unicode_Category_LM;
		case 0x1D2F: return Unicode_Category_LM;
		case 0x1D30: return Unicode_Category_LM;
		case 0x1D31: return Unicode_Category_LM;
		case 0x1D32: return Unicode_Category_LM;
		case 0x1D33: return Unicode_Category_LM;
		case 0x1D34: return Unicode_Category_LM;
		case 0x1D35: return Unicode_Category_LM;
		case 0x1D36: return Unicode_Category_LM;
		case 0x1D37: return Unicode_Category_LM;
		case 0x1D38: return Unicode_Category_LM;
		case 0x1D39: return Unicode_Category_LM;
		case 0x1D3A: return Unicode_Category_LM;
		case 0x1D3B: return Unicode_Category_LM;
		case 0x1D3C: return Unicode_Category_LM;
		case 0x1D3D: return Unicode_Category_LM;
		case 0x1D3E: return Unicode_Category_LM;
		case 0x1D3F: return Unicode_Category_LM;
		case 0x1D40: return Unicode_Category_LM;
		case 0x1D41: return Unicode_Category_LM;
		case 0x1D42: return Unicode_Category_LM;
		case 0x1D43: return Unicode_Category_LM;
		case 0x1D44: return Unicode_Category_LM;
		case 0x1D45: return Unicode_Category_LM;
		case 0x1D46: return Unicode_Category_LM;
		case 0x1D47: return Unicode_Category_LM;
		case 0x1D48: return Unicode_Category_LM;
		case 0x1D49: return Unicode_Category_LM;
		case 0x1D4A: return Unicode_Category_LM;
		case 0x1D4B: return Unicode_Category_LM;
		case 0x1D4C: return Unicode_Category_LM;
		case 0x1D4D: return Unicode_Category_LM;
		case 0x1D4E: return Unicode_Category_LM;
		case 0x1D4F: return Unicode_Category_LM;
		case 0x1D50: return Unicode_Category_LM;
		case 0x1D51: return Unicode_Category_LM;
		case 0x1D52: return Unicode_Category_LM;
		case 0x1D53: return Unicode_Category_LM;
		case 0x1D54: return Unicode_Category_LM;
		case 0x1D55: return Unicode_Category_LM;
		case 0x1D56: return Unicode_Category_LM;
		case 0x1D57: return Unicode_Category_LM;
		case 0x1D58: return Unicode_Category_LM;
		case 0x1D59: return Unicode_Category_LM;
		case 0x1D5A: return Unicode_Category_LM;
		case 0x1D5B: return Unicode_Category_LM;
		case 0x1D5C: return Unicode_Category_LM;
		case 0x1D5D: return Unicode_Category_LM;
		case 0x1D5E: return Unicode_Category_LM;
		case 0x1D5F: return Unicode_Category_LM;
		case 0x1D60: return Unicode_Category_LM;
		case 0x1D61: return Unicode_Category_LM;
		case 0x1D62: return Unicode_Category_LM;
		case 0x1D63: return Unicode_Category_LM;
		case 0x1D64: return Unicode_Category_LM;
		case 0x1D65: return Unicode_Category_LM;
		case 0x1D66: return Unicode_Category_LM;
		case 0x1D67: return Unicode_Category_LM;
		case 0x1D68: return Unicode_Category_LM;
		case 0x1D69: return Unicode_Category_LM;
		case 0x1D6A: return Unicode_Category_LM;
		case 0x1D6B: return Unicode_Category_LL;
		case 0x1D6C: return Unicode_Category_LL;
		case 0x1D6D: return Unicode_Category_LL;
		case 0x1D6E: return Unicode_Category_LL;
		case 0x1D6F: return Unicode_Category_LL;
		case 0x1D70: return Unicode_Category_LL;
		case 0x1D71: return Unicode_Category_LL;
		case 0x1D72: return Unicode_Category_LL;
		case 0x1D73: return Unicode_Category_LL;
		case 0x1D74: return Unicode_Category_LL;
		case 0x1D75: return Unicode_Category_LL;
		case 0x1D76: return Unicode_Category_LL;
		case 0x1D77: return Unicode_Category_LL;
		case 0x1D78: return Unicode_Category_LM;
		case 0x1D79: return Unicode_Category_LL;
		case 0x1D7A: return Unicode_Category_LL;
		case 0x1D7B: return Unicode_Category_LL;
		case 0x1D7C: return Unicode_Category_LL;
		case 0x1D7D: return Unicode_Category_LL;
		case 0x1D7E: return Unicode_Category_LL;
		case 0x1D7F: return Unicode_Category_LL;
		case 0x1D80: return Unicode_Category_LL;
		case 0x1D81: return Unicode_Category_LL;
		case 0x1D82: return Unicode_Category_LL;
		case 0x1D83: return Unicode_Category_LL;
		case 0x1D84: return Unicode_Category_LL;
		case 0x1D85: return Unicode_Category_LL;
		case 0x1D86: return Unicode_Category_LL;
		case 0x1D87: return Unicode_Category_LL;
		case 0x1D88: return Unicode_Category_LL;
		case 0x1D89: return Unicode_Category_LL;
		case 0x1D8A: return Unicode_Category_LL;
		case 0x1D8B: return Unicode_Category_LL;
		case 0x1D8C: return Unicode_Category_LL;
		case 0x1D8D: return Unicode_Category_LL;
		case 0x1D8E: return Unicode_Category_LL;
		case 0x1D8F: return Unicode_Category_LL;
		case 0x1D90: return Unicode_Category_LL;
		case 0x1D91: return Unicode_Category_LL;
		case 0x1D92: return Unicode_Category_LL;
		case 0x1D93: return Unicode_Category_LL;
		case 0x1D94: return Unicode_Category_LL;
		case 0x1D95: return Unicode_Category_LL;
		case 0x1D96: return Unicode_Category_LL;
		case 0x1D97: return Unicode_Category_LL;
		case 0x1D98: return Unicode_Category_LL;
		case 0x1D99: return Unicode_Category_LL;
		case 0x1D9A: return Unicode_Category_LL;
		case 0x1D9B: return Unicode_Category_LM;
		case 0x1D9C: return Unicode_Category_LM;
		case 0x1D9D: return Unicode_Category_LM;
		case 0x1D9E: return Unicode_Category_LM;
		case 0x1D9F: return Unicode_Category_LM;
		case 0x1DA0: return Unicode_Category_LM;
		case 0x1DA1: return Unicode_Category_LM;
		case 0x1DA2: return Unicode_Category_LM;
		case 0x1DA3: return Unicode_Category_LM;
		case 0x1DA4: return Unicode_Category_LM;
		case 0x1DA5: return Unicode_Category_LM;
		case 0x1DA6: return Unicode_Category_LM;
		case 0x1DA7: return Unicode_Category_LM;
		case 0x1DA8: return Unicode_Category_LM;
		case 0x1DA9: return Unicode_Category_LM;
		case 0x1DAA: return Unicode_Category_LM;
		case 0x1DAB: return Unicode_Category_LM;
		case 0x1DAC: return Unicode_Category_LM;
		case 0x1DAD: return Unicode_Category_LM;
		case 0x1DAE: return Unicode_Category_LM;
		case 0x1DAF: return Unicode_Category_LM;
		case 0x1DB0: return Unicode_Category_LM;
		case 0x1DB1: return Unicode_Category_LM;
		case 0x1DB2: return Unicode_Category_LM;
		case 0x1DB3: return Unicode_Category_LM;
		case 0x1DB4: return Unicode_Category_LM;
		case 0x1DB5: return Unicode_Category_LM;
		case 0x1DB6: return Unicode_Category_LM;
		case 0x1DB7: return Unicode_Category_LM;
		case 0x1DB8: return Unicode_Category_LM;
		case 0x1DB9: return Unicode_Category_LM;
		case 0x1DBA: return Unicode_Category_LM;
		case 0x1DBB: return Unicode_Category_LM;
		case 0x1DBC: return Unicode_Category_LM;
		case 0x1DBD: return Unicode_Category_LM;
		case 0x1DBE: return Unicode_Category_LM;
		case 0x1DBF: return Unicode_Category_LM;
		case 0x1DC0: return Unicode_Category_MN;
		case 0x1DC1: return Unicode_Category_MN;
		case 0x1DC2: return Unicode_Category_MN;
		case 0x1DC3: return Unicode_Category_MN;
		case 0x1DC4: return Unicode_Category_MN;
		case 0x1DC5: return Unicode_Category_MN;
		case 0x1DC6: return Unicode_Category_MN;
		case 0x1DC7: return Unicode_Category_MN;
		case 0x1DC8: return Unicode_Category_MN;
		case 0x1DC9: return Unicode_Category_MN;
		case 0x1DCA: return Unicode_Category_MN;
		case 0x1DCB: return Unicode_Category_MN;
		case 0x1DCC: return Unicode_Category_MN;
		case 0x1DCD: return Unicode_Category_MN;
		case 0x1DCE: return Unicode_Category_MN;
		case 0x1DCF: return Unicode_Category_MN;
		case 0x1DD0: return Unicode_Category_MN;
		case 0x1DD1: return Unicode_Category_MN;
		case 0x1DD2: return Unicode_Category_MN;
		case 0x1DD3: return Unicode_Category_MN;
		case 0x1DD4: return Unicode_Category_MN;
		case 0x1DD5: return Unicode_Category_MN;
		case 0x1DD6: return Unicode_Category_MN;
		case 0x1DD7: return Unicode_Category_MN;
		case 0x1DD8: return Unicode_Category_MN;
		case 0x1DD9: return Unicode_Category_MN;
		case 0x1DDA: return Unicode_Category_MN;
		case 0x1DDB: return Unicode_Category_MN;
		case 0x1DDC: return Unicode_Category_MN;
		case 0x1DDD: return Unicode_Category_MN;
		case 0x1DDE: return Unicode_Category_MN;
		case 0x1DDF: return Unicode_Category_MN;
		case 0x1DE0: return Unicode_Category_MN;
		case 0x1DE1: return Unicode_Category_MN;
		case 0x1DE2: return Unicode_Category_MN;
		case 0x1DE3: return Unicode_Category_MN;
		case 0x1DE4: return Unicode_Category_MN;
		case 0x1DE5: return Unicode_Category_MN;
		case 0x1DE6: return Unicode_Category_MN;
		case 0x1DE7: return Unicode_Category_MN;
		case 0x1DE8: return Unicode_Category_MN;
		case 0x1DE9: return Unicode_Category_MN;
		case 0x1DEA: return Unicode_Category_MN;
		case 0x1DEB: return Unicode_Category_MN;
		case 0x1DEC: return Unicode_Category_MN;
		case 0x1DED: return Unicode_Category_MN;
		case 0x1DEE: return Unicode_Category_MN;
		case 0x1DEF: return Unicode_Category_MN;
		case 0x1DF0: return Unicode_Category_MN;
		case 0x1DF1: return Unicode_Category_MN;
		case 0x1DF2: return Unicode_Category_MN;
		case 0x1DF3: return Unicode_Category_MN;
		case 0x1DF4: return Unicode_Category_MN;
		case 0x1DF5: return Unicode_Category_MN;
		case 0x1DF6: return Unicode_Category_MN;
		case 0x1DF7: return Unicode_Category_MN;
		case 0x1DF8: return Unicode_Category_MN;
		case 0x1DF9: return Unicode_Category_MN;
		case 0x1DFB: return Unicode_Category_MN;
		case 0x1DFC: return Unicode_Category_MN;
		case 0x1DFD: return Unicode_Category_MN;
		case 0x1DFE: return Unicode_Category_MN;
		case 0x1DFF: return Unicode_Category_MN;
		case 0x1E00: return Unicode_Category_LU;
		case 0x1E01: return Unicode_Category_LL;
		case 0x1E02: return Unicode_Category_LU;
		case 0x1E03: return Unicode_Category_LL;
		case 0x1E04: return Unicode_Category_LU;
		case 0x1E05: return Unicode_Category_LL;
		case 0x1E06: return Unicode_Category_LU;
		case 0x1E07: return Unicode_Category_LL;
		case 0x1E08: return Unicode_Category_LU;
		case 0x1E09: return Unicode_Category_LL;
		case 0x1E0A: return Unicode_Category_LU;
		case 0x1E0B: return Unicode_Category_LL;
		case 0x1E0C: return Unicode_Category_LU;
		case 0x1E0D: return Unicode_Category_LL;
		case 0x1E0E: return Unicode_Category_LU;
		case 0x1E0F: return Unicode_Category_LL;
		case 0x1E10: return Unicode_Category_LU;
		case 0x1E11: return Unicode_Category_LL;
		case 0x1E12: return Unicode_Category_LU;
		case 0x1E13: return Unicode_Category_LL;
		case 0x1E14: return Unicode_Category_LU;
		case 0x1E15: return Unicode_Category_LL;
		case 0x1E16: return Unicode_Category_LU;
		case 0x1E17: return Unicode_Category_LL;
		case 0x1E18: return Unicode_Category_LU;
		case 0x1E19: return Unicode_Category_LL;
		case 0x1E1A: return Unicode_Category_LU;
		case 0x1E1B: return Unicode_Category_LL;
		case 0x1E1C: return Unicode_Category_LU;
		case 0x1E1D: return Unicode_Category_LL;
		case 0x1E1E: return Unicode_Category_LU;
		case 0x1E1F: return Unicode_Category_LL;
		case 0x1E20: return Unicode_Category_LU;
		case 0x1E21: return Unicode_Category_LL;
		case 0x1E22: return Unicode_Category_LU;
		case 0x1E23: return Unicode_Category_LL;
		case 0x1E24: return Unicode_Category_LU;
		case 0x1E25: return Unicode_Category_LL;
		case 0x1E26: return Unicode_Category_LU;
		case 0x1E27: return Unicode_Category_LL;
		case 0x1E28: return Unicode_Category_LU;
		case 0x1E29: return Unicode_Category_LL;
		case 0x1E2A: return Unicode_Category_LU;
		case 0x1E2B: return Unicode_Category_LL;
		case 0x1E2C: return Unicode_Category_LU;
		case 0x1E2D: return Unicode_Category_LL;
		case 0x1E2E: return Unicode_Category_LU;
		case 0x1E2F: return Unicode_Category_LL;
		case 0x1E30: return Unicode_Category_LU;
		case 0x1E31: return Unicode_Category_LL;
		case 0x1E32: return Unicode_Category_LU;
		case 0x1E33: return Unicode_Category_LL;
		case 0x1E34: return Unicode_Category_LU;
		case 0x1E35: return Unicode_Category_LL;
		case 0x1E36: return Unicode_Category_LU;
		case 0x1E37: return Unicode_Category_LL;
		case 0x1E38: return Unicode_Category_LU;
		case 0x1E39: return Unicode_Category_LL;
		case 0x1E3A: return Unicode_Category_LU;
		case 0x1E3B: return Unicode_Category_LL;
		case 0x1E3C: return Unicode_Category_LU;
		case 0x1E3D: return Unicode_Category_LL;
		case 0x1E3E: return Unicode_Category_LU;
		case 0x1E3F: return Unicode_Category_LL;
		case 0x1E40: return Unicode_Category_LU;
		case 0x1E41: return Unicode_Category_LL;
		case 0x1E42: return Unicode_Category_LU;
		case 0x1E43: return Unicode_Category_LL;
		case 0x1E44: return Unicode_Category_LU;
		case 0x1E45: return Unicode_Category_LL;
		case 0x1E46: return Unicode_Category_LU;
		case 0x1E47: return Unicode_Category_LL;
		case 0x1E48: return Unicode_Category_LU;
		case 0x1E49: return Unicode_Category_LL;
		case 0x1E4A: return Unicode_Category_LU;
		case 0x1E4B: return Unicode_Category_LL;
		case 0x1E4C: return Unicode_Category_LU;
		case 0x1E4D: return Unicode_Category_LL;
		case 0x1E4E: return Unicode_Category_LU;
		case 0x1E4F: return Unicode_Category_LL;
		case 0x1E50: return Unicode_Category_LU;
		case 0x1E51: return Unicode_Category_LL;
		case 0x1E52: return Unicode_Category_LU;
		case 0x1E53: return Unicode_Category_LL;
		case 0x1E54: return Unicode_Category_LU;
		case 0x1E55: return Unicode_Category_LL;
		case 0x1E56: return Unicode_Category_LU;
		case 0x1E57: return Unicode_Category_LL;
		case 0x1E58: return Unicode_Category_LU;
		case 0x1E59: return Unicode_Category_LL;
		case 0x1E5A: return Unicode_Category_LU;
		case 0x1E5B: return Unicode_Category_LL;
		case 0x1E5C: return Unicode_Category_LU;
		case 0x1E5D: return Unicode_Category_LL;
		case 0x1E5E: return Unicode_Category_LU;
		case 0x1E5F: return Unicode_Category_LL;
		case 0x1E60: return Unicode_Category_LU;
		case 0x1E61: return Unicode_Category_LL;
		case 0x1E62: return Unicode_Category_LU;
		case 0x1E63: return Unicode_Category_LL;
		case 0x1E64: return Unicode_Category_LU;
		case 0x1E65: return Unicode_Category_LL;
		case 0x1E66: return Unicode_Category_LU;
		case 0x1E67: return Unicode_Category_LL;
		case 0x1E68: return Unicode_Category_LU;
		case 0x1E69: return Unicode_Category_LL;
		case 0x1E6A: return Unicode_Category_LU;
		case 0x1E6B: return Unicode_Category_LL;
		case 0x1E6C: return Unicode_Category_LU;
		case 0x1E6D: return Unicode_Category_LL;
		case 0x1E6E: return Unicode_Category_LU;
		case 0x1E6F: return Unicode_Category_LL;
		case 0x1E70: return Unicode_Category_LU;
		case 0x1E71: return Unicode_Category_LL;
		case 0x1E72: return Unicode_Category_LU;
		case 0x1E73: return Unicode_Category_LL;
		case 0x1E74: return Unicode_Category_LU;
		case 0x1E75: return Unicode_Category_LL;
		case 0x1E76: return Unicode_Category_LU;
		case 0x1E77: return Unicode_Category_LL;
		case 0x1E78: return Unicode_Category_LU;
		case 0x1E79: return Unicode_Category_LL;
		case 0x1E7A: return Unicode_Category_LU;
		case 0x1E7B: return Unicode_Category_LL;
		case 0x1E7C: return Unicode_Category_LU;
		case 0x1E7D: return Unicode_Category_LL;
		case 0x1E7E: return Unicode_Category_LU;
		case 0x1E7F: return Unicode_Category_LL;
		case 0x1E80: return Unicode_Category_LU;
		case 0x1E81: return Unicode_Category_LL;
		case 0x1E82: return Unicode_Category_LU;
		case 0x1E83: return Unicode_Category_LL;
		case 0x1E84: return Unicode_Category_LU;
		case 0x1E85: return Unicode_Category_LL;
		case 0x1E86: return Unicode_Category_LU;
		case 0x1E87: return Unicode_Category_LL;
		case 0x1E88: return Unicode_Category_LU;
		case 0x1E89: return Unicode_Category_LL;
		case 0x1E8A: return Unicode_Category_LU;
		case 0x1E8B: return Unicode_Category_LL;
		case 0x1E8C: return Unicode_Category_LU;
		case 0x1E8D: return Unicode_Category_LL;
		case 0x1E8E: return Unicode_Category_LU;
		case 0x1E8F: return Unicode_Category_LL;
		case 0x1E90: return Unicode_Category_LU;
		case 0x1E91: return Unicode_Category_LL;
		case 0x1E92: return Unicode_Category_LU;
		case 0x1E93: return Unicode_Category_LL;
		case 0x1E94: return Unicode_Category_LU;
		case 0x1E95: return Unicode_Category_LL;
		case 0x1E96: return Unicode_Category_LL;
		case 0x1E97: return Unicode_Category_LL;
		case 0x1E98: return Unicode_Category_LL;
		case 0x1E99: return Unicode_Category_LL;
		case 0x1E9A: return Unicode_Category_LL;
		case 0x1E9B: return Unicode_Category_LL;
		case 0x1E9C: return Unicode_Category_LL;
		case 0x1E9D: return Unicode_Category_LL;
		case 0x1E9E: return Unicode_Category_LU;
		case 0x1E9F: return Unicode_Category_LL;
		case 0x1EA0: return Unicode_Category_LU;
		case 0x1EA1: return Unicode_Category_LL;
		case 0x1EA2: return Unicode_Category_LU;
		case 0x1EA3: return Unicode_Category_LL;
		case 0x1EA4: return Unicode_Category_LU;
		case 0x1EA5: return Unicode_Category_LL;
		case 0x1EA6: return Unicode_Category_LU;
		case 0x1EA7: return Unicode_Category_LL;
		case 0x1EA8: return Unicode_Category_LU;
		case 0x1EA9: return Unicode_Category_LL;
		case 0x1EAA: return Unicode_Category_LU;
		case 0x1EAB: return Unicode_Category_LL;
		case 0x1EAC: return Unicode_Category_LU;
		case 0x1EAD: return Unicode_Category_LL;
		case 0x1EAE: return Unicode_Category_LU;
		case 0x1EAF: return Unicode_Category_LL;
		case 0x1EB0: return Unicode_Category_LU;
		case 0x1EB1: return Unicode_Category_LL;
		case 0x1EB2: return Unicode_Category_LU;
		case 0x1EB3: return Unicode_Category_LL;
		case 0x1EB4: return Unicode_Category_LU;
		case 0x1EB5: return Unicode_Category_LL;
		case 0x1EB6: return Unicode_Category_LU;
		case 0x1EB7: return Unicode_Category_LL;
		case 0x1EB8: return Unicode_Category_LU;
		case 0x1EB9: return Unicode_Category_LL;
		case 0x1EBA: return Unicode_Category_LU;
		case 0x1EBB: return Unicode_Category_LL;
		case 0x1EBC: return Unicode_Category_LU;
		case 0x1EBD: return Unicode_Category_LL;
		case 0x1EBE: return Unicode_Category_LU;
		case 0x1EBF: return Unicode_Category_LL;
		case 0x1EC0: return Unicode_Category_LU;
		case 0x1EC1: return Unicode_Category_LL;
		case 0x1EC2: return Unicode_Category_LU;
		case 0x1EC3: return Unicode_Category_LL;
		case 0x1EC4: return Unicode_Category_LU;
		case 0x1EC5: return Unicode_Category_LL;
		case 0x1EC6: return Unicode_Category_LU;
		case 0x1EC7: return Unicode_Category_LL;
		case 0x1EC8: return Unicode_Category_LU;
		case 0x1EC9: return Unicode_Category_LL;
		case 0x1ECA: return Unicode_Category_LU;
		case 0x1ECB: return Unicode_Category_LL;
		case 0x1ECC: return Unicode_Category_LU;
		case 0x1ECD: return Unicode_Category_LL;
		case 0x1ECE: return Unicode_Category_LU;
		case 0x1ECF: return Unicode_Category_LL;
		case 0x1ED0: return Unicode_Category_LU;
		case 0x1ED1: return Unicode_Category_LL;
		case 0x1ED2: return Unicode_Category_LU;
		case 0x1ED3: return Unicode_Category_LL;
		case 0x1ED4: return Unicode_Category_LU;
		case 0x1ED5: return Unicode_Category_LL;
		case 0x1ED6: return Unicode_Category_LU;
		case 0x1ED7: return Unicode_Category_LL;
		case 0x1ED8: return Unicode_Category_LU;
		case 0x1ED9: return Unicode_Category_LL;
		case 0x1EDA: return Unicode_Category_LU;
		case 0x1EDB: return Unicode_Category_LL;
		case 0x1EDC: return Unicode_Category_LU;
		case 0x1EDD: return Unicode_Category_LL;
		case 0x1EDE: return Unicode_Category_LU;
		case 0x1EDF: return Unicode_Category_LL;
		case 0x1EE0: return Unicode_Category_LU;
		case 0x1EE1: return Unicode_Category_LL;
		case 0x1EE2: return Unicode_Category_LU;
		case 0x1EE3: return Unicode_Category_LL;
		case 0x1EE4: return Unicode_Category_LU;
		case 0x1EE5: return Unicode_Category_LL;
		case 0x1EE6: return Unicode_Category_LU;
		case 0x1EE7: return Unicode_Category_LL;
		case 0x1EE8: return Unicode_Category_LU;
		case 0x1EE9: return Unicode_Category_LL;
		case 0x1EEA: return Unicode_Category_LU;
		case 0x1EEB: return Unicode_Category_LL;
		case 0x1EEC: return Unicode_Category_LU;
		case 0x1EED: return Unicode_Category_LL;
		case 0x1EEE: return Unicode_Category_LU;
		case 0x1EEF: return Unicode_Category_LL;
		case 0x1EF0: return Unicode_Category_LU;
		case 0x1EF1: return Unicode_Category_LL;
		case 0x1EF2: return Unicode_Category_LU;
		case 0x1EF3: return Unicode_Category_LL;
		case 0x1EF4: return Unicode_Category_LU;
		case 0x1EF5: return Unicode_Category_LL;
		case 0x1EF6: return Unicode_Category_LU;
		case 0x1EF7: return Unicode_Category_LL;
		case 0x1EF8: return Unicode_Category_LU;
		case 0x1EF9: return Unicode_Category_LL;
		case 0x1EFA: return Unicode_Category_LU;
		case 0x1EFB: return Unicode_Category_LL;
		case 0x1EFC: return Unicode_Category_LU;
		case 0x1EFD: return Unicode_Category_LL;
		case 0x1EFE: return Unicode_Category_LU;
		case 0x1EFF: return Unicode_Category_LL;
		case 0x1F00: return Unicode_Category_LL;
		case 0x1F01: return Unicode_Category_LL;
		case 0x1F02: return Unicode_Category_LL;
		case 0x1F03: return Unicode_Category_LL;
		case 0x1F04: return Unicode_Category_LL;
		case 0x1F05: return Unicode_Category_LL;
		case 0x1F06: return Unicode_Category_LL;
		case 0x1F07: return Unicode_Category_LL;
		case 0x1F08: return Unicode_Category_LU;
		case 0x1F09: return Unicode_Category_LU;
		case 0x1F0A: return Unicode_Category_LU;
		case 0x1F0B: return Unicode_Category_LU;
		case 0x1F0C: return Unicode_Category_LU;
		case 0x1F0D: return Unicode_Category_LU;
		case 0x1F0E: return Unicode_Category_LU;
		case 0x1F0F: return Unicode_Category_LU;
		case 0x1F10: return Unicode_Category_LL;
		case 0x1F11: return Unicode_Category_LL;
		case 0x1F12: return Unicode_Category_LL;
		case 0x1F13: return Unicode_Category_LL;
		case 0x1F14: return Unicode_Category_LL;
		case 0x1F15: return Unicode_Category_LL;
		case 0x1F18: return Unicode_Category_LU;
		case 0x1F19: return Unicode_Category_LU;
		case 0x1F1A: return Unicode_Category_LU;
		case 0x1F1B: return Unicode_Category_LU;
		case 0x1F1C: return Unicode_Category_LU;
		case 0x1F1D: return Unicode_Category_LU;
		case 0x1F20: return Unicode_Category_LL;
		case 0x1F21: return Unicode_Category_LL;
		case 0x1F22: return Unicode_Category_LL;
		case 0x1F23: return Unicode_Category_LL;
		case 0x1F24: return Unicode_Category_LL;
		case 0x1F25: return Unicode_Category_LL;
		case 0x1F26: return Unicode_Category_LL;
		case 0x1F27: return Unicode_Category_LL;
		case 0x1F28: return Unicode_Category_LU;
		case 0x1F29: return Unicode_Category_LU;
		case 0x1F2A: return Unicode_Category_LU;
		case 0x1F2B: return Unicode_Category_LU;
		case 0x1F2C: return Unicode_Category_LU;
		case 0x1F2D: return Unicode_Category_LU;
		case 0x1F2E: return Unicode_Category_LU;
		case 0x1F2F: return Unicode_Category_LU;
		case 0x1F30: return Unicode_Category_LL;
		case 0x1F31: return Unicode_Category_LL;
		case 0x1F32: return Unicode_Category_LL;
		case 0x1F33: return Unicode_Category_LL;
		case 0x1F34: return Unicode_Category_LL;
		case 0x1F35: return Unicode_Category_LL;
		case 0x1F36: return Unicode_Category_LL;
		case 0x1F37: return Unicode_Category_LL;
		case 0x1F38: return Unicode_Category_LU;
		case 0x1F39: return Unicode_Category_LU;
		case 0x1F3A: return Unicode_Category_LU;
		case 0x1F3B: return Unicode_Category_LU;
		case 0x1F3C: return Unicode_Category_LU;
		case 0x1F3D: return Unicode_Category_LU;
		case 0x1F3E: return Unicode_Category_LU;
		case 0x1F3F: return Unicode_Category_LU;
		case 0x1F40: return Unicode_Category_LL;
		case 0x1F41: return Unicode_Category_LL;
		case 0x1F42: return Unicode_Category_LL;
		case 0x1F43: return Unicode_Category_LL;
		case 0x1F44: return Unicode_Category_LL;
		case 0x1F45: return Unicode_Category_LL;
		case 0x1F48: return Unicode_Category_LU;
		case 0x1F49: return Unicode_Category_LU;
		case 0x1F4A: return Unicode_Category_LU;
		case 0x1F4B: return Unicode_Category_LU;
		case 0x1F4C: return Unicode_Category_LU;
		case 0x1F4D: return Unicode_Category_LU;
		case 0x1F50: return Unicode_Category_LL;
		case 0x1F51: return Unicode_Category_LL;
		case 0x1F52: return Unicode_Category_LL;
		case 0x1F53: return Unicode_Category_LL;
		case 0x1F54: return Unicode_Category_LL;
		case 0x1F55: return Unicode_Category_LL;
		case 0x1F56: return Unicode_Category_LL;
		case 0x1F57: return Unicode_Category_LL;
		case 0x1F59: return Unicode_Category_LU;
		case 0x1F5B: return Unicode_Category_LU;
		case 0x1F5D: return Unicode_Category_LU;
		case 0x1F5F: return Unicode_Category_LU;
		case 0x1F60: return Unicode_Category_LL;
		case 0x1F61: return Unicode_Category_LL;
		case 0x1F62: return Unicode_Category_LL;
		case 0x1F63: return Unicode_Category_LL;
		case 0x1F64: return Unicode_Category_LL;
		case 0x1F65: return Unicode_Category_LL;
		case 0x1F66: return Unicode_Category_LL;
		case 0x1F67: return Unicode_Category_LL;
		case 0x1F68: return Unicode_Category_LU;
		case 0x1F69: return Unicode_Category_LU;
		case 0x1F6A: return Unicode_Category_LU;
		case 0x1F6B: return Unicode_Category_LU;
		case 0x1F6C: return Unicode_Category_LU;
		case 0x1F6D: return Unicode_Category_LU;
		case 0x1F6E: return Unicode_Category_LU;
		case 0x1F6F: return Unicode_Category_LU;
		case 0x1F70: return Unicode_Category_LL;
		case 0x1F71: return Unicode_Category_LL;
		case 0x1F72: return Unicode_Category_LL;
		case 0x1F73: return Unicode_Category_LL;
		case 0x1F74: return Unicode_Category_LL;
		case 0x1F75: return Unicode_Category_LL;
		case 0x1F76: return Unicode_Category_LL;
		case 0x1F77: return Unicode_Category_LL;
		case 0x1F78: return Unicode_Category_LL;
		case 0x1F79: return Unicode_Category_LL;
		case 0x1F7A: return Unicode_Category_LL;
		case 0x1F7B: return Unicode_Category_LL;
		case 0x1F7C: return Unicode_Category_LL;
		case 0x1F7D: return Unicode_Category_LL;
		case 0x1F80: return Unicode_Category_LL;
		case 0x1F81: return Unicode_Category_LL;
		case 0x1F82: return Unicode_Category_LL;
		case 0x1F83: return Unicode_Category_LL;
		case 0x1F84: return Unicode_Category_LL;
		case 0x1F85: return Unicode_Category_LL;
		case 0x1F86: return Unicode_Category_LL;
		case 0x1F87: return Unicode_Category_LL;
		case 0x1F88: return Unicode_Category_LT;
		case 0x1F89: return Unicode_Category_LT;
		case 0x1F8A: return Unicode_Category_LT;
		case 0x1F8B: return Unicode_Category_LT;
		case 0x1F8C: return Unicode_Category_LT;
		case 0x1F8D: return Unicode_Category_LT;
		case 0x1F8E: return Unicode_Category_LT;
		case 0x1F8F: return Unicode_Category_LT;
		case 0x1F90: return Unicode_Category_LL;
		case 0x1F91: return Unicode_Category_LL;
		case 0x1F92: return Unicode_Category_LL;
		case 0x1F93: return Unicode_Category_LL;
		case 0x1F94: return Unicode_Category_LL;
		case 0x1F95: return Unicode_Category_LL;
		case 0x1F96: return Unicode_Category_LL;
		case 0x1F97: return Unicode_Category_LL;
		case 0x1F98: return Unicode_Category_LT;
		case 0x1F99: return Unicode_Category_LT;
		case 0x1F9A: return Unicode_Category_LT;
		case 0x1F9B: return Unicode_Category_LT;
		case 0x1F9C: return Unicode_Category_LT;
		case 0x1F9D: return Unicode_Category_LT;
		case 0x1F9E: return Unicode_Category_LT;
		case 0x1F9F: return Unicode_Category_LT;
		case 0x1FA0: return Unicode_Category_LL;
		case 0x1FA1: return Unicode_Category_LL;
		case 0x1FA2: return Unicode_Category_LL;
		case 0x1FA3: return Unicode_Category_LL;
		case 0x1FA4: return Unicode_Category_LL;
		case 0x1FA5: return Unicode_Category_LL;
		case 0x1FA6: return Unicode_Category_LL;
		case 0x1FA7: return Unicode_Category_LL;
		case 0x1FA8: return Unicode_Category_LT;
		case 0x1FA9: return Unicode_Category_LT;
		case 0x1FAA: return Unicode_Category_LT;
		case 0x1FAB: return Unicode_Category_LT;
		case 0x1FAC: return Unicode_Category_LT;
		case 0x1FAD: return Unicode_Category_LT;
		case 0x1FAE: return Unicode_Category_LT;
		case 0x1FAF: return Unicode_Category_LT;
		case 0x1FB0: return Unicode_Category_LL;
		case 0x1FB1: return Unicode_Category_LL;
		case 0x1FB2: return Unicode_Category_LL;
		case 0x1FB3: return Unicode_Category_LL;
		case 0x1FB4: return Unicode_Category_LL;
		case 0x1FB6: return Unicode_Category_LL;
		case 0x1FB7: return Unicode_Category_LL;
		case 0x1FB8: return Unicode_Category_LU;
		case 0x1FB9: return Unicode_Category_LU;
		case 0x1FBA: return Unicode_Category_LU;
		case 0x1FBB: return Unicode_Category_LU;
		case 0x1FBC: return Unicode_Category_LT;
		case 0x1FBD: return Unicode_Category_SK;
		case 0x1FBE: return Unicode_Category_LL;
		case 0x1FBF: return Unicode_Category_SK;
		case 0x1FC0: return Unicode_Category_SK;
		case 0x1FC1: return Unicode_Category_SK;
		case 0x1FC2: return Unicode_Category_LL;
		case 0x1FC3: return Unicode_Category_LL;
		case 0x1FC4: return Unicode_Category_LL;
		case 0x1FC6: return Unicode_Category_LL;
		case 0x1FC7: return Unicode_Category_LL;
		case 0x1FC8: return Unicode_Category_LU;
		case 0x1FC9: return Unicode_Category_LU;
		case 0x1FCA: return Unicode_Category_LU;
		case 0x1FCB: return Unicode_Category_LU;
		case 0x1FCC: return Unicode_Category_LT;
		case 0x1FCD: return Unicode_Category_SK;
		case 0x1FCE: return Unicode_Category_SK;
		case 0x1FCF: return Unicode_Category_SK;
		case 0x1FD0: return Unicode_Category_LL;
		case 0x1FD1: return Unicode_Category_LL;
		case 0x1FD2: return Unicode_Category_LL;
		case 0x1FD3: return Unicode_Category_LL;
		case 0x1FD6: return Unicode_Category_LL;
		case 0x1FD7: return Unicode_Category_LL;
		case 0x1FD8: return Unicode_Category_LU;
		case 0x1FD9: return Unicode_Category_LU;
		case 0x1FDA: return Unicode_Category_LU;
		case 0x1FDB: return Unicode_Category_LU;
		case 0x1FDD: return Unicode_Category_SK;
		case 0x1FDE: return Unicode_Category_SK;
		case 0x1FDF: return Unicode_Category_SK;
		case 0x1FE0: return Unicode_Category_LL;
		case 0x1FE1: return Unicode_Category_LL;
		case 0x1FE2: return Unicode_Category_LL;
		case 0x1FE3: return Unicode_Category_LL;
		case 0x1FE4: return Unicode_Category_LL;
		case 0x1FE5: return Unicode_Category_LL;
		case 0x1FE6: return Unicode_Category_LL;
		case 0x1FE7: return Unicode_Category_LL;
		case 0x1FE8: return Unicode_Category_LU;
		case 0x1FE9: return Unicode_Category_LU;
		case 0x1FEA: return Unicode_Category_LU;
		case 0x1FEB: return Unicode_Category_LU;
		case 0x1FEC: return Unicode_Category_LU;
		case 0x1FED: return Unicode_Category_SK;
		case 0x1FEE: return Unicode_Category_SK;
		case 0x1FEF: return Unicode_Category_SK;
		case 0x1FF2: return Unicode_Category_LL;
		case 0x1FF3: return Unicode_Category_LL;
		case 0x1FF4: return Unicode_Category_LL;
		case 0x1FF6: return Unicode_Category_LL;
		case 0x1FF7: return Unicode_Category_LL;
		case 0x1FF8: return Unicode_Category_LU;
		case 0x1FF9: return Unicode_Category_LU;
		case 0x1FFA: return Unicode_Category_LU;
		case 0x1FFB: return Unicode_Category_LU;
		case 0x1FFC: return Unicode_Category_LT;
		case 0x1FFD: return Unicode_Category_SK;
		case 0x1FFE: return Unicode_Category_SK;
		case 0x2000: return Unicode_Category_ZS;
		case 0x2001: return Unicode_Category_ZS;
		case 0x2002: return Unicode_Category_ZS;
		case 0x2003: return Unicode_Category_ZS;
		case 0x2004: return Unicode_Category_ZS;
		case 0x2005: return Unicode_Category_ZS;
		case 0x2006: return Unicode_Category_ZS;
		case 0x2007: return Unicode_Category_ZS;
		case 0x2008: return Unicode_Category_ZS;
		case 0x2009: return Unicode_Category_ZS;
		case 0x200A: return Unicode_Category_ZS;
		case 0x200B: return Unicode_Category_CF;
		case 0x200C: return Unicode_Category_CF;
		case 0x200D: return Unicode_Category_CF;
		case 0x200E: return Unicode_Category_CF;
		case 0x200F: return Unicode_Category_CF;
		case 0x2010: return Unicode_Category_PD;
		case 0x2011: return Unicode_Category_PD;
		case 0x2012: return Unicode_Category_PD;
		case 0x2013: return Unicode_Category_PD;
		case 0x2014: return Unicode_Category_PD;
		case 0x2015: return Unicode_Category_PD;
		case 0x2016: return Unicode_Category_PO;
		case 0x2017: return Unicode_Category_PO;
		case 0x2018: return Unicode_Category_PI;
		case 0x2019: return Unicode_Category_PF;
		case 0x201A: return Unicode_Category_PS;
		case 0x201B: return Unicode_Category_PI;
		case 0x201C: return Unicode_Category_PI;
		case 0x201D: return Unicode_Category_PF;
		case 0x201E: return Unicode_Category_PS;
		case 0x201F: return Unicode_Category_PI;
		case 0x2020: return Unicode_Category_PO;
		case 0x2021: return Unicode_Category_PO;
		case 0x2022: return Unicode_Category_PO;
		case 0x2023: return Unicode_Category_PO;
		case 0x2024: return Unicode_Category_PO;
		case 0x2025: return Unicode_Category_PO;
		case 0x2026: return Unicode_Category_PO;
		case 0x2027: return Unicode_Category_PO;
		case 0x2028: return Unicode_Category_ZL;
		case 0x2029: return Unicode_Category_ZP;
		case 0x202A: return Unicode_Category_CF;
		case 0x202B: return Unicode_Category_CF;
		case 0x202C: return Unicode_Category_CF;
		case 0x202D: return Unicode_Category_CF;
		case 0x202E: return Unicode_Category_CF;
		case 0x202F: return Unicode_Category_ZS;
		case 0x2030: return Unicode_Category_PO;
		case 0x2031: return Unicode_Category_PO;
		case 0x2032: return Unicode_Category_PO;
		case 0x2033: return Unicode_Category_PO;
		case 0x2034: return Unicode_Category_PO;
		case 0x2035: return Unicode_Category_PO;
		case 0x2036: return Unicode_Category_PO;
		case 0x2037: return Unicode_Category_PO;
		case 0x2038: return Unicode_Category_PO;
		case 0x2039: return Unicode_Category_PI;
		case 0x203A: return Unicode_Category_PF;
		case 0x203B: return Unicode_Category_PO;
		case 0x203C: return Unicode_Category_PO;
		case 0x203D: return Unicode_Category_PO;
		case 0x203E: return Unicode_Category_PO;
		case 0x203F: return Unicode_Category_PC;
		case 0x2040: return Unicode_Category_PC;
		case 0x2041: return Unicode_Category_PO;
		case 0x2042: return Unicode_Category_PO;
		case 0x2043: return Unicode_Category_PO;
		case 0x2044: return Unicode_Category_SM;
		case 0x2045: return Unicode_Category_PS;
		case 0x2046: return Unicode_Category_PE;
		case 0x2047: return Unicode_Category_PO;
		case 0x2048: return Unicode_Category_PO;
		case 0x2049: return Unicode_Category_PO;
		case 0x204A: return Unicode_Category_PO;
		case 0x204B: return Unicode_Category_PO;
		case 0x204C: return Unicode_Category_PO;
		case 0x204D: return Unicode_Category_PO;
		case 0x204E: return Unicode_Category_PO;
		case 0x204F: return Unicode_Category_PO;
		case 0x2050: return Unicode_Category_PO;
		case 0x2051: return Unicode_Category_PO;
		case 0x2052: return Unicode_Category_SM;
		case 0x2053: return Unicode_Category_PO;
		case 0x2054: return Unicode_Category_PC;
		case 0x2055: return Unicode_Category_PO;
		case 0x2056: return Unicode_Category_PO;
		case 0x2057: return Unicode_Category_PO;
		case 0x2058: return Unicode_Category_PO;
		case 0x2059: return Unicode_Category_PO;
		case 0x205A: return Unicode_Category_PO;
		case 0x205B: return Unicode_Category_PO;
		case 0x205C: return Unicode_Category_PO;
		case 0x205D: return Unicode_Category_PO;
		case 0x205E: return Unicode_Category_PO;
		case 0x205F: return Unicode_Category_ZS;
		case 0x2060: return Unicode_Category_CF;
		case 0x2061: return Unicode_Category_CF;
		case 0x2062: return Unicode_Category_CF;
		case 0x2063: return Unicode_Category_CF;
		case 0x2064: return Unicode_Category_CF;
		case 0x2066: return Unicode_Category_CF;
		case 0x2067: return Unicode_Category_CF;
		case 0x2068: return Unicode_Category_CF;
		case 0x2069: return Unicode_Category_CF;
		case 0x206A: return Unicode_Category_CF;
		case 0x206B: return Unicode_Category_CF;
		case 0x206C: return Unicode_Category_CF;
		case 0x206D: return Unicode_Category_CF;
		case 0x206E: return Unicode_Category_CF;
		case 0x206F: return Unicode_Category_CF;
		case 0x2070: return Unicode_Category_NO;
		case 0x2071: return Unicode_Category_LM;
		case 0x2074: return Unicode_Category_NO;
		case 0x2075: return Unicode_Category_NO;
		case 0x2076: return Unicode_Category_NO;
		case 0x2077: return Unicode_Category_NO;
		case 0x2078: return Unicode_Category_NO;
		case 0x2079: return Unicode_Category_NO;
		case 0x207A: return Unicode_Category_SM;
		case 0x207B: return Unicode_Category_SM;
		case 0x207C: return Unicode_Category_SM;
		case 0x207D: return Unicode_Category_PS;
		case 0x207E: return Unicode_Category_PE;
		case 0x207F: return Unicode_Category_LM;
		case 0x2080: return Unicode_Category_NO;
		case 0x2081: return Unicode_Category_NO;
		case 0x2082: return Unicode_Category_NO;
		case 0x2083: return Unicode_Category_NO;
		case 0x2084: return Unicode_Category_NO;
		case 0x2085: return Unicode_Category_NO;
		case 0x2086: return Unicode_Category_NO;
		case 0x2087: return Unicode_Category_NO;
		case 0x2088: return Unicode_Category_NO;
		case 0x2089: return Unicode_Category_NO;
		case 0x208A: return Unicode_Category_SM;
		case 0x208B: return Unicode_Category_SM;
		case 0x208C: return Unicode_Category_SM;
		case 0x208D: return Unicode_Category_PS;
		case 0x208E: return Unicode_Category_PE;
		case 0x2090: return Unicode_Category_LM;
		case 0x2091: return Unicode_Category_LM;
		case 0x2092: return Unicode_Category_LM;
		case 0x2093: return Unicode_Category_LM;
		case 0x2094: return Unicode_Category_LM;
		case 0x2095: return Unicode_Category_LM;
		case 0x2096: return Unicode_Category_LM;
		case 0x2097: return Unicode_Category_LM;
		case 0x2098: return Unicode_Category_LM;
		case 0x2099: return Unicode_Category_LM;
		case 0x209A: return Unicode_Category_LM;
		case 0x209B: return Unicode_Category_LM;
		case 0x209C: return Unicode_Category_LM;
		case 0x20A0: return Unicode_Category_SC;
		case 0x20A1: return Unicode_Category_SC;
		case 0x20A2: return Unicode_Category_SC;
		case 0x20A3: return Unicode_Category_SC;
		case 0x20A4: return Unicode_Category_SC;
		case 0x20A5: return Unicode_Category_SC;
		case 0x20A6: return Unicode_Category_SC;
		case 0x20A7: return Unicode_Category_SC;
		case 0x20A8: return Unicode_Category_SC;
		case 0x20A9: return Unicode_Category_SC;
		case 0x20AA: return Unicode_Category_SC;
		case 0x20AB: return Unicode_Category_SC;
		case 0x20AC: return Unicode_Category_SC;
		case 0x20AD: return Unicode_Category_SC;
		case 0x20AE: return Unicode_Category_SC;
		case 0x20AF: return Unicode_Category_SC;
		case 0x20B0: return Unicode_Category_SC;
		case 0x20B1: return Unicode_Category_SC;
		case 0x20B2: return Unicode_Category_SC;
		case 0x20B3: return Unicode_Category_SC;
		case 0x20B4: return Unicode_Category_SC;
		case 0x20B5: return Unicode_Category_SC;
		case 0x20B6: return Unicode_Category_SC;
		case 0x20B7: return Unicode_Category_SC;
		case 0x20B8: return Unicode_Category_SC;
		case 0x20B9: return Unicode_Category_SC;
		case 0x20BA: return Unicode_Category_SC;
		case 0x20BB: return Unicode_Category_SC;
		case 0x20BC: return Unicode_Category_SC;
		case 0x20BD: return Unicode_Category_SC;
		case 0x20BE: return Unicode_Category_SC;
		case 0x20BF: return Unicode_Category_SC;
		case 0x20D0: return Unicode_Category_MN;
		case 0x20D1: return Unicode_Category_MN;
		case 0x20D2: return Unicode_Category_MN;
		case 0x20D3: return Unicode_Category_MN;
		case 0x20D4: return Unicode_Category_MN;
		case 0x20D5: return Unicode_Category_MN;
		case 0x20D6: return Unicode_Category_MN;
		case 0x20D7: return Unicode_Category_MN;
		case 0x20D8: return Unicode_Category_MN;
		case 0x20D9: return Unicode_Category_MN;
		case 0x20DA: return Unicode_Category_MN;
		case 0x20DB: return Unicode_Category_MN;
		case 0x20DC: return Unicode_Category_MN;
		case 0x20DD: return Unicode_Category_ME;
		case 0x20DE: return Unicode_Category_ME;
		case 0x20DF: return Unicode_Category_ME;
		case 0x20E0: return Unicode_Category_ME;
		case 0x20E1: return Unicode_Category_MN;
		case 0x20E2: return Unicode_Category_ME;
		case 0x20E3: return Unicode_Category_ME;
		case 0x20E4: return Unicode_Category_ME;
		case 0x20E5: return Unicode_Category_MN;
		case 0x20E6: return Unicode_Category_MN;
		case 0x20E7: return Unicode_Category_MN;
		case 0x20E8: return Unicode_Category_MN;
		case 0x20E9: return Unicode_Category_MN;
		case 0x20EA: return Unicode_Category_MN;
		case 0x20EB: return Unicode_Category_MN;
		case 0x20EC: return Unicode_Category_MN;
		case 0x20ED: return Unicode_Category_MN;
		case 0x20EE: return Unicode_Category_MN;
		case 0x20EF: return Unicode_Category_MN;
		case 0x20F0: return Unicode_Category_MN;
		case 0x2100: return Unicode_Category_SO;
		case 0x2101: return Unicode_Category_SO;
		case 0x2102: return Unicode_Category_LU;
		case 0x2103: return Unicode_Category_SO;
		case 0x2104: return Unicode_Category_SO;
		case 0x2105: return Unicode_Category_SO;
		case 0x2106: return Unicode_Category_SO;
		case 0x2107: return Unicode_Category_LU;
		case 0x2108: return Unicode_Category_SO;
		case 0x2109: return Unicode_Category_SO;
		case 0x210A: return Unicode_Category_LL;
		case 0x210B: return Unicode_Category_LU;
		case 0x210C: return Unicode_Category_LU;
		case 0x210D: return Unicode_Category_LU;
		case 0x210E: return Unicode_Category_LL;
		case 0x210F: return Unicode_Category_LL;
		case 0x2110: return Unicode_Category_LU;
		case 0x2111: return Unicode_Category_LU;
		case 0x2112: return Unicode_Category_LU;
		case 0x2113: return Unicode_Category_LL;
		case 0x2114: return Unicode_Category_SO;
		case 0x2115: return Unicode_Category_LU;
		case 0x2116: return Unicode_Category_SO;
		case 0x2117: return Unicode_Category_SO;
		case 0x2118: return Unicode_Category_SM;
		case 0x2119: return Unicode_Category_LU;
		case 0x211A: return Unicode_Category_LU;
		case 0x211B: return Unicode_Category_LU;
		case 0x211C: return Unicode_Category_LU;
		case 0x211D: return Unicode_Category_LU;
		case 0x211E: return Unicode_Category_SO;
		case 0x211F: return Unicode_Category_SO;
		case 0x2120: return Unicode_Category_SO;
		case 0x2121: return Unicode_Category_SO;
		case 0x2122: return Unicode_Category_SO;
		case 0x2123: return Unicode_Category_SO;
		case 0x2124: return Unicode_Category_LU;
		case 0x2125: return Unicode_Category_SO;
		case 0x2126: return Unicode_Category_LU;
		case 0x2127: return Unicode_Category_SO;
		case 0x2128: return Unicode_Category_LU;
		case 0x2129: return Unicode_Category_SO;
		case 0x212A: return Unicode_Category_LU;
		case 0x212B: return Unicode_Category_LU;
		case 0x212C: return Unicode_Category_LU;
		case 0x212D: return Unicode_Category_LU;
		case 0x212E: return Unicode_Category_SO;
		case 0x212F: return Unicode_Category_LL;
		case 0x2130: return Unicode_Category_LU;
		case 0x2131: return Unicode_Category_LU;
		case 0x2132: return Unicode_Category_LU;
		case 0x2133: return Unicode_Category_LU;
		case 0x2134: return Unicode_Category_LL;
		case 0x2135: return Unicode_Category_LO;
		case 0x2136: return Unicode_Category_LO;
		case 0x2137: return Unicode_Category_LO;
		case 0x2138: return Unicode_Category_LO;
		case 0x2139: return Unicode_Category_LL;
		case 0x213A: return Unicode_Category_SO;
		case 0x213B: return Unicode_Category_SO;
		case 0x213C: return Unicode_Category_LL;
		case 0x213D: return Unicode_Category_LL;
		case 0x213E: return Unicode_Category_LU;
		case 0x213F: return Unicode_Category_LU;
		case 0x2140: return Unicode_Category_SM;
		case 0x2141: return Unicode_Category_SM;
		case 0x2142: return Unicode_Category_SM;
		case 0x2143: return Unicode_Category_SM;
		case 0x2144: return Unicode_Category_SM;
		case 0x2145: return Unicode_Category_LU;
		case 0x2146: return Unicode_Category_LL;
		case 0x2147: return Unicode_Category_LL;
		case 0x2148: return Unicode_Category_LL;
		case 0x2149: return Unicode_Category_LL;
		case 0x214A: return Unicode_Category_SO;
		case 0x214B: return Unicode_Category_SM;
		case 0x214C: return Unicode_Category_SO;
		case 0x214D: return Unicode_Category_SO;
		case 0x214E: return Unicode_Category_LL;
		case 0x214F: return Unicode_Category_SO;
		case 0x2150: return Unicode_Category_NO;
		case 0x2151: return Unicode_Category_NO;
		case 0x2152: return Unicode_Category_NO;
		case 0x2153: return Unicode_Category_NO;
		case 0x2154: return Unicode_Category_NO;
		case 0x2155: return Unicode_Category_NO;
		case 0x2156: return Unicode_Category_NO;
		case 0x2157: return Unicode_Category_NO;
		case 0x2158: return Unicode_Category_NO;
		case 0x2159: return Unicode_Category_NO;
		case 0x215A: return Unicode_Category_NO;
		case 0x215B: return Unicode_Category_NO;
		case 0x215C: return Unicode_Category_NO;
		case 0x215D: return Unicode_Category_NO;
		case 0x215E: return Unicode_Category_NO;
		case 0x215F: return Unicode_Category_NO;
		case 0x2160: return Unicode_Category_NL;
		case 0x2161: return Unicode_Category_NL;
		case 0x2162: return Unicode_Category_NL;
		case 0x2163: return Unicode_Category_NL;
		case 0x2164: return Unicode_Category_NL;
		case 0x2165: return Unicode_Category_NL;
		case 0x2166: return Unicode_Category_NL;
		case 0x2167: return Unicode_Category_NL;
		case 0x2168: return Unicode_Category_NL;
		case 0x2169: return Unicode_Category_NL;
		case 0x216A: return Unicode_Category_NL;
		case 0x216B: return Unicode_Category_NL;
		case 0x216C: return Unicode_Category_NL;
		case 0x216D: return Unicode_Category_NL;
		case 0x216E: return Unicode_Category_NL;
		case 0x216F: return Unicode_Category_NL;
		case 0x2170: return Unicode_Category_NL;
		case 0x2171: return Unicode_Category_NL;
		case 0x2172: return Unicode_Category_NL;
		case 0x2173: return Unicode_Category_NL;
		case 0x2174: return Unicode_Category_NL;
		case 0x2175: return Unicode_Category_NL;
		case 0x2176: return Unicode_Category_NL;
		case 0x2177: return Unicode_Category_NL;
		case 0x2178: return Unicode_Category_NL;
		case 0x2179: return Unicode_Category_NL;
		case 0x217A: return Unicode_Category_NL;
		case 0x217B: return Unicode_Category_NL;
		case 0x217C: return Unicode_Category_NL;
		case 0x217D: return Unicode_Category_NL;
		case 0x217E: return Unicode_Category_NL;
		case 0x217F: return Unicode_Category_NL;
		case 0x2180: return Unicode_Category_NL;
		case 0x2181: return Unicode_Category_NL;
		case 0x2182: return Unicode_Category_NL;
		case 0x2183: return Unicode_Category_LU;
		case 0x2184: return Unicode_Category_LL;
		case 0x2185: return Unicode_Category_NL;
		case 0x2186: return Unicode_Category_NL;
		case 0x2187: return Unicode_Category_NL;
		case 0x2188: return Unicode_Category_NL;
		case 0x2189: return Unicode_Category_NO;
		case 0x218A: return Unicode_Category_SO;
		case 0x218B: return Unicode_Category_SO;
		case 0x2190: return Unicode_Category_SM;
		case 0x2191: return Unicode_Category_SM;
		case 0x2192: return Unicode_Category_SM;
		case 0x2193: return Unicode_Category_SM;
		case 0x2194: return Unicode_Category_SM;
		case 0x2195: return Unicode_Category_SO;
		case 0x2196: return Unicode_Category_SO;
		case 0x2197: return Unicode_Category_SO;
		case 0x2198: return Unicode_Category_SO;
		case 0x2199: return Unicode_Category_SO;
		case 0x219A: return Unicode_Category_SM;
		case 0x219B: return Unicode_Category_SM;
		case 0x219C: return Unicode_Category_SO;
		case 0x219D: return Unicode_Category_SO;
		case 0x219E: return Unicode_Category_SO;
		case 0x219F: return Unicode_Category_SO;
		case 0x21A0: return Unicode_Category_SM;
		case 0x21A1: return Unicode_Category_SO;
		case 0x21A2: return Unicode_Category_SO;
		case 0x21A3: return Unicode_Category_SM;
		case 0x21A4: return Unicode_Category_SO;
		case 0x21A5: return Unicode_Category_SO;
		case 0x21A6: return Unicode_Category_SM;
		case 0x21A7: return Unicode_Category_SO;
		case 0x21A8: return Unicode_Category_SO;
		case 0x21A9: return Unicode_Category_SO;
		case 0x21AA: return Unicode_Category_SO;
		case 0x21AB: return Unicode_Category_SO;
		case 0x21AC: return Unicode_Category_SO;
		case 0x21AD: return Unicode_Category_SO;
		case 0x21AE: return Unicode_Category_SM;
		case 0x21AF: return Unicode_Category_SO;
		case 0x21B0: return Unicode_Category_SO;
		case 0x21B1: return Unicode_Category_SO;
		case 0x21B2: return Unicode_Category_SO;
		case 0x21B3: return Unicode_Category_SO;
		case 0x21B4: return Unicode_Category_SO;
		case 0x21B5: return Unicode_Category_SO;
		case 0x21B6: return Unicode_Category_SO;
		case 0x21B7: return Unicode_Category_SO;
		case 0x21B8: return Unicode_Category_SO;
		case 0x21B9: return Unicode_Category_SO;
		case 0x21BA: return Unicode_Category_SO;
		case 0x21BB: return Unicode_Category_SO;
		case 0x21BC: return Unicode_Category_SO;
		case 0x21BD: return Unicode_Category_SO;
		case 0x21BE: return Unicode_Category_SO;
		case 0x21BF: return Unicode_Category_SO;
		case 0x21C0: return Unicode_Category_SO;
		case 0x21C1: return Unicode_Category_SO;
		case 0x21C2: return Unicode_Category_SO;
		case 0x21C3: return Unicode_Category_SO;
		case 0x21C4: return Unicode_Category_SO;
		case 0x21C5: return Unicode_Category_SO;
		case 0x21C6: return Unicode_Category_SO;
		case 0x21C7: return Unicode_Category_SO;
		case 0x21C8: return Unicode_Category_SO;
		case 0x21C9: return Unicode_Category_SO;
		case 0x21CA: return Unicode_Category_SO;
		case 0x21CB: return Unicode_Category_SO;
		case 0x21CC: return Unicode_Category_SO;
		case 0x21CD: return Unicode_Category_SO;
		case 0x21CE: return Unicode_Category_SM;
		case 0x21CF: return Unicode_Category_SM;
		case 0x21D0: return Unicode_Category_SO;
		case 0x21D1: return Unicode_Category_SO;
		case 0x21D2: return Unicode_Category_SM;
		case 0x21D3: return Unicode_Category_SO;
		case 0x21D4: return Unicode_Category_SM;
		case 0x21D5: return Unicode_Category_SO;
		case 0x21D6: return Unicode_Category_SO;
		case 0x21D7: return Unicode_Category_SO;
		case 0x21D8: return Unicode_Category_SO;
		case 0x21D9: return Unicode_Category_SO;
		case 0x21DA: return Unicode_Category_SO;
		case 0x21DB: return Unicode_Category_SO;
		case 0x21DC: return Unicode_Category_SO;
		case 0x21DD: return Unicode_Category_SO;
		case 0x21DE: return Unicode_Category_SO;
		case 0x21DF: return Unicode_Category_SO;
		case 0x21E0: return Unicode_Category_SO;
		case 0x21E1: return Unicode_Category_SO;
		case 0x21E2: return Unicode_Category_SO;
		case 0x21E3: return Unicode_Category_SO;
		case 0x21E4: return Unicode_Category_SO;
		case 0x21E5: return Unicode_Category_SO;
		case 0x21E6: return Unicode_Category_SO;
		case 0x21E7: return Unicode_Category_SO;
		case 0x21E8: return Unicode_Category_SO;
		case 0x21E9: return Unicode_Category_SO;
		case 0x21EA: return Unicode_Category_SO;
		case 0x21EB: return Unicode_Category_SO;
		case 0x21EC: return Unicode_Category_SO;
		case 0x21ED: return Unicode_Category_SO;
		case 0x21EE: return Unicode_Category_SO;
		case 0x21EF: return Unicode_Category_SO;
		case 0x21F0: return Unicode_Category_SO;
		case 0x21F1: return Unicode_Category_SO;
		case 0x21F2: return Unicode_Category_SO;
		case 0x21F3: return Unicode_Category_SO;
		case 0x21F4: return Unicode_Category_SM;
		case 0x21F5: return Unicode_Category_SM;
		case 0x21F6: return Unicode_Category_SM;
		case 0x21F7: return Unicode_Category_SM;
		case 0x21F8: return Unicode_Category_SM;
		case 0x21F9: return Unicode_Category_SM;
		case 0x21FA: return Unicode_Category_SM;
		case 0x21FB: return Unicode_Category_SM;
		case 0x21FC: return Unicode_Category_SM;
		case 0x21FD: return Unicode_Category_SM;
		case 0x21FE: return Unicode_Category_SM;
		case 0x21FF: return Unicode_Category_SM;
		case 0x2200: return Unicode_Category_SM;
		case 0x2201: return Unicode_Category_SM;
		case 0x2202: return Unicode_Category_SM;
		case 0x2203: return Unicode_Category_SM;
		case 0x2204: return Unicode_Category_SM;
		case 0x2205: return Unicode_Category_SM;
		case 0x2206: return Unicode_Category_SM;
		case 0x2207: return Unicode_Category_SM;
		case 0x2208: return Unicode_Category_SM;
		case 0x2209: return Unicode_Category_SM;
		case 0x220A: return Unicode_Category_SM;
		case 0x220B: return Unicode_Category_SM;
		case 0x220C: return Unicode_Category_SM;
		case 0x220D: return Unicode_Category_SM;
		case 0x220E: return Unicode_Category_SM;
		case 0x220F: return Unicode_Category_SM;
		case 0x2210: return Unicode_Category_SM;
		case 0x2211: return Unicode_Category_SM;
		case 0x2212: return Unicode_Category_SM;
		case 0x2213: return Unicode_Category_SM;
		case 0x2214: return Unicode_Category_SM;
		case 0x2215: return Unicode_Category_SM;
		case 0x2216: return Unicode_Category_SM;
		case 0x2217: return Unicode_Category_SM;
		case 0x2218: return Unicode_Category_SM;
		case 0x2219: return Unicode_Category_SM;
		case 0x221A: return Unicode_Category_SM;
		case 0x221B: return Unicode_Category_SM;
		case 0x221C: return Unicode_Category_SM;
		case 0x221D: return Unicode_Category_SM;
		case 0x221E: return Unicode_Category_SM;
		case 0x221F: return Unicode_Category_SM;
		case 0x2220: return Unicode_Category_SM;
		case 0x2221: return Unicode_Category_SM;
		case 0x2222: return Unicode_Category_SM;
		case 0x2223: return Unicode_Category_SM;
		case 0x2224: return Unicode_Category_SM;
		case 0x2225: return Unicode_Category_SM;
		case 0x2226: return Unicode_Category_SM;
		case 0x2227: return Unicode_Category_SM;
		case 0x2228: return Unicode_Category_SM;
		case 0x2229: return Unicode_Category_SM;
		case 0x222A: return Unicode_Category_SM;
		case 0x222B: return Unicode_Category_SM;
		case 0x222C: return Unicode_Category_SM;
		case 0x222D: return Unicode_Category_SM;
		case 0x222E: return Unicode_Category_SM;
		case 0x222F: return Unicode_Category_SM;
		case 0x2230: return Unicode_Category_SM;
		case 0x2231: return Unicode_Category_SM;
		case 0x2232: return Unicode_Category_SM;
		case 0x2233: return Unicode_Category_SM;
		case 0x2234: return Unicode_Category_SM;
		case 0x2235: return Unicode_Category_SM;
		case 0x2236: return Unicode_Category_SM;
		case 0x2237: return Unicode_Category_SM;
		case 0x2238: return Unicode_Category_SM;
		case 0x2239: return Unicode_Category_SM;
		case 0x223A: return Unicode_Category_SM;
		case 0x223B: return Unicode_Category_SM;
		case 0x223C: return Unicode_Category_SM;
		case 0x223D: return Unicode_Category_SM;
		case 0x223E: return Unicode_Category_SM;
		case 0x223F: return Unicode_Category_SM;
		case 0x2240: return Unicode_Category_SM;
		case 0x2241: return Unicode_Category_SM;
		case 0x2242: return Unicode_Category_SM;
		case 0x2243: return Unicode_Category_SM;
		case 0x2244: return Unicode_Category_SM;
		case 0x2245: return Unicode_Category_SM;
		case 0x2246: return Unicode_Category_SM;
		case 0x2247: return Unicode_Category_SM;
		case 0x2248: return Unicode_Category_SM;
		case 0x2249: return Unicode_Category_SM;
		case 0x224A: return Unicode_Category_SM;
		case 0x224B: return Unicode_Category_SM;
		case 0x224C: return Unicode_Category_SM;
		case 0x224D: return Unicode_Category_SM;
		case 0x224E: return Unicode_Category_SM;
		case 0x224F: return Unicode_Category_SM;
		case 0x2250: return Unicode_Category_SM;
		case 0x2251: return Unicode_Category_SM;
		case 0x2252: return Unicode_Category_SM;
		case 0x2253: return Unicode_Category_SM;
		case 0x2254: return Unicode_Category_SM;
		case 0x2255: return Unicode_Category_SM;
		case 0x2256: return Unicode_Category_SM;
		case 0x2257: return Unicode_Category_SM;
		case 0x2258: return Unicode_Category_SM;
		case 0x2259: return Unicode_Category_SM;
		case 0x225A: return Unicode_Category_SM;
		case 0x225B: return Unicode_Category_SM;
		case 0x225C: return Unicode_Category_SM;
		case 0x225D: return Unicode_Category_SM;
		case 0x225E: return Unicode_Category_SM;
		case 0x225F: return Unicode_Category_SM;
		case 0x2260: return Unicode_Category_SM;
		case 0x2261: return Unicode_Category_SM;
		case 0x2262: return Unicode_Category_SM;
		case 0x2263: return Unicode_Category_SM;
		case 0x2264: return Unicode_Category_SM;
		case 0x2265: return Unicode_Category_SM;
		case 0x2266: return Unicode_Category_SM;
		case 0x2267: return Unicode_Category_SM;
		case 0x2268: return Unicode_Category_SM;
		case 0x2269: return Unicode_Category_SM;
		case 0x226A: return Unicode_Category_SM;
		case 0x226B: return Unicode_Category_SM;
		case 0x226C: return Unicode_Category_SM;
		case 0x226D: return Unicode_Category_SM;
		case 0x226E: return Unicode_Category_SM;
		case 0x226F: return Unicode_Category_SM;
		case 0x2270: return Unicode_Category_SM;
		case 0x2271: return Unicode_Category_SM;
		case 0x2272: return Unicode_Category_SM;
		case 0x2273: return Unicode_Category_SM;
		case 0x2274: return Unicode_Category_SM;
		case 0x2275: return Unicode_Category_SM;
		case 0x2276: return Unicode_Category_SM;
		case 0x2277: return Unicode_Category_SM;
		case 0x2278: return Unicode_Category_SM;
		case 0x2279: return Unicode_Category_SM;
		case 0x227A: return Unicode_Category_SM;
		case 0x227B: return Unicode_Category_SM;
		case 0x227C: return Unicode_Category_SM;
		case 0x227D: return Unicode_Category_SM;
		case 0x227E: return Unicode_Category_SM;
		case 0x227F: return Unicode_Category_SM;
		case 0x2280: return Unicode_Category_SM;
		case 0x2281: return Unicode_Category_SM;
		case 0x2282: return Unicode_Category_SM;
		case 0x2283: return Unicode_Category_SM;
		case 0x2284: return Unicode_Category_SM;
		case 0x2285: return Unicode_Category_SM;
		case 0x2286: return Unicode_Category_SM;
		case 0x2287: return Unicode_Category_SM;
		case 0x2288: return Unicode_Category_SM;
		case 0x2289: return Unicode_Category_SM;
		case 0x228A: return Unicode_Category_SM;
		case 0x228B: return Unicode_Category_SM;
		case 0x228C: return Unicode_Category_SM;
		case 0x228D: return Unicode_Category_SM;
		case 0x228E: return Unicode_Category_SM;
		case 0x228F: return Unicode_Category_SM;
		case 0x2290: return Unicode_Category_SM;
		case 0x2291: return Unicode_Category_SM;
		case 0x2292: return Unicode_Category_SM;
		case 0x2293: return Unicode_Category_SM;
		case 0x2294: return Unicode_Category_SM;
		case 0x2295: return Unicode_Category_SM;
		case 0x2296: return Unicode_Category_SM;
		case 0x2297: return Unicode_Category_SM;
		case 0x2298: return Unicode_Category_SM;
		case 0x2299: return Unicode_Category_SM;
		case 0x229A: return Unicode_Category_SM;
		case 0x229B: return Unicode_Category_SM;
		case 0x229C: return Unicode_Category_SM;
		case 0x229D: return Unicode_Category_SM;
		case 0x229E: return Unicode_Category_SM;
		case 0x229F: return Unicode_Category_SM;
		case 0x22A0: return Unicode_Category_SM;
		case 0x22A1: return Unicode_Category_SM;
		case 0x22A2: return Unicode_Category_SM;
		case 0x22A3: return Unicode_Category_SM;
		case 0x22A4: return Unicode_Category_SM;
		case 0x22A5: return Unicode_Category_SM;
		case 0x22A6: return Unicode_Category_SM;
		case 0x22A7: return Unicode_Category_SM;
		case 0x22A8: return Unicode_Category_SM;
		case 0x22A9: return Unicode_Category_SM;
		case 0x22AA: return Unicode_Category_SM;
		case 0x22AB: return Unicode_Category_SM;
		case 0x22AC: return Unicode_Category_SM;
		case 0x22AD: return Unicode_Category_SM;
		case 0x22AE: return Unicode_Category_SM;
		case 0x22AF: return Unicode_Category_SM;
		case 0x22B0: return Unicode_Category_SM;
		case 0x22B1: return Unicode_Category_SM;
		case 0x22B2: return Unicode_Category_SM;
		case 0x22B3: return Unicode_Category_SM;
		case 0x22B4: return Unicode_Category_SM;
		case 0x22B5: return Unicode_Category_SM;
		case 0x22B6: return Unicode_Category_SM;
		case 0x22B7: return Unicode_Category_SM;
		case 0x22B8: return Unicode_Category_SM;
		case 0x22B9: return Unicode_Category_SM;
		case 0x22BA: return Unicode_Category_SM;
		case 0x22BB: return Unicode_Category_SM;
		case 0x22BC: return Unicode_Category_SM;
		case 0x22BD: return Unicode_Category_SM;
		case 0x22BE: return Unicode_Category_SM;
		case 0x22BF: return Unicode_Category_SM;
		case 0x22C0: return Unicode_Category_SM;
		case 0x22C1: return Unicode_Category_SM;
		case 0x22C2: return Unicode_Category_SM;
		case 0x22C3: return Unicode_Category_SM;
		case 0x22C4: return Unicode_Category_SM;
		case 0x22C5: return Unicode_Category_SM;
		case 0x22C6: return Unicode_Category_SM;
		case 0x22C7: return Unicode_Category_SM;
		case 0x22C8: return Unicode_Category_SM;
		case 0x22C9: return Unicode_Category_SM;
		case 0x22CA: return Unicode_Category_SM;
		case 0x22CB: return Unicode_Category_SM;
		case 0x22CC: return Unicode_Category_SM;
		case 0x22CD: return Unicode_Category_SM;
		case 0x22CE: return Unicode_Category_SM;
		case 0x22CF: return Unicode_Category_SM;
		case 0x22D0: return Unicode_Category_SM;
		case 0x22D1: return Unicode_Category_SM;
		case 0x22D2: return Unicode_Category_SM;
		case 0x22D3: return Unicode_Category_SM;
		case 0x22D4: return Unicode_Category_SM;
		case 0x22D5: return Unicode_Category_SM;
		case 0x22D6: return Unicode_Category_SM;
		case 0x22D7: return Unicode_Category_SM;
		case 0x22D8: return Unicode_Category_SM;
		case 0x22D9: return Unicode_Category_SM;
		case 0x22DA: return Unicode_Category_SM;
		case 0x22DB: return Unicode_Category_SM;
		case 0x22DC: return Unicode_Category_SM;
		case 0x22DD: return Unicode_Category_SM;
		case 0x22DE: return Unicode_Category_SM;
		case 0x22DF: return Unicode_Category_SM;
		case 0x22E0: return Unicode_Category_SM;
		case 0x22E1: return Unicode_Category_SM;
		case 0x22E2: return Unicode_Category_SM;
		case 0x22E3: return Unicode_Category_SM;
		case 0x22E4: return Unicode_Category_SM;
		case 0x22E5: return Unicode_Category_SM;
		case 0x22E6: return Unicode_Category_SM;
		case 0x22E7: return Unicode_Category_SM;
		case 0x22E8: return Unicode_Category_SM;
		case 0x22E9: return Unicode_Category_SM;
		case 0x22EA: return Unicode_Category_SM;
		case 0x22EB: return Unicode_Category_SM;
		case 0x22EC: return Unicode_Category_SM;
		case 0x22ED: return Unicode_Category_SM;
		case 0x22EE: return Unicode_Category_SM;
		case 0x22EF: return Unicode_Category_SM;
		case 0x22F0: return Unicode_Category_SM;
		case 0x22F1: return Unicode_Category_SM;
		case 0x22F2: return Unicode_Category_SM;
		case 0x22F3: return Unicode_Category_SM;
		case 0x22F4: return Unicode_Category_SM;
		case 0x22F5: return Unicode_Category_SM;
		case 0x22F6: return Unicode_Category_SM;
		case 0x22F7: return Unicode_Category_SM;
		case 0x22F8: return Unicode_Category_SM;
		case 0x22F9: return Unicode_Category_SM;
		case 0x22FA: return Unicode_Category_SM;
		case 0x22FB: return Unicode_Category_SM;
		case 0x22FC: return Unicode_Category_SM;
		case 0x22FD: return Unicode_Category_SM;
		case 0x22FE: return Unicode_Category_SM;
		case 0x22FF: return Unicode_Category_SM;
		case 0x2300: return Unicode_Category_SO;
		case 0x2301: return Unicode_Category_SO;
		case 0x2302: return Unicode_Category_SO;
		case 0x2303: return Unicode_Category_SO;
		case 0x2304: return Unicode_Category_SO;
		case 0x2305: return Unicode_Category_SO;
		case 0x2306: return Unicode_Category_SO;
		case 0x2307: return Unicode_Category_SO;
		case 0x2308: return Unicode_Category_PS;
		case 0x2309: return Unicode_Category_PE;
		case 0x230A: return Unicode_Category_PS;
		case 0x230B: return Unicode_Category_PE;
		case 0x230C: return Unicode_Category_SO;
		case 0x230D: return Unicode_Category_SO;
		case 0x230E: return Unicode_Category_SO;
		case 0x230F: return Unicode_Category_SO;
		case 0x2310: return Unicode_Category_SO;
		case 0x2311: return Unicode_Category_SO;
		case 0x2312: return Unicode_Category_SO;
		case 0x2313: return Unicode_Category_SO;
		case 0x2314: return Unicode_Category_SO;
		case 0x2315: return Unicode_Category_SO;
		case 0x2316: return Unicode_Category_SO;
		case 0x2317: return Unicode_Category_SO;
		case 0x2318: return Unicode_Category_SO;
		case 0x2319: return Unicode_Category_SO;
		case 0x231A: return Unicode_Category_SO;
		case 0x231B: return Unicode_Category_SO;
		case 0x231C: return Unicode_Category_SO;
		case 0x231D: return Unicode_Category_SO;
		case 0x231E: return Unicode_Category_SO;
		case 0x231F: return Unicode_Category_SO;
		case 0x2320: return Unicode_Category_SM;
		case 0x2321: return Unicode_Category_SM;
		case 0x2322: return Unicode_Category_SO;
		case 0x2323: return Unicode_Category_SO;
		case 0x2324: return Unicode_Category_SO;
		case 0x2325: return Unicode_Category_SO;
		case 0x2326: return Unicode_Category_SO;
		case 0x2327: return Unicode_Category_SO;
		case 0x2328: return Unicode_Category_SO;
		case 0x2329: return Unicode_Category_PS;
		case 0x232A: return Unicode_Category_PE;
		case 0x232B: return Unicode_Category_SO;
		case 0x232C: return Unicode_Category_SO;
		case 0x232D: return Unicode_Category_SO;
		case 0x232E: return Unicode_Category_SO;
		case 0x232F: return Unicode_Category_SO;
		case 0x2330: return Unicode_Category_SO;
		case 0x2331: return Unicode_Category_SO;
		case 0x2332: return Unicode_Category_SO;
		case 0x2333: return Unicode_Category_SO;
		case 0x2334: return Unicode_Category_SO;
		case 0x2335: return Unicode_Category_SO;
		case 0x2336: return Unicode_Category_SO;
		case 0x2337: return Unicode_Category_SO;
		case 0x2338: return Unicode_Category_SO;
		case 0x2339: return Unicode_Category_SO;
		case 0x233A: return Unicode_Category_SO;
		case 0x233B: return Unicode_Category_SO;
		case 0x233C: return Unicode_Category_SO;
		case 0x233D: return Unicode_Category_SO;
		case 0x233E: return Unicode_Category_SO;
		case 0x233F: return Unicode_Category_SO;
		case 0x2340: return Unicode_Category_SO;
		case 0x2341: return Unicode_Category_SO;
		case 0x2342: return Unicode_Category_SO;
		case 0x2343: return Unicode_Category_SO;
		case 0x2344: return Unicode_Category_SO;
		case 0x2345: return Unicode_Category_SO;
		case 0x2346: return Unicode_Category_SO;
		case 0x2347: return Unicode_Category_SO;
		case 0x2348: return Unicode_Category_SO;
		case 0x2349: return Unicode_Category_SO;
		case 0x234A: return Unicode_Category_SO;
		case 0x234B: return Unicode_Category_SO;
		case 0x234C: return Unicode_Category_SO;
		case 0x234D: return Unicode_Category_SO;
		case 0x234E: return Unicode_Category_SO;
		case 0x234F: return Unicode_Category_SO;
		case 0x2350: return Unicode_Category_SO;
		case 0x2351: return Unicode_Category_SO;
		case 0x2352: return Unicode_Category_SO;
		case 0x2353: return Unicode_Category_SO;
		case 0x2354: return Unicode_Category_SO;
		case 0x2355: return Unicode_Category_SO;
		case 0x2356: return Unicode_Category_SO;
		case 0x2357: return Unicode_Category_SO;
		case 0x2358: return Unicode_Category_SO;
		case 0x2359: return Unicode_Category_SO;
		case 0x235A: return Unicode_Category_SO;
		case 0x235B: return Unicode_Category_SO;
		case 0x235C: return Unicode_Category_SO;
		case 0x235D: return Unicode_Category_SO;
		case 0x235E: return Unicode_Category_SO;
		case 0x235F: return Unicode_Category_SO;
		case 0x2360: return Unicode_Category_SO;
		case 0x2361: return Unicode_Category_SO;
		case 0x2362: return Unicode_Category_SO;
		case 0x2363: return Unicode_Category_SO;
		case 0x2364: return Unicode_Category_SO;
		case 0x2365: return Unicode_Category_SO;
		case 0x2366: return Unicode_Category_SO;
		case 0x2367: return Unicode_Category_SO;
		case 0x2368: return Unicode_Category_SO;
		case 0x2369: return Unicode_Category_SO;
		case 0x236A: return Unicode_Category_SO;
		case 0x236B: return Unicode_Category_SO;
		case 0x236C: return Unicode_Category_SO;
		case 0x236D: return Unicode_Category_SO;
		case 0x236E: return Unicode_Category_SO;
		case 0x236F: return Unicode_Category_SO;
		case 0x2370: return Unicode_Category_SO;
		case 0x2371: return Unicode_Category_SO;
		case 0x2372: return Unicode_Category_SO;
		case 0x2373: return Unicode_Category_SO;
		case 0x2374: return Unicode_Category_SO;
		case 0x2375: return Unicode_Category_SO;
		case 0x2376: return Unicode_Category_SO;
		case 0x2377: return Unicode_Category_SO;
		case 0x2378: return Unicode_Category_SO;
		case 0x2379: return Unicode_Category_SO;
		case 0x237A: return Unicode_Category_SO;
		case 0x237B: return Unicode_Category_SO;
		case 0x237C: return Unicode_Category_SM;
		case 0x237D: return Unicode_Category_SO;
		case 0x237E: return Unicode_Category_SO;
		case 0x237F: return Unicode_Category_SO;
		case 0x2380: return Unicode_Category_SO;
		case 0x2381: return Unicode_Category_SO;
		case 0x2382: return Unicode_Category_SO;
		case 0x2383: return Unicode_Category_SO;
		case 0x2384: return Unicode_Category_SO;
		case 0x2385: return Unicode_Category_SO;
		case 0x2386: return Unicode_Category_SO;
		case 0x2387: return Unicode_Category_SO;
		case 0x2388: return Unicode_Category_SO;
		case 0x2389: return Unicode_Category_SO;
		case 0x238A: return Unicode_Category_SO;
		case 0x238B: return Unicode_Category_SO;
		case 0x238C: return Unicode_Category_SO;
		case 0x238D: return Unicode_Category_SO;
		case 0x238E: return Unicode_Category_SO;
		case 0x238F: return Unicode_Category_SO;
		case 0x2390: return Unicode_Category_SO;
		case 0x2391: return Unicode_Category_SO;
		case 0x2392: return Unicode_Category_SO;
		case 0x2393: return Unicode_Category_SO;
		case 0x2394: return Unicode_Category_SO;
		case 0x2395: return Unicode_Category_SO;
		case 0x2396: return Unicode_Category_SO;
		case 0x2397: return Unicode_Category_SO;
		case 0x2398: return Unicode_Category_SO;
		case 0x2399: return Unicode_Category_SO;
		case 0x239A: return Unicode_Category_SO;
		case 0x239B: return Unicode_Category_SM;
		case 0x239C: return Unicode_Category_SM;
		case 0x239D: return Unicode_Category_SM;
		case 0x239E: return Unicode_Category_SM;
		case 0x239F: return Unicode_Category_SM;
		case 0x23A0: return Unicode_Category_SM;
		case 0x23A1: return Unicode_Category_SM;
		case 0x23A2: return Unicode_Category_SM;
		case 0x23A3: return Unicode_Category_SM;
		case 0x23A4: return Unicode_Category_SM;
		case 0x23A5: return Unicode_Category_SM;
		case 0x23A6: return Unicode_Category_SM;
		case 0x23A7: return Unicode_Category_SM;
		case 0x23A8: return Unicode_Category_SM;
		case 0x23A9: return Unicode_Category_SM;
		case 0x23AA: return Unicode_Category_SM;
		case 0x23AB: return Unicode_Category_SM;
		case 0x23AC: return Unicode_Category_SM;
		case 0x23AD: return Unicode_Category_SM;
		case 0x23AE: return Unicode_Category_SM;
		case 0x23AF: return Unicode_Category_SM;
		case 0x23B0: return Unicode_Category_SM;
		case 0x23B1: return Unicode_Category_SM;
		case 0x23B2: return Unicode_Category_SM;
		case 0x23B3: return Unicode_Category_SM;
		case 0x23B4: return Unicode_Category_SO;
		case 0x23B5: return Unicode_Category_SO;
		case 0x23B6: return Unicode_Category_SO;
		case 0x23B7: return Unicode_Category_SO;
		case 0x23B8: return Unicode_Category_SO;
		case 0x23B9: return Unicode_Category_SO;
		case 0x23BA: return Unicode_Category_SO;
		case 0x23BB: return Unicode_Category_SO;
		case 0x23BC: return Unicode_Category_SO;
		case 0x23BD: return Unicode_Category_SO;
		case 0x23BE: return Unicode_Category_SO;
		case 0x23BF: return Unicode_Category_SO;
		case 0x23C0: return Unicode_Category_SO;
		case 0x23C1: return Unicode_Category_SO;
		case 0x23C2: return Unicode_Category_SO;
		case 0x23C3: return Unicode_Category_SO;
		case 0x23C4: return Unicode_Category_SO;
		case 0x23C5: return Unicode_Category_SO;
		case 0x23C6: return Unicode_Category_SO;
		case 0x23C7: return Unicode_Category_SO;
		case 0x23C8: return Unicode_Category_SO;
		case 0x23C9: return Unicode_Category_SO;
		case 0x23CA: return Unicode_Category_SO;
		case 0x23CB: return Unicode_Category_SO;
		case 0x23CC: return Unicode_Category_SO;
		case 0x23CD: return Unicode_Category_SO;
		case 0x23CE: return Unicode_Category_SO;
		case 0x23CF: return Unicode_Category_SO;
		case 0x23D0: return Unicode_Category_SO;
		case 0x23D1: return Unicode_Category_SO;
		case 0x23D2: return Unicode_Category_SO;
		case 0x23D3: return Unicode_Category_SO;
		case 0x23D4: return Unicode_Category_SO;
		case 0x23D5: return Unicode_Category_SO;
		case 0x23D6: return Unicode_Category_SO;
		case 0x23D7: return Unicode_Category_SO;
		case 0x23D8: return Unicode_Category_SO;
		case 0x23D9: return Unicode_Category_SO;
		case 0x23DA: return Unicode_Category_SO;
		case 0x23DB: return Unicode_Category_SO;
		case 0x23DC: return Unicode_Category_SM;
		case 0x23DD: return Unicode_Category_SM;
		case 0x23DE: return Unicode_Category_SM;
		case 0x23DF: return Unicode_Category_SM;
		case 0x23E0: return Unicode_Category_SM;
		case 0x23E1: return Unicode_Category_SM;
		case 0x23E2: return Unicode_Category_SO;
		case 0x23E3: return Unicode_Category_SO;
		case 0x23E4: return Unicode_Category_SO;
		case 0x23E5: return Unicode_Category_SO;
		case 0x23E6: return Unicode_Category_SO;
		case 0x23E7: return Unicode_Category_SO;
		case 0x23E8: return Unicode_Category_SO;
		case 0x23E9: return Unicode_Category_SO;
		case 0x23EA: return Unicode_Category_SO;
		case 0x23EB: return Unicode_Category_SO;
		case 0x23EC: return Unicode_Category_SO;
		case 0x23ED: return Unicode_Category_SO;
		case 0x23EE: return Unicode_Category_SO;
		case 0x23EF: return Unicode_Category_SO;
		case 0x23F0: return Unicode_Category_SO;
		case 0x23F1: return Unicode_Category_SO;
		case 0x23F2: return Unicode_Category_SO;
		case 0x23F3: return Unicode_Category_SO;
		case 0x23F4: return Unicode_Category_SO;
		case 0x23F5: return Unicode_Category_SO;
		case 0x23F6: return Unicode_Category_SO;
		case 0x23F7: return Unicode_Category_SO;
		case 0x23F8: return Unicode_Category_SO;
		case 0x23F9: return Unicode_Category_SO;
		case 0x23FA: return Unicode_Category_SO;
		case 0x23FB: return Unicode_Category_SO;
		case 0x23FC: return Unicode_Category_SO;
		case 0x23FD: return Unicode_Category_SO;
		case 0x23FE: return Unicode_Category_SO;
		case 0x23FF: return Unicode_Category_SO;
		case 0x2400: return Unicode_Category_SO;
		case 0x2401: return Unicode_Category_SO;
		case 0x2402: return Unicode_Category_SO;
		case 0x2403: return Unicode_Category_SO;
		case 0x2404: return Unicode_Category_SO;
		case 0x2405: return Unicode_Category_SO;
		case 0x2406: return Unicode_Category_SO;
		case 0x2407: return Unicode_Category_SO;
		case 0x2408: return Unicode_Category_SO;
		case 0x2409: return Unicode_Category_SO;
		case 0x240A: return Unicode_Category_SO;
		case 0x240B: return Unicode_Category_SO;
		case 0x240C: return Unicode_Category_SO;
		case 0x240D: return Unicode_Category_SO;
		case 0x240E: return Unicode_Category_SO;
		case 0x240F: return Unicode_Category_SO;
		case 0x2410: return Unicode_Category_SO;
		case 0x2411: return Unicode_Category_SO;
		case 0x2412: return Unicode_Category_SO;
		case 0x2413: return Unicode_Category_SO;
		case 0x2414: return Unicode_Category_SO;
		case 0x2415: return Unicode_Category_SO;
		case 0x2416: return Unicode_Category_SO;
		case 0x2417: return Unicode_Category_SO;
		case 0x2418: return Unicode_Category_SO;
		case 0x2419: return Unicode_Category_SO;
		case 0x241A: return Unicode_Category_SO;
		case 0x241B: return Unicode_Category_SO;
		case 0x241C: return Unicode_Category_SO;
		case 0x241D: return Unicode_Category_SO;
		case 0x241E: return Unicode_Category_SO;
		case 0x241F: return Unicode_Category_SO;
		case 0x2420: return Unicode_Category_SO;
		case 0x2421: return Unicode_Category_SO;
		case 0x2422: return Unicode_Category_SO;
		case 0x2423: return Unicode_Category_SO;
		case 0x2424: return Unicode_Category_SO;
		case 0x2425: return Unicode_Category_SO;
		case 0x2426: return Unicode_Category_SO;
		case 0x2440: return Unicode_Category_SO;
		case 0x2441: return Unicode_Category_SO;
		case 0x2442: return Unicode_Category_SO;
		case 0x2443: return Unicode_Category_SO;
		case 0x2444: return Unicode_Category_SO;
		case 0x2445: return Unicode_Category_SO;
		case 0x2446: return Unicode_Category_SO;
		case 0x2447: return Unicode_Category_SO;
		case 0x2448: return Unicode_Category_SO;
		case 0x2449: return Unicode_Category_SO;
		case 0x244A: return Unicode_Category_SO;
		case 0x2460: return Unicode_Category_NO;
		case 0x2461: return Unicode_Category_NO;
		case 0x2462: return Unicode_Category_NO;
		case 0x2463: return Unicode_Category_NO;
		case 0x2464: return Unicode_Category_NO;
		case 0x2465: return Unicode_Category_NO;
		case 0x2466: return Unicode_Category_NO;
		case 0x2467: return Unicode_Category_NO;
		case 0x2468: return Unicode_Category_NO;
		case 0x2469: return Unicode_Category_NO;
		case 0x246A: return Unicode_Category_NO;
		case 0x246B: return Unicode_Category_NO;
		case 0x246C: return Unicode_Category_NO;
		case 0x246D: return Unicode_Category_NO;
		case 0x246E: return Unicode_Category_NO;
		case 0x246F: return Unicode_Category_NO;
		case 0x2470: return Unicode_Category_NO;
		case 0x2471: return Unicode_Category_NO;
		case 0x2472: return Unicode_Category_NO;
		case 0x2473: return Unicode_Category_NO;
		case 0x2474: return Unicode_Category_NO;
		case 0x2475: return Unicode_Category_NO;
		case 0x2476: return Unicode_Category_NO;
		case 0x2477: return Unicode_Category_NO;
		case 0x2478: return Unicode_Category_NO;
		case 0x2479: return Unicode_Category_NO;
		case 0x247A: return Unicode_Category_NO;
		case 0x247B: return Unicode_Category_NO;
		case 0x247C: return Unicode_Category_NO;
		case 0x247D: return Unicode_Category_NO;
		case 0x247E: return Unicode_Category_NO;
		case 0x247F: return Unicode_Category_NO;
		case 0x2480: return Unicode_Category_NO;
		case 0x2481: return Unicode_Category_NO;
		case 0x2482: return Unicode_Category_NO;
		case 0x2483: return Unicode_Category_NO;
		case 0x2484: return Unicode_Category_NO;
		case 0x2485: return Unicode_Category_NO;
		case 0x2486: return Unicode_Category_NO;
		case 0x2487: return Unicode_Category_NO;
		case 0x2488: return Unicode_Category_NO;
		case 0x2489: return Unicode_Category_NO;
		case 0x248A: return Unicode_Category_NO;
		case 0x248B: return Unicode_Category_NO;
		case 0x248C: return Unicode_Category_NO;
		case 0x248D: return Unicode_Category_NO;
		case 0x248E: return Unicode_Category_NO;
		case 0x248F: return Unicode_Category_NO;
		case 0x2490: return Unicode_Category_NO;
		case 0x2491: return Unicode_Category_NO;
		case 0x2492: return Unicode_Category_NO;
		case 0x2493: return Unicode_Category_NO;
		case 0x2494: return Unicode_Category_NO;
		case 0x2495: return Unicode_Category_NO;
		case 0x2496: return Unicode_Category_NO;
		case 0x2497: return Unicode_Category_NO;
		case 0x2498: return Unicode_Category_NO;
		case 0x2499: return Unicode_Category_NO;
		case 0x249A: return Unicode_Category_NO;
		case 0x249B: return Unicode_Category_NO;
		case 0x249C: return Unicode_Category_SO;
		case 0x249D: return Unicode_Category_SO;
		case 0x249E: return Unicode_Category_SO;
		case 0x249F: return Unicode_Category_SO;
		case 0x24A0: return Unicode_Category_SO;
		case 0x24A1: return Unicode_Category_SO;
		case 0x24A2: return Unicode_Category_SO;
		case 0x24A3: return Unicode_Category_SO;
		case 0x24A4: return Unicode_Category_SO;
		case 0x24A5: return Unicode_Category_SO;
		case 0x24A6: return Unicode_Category_SO;
		case 0x24A7: return Unicode_Category_SO;
		case 0x24A8: return Unicode_Category_SO;
		case 0x24A9: return Unicode_Category_SO;
		case 0x24AA: return Unicode_Category_SO;
		case 0x24AB: return Unicode_Category_SO;
		case 0x24AC: return Unicode_Category_SO;
		case 0x24AD: return Unicode_Category_SO;
		case 0x24AE: return Unicode_Category_SO;
		case 0x24AF: return Unicode_Category_SO;
		case 0x24B0: return Unicode_Category_SO;
		case 0x24B1: return Unicode_Category_SO;
		case 0x24B2: return Unicode_Category_SO;
		case 0x24B3: return Unicode_Category_SO;
		case 0x24B4: return Unicode_Category_SO;
		case 0x24B5: return Unicode_Category_SO;
		case 0x24B6: return Unicode_Category_SO;
		case 0x24B7: return Unicode_Category_SO;
		case 0x24B8: return Unicode_Category_SO;
		case 0x24B9: return Unicode_Category_SO;
		case 0x24BA: return Unicode_Category_SO;
		case 0x24BB: return Unicode_Category_SO;
		case 0x24BC: return Unicode_Category_SO;
		case 0x24BD: return Unicode_Category_SO;
		case 0x24BE: return Unicode_Category_SO;
		case 0x24BF: return Unicode_Category_SO;
		case 0x24C0: return Unicode_Category_SO;
		case 0x24C1: return Unicode_Category_SO;
		case 0x24C2: return Unicode_Category_SO;
		case 0x24C3: return Unicode_Category_SO;
		case 0x24C4: return Unicode_Category_SO;
		case 0x24C5: return Unicode_Category_SO;
		case 0x24C6: return Unicode_Category_SO;
		case 0x24C7: return Unicode_Category_SO;
		case 0x24C8: return Unicode_Category_SO;
		case 0x24C9: return Unicode_Category_SO;
		case 0x24CA: return Unicode_Category_SO;
		case 0x24CB: return Unicode_Category_SO;
		case 0x24CC: return Unicode_Category_SO;
		case 0x24CD: return Unicode_Category_SO;
		case 0x24CE: return Unicode_Category_SO;
		case 0x24CF: return Unicode_Category_SO;
		case 0x24D0: return Unicode_Category_SO;
		case 0x24D1: return Unicode_Category_SO;
		case 0x24D2: return Unicode_Category_SO;
		case 0x24D3: return Unicode_Category_SO;
		case 0x24D4: return Unicode_Category_SO;
		case 0x24D5: return Unicode_Category_SO;
		case 0x24D6: return Unicode_Category_SO;
		case 0x24D7: return Unicode_Category_SO;
		case 0x24D8: return Unicode_Category_SO;
		case 0x24D9: return Unicode_Category_SO;
		case 0x24DA: return Unicode_Category_SO;
		case 0x24DB: return Unicode_Category_SO;
		case 0x24DC: return Unicode_Category_SO;
		case 0x24DD: return Unicode_Category_SO;
		case 0x24DE: return Unicode_Category_SO;
		case 0x24DF: return Unicode_Category_SO;
		case 0x24E0: return Unicode_Category_SO;
		case 0x24E1: return Unicode_Category_SO;
		case 0x24E2: return Unicode_Category_SO;
		case 0x24E3: return Unicode_Category_SO;
		case 0x24E4: return Unicode_Category_SO;
		case 0x24E5: return Unicode_Category_SO;
		case 0x24E6: return Unicode_Category_SO;
		case 0x24E7: return Unicode_Category_SO;
		case 0x24E8: return Unicode_Category_SO;
		case 0x24E9: return Unicode_Category_SO;
		case 0x24EA: return Unicode_Category_NO;
		case 0x24EB: return Unicode_Category_NO;
		case 0x24EC: return Unicode_Category_NO;
		case 0x24ED: return Unicode_Category_NO;
		case 0x24EE: return Unicode_Category_NO;
		case 0x24EF: return Unicode_Category_NO;
		case 0x24F0: return Unicode_Category_NO;
		case 0x24F1: return Unicode_Category_NO;
		case 0x24F2: return Unicode_Category_NO;
		case 0x24F3: return Unicode_Category_NO;
		case 0x24F4: return Unicode_Category_NO;
		case 0x24F5: return Unicode_Category_NO;
		case 0x24F6: return Unicode_Category_NO;
		case 0x24F7: return Unicode_Category_NO;
		case 0x24F8: return Unicode_Category_NO;
		case 0x24F9: return Unicode_Category_NO;
		case 0x24FA: return Unicode_Category_NO;
		case 0x24FB: return Unicode_Category_NO;
		case 0x24FC: return Unicode_Category_NO;
		case 0x24FD: return Unicode_Category_NO;
		case 0x24FE: return Unicode_Category_NO;
		case 0x24FF: return Unicode_Category_NO;
		case 0x2500: return Unicode_Category_SO;
		case 0x2501: return Unicode_Category_SO;
		case 0x2502: return Unicode_Category_SO;
		case 0x2503: return Unicode_Category_SO;
		case 0x2504: return Unicode_Category_SO;
		case 0x2505: return Unicode_Category_SO;
		case 0x2506: return Unicode_Category_SO;
		case 0x2507: return Unicode_Category_SO;
		case 0x2508: return Unicode_Category_SO;
		case 0x2509: return Unicode_Category_SO;
		case 0x250A: return Unicode_Category_SO;
		case 0x250B: return Unicode_Category_SO;
		case 0x250C: return Unicode_Category_SO;
		case 0x250D: return Unicode_Category_SO;
		case 0x250E: return Unicode_Category_SO;
		case 0x250F: return Unicode_Category_SO;
		case 0x2510: return Unicode_Category_SO;
		case 0x2511: return Unicode_Category_SO;
		case 0x2512: return Unicode_Category_SO;
		case 0x2513: return Unicode_Category_SO;
		case 0x2514: return Unicode_Category_SO;
		case 0x2515: return Unicode_Category_SO;
		case 0x2516: return Unicode_Category_SO;
		case 0x2517: return Unicode_Category_SO;
		case 0x2518: return Unicode_Category_SO;
		case 0x2519: return Unicode_Category_SO;
		case 0x251A: return Unicode_Category_SO;
		case 0x251B: return Unicode_Category_SO;
		case 0x251C: return Unicode_Category_SO;
		case 0x251D: return Unicode_Category_SO;
		case 0x251E: return Unicode_Category_SO;
		case 0x251F: return Unicode_Category_SO;
		case 0x2520: return Unicode_Category_SO;
		case 0x2521: return Unicode_Category_SO;
		case 0x2522: return Unicode_Category_SO;
		case 0x2523: return Unicode_Category_SO;
		case 0x2524: return Unicode_Category_SO;
		case 0x2525: return Unicode_Category_SO;
		case 0x2526: return Unicode_Category_SO;
		case 0x2527: return Unicode_Category_SO;
		case 0x2528: return Unicode_Category_SO;
		case 0x2529: return Unicode_Category_SO;
		case 0x252A: return Unicode_Category_SO;
		case 0x252B: return Unicode_Category_SO;
		case 0x252C: return Unicode_Category_SO;
		case 0x252D: return Unicode_Category_SO;
		case 0x252E: return Unicode_Category_SO;
		case 0x252F: return Unicode_Category_SO;
		case 0x2530: return Unicode_Category_SO;
		case 0x2531: return Unicode_Category_SO;
		case 0x2532: return Unicode_Category_SO;
		case 0x2533: return Unicode_Category_SO;
		case 0x2534: return Unicode_Category_SO;
		case 0x2535: return Unicode_Category_SO;
		case 0x2536: return Unicode_Category_SO;
		case 0x2537: return Unicode_Category_SO;
		case 0x2538: return Unicode_Category_SO;
		case 0x2539: return Unicode_Category_SO;
		case 0x253A: return Unicode_Category_SO;
		case 0x253B: return Unicode_Category_SO;
		case 0x253C: return Unicode_Category_SO;
		case 0x253D: return Unicode_Category_SO;
		case 0x253E: return Unicode_Category_SO;
		case 0x253F: return Unicode_Category_SO;
		case 0x2540: return Unicode_Category_SO;
		case 0x2541: return Unicode_Category_SO;
		case 0x2542: return Unicode_Category_SO;
		case 0x2543: return Unicode_Category_SO;
		case 0x2544: return Unicode_Category_SO;
		case 0x2545: return Unicode_Category_SO;
		case 0x2546: return Unicode_Category_SO;
		case 0x2547: return Unicode_Category_SO;
		case 0x2548: return Unicode_Category_SO;
		case 0x2549: return Unicode_Category_SO;
		case 0x254A: return Unicode_Category_SO;
		case 0x254B: return Unicode_Category_SO;
		case 0x254C: return Unicode_Category_SO;
		case 0x254D: return Unicode_Category_SO;
		case 0x254E: return Unicode_Category_SO;
		case 0x254F: return Unicode_Category_SO;
		case 0x2550: return Unicode_Category_SO;
		case 0x2551: return Unicode_Category_SO;
		case 0x2552: return Unicode_Category_SO;
		case 0x2553: return Unicode_Category_SO;
		case 0x2554: return Unicode_Category_SO;
		case 0x2555: return Unicode_Category_SO;
		case 0x2556: return Unicode_Category_SO;
		case 0x2557: return Unicode_Category_SO;
		case 0x2558: return Unicode_Category_SO;
		case 0x2559: return Unicode_Category_SO;
		case 0x255A: return Unicode_Category_SO;
		case 0x255B: return Unicode_Category_SO;
		case 0x255C: return Unicode_Category_SO;
		case 0x255D: return Unicode_Category_SO;
		case 0x255E: return Unicode_Category_SO;
		case 0x255F: return Unicode_Category_SO;
		case 0x2560: return Unicode_Category_SO;
		case 0x2561: return Unicode_Category_SO;
		case 0x2562: return Unicode_Category_SO;
		case 0x2563: return Unicode_Category_SO;
		case 0x2564: return Unicode_Category_SO;
		case 0x2565: return Unicode_Category_SO;
		case 0x2566: return Unicode_Category_SO;
		case 0x2567: return Unicode_Category_SO;
		case 0x2568: return Unicode_Category_SO;
		case 0x2569: return Unicode_Category_SO;
		case 0x256A: return Unicode_Category_SO;
		case 0x256B: return Unicode_Category_SO;
		case 0x256C: return Unicode_Category_SO;
		case 0x256D: return Unicode_Category_SO;
		case 0x256E: return Unicode_Category_SO;
		case 0x256F: return Unicode_Category_SO;
		case 0x2570: return Unicode_Category_SO;
		case 0x2571: return Unicode_Category_SO;
		case 0x2572: return Unicode_Category_SO;
		case 0x2573: return Unicode_Category_SO;
		case 0x2574: return Unicode_Category_SO;
		case 0x2575: return Unicode_Category_SO;
		case 0x2576: return Unicode_Category_SO;
		case 0x2577: return Unicode_Category_SO;
		case 0x2578: return Unicode_Category_SO;
		case 0x2579: return Unicode_Category_SO;
		case 0x257A: return Unicode_Category_SO;
		case 0x257B: return Unicode_Category_SO;
		case 0x257C: return Unicode_Category_SO;
		case 0x257D: return Unicode_Category_SO;
		case 0x257E: return Unicode_Category_SO;
		case 0x257F: return Unicode_Category_SO;
		case 0x2580: return Unicode_Category_SO;
		case 0x2581: return Unicode_Category_SO;
		case 0x2582: return Unicode_Category_SO;
		case 0x2583: return Unicode_Category_SO;
		case 0x2584: return Unicode_Category_SO;
		case 0x2585: return Unicode_Category_SO;
		case 0x2586: return Unicode_Category_SO;
		case 0x2587: return Unicode_Category_SO;
		case 0x2588: return Unicode_Category_SO;
		case 0x2589: return Unicode_Category_SO;
		case 0x258A: return Unicode_Category_SO;
		case 0x258B: return Unicode_Category_SO;
		case 0x258C: return Unicode_Category_SO;
		case 0x258D: return Unicode_Category_SO;
		case 0x258E: return Unicode_Category_SO;
		case 0x258F: return Unicode_Category_SO;
		case 0x2590: return Unicode_Category_SO;
		case 0x2591: return Unicode_Category_SO;
		case 0x2592: return Unicode_Category_SO;
		case 0x2593: return Unicode_Category_SO;
		case 0x2594: return Unicode_Category_SO;
		case 0x2595: return Unicode_Category_SO;
		case 0x2596: return Unicode_Category_SO;
		case 0x2597: return Unicode_Category_SO;
		case 0x2598: return Unicode_Category_SO;
		case 0x2599: return Unicode_Category_SO;
		case 0x259A: return Unicode_Category_SO;
		case 0x259B: return Unicode_Category_SO;
		case 0x259C: return Unicode_Category_SO;
		case 0x259D: return Unicode_Category_SO;
		case 0x259E: return Unicode_Category_SO;
		case 0x259F: return Unicode_Category_SO;
		case 0x25A0: return Unicode_Category_SO;
		case 0x25A1: return Unicode_Category_SO;
		case 0x25A2: return Unicode_Category_SO;
		case 0x25A3: return Unicode_Category_SO;
		case 0x25A4: return Unicode_Category_SO;
		case 0x25A5: return Unicode_Category_SO;
		case 0x25A6: return Unicode_Category_SO;
		case 0x25A7: return Unicode_Category_SO;
		case 0x25A8: return Unicode_Category_SO;
		case 0x25A9: return Unicode_Category_SO;
		case 0x25AA: return Unicode_Category_SO;
		case 0x25AB: return Unicode_Category_SO;
		case 0x25AC: return Unicode_Category_SO;
		case 0x25AD: return Unicode_Category_SO;
		case 0x25AE: return Unicode_Category_SO;
		case 0x25AF: return Unicode_Category_SO;
		case 0x25B0: return Unicode_Category_SO;
		case 0x25B1: return Unicode_Category_SO;
		case 0x25B2: return Unicode_Category_SO;
		case 0x25B3: return Unicode_Category_SO;
		case 0x25B4: return Unicode_Category_SO;
		case 0x25B5: return Unicode_Category_SO;
		case 0x25B6: return Unicode_Category_SO;
		case 0x25B7: return Unicode_Category_SM;
		case 0x25B8: return Unicode_Category_SO;
		case 0x25B9: return Unicode_Category_SO;
		case 0x25BA: return Unicode_Category_SO;
		case 0x25BB: return Unicode_Category_SO;
		case 0x25BC: return Unicode_Category_SO;
		case 0x25BD: return Unicode_Category_SO;
		case 0x25BE: return Unicode_Category_SO;
		case 0x25BF: return Unicode_Category_SO;
		case 0x25C0: return Unicode_Category_SO;
		case 0x25C1: return Unicode_Category_SM;
		case 0x25C2: return Unicode_Category_SO;
		case 0x25C3: return Unicode_Category_SO;
		case 0x25C4: return Unicode_Category_SO;
		case 0x25C5: return Unicode_Category_SO;
		case 0x25C6: return Unicode_Category_SO;
		case 0x25C7: return Unicode_Category_SO;
		case 0x25C8: return Unicode_Category_SO;
		case 0x25C9: return Unicode_Category_SO;
		case 0x25CA: return Unicode_Category_SO;
		case 0x25CB: return Unicode_Category_SO;
		case 0x25CC: return Unicode_Category_SO;
		case 0x25CD: return Unicode_Category_SO;
		case 0x25CE: return Unicode_Category_SO;
		case 0x25CF: return Unicode_Category_SO;
		case 0x25D0: return Unicode_Category_SO;
		case 0x25D1: return Unicode_Category_SO;
		case 0x25D2: return Unicode_Category_SO;
		case 0x25D3: return Unicode_Category_SO;
		case 0x25D4: return Unicode_Category_SO;
		case 0x25D5: return Unicode_Category_SO;
		case 0x25D6: return Unicode_Category_SO;
		case 0x25D7: return Unicode_Category_SO;
		case 0x25D8: return Unicode_Category_SO;
		case 0x25D9: return Unicode_Category_SO;
		case 0x25DA: return Unicode_Category_SO;
		case 0x25DB: return Unicode_Category_SO;
		case 0x25DC: return Unicode_Category_SO;
		case 0x25DD: return Unicode_Category_SO;
		case 0x25DE: return Unicode_Category_SO;
		case 0x25DF: return Unicode_Category_SO;
		case 0x25E0: return Unicode_Category_SO;
		case 0x25E1: return Unicode_Category_SO;
		case 0x25E2: return Unicode_Category_SO;
		case 0x25E3: return Unicode_Category_SO;
		case 0x25E4: return Unicode_Category_SO;
		case 0x25E5: return Unicode_Category_SO;
		case 0x25E6: return Unicode_Category_SO;
		case 0x25E7: return Unicode_Category_SO;
		case 0x25E8: return Unicode_Category_SO;
		case 0x25E9: return Unicode_Category_SO;
		case 0x25EA: return Unicode_Category_SO;
		case 0x25EB: return Unicode_Category_SO;
		case 0x25EC: return Unicode_Category_SO;
		case 0x25ED: return Unicode_Category_SO;
		case 0x25EE: return Unicode_Category_SO;
		case 0x25EF: return Unicode_Category_SO;
		case 0x25F0: return Unicode_Category_SO;
		case 0x25F1: return Unicode_Category_SO;
		case 0x25F2: return Unicode_Category_SO;
		case 0x25F3: return Unicode_Category_SO;
		case 0x25F4: return Unicode_Category_SO;
		case 0x25F5: return Unicode_Category_SO;
		case 0x25F6: return Unicode_Category_SO;
		case 0x25F7: return Unicode_Category_SO;
		case 0x25F8: return Unicode_Category_SM;
		case 0x25F9: return Unicode_Category_SM;
		case 0x25FA: return Unicode_Category_SM;
		case 0x25FB: return Unicode_Category_SM;
		case 0x25FC: return Unicode_Category_SM;
		case 0x25FD: return Unicode_Category_SM;
		case 0x25FE: return Unicode_Category_SM;
		case 0x25FF: return Unicode_Category_SM;
		case 0x2600: return Unicode_Category_SO;
		case 0x2601: return Unicode_Category_SO;
		case 0x2602: return Unicode_Category_SO;
		case 0x2603: return Unicode_Category_SO;
		case 0x2604: return Unicode_Category_SO;
		case 0x2605: return Unicode_Category_SO;
		case 0x2606: return Unicode_Category_SO;
		case 0x2607: return Unicode_Category_SO;
		case 0x2608: return Unicode_Category_SO;
		case 0x2609: return Unicode_Category_SO;
		case 0x260A: return Unicode_Category_SO;
		case 0x260B: return Unicode_Category_SO;
		case 0x260C: return Unicode_Category_SO;
		case 0x260D: return Unicode_Category_SO;
		case 0x260E: return Unicode_Category_SO;
		case 0x260F: return Unicode_Category_SO;
		case 0x2610: return Unicode_Category_SO;
		case 0x2611: return Unicode_Category_SO;
		case 0x2612: return Unicode_Category_SO;
		case 0x2613: return Unicode_Category_SO;
		case 0x2614: return Unicode_Category_SO;
		case 0x2615: return Unicode_Category_SO;
		case 0x2616: return Unicode_Category_SO;
		case 0x2617: return Unicode_Category_SO;
		case 0x2618: return Unicode_Category_SO;
		case 0x2619: return Unicode_Category_SO;
		case 0x261A: return Unicode_Category_SO;
		case 0x261B: return Unicode_Category_SO;
		case 0x261C: return Unicode_Category_SO;
		case 0x261D: return Unicode_Category_SO;
		case 0x261E: return Unicode_Category_SO;
		case 0x261F: return Unicode_Category_SO;
		case 0x2620: return Unicode_Category_SO;
		case 0x2621: return Unicode_Category_SO;
		case 0x2622: return Unicode_Category_SO;
		case 0x2623: return Unicode_Category_SO;
		case 0x2624: return Unicode_Category_SO;
		case 0x2625: return Unicode_Category_SO;
		case 0x2626: return Unicode_Category_SO;
		case 0x2627: return Unicode_Category_SO;
		case 0x2628: return Unicode_Category_SO;
		case 0x2629: return Unicode_Category_SO;
		case 0x262A: return Unicode_Category_SO;
		case 0x262B: return Unicode_Category_SO;
		case 0x262C: return Unicode_Category_SO;
		case 0x262D: return Unicode_Category_SO;
		case 0x262E: return Unicode_Category_SO;
		case 0x262F: return Unicode_Category_SO;
		case 0x2630: return Unicode_Category_SO;
		case 0x2631: return Unicode_Category_SO;
		case 0x2632: return Unicode_Category_SO;
		case 0x2633: return Unicode_Category_SO;
		case 0x2634: return Unicode_Category_SO;
		case 0x2635: return Unicode_Category_SO;
		case 0x2636: return Unicode_Category_SO;
		case 0x2637: return Unicode_Category_SO;
		case 0x2638: return Unicode_Category_SO;
		case 0x2639: return Unicode_Category_SO;
		case 0x263A: return Unicode_Category_SO;
		case 0x263B: return Unicode_Category_SO;
		case 0x263C: return Unicode_Category_SO;
		case 0x263D: return Unicode_Category_SO;
		case 0x263E: return Unicode_Category_SO;
		case 0x263F: return Unicode_Category_SO;
		case 0x2640: return Unicode_Category_SO;
		case 0x2641: return Unicode_Category_SO;
		case 0x2642: return Unicode_Category_SO;
		case 0x2643: return Unicode_Category_SO;
		case 0x2644: return Unicode_Category_SO;
		case 0x2645: return Unicode_Category_SO;
		case 0x2646: return Unicode_Category_SO;
		case 0x2647: return Unicode_Category_SO;
		case 0x2648: return Unicode_Category_SO;
		case 0x2649: return Unicode_Category_SO;
		case 0x264A: return Unicode_Category_SO;
		case 0x264B: return Unicode_Category_SO;
		case 0x264C: return Unicode_Category_SO;
		case 0x264D: return Unicode_Category_SO;
		case 0x264E: return Unicode_Category_SO;
		case 0x264F: return Unicode_Category_SO;
		case 0x2650: return Unicode_Category_SO;
		case 0x2651: return Unicode_Category_SO;
		case 0x2652: return Unicode_Category_SO;
		case 0x2653: return Unicode_Category_SO;
		case 0x2654: return Unicode_Category_SO;
		case 0x2655: return Unicode_Category_SO;
		case 0x2656: return Unicode_Category_SO;
		case 0x2657: return Unicode_Category_SO;
		case 0x2658: return Unicode_Category_SO;
		case 0x2659: return Unicode_Category_SO;
		case 0x265A: return Unicode_Category_SO;
		case 0x265B: return Unicode_Category_SO;
		case 0x265C: return Unicode_Category_SO;
		case 0x265D: return Unicode_Category_SO;
		case 0x265E: return Unicode_Category_SO;
		case 0x265F: return Unicode_Category_SO;
		case 0x2660: return Unicode_Category_SO;
		case 0x2661: return Unicode_Category_SO;
		case 0x2662: return Unicode_Category_SO;
		case 0x2663: return Unicode_Category_SO;
		case 0x2664: return Unicode_Category_SO;
		case 0x2665: return Unicode_Category_SO;
		case 0x2666: return Unicode_Category_SO;
		case 0x2667: return Unicode_Category_SO;
		case 0x2668: return Unicode_Category_SO;
		case 0x2669: return Unicode_Category_SO;
		case 0x266A: return Unicode_Category_SO;
		case 0x266B: return Unicode_Category_SO;
		case 0x266C: return Unicode_Category_SO;
		case 0x266D: return Unicode_Category_SO;
		case 0x266E: return Unicode_Category_SO;
		case 0x266F: return Unicode_Category_SM;
		case 0x2670: return Unicode_Category_SO;
		case 0x2671: return Unicode_Category_SO;
		case 0x2672: return Unicode_Category_SO;
		case 0x2673: return Unicode_Category_SO;
		case 0x2674: return Unicode_Category_SO;
		case 0x2675: return Unicode_Category_SO;
		case 0x2676: return Unicode_Category_SO;
		case 0x2677: return Unicode_Category_SO;
		case 0x2678: return Unicode_Category_SO;
		case 0x2679: return Unicode_Category_SO;
		case 0x267A: return Unicode_Category_SO;
		case 0x267B: return Unicode_Category_SO;
		case 0x267C: return Unicode_Category_SO;
		case 0x267D: return Unicode_Category_SO;
		case 0x267E: return Unicode_Category_SO;
		case 0x267F: return Unicode_Category_SO;
		case 0x2680: return Unicode_Category_SO;
		case 0x2681: return Unicode_Category_SO;
		case 0x2682: return Unicode_Category_SO;
		case 0x2683: return Unicode_Category_SO;
		case 0x2684: return Unicode_Category_SO;
		case 0x2685: return Unicode_Category_SO;
		case 0x2686: return Unicode_Category_SO;
		case 0x2687: return Unicode_Category_SO;
		case 0x2688: return Unicode_Category_SO;
		case 0x2689: return Unicode_Category_SO;
		case 0x268A: return Unicode_Category_SO;
		case 0x268B: return Unicode_Category_SO;
		case 0x268C: return Unicode_Category_SO;
		case 0x268D: return Unicode_Category_SO;
		case 0x268E: return Unicode_Category_SO;
		case 0x268F: return Unicode_Category_SO;
		case 0x2690: return Unicode_Category_SO;
		case 0x2691: return Unicode_Category_SO;
		case 0x2692: return Unicode_Category_SO;
		case 0x2693: return Unicode_Category_SO;
		case 0x2694: return Unicode_Category_SO;
		case 0x2695: return Unicode_Category_SO;
		case 0x2696: return Unicode_Category_SO;
		case 0x2697: return Unicode_Category_SO;
		case 0x2698: return Unicode_Category_SO;
		case 0x2699: return Unicode_Category_SO;
		case 0x269A: return Unicode_Category_SO;
		case 0x269B: return Unicode_Category_SO;
		case 0x269C: return Unicode_Category_SO;
		case 0x269D: return Unicode_Category_SO;
		case 0x269E: return Unicode_Category_SO;
		case 0x269F: return Unicode_Category_SO;
		case 0x26A0: return Unicode_Category_SO;
		case 0x26A1: return Unicode_Category_SO;
		case 0x26A2: return Unicode_Category_SO;
		case 0x26A3: return Unicode_Category_SO;
		case 0x26A4: return Unicode_Category_SO;
		case 0x26A5: return Unicode_Category_SO;
		case 0x26A6: return Unicode_Category_SO;
		case 0x26A7: return Unicode_Category_SO;
		case 0x26A8: return Unicode_Category_SO;
		case 0x26A9: return Unicode_Category_SO;
		case 0x26AA: return Unicode_Category_SO;
		case 0x26AB: return Unicode_Category_SO;
		case 0x26AC: return Unicode_Category_SO;
		case 0x26AD: return Unicode_Category_SO;
		case 0x26AE: return Unicode_Category_SO;
		case 0x26AF: return Unicode_Category_SO;
		case 0x26B0: return Unicode_Category_SO;
		case 0x26B1: return Unicode_Category_SO;
		case 0x26B2: return Unicode_Category_SO;
		case 0x26B3: return Unicode_Category_SO;
		case 0x26B4: return Unicode_Category_SO;
		case 0x26B5: return Unicode_Category_SO;
		case 0x26B6: return Unicode_Category_SO;
		case 0x26B7: return Unicode_Category_SO;
		case 0x26B8: return Unicode_Category_SO;
		case 0x26B9: return Unicode_Category_SO;
		case 0x26BA: return Unicode_Category_SO;
		case 0x26BB: return Unicode_Category_SO;
		case 0x26BC: return Unicode_Category_SO;
		case 0x26BD: return Unicode_Category_SO;
		case 0x26BE: return Unicode_Category_SO;
		case 0x26BF: return Unicode_Category_SO;
		case 0x26C0: return Unicode_Category_SO;
		case 0x26C1: return Unicode_Category_SO;
		case 0x26C2: return Unicode_Category_SO;
		case 0x26C3: return Unicode_Category_SO;
		case 0x26C4: return Unicode_Category_SO;
		case 0x26C5: return Unicode_Category_SO;
		case 0x26C6: return Unicode_Category_SO;
		case 0x26C7: return Unicode_Category_SO;
		case 0x26C8: return Unicode_Category_SO;
		case 0x26C9: return Unicode_Category_SO;
		case 0x26CA: return Unicode_Category_SO;
		case 0x26CB: return Unicode_Category_SO;
		case 0x26CC: return Unicode_Category_SO;
		case 0x26CD: return Unicode_Category_SO;
		case 0x26CE: return Unicode_Category_SO;
		case 0x26CF: return Unicode_Category_SO;
		case 0x26D0: return Unicode_Category_SO;
		case 0x26D1: return Unicode_Category_SO;
		case 0x26D2: return Unicode_Category_SO;
		case 0x26D3: return Unicode_Category_SO;
		case 0x26D4: return Unicode_Category_SO;
		case 0x26D5: return Unicode_Category_SO;
		case 0x26D6: return Unicode_Category_SO;
		case 0x26D7: return Unicode_Category_SO;
		case 0x26D8: return Unicode_Category_SO;
		case 0x26D9: return Unicode_Category_SO;
		case 0x26DA: return Unicode_Category_SO;
		case 0x26DB: return Unicode_Category_SO;
		case 0x26DC: return Unicode_Category_SO;
		case 0x26DD: return Unicode_Category_SO;
		case 0x26DE: return Unicode_Category_SO;
		case 0x26DF: return Unicode_Category_SO;
		case 0x26E0: return Unicode_Category_SO;
		case 0x26E1: return Unicode_Category_SO;
		case 0x26E2: return Unicode_Category_SO;
		case 0x26E3: return Unicode_Category_SO;
		case 0x26E4: return Unicode_Category_SO;
		case 0x26E5: return Unicode_Category_SO;
		case 0x26E6: return Unicode_Category_SO;
		case 0x26E7: return Unicode_Category_SO;
		case 0x26E8: return Unicode_Category_SO;
		case 0x26E9: return Unicode_Category_SO;
		case 0x26EA: return Unicode_Category_SO;
		case 0x26EB: return Unicode_Category_SO;
		case 0x26EC: return Unicode_Category_SO;
		case 0x26ED: return Unicode_Category_SO;
		case 0x26EE: return Unicode_Category_SO;
		case 0x26EF: return Unicode_Category_SO;
		case 0x26F0: return Unicode_Category_SO;
		case 0x26F1: return Unicode_Category_SO;
		case 0x26F2: return Unicode_Category_SO;
		case 0x26F3: return Unicode_Category_SO;
		case 0x26F4: return Unicode_Category_SO;
		case 0x26F5: return Unicode_Category_SO;
		case 0x26F6: return Unicode_Category_SO;
		case 0x26F7: return Unicode_Category_SO;
		case 0x26F8: return Unicode_Category_SO;
		case 0x26F9: return Unicode_Category_SO;
		case 0x26FA: return Unicode_Category_SO;
		case 0x26FB: return Unicode_Category_SO;
		case 0x26FC: return Unicode_Category_SO;
		case 0x26FD: return Unicode_Category_SO;
		case 0x26FE: return Unicode_Category_SO;
		case 0x26FF: return Unicode_Category_SO;
		case 0x2700: return Unicode_Category_SO;
		case 0x2701: return Unicode_Category_SO;
		case 0x2702: return Unicode_Category_SO;
		case 0x2703: return Unicode_Category_SO;
		case 0x2704: return Unicode_Category_SO;
		case 0x2705: return Unicode_Category_SO;
		case 0x2706: return Unicode_Category_SO;
		case 0x2707: return Unicode_Category_SO;
		case 0x2708: return Unicode_Category_SO;
		case 0x2709: return Unicode_Category_SO;
		case 0x270A: return Unicode_Category_SO;
		case 0x270B: return Unicode_Category_SO;
		case 0x270C: return Unicode_Category_SO;
		case 0x270D: return Unicode_Category_SO;
		case 0x270E: return Unicode_Category_SO;
		case 0x270F: return Unicode_Category_SO;
		case 0x2710: return Unicode_Category_SO;
		case 0x2711: return Unicode_Category_SO;
		case 0x2712: return Unicode_Category_SO;
		case 0x2713: return Unicode_Category_SO;
		case 0x2714: return Unicode_Category_SO;
		case 0x2715: return Unicode_Category_SO;
		case 0x2716: return Unicode_Category_SO;
		case 0x2717: return Unicode_Category_SO;
		case 0x2718: return Unicode_Category_SO;
		case 0x2719: return Unicode_Category_SO;
		case 0x271A: return Unicode_Category_SO;
		case 0x271B: return Unicode_Category_SO;
		case 0x271C: return Unicode_Category_SO;
		case 0x271D: return Unicode_Category_SO;
		case 0x271E: return Unicode_Category_SO;
		case 0x271F: return Unicode_Category_SO;
		case 0x2720: return Unicode_Category_SO;
		case 0x2721: return Unicode_Category_SO;
		case 0x2722: return Unicode_Category_SO;
		case 0x2723: return Unicode_Category_SO;
		case 0x2724: return Unicode_Category_SO;
		case 0x2725: return Unicode_Category_SO;
		case 0x2726: return Unicode_Category_SO;
		case 0x2727: return Unicode_Category_SO;
		case 0x2728: return Unicode_Category_SO;
		case 0x2729: return Unicode_Category_SO;
		case 0x272A: return Unicode_Category_SO;
		case 0x272B: return Unicode_Category_SO;
		case 0x272C: return Unicode_Category_SO;
		case 0x272D: return Unicode_Category_SO;
		case 0x272E: return Unicode_Category_SO;
		case 0x272F: return Unicode_Category_SO;
		case 0x2730: return Unicode_Category_SO;
		case 0x2731: return Unicode_Category_SO;
		case 0x2732: return Unicode_Category_SO;
		case 0x2733: return Unicode_Category_SO;
		case 0x2734: return Unicode_Category_SO;
		case 0x2735: return Unicode_Category_SO;
		case 0x2736: return Unicode_Category_SO;
		case 0x2737: return Unicode_Category_SO;
		case 0x2738: return Unicode_Category_SO;
		case 0x2739: return Unicode_Category_SO;
		case 0x273A: return Unicode_Category_SO;
		case 0x273B: return Unicode_Category_SO;
		case 0x273C: return Unicode_Category_SO;
		case 0x273D: return Unicode_Category_SO;
		case 0x273E: return Unicode_Category_SO;
		case 0x273F: return Unicode_Category_SO;
		case 0x2740: return Unicode_Category_SO;
		case 0x2741: return Unicode_Category_SO;
		case 0x2742: return Unicode_Category_SO;
		case 0x2743: return Unicode_Category_SO;
		case 0x2744: return Unicode_Category_SO;
		case 0x2745: return Unicode_Category_SO;
		case 0x2746: return Unicode_Category_SO;
		case 0x2747: return Unicode_Category_SO;
		case 0x2748: return Unicode_Category_SO;
		case 0x2749: return Unicode_Category_SO;
		case 0x274A: return Unicode_Category_SO;
		case 0x274B: return Unicode_Category_SO;
		case 0x274C: return Unicode_Category_SO;
		case 0x274D: return Unicode_Category_SO;
		case 0x274E: return Unicode_Category_SO;
		case 0x274F: return Unicode_Category_SO;
		case 0x2750: return Unicode_Category_SO;
		case 0x2751: return Unicode_Category_SO;
		case 0x2752: return Unicode_Category_SO;
		case 0x2753: return Unicode_Category_SO;
		case 0x2754: return Unicode_Category_SO;
		case 0x2755: return Unicode_Category_SO;
		case 0x2756: return Unicode_Category_SO;
		case 0x2757: return Unicode_Category_SO;
		case 0x2758: return Unicode_Category_SO;
		case 0x2759: return Unicode_Category_SO;
		case 0x275A: return Unicode_Category_SO;
		case 0x275B: return Unicode_Category_SO;
		case 0x275C: return Unicode_Category_SO;
		case 0x275D: return Unicode_Category_SO;
		case 0x275E: return Unicode_Category_SO;
		case 0x275F: return Unicode_Category_SO;
		case 0x2760: return Unicode_Category_SO;
		case 0x2761: return Unicode_Category_SO;
		case 0x2762: return Unicode_Category_SO;
		case 0x2763: return Unicode_Category_SO;
		case 0x2764: return Unicode_Category_SO;
		case 0x2765: return Unicode_Category_SO;
		case 0x2766: return Unicode_Category_SO;
		case 0x2767: return Unicode_Category_SO;
		case 0x2768: return Unicode_Category_PS;
		case 0x2769: return Unicode_Category_PE;
		case 0x276A: return Unicode_Category_PS;
		case 0x276B: return Unicode_Category_PE;
		case 0x276C: return Unicode_Category_PS;
		case 0x276D: return Unicode_Category_PE;
		case 0x276E: return Unicode_Category_PS;
		case 0x276F: return Unicode_Category_PE;
		case 0x2770: return Unicode_Category_PS;
		case 0x2771: return Unicode_Category_PE;
		case 0x2772: return Unicode_Category_PS;
		case 0x2773: return Unicode_Category_PE;
		case 0x2774: return Unicode_Category_PS;
		case 0x2775: return Unicode_Category_PE;
		case 0x2776: return Unicode_Category_NO;
		case 0x2777: return Unicode_Category_NO;
		case 0x2778: return Unicode_Category_NO;
		case 0x2779: return Unicode_Category_NO;
		case 0x277A: return Unicode_Category_NO;
		case 0x277B: return Unicode_Category_NO;
		case 0x277C: return Unicode_Category_NO;
		case 0x277D: return Unicode_Category_NO;
		case 0x277E: return Unicode_Category_NO;
		case 0x277F: return Unicode_Category_NO;
		case 0x2780: return Unicode_Category_NO;
		case 0x2781: return Unicode_Category_NO;
		case 0x2782: return Unicode_Category_NO;
		case 0x2783: return Unicode_Category_NO;
		case 0x2784: return Unicode_Category_NO;
		case 0x2785: return Unicode_Category_NO;
		case 0x2786: return Unicode_Category_NO;
		case 0x2787: return Unicode_Category_NO;
		case 0x2788: return Unicode_Category_NO;
		case 0x2789: return Unicode_Category_NO;
		case 0x278A: return Unicode_Category_NO;
		case 0x278B: return Unicode_Category_NO;
		case 0x278C: return Unicode_Category_NO;
		case 0x278D: return Unicode_Category_NO;
		case 0x278E: return Unicode_Category_NO;
		case 0x278F: return Unicode_Category_NO;
		case 0x2790: return Unicode_Category_NO;
		case 0x2791: return Unicode_Category_NO;
		case 0x2792: return Unicode_Category_NO;
		case 0x2793: return Unicode_Category_NO;
		case 0x2794: return Unicode_Category_SO;
		case 0x2795: return Unicode_Category_SO;
		case 0x2796: return Unicode_Category_SO;
		case 0x2797: return Unicode_Category_SO;
		case 0x2798: return Unicode_Category_SO;
		case 0x2799: return Unicode_Category_SO;
		case 0x279A: return Unicode_Category_SO;
		case 0x279B: return Unicode_Category_SO;
		case 0x279C: return Unicode_Category_SO;
		case 0x279D: return Unicode_Category_SO;
		case 0x279E: return Unicode_Category_SO;
		case 0x279F: return Unicode_Category_SO;
		case 0x27A0: return Unicode_Category_SO;
		case 0x27A1: return Unicode_Category_SO;
		case 0x27A2: return Unicode_Category_SO;
		case 0x27A3: return Unicode_Category_SO;
		case 0x27A4: return Unicode_Category_SO;
		case 0x27A5: return Unicode_Category_SO;
		case 0x27A6: return Unicode_Category_SO;
		case 0x27A7: return Unicode_Category_SO;
		case 0x27A8: return Unicode_Category_SO;
		case 0x27A9: return Unicode_Category_SO;
		case 0x27AA: return Unicode_Category_SO;
		case 0x27AB: return Unicode_Category_SO;
		case 0x27AC: return Unicode_Category_SO;
		case 0x27AD: return Unicode_Category_SO;
		case 0x27AE: return Unicode_Category_SO;
		case 0x27AF: return Unicode_Category_SO;
		case 0x27B0: return Unicode_Category_SO;
		case 0x27B1: return Unicode_Category_SO;
		case 0x27B2: return Unicode_Category_SO;
		case 0x27B3: return Unicode_Category_SO;
		case 0x27B4: return Unicode_Category_SO;
		case 0x27B5: return Unicode_Category_SO;
		case 0x27B6: return Unicode_Category_SO;
		case 0x27B7: return Unicode_Category_SO;
		case 0x27B8: return Unicode_Category_SO;
		case 0x27B9: return Unicode_Category_SO;
		case 0x27BA: return Unicode_Category_SO;
		case 0x27BB: return Unicode_Category_SO;
		case 0x27BC: return Unicode_Category_SO;
		case 0x27BD: return Unicode_Category_SO;
		case 0x27BE: return Unicode_Category_SO;
		case 0x27BF: return Unicode_Category_SO;
		case 0x27C0: return Unicode_Category_SM;
		case 0x27C1: return Unicode_Category_SM;
		case 0x27C2: return Unicode_Category_SM;
		case 0x27C3: return Unicode_Category_SM;
		case 0x27C4: return Unicode_Category_SM;
		case 0x27C5: return Unicode_Category_PS;
		case 0x27C6: return Unicode_Category_PE;
		case 0x27C7: return Unicode_Category_SM;
		case 0x27C8: return Unicode_Category_SM;
		case 0x27C9: return Unicode_Category_SM;
		case 0x27CA: return Unicode_Category_SM;
		case 0x27CB: return Unicode_Category_SM;
		case 0x27CC: return Unicode_Category_SM;
		case 0x27CD: return Unicode_Category_SM;
		case 0x27CE: return Unicode_Category_SM;
		case 0x27CF: return Unicode_Category_SM;
		case 0x27D0: return Unicode_Category_SM;
		case 0x27D1: return Unicode_Category_SM;
		case 0x27D2: return Unicode_Category_SM;
		case 0x27D3: return Unicode_Category_SM;
		case 0x27D4: return Unicode_Category_SM;
		case 0x27D5: return Unicode_Category_SM;
		case 0x27D6: return Unicode_Category_SM;
		case 0x27D7: return Unicode_Category_SM;
		case 0x27D8: return Unicode_Category_SM;
		case 0x27D9: return Unicode_Category_SM;
		case 0x27DA: return Unicode_Category_SM;
		case 0x27DB: return Unicode_Category_SM;
		case 0x27DC: return Unicode_Category_SM;
		case 0x27DD: return Unicode_Category_SM;
		case 0x27DE: return Unicode_Category_SM;
		case 0x27DF: return Unicode_Category_SM;
		case 0x27E0: return Unicode_Category_SM;
		case 0x27E1: return Unicode_Category_SM;
		case 0x27E2: return Unicode_Category_SM;
		case 0x27E3: return Unicode_Category_SM;
		case 0x27E4: return Unicode_Category_SM;
		case 0x27E5: return Unicode_Category_SM;
		case 0x27E6: return Unicode_Category_PS;
		case 0x27E7: return Unicode_Category_PE;
		case 0x27E8: return Unicode_Category_PS;
		case 0x27E9: return Unicode_Category_PE;
		case 0x27EA: return Unicode_Category_PS;
		case 0x27EB: return Unicode_Category_PE;
		case 0x27EC: return Unicode_Category_PS;
		case 0x27ED: return Unicode_Category_PE;
		case 0x27EE: return Unicode_Category_PS;
		case 0x27EF: return Unicode_Category_PE;
		case 0x27F0: return Unicode_Category_SM;
		case 0x27F1: return Unicode_Category_SM;
		case 0x27F2: return Unicode_Category_SM;
		case 0x27F3: return Unicode_Category_SM;
		case 0x27F4: return Unicode_Category_SM;
		case 0x27F5: return Unicode_Category_SM;
		case 0x27F6: return Unicode_Category_SM;
		case 0x27F7: return Unicode_Category_SM;
		case 0x27F8: return Unicode_Category_SM;
		case 0x27F9: return Unicode_Category_SM;
		case 0x27FA: return Unicode_Category_SM;
		case 0x27FB: return Unicode_Category_SM;
		case 0x27FC: return Unicode_Category_SM;
		case 0x27FD: return Unicode_Category_SM;
		case 0x27FE: return Unicode_Category_SM;
		case 0x27FF: return Unicode_Category_SM;
		case 0x2800: return Unicode_Category_SO;
		case 0x2801: return Unicode_Category_SO;
		case 0x2802: return Unicode_Category_SO;
		case 0x2803: return Unicode_Category_SO;
		case 0x2804: return Unicode_Category_SO;
		case 0x2805: return Unicode_Category_SO;
		case 0x2806: return Unicode_Category_SO;
		case 0x2807: return Unicode_Category_SO;
		case 0x2808: return Unicode_Category_SO;
		case 0x2809: return Unicode_Category_SO;
		case 0x280A: return Unicode_Category_SO;
		case 0x280B: return Unicode_Category_SO;
		case 0x280C: return Unicode_Category_SO;
		case 0x280D: return Unicode_Category_SO;
		case 0x280E: return Unicode_Category_SO;
		case 0x280F: return Unicode_Category_SO;
		case 0x2810: return Unicode_Category_SO;
		case 0x2811: return Unicode_Category_SO;
		case 0x2812: return Unicode_Category_SO;
		case 0x2813: return Unicode_Category_SO;
		case 0x2814: return Unicode_Category_SO;
		case 0x2815: return Unicode_Category_SO;
		case 0x2816: return Unicode_Category_SO;
		case 0x2817: return Unicode_Category_SO;
		case 0x2818: return Unicode_Category_SO;
		case 0x2819: return Unicode_Category_SO;
		case 0x281A: return Unicode_Category_SO;
		case 0x281B: return Unicode_Category_SO;
		case 0x281C: return Unicode_Category_SO;
		case 0x281D: return Unicode_Category_SO;
		case 0x281E: return Unicode_Category_SO;
		case 0x281F: return Unicode_Category_SO;
		case 0x2820: return Unicode_Category_SO;
		case 0x2821: return Unicode_Category_SO;
		case 0x2822: return Unicode_Category_SO;
		case 0x2823: return Unicode_Category_SO;
		case 0x2824: return Unicode_Category_SO;
		case 0x2825: return Unicode_Category_SO;
		case 0x2826: return Unicode_Category_SO;
		case 0x2827: return Unicode_Category_SO;
		case 0x2828: return Unicode_Category_SO;
		case 0x2829: return Unicode_Category_SO;
		case 0x282A: return Unicode_Category_SO;
		case 0x282B: return Unicode_Category_SO;
		case 0x282C: return Unicode_Category_SO;
		case 0x282D: return Unicode_Category_SO;
		case 0x282E: return Unicode_Category_SO;
		case 0x282F: return Unicode_Category_SO;
		case 0x2830: return Unicode_Category_SO;
		case 0x2831: return Unicode_Category_SO;
		case 0x2832: return Unicode_Category_SO;
		case 0x2833: return Unicode_Category_SO;
		case 0x2834: return Unicode_Category_SO;
		case 0x2835: return Unicode_Category_SO;
		case 0x2836: return Unicode_Category_SO;
		case 0x2837: return Unicode_Category_SO;
		case 0x2838: return Unicode_Category_SO;
		case 0x2839: return Unicode_Category_SO;
		case 0x283A: return Unicode_Category_SO;
		case 0x283B: return Unicode_Category_SO;
		case 0x283C: return Unicode_Category_SO;
		case 0x283D: return Unicode_Category_SO;
		case 0x283E: return Unicode_Category_SO;
		case 0x283F: return Unicode_Category_SO;
		case 0x2840: return Unicode_Category_SO;
		case 0x2841: return Unicode_Category_SO;
		case 0x2842: return Unicode_Category_SO;
		case 0x2843: return Unicode_Category_SO;
		case 0x2844: return Unicode_Category_SO;
		case 0x2845: return Unicode_Category_SO;
		case 0x2846: return Unicode_Category_SO;
		case 0x2847: return Unicode_Category_SO;
		case 0x2848: return Unicode_Category_SO;
		case 0x2849: return Unicode_Category_SO;
		case 0x284A: return Unicode_Category_SO;
		case 0x284B: return Unicode_Category_SO;
		case 0x284C: return Unicode_Category_SO;
		case 0x284D: return Unicode_Category_SO;
		case 0x284E: return Unicode_Category_SO;
		case 0x284F: return Unicode_Category_SO;
		case 0x2850: return Unicode_Category_SO;
		case 0x2851: return Unicode_Category_SO;
		case 0x2852: return Unicode_Category_SO;
		case 0x2853: return Unicode_Category_SO;
		case 0x2854: return Unicode_Category_SO;
		case 0x2855: return Unicode_Category_SO;
		case 0x2856: return Unicode_Category_SO;
		case 0x2857: return Unicode_Category_SO;
		case 0x2858: return Unicode_Category_SO;
		case 0x2859: return Unicode_Category_SO;
		case 0x285A: return Unicode_Category_SO;
		case 0x285B: return Unicode_Category_SO;
		case 0x285C: return Unicode_Category_SO;
		case 0x285D: return Unicode_Category_SO;
		case 0x285E: return Unicode_Category_SO;
		case 0x285F: return Unicode_Category_SO;
		case 0x2860: return Unicode_Category_SO;
		case 0x2861: return Unicode_Category_SO;
		case 0x2862: return Unicode_Category_SO;
		case 0x2863: return Unicode_Category_SO;
		case 0x2864: return Unicode_Category_SO;
		case 0x2865: return Unicode_Category_SO;
		case 0x2866: return Unicode_Category_SO;
		case 0x2867: return Unicode_Category_SO;
		case 0x2868: return Unicode_Category_SO;
		case 0x2869: return Unicode_Category_SO;
		case 0x286A: return Unicode_Category_SO;
		case 0x286B: return Unicode_Category_SO;
		case 0x286C: return Unicode_Category_SO;
		case 0x286D: return Unicode_Category_SO;
		case 0x286E: return Unicode_Category_SO;
		case 0x286F: return Unicode_Category_SO;
		case 0x2870: return Unicode_Category_SO;
		case 0x2871: return Unicode_Category_SO;
		case 0x2872: return Unicode_Category_SO;
		case 0x2873: return Unicode_Category_SO;
		case 0x2874: return Unicode_Category_SO;
		case 0x2875: return Unicode_Category_SO;
		case 0x2876: return Unicode_Category_SO;
		case 0x2877: return Unicode_Category_SO;
		case 0x2878: return Unicode_Category_SO;
		case 0x2879: return Unicode_Category_SO;
		case 0x287A: return Unicode_Category_SO;
		case 0x287B: return Unicode_Category_SO;
		case 0x287C: return Unicode_Category_SO;
		case 0x287D: return Unicode_Category_SO;
		case 0x287E: return Unicode_Category_SO;
		case 0x287F: return Unicode_Category_SO;
		case 0x2880: return Unicode_Category_SO;
		case 0x2881: return Unicode_Category_SO;
		case 0x2882: return Unicode_Category_SO;
		case 0x2883: return Unicode_Category_SO;
		case 0x2884: return Unicode_Category_SO;
		case 0x2885: return Unicode_Category_SO;
		case 0x2886: return Unicode_Category_SO;
		case 0x2887: return Unicode_Category_SO;
		case 0x2888: return Unicode_Category_SO;
		case 0x2889: return Unicode_Category_SO;
		case 0x288A: return Unicode_Category_SO;
		case 0x288B: return Unicode_Category_SO;
		case 0x288C: return Unicode_Category_SO;
		case 0x288D: return Unicode_Category_SO;
		case 0x288E: return Unicode_Category_SO;
		case 0x288F: return Unicode_Category_SO;
		case 0x2890: return Unicode_Category_SO;
		case 0x2891: return Unicode_Category_SO;
		case 0x2892: return Unicode_Category_SO;
		case 0x2893: return Unicode_Category_SO;
		case 0x2894: return Unicode_Category_SO;
		case 0x2895: return Unicode_Category_SO;
		case 0x2896: return Unicode_Category_SO;
		case 0x2897: return Unicode_Category_SO;
		case 0x2898: return Unicode_Category_SO;
		case 0x2899: return Unicode_Category_SO;
		case 0x289A: return Unicode_Category_SO;
		case 0x289B: return Unicode_Category_SO;
		case 0x289C: return Unicode_Category_SO;
		case 0x289D: return Unicode_Category_SO;
		case 0x289E: return Unicode_Category_SO;
		case 0x289F: return Unicode_Category_SO;
		case 0x28A0: return Unicode_Category_SO;
		case 0x28A1: return Unicode_Category_SO;
		case 0x28A2: return Unicode_Category_SO;
		case 0x28A3: return Unicode_Category_SO;
		case 0x28A4: return Unicode_Category_SO;
		case 0x28A5: return Unicode_Category_SO;
		case 0x28A6: return Unicode_Category_SO;
		case 0x28A7: return Unicode_Category_SO;
		case 0x28A8: return Unicode_Category_SO;
		case 0x28A9: return Unicode_Category_SO;
		case 0x28AA: return Unicode_Category_SO;
		case 0x28AB: return Unicode_Category_SO;
		case 0x28AC: return Unicode_Category_SO;
		case 0x28AD: return Unicode_Category_SO;
		case 0x28AE: return Unicode_Category_SO;
		case 0x28AF: return Unicode_Category_SO;
		case 0x28B0: return Unicode_Category_SO;
		case 0x28B1: return Unicode_Category_SO;
		case 0x28B2: return Unicode_Category_SO;
		case 0x28B3: return Unicode_Category_SO;
		case 0x28B4: return Unicode_Category_SO;
		case 0x28B5: return Unicode_Category_SO;
		case 0x28B6: return Unicode_Category_SO;
		case 0x28B7: return Unicode_Category_SO;
		case 0x28B8: return Unicode_Category_SO;
		case 0x28B9: return Unicode_Category_SO;
		case 0x28BA: return Unicode_Category_SO;
		case 0x28BB: return Unicode_Category_SO;
		case 0x28BC: return Unicode_Category_SO;
		case 0x28BD: return Unicode_Category_SO;
		case 0x28BE: return Unicode_Category_SO;
		case 0x28BF: return Unicode_Category_SO;
		case 0x28C0: return Unicode_Category_SO;
		case 0x28C1: return Unicode_Category_SO;
		case 0x28C2: return Unicode_Category_SO;
		case 0x28C3: return Unicode_Category_SO;
		case 0x28C4: return Unicode_Category_SO;
		case 0x28C5: return Unicode_Category_SO;
		case 0x28C6: return Unicode_Category_SO;
		case 0x28C7: return Unicode_Category_SO;
		case 0x28C8: return Unicode_Category_SO;
		case 0x28C9: return Unicode_Category_SO;
		case 0x28CA: return Unicode_Category_SO;
		case 0x28CB: return Unicode_Category_SO;
		case 0x28CC: return Unicode_Category_SO;
		case 0x28CD: return Unicode_Category_SO;
		case 0x28CE: return Unicode_Category_SO;
		case 0x28CF: return Unicode_Category_SO;
		case 0x28D0: return Unicode_Category_SO;
		case 0x28D1: return Unicode_Category_SO;
		case 0x28D2: return Unicode_Category_SO;
		case 0x28D3: return Unicode_Category_SO;
		case 0x28D4: return Unicode_Category_SO;
		case 0x28D5: return Unicode_Category_SO;
		case 0x28D6: return Unicode_Category_SO;
		case 0x28D7: return Unicode_Category_SO;
		case 0x28D8: return Unicode_Category_SO;
		case 0x28D9: return Unicode_Category_SO;
		case 0x28DA: return Unicode_Category_SO;
		case 0x28DB: return Unicode_Category_SO;
		case 0x28DC: return Unicode_Category_SO;
		case 0x28DD: return Unicode_Category_SO;
		case 0x28DE: return Unicode_Category_SO;
		case 0x28DF: return Unicode_Category_SO;
		case 0x28E0: return Unicode_Category_SO;
		case 0x28E1: return Unicode_Category_SO;
		case 0x28E2: return Unicode_Category_SO;
		case 0x28E3: return Unicode_Category_SO;
		case 0x28E4: return Unicode_Category_SO;
		case 0x28E5: return Unicode_Category_SO;
		case 0x28E6: return Unicode_Category_SO;
		case 0x28E7: return Unicode_Category_SO;
		case 0x28E8: return Unicode_Category_SO;
		case 0x28E9: return Unicode_Category_SO;
		case 0x28EA: return Unicode_Category_SO;
		case 0x28EB: return Unicode_Category_SO;
		case 0x28EC: return Unicode_Category_SO;
		case 0x28ED: return Unicode_Category_SO;
		case 0x28EE: return Unicode_Category_SO;
		case 0x28EF: return Unicode_Category_SO;
		case 0x28F0: return Unicode_Category_SO;
		case 0x28F1: return Unicode_Category_SO;
		case 0x28F2: return Unicode_Category_SO;
		case 0x28F3: return Unicode_Category_SO;
		case 0x28F4: return Unicode_Category_SO;
		case 0x28F5: return Unicode_Category_SO;
		case 0x28F6: return Unicode_Category_SO;
		case 0x28F7: return Unicode_Category_SO;
		case 0x28F8: return Unicode_Category_SO;
		case 0x28F9: return Unicode_Category_SO;
		case 0x28FA: return Unicode_Category_SO;
		case 0x28FB: return Unicode_Category_SO;
		case 0x28FC: return Unicode_Category_SO;
		case 0x28FD: return Unicode_Category_SO;
		case 0x28FE: return Unicode_Category_SO;
		case 0x28FF: return Unicode_Category_SO;
		case 0x2900: return Unicode_Category_SM;
		case 0x2901: return Unicode_Category_SM;
		case 0x2902: return Unicode_Category_SM;
		case 0x2903: return Unicode_Category_SM;
		case 0x2904: return Unicode_Category_SM;
		case 0x2905: return Unicode_Category_SM;
		case 0x2906: return Unicode_Category_SM;
		case 0x2907: return Unicode_Category_SM;
		case 0x2908: return Unicode_Category_SM;
		case 0x2909: return Unicode_Category_SM;
		case 0x290A: return Unicode_Category_SM;
		case 0x290B: return Unicode_Category_SM;
		case 0x290C: return Unicode_Category_SM;
		case 0x290D: return Unicode_Category_SM;
		case 0x290E: return Unicode_Category_SM;
		case 0x290F: return Unicode_Category_SM;
		case 0x2910: return Unicode_Category_SM;
		case 0x2911: return Unicode_Category_SM;
		case 0x2912: return Unicode_Category_SM;
		case 0x2913: return Unicode_Category_SM;
		case 0x2914: return Unicode_Category_SM;
		case 0x2915: return Unicode_Category_SM;
		case 0x2916: return Unicode_Category_SM;
		case 0x2917: return Unicode_Category_SM;
		case 0x2918: return Unicode_Category_SM;
		case 0x2919: return Unicode_Category_SM;
		case 0x291A: return Unicode_Category_SM;
		case 0x291B: return Unicode_Category_SM;
		case 0x291C: return Unicode_Category_SM;
		case 0x291D: return Unicode_Category_SM;
		case 0x291E: return Unicode_Category_SM;
		case 0x291F: return Unicode_Category_SM;
		case 0x2920: return Unicode_Category_SM;
		case 0x2921: return Unicode_Category_SM;
		case 0x2922: return Unicode_Category_SM;
		case 0x2923: return Unicode_Category_SM;
		case 0x2924: return Unicode_Category_SM;
		case 0x2925: return Unicode_Category_SM;
		case 0x2926: return Unicode_Category_SM;
		case 0x2927: return Unicode_Category_SM;
		case 0x2928: return Unicode_Category_SM;
		case 0x2929: return Unicode_Category_SM;
		case 0x292A: return Unicode_Category_SM;
		case 0x292B: return Unicode_Category_SM;
		case 0x292C: return Unicode_Category_SM;
		case 0x292D: return Unicode_Category_SM;
		case 0x292E: return Unicode_Category_SM;
		case 0x292F: return Unicode_Category_SM;
		case 0x2930: return Unicode_Category_SM;
		case 0x2931: return Unicode_Category_SM;
		case 0x2932: return Unicode_Category_SM;
		case 0x2933: return Unicode_Category_SM;
		case 0x2934: return Unicode_Category_SM;
		case 0x2935: return Unicode_Category_SM;
		case 0x2936: return Unicode_Category_SM;
		case 0x2937: return Unicode_Category_SM;
		case 0x2938: return Unicode_Category_SM;
		case 0x2939: return Unicode_Category_SM;
		case 0x293A: return Unicode_Category_SM;
		case 0x293B: return Unicode_Category_SM;
		case 0x293C: return Unicode_Category_SM;
		case 0x293D: return Unicode_Category_SM;
		case 0x293E: return Unicode_Category_SM;
		case 0x293F: return Unicode_Category_SM;
		case 0x2940: return Unicode_Category_SM;
		case 0x2941: return Unicode_Category_SM;
		case 0x2942: return Unicode_Category_SM;
		case 0x2943: return Unicode_Category_SM;
		case 0x2944: return Unicode_Category_SM;
		case 0x2945: return Unicode_Category_SM;
		case 0x2946: return Unicode_Category_SM;
		case 0x2947: return Unicode_Category_SM;
		case 0x2948: return Unicode_Category_SM;
		case 0x2949: return Unicode_Category_SM;
		case 0x294A: return Unicode_Category_SM;
		case 0x294B: return Unicode_Category_SM;
		case 0x294C: return Unicode_Category_SM;
		case 0x294D: return Unicode_Category_SM;
		case 0x294E: return Unicode_Category_SM;
		case 0x294F: return Unicode_Category_SM;
		case 0x2950: return Unicode_Category_SM;
		case 0x2951: return Unicode_Category_SM;
		case 0x2952: return Unicode_Category_SM;
		case 0x2953: return Unicode_Category_SM;
		case 0x2954: return Unicode_Category_SM;
		case 0x2955: return Unicode_Category_SM;
		case 0x2956: return Unicode_Category_SM;
		case 0x2957: return Unicode_Category_SM;
		case 0x2958: return Unicode_Category_SM;
		case 0x2959: return Unicode_Category_SM;
		case 0x295A: return Unicode_Category_SM;
		case 0x295B: return Unicode_Category_SM;
		case 0x295C: return Unicode_Category_SM;
		case 0x295D: return Unicode_Category_SM;
		case 0x295E: return Unicode_Category_SM;
		case 0x295F: return Unicode_Category_SM;
		case 0x2960: return Unicode_Category_SM;
		case 0x2961: return Unicode_Category_SM;
		case 0x2962: return Unicode_Category_SM;
		case 0x2963: return Unicode_Category_SM;
		case 0x2964: return Unicode_Category_SM;
		case 0x2965: return Unicode_Category_SM;
		case 0x2966: return Unicode_Category_SM;
		case 0x2967: return Unicode_Category_SM;
		case 0x2968: return Unicode_Category_SM;
		case 0x2969: return Unicode_Category_SM;
		case 0x296A: return Unicode_Category_SM;
		case 0x296B: return Unicode_Category_SM;
		case 0x296C: return Unicode_Category_SM;
		case 0x296D: return Unicode_Category_SM;
		case 0x296E: return Unicode_Category_SM;
		case 0x296F: return Unicode_Category_SM;
		case 0x2970: return Unicode_Category_SM;
		case 0x2971: return Unicode_Category_SM;
		case 0x2972: return Unicode_Category_SM;
		case 0x2973: return Unicode_Category_SM;
		case 0x2974: return Unicode_Category_SM;
		case 0x2975: return Unicode_Category_SM;
		case 0x2976: return Unicode_Category_SM;
		case 0x2977: return Unicode_Category_SM;
		case 0x2978: return Unicode_Category_SM;
		case 0x2979: return Unicode_Category_SM;
		case 0x297A: return Unicode_Category_SM;
		case 0x297B: return Unicode_Category_SM;
		case 0x297C: return Unicode_Category_SM;
		case 0x297D: return Unicode_Category_SM;
		case 0x297E: return Unicode_Category_SM;
		case 0x297F: return Unicode_Category_SM;
		case 0x2980: return Unicode_Category_SM;
		case 0x2981: return Unicode_Category_SM;
		case 0x2982: return Unicode_Category_SM;
		case 0x2983: return Unicode_Category_PS;
		case 0x2984: return Unicode_Category_PE;
		case 0x2985: return Unicode_Category_PS;
		case 0x2986: return Unicode_Category_PE;
		case 0x2987: return Unicode_Category_PS;
		case 0x2988: return Unicode_Category_PE;
		case 0x2989: return Unicode_Category_PS;
		case 0x298A: return Unicode_Category_PE;
		case 0x298B: return Unicode_Category_PS;
		case 0x298C: return Unicode_Category_PE;
		case 0x298D: return Unicode_Category_PS;
		case 0x298E: return Unicode_Category_PE;
		case 0x298F: return Unicode_Category_PS;
		case 0x2990: return Unicode_Category_PE;
		case 0x2991: return Unicode_Category_PS;
		case 0x2992: return Unicode_Category_PE;
		case 0x2993: return Unicode_Category_PS;
		case 0x2994: return Unicode_Category_PE;
		case 0x2995: return Unicode_Category_PS;
		case 0x2996: return Unicode_Category_PE;
		case 0x2997: return Unicode_Category_PS;
		case 0x2998: return Unicode_Category_PE;
		case 0x2999: return Unicode_Category_SM;
		case 0x299A: return Unicode_Category_SM;
		case 0x299B: return Unicode_Category_SM;
		case 0x299C: return Unicode_Category_SM;
		case 0x299D: return Unicode_Category_SM;
		case 0x299E: return Unicode_Category_SM;
		case 0x299F: return Unicode_Category_SM;
		case 0x29A0: return Unicode_Category_SM;
		case 0x29A1: return Unicode_Category_SM;
		case 0x29A2: return Unicode_Category_SM;
		case 0x29A3: return Unicode_Category_SM;
		case 0x29A4: return Unicode_Category_SM;
		case 0x29A5: return Unicode_Category_SM;
		case 0x29A6: return Unicode_Category_SM;
		case 0x29A7: return Unicode_Category_SM;
		case 0x29A8: return Unicode_Category_SM;
		case 0x29A9: return Unicode_Category_SM;
		case 0x29AA: return Unicode_Category_SM;
		case 0x29AB: return Unicode_Category_SM;
		case 0x29AC: return Unicode_Category_SM;
		case 0x29AD: return Unicode_Category_SM;
		case 0x29AE: return Unicode_Category_SM;
		case 0x29AF: return Unicode_Category_SM;
		case 0x29B0: return Unicode_Category_SM;
		case 0x29B1: return Unicode_Category_SM;
		case 0x29B2: return Unicode_Category_SM;
		case 0x29B3: return Unicode_Category_SM;
		case 0x29B4: return Unicode_Category_SM;
		case 0x29B5: return Unicode_Category_SM;
		case 0x29B6: return Unicode_Category_SM;
		case 0x29B7: return Unicode_Category_SM;
		case 0x29B8: return Unicode_Category_SM;
		case 0x29B9: return Unicode_Category_SM;
		case 0x29BA: return Unicode_Category_SM;
		case 0x29BB: return Unicode_Category_SM;
		case 0x29BC: return Unicode_Category_SM;
		case 0x29BD: return Unicode_Category_SM;
		case 0x29BE: return Unicode_Category_SM;
		case 0x29BF: return Unicode_Category_SM;
		case 0x29C0: return Unicode_Category_SM;
		case 0x29C1: return Unicode_Category_SM;
		case 0x29C2: return Unicode_Category_SM;
		case 0x29C3: return Unicode_Category_SM;
		case 0x29C4: return Unicode_Category_SM;
		case 0x29C5: return Unicode_Category_SM;
		case 0x29C6: return Unicode_Category_SM;
		case 0x29C7: return Unicode_Category_SM;
		case 0x29C8: return Unicode_Category_SM;
		case 0x29C9: return Unicode_Category_SM;
		case 0x29CA: return Unicode_Category_SM;
		case 0x29CB: return Unicode_Category_SM;
		case 0x29CC: return Unicode_Category_SM;
		case 0x29CD: return Unicode_Category_SM;
		case 0x29CE: return Unicode_Category_SM;
		case 0x29CF: return Unicode_Category_SM;
		case 0x29D0: return Unicode_Category_SM;
		case 0x29D1: return Unicode_Category_SM;
		case 0x29D2: return Unicode_Category_SM;
		case 0x29D3: return Unicode_Category_SM;
		case 0x29D4: return Unicode_Category_SM;
		case 0x29D5: return Unicode_Category_SM;
		case 0x29D6: return Unicode_Category_SM;
		case 0x29D7: return Unicode_Category_SM;
		case 0x29D8: return Unicode_Category_PS;
		case 0x29D9: return Unicode_Category_PE;
		case 0x29DA: return Unicode_Category_PS;
		case 0x29DB: return Unicode_Category_PE;
		case 0x29DC: return Unicode_Category_SM;
		case 0x29DD: return Unicode_Category_SM;
		case 0x29DE: return Unicode_Category_SM;
		case 0x29DF: return Unicode_Category_SM;
		case 0x29E0: return Unicode_Category_SM;
		case 0x29E1: return Unicode_Category_SM;
		case 0x29E2: return Unicode_Category_SM;
		case 0x29E3: return Unicode_Category_SM;
		case 0x29E4: return Unicode_Category_SM;
		case 0x29E5: return Unicode_Category_SM;
		case 0x29E6: return Unicode_Category_SM;
		case 0x29E7: return Unicode_Category_SM;
		case 0x29E8: return Unicode_Category_SM;
		case 0x29E9: return Unicode_Category_SM;
		case 0x29EA: return Unicode_Category_SM;
		case 0x29EB: return Unicode_Category_SM;
		case 0x29EC: return Unicode_Category_SM;
		case 0x29ED: return Unicode_Category_SM;
		case 0x29EE: return Unicode_Category_SM;
		case 0x29EF: return Unicode_Category_SM;
		case 0x29F0: return Unicode_Category_SM;
		case 0x29F1: return Unicode_Category_SM;
		case 0x29F2: return Unicode_Category_SM;
		case 0x29F3: return Unicode_Category_SM;
		case 0x29F4: return Unicode_Category_SM;
		case 0x29F5: return Unicode_Category_SM;
		case 0x29F6: return Unicode_Category_SM;
		case 0x29F7: return Unicode_Category_SM;
		case 0x29F8: return Unicode_Category_SM;
		case 0x29F9: return Unicode_Category_SM;
		case 0x29FA: return Unicode_Category_SM;
		case 0x29FB: return Unicode_Category_SM;
		case 0x29FC: return Unicode_Category_PS;
		case 0x29FD: return Unicode_Category_PE;
		case 0x29FE: return Unicode_Category_SM;
		case 0x29FF: return Unicode_Category_SM;
		case 0x2A00: return Unicode_Category_SM;
		case 0x2A01: return Unicode_Category_SM;
		case 0x2A02: return Unicode_Category_SM;
		case 0x2A03: return Unicode_Category_SM;
		case 0x2A04: return Unicode_Category_SM;
		case 0x2A05: return Unicode_Category_SM;
		case 0x2A06: return Unicode_Category_SM;
		case 0x2A07: return Unicode_Category_SM;
		case 0x2A08: return Unicode_Category_SM;
		case 0x2A09: return Unicode_Category_SM;
		case 0x2A0A: return Unicode_Category_SM;
		case 0x2A0B: return Unicode_Category_SM;
		case 0x2A0C: return Unicode_Category_SM;
		case 0x2A0D: return Unicode_Category_SM;
		case 0x2A0E: return Unicode_Category_SM;
		case 0x2A0F: return Unicode_Category_SM;
		case 0x2A10: return Unicode_Category_SM;
		case 0x2A11: return Unicode_Category_SM;
		case 0x2A12: return Unicode_Category_SM;
		case 0x2A13: return Unicode_Category_SM;
		case 0x2A14: return Unicode_Category_SM;
		case 0x2A15: return Unicode_Category_SM;
		case 0x2A16: return Unicode_Category_SM;
		case 0x2A17: return Unicode_Category_SM;
		case 0x2A18: return Unicode_Category_SM;
		case 0x2A19: return Unicode_Category_SM;
		case 0x2A1A: return Unicode_Category_SM;
		case 0x2A1B: return Unicode_Category_SM;
		case 0x2A1C: return Unicode_Category_SM;
		case 0x2A1D: return Unicode_Category_SM;
		case 0x2A1E: return Unicode_Category_SM;
		case 0x2A1F: return Unicode_Category_SM;
		case 0x2A20: return Unicode_Category_SM;
		case 0x2A21: return Unicode_Category_SM;
		case 0x2A22: return Unicode_Category_SM;
		case 0x2A23: return Unicode_Category_SM;
		case 0x2A24: return Unicode_Category_SM;
		case 0x2A25: return Unicode_Category_SM;
		case 0x2A26: return Unicode_Category_SM;
		case 0x2A27: return Unicode_Category_SM;
		case 0x2A28: return Unicode_Category_SM;
		case 0x2A29: return Unicode_Category_SM;
		case 0x2A2A: return Unicode_Category_SM;
		case 0x2A2B: return Unicode_Category_SM;
		case 0x2A2C: return Unicode_Category_SM;
		case 0x2A2D: return Unicode_Category_SM;
		case 0x2A2E: return Unicode_Category_SM;
		case 0x2A2F: return Unicode_Category_SM;
		case 0x2A30: return Unicode_Category_SM;
		case 0x2A31: return Unicode_Category_SM;
		case 0x2A32: return Unicode_Category_SM;
		case 0x2A33: return Unicode_Category_SM;
		case 0x2A34: return Unicode_Category_SM;
		case 0x2A35: return Unicode_Category_SM;
		case 0x2A36: return Unicode_Category_SM;
		case 0x2A37: return Unicode_Category_SM;
		case 0x2A38: return Unicode_Category_SM;
		case 0x2A39: return Unicode_Category_SM;
		case 0x2A3A: return Unicode_Category_SM;
		case 0x2A3B: return Unicode_Category_SM;
		case 0x2A3C: return Unicode_Category_SM;
		case 0x2A3D: return Unicode_Category_SM;
		case 0x2A3E: return Unicode_Category_SM;
		case 0x2A3F: return Unicode_Category_SM;
		case 0x2A40: return Unicode_Category_SM;
		case 0x2A41: return Unicode_Category_SM;
		case 0x2A42: return Unicode_Category_SM;
		case 0x2A43: return Unicode_Category_SM;
		case 0x2A44: return Unicode_Category_SM;
		case 0x2A45: return Unicode_Category_SM;
		case 0x2A46: return Unicode_Category_SM;
		case 0x2A47: return Unicode_Category_SM;
		case 0x2A48: return Unicode_Category_SM;
		case 0x2A49: return Unicode_Category_SM;
		case 0x2A4A: return Unicode_Category_SM;
		case 0x2A4B: return Unicode_Category_SM;
		case 0x2A4C: return Unicode_Category_SM;
		case 0x2A4D: return Unicode_Category_SM;
		case 0x2A4E: return Unicode_Category_SM;
		case 0x2A4F: return Unicode_Category_SM;
		case 0x2A50: return Unicode_Category_SM;
		case 0x2A51: return Unicode_Category_SM;
		case 0x2A52: return Unicode_Category_SM;
		case 0x2A53: return Unicode_Category_SM;
		case 0x2A54: return Unicode_Category_SM;
		case 0x2A55: return Unicode_Category_SM;
		case 0x2A56: return Unicode_Category_SM;
		case 0x2A57: return Unicode_Category_SM;
		case 0x2A58: return Unicode_Category_SM;
		case 0x2A59: return Unicode_Category_SM;
		case 0x2A5A: return Unicode_Category_SM;
		case 0x2A5B: return Unicode_Category_SM;
		case 0x2A5C: return Unicode_Category_SM;
		case 0x2A5D: return Unicode_Category_SM;
		case 0x2A5E: return Unicode_Category_SM;
		case 0x2A5F: return Unicode_Category_SM;
		case 0x2A60: return Unicode_Category_SM;
		case 0x2A61: return Unicode_Category_SM;
		case 0x2A62: return Unicode_Category_SM;
		case 0x2A63: return Unicode_Category_SM;
		case 0x2A64: return Unicode_Category_SM;
		case 0x2A65: return Unicode_Category_SM;
		case 0x2A66: return Unicode_Category_SM;
		case 0x2A67: return Unicode_Category_SM;
		case 0x2A68: return Unicode_Category_SM;
		case 0x2A69: return Unicode_Category_SM;
		case 0x2A6A: return Unicode_Category_SM;
		case 0x2A6B: return Unicode_Category_SM;
		case 0x2A6C: return Unicode_Category_SM;
		case 0x2A6D: return Unicode_Category_SM;
		case 0x2A6E: return Unicode_Category_SM;
		case 0x2A6F: return Unicode_Category_SM;
		case 0x2A70: return Unicode_Category_SM;
		case 0x2A71: return Unicode_Category_SM;
		case 0x2A72: return Unicode_Category_SM;
		case 0x2A73: return Unicode_Category_SM;
		case 0x2A74: return Unicode_Category_SM;
		case 0x2A75: return Unicode_Category_SM;
		case 0x2A76: return Unicode_Category_SM;
		case 0x2A77: return Unicode_Category_SM;
		case 0x2A78: return Unicode_Category_SM;
		case 0x2A79: return Unicode_Category_SM;
		case 0x2A7A: return Unicode_Category_SM;
		case 0x2A7B: return Unicode_Category_SM;
		case 0x2A7C: return Unicode_Category_SM;
		case 0x2A7D: return Unicode_Category_SM;
		case 0x2A7E: return Unicode_Category_SM;
		case 0x2A7F: return Unicode_Category_SM;
		case 0x2A80: return Unicode_Category_SM;
		case 0x2A81: return Unicode_Category_SM;
		case 0x2A82: return Unicode_Category_SM;
		case 0x2A83: return Unicode_Category_SM;
		case 0x2A84: return Unicode_Category_SM;
		case 0x2A85: return Unicode_Category_SM;
		case 0x2A86: return Unicode_Category_SM;
		case 0x2A87: return Unicode_Category_SM;
		case 0x2A88: return Unicode_Category_SM;
		case 0x2A89: return Unicode_Category_SM;
		case 0x2A8A: return Unicode_Category_SM;
		case 0x2A8B: return Unicode_Category_SM;
		case 0x2A8C: return Unicode_Category_SM;
		case 0x2A8D: return Unicode_Category_SM;
		case 0x2A8E: return Unicode_Category_SM;
		case 0x2A8F: return Unicode_Category_SM;
		case 0x2A90: return Unicode_Category_SM;
		case 0x2A91: return Unicode_Category_SM;
		case 0x2A92: return Unicode_Category_SM;
		case 0x2A93: return Unicode_Category_SM;
		case 0x2A94: return Unicode_Category_SM;
		case 0x2A95: return Unicode_Category_SM;
		case 0x2A96: return Unicode_Category_SM;
		case 0x2A97: return Unicode_Category_SM;
		case 0x2A98: return Unicode_Category_SM;
		case 0x2A99: return Unicode_Category_SM;
		case 0x2A9A: return Unicode_Category_SM;
		case 0x2A9B: return Unicode_Category_SM;
		case 0x2A9C: return Unicode_Category_SM;
		case 0x2A9D: return Unicode_Category_SM;
		case 0x2A9E: return Unicode_Category_SM;
		case 0x2A9F: return Unicode_Category_SM;
		case 0x2AA0: return Unicode_Category_SM;
		case 0x2AA1: return Unicode_Category_SM;
		case 0x2AA2: return Unicode_Category_SM;
		case 0x2AA3: return Unicode_Category_SM;
		case 0x2AA4: return Unicode_Category_SM;
		case 0x2AA5: return Unicode_Category_SM;
		case 0x2AA6: return Unicode_Category_SM;
		case 0x2AA7: return Unicode_Category_SM;
		case 0x2AA8: return Unicode_Category_SM;
		case 0x2AA9: return Unicode_Category_SM;
		case 0x2AAA: return Unicode_Category_SM;
		case 0x2AAB: return Unicode_Category_SM;
		case 0x2AAC: return Unicode_Category_SM;
		case 0x2AAD: return Unicode_Category_SM;
		case 0x2AAE: return Unicode_Category_SM;
		case 0x2AAF: return Unicode_Category_SM;
		case 0x2AB0: return Unicode_Category_SM;
		case 0x2AB1: return Unicode_Category_SM;
		case 0x2AB2: return Unicode_Category_SM;
		case 0x2AB3: return Unicode_Category_SM;
		case 0x2AB4: return Unicode_Category_SM;
		case 0x2AB5: return Unicode_Category_SM;
		case 0x2AB6: return Unicode_Category_SM;
		case 0x2AB7: return Unicode_Category_SM;
		case 0x2AB8: return Unicode_Category_SM;
		case 0x2AB9: return Unicode_Category_SM;
		case 0x2ABA: return Unicode_Category_SM;
		case 0x2ABB: return Unicode_Category_SM;
		case 0x2ABC: return Unicode_Category_SM;
		case 0x2ABD: return Unicode_Category_SM;
		case 0x2ABE: return Unicode_Category_SM;
		case 0x2ABF: return Unicode_Category_SM;
		case 0x2AC0: return Unicode_Category_SM;
		case 0x2AC1: return Unicode_Category_SM;
		case 0x2AC2: return Unicode_Category_SM;
		case 0x2AC3: return Unicode_Category_SM;
		case 0x2AC4: return Unicode_Category_SM;
		case 0x2AC5: return Unicode_Category_SM;
		case 0x2AC6: return Unicode_Category_SM;
		case 0x2AC7: return Unicode_Category_SM;
		case 0x2AC8: return Unicode_Category_SM;
		case 0x2AC9: return Unicode_Category_SM;
		case 0x2ACA: return Unicode_Category_SM;
		case 0x2ACB: return Unicode_Category_SM;
		case 0x2ACC: return Unicode_Category_SM;
		case 0x2ACD: return Unicode_Category_SM;
		case 0x2ACE: return Unicode_Category_SM;
		case 0x2ACF: return Unicode_Category_SM;
		case 0x2AD0: return Unicode_Category_SM;
		case 0x2AD1: return Unicode_Category_SM;
		case 0x2AD2: return Unicode_Category_SM;
		case 0x2AD3: return Unicode_Category_SM;
		case 0x2AD4: return Unicode_Category_SM;
		case 0x2AD5: return Unicode_Category_SM;
		case 0x2AD6: return Unicode_Category_SM;
		case 0x2AD7: return Unicode_Category_SM;
		case 0x2AD8: return Unicode_Category_SM;
		case 0x2AD9: return Unicode_Category_SM;
		case 0x2ADA: return Unicode_Category_SM;
		case 0x2ADB: return Unicode_Category_SM;
		case 0x2ADC: return Unicode_Category_SM;
		case 0x2ADD: return Unicode_Category_SM;
		case 0x2ADE: return Unicode_Category_SM;
		case 0x2ADF: return Unicode_Category_SM;
		case 0x2AE0: return Unicode_Category_SM;
		case 0x2AE1: return Unicode_Category_SM;
		case 0x2AE2: return Unicode_Category_SM;
		case 0x2AE3: return Unicode_Category_SM;
		case 0x2AE4: return Unicode_Category_SM;
		case 0x2AE5: return Unicode_Category_SM;
		case 0x2AE6: return Unicode_Category_SM;
		case 0x2AE7: return Unicode_Category_SM;
		case 0x2AE8: return Unicode_Category_SM;
		case 0x2AE9: return Unicode_Category_SM;
		case 0x2AEA: return Unicode_Category_SM;
		case 0x2AEB: return Unicode_Category_SM;
		case 0x2AEC: return Unicode_Category_SM;
		case 0x2AED: return Unicode_Category_SM;
		case 0x2AEE: return Unicode_Category_SM;
		case 0x2AEF: return Unicode_Category_SM;
		case 0x2AF0: return Unicode_Category_SM;
		case 0x2AF1: return Unicode_Category_SM;
		case 0x2AF2: return Unicode_Category_SM;
		case 0x2AF3: return Unicode_Category_SM;
		case 0x2AF4: return Unicode_Category_SM;
		case 0x2AF5: return Unicode_Category_SM;
		case 0x2AF6: return Unicode_Category_SM;
		case 0x2AF7: return Unicode_Category_SM;
		case 0x2AF8: return Unicode_Category_SM;
		case 0x2AF9: return Unicode_Category_SM;
		case 0x2AFA: return Unicode_Category_SM;
		case 0x2AFB: return Unicode_Category_SM;
		case 0x2AFC: return Unicode_Category_SM;
		case 0x2AFD: return Unicode_Category_SM;
		case 0x2AFE: return Unicode_Category_SM;
		case 0x2AFF: return Unicode_Category_SM;
		case 0x2B00: return Unicode_Category_SO;
		case 0x2B01: return Unicode_Category_SO;
		case 0x2B02: return Unicode_Category_SO;
		case 0x2B03: return Unicode_Category_SO;
		case 0x2B04: return Unicode_Category_SO;
		case 0x2B05: return Unicode_Category_SO;
		case 0x2B06: return Unicode_Category_SO;
		case 0x2B07: return Unicode_Category_SO;
		case 0x2B08: return Unicode_Category_SO;
		case 0x2B09: return Unicode_Category_SO;
		case 0x2B0A: return Unicode_Category_SO;
		case 0x2B0B: return Unicode_Category_SO;
		case 0x2B0C: return Unicode_Category_SO;
		case 0x2B0D: return Unicode_Category_SO;
		case 0x2B0E: return Unicode_Category_SO;
		case 0x2B0F: return Unicode_Category_SO;
		case 0x2B10: return Unicode_Category_SO;
		case 0x2B11: return Unicode_Category_SO;
		case 0x2B12: return Unicode_Category_SO;
		case 0x2B13: return Unicode_Category_SO;
		case 0x2B14: return Unicode_Category_SO;
		case 0x2B15: return Unicode_Category_SO;
		case 0x2B16: return Unicode_Category_SO;
		case 0x2B17: return Unicode_Category_SO;
		case 0x2B18: return Unicode_Category_SO;
		case 0x2B19: return Unicode_Category_SO;
		case 0x2B1A: return Unicode_Category_SO;
		case 0x2B1B: return Unicode_Category_SO;
		case 0x2B1C: return Unicode_Category_SO;
		case 0x2B1D: return Unicode_Category_SO;
		case 0x2B1E: return Unicode_Category_SO;
		case 0x2B1F: return Unicode_Category_SO;
		case 0x2B20: return Unicode_Category_SO;
		case 0x2B21: return Unicode_Category_SO;
		case 0x2B22: return Unicode_Category_SO;
		case 0x2B23: return Unicode_Category_SO;
		case 0x2B24: return Unicode_Category_SO;
		case 0x2B25: return Unicode_Category_SO;
		case 0x2B26: return Unicode_Category_SO;
		case 0x2B27: return Unicode_Category_SO;
		case 0x2B28: return Unicode_Category_SO;
		case 0x2B29: return Unicode_Category_SO;
		case 0x2B2A: return Unicode_Category_SO;
		case 0x2B2B: return Unicode_Category_SO;
		case 0x2B2C: return Unicode_Category_SO;
		case 0x2B2D: return Unicode_Category_SO;
		case 0x2B2E: return Unicode_Category_SO;
		case 0x2B2F: return Unicode_Category_SO;
		case 0x2B30: return Unicode_Category_SM;
		case 0x2B31: return Unicode_Category_SM;
		case 0x2B32: return Unicode_Category_SM;
		case 0x2B33: return Unicode_Category_SM;
		case 0x2B34: return Unicode_Category_SM;
		case 0x2B35: return Unicode_Category_SM;
		case 0x2B36: return Unicode_Category_SM;
		case 0x2B37: return Unicode_Category_SM;
		case 0x2B38: return Unicode_Category_SM;
		case 0x2B39: return Unicode_Category_SM;
		case 0x2B3A: return Unicode_Category_SM;
		case 0x2B3B: return Unicode_Category_SM;
		case 0x2B3C: return Unicode_Category_SM;
		case 0x2B3D: return Unicode_Category_SM;
		case 0x2B3E: return Unicode_Category_SM;
		case 0x2B3F: return Unicode_Category_SM;
		case 0x2B40: return Unicode_Category_SM;
		case 0x2B41: return Unicode_Category_SM;
		case 0x2B42: return Unicode_Category_SM;
		case 0x2B43: return Unicode_Category_SM;
		case 0x2B44: return Unicode_Category_SM;
		case 0x2B45: return Unicode_Category_SO;
		case 0x2B46: return Unicode_Category_SO;
		case 0x2B47: return Unicode_Category_SM;
		case 0x2B48: return Unicode_Category_SM;
		case 0x2B49: return Unicode_Category_SM;
		case 0x2B4A: return Unicode_Category_SM;
		case 0x2B4B: return Unicode_Category_SM;
		case 0x2B4C: return Unicode_Category_SM;
		case 0x2B4D: return Unicode_Category_SO;
		case 0x2B4E: return Unicode_Category_SO;
		case 0x2B4F: return Unicode_Category_SO;
		case 0x2B50: return Unicode_Category_SO;
		case 0x2B51: return Unicode_Category_SO;
		case 0x2B52: return Unicode_Category_SO;
		case 0x2B53: return Unicode_Category_SO;
		case 0x2B54: return Unicode_Category_SO;
		case 0x2B55: return Unicode_Category_SO;
		case 0x2B56: return Unicode_Category_SO;
		case 0x2B57: return Unicode_Category_SO;
		case 0x2B58: return Unicode_Category_SO;
		case 0x2B59: return Unicode_Category_SO;
		case 0x2B5A: return Unicode_Category_SO;
		case 0x2B5B: return Unicode_Category_SO;
		case 0x2B5C: return Unicode_Category_SO;
		case 0x2B5D: return Unicode_Category_SO;
		case 0x2B5E: return Unicode_Category_SO;
		case 0x2B5F: return Unicode_Category_SO;
		case 0x2B60: return Unicode_Category_SO;
		case 0x2B61: return Unicode_Category_SO;
		case 0x2B62: return Unicode_Category_SO;
		case 0x2B63: return Unicode_Category_SO;
		case 0x2B64: return Unicode_Category_SO;
		case 0x2B65: return Unicode_Category_SO;
		case 0x2B66: return Unicode_Category_SO;
		case 0x2B67: return Unicode_Category_SO;
		case 0x2B68: return Unicode_Category_SO;
		case 0x2B69: return Unicode_Category_SO;
		case 0x2B6A: return Unicode_Category_SO;
		case 0x2B6B: return Unicode_Category_SO;
		case 0x2B6C: return Unicode_Category_SO;
		case 0x2B6D: return Unicode_Category_SO;
		case 0x2B6E: return Unicode_Category_SO;
		case 0x2B6F: return Unicode_Category_SO;
		case 0x2B70: return Unicode_Category_SO;
		case 0x2B71: return Unicode_Category_SO;
		case 0x2B72: return Unicode_Category_SO;
		case 0x2B73: return Unicode_Category_SO;
		case 0x2B76: return Unicode_Category_SO;
		case 0x2B77: return Unicode_Category_SO;
		case 0x2B78: return Unicode_Category_SO;
		case 0x2B79: return Unicode_Category_SO;
		case 0x2B7A: return Unicode_Category_SO;
		case 0x2B7B: return Unicode_Category_SO;
		case 0x2B7C: return Unicode_Category_SO;
		case 0x2B7D: return Unicode_Category_SO;
		case 0x2B7E: return Unicode_Category_SO;
		case 0x2B7F: return Unicode_Category_SO;
		case 0x2B80: return Unicode_Category_SO;
		case 0x2B81: return Unicode_Category_SO;
		case 0x2B82: return Unicode_Category_SO;
		case 0x2B83: return Unicode_Category_SO;
		case 0x2B84: return Unicode_Category_SO;
		case 0x2B85: return Unicode_Category_SO;
		case 0x2B86: return Unicode_Category_SO;
		case 0x2B87: return Unicode_Category_SO;
		case 0x2B88: return Unicode_Category_SO;
		case 0x2B89: return Unicode_Category_SO;
		case 0x2B8A: return Unicode_Category_SO;
		case 0x2B8B: return Unicode_Category_SO;
		case 0x2B8C: return Unicode_Category_SO;
		case 0x2B8D: return Unicode_Category_SO;
		case 0x2B8E: return Unicode_Category_SO;
		case 0x2B8F: return Unicode_Category_SO;
		case 0x2B90: return Unicode_Category_SO;
		case 0x2B91: return Unicode_Category_SO;
		case 0x2B92: return Unicode_Category_SO;
		case 0x2B93: return Unicode_Category_SO;
		case 0x2B94: return Unicode_Category_SO;
		case 0x2B95: return Unicode_Category_SO;
		case 0x2B97: return Unicode_Category_SO;
		case 0x2B98: return Unicode_Category_SO;
		case 0x2B99: return Unicode_Category_SO;
		case 0x2B9A: return Unicode_Category_SO;
		case 0x2B9B: return Unicode_Category_SO;
		case 0x2B9C: return Unicode_Category_SO;
		case 0x2B9D: return Unicode_Category_SO;
		case 0x2B9E: return Unicode_Category_SO;
		case 0x2B9F: return Unicode_Category_SO;
		case 0x2BA0: return Unicode_Category_SO;
		case 0x2BA1: return Unicode_Category_SO;
		case 0x2BA2: return Unicode_Category_SO;
		case 0x2BA3: return Unicode_Category_SO;
		case 0x2BA4: return Unicode_Category_SO;
		case 0x2BA5: return Unicode_Category_SO;
		case 0x2BA6: return Unicode_Category_SO;
		case 0x2BA7: return Unicode_Category_SO;
		case 0x2BA8: return Unicode_Category_SO;
		case 0x2BA9: return Unicode_Category_SO;
		case 0x2BAA: return Unicode_Category_SO;
		case 0x2BAB: return Unicode_Category_SO;
		case 0x2BAC: return Unicode_Category_SO;
		case 0x2BAD: return Unicode_Category_SO;
		case 0x2BAE: return Unicode_Category_SO;
		case 0x2BAF: return Unicode_Category_SO;
		case 0x2BB0: return Unicode_Category_SO;
		case 0x2BB1: return Unicode_Category_SO;
		case 0x2BB2: return Unicode_Category_SO;
		case 0x2BB3: return Unicode_Category_SO;
		case 0x2BB4: return Unicode_Category_SO;
		case 0x2BB5: return Unicode_Category_SO;
		case 0x2BB6: return Unicode_Category_SO;
		case 0x2BB7: return Unicode_Category_SO;
		case 0x2BB8: return Unicode_Category_SO;
		case 0x2BB9: return Unicode_Category_SO;
		case 0x2BBA: return Unicode_Category_SO;
		case 0x2BBB: return Unicode_Category_SO;
		case 0x2BBC: return Unicode_Category_SO;
		case 0x2BBD: return Unicode_Category_SO;
		case 0x2BBE: return Unicode_Category_SO;
		case 0x2BBF: return Unicode_Category_SO;
		case 0x2BC0: return Unicode_Category_SO;
		case 0x2BC1: return Unicode_Category_SO;
		case 0x2BC2: return Unicode_Category_SO;
		case 0x2BC3: return Unicode_Category_SO;
		case 0x2BC4: return Unicode_Category_SO;
		case 0x2BC5: return Unicode_Category_SO;
		case 0x2BC6: return Unicode_Category_SO;
		case 0x2BC7: return Unicode_Category_SO;
		case 0x2BC8: return Unicode_Category_SO;
		case 0x2BC9: return Unicode_Category_SO;
		case 0x2BCA: return Unicode_Category_SO;
		case 0x2BCB: return Unicode_Category_SO;
		case 0x2BCC: return Unicode_Category_SO;
		case 0x2BCD: return Unicode_Category_SO;
		case 0x2BCE: return Unicode_Category_SO;
		case 0x2BCF: return Unicode_Category_SO;
		case 0x2BD0: return Unicode_Category_SO;
		case 0x2BD1: return Unicode_Category_SO;
		case 0x2BD2: return Unicode_Category_SO;
		case 0x2BD3: return Unicode_Category_SO;
		case 0x2BD4: return Unicode_Category_SO;
		case 0x2BD5: return Unicode_Category_SO;
		case 0x2BD6: return Unicode_Category_SO;
		case 0x2BD7: return Unicode_Category_SO;
		case 0x2BD8: return Unicode_Category_SO;
		case 0x2BD9: return Unicode_Category_SO;
		case 0x2BDA: return Unicode_Category_SO;
		case 0x2BDB: return Unicode_Category_SO;
		case 0x2BDC: return Unicode_Category_SO;
		case 0x2BDD: return Unicode_Category_SO;
		case 0x2BDE: return Unicode_Category_SO;
		case 0x2BDF: return Unicode_Category_SO;
		case 0x2BE0: return Unicode_Category_SO;
		case 0x2BE1: return Unicode_Category_SO;
		case 0x2BE2: return Unicode_Category_SO;
		case 0x2BE3: return Unicode_Category_SO;
		case 0x2BE4: return Unicode_Category_SO;
		case 0x2BE5: return Unicode_Category_SO;
		case 0x2BE6: return Unicode_Category_SO;
		case 0x2BE7: return Unicode_Category_SO;
		case 0x2BE8: return Unicode_Category_SO;
		case 0x2BE9: return Unicode_Category_SO;
		case 0x2BEA: return Unicode_Category_SO;
		case 0x2BEB: return Unicode_Category_SO;
		case 0x2BEC: return Unicode_Category_SO;
		case 0x2BED: return Unicode_Category_SO;
		case 0x2BEE: return Unicode_Category_SO;
		case 0x2BEF: return Unicode_Category_SO;
		case 0x2BF0: return Unicode_Category_SO;
		case 0x2BF1: return Unicode_Category_SO;
		case 0x2BF2: return Unicode_Category_SO;
		case 0x2BF3: return Unicode_Category_SO;
		case 0x2BF4: return Unicode_Category_SO;
		case 0x2BF5: return Unicode_Category_SO;
		case 0x2BF6: return Unicode_Category_SO;
		case 0x2BF7: return Unicode_Category_SO;
		case 0x2BF8: return Unicode_Category_SO;
		case 0x2BF9: return Unicode_Category_SO;
		case 0x2BFA: return Unicode_Category_SO;
		case 0x2BFB: return Unicode_Category_SO;
		case 0x2BFC: return Unicode_Category_SO;
		case 0x2BFD: return Unicode_Category_SO;
		case 0x2BFE: return Unicode_Category_SO;
		case 0x2BFF: return Unicode_Category_SO;
		case 0x2C00: return Unicode_Category_LU;
		case 0x2C01: return Unicode_Category_LU;
		case 0x2C02: return Unicode_Category_LU;
		case 0x2C03: return Unicode_Category_LU;
		case 0x2C04: return Unicode_Category_LU;
		case 0x2C05: return Unicode_Category_LU;
		case 0x2C06: return Unicode_Category_LU;
		case 0x2C07: return Unicode_Category_LU;
		case 0x2C08: return Unicode_Category_LU;
		case 0x2C09: return Unicode_Category_LU;
		case 0x2C0A: return Unicode_Category_LU;
		case 0x2C0B: return Unicode_Category_LU;
		case 0x2C0C: return Unicode_Category_LU;
		case 0x2C0D: return Unicode_Category_LU;
		case 0x2C0E: return Unicode_Category_LU;
		case 0x2C0F: return Unicode_Category_LU;
		case 0x2C10: return Unicode_Category_LU;
		case 0x2C11: return Unicode_Category_LU;
		case 0x2C12: return Unicode_Category_LU;
		case 0x2C13: return Unicode_Category_LU;
		case 0x2C14: return Unicode_Category_LU;
		case 0x2C15: return Unicode_Category_LU;
		case 0x2C16: return Unicode_Category_LU;
		case 0x2C17: return Unicode_Category_LU;
		case 0x2C18: return Unicode_Category_LU;
		case 0x2C19: return Unicode_Category_LU;
		case 0x2C1A: return Unicode_Category_LU;
		case 0x2C1B: return Unicode_Category_LU;
		case 0x2C1C: return Unicode_Category_LU;
		case 0x2C1D: return Unicode_Category_LU;
		case 0x2C1E: return Unicode_Category_LU;
		case 0x2C1F: return Unicode_Category_LU;
		case 0x2C20: return Unicode_Category_LU;
		case 0x2C21: return Unicode_Category_LU;
		case 0x2C22: return Unicode_Category_LU;
		case 0x2C23: return Unicode_Category_LU;
		case 0x2C24: return Unicode_Category_LU;
		case 0x2C25: return Unicode_Category_LU;
		case 0x2C26: return Unicode_Category_LU;
		case 0x2C27: return Unicode_Category_LU;
		case 0x2C28: return Unicode_Category_LU;
		case 0x2C29: return Unicode_Category_LU;
		case 0x2C2A: return Unicode_Category_LU;
		case 0x2C2B: return Unicode_Category_LU;
		case 0x2C2C: return Unicode_Category_LU;
		case 0x2C2D: return Unicode_Category_LU;
		case 0x2C2E: return Unicode_Category_LU;
		case 0x2C30: return Unicode_Category_LL;
		case 0x2C31: return Unicode_Category_LL;
		case 0x2C32: return Unicode_Category_LL;
		case 0x2C33: return Unicode_Category_LL;
		case 0x2C34: return Unicode_Category_LL;
		case 0x2C35: return Unicode_Category_LL;
		case 0x2C36: return Unicode_Category_LL;
		case 0x2C37: return Unicode_Category_LL;
		case 0x2C38: return Unicode_Category_LL;
		case 0x2C39: return Unicode_Category_LL;
		case 0x2C3A: return Unicode_Category_LL;
		case 0x2C3B: return Unicode_Category_LL;
		case 0x2C3C: return Unicode_Category_LL;
		case 0x2C3D: return Unicode_Category_LL;
		case 0x2C3E: return Unicode_Category_LL;
		case 0x2C3F: return Unicode_Category_LL;
		case 0x2C40: return Unicode_Category_LL;
		case 0x2C41: return Unicode_Category_LL;
		case 0x2C42: return Unicode_Category_LL;
		case 0x2C43: return Unicode_Category_LL;
		case 0x2C44: return Unicode_Category_LL;
		case 0x2C45: return Unicode_Category_LL;
		case 0x2C46: return Unicode_Category_LL;
		case 0x2C47: return Unicode_Category_LL;
		case 0x2C48: return Unicode_Category_LL;
		case 0x2C49: return Unicode_Category_LL;
		case 0x2C4A: return Unicode_Category_LL;
		case 0x2C4B: return Unicode_Category_LL;
		case 0x2C4C: return Unicode_Category_LL;
		case 0x2C4D: return Unicode_Category_LL;
		case 0x2C4E: return Unicode_Category_LL;
		case 0x2C4F: return Unicode_Category_LL;
		case 0x2C50: return Unicode_Category_LL;
		case 0x2C51: return Unicode_Category_LL;
		case 0x2C52: return Unicode_Category_LL;
		case 0x2C53: return Unicode_Category_LL;
		case 0x2C54: return Unicode_Category_LL;
		case 0x2C55: return Unicode_Category_LL;
		case 0x2C56: return Unicode_Category_LL;
		case 0x2C57: return Unicode_Category_LL;
		case 0x2C58: return Unicode_Category_LL;
		case 0x2C59: return Unicode_Category_LL;
		case 0x2C5A: return Unicode_Category_LL;
		case 0x2C5B: return Unicode_Category_LL;
		case 0x2C5C: return Unicode_Category_LL;
		case 0x2C5D: return Unicode_Category_LL;
		case 0x2C5E: return Unicode_Category_LL;
		case 0x2C60: return Unicode_Category_LU;
		case 0x2C61: return Unicode_Category_LL;
		case 0x2C62: return Unicode_Category_LU;
		case 0x2C63: return Unicode_Category_LU;
		case 0x2C64: return Unicode_Category_LU;
		case 0x2C65: return Unicode_Category_LL;
		case 0x2C66: return Unicode_Category_LL;
		case 0x2C67: return Unicode_Category_LU;
		case 0x2C68: return Unicode_Category_LL;
		case 0x2C69: return Unicode_Category_LU;
		case 0x2C6A: return Unicode_Category_LL;
		case 0x2C6B: return Unicode_Category_LU;
		case 0x2C6C: return Unicode_Category_LL;
		case 0x2C6D: return Unicode_Category_LU;
		case 0x2C6E: return Unicode_Category_LU;
		case 0x2C6F: return Unicode_Category_LU;
		case 0x2C70: return Unicode_Category_LU;
		case 0x2C71: return Unicode_Category_LL;
		case 0x2C72: return Unicode_Category_LU;
		case 0x2C73: return Unicode_Category_LL;
		case 0x2C74: return Unicode_Category_LL;
		case 0x2C75: return Unicode_Category_LU;
		case 0x2C76: return Unicode_Category_LL;
		case 0x2C77: return Unicode_Category_LL;
		case 0x2C78: return Unicode_Category_LL;
		case 0x2C79: return Unicode_Category_LL;
		case 0x2C7A: return Unicode_Category_LL;
		case 0x2C7B: return Unicode_Category_LL;
		case 0x2C7C: return Unicode_Category_LM;
		case 0x2C7D: return Unicode_Category_LM;
		case 0x2C7E: return Unicode_Category_LU;
		case 0x2C7F: return Unicode_Category_LU;
		case 0x2C80: return Unicode_Category_LU;
		case 0x2C81: return Unicode_Category_LL;
		case 0x2C82: return Unicode_Category_LU;
		case 0x2C83: return Unicode_Category_LL;
		case 0x2C84: return Unicode_Category_LU;
		case 0x2C85: return Unicode_Category_LL;
		case 0x2C86: return Unicode_Category_LU;
		case 0x2C87: return Unicode_Category_LL;
		case 0x2C88: return Unicode_Category_LU;
		case 0x2C89: return Unicode_Category_LL;
		case 0x2C8A: return Unicode_Category_LU;
		case 0x2C8B: return Unicode_Category_LL;
		case 0x2C8C: return Unicode_Category_LU;
		case 0x2C8D: return Unicode_Category_LL;
		case 0x2C8E: return Unicode_Category_LU;
		case 0x2C8F: return Unicode_Category_LL;
		case 0x2C90: return Unicode_Category_LU;
		case 0x2C91: return Unicode_Category_LL;
		case 0x2C92: return Unicode_Category_LU;
		case 0x2C93: return Unicode_Category_LL;
		case 0x2C94: return Unicode_Category_LU;
		case 0x2C95: return Unicode_Category_LL;
		case 0x2C96: return Unicode_Category_LU;
		case 0x2C97: return Unicode_Category_LL;
		case 0x2C98: return Unicode_Category_LU;
		case 0x2C99: return Unicode_Category_LL;
		case 0x2C9A: return Unicode_Category_LU;
		case 0x2C9B: return Unicode_Category_LL;
		case 0x2C9C: return Unicode_Category_LU;
		case 0x2C9D: return Unicode_Category_LL;
		case 0x2C9E: return Unicode_Category_LU;
		case 0x2C9F: return Unicode_Category_LL;
		case 0x2CA0: return Unicode_Category_LU;
		case 0x2CA1: return Unicode_Category_LL;
		case 0x2CA2: return Unicode_Category_LU;
		case 0x2CA3: return Unicode_Category_LL;
		case 0x2CA4: return Unicode_Category_LU;
		case 0x2CA5: return Unicode_Category_LL;
		case 0x2CA6: return Unicode_Category_LU;
		case 0x2CA7: return Unicode_Category_LL;
		case 0x2CA8: return Unicode_Category_LU;
		case 0x2CA9: return Unicode_Category_LL;
		case 0x2CAA: return Unicode_Category_LU;
		case 0x2CAB: return Unicode_Category_LL;
		case 0x2CAC: return Unicode_Category_LU;
		case 0x2CAD: return Unicode_Category_LL;
		case 0x2CAE: return Unicode_Category_LU;
		case 0x2CAF: return Unicode_Category_LL;
		case 0x2CB0: return Unicode_Category_LU;
		case 0x2CB1: return Unicode_Category_LL;
		case 0x2CB2: return Unicode_Category_LU;
		case 0x2CB3: return Unicode_Category_LL;
		case 0x2CB4: return Unicode_Category_LU;
		case 0x2CB5: return Unicode_Category_LL;
		case 0x2CB6: return Unicode_Category_LU;
		case 0x2CB7: return Unicode_Category_LL;
		case 0x2CB8: return Unicode_Category_LU;
		case 0x2CB9: return Unicode_Category_LL;
		case 0x2CBA: return Unicode_Category_LU;
		case 0x2CBB: return Unicode_Category_LL;
		case 0x2CBC: return Unicode_Category_LU;
		case 0x2CBD: return Unicode_Category_LL;
		case 0x2CBE: return Unicode_Category_LU;
		case 0x2CBF: return Unicode_Category_LL;
		case 0x2CC0: return Unicode_Category_LU;
		case 0x2CC1: return Unicode_Category_LL;
		case 0x2CC2: return Unicode_Category_LU;
		case 0x2CC3: return Unicode_Category_LL;
		case 0x2CC4: return Unicode_Category_LU;
		case 0x2CC5: return Unicode_Category_LL;
		case 0x2CC6: return Unicode_Category_LU;
		case 0x2CC7: return Unicode_Category_LL;
		case 0x2CC8: return Unicode_Category_LU;
		case 0x2CC9: return Unicode_Category_LL;
		case 0x2CCA: return Unicode_Category_LU;
		case 0x2CCB: return Unicode_Category_LL;
		case 0x2CCC: return Unicode_Category_LU;
		case 0x2CCD: return Unicode_Category_LL;
		case 0x2CCE: return Unicode_Category_LU;
		case 0x2CCF: return Unicode_Category_LL;
		case 0x2CD0: return Unicode_Category_LU;
		case 0x2CD1: return Unicode_Category_LL;
		case 0x2CD2: return Unicode_Category_LU;
		case 0x2CD3: return Unicode_Category_LL;
		case 0x2CD4: return Unicode_Category_LU;
		case 0x2CD5: return Unicode_Category_LL;
		case 0x2CD6: return Unicode_Category_LU;
		case 0x2CD7: return Unicode_Category_LL;
		case 0x2CD8: return Unicode_Category_LU;
		case 0x2CD9: return Unicode_Category_LL;
		case 0x2CDA: return Unicode_Category_LU;
		case 0x2CDB: return Unicode_Category_LL;
		case 0x2CDC: return Unicode_Category_LU;
		case 0x2CDD: return Unicode_Category_LL;
		case 0x2CDE: return Unicode_Category_LU;
		case 0x2CDF: return Unicode_Category_LL;
		case 0x2CE0: return Unicode_Category_LU;
		case 0x2CE1: return Unicode_Category_LL;
		case 0x2CE2: return Unicode_Category_LU;
		case 0x2CE3: return Unicode_Category_LL;
		case 0x2CE4: return Unicode_Category_LL;
		case 0x2CE5: return Unicode_Category_SO;
		case 0x2CE6: return Unicode_Category_SO;
		case 0x2CE7: return Unicode_Category_SO;
		case 0x2CE8: return Unicode_Category_SO;
		case 0x2CE9: return Unicode_Category_SO;
		case 0x2CEA: return Unicode_Category_SO;
		case 0x2CEB: return Unicode_Category_LU;
		case 0x2CEC: return Unicode_Category_LL;
		case 0x2CED: return Unicode_Category_LU;
		case 0x2CEE: return Unicode_Category_LL;
		case 0x2CEF: return Unicode_Category_MN;
		case 0x2CF0: return Unicode_Category_MN;
		case 0x2CF1: return Unicode_Category_MN;
		case 0x2CF2: return Unicode_Category_LU;
		case 0x2CF3: return Unicode_Category_LL;
		case 0x2CF9: return Unicode_Category_PO;
		case 0x2CFA: return Unicode_Category_PO;
		case 0x2CFB: return Unicode_Category_PO;
		case 0x2CFC: return Unicode_Category_PO;
		case 0x2CFD: return Unicode_Category_NO;
		case 0x2CFE: return Unicode_Category_PO;
		case 0x2CFF: return Unicode_Category_PO;
		case 0x2D00: return Unicode_Category_LL;
		case 0x2D01: return Unicode_Category_LL;
		case 0x2D02: return Unicode_Category_LL;
		case 0x2D03: return Unicode_Category_LL;
		case 0x2D04: return Unicode_Category_LL;
		case 0x2D05: return Unicode_Category_LL;
		case 0x2D06: return Unicode_Category_LL;
		case 0x2D07: return Unicode_Category_LL;
		case 0x2D08: return Unicode_Category_LL;
		case 0x2D09: return Unicode_Category_LL;
		case 0x2D0A: return Unicode_Category_LL;
		case 0x2D0B: return Unicode_Category_LL;
		case 0x2D0C: return Unicode_Category_LL;
		case 0x2D0D: return Unicode_Category_LL;
		case 0x2D0E: return Unicode_Category_LL;
		case 0x2D0F: return Unicode_Category_LL;
		case 0x2D10: return Unicode_Category_LL;
		case 0x2D11: return Unicode_Category_LL;
		case 0x2D12: return Unicode_Category_LL;
		case 0x2D13: return Unicode_Category_LL;
		case 0x2D14: return Unicode_Category_LL;
		case 0x2D15: return Unicode_Category_LL;
		case 0x2D16: return Unicode_Category_LL;
		case 0x2D17: return Unicode_Category_LL;
		case 0x2D18: return Unicode_Category_LL;
		case 0x2D19: return Unicode_Category_LL;
		case 0x2D1A: return Unicode_Category_LL;
		case 0x2D1B: return Unicode_Category_LL;
		case 0x2D1C: return Unicode_Category_LL;
		case 0x2D1D: return Unicode_Category_LL;
		case 0x2D1E: return Unicode_Category_LL;
		case 0x2D1F: return Unicode_Category_LL;
		case 0x2D20: return Unicode_Category_LL;
		case 0x2D21: return Unicode_Category_LL;
		case 0x2D22: return Unicode_Category_LL;
		case 0x2D23: return Unicode_Category_LL;
		case 0x2D24: return Unicode_Category_LL;
		case 0x2D25: return Unicode_Category_LL;
		case 0x2D27: return Unicode_Category_LL;
		case 0x2D2D: return Unicode_Category_LL;
		case 0x2D30: return Unicode_Category_LO;
		case 0x2D31: return Unicode_Category_LO;
		case 0x2D32: return Unicode_Category_LO;
		case 0x2D33: return Unicode_Category_LO;
		case 0x2D34: return Unicode_Category_LO;
		case 0x2D35: return Unicode_Category_LO;
		case 0x2D36: return Unicode_Category_LO;
		case 0x2D37: return Unicode_Category_LO;
		case 0x2D38: return Unicode_Category_LO;
		case 0x2D39: return Unicode_Category_LO;
		case 0x2D3A: return Unicode_Category_LO;
		case 0x2D3B: return Unicode_Category_LO;
		case 0x2D3C: return Unicode_Category_LO;
		case 0x2D3D: return Unicode_Category_LO;
		case 0x2D3E: return Unicode_Category_LO;
		case 0x2D3F: return Unicode_Category_LO;
		case 0x2D40: return Unicode_Category_LO;
		case 0x2D41: return Unicode_Category_LO;
		case 0x2D42: return Unicode_Category_LO;
		case 0x2D43: return Unicode_Category_LO;
		case 0x2D44: return Unicode_Category_LO;
		case 0x2D45: return Unicode_Category_LO;
		case 0x2D46: return Unicode_Category_LO;
		case 0x2D47: return Unicode_Category_LO;
		case 0x2D48: return Unicode_Category_LO;
		case 0x2D49: return Unicode_Category_LO;
		case 0x2D4A: return Unicode_Category_LO;
		case 0x2D4B: return Unicode_Category_LO;
		case 0x2D4C: return Unicode_Category_LO;
		case 0x2D4D: return Unicode_Category_LO;
		case 0x2D4E: return Unicode_Category_LO;
		case 0x2D4F: return Unicode_Category_LO;
		case 0x2D50: return Unicode_Category_LO;
		case 0x2D51: return Unicode_Category_LO;
		case 0x2D52: return Unicode_Category_LO;
		case 0x2D53: return Unicode_Category_LO;
		case 0x2D54: return Unicode_Category_LO;
		case 0x2D55: return Unicode_Category_LO;
		case 0x2D56: return Unicode_Category_LO;
		case 0x2D57: return Unicode_Category_LO;
		case 0x2D58: return Unicode_Category_LO;
		case 0x2D59: return Unicode_Category_LO;
		case 0x2D5A: return Unicode_Category_LO;
		case 0x2D5B: return Unicode_Category_LO;
		case 0x2D5C: return Unicode_Category_LO;
		case 0x2D5D: return Unicode_Category_LO;
		case 0x2D5E: return Unicode_Category_LO;
		case 0x2D5F: return Unicode_Category_LO;
		case 0x2D60: return Unicode_Category_LO;
		case 0x2D61: return Unicode_Category_LO;
		case 0x2D62: return Unicode_Category_LO;
		case 0x2D63: return Unicode_Category_LO;
		case 0x2D64: return Unicode_Category_LO;
		case 0x2D65: return Unicode_Category_LO;
		case 0x2D66: return Unicode_Category_LO;
		case 0x2D67: return Unicode_Category_LO;
		case 0x2D6F: return Unicode_Category_LM;
		case 0x2D70: return Unicode_Category_PO;
		case 0x2D7F: return Unicode_Category_MN;
		case 0x2D80: return Unicode_Category_LO;
		case 0x2D81: return Unicode_Category_LO;
		case 0x2D82: return Unicode_Category_LO;
		case 0x2D83: return Unicode_Category_LO;
		case 0x2D84: return Unicode_Category_LO;
		case 0x2D85: return Unicode_Category_LO;
		case 0x2D86: return Unicode_Category_LO;
		case 0x2D87: return Unicode_Category_LO;
		case 0x2D88: return Unicode_Category_LO;
		case 0x2D89: return Unicode_Category_LO;
		case 0x2D8A: return Unicode_Category_LO;
		case 0x2D8B: return Unicode_Category_LO;
		case 0x2D8C: return Unicode_Category_LO;
		case 0x2D8D: return Unicode_Category_LO;
		case 0x2D8E: return Unicode_Category_LO;
		case 0x2D8F: return Unicode_Category_LO;
		case 0x2D90: return Unicode_Category_LO;
		case 0x2D91: return Unicode_Category_LO;
		case 0x2D92: return Unicode_Category_LO;
		case 0x2D93: return Unicode_Category_LO;
		case 0x2D94: return Unicode_Category_LO;
		case 0x2D95: return Unicode_Category_LO;
		case 0x2D96: return Unicode_Category_LO;
		case 0x2DA0: return Unicode_Category_LO;
		case 0x2DA1: return Unicode_Category_LO;
		case 0x2DA2: return Unicode_Category_LO;
		case 0x2DA3: return Unicode_Category_LO;
		case 0x2DA4: return Unicode_Category_LO;
		case 0x2DA5: return Unicode_Category_LO;
		case 0x2DA6: return Unicode_Category_LO;
		case 0x2DA8: return Unicode_Category_LO;
		case 0x2DA9: return Unicode_Category_LO;
		case 0x2DAA: return Unicode_Category_LO;
		case 0x2DAB: return Unicode_Category_LO;
		case 0x2DAC: return Unicode_Category_LO;
		case 0x2DAD: return Unicode_Category_LO;
		case 0x2DAE: return Unicode_Category_LO;
		case 0x2DB0: return Unicode_Category_LO;
		case 0x2DB1: return Unicode_Category_LO;
		case 0x2DB2: return Unicode_Category_LO;
		case 0x2DB3: return Unicode_Category_LO;
		case 0x2DB4: return Unicode_Category_LO;
		case 0x2DB5: return Unicode_Category_LO;
		case 0x2DB6: return Unicode_Category_LO;
		case 0x2DB8: return Unicode_Category_LO;
		case 0x2DB9: return Unicode_Category_LO;
		case 0x2DBA: return Unicode_Category_LO;
		case 0x2DBB: return Unicode_Category_LO;
		case 0x2DBC: return Unicode_Category_LO;
		case 0x2DBD: return Unicode_Category_LO;
		case 0x2DBE: return Unicode_Category_LO;
		case 0x2DC0: return Unicode_Category_LO;
		case 0x2DC1: return Unicode_Category_LO;
		case 0x2DC2: return Unicode_Category_LO;
		case 0x2DC3: return Unicode_Category_LO;
		case 0x2DC4: return Unicode_Category_LO;
		case 0x2DC5: return Unicode_Category_LO;
		case 0x2DC6: return Unicode_Category_LO;
		case 0x2DC8: return Unicode_Category_LO;
		case 0x2DC9: return Unicode_Category_LO;
		case 0x2DCA: return Unicode_Category_LO;
		case 0x2DCB: return Unicode_Category_LO;
		case 0x2DCC: return Unicode_Category_LO;
		case 0x2DCD: return Unicode_Category_LO;
		case 0x2DCE: return Unicode_Category_LO;
		case 0x2DD0: return Unicode_Category_LO;
		case 0x2DD1: return Unicode_Category_LO;
		case 0x2DD2: return Unicode_Category_LO;
		case 0x2DD3: return Unicode_Category_LO;
		case 0x2DD4: return Unicode_Category_LO;
		case 0x2DD5: return Unicode_Category_LO;
		case 0x2DD6: return Unicode_Category_LO;
		case 0x2DD8: return Unicode_Category_LO;
		case 0x2DD9: return Unicode_Category_LO;
		case 0x2DDA: return Unicode_Category_LO;
		case 0x2DDB: return Unicode_Category_LO;
		case 0x2DDC: return Unicode_Category_LO;
		case 0x2DDD: return Unicode_Category_LO;
		case 0x2DDE: return Unicode_Category_LO;
		case 0x2DE0: return Unicode_Category_MN;
		case 0x2DE1: return Unicode_Category_MN;
		case 0x2DE2: return Unicode_Category_MN;
		case 0x2DE3: return Unicode_Category_MN;
		case 0x2DE4: return Unicode_Category_MN;
		case 0x2DE5: return Unicode_Category_MN;
		case 0x2DE6: return Unicode_Category_MN;
		case 0x2DE7: return Unicode_Category_MN;
		case 0x2DE8: return Unicode_Category_MN;
		case 0x2DE9: return Unicode_Category_MN;
		case 0x2DEA: return Unicode_Category_MN;
		case 0x2DEB: return Unicode_Category_MN;
		case 0x2DEC: return Unicode_Category_MN;
		case 0x2DED: return Unicode_Category_MN;
		case 0x2DEE: return Unicode_Category_MN;
		case 0x2DEF: return Unicode_Category_MN;
		case 0x2DF0: return Unicode_Category_MN;
		case 0x2DF1: return Unicode_Category_MN;
		case 0x2DF2: return Unicode_Category_MN;
		case 0x2DF3: return Unicode_Category_MN;
		case 0x2DF4: return Unicode_Category_MN;
		case 0x2DF5: return Unicode_Category_MN;
		case 0x2DF6: return Unicode_Category_MN;
		case 0x2DF7: return Unicode_Category_MN;
		case 0x2DF8: return Unicode_Category_MN;
		case 0x2DF9: return Unicode_Category_MN;
		case 0x2DFA: return Unicode_Category_MN;
		case 0x2DFB: return Unicode_Category_MN;
		case 0x2DFC: return Unicode_Category_MN;
		case 0x2DFD: return Unicode_Category_MN;
		case 0x2DFE: return Unicode_Category_MN;
		case 0x2DFF: return Unicode_Category_MN;
		case 0x2E00: return Unicode_Category_PO;
		case 0x2E01: return Unicode_Category_PO;
		case 0x2E02: return Unicode_Category_PI;
		case 0x2E03: return Unicode_Category_PF;
		case 0x2E04: return Unicode_Category_PI;
		case 0x2E05: return Unicode_Category_PF;
		case 0x2E06: return Unicode_Category_PO;
		case 0x2E07: return Unicode_Category_PO;
		case 0x2E08: return Unicode_Category_PO;
		case 0x2E09: return Unicode_Category_PI;
		case 0x2E0A: return Unicode_Category_PF;
		case 0x2E0B: return Unicode_Category_PO;
		case 0x2E0C: return Unicode_Category_PI;
		case 0x2E0D: return Unicode_Category_PF;
		case 0x2E0E: return Unicode_Category_PO;
		case 0x2E0F: return Unicode_Category_PO;
		case 0x2E10: return Unicode_Category_PO;
		case 0x2E11: return Unicode_Category_PO;
		case 0x2E12: return Unicode_Category_PO;
		case 0x2E13: return Unicode_Category_PO;
		case 0x2E14: return Unicode_Category_PO;
		case 0x2E15: return Unicode_Category_PO;
		case 0x2E16: return Unicode_Category_PO;
		case 0x2E17: return Unicode_Category_PD;
		case 0x2E18: return Unicode_Category_PO;
		case 0x2E19: return Unicode_Category_PO;
		case 0x2E1A: return Unicode_Category_PD;
		case 0x2E1B: return Unicode_Category_PO;
		case 0x2E1C: return Unicode_Category_PI;
		case 0x2E1D: return Unicode_Category_PF;
		case 0x2E1E: return Unicode_Category_PO;
		case 0x2E1F: return Unicode_Category_PO;
		case 0x2E20: return Unicode_Category_PI;
		case 0x2E21: return Unicode_Category_PF;
		case 0x2E22: return Unicode_Category_PS;
		case 0x2E23: return Unicode_Category_PE;
		case 0x2E24: return Unicode_Category_PS;
		case 0x2E25: return Unicode_Category_PE;
		case 0x2E26: return Unicode_Category_PS;
		case 0x2E27: return Unicode_Category_PE;
		case 0x2E28: return Unicode_Category_PS;
		case 0x2E29: return Unicode_Category_PE;
		case 0x2E2A: return Unicode_Category_PO;
		case 0x2E2B: return Unicode_Category_PO;
		case 0x2E2C: return Unicode_Category_PO;
		case 0x2E2D: return Unicode_Category_PO;
		case 0x2E2E: return Unicode_Category_PO;
		case 0x2E2F: return Unicode_Category_LM;
		case 0x2E30: return Unicode_Category_PO;
		case 0x2E31: return Unicode_Category_PO;
		case 0x2E32: return Unicode_Category_PO;
		case 0x2E33: return Unicode_Category_PO;
		case 0x2E34: return Unicode_Category_PO;
		case 0x2E35: return Unicode_Category_PO;
		case 0x2E36: return Unicode_Category_PO;
		case 0x2E37: return Unicode_Category_PO;
		case 0x2E38: return Unicode_Category_PO;
		case 0x2E39: return Unicode_Category_PO;
		case 0x2E3A: return Unicode_Category_PD;
		case 0x2E3B: return Unicode_Category_PD;
		case 0x2E3C: return Unicode_Category_PO;
		case 0x2E3D: return Unicode_Category_PO;
		case 0x2E3E: return Unicode_Category_PO;
		case 0x2E3F: return Unicode_Category_PO;
		case 0x2E40: return Unicode_Category_PD;
		case 0x2E41: return Unicode_Category_PO;
		case 0x2E42: return Unicode_Category_PS;
		case 0x2E43: return Unicode_Category_PO;
		case 0x2E44: return Unicode_Category_PO;
		case 0x2E45: return Unicode_Category_PO;
		case 0x2E46: return Unicode_Category_PO;
		case 0x2E47: return Unicode_Category_PO;
		case 0x2E48: return Unicode_Category_PO;
		case 0x2E49: return Unicode_Category_PO;
		case 0x2E4A: return Unicode_Category_PO;
		case 0x2E4B: return Unicode_Category_PO;
		case 0x2E4C: return Unicode_Category_PO;
		case 0x2E4D: return Unicode_Category_PO;
		case 0x2E4E: return Unicode_Category_PO;
		case 0x2E4F: return Unicode_Category_PO;
		case 0x2E50: return Unicode_Category_SO;
		case 0x2E51: return Unicode_Category_SO;
		case 0x2E52: return Unicode_Category_PO;
		case 0x2E80: return Unicode_Category_SO;
		case 0x2E81: return Unicode_Category_SO;
		case 0x2E82: return Unicode_Category_SO;
		case 0x2E83: return Unicode_Category_SO;
		case 0x2E84: return Unicode_Category_SO;
		case 0x2E85: return Unicode_Category_SO;
		case 0x2E86: return Unicode_Category_SO;
		case 0x2E87: return Unicode_Category_SO;
		case 0x2E88: return Unicode_Category_SO;
		case 0x2E89: return Unicode_Category_SO;
		case 0x2E8A: return Unicode_Category_SO;
		case 0x2E8B: return Unicode_Category_SO;
		case 0x2E8C: return Unicode_Category_SO;
		case 0x2E8D: return Unicode_Category_SO;
		case 0x2E8E: return Unicode_Category_SO;
		case 0x2E8F: return Unicode_Category_SO;
		case 0x2E90: return Unicode_Category_SO;
		case 0x2E91: return Unicode_Category_SO;
		case 0x2E92: return Unicode_Category_SO;
		case 0x2E93: return Unicode_Category_SO;
		case 0x2E94: return Unicode_Category_SO;
		case 0x2E95: return Unicode_Category_SO;
		case 0x2E96: return Unicode_Category_SO;
		case 0x2E97: return Unicode_Category_SO;
		case 0x2E98: return Unicode_Category_SO;
		case 0x2E99: return Unicode_Category_SO;
		case 0x2E9B: return Unicode_Category_SO;
		case 0x2E9C: return Unicode_Category_SO;
		case 0x2E9D: return Unicode_Category_SO;
		case 0x2E9E: return Unicode_Category_SO;
		case 0x2E9F: return Unicode_Category_SO;
		case 0x2EA0: return Unicode_Category_SO;
		case 0x2EA1: return Unicode_Category_SO;
		case 0x2EA2: return Unicode_Category_SO;
		case 0x2EA3: return Unicode_Category_SO;
		case 0x2EA4: return Unicode_Category_SO;
		case 0x2EA5: return Unicode_Category_SO;
		case 0x2EA6: return Unicode_Category_SO;
		case 0x2EA7: return Unicode_Category_SO;
		case 0x2EA8: return Unicode_Category_SO;
		case 0x2EA9: return Unicode_Category_SO;
		case 0x2EAA: return Unicode_Category_SO;
		case 0x2EAB: return Unicode_Category_SO;
		case 0x2EAC: return Unicode_Category_SO;
		case 0x2EAD: return Unicode_Category_SO;
		case 0x2EAE: return Unicode_Category_SO;
		case 0x2EAF: return Unicode_Category_SO;
		case 0x2EB0: return Unicode_Category_SO;
		case 0x2EB1: return Unicode_Category_SO;
		case 0x2EB2: return Unicode_Category_SO;
		case 0x2EB3: return Unicode_Category_SO;
		case 0x2EB4: return Unicode_Category_SO;
		case 0x2EB5: return Unicode_Category_SO;
		case 0x2EB6: return Unicode_Category_SO;
		case 0x2EB7: return Unicode_Category_SO;
		case 0x2EB8: return Unicode_Category_SO;
		case 0x2EB9: return Unicode_Category_SO;
		case 0x2EBA: return Unicode_Category_SO;
		case 0x2EBB: return Unicode_Category_SO;
		case 0x2EBC: return Unicode_Category_SO;
		case 0x2EBD: return Unicode_Category_SO;
		case 0x2EBE: return Unicode_Category_SO;
		case 0x2EBF: return Unicode_Category_SO;
		case 0x2EC0: return Unicode_Category_SO;
		case 0x2EC1: return Unicode_Category_SO;
		case 0x2EC2: return Unicode_Category_SO;
		case 0x2EC3: return Unicode_Category_SO;
		case 0x2EC4: return Unicode_Category_SO;
		case 0x2EC5: return Unicode_Category_SO;
		case 0x2EC6: return Unicode_Category_SO;
		case 0x2EC7: return Unicode_Category_SO;
		case 0x2EC8: return Unicode_Category_SO;
		case 0x2EC9: return Unicode_Category_SO;
		case 0x2ECA: return Unicode_Category_SO;
		case 0x2ECB: return Unicode_Category_SO;
		case 0x2ECC: return Unicode_Category_SO;
		case 0x2ECD: return Unicode_Category_SO;
		case 0x2ECE: return Unicode_Category_SO;
		case 0x2ECF: return Unicode_Category_SO;
		case 0x2ED0: return Unicode_Category_SO;
		case 0x2ED1: return Unicode_Category_SO;
		case 0x2ED2: return Unicode_Category_SO;
		case 0x2ED3: return Unicode_Category_SO;
		case 0x2ED4: return Unicode_Category_SO;
		case 0x2ED5: return Unicode_Category_SO;
		case 0x2ED6: return Unicode_Category_SO;
		case 0x2ED7: return Unicode_Category_SO;
		case 0x2ED8: return Unicode_Category_SO;
		case 0x2ED9: return Unicode_Category_SO;
		case 0x2EDA: return Unicode_Category_SO;
		case 0x2EDB: return Unicode_Category_SO;
		case 0x2EDC: return Unicode_Category_SO;
		case 0x2EDD: return Unicode_Category_SO;
		case 0x2EDE: return Unicode_Category_SO;
		case 0x2EDF: return Unicode_Category_SO;
		case 0x2EE0: return Unicode_Category_SO;
		case 0x2EE1: return Unicode_Category_SO;
		case 0x2EE2: return Unicode_Category_SO;
		case 0x2EE3: return Unicode_Category_SO;
		case 0x2EE4: return Unicode_Category_SO;
		case 0x2EE5: return Unicode_Category_SO;
		case 0x2EE6: return Unicode_Category_SO;
		case 0x2EE7: return Unicode_Category_SO;
		case 0x2EE8: return Unicode_Category_SO;
		case 0x2EE9: return Unicode_Category_SO;
		case 0x2EEA: return Unicode_Category_SO;
		case 0x2EEB: return Unicode_Category_SO;
		case 0x2EEC: return Unicode_Category_SO;
		case 0x2EED: return Unicode_Category_SO;
		case 0x2EEE: return Unicode_Category_SO;
		case 0x2EEF: return Unicode_Category_SO;
		case 0x2EF0: return Unicode_Category_SO;
		case 0x2EF1: return Unicode_Category_SO;
		case 0x2EF2: return Unicode_Category_SO;
		case 0x2EF3: return Unicode_Category_SO;
		case 0x2F00: return Unicode_Category_SO;
		case 0x2F01: return Unicode_Category_SO;
		case 0x2F02: return Unicode_Category_SO;
		case 0x2F03: return Unicode_Category_SO;
		case 0x2F04: return Unicode_Category_SO;
		case 0x2F05: return Unicode_Category_SO;
		case 0x2F06: return Unicode_Category_SO;
		case 0x2F07: return Unicode_Category_SO;
		case 0x2F08: return Unicode_Category_SO;
		case 0x2F09: return Unicode_Category_SO;
		case 0x2F0A: return Unicode_Category_SO;
		case 0x2F0B: return Unicode_Category_SO;
		case 0x2F0C: return Unicode_Category_SO;
		case 0x2F0D: return Unicode_Category_SO;
		case 0x2F0E: return Unicode_Category_SO;
		case 0x2F0F: return Unicode_Category_SO;
		case 0x2F10: return Unicode_Category_SO;
		case 0x2F11: return Unicode_Category_SO;
		case 0x2F12: return Unicode_Category_SO;
		case 0x2F13: return Unicode_Category_SO;
		case 0x2F14: return Unicode_Category_SO;
		case 0x2F15: return Unicode_Category_SO;
		case 0x2F16: return Unicode_Category_SO;
		case 0x2F17: return Unicode_Category_SO;
		case 0x2F18: return Unicode_Category_SO;
		case 0x2F19: return Unicode_Category_SO;
		case 0x2F1A: return Unicode_Category_SO;
		case 0x2F1B: return Unicode_Category_SO;
		case 0x2F1C: return Unicode_Category_SO;
		case 0x2F1D: return Unicode_Category_SO;
		case 0x2F1E: return Unicode_Category_SO;
		case 0x2F1F: return Unicode_Category_SO;
		case 0x2F20: return Unicode_Category_SO;
		case 0x2F21: return Unicode_Category_SO;
		case 0x2F22: return Unicode_Category_SO;
		case 0x2F23: return Unicode_Category_SO;
		case 0x2F24: return Unicode_Category_SO;
		case 0x2F25: return Unicode_Category_SO;
		case 0x2F26: return Unicode_Category_SO;
		case 0x2F27: return Unicode_Category_SO;
		case 0x2F28: return Unicode_Category_SO;
		case 0x2F29: return Unicode_Category_SO;
		case 0x2F2A: return Unicode_Category_SO;
		case 0x2F2B: return Unicode_Category_SO;
		case 0x2F2C: return Unicode_Category_SO;
		case 0x2F2D: return Unicode_Category_SO;
		case 0x2F2E: return Unicode_Category_SO;
		case 0x2F2F: return Unicode_Category_SO;
		case 0x2F30: return Unicode_Category_SO;
		case 0x2F31: return Unicode_Category_SO;
		case 0x2F32: return Unicode_Category_SO;
		case 0x2F33: return Unicode_Category_SO;
		case 0x2F34: return Unicode_Category_SO;
		case 0x2F35: return Unicode_Category_SO;
		case 0x2F36: return Unicode_Category_SO;
		case 0x2F37: return Unicode_Category_SO;
		case 0x2F38: return Unicode_Category_SO;
		case 0x2F39: return Unicode_Category_SO;
		case 0x2F3A: return Unicode_Category_SO;
		case 0x2F3B: return Unicode_Category_SO;
		case 0x2F3C: return Unicode_Category_SO;
		case 0x2F3D: return Unicode_Category_SO;
		case 0x2F3E: return Unicode_Category_SO;
		case 0x2F3F: return Unicode_Category_SO;
		case 0x2F40: return Unicode_Category_SO;
		case 0x2F41: return Unicode_Category_SO;
		case 0x2F42: return Unicode_Category_SO;
		case 0x2F43: return Unicode_Category_SO;
		case 0x2F44: return Unicode_Category_SO;
		case 0x2F45: return Unicode_Category_SO;
		case 0x2F46: return Unicode_Category_SO;
		case 0x2F47: return Unicode_Category_SO;
		case 0x2F48: return Unicode_Category_SO;
		case 0x2F49: return Unicode_Category_SO;
		case 0x2F4A: return Unicode_Category_SO;
		case 0x2F4B: return Unicode_Category_SO;
		case 0x2F4C: return Unicode_Category_SO;
		case 0x2F4D: return Unicode_Category_SO;
		case 0x2F4E: return Unicode_Category_SO;
		case 0x2F4F: return Unicode_Category_SO;
		case 0x2F50: return Unicode_Category_SO;
		case 0x2F51: return Unicode_Category_SO;
		case 0x2F52: return Unicode_Category_SO;
		case 0x2F53: return Unicode_Category_SO;
		case 0x2F54: return Unicode_Category_SO;
		case 0x2F55: return Unicode_Category_SO;
		case 0x2F56: return Unicode_Category_SO;
		case 0x2F57: return Unicode_Category_SO;
		case 0x2F58: return Unicode_Category_SO;
		case 0x2F59: return Unicode_Category_SO;
		case 0x2F5A: return Unicode_Category_SO;
		case 0x2F5B: return Unicode_Category_SO;
		case 0x2F5C: return Unicode_Category_SO;
		case 0x2F5D: return Unicode_Category_SO;
		case 0x2F5E: return Unicode_Category_SO;
		case 0x2F5F: return Unicode_Category_SO;
		case 0x2F60: return Unicode_Category_SO;
		case 0x2F61: return Unicode_Category_SO;
		case 0x2F62: return Unicode_Category_SO;
		case 0x2F63: return Unicode_Category_SO;
		case 0x2F64: return Unicode_Category_SO;
		case 0x2F65: return Unicode_Category_SO;
		case 0x2F66: return Unicode_Category_SO;
		case 0x2F67: return Unicode_Category_SO;
		case 0x2F68: return Unicode_Category_SO;
		case 0x2F69: return Unicode_Category_SO;
		case 0x2F6A: return Unicode_Category_SO;
		case 0x2F6B: return Unicode_Category_SO;
		case 0x2F6C: return Unicode_Category_SO;
		case 0x2F6D: return Unicode_Category_SO;
		case 0x2F6E: return Unicode_Category_SO;
		case 0x2F6F: return Unicode_Category_SO;
		case 0x2F70: return Unicode_Category_SO;
		case 0x2F71: return Unicode_Category_SO;
		case 0x2F72: return Unicode_Category_SO;
		case 0x2F73: return Unicode_Category_SO;
		case 0x2F74: return Unicode_Category_SO;
		case 0x2F75: return Unicode_Category_SO;
		case 0x2F76: return Unicode_Category_SO;
		case 0x2F77: return Unicode_Category_SO;
		case 0x2F78: return Unicode_Category_SO;
		case 0x2F79: return Unicode_Category_SO;
		case 0x2F7A: return Unicode_Category_SO;
		case 0x2F7B: return Unicode_Category_SO;
		case 0x2F7C: return Unicode_Category_SO;
		case 0x2F7D: return Unicode_Category_SO;
		case 0x2F7E: return Unicode_Category_SO;
		case 0x2F7F: return Unicode_Category_SO;
		case 0x2F80: return Unicode_Category_SO;
		case 0x2F81: return Unicode_Category_SO;
		case 0x2F82: return Unicode_Category_SO;
		case 0x2F83: return Unicode_Category_SO;
		case 0x2F84: return Unicode_Category_SO;
		case 0x2F85: return Unicode_Category_SO;
		case 0x2F86: return Unicode_Category_SO;
		case 0x2F87: return Unicode_Category_SO;
		case 0x2F88: return Unicode_Category_SO;
		case 0x2F89: return Unicode_Category_SO;
		case 0x2F8A: return Unicode_Category_SO;
		case 0x2F8B: return Unicode_Category_SO;
		case 0x2F8C: return Unicode_Category_SO;
		case 0x2F8D: return Unicode_Category_SO;
		case 0x2F8E: return Unicode_Category_SO;
		case 0x2F8F: return Unicode_Category_SO;
		case 0x2F90: return Unicode_Category_SO;
		case 0x2F91: return Unicode_Category_SO;
		case 0x2F92: return Unicode_Category_SO;
		case 0x2F93: return Unicode_Category_SO;
		case 0x2F94: return Unicode_Category_SO;
		case 0x2F95: return Unicode_Category_SO;
		case 0x2F96: return Unicode_Category_SO;
		case 0x2F97: return Unicode_Category_SO;
		case 0x2F98: return Unicode_Category_SO;
		case 0x2F99: return Unicode_Category_SO;
		case 0x2F9A: return Unicode_Category_SO;
		case 0x2F9B: return Unicode_Category_SO;
		case 0x2F9C: return Unicode_Category_SO;
		case 0x2F9D: return Unicode_Category_SO;
		case 0x2F9E: return Unicode_Category_SO;
		case 0x2F9F: return Unicode_Category_SO;
		case 0x2FA0: return Unicode_Category_SO;
		case 0x2FA1: return Unicode_Category_SO;
		case 0x2FA2: return Unicode_Category_SO;
		case 0x2FA3: return Unicode_Category_SO;
		case 0x2FA4: return Unicode_Category_SO;
		case 0x2FA5: return Unicode_Category_SO;
		case 0x2FA6: return Unicode_Category_SO;
		case 0x2FA7: return Unicode_Category_SO;
		case 0x2FA8: return Unicode_Category_SO;
		case 0x2FA9: return Unicode_Category_SO;
		case 0x2FAA: return Unicode_Category_SO;
		case 0x2FAB: return Unicode_Category_SO;
		case 0x2FAC: return Unicode_Category_SO;
		case 0x2FAD: return Unicode_Category_SO;
		case 0x2FAE: return Unicode_Category_SO;
		case 0x2FAF: return Unicode_Category_SO;
		case 0x2FB0: return Unicode_Category_SO;
		case 0x2FB1: return Unicode_Category_SO;
		case 0x2FB2: return Unicode_Category_SO;
		case 0x2FB3: return Unicode_Category_SO;
		case 0x2FB4: return Unicode_Category_SO;
		case 0x2FB5: return Unicode_Category_SO;
		case 0x2FB6: return Unicode_Category_SO;
		case 0x2FB7: return Unicode_Category_SO;
		case 0x2FB8: return Unicode_Category_SO;
		case 0x2FB9: return Unicode_Category_SO;
		case 0x2FBA: return Unicode_Category_SO;
		case 0x2FBB: return Unicode_Category_SO;
		case 0x2FBC: return Unicode_Category_SO;
		case 0x2FBD: return Unicode_Category_SO;
		case 0x2FBE: return Unicode_Category_SO;
		case 0x2FBF: return Unicode_Category_SO;
		case 0x2FC0: return Unicode_Category_SO;
		case 0x2FC1: return Unicode_Category_SO;
		case 0x2FC2: return Unicode_Category_SO;
		case 0x2FC3: return Unicode_Category_SO;
		case 0x2FC4: return Unicode_Category_SO;
		case 0x2FC5: return Unicode_Category_SO;
		case 0x2FC6: return Unicode_Category_SO;
		case 0x2FC7: return Unicode_Category_SO;
		case 0x2FC8: return Unicode_Category_SO;
		case 0x2FC9: return Unicode_Category_SO;
		case 0x2FCA: return Unicode_Category_SO;
		case 0x2FCB: return Unicode_Category_SO;
		case 0x2FCC: return Unicode_Category_SO;
		case 0x2FCD: return Unicode_Category_SO;
		case 0x2FCE: return Unicode_Category_SO;
		case 0x2FCF: return Unicode_Category_SO;
		case 0x2FD0: return Unicode_Category_SO;
		case 0x2FD1: return Unicode_Category_SO;
		case 0x2FD2: return Unicode_Category_SO;
		case 0x2FD3: return Unicode_Category_SO;
		case 0x2FD4: return Unicode_Category_SO;
		case 0x2FD5: return Unicode_Category_SO;
		case 0x2FF0: return Unicode_Category_SO;
		case 0x2FF1: return Unicode_Category_SO;
		case 0x2FF2: return Unicode_Category_SO;
		case 0x2FF3: return Unicode_Category_SO;
		case 0x2FF4: return Unicode_Category_SO;
		case 0x2FF5: return Unicode_Category_SO;
		case 0x2FF6: return Unicode_Category_SO;
		case 0x2FF7: return Unicode_Category_SO;
		case 0x2FF8: return Unicode_Category_SO;
		case 0x2FF9: return Unicode_Category_SO;
		case 0x2FFA: return Unicode_Category_SO;
		case 0x2FFB: return Unicode_Category_SO;
		case 0x3000: return Unicode_Category_ZS;
		case 0x3001: return Unicode_Category_PO;
		case 0x3002: return Unicode_Category_PO;
		case 0x3003: return Unicode_Category_PO;
		case 0x3004: return Unicode_Category_SO;
		case 0x3005: return Unicode_Category_LM;
		case 0x3006: return Unicode_Category_LO;
		case 0x3007: return Unicode_Category_NL;
		case 0x3008: return Unicode_Category_PS;
		case 0x3009: return Unicode_Category_PE;
		case 0x300A: return Unicode_Category_PS;
		case 0x300B: return Unicode_Category_PE;
		case 0x300C: return Unicode_Category_PS;
		case 0x300D: return Unicode_Category_PE;
		case 0x300E: return Unicode_Category_PS;
		case 0x300F: return Unicode_Category_PE;
		case 0x3010: return Unicode_Category_PS;
		case 0x3011: return Unicode_Category_PE;
		case 0x3012: return Unicode_Category_SO;
		case 0x3013: return Unicode_Category_SO;
		case 0x3014: return Unicode_Category_PS;
		case 0x3015: return Unicode_Category_PE;
		case 0x3016: return Unicode_Category_PS;
		case 0x3017: return Unicode_Category_PE;
		case 0x3018: return Unicode_Category_PS;
		case 0x3019: return Unicode_Category_PE;
		case 0x301A: return Unicode_Category_PS;
		case 0x301B: return Unicode_Category_PE;
		case 0x301C: return Unicode_Category_PD;
		case 0x301D: return Unicode_Category_PS;
		case 0x301E: return Unicode_Category_PE;
		case 0x301F: return Unicode_Category_PE;
		case 0x3020: return Unicode_Category_SO;
		case 0x3021: return Unicode_Category_NL;
		case 0x3022: return Unicode_Category_NL;
		case 0x3023: return Unicode_Category_NL;
		case 0x3024: return Unicode_Category_NL;
		case 0x3025: return Unicode_Category_NL;
		case 0x3026: return Unicode_Category_NL;
		case 0x3027: return Unicode_Category_NL;
		case 0x3028: return Unicode_Category_NL;
		case 0x3029: return Unicode_Category_NL;
		case 0x302A: return Unicode_Category_MN;
		case 0x302B: return Unicode_Category_MN;
		case 0x302C: return Unicode_Category_MN;
		case 0x302D: return Unicode_Category_MN;
		case 0x302E: return Unicode_Category_MC;
		case 0x302F: return Unicode_Category_MC;
		case 0x3030: return Unicode_Category_PD;
		case 0x3031: return Unicode_Category_LM;
		case 0x3032: return Unicode_Category_LM;
		case 0x3033: return Unicode_Category_LM;
		case 0x3034: return Unicode_Category_LM;
		case 0x3035: return Unicode_Category_LM;
		case 0x3036: return Unicode_Category_SO;
		case 0x3037: return Unicode_Category_SO;
		case 0x3038: return Unicode_Category_NL;
		case 0x3039: return Unicode_Category_NL;
		case 0x303A: return Unicode_Category_NL;
		case 0x303B: return Unicode_Category_LM;
		case 0x303C: return Unicode_Category_LO;
		case 0x303D: return Unicode_Category_PO;
		case 0x303E: return Unicode_Category_SO;
		case 0x303F: return Unicode_Category_SO;
		case 0x3041: return Unicode_Category_LO;
		case 0x3042: return Unicode_Category_LO;
		case 0x3043: return Unicode_Category_LO;
		case 0x3044: return Unicode_Category_LO;
		case 0x3045: return Unicode_Category_LO;
		case 0x3046: return Unicode_Category_LO;
		case 0x3047: return Unicode_Category_LO;
		case 0x3048: return Unicode_Category_LO;
		case 0x3049: return Unicode_Category_LO;
		case 0x304A: return Unicode_Category_LO;
		case 0x304B: return Unicode_Category_LO;
		case 0x304C: return Unicode_Category_LO;
		case 0x304D: return Unicode_Category_LO;
		case 0x304E: return Unicode_Category_LO;
		case 0x304F: return Unicode_Category_LO;
		case 0x3050: return Unicode_Category_LO;
		case 0x3051: return Unicode_Category_LO;
		case 0x3052: return Unicode_Category_LO;
		case 0x3053: return Unicode_Category_LO;
		case 0x3054: return Unicode_Category_LO;
		case 0x3055: return Unicode_Category_LO;
		case 0x3056: return Unicode_Category_LO;
		case 0x3057: return Unicode_Category_LO;
		case 0x3058: return Unicode_Category_LO;
		case 0x3059: return Unicode_Category_LO;
		case 0x305A: return Unicode_Category_LO;
		case 0x305B: return Unicode_Category_LO;
		case 0x305C: return Unicode_Category_LO;
		case 0x305D: return Unicode_Category_LO;
		case 0x305E: return Unicode_Category_LO;
		case 0x305F: return Unicode_Category_LO;
		case 0x3060: return Unicode_Category_LO;
		case 0x3061: return Unicode_Category_LO;
		case 0x3062: return Unicode_Category_LO;
		case 0x3063: return Unicode_Category_LO;
		case 0x3064: return Unicode_Category_LO;
		case 0x3065: return Unicode_Category_LO;
		case 0x3066: return Unicode_Category_LO;
		case 0x3067: return Unicode_Category_LO;
		case 0x3068: return Unicode_Category_LO;
		case 0x3069: return Unicode_Category_LO;
		case 0x306A: return Unicode_Category_LO;
		case 0x306B: return Unicode_Category_LO;
		case 0x306C: return Unicode_Category_LO;
		case 0x306D: return Unicode_Category_LO;
		case 0x306E: return Unicode_Category_LO;
		case 0x306F: return Unicode_Category_LO;
		case 0x3070: return Unicode_Category_LO;
		case 0x3071: return Unicode_Category_LO;
		case 0x3072: return Unicode_Category_LO;
		case 0x3073: return Unicode_Category_LO;
		case 0x3074: return Unicode_Category_LO;
		case 0x3075: return Unicode_Category_LO;
		case 0x3076: return Unicode_Category_LO;
		case 0x3077: return Unicode_Category_LO;
		case 0x3078: return Unicode_Category_LO;
		case 0x3079: return Unicode_Category_LO;
		case 0x307A: return Unicode_Category_LO;
		case 0x307B: return Unicode_Category_LO;
		case 0x307C: return Unicode_Category_LO;
		case 0x307D: return Unicode_Category_LO;
		case 0x307E: return Unicode_Category_LO;
		case 0x307F: return Unicode_Category_LO;
		case 0x3080: return Unicode_Category_LO;
		case 0x3081: return Unicode_Category_LO;
		case 0x3082: return Unicode_Category_LO;
		case 0x3083: return Unicode_Category_LO;
		case 0x3084: return Unicode_Category_LO;
		case 0x3085: return Unicode_Category_LO;
		case 0x3086: return Unicode_Category_LO;
		case 0x3087: return Unicode_Category_LO;
		case 0x3088: return Unicode_Category_LO;
		case 0x3089: return Unicode_Category_LO;
		case 0x308A: return Unicode_Category_LO;
		case 0x308B: return Unicode_Category_LO;
		case 0x308C: return Unicode_Category_LO;
		case 0x308D: return Unicode_Category_LO;
		case 0x308E: return Unicode_Category_LO;
		case 0x308F: return Unicode_Category_LO;
		case 0x3090: return Unicode_Category_LO;
		case 0x3091: return Unicode_Category_LO;
		case 0x3092: return Unicode_Category_LO;
		case 0x3093: return Unicode_Category_LO;
		case 0x3094: return Unicode_Category_LO;
		case 0x3095: return Unicode_Category_LO;
		case 0x3096: return Unicode_Category_LO;
		case 0x3099: return Unicode_Category_MN;
		case 0x309A: return Unicode_Category_MN;
		case 0x309B: return Unicode_Category_SK;
		case 0x309C: return Unicode_Category_SK;
		case 0x309D: return Unicode_Category_LM;
		case 0x309E: return Unicode_Category_LM;
		case 0x309F: return Unicode_Category_LO;
		case 0x30A0: return Unicode_Category_PD;
		case 0x30A1: return Unicode_Category_LO;
		case 0x30A2: return Unicode_Category_LO;
		case 0x30A3: return Unicode_Category_LO;
		case 0x30A4: return Unicode_Category_LO;
		case 0x30A5: return Unicode_Category_LO;
		case 0x30A6: return Unicode_Category_LO;
		case 0x30A7: return Unicode_Category_LO;
		case 0x30A8: return Unicode_Category_LO;
		case 0x30A9: return Unicode_Category_LO;
		case 0x30AA: return Unicode_Category_LO;
		case 0x30AB: return Unicode_Category_LO;
		case 0x30AC: return Unicode_Category_LO;
		case 0x30AD: return Unicode_Category_LO;
		case 0x30AE: return Unicode_Category_LO;
		case 0x30AF: return Unicode_Category_LO;
		case 0x30B0: return Unicode_Category_LO;
		case 0x30B1: return Unicode_Category_LO;
		case 0x30B2: return Unicode_Category_LO;
		case 0x30B3: return Unicode_Category_LO;
		case 0x30B4: return Unicode_Category_LO;
		case 0x30B5: return Unicode_Category_LO;
		case 0x30B6: return Unicode_Category_LO;
		case 0x30B7: return Unicode_Category_LO;
		case 0x30B8: return Unicode_Category_LO;
		case 0x30B9: return Unicode_Category_LO;
		case 0x30BA: return Unicode_Category_LO;
		case 0x30BB: return Unicode_Category_LO;
		case 0x30BC: return Unicode_Category_LO;
		case 0x30BD: return Unicode_Category_LO;
		case 0x30BE: return Unicode_Category_LO;
		case 0x30BF: return Unicode_Category_LO;
		case 0x30C0: return Unicode_Category_LO;
		case 0x30C1: return Unicode_Category_LO;
		case 0x30C2: return Unicode_Category_LO;
		case 0x30C3: return Unicode_Category_LO;
		case 0x30C4: return Unicode_Category_LO;
		case 0x30C5: return Unicode_Category_LO;
		case 0x30C6: return Unicode_Category_LO;
		case 0x30C7: return Unicode_Category_LO;
		case 0x30C8: return Unicode_Category_LO;
		case 0x30C9: return Unicode_Category_LO;
		case 0x30CA: return Unicode_Category_LO;
		case 0x30CB: return Unicode_Category_LO;
		case 0x30CC: return Unicode_Category_LO;
		case 0x30CD: return Unicode_Category_LO;
		case 0x30CE: return Unicode_Category_LO;
		case 0x30CF: return Unicode_Category_LO;
		case 0x30D0: return Unicode_Category_LO;
		case 0x30D1: return Unicode_Category_LO;
		case 0x30D2: return Unicode_Category_LO;
		case 0x30D3: return Unicode_Category_LO;
		case 0x30D4: return Unicode_Category_LO;
		case 0x30D5: return Unicode_Category_LO;
		case 0x30D6: return Unicode_Category_LO;
		case 0x30D7: return Unicode_Category_LO;
		case 0x30D8: return Unicode_Category_LO;
		case 0x30D9: return Unicode_Category_LO;
		case 0x30DA: return Unicode_Category_LO;
		case 0x30DB: return Unicode_Category_LO;
		case 0x30DC: return Unicode_Category_LO;
		case 0x30DD: return Unicode_Category_LO;
		case 0x30DE: return Unicode_Category_LO;
		case 0x30DF: return Unicode_Category_LO;
		case 0x30E0: return Unicode_Category_LO;
		case 0x30E1: return Unicode_Category_LO;
		case 0x30E2: return Unicode_Category_LO;
		case 0x30E3: return Unicode_Category_LO;
		case 0x30E4: return Unicode_Category_LO;
		case 0x30E5: return Unicode_Category_LO;
		case 0x30E6: return Unicode_Category_LO;
		case 0x30E7: return Unicode_Category_LO;
		case 0x30E8: return Unicode_Category_LO;
		case 0x30E9: return Unicode_Category_LO;
		case 0x30EA: return Unicode_Category_LO;
		case 0x30EB: return Unicode_Category_LO;
		case 0x30EC: return Unicode_Category_LO;
		case 0x30ED: return Unicode_Category_LO;
		case 0x30EE: return Unicode_Category_LO;
		case 0x30EF: return Unicode_Category_LO;
		case 0x30F0: return Unicode_Category_LO;
		case 0x30F1: return Unicode_Category_LO;
		case 0x30F2: return Unicode_Category_LO;
		case 0x30F3: return Unicode_Category_LO;
		case 0x30F4: return Unicode_Category_LO;
		case 0x30F5: return Unicode_Category_LO;
		case 0x30F6: return Unicode_Category_LO;
		case 0x30F7: return Unicode_Category_LO;
		case 0x30F8: return Unicode_Category_LO;
		case 0x30F9: return Unicode_Category_LO;
		case 0x30FA: return Unicode_Category_LO;
		case 0x30FB: return Unicode_Category_PO;
		case 0x30FC: return Unicode_Category_LM;
		case 0x30FD: return Unicode_Category_LM;
		case 0x30FE: return Unicode_Category_LM;
		case 0x30FF: return Unicode_Category_LO;
		case 0x3105: return Unicode_Category_LO;
		case 0x3106: return Unicode_Category_LO;
		case 0x3107: return Unicode_Category_LO;
		case 0x3108: return Unicode_Category_LO;
		case 0x3109: return Unicode_Category_LO;
		case 0x310A: return Unicode_Category_LO;
		case 0x310B: return Unicode_Category_LO;
		case 0x310C: return Unicode_Category_LO;
		case 0x310D: return Unicode_Category_LO;
		case 0x310E: return Unicode_Category_LO;
		case 0x310F: return Unicode_Category_LO;
		case 0x3110: return Unicode_Category_LO;
		case 0x3111: return Unicode_Category_LO;
		case 0x3112: return Unicode_Category_LO;
		case 0x3113: return Unicode_Category_LO;
		case 0x3114: return Unicode_Category_LO;
		case 0x3115: return Unicode_Category_LO;
		case 0x3116: return Unicode_Category_LO;
		case 0x3117: return Unicode_Category_LO;
		case 0x3118: return Unicode_Category_LO;
		case 0x3119: return Unicode_Category_LO;
		case 0x311A: return Unicode_Category_LO;
		case 0x311B: return Unicode_Category_LO;
		case 0x311C: return Unicode_Category_LO;
		case 0x311D: return Unicode_Category_LO;
		case 0x311E: return Unicode_Category_LO;
		case 0x311F: return Unicode_Category_LO;
		case 0x3120: return Unicode_Category_LO;
		case 0x3121: return Unicode_Category_LO;
		case 0x3122: return Unicode_Category_LO;
		case 0x3123: return Unicode_Category_LO;
		case 0x3124: return Unicode_Category_LO;
		case 0x3125: return Unicode_Category_LO;
		case 0x3126: return Unicode_Category_LO;
		case 0x3127: return Unicode_Category_LO;
		case 0x3128: return Unicode_Category_LO;
		case 0x3129: return Unicode_Category_LO;
		case 0x312A: return Unicode_Category_LO;
		case 0x312B: return Unicode_Category_LO;
		case 0x312C: return Unicode_Category_LO;
		case 0x312D: return Unicode_Category_LO;
		case 0x312E: return Unicode_Category_LO;
		case 0x312F: return Unicode_Category_LO;
		case 0x3131: return Unicode_Category_LO;
		case 0x3132: return Unicode_Category_LO;
		case 0x3133: return Unicode_Category_LO;
		case 0x3134: return Unicode_Category_LO;
		case 0x3135: return Unicode_Category_LO;
		case 0x3136: return Unicode_Category_LO;
		case 0x3137: return Unicode_Category_LO;
		case 0x3138: return Unicode_Category_LO;
		case 0x3139: return Unicode_Category_LO;
		case 0x313A: return Unicode_Category_LO;
		case 0x313B: return Unicode_Category_LO;
		case 0x313C: return Unicode_Category_LO;
		case 0x313D: return Unicode_Category_LO;
		case 0x313E: return Unicode_Category_LO;
		case 0x313F: return Unicode_Category_LO;
		case 0x3140: return Unicode_Category_LO;
		case 0x3141: return Unicode_Category_LO;
		case 0x3142: return Unicode_Category_LO;
		case 0x3143: return Unicode_Category_LO;
		case 0x3144: return Unicode_Category_LO;
		case 0x3145: return Unicode_Category_LO;
		case 0x3146: return Unicode_Category_LO;
		case 0x3147: return Unicode_Category_LO;
		case 0x3148: return Unicode_Category_LO;
		case 0x3149: return Unicode_Category_LO;
		case 0x314A: return Unicode_Category_LO;
		case 0x314B: return Unicode_Category_LO;
		case 0x314C: return Unicode_Category_LO;
		case 0x314D: return Unicode_Category_LO;
		case 0x314E: return Unicode_Category_LO;
		case 0x314F: return Unicode_Category_LO;
		case 0x3150: return Unicode_Category_LO;
		case 0x3151: return Unicode_Category_LO;
		case 0x3152: return Unicode_Category_LO;
		case 0x3153: return Unicode_Category_LO;
		case 0x3154: return Unicode_Category_LO;
		case 0x3155: return Unicode_Category_LO;
		case 0x3156: return Unicode_Category_LO;
		case 0x3157: return Unicode_Category_LO;
		case 0x3158: return Unicode_Category_LO;
		case 0x3159: return Unicode_Category_LO;
		case 0x315A: return Unicode_Category_LO;
		case 0x315B: return Unicode_Category_LO;
		case 0x315C: return Unicode_Category_LO;
		case 0x315D: return Unicode_Category_LO;
		case 0x315E: return Unicode_Category_LO;
		case 0x315F: return Unicode_Category_LO;
		case 0x3160: return Unicode_Category_LO;
		case 0x3161: return Unicode_Category_LO;
		case 0x3162: return Unicode_Category_LO;
		case 0x3163: return Unicode_Category_LO;
		case 0x3164: return Unicode_Category_LO;
		case 0x3165: return Unicode_Category_LO;
		case 0x3166: return Unicode_Category_LO;
		case 0x3167: return Unicode_Category_LO;
		case 0x3168: return Unicode_Category_LO;
		case 0x3169: return Unicode_Category_LO;
		case 0x316A: return Unicode_Category_LO;
		case 0x316B: return Unicode_Category_LO;
		case 0x316C: return Unicode_Category_LO;
		case 0x316D: return Unicode_Category_LO;
		case 0x316E: return Unicode_Category_LO;
		case 0x316F: return Unicode_Category_LO;
		case 0x3170: return Unicode_Category_LO;
		case 0x3171: return Unicode_Category_LO;
		case 0x3172: return Unicode_Category_LO;
		case 0x3173: return Unicode_Category_LO;
		case 0x3174: return Unicode_Category_LO;
		case 0x3175: return Unicode_Category_LO;
		case 0x3176: return Unicode_Category_LO;
		case 0x3177: return Unicode_Category_LO;
		case 0x3178: return Unicode_Category_LO;
		case 0x3179: return Unicode_Category_LO;
		case 0x317A: return Unicode_Category_LO;
		case 0x317B: return Unicode_Category_LO;
		case 0x317C: return Unicode_Category_LO;
		case 0x317D: return Unicode_Category_LO;
		case 0x317E: return Unicode_Category_LO;
		case 0x317F: return Unicode_Category_LO;
		case 0x3180: return Unicode_Category_LO;
		case 0x3181: return Unicode_Category_LO;
		case 0x3182: return Unicode_Category_LO;
		case 0x3183: return Unicode_Category_LO;
		case 0x3184: return Unicode_Category_LO;
		case 0x3185: return Unicode_Category_LO;
		case 0x3186: return Unicode_Category_LO;
		case 0x3187: return Unicode_Category_LO;
		case 0x3188: return Unicode_Category_LO;
		case 0x3189: return Unicode_Category_LO;
		case 0x318A: return Unicode_Category_LO;
		case 0x318B: return Unicode_Category_LO;
		case 0x318C: return Unicode_Category_LO;
		case 0x318D: return Unicode_Category_LO;
		case 0x318E: return Unicode_Category_LO;
		case 0x3190: return Unicode_Category_SO;
		case 0x3191: return Unicode_Category_SO;
		case 0x3192: return Unicode_Category_NO;
		case 0x3193: return Unicode_Category_NO;
		case 0x3194: return Unicode_Category_NO;
		case 0x3195: return Unicode_Category_NO;
		case 0x3196: return Unicode_Category_SO;
		case 0x3197: return Unicode_Category_SO;
		case 0x3198: return Unicode_Category_SO;
		case 0x3199: return Unicode_Category_SO;
		case 0x319A: return Unicode_Category_SO;
		case 0x319B: return Unicode_Category_SO;
		case 0x319C: return Unicode_Category_SO;
		case 0x319D: return Unicode_Category_SO;
		case 0x319E: return Unicode_Category_SO;
		case 0x319F: return Unicode_Category_SO;
		case 0x31A0: return Unicode_Category_LO;
		case 0x31A1: return Unicode_Category_LO;
		case 0x31A2: return Unicode_Category_LO;
		case 0x31A3: return Unicode_Category_LO;
		case 0x31A4: return Unicode_Category_LO;
		case 0x31A5: return Unicode_Category_LO;
		case 0x31A6: return Unicode_Category_LO;
		case 0x31A7: return Unicode_Category_LO;
		case 0x31A8: return Unicode_Category_LO;
		case 0x31A9: return Unicode_Category_LO;
		case 0x31AA: return Unicode_Category_LO;
		case 0x31AB: return Unicode_Category_LO;
		case 0x31AC: return Unicode_Category_LO;
		case 0x31AD: return Unicode_Category_LO;
		case 0x31AE: return Unicode_Category_LO;
		case 0x31AF: return Unicode_Category_LO;
		case 0x31B0: return Unicode_Category_LO;
		case 0x31B1: return Unicode_Category_LO;
		case 0x31B2: return Unicode_Category_LO;
		case 0x31B3: return Unicode_Category_LO;
		case 0x31B4: return Unicode_Category_LO;
		case 0x31B5: return Unicode_Category_LO;
		case 0x31B6: return Unicode_Category_LO;
		case 0x31B7: return Unicode_Category_LO;
		case 0x31B8: return Unicode_Category_LO;
		case 0x31B9: return Unicode_Category_LO;
		case 0x31BA: return Unicode_Category_LO;
		case 0x31BB: return Unicode_Category_LO;
		case 0x31BC: return Unicode_Category_LO;
		case 0x31BD: return Unicode_Category_LO;
		case 0x31BE: return Unicode_Category_LO;
		case 0x31BF: return Unicode_Category_LO;
		case 0x31C0: return Unicode_Category_SO;
		case 0x31C1: return Unicode_Category_SO;
		case 0x31C2: return Unicode_Category_SO;
		case 0x31C3: return Unicode_Category_SO;
		case 0x31C4: return Unicode_Category_SO;
		case 0x31C5: return Unicode_Category_SO;
		case 0x31C6: return Unicode_Category_SO;
		case 0x31C7: return Unicode_Category_SO;
		case 0x31C8: return Unicode_Category_SO;
		case 0x31C9: return Unicode_Category_SO;
		case 0x31CA: return Unicode_Category_SO;
		case 0x31CB: return Unicode_Category_SO;
		case 0x31CC: return Unicode_Category_SO;
		case 0x31CD: return Unicode_Category_SO;
		case 0x31CE: return Unicode_Category_SO;
		case 0x31CF: return Unicode_Category_SO;
		case 0x31D0: return Unicode_Category_SO;
		case 0x31D1: return Unicode_Category_SO;
		case 0x31D2: return Unicode_Category_SO;
		case 0x31D3: return Unicode_Category_SO;
		case 0x31D4: return Unicode_Category_SO;
		case 0x31D5: return Unicode_Category_SO;
		case 0x31D6: return Unicode_Category_SO;
		case 0x31D7: return Unicode_Category_SO;
		case 0x31D8: return Unicode_Category_SO;
		case 0x31D9: return Unicode_Category_SO;
		case 0x31DA: return Unicode_Category_SO;
		case 0x31DB: return Unicode_Category_SO;
		case 0x31DC: return Unicode_Category_SO;
		case 0x31DD: return Unicode_Category_SO;
		case 0x31DE: return Unicode_Category_SO;
		case 0x31DF: return Unicode_Category_SO;
		case 0x31E0: return Unicode_Category_SO;
		case 0x31E1: return Unicode_Category_SO;
		case 0x31E2: return Unicode_Category_SO;
		case 0x31E3: return Unicode_Category_SO;
		case 0x31F0: return Unicode_Category_LO;
		case 0x31F1: return Unicode_Category_LO;
		case 0x31F2: return Unicode_Category_LO;
		case 0x31F3: return Unicode_Category_LO;
		case 0x31F4: return Unicode_Category_LO;
		case 0x31F5: return Unicode_Category_LO;
		case 0x31F6: return Unicode_Category_LO;
		case 0x31F7: return Unicode_Category_LO;
		case 0x31F8: return Unicode_Category_LO;
		case 0x31F9: return Unicode_Category_LO;
		case 0x31FA: return Unicode_Category_LO;
		case 0x31FB: return Unicode_Category_LO;
		case 0x31FC: return Unicode_Category_LO;
		case 0x31FD: return Unicode_Category_LO;
		case 0x31FE: return Unicode_Category_LO;
		case 0x31FF: return Unicode_Category_LO;
		case 0x3200: return Unicode_Category_SO;
		case 0x3201: return Unicode_Category_SO;
		case 0x3202: return Unicode_Category_SO;
		case 0x3203: return Unicode_Category_SO;
		case 0x3204: return Unicode_Category_SO;
		case 0x3205: return Unicode_Category_SO;
		case 0x3206: return Unicode_Category_SO;
		case 0x3207: return Unicode_Category_SO;
		case 0x3208: return Unicode_Category_SO;
		case 0x3209: return Unicode_Category_SO;
		case 0x320A: return Unicode_Category_SO;
		case 0x320B: return Unicode_Category_SO;
		case 0x320C: return Unicode_Category_SO;
		case 0x320D: return Unicode_Category_SO;
		case 0x320E: return Unicode_Category_SO;
		case 0x320F: return Unicode_Category_SO;
		case 0x3210: return Unicode_Category_SO;
		case 0x3211: return Unicode_Category_SO;
		case 0x3212: return Unicode_Category_SO;
		case 0x3213: return Unicode_Category_SO;
		case 0x3214: return Unicode_Category_SO;
		case 0x3215: return Unicode_Category_SO;
		case 0x3216: return Unicode_Category_SO;
		case 0x3217: return Unicode_Category_SO;
		case 0x3218: return Unicode_Category_SO;
		case 0x3219: return Unicode_Category_SO;
		case 0x321A: return Unicode_Category_SO;
		case 0x321B: return Unicode_Category_SO;
		case 0x321C: return Unicode_Category_SO;
		case 0x321D: return Unicode_Category_SO;
		case 0x321E: return Unicode_Category_SO;
		case 0x3220: return Unicode_Category_NO;
		case 0x3221: return Unicode_Category_NO;
		case 0x3222: return Unicode_Category_NO;
		case 0x3223: return Unicode_Category_NO;
		case 0x3224: return Unicode_Category_NO;
		case 0x3225: return Unicode_Category_NO;
		case 0x3226: return Unicode_Category_NO;
		case 0x3227: return Unicode_Category_NO;
		case 0x3228: return Unicode_Category_NO;
		case 0x3229: return Unicode_Category_NO;
		case 0x322A: return Unicode_Category_SO;
		case 0x322B: return Unicode_Category_SO;
		case 0x322C: return Unicode_Category_SO;
		case 0x322D: return Unicode_Category_SO;
		case 0x322E: return Unicode_Category_SO;
		case 0x322F: return Unicode_Category_SO;
		case 0x3230: return Unicode_Category_SO;
		case 0x3231: return Unicode_Category_SO;
		case 0x3232: return Unicode_Category_SO;
		case 0x3233: return Unicode_Category_SO;
		case 0x3234: return Unicode_Category_SO;
		case 0x3235: return Unicode_Category_SO;
		case 0x3236: return Unicode_Category_SO;
		case 0x3237: return Unicode_Category_SO;
		case 0x3238: return Unicode_Category_SO;
		case 0x3239: return Unicode_Category_SO;
		case 0x323A: return Unicode_Category_SO;
		case 0x323B: return Unicode_Category_SO;
		case 0x323C: return Unicode_Category_SO;
		case 0x323D: return Unicode_Category_SO;
		case 0x323E: return Unicode_Category_SO;
		case 0x323F: return Unicode_Category_SO;
		case 0x3240: return Unicode_Category_SO;
		case 0x3241: return Unicode_Category_SO;
		case 0x3242: return Unicode_Category_SO;
		case 0x3243: return Unicode_Category_SO;
		case 0x3244: return Unicode_Category_SO;
		case 0x3245: return Unicode_Category_SO;
		case 0x3246: return Unicode_Category_SO;
		case 0x3247: return Unicode_Category_SO;
		case 0x3248: return Unicode_Category_NO;
		case 0x3249: return Unicode_Category_NO;
		case 0x324A: return Unicode_Category_NO;
		case 0x324B: return Unicode_Category_NO;
		case 0x324C: return Unicode_Category_NO;
		case 0x324D: return Unicode_Category_NO;
		case 0x324E: return Unicode_Category_NO;
		case 0x324F: return Unicode_Category_NO;
		case 0x3250: return Unicode_Category_SO;
		case 0x3251: return Unicode_Category_NO;
		case 0x3252: return Unicode_Category_NO;
		case 0x3253: return Unicode_Category_NO;
		case 0x3254: return Unicode_Category_NO;
		case 0x3255: return Unicode_Category_NO;
		case 0x3256: return Unicode_Category_NO;
		case 0x3257: return Unicode_Category_NO;
		case 0x3258: return Unicode_Category_NO;
		case 0x3259: return Unicode_Category_NO;
		case 0x325A: return Unicode_Category_NO;
		case 0x325B: return Unicode_Category_NO;
		case 0x325C: return Unicode_Category_NO;
		case 0x325D: return Unicode_Category_NO;
		case 0x325E: return Unicode_Category_NO;
		case 0x325F: return Unicode_Category_NO;
		case 0x3260: return Unicode_Category_SO;
		case 0x3261: return Unicode_Category_SO;
		case 0x3262: return Unicode_Category_SO;
		case 0x3263: return Unicode_Category_SO;
		case 0x3264: return Unicode_Category_SO;
		case 0x3265: return Unicode_Category_SO;
		case 0x3266: return Unicode_Category_SO;
		case 0x3267: return Unicode_Category_SO;
		case 0x3268: return Unicode_Category_SO;
		case 0x3269: return Unicode_Category_SO;
		case 0x326A: return Unicode_Category_SO;
		case 0x326B: return Unicode_Category_SO;
		case 0x326C: return Unicode_Category_SO;
		case 0x326D: return Unicode_Category_SO;
		case 0x326E: return Unicode_Category_SO;
		case 0x326F: return Unicode_Category_SO;
		case 0x3270: return Unicode_Category_SO;
		case 0x3271: return Unicode_Category_SO;
		case 0x3272: return Unicode_Category_SO;
		case 0x3273: return Unicode_Category_SO;
		case 0x3274: return Unicode_Category_SO;
		case 0x3275: return Unicode_Category_SO;
		case 0x3276: return Unicode_Category_SO;
		case 0x3277: return Unicode_Category_SO;
		case 0x3278: return Unicode_Category_SO;
		case 0x3279: return Unicode_Category_SO;
		case 0x327A: return Unicode_Category_SO;
		case 0x327B: return Unicode_Category_SO;
		case 0x327C: return Unicode_Category_SO;
		case 0x327D: return Unicode_Category_SO;
		case 0x327E: return Unicode_Category_SO;
		case 0x327F: return Unicode_Category_SO;
		case 0x3280: return Unicode_Category_NO;
		case 0x3281: return Unicode_Category_NO;
		case 0x3282: return Unicode_Category_NO;
		case 0x3283: return Unicode_Category_NO;
		case 0x3284: return Unicode_Category_NO;
		case 0x3285: return Unicode_Category_NO;
		case 0x3286: return Unicode_Category_NO;
		case 0x3287: return Unicode_Category_NO;
		case 0x3288: return Unicode_Category_NO;
		case 0x3289: return Unicode_Category_NO;
		case 0x328A: return Unicode_Category_SO;
		case 0x328B: return Unicode_Category_SO;
		case 0x328C: return Unicode_Category_SO;
		case 0x328D: return Unicode_Category_SO;
		case 0x328E: return Unicode_Category_SO;
		case 0x328F: return Unicode_Category_SO;
		case 0x3290: return Unicode_Category_SO;
		case 0x3291: return Unicode_Category_SO;
		case 0x3292: return Unicode_Category_SO;
		case 0x3293: return Unicode_Category_SO;
		case 0x3294: return Unicode_Category_SO;
		case 0x3295: return Unicode_Category_SO;
		case 0x3296: return Unicode_Category_SO;
		case 0x3297: return Unicode_Category_SO;
		case 0x3298: return Unicode_Category_SO;
		case 0x3299: return Unicode_Category_SO;
		case 0x329A: return Unicode_Category_SO;
		case 0x329B: return Unicode_Category_SO;
		case 0x329C: return Unicode_Category_SO;
		case 0x329D: return Unicode_Category_SO;
		case 0x329E: return Unicode_Category_SO;
		case 0x329F: return Unicode_Category_SO;
		case 0x32A0: return Unicode_Category_SO;
		case 0x32A1: return Unicode_Category_SO;
		case 0x32A2: return Unicode_Category_SO;
		case 0x32A3: return Unicode_Category_SO;
		case 0x32A4: return Unicode_Category_SO;
		case 0x32A5: return Unicode_Category_SO;
		case 0x32A6: return Unicode_Category_SO;
		case 0x32A7: return Unicode_Category_SO;
		case 0x32A8: return Unicode_Category_SO;
		case 0x32A9: return Unicode_Category_SO;
		case 0x32AA: return Unicode_Category_SO;
		case 0x32AB: return Unicode_Category_SO;
		case 0x32AC: return Unicode_Category_SO;
		case 0x32AD: return Unicode_Category_SO;
		case 0x32AE: return Unicode_Category_SO;
		case 0x32AF: return Unicode_Category_SO;
		case 0x32B0: return Unicode_Category_SO;
		case 0x32B1: return Unicode_Category_NO;
		case 0x32B2: return Unicode_Category_NO;
		case 0x32B3: return Unicode_Category_NO;
		case 0x32B4: return Unicode_Category_NO;
		case 0x32B5: return Unicode_Category_NO;
		case 0x32B6: return Unicode_Category_NO;
		case 0x32B7: return Unicode_Category_NO;
		case 0x32B8: return Unicode_Category_NO;
		case 0x32B9: return Unicode_Category_NO;
		case 0x32BA: return Unicode_Category_NO;
		case 0x32BB: return Unicode_Category_NO;
		case 0x32BC: return Unicode_Category_NO;
		case 0x32BD: return Unicode_Category_NO;
		case 0x32BE: return Unicode_Category_NO;
		case 0x32BF: return Unicode_Category_NO;
		case 0x32C0: return Unicode_Category_SO;
		case 0x32C1: return Unicode_Category_SO;
		case 0x32C2: return Unicode_Category_SO;
		case 0x32C3: return Unicode_Category_SO;
		case 0x32C4: return Unicode_Category_SO;
		case 0x32C5: return Unicode_Category_SO;
		case 0x32C6: return Unicode_Category_SO;
		case 0x32C7: return Unicode_Category_SO;
		case 0x32C8: return Unicode_Category_SO;
		case 0x32C9: return Unicode_Category_SO;
		case 0x32CA: return Unicode_Category_SO;
		case 0x32CB: return Unicode_Category_SO;
		case 0x32CC: return Unicode_Category_SO;
		case 0x32CD: return Unicode_Category_SO;
		case 0x32CE: return Unicode_Category_SO;
		case 0x32CF: return Unicode_Category_SO;
		case 0x32D0: return Unicode_Category_SO;
		case 0x32D1: return Unicode_Category_SO;
		case 0x32D2: return Unicode_Category_SO;
		case 0x32D3: return Unicode_Category_SO;
		case 0x32D4: return Unicode_Category_SO;
		case 0x32D5: return Unicode_Category_SO;
		case 0x32D6: return Unicode_Category_SO;
		case 0x32D7: return Unicode_Category_SO;
		case 0x32D8: return Unicode_Category_SO;
		case 0x32D9: return Unicode_Category_SO;
		case 0x32DA: return Unicode_Category_SO;
		case 0x32DB: return Unicode_Category_SO;
		case 0x32DC: return Unicode_Category_SO;
		case 0x32DD: return Unicode_Category_SO;
		case 0x32DE: return Unicode_Category_SO;
		case 0x32DF: return Unicode_Category_SO;
		case 0x32E0: return Unicode_Category_SO;
		case 0x32E1: return Unicode_Category_SO;
		case 0x32E2: return Unicode_Category_SO;
		case 0x32E3: return Unicode_Category_SO;
		case 0x32E4: return Unicode_Category_SO;
		case 0x32E5: return Unicode_Category_SO;
		case 0x32E6: return Unicode_Category_SO;
		case 0x32E7: return Unicode_Category_SO;
		case 0x32E8: return Unicode_Category_SO;
		case 0x32E9: return Unicode_Category_SO;
		case 0x32EA: return Unicode_Category_SO;
		case 0x32EB: return Unicode_Category_SO;
		case 0x32EC: return Unicode_Category_SO;
		case 0x32ED: return Unicode_Category_SO;
		case 0x32EE: return Unicode_Category_SO;
		case 0x32EF: return Unicode_Category_SO;
		case 0x32F0: return Unicode_Category_SO;
		case 0x32F1: return Unicode_Category_SO;
		case 0x32F2: return Unicode_Category_SO;
		case 0x32F3: return Unicode_Category_SO;
		case 0x32F4: return Unicode_Category_SO;
		case 0x32F5: return Unicode_Category_SO;
		case 0x32F6: return Unicode_Category_SO;
		case 0x32F7: return Unicode_Category_SO;
		case 0x32F8: return Unicode_Category_SO;
		case 0x32F9: return Unicode_Category_SO;
		case 0x32FA: return Unicode_Category_SO;
		case 0x32FB: return Unicode_Category_SO;
		case 0x32FC: return Unicode_Category_SO;
		case 0x32FD: return Unicode_Category_SO;
		case 0x32FE: return Unicode_Category_SO;
		case 0x32FF: return Unicode_Category_SO;
		case 0x3300: return Unicode_Category_SO;
		case 0x3301: return Unicode_Category_SO;
		case 0x3302: return Unicode_Category_SO;
		case 0x3303: return Unicode_Category_SO;
		case 0x3304: return Unicode_Category_SO;
		case 0x3305: return Unicode_Category_SO;
		case 0x3306: return Unicode_Category_SO;
		case 0x3307: return Unicode_Category_SO;
		case 0x3308: return Unicode_Category_SO;
		case 0x3309: return Unicode_Category_SO;
		case 0x330A: return Unicode_Category_SO;
		case 0x330B: return Unicode_Category_SO;
		case 0x330C: return Unicode_Category_SO;
		case 0x330D: return Unicode_Category_SO;
		case 0x330E: return Unicode_Category_SO;
		case 0x330F: return Unicode_Category_SO;
		case 0x3310: return Unicode_Category_SO;
		case 0x3311: return Unicode_Category_SO;
		case 0x3312: return Unicode_Category_SO;
		case 0x3313: return Unicode_Category_SO;
		case 0x3314: return Unicode_Category_SO;
		case 0x3315: return Unicode_Category_SO;
		case 0x3316: return Unicode_Category_SO;
		case 0x3317: return Unicode_Category_SO;
		case 0x3318: return Unicode_Category_SO;
		case 0x3319: return Unicode_Category_SO;
		case 0x331A: return Unicode_Category_SO;
		case 0x331B: return Unicode_Category_SO;
		case 0x331C: return Unicode_Category_SO;
		case 0x331D: return Unicode_Category_SO;
		case 0x331E: return Unicode_Category_SO;
		case 0x331F: return Unicode_Category_SO;
		case 0x3320: return Unicode_Category_SO;
		case 0x3321: return Unicode_Category_SO;
		case 0x3322: return Unicode_Category_SO;
		case 0x3323: return Unicode_Category_SO;
		case 0x3324: return Unicode_Category_SO;
		case 0x3325: return Unicode_Category_SO;
		case 0x3326: return Unicode_Category_SO;
		case 0x3327: return Unicode_Category_SO;
		case 0x3328: return Unicode_Category_SO;
		case 0x3329: return Unicode_Category_SO;
		case 0x332A: return Unicode_Category_SO;
		case 0x332B: return Unicode_Category_SO;
		case 0x332C: return Unicode_Category_SO;
		case 0x332D: return Unicode_Category_SO;
		case 0x332E: return Unicode_Category_SO;
		case 0x332F: return Unicode_Category_SO;
		case 0x3330: return Unicode_Category_SO;
		case 0x3331: return Unicode_Category_SO;
		case 0x3332: return Unicode_Category_SO;
		case 0x3333: return Unicode_Category_SO;
		case 0x3334: return Unicode_Category_SO;
		case 0x3335: return Unicode_Category_SO;
		case 0x3336: return Unicode_Category_SO;
		case 0x3337: return Unicode_Category_SO;
		case 0x3338: return Unicode_Category_SO;
		case 0x3339: return Unicode_Category_SO;
		case 0x333A: return Unicode_Category_SO;
		case 0x333B: return Unicode_Category_SO;
		case 0x333C: return Unicode_Category_SO;
		case 0x333D: return Unicode_Category_SO;
		case 0x333E: return Unicode_Category_SO;
		case 0x333F: return Unicode_Category_SO;
		case 0x3340: return Unicode_Category_SO;
		case 0x3341: return Unicode_Category_SO;
		case 0x3342: return Unicode_Category_SO;
		case 0x3343: return Unicode_Category_SO;
		case 0x3344: return Unicode_Category_SO;
		case 0x3345: return Unicode_Category_SO;
		case 0x3346: return Unicode_Category_SO;
		case 0x3347: return Unicode_Category_SO;
		case 0x3348: return Unicode_Category_SO;
		case 0x3349: return Unicode_Category_SO;
		case 0x334A: return Unicode_Category_SO;
		case 0x334B: return Unicode_Category_SO;
		case 0x334C: return Unicode_Category_SO;
		case 0x334D: return Unicode_Category_SO;
		case 0x334E: return Unicode_Category_SO;
		case 0x334F: return Unicode_Category_SO;
		case 0x3350: return Unicode_Category_SO;
		case 0x3351: return Unicode_Category_SO;
		case 0x3352: return Unicode_Category_SO;
		case 0x3353: return Unicode_Category_SO;
		case 0x3354: return Unicode_Category_SO;
		case 0x3355: return Unicode_Category_SO;
		case 0x3356: return Unicode_Category_SO;
		case 0x3357: return Unicode_Category_SO;
		case 0x3358: return Unicode_Category_SO;
		case 0x3359: return Unicode_Category_SO;
		case 0x335A: return Unicode_Category_SO;
		case 0x335B: return Unicode_Category_SO;
		case 0x335C: return Unicode_Category_SO;
		case 0x335D: return Unicode_Category_SO;
		case 0x335E: return Unicode_Category_SO;
		case 0x335F: return Unicode_Category_SO;
		case 0x3360: return Unicode_Category_SO;
		case 0x3361: return Unicode_Category_SO;
		case 0x3362: return Unicode_Category_SO;
		case 0x3363: return Unicode_Category_SO;
		case 0x3364: return Unicode_Category_SO;
		case 0x3365: return Unicode_Category_SO;
		case 0x3366: return Unicode_Category_SO;
		case 0x3367: return Unicode_Category_SO;
		case 0x3368: return Unicode_Category_SO;
		case 0x3369: return Unicode_Category_SO;
		case 0x336A: return Unicode_Category_SO;
		case 0x336B: return Unicode_Category_SO;
		case 0x336C: return Unicode_Category_SO;
		case 0x336D: return Unicode_Category_SO;
		case 0x336E: return Unicode_Category_SO;
		case 0x336F: return Unicode_Category_SO;
		case 0x3370: return Unicode_Category_SO;
		case 0x3371: return Unicode_Category_SO;
		case 0x3372: return Unicode_Category_SO;
		case 0x3373: return Unicode_Category_SO;
		case 0x3374: return Unicode_Category_SO;
		case 0x3375: return Unicode_Category_SO;
		case 0x3376: return Unicode_Category_SO;
		case 0x3377: return Unicode_Category_SO;
		case 0x3378: return Unicode_Category_SO;
		case 0x3379: return Unicode_Category_SO;
		case 0x337A: return Unicode_Category_SO;
		case 0x337B: return Unicode_Category_SO;
		case 0x337C: return Unicode_Category_SO;
		case 0x337D: return Unicode_Category_SO;
		case 0x337E: return Unicode_Category_SO;
		case 0x337F: return Unicode_Category_SO;
		case 0x3380: return Unicode_Category_SO;
		case 0x3381: return Unicode_Category_SO;
		case 0x3382: return Unicode_Category_SO;
		case 0x3383: return Unicode_Category_SO;
		case 0x3384: return Unicode_Category_SO;
		case 0x3385: return Unicode_Category_SO;
		case 0x3386: return Unicode_Category_SO;
		case 0x3387: return Unicode_Category_SO;
		case 0x3388: return Unicode_Category_SO;
		case 0x3389: return Unicode_Category_SO;
		case 0x338A: return Unicode_Category_SO;
		case 0x338B: return Unicode_Category_SO;
		case 0x338C: return Unicode_Category_SO;
		case 0x338D: return Unicode_Category_SO;
		case 0x338E: return Unicode_Category_SO;
		case 0x338F: return Unicode_Category_SO;
		case 0x3390: return Unicode_Category_SO;
		case 0x3391: return Unicode_Category_SO;
		case 0x3392: return Unicode_Category_SO;
		case 0x3393: return Unicode_Category_SO;
		case 0x3394: return Unicode_Category_SO;
		case 0x3395: return Unicode_Category_SO;
		case 0x3396: return Unicode_Category_SO;
		case 0x3397: return Unicode_Category_SO;
		case 0x3398: return Unicode_Category_SO;
		case 0x3399: return Unicode_Category_SO;
		case 0x339A: return Unicode_Category_SO;
		case 0x339B: return Unicode_Category_SO;
		case 0x339C: return Unicode_Category_SO;
		case 0x339D: return Unicode_Category_SO;
		case 0x339E: return Unicode_Category_SO;
		case 0x339F: return Unicode_Category_SO;
		case 0x33A0: return Unicode_Category_SO;
		case 0x33A1: return Unicode_Category_SO;
		case 0x33A2: return Unicode_Category_SO;
		case 0x33A3: return Unicode_Category_SO;
		case 0x33A4: return Unicode_Category_SO;
		case 0x33A5: return Unicode_Category_SO;
		case 0x33A6: return Unicode_Category_SO;
		case 0x33A7: return Unicode_Category_SO;
		case 0x33A8: return Unicode_Category_SO;
		case 0x33A9: return Unicode_Category_SO;
		case 0x33AA: return Unicode_Category_SO;
		case 0x33AB: return Unicode_Category_SO;
		case 0x33AC: return Unicode_Category_SO;
		case 0x33AD: return Unicode_Category_SO;
		case 0x33AE: return Unicode_Category_SO;
		case 0x33AF: return Unicode_Category_SO;
		case 0x33B0: return Unicode_Category_SO;
		case 0x33B1: return Unicode_Category_SO;
		case 0x33B2: return Unicode_Category_SO;
		case 0x33B3: return Unicode_Category_SO;
		case 0x33B4: return Unicode_Category_SO;
		case 0x33B5: return Unicode_Category_SO;
		case 0x33B6: return Unicode_Category_SO;
		case 0x33B7: return Unicode_Category_SO;
		case 0x33B8: return Unicode_Category_SO;
		case 0x33B9: return Unicode_Category_SO;
		case 0x33BA: return Unicode_Category_SO;
		case 0x33BB: return Unicode_Category_SO;
		case 0x33BC: return Unicode_Category_SO;
		case 0x33BD: return Unicode_Category_SO;
		case 0x33BE: return Unicode_Category_SO;
		case 0x33BF: return Unicode_Category_SO;
		case 0x33C0: return Unicode_Category_SO;
		case 0x33C1: return Unicode_Category_SO;
		case 0x33C2: return Unicode_Category_SO;
		case 0x33C3: return Unicode_Category_SO;
		case 0x33C4: return Unicode_Category_SO;
		case 0x33C5: return Unicode_Category_SO;
		case 0x33C6: return Unicode_Category_SO;
		case 0x33C7: return Unicode_Category_SO;
		case 0x33C8: return Unicode_Category_SO;
		case 0x33C9: return Unicode_Category_SO;
		case 0x33CA: return Unicode_Category_SO;
		case 0x33CB: return Unicode_Category_SO;
		case 0x33CC: return Unicode_Category_SO;
		case 0x33CD: return Unicode_Category_SO;
		case 0x33CE: return Unicode_Category_SO;
		case 0x33CF: return Unicode_Category_SO;
		case 0x33D0: return Unicode_Category_SO;
		case 0x33D1: return Unicode_Category_SO;
		case 0x33D2: return Unicode_Category_SO;
		case 0x33D3: return Unicode_Category_SO;
		case 0x33D4: return Unicode_Category_SO;
		case 0x33D5: return Unicode_Category_SO;
		case 0x33D6: return Unicode_Category_SO;
		case 0x33D7: return Unicode_Category_SO;
		case 0x33D8: return Unicode_Category_SO;
		case 0x33D9: return Unicode_Category_SO;
		case 0x33DA: return Unicode_Category_SO;
		case 0x33DB: return Unicode_Category_SO;
		case 0x33DC: return Unicode_Category_SO;
		case 0x33DD: return Unicode_Category_SO;
		case 0x33DE: return Unicode_Category_SO;
		case 0x33DF: return Unicode_Category_SO;
		case 0x33E0: return Unicode_Category_SO;
		case 0x33E1: return Unicode_Category_SO;
		case 0x33E2: return Unicode_Category_SO;
		case 0x33E3: return Unicode_Category_SO;
		case 0x33E4: return Unicode_Category_SO;
		case 0x33E5: return Unicode_Category_SO;
		case 0x33E6: return Unicode_Category_SO;
		case 0x33E7: return Unicode_Category_SO;
		case 0x33E8: return Unicode_Category_SO;
		case 0x33E9: return Unicode_Category_SO;
		case 0x33EA: return Unicode_Category_SO;
		case 0x33EB: return Unicode_Category_SO;
		case 0x33EC: return Unicode_Category_SO;
		case 0x33ED: return Unicode_Category_SO;
		case 0x33EE: return Unicode_Category_SO;
		case 0x33EF: return Unicode_Category_SO;
		case 0x33F0: return Unicode_Category_SO;
		case 0x33F1: return Unicode_Category_SO;
		case 0x33F2: return Unicode_Category_SO;
		case 0x33F3: return Unicode_Category_SO;
		case 0x33F4: return Unicode_Category_SO;
		case 0x33F5: return Unicode_Category_SO;
		case 0x33F6: return Unicode_Category_SO;
		case 0x33F7: return Unicode_Category_SO;
		case 0x33F8: return Unicode_Category_SO;
		case 0x33F9: return Unicode_Category_SO;
		case 0x33FA: return Unicode_Category_SO;
		case 0x33FB: return Unicode_Category_SO;
		case 0x33FC: return Unicode_Category_SO;
		case 0x33FD: return Unicode_Category_SO;
		case 0x33FE: return Unicode_Category_SO;
		case 0x33FF: return Unicode_Category_SO;
		case 0x3400: return Unicode_Category_LO;
		case 0x4DBF: return Unicode_Category_LO;
		case 0x4DC0: return Unicode_Category_SO;
		case 0x4DC1: return Unicode_Category_SO;
		case 0x4DC2: return Unicode_Category_SO;
		case 0x4DC3: return Unicode_Category_SO;
		case 0x4DC4: return Unicode_Category_SO;
		case 0x4DC5: return Unicode_Category_SO;
		case 0x4DC6: return Unicode_Category_SO;
		case 0x4DC7: return Unicode_Category_SO;
		case 0x4DC8: return Unicode_Category_SO;
		case 0x4DC9: return Unicode_Category_SO;
		case 0x4DCA: return Unicode_Category_SO;
		case 0x4DCB: return Unicode_Category_SO;
		case 0x4DCC: return Unicode_Category_SO;
		case 0x4DCD: return Unicode_Category_SO;
		case 0x4DCE: return Unicode_Category_SO;
		case 0x4DCF: return Unicode_Category_SO;
		case 0x4DD0: return Unicode_Category_SO;
		case 0x4DD1: return Unicode_Category_SO;
		case 0x4DD2: return Unicode_Category_SO;
		case 0x4DD3: return Unicode_Category_SO;
		case 0x4DD4: return Unicode_Category_SO;
		case 0x4DD5: return Unicode_Category_SO;
		case 0x4DD6: return Unicode_Category_SO;
		case 0x4DD7: return Unicode_Category_SO;
		case 0x4DD8: return Unicode_Category_SO;
		case 0x4DD9: return Unicode_Category_SO;
		case 0x4DDA: return Unicode_Category_SO;
		case 0x4DDB: return Unicode_Category_SO;
		case 0x4DDC: return Unicode_Category_SO;
		case 0x4DDD: return Unicode_Category_SO;
		case 0x4DDE: return Unicode_Category_SO;
		case 0x4DDF: return Unicode_Category_SO;
		case 0x4DE0: return Unicode_Category_SO;
		case 0x4DE1: return Unicode_Category_SO;
		case 0x4DE2: return Unicode_Category_SO;
		case 0x4DE3: return Unicode_Category_SO;
		case 0x4DE4: return Unicode_Category_SO;
		case 0x4DE5: return Unicode_Category_SO;
		case 0x4DE6: return Unicode_Category_SO;
		case 0x4DE7: return Unicode_Category_SO;
		case 0x4DE8: return Unicode_Category_SO;
		case 0x4DE9: return Unicode_Category_SO;
		case 0x4DEA: return Unicode_Category_SO;
		case 0x4DEB: return Unicode_Category_SO;
		case 0x4DEC: return Unicode_Category_SO;
		case 0x4DED: return Unicode_Category_SO;
		case 0x4DEE: return Unicode_Category_SO;
		case 0x4DEF: return Unicode_Category_SO;
		case 0x4DF0: return Unicode_Category_SO;
		case 0x4DF1: return Unicode_Category_SO;
		case 0x4DF2: return Unicode_Category_SO;
		case 0x4DF3: return Unicode_Category_SO;
		case 0x4DF4: return Unicode_Category_SO;
		case 0x4DF5: return Unicode_Category_SO;
		case 0x4DF6: return Unicode_Category_SO;
		case 0x4DF7: return Unicode_Category_SO;
		case 0x4DF8: return Unicode_Category_SO;
		case 0x4DF9: return Unicode_Category_SO;
		case 0x4DFA: return Unicode_Category_SO;
		case 0x4DFB: return Unicode_Category_SO;
		case 0x4DFC: return Unicode_Category_SO;
		case 0x4DFD: return Unicode_Category_SO;
		case 0x4DFE: return Unicode_Category_SO;
		case 0x4DFF: return Unicode_Category_SO;
		case 0x4E00: return Unicode_Category_LO;
		case 0x9FFC: return Unicode_Category_LO;
		case 0xA000: return Unicode_Category_LO;
		case 0xA001: return Unicode_Category_LO;
		case 0xA002: return Unicode_Category_LO;
		case 0xA003: return Unicode_Category_LO;
		case 0xA004: return Unicode_Category_LO;
		case 0xA005: return Unicode_Category_LO;
		case 0xA006: return Unicode_Category_LO;
		case 0xA007: return Unicode_Category_LO;
		case 0xA008: return Unicode_Category_LO;
		case 0xA009: return Unicode_Category_LO;
		case 0xA00A: return Unicode_Category_LO;
		case 0xA00B: return Unicode_Category_LO;
		case 0xA00C: return Unicode_Category_LO;
		case 0xA00D: return Unicode_Category_LO;
		case 0xA00E: return Unicode_Category_LO;
		case 0xA00F: return Unicode_Category_LO;
		case 0xA010: return Unicode_Category_LO;
		case 0xA011: return Unicode_Category_LO;
		case 0xA012: return Unicode_Category_LO;
		case 0xA013: return Unicode_Category_LO;
		case 0xA014: return Unicode_Category_LO;
		case 0xA015: return Unicode_Category_LM;
		case 0xA016: return Unicode_Category_LO;
		case 0xA017: return Unicode_Category_LO;
		case 0xA018: return Unicode_Category_LO;
		case 0xA019: return Unicode_Category_LO;
		case 0xA01A: return Unicode_Category_LO;
		case 0xA01B: return Unicode_Category_LO;
		case 0xA01C: return Unicode_Category_LO;
		case 0xA01D: return Unicode_Category_LO;
		case 0xA01E: return Unicode_Category_LO;
		case 0xA01F: return Unicode_Category_LO;
		case 0xA020: return Unicode_Category_LO;
		case 0xA021: return Unicode_Category_LO;
		case 0xA022: return Unicode_Category_LO;
		case 0xA023: return Unicode_Category_LO;
		case 0xA024: return Unicode_Category_LO;
		case 0xA025: return Unicode_Category_LO;
		case 0xA026: return Unicode_Category_LO;
		case 0xA027: return Unicode_Category_LO;
		case 0xA028: return Unicode_Category_LO;
		case 0xA029: return Unicode_Category_LO;
		case 0xA02A: return Unicode_Category_LO;
		case 0xA02B: return Unicode_Category_LO;
		case 0xA02C: return Unicode_Category_LO;
		case 0xA02D: return Unicode_Category_LO;
		case 0xA02E: return Unicode_Category_LO;
		case 0xA02F: return Unicode_Category_LO;
		case 0xA030: return Unicode_Category_LO;
		case 0xA031: return Unicode_Category_LO;
		case 0xA032: return Unicode_Category_LO;
		case 0xA033: return Unicode_Category_LO;
		case 0xA034: return Unicode_Category_LO;
		case 0xA035: return Unicode_Category_LO;
		case 0xA036: return Unicode_Category_LO;
		case 0xA037: return Unicode_Category_LO;
		case 0xA038: return Unicode_Category_LO;
		case 0xA039: return Unicode_Category_LO;
		case 0xA03A: return Unicode_Category_LO;
		case 0xA03B: return Unicode_Category_LO;
		case 0xA03C: return Unicode_Category_LO;
		case 0xA03D: return Unicode_Category_LO;
		case 0xA03E: return Unicode_Category_LO;
		case 0xA03F: return Unicode_Category_LO;
		case 0xA040: return Unicode_Category_LO;
		case 0xA041: return Unicode_Category_LO;
		case 0xA042: return Unicode_Category_LO;
		case 0xA043: return Unicode_Category_LO;
		case 0xA044: return Unicode_Category_LO;
		case 0xA045: return Unicode_Category_LO;
		case 0xA046: return Unicode_Category_LO;
		case 0xA047: return Unicode_Category_LO;
		case 0xA048: return Unicode_Category_LO;
		case 0xA049: return Unicode_Category_LO;
		case 0xA04A: return Unicode_Category_LO;
		case 0xA04B: return Unicode_Category_LO;
		case 0xA04C: return Unicode_Category_LO;
		case 0xA04D: return Unicode_Category_LO;
		case 0xA04E: return Unicode_Category_LO;
		case 0xA04F: return Unicode_Category_LO;
		case 0xA050: return Unicode_Category_LO;
		case 0xA051: return Unicode_Category_LO;
		case 0xA052: return Unicode_Category_LO;
		case 0xA053: return Unicode_Category_LO;
		case 0xA054: return Unicode_Category_LO;
		case 0xA055: return Unicode_Category_LO;
		case 0xA056: return Unicode_Category_LO;
		case 0xA057: return Unicode_Category_LO;
		case 0xA058: return Unicode_Category_LO;
		case 0xA059: return Unicode_Category_LO;
		case 0xA05A: return Unicode_Category_LO;
		case 0xA05B: return Unicode_Category_LO;
		case 0xA05C: return Unicode_Category_LO;
		case 0xA05D: return Unicode_Category_LO;
		case 0xA05E: return Unicode_Category_LO;
		case 0xA05F: return Unicode_Category_LO;
		case 0xA060: return Unicode_Category_LO;
		case 0xA061: return Unicode_Category_LO;
		case 0xA062: return Unicode_Category_LO;
		case 0xA063: return Unicode_Category_LO;
		case 0xA064: return Unicode_Category_LO;
		case 0xA065: return Unicode_Category_LO;
		case 0xA066: return Unicode_Category_LO;
		case 0xA067: return Unicode_Category_LO;
		case 0xA068: return Unicode_Category_LO;
		case 0xA069: return Unicode_Category_LO;
		case 0xA06A: return Unicode_Category_LO;
		case 0xA06B: return Unicode_Category_LO;
		case 0xA06C: return Unicode_Category_LO;
		case 0xA06D: return Unicode_Category_LO;
		case 0xA06E: return Unicode_Category_LO;
		case 0xA06F: return Unicode_Category_LO;
		case 0xA070: return Unicode_Category_LO;
		case 0xA071: return Unicode_Category_LO;
		case 0xA072: return Unicode_Category_LO;
		case 0xA073: return Unicode_Category_LO;
		case 0xA074: return Unicode_Category_LO;
		case 0xA075: return Unicode_Category_LO;
		case 0xA076: return Unicode_Category_LO;
		case 0xA077: return Unicode_Category_LO;
		case 0xA078: return Unicode_Category_LO;
		case 0xA079: return Unicode_Category_LO;
		case 0xA07A: return Unicode_Category_LO;
		case 0xA07B: return Unicode_Category_LO;
		case 0xA07C: return Unicode_Category_LO;
		case 0xA07D: return Unicode_Category_LO;
		case 0xA07E: return Unicode_Category_LO;
		case 0xA07F: return Unicode_Category_LO;
		case 0xA080: return Unicode_Category_LO;
		case 0xA081: return Unicode_Category_LO;
		case 0xA082: return Unicode_Category_LO;
		case 0xA083: return Unicode_Category_LO;
		case 0xA084: return Unicode_Category_LO;
		case 0xA085: return Unicode_Category_LO;
		case 0xA086: return Unicode_Category_LO;
		case 0xA087: return Unicode_Category_LO;
		case 0xA088: return Unicode_Category_LO;
		case 0xA089: return Unicode_Category_LO;
		case 0xA08A: return Unicode_Category_LO;
		case 0xA08B: return Unicode_Category_LO;
		case 0xA08C: return Unicode_Category_LO;
		case 0xA08D: return Unicode_Category_LO;
		case 0xA08E: return Unicode_Category_LO;
		case 0xA08F: return Unicode_Category_LO;
		case 0xA090: return Unicode_Category_LO;
		case 0xA091: return Unicode_Category_LO;
		case 0xA092: return Unicode_Category_LO;
		case 0xA093: return Unicode_Category_LO;
		case 0xA094: return Unicode_Category_LO;
		case 0xA095: return Unicode_Category_LO;
		case 0xA096: return Unicode_Category_LO;
		case 0xA097: return Unicode_Category_LO;
		case 0xA098: return Unicode_Category_LO;
		case 0xA099: return Unicode_Category_LO;
		case 0xA09A: return Unicode_Category_LO;
		case 0xA09B: return Unicode_Category_LO;
		case 0xA09C: return Unicode_Category_LO;
		case 0xA09D: return Unicode_Category_LO;
		case 0xA09E: return Unicode_Category_LO;
		case 0xA09F: return Unicode_Category_LO;
		case 0xA0A0: return Unicode_Category_LO;
		case 0xA0A1: return Unicode_Category_LO;
		case 0xA0A2: return Unicode_Category_LO;
		case 0xA0A3: return Unicode_Category_LO;
		case 0xA0A4: return Unicode_Category_LO;
		case 0xA0A5: return Unicode_Category_LO;
		case 0xA0A6: return Unicode_Category_LO;
		case 0xA0A7: return Unicode_Category_LO;
		case 0xA0A8: return Unicode_Category_LO;
		case 0xA0A9: return Unicode_Category_LO;
		case 0xA0AA: return Unicode_Category_LO;
		case 0xA0AB: return Unicode_Category_LO;
		case 0xA0AC: return Unicode_Category_LO;
		case 0xA0AD: return Unicode_Category_LO;
		case 0xA0AE: return Unicode_Category_LO;
		case 0xA0AF: return Unicode_Category_LO;
		case 0xA0B0: return Unicode_Category_LO;
		case 0xA0B1: return Unicode_Category_LO;
		case 0xA0B2: return Unicode_Category_LO;
		case 0xA0B3: return Unicode_Category_LO;
		case 0xA0B4: return Unicode_Category_LO;
		case 0xA0B5: return Unicode_Category_LO;
		case 0xA0B6: return Unicode_Category_LO;
		case 0xA0B7: return Unicode_Category_LO;
		case 0xA0B8: return Unicode_Category_LO;
		case 0xA0B9: return Unicode_Category_LO;
		case 0xA0BA: return Unicode_Category_LO;
		case 0xA0BB: return Unicode_Category_LO;
		case 0xA0BC: return Unicode_Category_LO;
		case 0xA0BD: return Unicode_Category_LO;
		case 0xA0BE: return Unicode_Category_LO;
		case 0xA0BF: return Unicode_Category_LO;
		case 0xA0C0: return Unicode_Category_LO;
		case 0xA0C1: return Unicode_Category_LO;
		case 0xA0C2: return Unicode_Category_LO;
		case 0xA0C3: return Unicode_Category_LO;
		case 0xA0C4: return Unicode_Category_LO;
		case 0xA0C5: return Unicode_Category_LO;
		case 0xA0C6: return Unicode_Category_LO;
		case 0xA0C7: return Unicode_Category_LO;
		case 0xA0C8: return Unicode_Category_LO;
		case 0xA0C9: return Unicode_Category_LO;
		case 0xA0CA: return Unicode_Category_LO;
		case 0xA0CB: return Unicode_Category_LO;
		case 0xA0CC: return Unicode_Category_LO;
		case 0xA0CD: return Unicode_Category_LO;
		case 0xA0CE: return Unicode_Category_LO;
		case 0xA0CF: return Unicode_Category_LO;
		case 0xA0D0: return Unicode_Category_LO;
		case 0xA0D1: return Unicode_Category_LO;
		case 0xA0D2: return Unicode_Category_LO;
		case 0xA0D3: return Unicode_Category_LO;
		case 0xA0D4: return Unicode_Category_LO;
		case 0xA0D5: return Unicode_Category_LO;
		case 0xA0D6: return Unicode_Category_LO;
		case 0xA0D7: return Unicode_Category_LO;
		case 0xA0D8: return Unicode_Category_LO;
		case 0xA0D9: return Unicode_Category_LO;
		case 0xA0DA: return Unicode_Category_LO;
		case 0xA0DB: return Unicode_Category_LO;
		case 0xA0DC: return Unicode_Category_LO;
		case 0xA0DD: return Unicode_Category_LO;
		case 0xA0DE: return Unicode_Category_LO;
		case 0xA0DF: return Unicode_Category_LO;
		case 0xA0E0: return Unicode_Category_LO;
		case 0xA0E1: return Unicode_Category_LO;
		case 0xA0E2: return Unicode_Category_LO;
		case 0xA0E3: return Unicode_Category_LO;
		case 0xA0E4: return Unicode_Category_LO;
		case 0xA0E5: return Unicode_Category_LO;
		case 0xA0E6: return Unicode_Category_LO;
		case 0xA0E7: return Unicode_Category_LO;
		case 0xA0E8: return Unicode_Category_LO;
		case 0xA0E9: return Unicode_Category_LO;
		case 0xA0EA: return Unicode_Category_LO;
		case 0xA0EB: return Unicode_Category_LO;
		case 0xA0EC: return Unicode_Category_LO;
		case 0xA0ED: return Unicode_Category_LO;
		case 0xA0EE: return Unicode_Category_LO;
		case 0xA0EF: return Unicode_Category_LO;
		case 0xA0F0: return Unicode_Category_LO;
		case 0xA0F1: return Unicode_Category_LO;
		case 0xA0F2: return Unicode_Category_LO;
		case 0xA0F3: return Unicode_Category_LO;
		case 0xA0F4: return Unicode_Category_LO;
		case 0xA0F5: return Unicode_Category_LO;
		case 0xA0F6: return Unicode_Category_LO;
		case 0xA0F7: return Unicode_Category_LO;
		case 0xA0F8: return Unicode_Category_LO;
		case 0xA0F9: return Unicode_Category_LO;
		case 0xA0FA: return Unicode_Category_LO;
		case 0xA0FB: return Unicode_Category_LO;
		case 0xA0FC: return Unicode_Category_LO;
		case 0xA0FD: return Unicode_Category_LO;
		case 0xA0FE: return Unicode_Category_LO;
		case 0xA0FF: return Unicode_Category_LO;
		case 0xA100: return Unicode_Category_LO;
		case 0xA101: return Unicode_Category_LO;
		case 0xA102: return Unicode_Category_LO;
		case 0xA103: return Unicode_Category_LO;
		case 0xA104: return Unicode_Category_LO;
		case 0xA105: return Unicode_Category_LO;
		case 0xA106: return Unicode_Category_LO;
		case 0xA107: return Unicode_Category_LO;
		case 0xA108: return Unicode_Category_LO;
		case 0xA109: return Unicode_Category_LO;
		case 0xA10A: return Unicode_Category_LO;
		case 0xA10B: return Unicode_Category_LO;
		case 0xA10C: return Unicode_Category_LO;
		case 0xA10D: return Unicode_Category_LO;
		case 0xA10E: return Unicode_Category_LO;
		case 0xA10F: return Unicode_Category_LO;
		case 0xA110: return Unicode_Category_LO;
		case 0xA111: return Unicode_Category_LO;
		case 0xA112: return Unicode_Category_LO;
		case 0xA113: return Unicode_Category_LO;
		case 0xA114: return Unicode_Category_LO;
		case 0xA115: return Unicode_Category_LO;
		case 0xA116: return Unicode_Category_LO;
		case 0xA117: return Unicode_Category_LO;
		case 0xA118: return Unicode_Category_LO;
		case 0xA119: return Unicode_Category_LO;
		case 0xA11A: return Unicode_Category_LO;
		case 0xA11B: return Unicode_Category_LO;
		case 0xA11C: return Unicode_Category_LO;
		case 0xA11D: return Unicode_Category_LO;
		case 0xA11E: return Unicode_Category_LO;
		case 0xA11F: return Unicode_Category_LO;
		case 0xA120: return Unicode_Category_LO;
		case 0xA121: return Unicode_Category_LO;
		case 0xA122: return Unicode_Category_LO;
		case 0xA123: return Unicode_Category_LO;
		case 0xA124: return Unicode_Category_LO;
		case 0xA125: return Unicode_Category_LO;
		case 0xA126: return Unicode_Category_LO;
		case 0xA127: return Unicode_Category_LO;
		case 0xA128: return Unicode_Category_LO;
		case 0xA129: return Unicode_Category_LO;
		case 0xA12A: return Unicode_Category_LO;
		case 0xA12B: return Unicode_Category_LO;
		case 0xA12C: return Unicode_Category_LO;
		case 0xA12D: return Unicode_Category_LO;
		case 0xA12E: return Unicode_Category_LO;
		case 0xA12F: return Unicode_Category_LO;
		case 0xA130: return Unicode_Category_LO;
		case 0xA131: return Unicode_Category_LO;
		case 0xA132: return Unicode_Category_LO;
		case 0xA133: return Unicode_Category_LO;
		case 0xA134: return Unicode_Category_LO;
		case 0xA135: return Unicode_Category_LO;
		case 0xA136: return Unicode_Category_LO;
		case 0xA137: return Unicode_Category_LO;
		case 0xA138: return Unicode_Category_LO;
		case 0xA139: return Unicode_Category_LO;
		case 0xA13A: return Unicode_Category_LO;
		case 0xA13B: return Unicode_Category_LO;
		case 0xA13C: return Unicode_Category_LO;
		case 0xA13D: return Unicode_Category_LO;
		case 0xA13E: return Unicode_Category_LO;
		case 0xA13F: return Unicode_Category_LO;
		case 0xA140: return Unicode_Category_LO;
		case 0xA141: return Unicode_Category_LO;
		case 0xA142: return Unicode_Category_LO;
		case 0xA143: return Unicode_Category_LO;
		case 0xA144: return Unicode_Category_LO;
		case 0xA145: return Unicode_Category_LO;
		case 0xA146: return Unicode_Category_LO;
		case 0xA147: return Unicode_Category_LO;
		case 0xA148: return Unicode_Category_LO;
		case 0xA149: return Unicode_Category_LO;
		case 0xA14A: return Unicode_Category_LO;
		case 0xA14B: return Unicode_Category_LO;
		case 0xA14C: return Unicode_Category_LO;
		case 0xA14D: return Unicode_Category_LO;
		case 0xA14E: return Unicode_Category_LO;
		case 0xA14F: return Unicode_Category_LO;
		case 0xA150: return Unicode_Category_LO;
		case 0xA151: return Unicode_Category_LO;
		case 0xA152: return Unicode_Category_LO;
		case 0xA153: return Unicode_Category_LO;
		case 0xA154: return Unicode_Category_LO;
		case 0xA155: return Unicode_Category_LO;
		case 0xA156: return Unicode_Category_LO;
		case 0xA157: return Unicode_Category_LO;
		case 0xA158: return Unicode_Category_LO;
		case 0xA159: return Unicode_Category_LO;
		case 0xA15A: return Unicode_Category_LO;
		case 0xA15B: return Unicode_Category_LO;
		case 0xA15C: return Unicode_Category_LO;
		case 0xA15D: return Unicode_Category_LO;
		case 0xA15E: return Unicode_Category_LO;
		case 0xA15F: return Unicode_Category_LO;
		case 0xA160: return Unicode_Category_LO;
		case 0xA161: return Unicode_Category_LO;
		case 0xA162: return Unicode_Category_LO;
		case 0xA163: return Unicode_Category_LO;
		case 0xA164: return Unicode_Category_LO;
		case 0xA165: return Unicode_Category_LO;
		case 0xA166: return Unicode_Category_LO;
		case 0xA167: return Unicode_Category_LO;
		case 0xA168: return Unicode_Category_LO;
		case 0xA169: return Unicode_Category_LO;
		case 0xA16A: return Unicode_Category_LO;
		case 0xA16B: return Unicode_Category_LO;
		case 0xA16C: return Unicode_Category_LO;
		case 0xA16D: return Unicode_Category_LO;
		case 0xA16E: return Unicode_Category_LO;
		case 0xA16F: return Unicode_Category_LO;
		case 0xA170: return Unicode_Category_LO;
		case 0xA171: return Unicode_Category_LO;
		case 0xA172: return Unicode_Category_LO;
		case 0xA173: return Unicode_Category_LO;
		case 0xA174: return Unicode_Category_LO;
		case 0xA175: return Unicode_Category_LO;
		case 0xA176: return Unicode_Category_LO;
		case 0xA177: return Unicode_Category_LO;
		case 0xA178: return Unicode_Category_LO;
		case 0xA179: return Unicode_Category_LO;
		case 0xA17A: return Unicode_Category_LO;
		case 0xA17B: return Unicode_Category_LO;
		case 0xA17C: return Unicode_Category_LO;
		case 0xA17D: return Unicode_Category_LO;
		case 0xA17E: return Unicode_Category_LO;
		case 0xA17F: return Unicode_Category_LO;
		case 0xA180: return Unicode_Category_LO;
		case 0xA181: return Unicode_Category_LO;
		case 0xA182: return Unicode_Category_LO;
		case 0xA183: return Unicode_Category_LO;
		case 0xA184: return Unicode_Category_LO;
		case 0xA185: return Unicode_Category_LO;
		case 0xA186: return Unicode_Category_LO;
		case 0xA187: return Unicode_Category_LO;
		case 0xA188: return Unicode_Category_LO;
		case 0xA189: return Unicode_Category_LO;
		case 0xA18A: return Unicode_Category_LO;
		case 0xA18B: return Unicode_Category_LO;
		case 0xA18C: return Unicode_Category_LO;
		case 0xA18D: return Unicode_Category_LO;
		case 0xA18E: return Unicode_Category_LO;
		case 0xA18F: return Unicode_Category_LO;
		case 0xA190: return Unicode_Category_LO;
		case 0xA191: return Unicode_Category_LO;
		case 0xA192: return Unicode_Category_LO;
		case 0xA193: return Unicode_Category_LO;
		case 0xA194: return Unicode_Category_LO;
		case 0xA195: return Unicode_Category_LO;
		case 0xA196: return Unicode_Category_LO;
		case 0xA197: return Unicode_Category_LO;
		case 0xA198: return Unicode_Category_LO;
		case 0xA199: return Unicode_Category_LO;
		case 0xA19A: return Unicode_Category_LO;
		case 0xA19B: return Unicode_Category_LO;
		case 0xA19C: return Unicode_Category_LO;
		case 0xA19D: return Unicode_Category_LO;
		case 0xA19E: return Unicode_Category_LO;
		case 0xA19F: return Unicode_Category_LO;
		case 0xA1A0: return Unicode_Category_LO;
		case 0xA1A1: return Unicode_Category_LO;
		case 0xA1A2: return Unicode_Category_LO;
		case 0xA1A3: return Unicode_Category_LO;
		case 0xA1A4: return Unicode_Category_LO;
		case 0xA1A5: return Unicode_Category_LO;
		case 0xA1A6: return Unicode_Category_LO;
		case 0xA1A7: return Unicode_Category_LO;
		case 0xA1A8: return Unicode_Category_LO;
		case 0xA1A9: return Unicode_Category_LO;
		case 0xA1AA: return Unicode_Category_LO;
		case 0xA1AB: return Unicode_Category_LO;
		case 0xA1AC: return Unicode_Category_LO;
		case 0xA1AD: return Unicode_Category_LO;
		case 0xA1AE: return Unicode_Category_LO;
		case 0xA1AF: return Unicode_Category_LO;
		case 0xA1B0: return Unicode_Category_LO;
		case 0xA1B1: return Unicode_Category_LO;
		case 0xA1B2: return Unicode_Category_LO;
		case 0xA1B3: return Unicode_Category_LO;
		case 0xA1B4: return Unicode_Category_LO;
		case 0xA1B5: return Unicode_Category_LO;
		case 0xA1B6: return Unicode_Category_LO;
		case 0xA1B7: return Unicode_Category_LO;
		case 0xA1B8: return Unicode_Category_LO;
		case 0xA1B9: return Unicode_Category_LO;
		case 0xA1BA: return Unicode_Category_LO;
		case 0xA1BB: return Unicode_Category_LO;
		case 0xA1BC: return Unicode_Category_LO;
		case 0xA1BD: return Unicode_Category_LO;
		case 0xA1BE: return Unicode_Category_LO;
		case 0xA1BF: return Unicode_Category_LO;
		case 0xA1C0: return Unicode_Category_LO;
		case 0xA1C1: return Unicode_Category_LO;
		case 0xA1C2: return Unicode_Category_LO;
		case 0xA1C3: return Unicode_Category_LO;
		case 0xA1C4: return Unicode_Category_LO;
		case 0xA1C5: return Unicode_Category_LO;
		case 0xA1C6: return Unicode_Category_LO;
		case 0xA1C7: return Unicode_Category_LO;
		case 0xA1C8: return Unicode_Category_LO;
		case 0xA1C9: return Unicode_Category_LO;
		case 0xA1CA: return Unicode_Category_LO;
		case 0xA1CB: return Unicode_Category_LO;
		case 0xA1CC: return Unicode_Category_LO;
		case 0xA1CD: return Unicode_Category_LO;
		case 0xA1CE: return Unicode_Category_LO;
		case 0xA1CF: return Unicode_Category_LO;
		case 0xA1D0: return Unicode_Category_LO;
		case 0xA1D1: return Unicode_Category_LO;
		case 0xA1D2: return Unicode_Category_LO;
		case 0xA1D3: return Unicode_Category_LO;
		case 0xA1D4: return Unicode_Category_LO;
		case 0xA1D5: return Unicode_Category_LO;
		case 0xA1D6: return Unicode_Category_LO;
		case 0xA1D7: return Unicode_Category_LO;
		case 0xA1D8: return Unicode_Category_LO;
		case 0xA1D9: return Unicode_Category_LO;
		case 0xA1DA: return Unicode_Category_LO;
		case 0xA1DB: return Unicode_Category_LO;
		case 0xA1DC: return Unicode_Category_LO;
		case 0xA1DD: return Unicode_Category_LO;
		case 0xA1DE: return Unicode_Category_LO;
		case 0xA1DF: return Unicode_Category_LO;
		case 0xA1E0: return Unicode_Category_LO;
		case 0xA1E1: return Unicode_Category_LO;
		case 0xA1E2: return Unicode_Category_LO;
		case 0xA1E3: return Unicode_Category_LO;
		case 0xA1E4: return Unicode_Category_LO;
		case 0xA1E5: return Unicode_Category_LO;
		case 0xA1E6: return Unicode_Category_LO;
		case 0xA1E7: return Unicode_Category_LO;
		case 0xA1E8: return Unicode_Category_LO;
		case 0xA1E9: return Unicode_Category_LO;
		case 0xA1EA: return Unicode_Category_LO;
		case 0xA1EB: return Unicode_Category_LO;
		case 0xA1EC: return Unicode_Category_LO;
		case 0xA1ED: return Unicode_Category_LO;
		case 0xA1EE: return Unicode_Category_LO;
		case 0xA1EF: return Unicode_Category_LO;
		case 0xA1F0: return Unicode_Category_LO;
		case 0xA1F1: return Unicode_Category_LO;
		case 0xA1F2: return Unicode_Category_LO;
		case 0xA1F3: return Unicode_Category_LO;
		case 0xA1F4: return Unicode_Category_LO;
		case 0xA1F5: return Unicode_Category_LO;
		case 0xA1F6: return Unicode_Category_LO;
		case 0xA1F7: return Unicode_Category_LO;
		case 0xA1F8: return Unicode_Category_LO;
		case 0xA1F9: return Unicode_Category_LO;
		case 0xA1FA: return Unicode_Category_LO;
		case 0xA1FB: return Unicode_Category_LO;
		case 0xA1FC: return Unicode_Category_LO;
		case 0xA1FD: return Unicode_Category_LO;
		case 0xA1FE: return Unicode_Category_LO;
		case 0xA1FF: return Unicode_Category_LO;
		case 0xA200: return Unicode_Category_LO;
		case 0xA201: return Unicode_Category_LO;
		case 0xA202: return Unicode_Category_LO;
		case 0xA203: return Unicode_Category_LO;
		case 0xA204: return Unicode_Category_LO;
		case 0xA205: return Unicode_Category_LO;
		case 0xA206: return Unicode_Category_LO;
		case 0xA207: return Unicode_Category_LO;
		case 0xA208: return Unicode_Category_LO;
		case 0xA209: return Unicode_Category_LO;
		case 0xA20A: return Unicode_Category_LO;
		case 0xA20B: return Unicode_Category_LO;
		case 0xA20C: return Unicode_Category_LO;
		case 0xA20D: return Unicode_Category_LO;
		case 0xA20E: return Unicode_Category_LO;
		case 0xA20F: return Unicode_Category_LO;
		case 0xA210: return Unicode_Category_LO;
		case 0xA211: return Unicode_Category_LO;
		case 0xA212: return Unicode_Category_LO;
		case 0xA213: return Unicode_Category_LO;
		case 0xA214: return Unicode_Category_LO;
		case 0xA215: return Unicode_Category_LO;
		case 0xA216: return Unicode_Category_LO;
		case 0xA217: return Unicode_Category_LO;
		case 0xA218: return Unicode_Category_LO;
		case 0xA219: return Unicode_Category_LO;
		case 0xA21A: return Unicode_Category_LO;
		case 0xA21B: return Unicode_Category_LO;
		case 0xA21C: return Unicode_Category_LO;
		case 0xA21D: return Unicode_Category_LO;
		case 0xA21E: return Unicode_Category_LO;
		case 0xA21F: return Unicode_Category_LO;
		case 0xA220: return Unicode_Category_LO;
		case 0xA221: return Unicode_Category_LO;
		case 0xA222: return Unicode_Category_LO;
		case 0xA223: return Unicode_Category_LO;
		case 0xA224: return Unicode_Category_LO;
		case 0xA225: return Unicode_Category_LO;
		case 0xA226: return Unicode_Category_LO;
		case 0xA227: return Unicode_Category_LO;
		case 0xA228: return Unicode_Category_LO;
		case 0xA229: return Unicode_Category_LO;
		case 0xA22A: return Unicode_Category_LO;
		case 0xA22B: return Unicode_Category_LO;
		case 0xA22C: return Unicode_Category_LO;
		case 0xA22D: return Unicode_Category_LO;
		case 0xA22E: return Unicode_Category_LO;
		case 0xA22F: return Unicode_Category_LO;
		case 0xA230: return Unicode_Category_LO;
		case 0xA231: return Unicode_Category_LO;
		case 0xA232: return Unicode_Category_LO;
		case 0xA233: return Unicode_Category_LO;
		case 0xA234: return Unicode_Category_LO;
		case 0xA235: return Unicode_Category_LO;
		case 0xA236: return Unicode_Category_LO;
		case 0xA237: return Unicode_Category_LO;
		case 0xA238: return Unicode_Category_LO;
		case 0xA239: return Unicode_Category_LO;
		case 0xA23A: return Unicode_Category_LO;
		case 0xA23B: return Unicode_Category_LO;
		case 0xA23C: return Unicode_Category_LO;
		case 0xA23D: return Unicode_Category_LO;
		case 0xA23E: return Unicode_Category_LO;
		case 0xA23F: return Unicode_Category_LO;
		case 0xA240: return Unicode_Category_LO;
		case 0xA241: return Unicode_Category_LO;
		case 0xA242: return Unicode_Category_LO;
		case 0xA243: return Unicode_Category_LO;
		case 0xA244: return Unicode_Category_LO;
		case 0xA245: return Unicode_Category_LO;
		case 0xA246: return Unicode_Category_LO;
		case 0xA247: return Unicode_Category_LO;
		case 0xA248: return Unicode_Category_LO;
		case 0xA249: return Unicode_Category_LO;
		case 0xA24A: return Unicode_Category_LO;
		case 0xA24B: return Unicode_Category_LO;
		case 0xA24C: return Unicode_Category_LO;
		case 0xA24D: return Unicode_Category_LO;
		case 0xA24E: return Unicode_Category_LO;
		case 0xA24F: return Unicode_Category_LO;
		case 0xA250: return Unicode_Category_LO;
		case 0xA251: return Unicode_Category_LO;
		case 0xA252: return Unicode_Category_LO;
		case 0xA253: return Unicode_Category_LO;
		case 0xA254: return Unicode_Category_LO;
		case 0xA255: return Unicode_Category_LO;
		case 0xA256: return Unicode_Category_LO;
		case 0xA257: return Unicode_Category_LO;
		case 0xA258: return Unicode_Category_LO;
		case 0xA259: return Unicode_Category_LO;
		case 0xA25A: return Unicode_Category_LO;
		case 0xA25B: return Unicode_Category_LO;
		case 0xA25C: return Unicode_Category_LO;
		case 0xA25D: return Unicode_Category_LO;
		case 0xA25E: return Unicode_Category_LO;
		case 0xA25F: return Unicode_Category_LO;
		case 0xA260: return Unicode_Category_LO;
		case 0xA261: return Unicode_Category_LO;
		case 0xA262: return Unicode_Category_LO;
		case 0xA263: return Unicode_Category_LO;
		case 0xA264: return Unicode_Category_LO;
		case 0xA265: return Unicode_Category_LO;
		case 0xA266: return Unicode_Category_LO;
		case 0xA267: return Unicode_Category_LO;
		case 0xA268: return Unicode_Category_LO;
		case 0xA269: return Unicode_Category_LO;
		case 0xA26A: return Unicode_Category_LO;
		case 0xA26B: return Unicode_Category_LO;
		case 0xA26C: return Unicode_Category_LO;
		case 0xA26D: return Unicode_Category_LO;
		case 0xA26E: return Unicode_Category_LO;
		case 0xA26F: return Unicode_Category_LO;
		case 0xA270: return Unicode_Category_LO;
		case 0xA271: return Unicode_Category_LO;
		case 0xA272: return Unicode_Category_LO;
		case 0xA273: return Unicode_Category_LO;
		case 0xA274: return Unicode_Category_LO;
		case 0xA275: return Unicode_Category_LO;
		case 0xA276: return Unicode_Category_LO;
		case 0xA277: return Unicode_Category_LO;
		case 0xA278: return Unicode_Category_LO;
		case 0xA279: return Unicode_Category_LO;
		case 0xA27A: return Unicode_Category_LO;
		case 0xA27B: return Unicode_Category_LO;
		case 0xA27C: return Unicode_Category_LO;
		case 0xA27D: return Unicode_Category_LO;
		case 0xA27E: return Unicode_Category_LO;
		case 0xA27F: return Unicode_Category_LO;
		case 0xA280: return Unicode_Category_LO;
		case 0xA281: return Unicode_Category_LO;
		case 0xA282: return Unicode_Category_LO;
		case 0xA283: return Unicode_Category_LO;
		case 0xA284: return Unicode_Category_LO;
		case 0xA285: return Unicode_Category_LO;
		case 0xA286: return Unicode_Category_LO;
		case 0xA287: return Unicode_Category_LO;
		case 0xA288: return Unicode_Category_LO;
		case 0xA289: return Unicode_Category_LO;
		case 0xA28A: return Unicode_Category_LO;
		case 0xA28B: return Unicode_Category_LO;
		case 0xA28C: return Unicode_Category_LO;
		case 0xA28D: return Unicode_Category_LO;
		case 0xA28E: return Unicode_Category_LO;
		case 0xA28F: return Unicode_Category_LO;
		case 0xA290: return Unicode_Category_LO;
		case 0xA291: return Unicode_Category_LO;
		case 0xA292: return Unicode_Category_LO;
		case 0xA293: return Unicode_Category_LO;
		case 0xA294: return Unicode_Category_LO;
		case 0xA295: return Unicode_Category_LO;
		case 0xA296: return Unicode_Category_LO;
		case 0xA297: return Unicode_Category_LO;
		case 0xA298: return Unicode_Category_LO;
		case 0xA299: return Unicode_Category_LO;
		case 0xA29A: return Unicode_Category_LO;
		case 0xA29B: return Unicode_Category_LO;
		case 0xA29C: return Unicode_Category_LO;
		case 0xA29D: return Unicode_Category_LO;
		case 0xA29E: return Unicode_Category_LO;
		case 0xA29F: return Unicode_Category_LO;
		case 0xA2A0: return Unicode_Category_LO;
		case 0xA2A1: return Unicode_Category_LO;
		case 0xA2A2: return Unicode_Category_LO;
		case 0xA2A3: return Unicode_Category_LO;
		case 0xA2A4: return Unicode_Category_LO;
		case 0xA2A5: return Unicode_Category_LO;
		case 0xA2A6: return Unicode_Category_LO;
		case 0xA2A7: return Unicode_Category_LO;
		case 0xA2A8: return Unicode_Category_LO;
		case 0xA2A9: return Unicode_Category_LO;
		case 0xA2AA: return Unicode_Category_LO;
		case 0xA2AB: return Unicode_Category_LO;
		case 0xA2AC: return Unicode_Category_LO;
		case 0xA2AD: return Unicode_Category_LO;
		case 0xA2AE: return Unicode_Category_LO;
		case 0xA2AF: return Unicode_Category_LO;
		case 0xA2B0: return Unicode_Category_LO;
		case 0xA2B1: return Unicode_Category_LO;
		case 0xA2B2: return Unicode_Category_LO;
		case 0xA2B3: return Unicode_Category_LO;
		case 0xA2B4: return Unicode_Category_LO;
		case 0xA2B5: return Unicode_Category_LO;
		case 0xA2B6: return Unicode_Category_LO;
		case 0xA2B7: return Unicode_Category_LO;
		case 0xA2B8: return Unicode_Category_LO;
		case 0xA2B9: return Unicode_Category_LO;
		case 0xA2BA: return Unicode_Category_LO;
		case 0xA2BB: return Unicode_Category_LO;
		case 0xA2BC: return Unicode_Category_LO;
		case 0xA2BD: return Unicode_Category_LO;
		case 0xA2BE: return Unicode_Category_LO;
		case 0xA2BF: return Unicode_Category_LO;
		case 0xA2C0: return Unicode_Category_LO;
		case 0xA2C1: return Unicode_Category_LO;
		case 0xA2C2: return Unicode_Category_LO;
		case 0xA2C3: return Unicode_Category_LO;
		case 0xA2C4: return Unicode_Category_LO;
		case 0xA2C5: return Unicode_Category_LO;
		case 0xA2C6: return Unicode_Category_LO;
		case 0xA2C7: return Unicode_Category_LO;
		case 0xA2C8: return Unicode_Category_LO;
		case 0xA2C9: return Unicode_Category_LO;
		case 0xA2CA: return Unicode_Category_LO;
		case 0xA2CB: return Unicode_Category_LO;
		case 0xA2CC: return Unicode_Category_LO;
		case 0xA2CD: return Unicode_Category_LO;
		case 0xA2CE: return Unicode_Category_LO;
		case 0xA2CF: return Unicode_Category_LO;
		case 0xA2D0: return Unicode_Category_LO;
		case 0xA2D1: return Unicode_Category_LO;
		case 0xA2D2: return Unicode_Category_LO;
		case 0xA2D3: return Unicode_Category_LO;
		case 0xA2D4: return Unicode_Category_LO;
		case 0xA2D5: return Unicode_Category_LO;
		case 0xA2D6: return Unicode_Category_LO;
		case 0xA2D7: return Unicode_Category_LO;
		case 0xA2D8: return Unicode_Category_LO;
		case 0xA2D9: return Unicode_Category_LO;
		case 0xA2DA: return Unicode_Category_LO;
		case 0xA2DB: return Unicode_Category_LO;
		case 0xA2DC: return Unicode_Category_LO;
		case 0xA2DD: return Unicode_Category_LO;
		case 0xA2DE: return Unicode_Category_LO;
		case 0xA2DF: return Unicode_Category_LO;
		case 0xA2E0: return Unicode_Category_LO;
		case 0xA2E1: return Unicode_Category_LO;
		case 0xA2E2: return Unicode_Category_LO;
		case 0xA2E3: return Unicode_Category_LO;
		case 0xA2E4: return Unicode_Category_LO;
		case 0xA2E5: return Unicode_Category_LO;
		case 0xA2E6: return Unicode_Category_LO;
		case 0xA2E7: return Unicode_Category_LO;
		case 0xA2E8: return Unicode_Category_LO;
		case 0xA2E9: return Unicode_Category_LO;
		case 0xA2EA: return Unicode_Category_LO;
		case 0xA2EB: return Unicode_Category_LO;
		case 0xA2EC: return Unicode_Category_LO;
		case 0xA2ED: return Unicode_Category_LO;
		case 0xA2EE: return Unicode_Category_LO;
		case 0xA2EF: return Unicode_Category_LO;
		case 0xA2F0: return Unicode_Category_LO;
		case 0xA2F1: return Unicode_Category_LO;
		case 0xA2F2: return Unicode_Category_LO;
		case 0xA2F3: return Unicode_Category_LO;
		case 0xA2F4: return Unicode_Category_LO;
		case 0xA2F5: return Unicode_Category_LO;
		case 0xA2F6: return Unicode_Category_LO;
		case 0xA2F7: return Unicode_Category_LO;
		case 0xA2F8: return Unicode_Category_LO;
		case 0xA2F9: return Unicode_Category_LO;
		case 0xA2FA: return Unicode_Category_LO;
		case 0xA2FB: return Unicode_Category_LO;
		case 0xA2FC: return Unicode_Category_LO;
		case 0xA2FD: return Unicode_Category_LO;
		case 0xA2FE: return Unicode_Category_LO;
		case 0xA2FF: return Unicode_Category_LO;
		case 0xA300: return Unicode_Category_LO;
		case 0xA301: return Unicode_Category_LO;
		case 0xA302: return Unicode_Category_LO;
		case 0xA303: return Unicode_Category_LO;
		case 0xA304: return Unicode_Category_LO;
		case 0xA305: return Unicode_Category_LO;
		case 0xA306: return Unicode_Category_LO;
		case 0xA307: return Unicode_Category_LO;
		case 0xA308: return Unicode_Category_LO;
		case 0xA309: return Unicode_Category_LO;
		case 0xA30A: return Unicode_Category_LO;
		case 0xA30B: return Unicode_Category_LO;
		case 0xA30C: return Unicode_Category_LO;
		case 0xA30D: return Unicode_Category_LO;
		case 0xA30E: return Unicode_Category_LO;
		case 0xA30F: return Unicode_Category_LO;
		case 0xA310: return Unicode_Category_LO;
		case 0xA311: return Unicode_Category_LO;
		case 0xA312: return Unicode_Category_LO;
		case 0xA313: return Unicode_Category_LO;
		case 0xA314: return Unicode_Category_LO;
		case 0xA315: return Unicode_Category_LO;
		case 0xA316: return Unicode_Category_LO;
		case 0xA317: return Unicode_Category_LO;
		case 0xA318: return Unicode_Category_LO;
		case 0xA319: return Unicode_Category_LO;
		case 0xA31A: return Unicode_Category_LO;
		case 0xA31B: return Unicode_Category_LO;
		case 0xA31C: return Unicode_Category_LO;
		case 0xA31D: return Unicode_Category_LO;
		case 0xA31E: return Unicode_Category_LO;
		case 0xA31F: return Unicode_Category_LO;
		case 0xA320: return Unicode_Category_LO;
		case 0xA321: return Unicode_Category_LO;
		case 0xA322: return Unicode_Category_LO;
		case 0xA323: return Unicode_Category_LO;
		case 0xA324: return Unicode_Category_LO;
		case 0xA325: return Unicode_Category_LO;
		case 0xA326: return Unicode_Category_LO;
		case 0xA327: return Unicode_Category_LO;
		case 0xA328: return Unicode_Category_LO;
		case 0xA329: return Unicode_Category_LO;
		case 0xA32A: return Unicode_Category_LO;
		case 0xA32B: return Unicode_Category_LO;
		case 0xA32C: return Unicode_Category_LO;
		case 0xA32D: return Unicode_Category_LO;
		case 0xA32E: return Unicode_Category_LO;
		case 0xA32F: return Unicode_Category_LO;
		case 0xA330: return Unicode_Category_LO;
		case 0xA331: return Unicode_Category_LO;
		case 0xA332: return Unicode_Category_LO;
		case 0xA333: return Unicode_Category_LO;
		case 0xA334: return Unicode_Category_LO;
		case 0xA335: return Unicode_Category_LO;
		case 0xA336: return Unicode_Category_LO;
		case 0xA337: return Unicode_Category_LO;
		case 0xA338: return Unicode_Category_LO;
		case 0xA339: return Unicode_Category_LO;
		case 0xA33A: return Unicode_Category_LO;
		case 0xA33B: return Unicode_Category_LO;
		case 0xA33C: return Unicode_Category_LO;
		case 0xA33D: return Unicode_Category_LO;
		case 0xA33E: return Unicode_Category_LO;
		case 0xA33F: return Unicode_Category_LO;
		case 0xA340: return Unicode_Category_LO;
		case 0xA341: return Unicode_Category_LO;
		case 0xA342: return Unicode_Category_LO;
		case 0xA343: return Unicode_Category_LO;
		case 0xA344: return Unicode_Category_LO;
		case 0xA345: return Unicode_Category_LO;
		case 0xA346: return Unicode_Category_LO;
		case 0xA347: return Unicode_Category_LO;
		case 0xA348: return Unicode_Category_LO;
		case 0xA349: return Unicode_Category_LO;
		case 0xA34A: return Unicode_Category_LO;
		case 0xA34B: return Unicode_Category_LO;
		case 0xA34C: return Unicode_Category_LO;
		case 0xA34D: return Unicode_Category_LO;
		case 0xA34E: return Unicode_Category_LO;
		case 0xA34F: return Unicode_Category_LO;
		case 0xA350: return Unicode_Category_LO;
		case 0xA351: return Unicode_Category_LO;
		case 0xA352: return Unicode_Category_LO;
		case 0xA353: return Unicode_Category_LO;
		case 0xA354: return Unicode_Category_LO;
		case 0xA355: return Unicode_Category_LO;
		case 0xA356: return Unicode_Category_LO;
		case 0xA357: return Unicode_Category_LO;
		case 0xA358: return Unicode_Category_LO;
		case 0xA359: return Unicode_Category_LO;
		case 0xA35A: return Unicode_Category_LO;
		case 0xA35B: return Unicode_Category_LO;
		case 0xA35C: return Unicode_Category_LO;
		case 0xA35D: return Unicode_Category_LO;
		case 0xA35E: return Unicode_Category_LO;
		case 0xA35F: return Unicode_Category_LO;
		case 0xA360: return Unicode_Category_LO;
		case 0xA361: return Unicode_Category_LO;
		case 0xA362: return Unicode_Category_LO;
		case 0xA363: return Unicode_Category_LO;
		case 0xA364: return Unicode_Category_LO;
		case 0xA365: return Unicode_Category_LO;
		case 0xA366: return Unicode_Category_LO;
		case 0xA367: return Unicode_Category_LO;
		case 0xA368: return Unicode_Category_LO;
		case 0xA369: return Unicode_Category_LO;
		case 0xA36A: return Unicode_Category_LO;
		case 0xA36B: return Unicode_Category_LO;
		case 0xA36C: return Unicode_Category_LO;
		case 0xA36D: return Unicode_Category_LO;
		case 0xA36E: return Unicode_Category_LO;
		case 0xA36F: return Unicode_Category_LO;
		case 0xA370: return Unicode_Category_LO;
		case 0xA371: return Unicode_Category_LO;
		case 0xA372: return Unicode_Category_LO;
		case 0xA373: return Unicode_Category_LO;
		case 0xA374: return Unicode_Category_LO;
		case 0xA375: return Unicode_Category_LO;
		case 0xA376: return Unicode_Category_LO;
		case 0xA377: return Unicode_Category_LO;
		case 0xA378: return Unicode_Category_LO;
		case 0xA379: return Unicode_Category_LO;
		case 0xA37A: return Unicode_Category_LO;
		case 0xA37B: return Unicode_Category_LO;
		case 0xA37C: return Unicode_Category_LO;
		case 0xA37D: return Unicode_Category_LO;
		case 0xA37E: return Unicode_Category_LO;
		case 0xA37F: return Unicode_Category_LO;
		case 0xA380: return Unicode_Category_LO;
		case 0xA381: return Unicode_Category_LO;
		case 0xA382: return Unicode_Category_LO;
		case 0xA383: return Unicode_Category_LO;
		case 0xA384: return Unicode_Category_LO;
		case 0xA385: return Unicode_Category_LO;
		case 0xA386: return Unicode_Category_LO;
		case 0xA387: return Unicode_Category_LO;
		case 0xA388: return Unicode_Category_LO;
		case 0xA389: return Unicode_Category_LO;
		case 0xA38A: return Unicode_Category_LO;
		case 0xA38B: return Unicode_Category_LO;
		case 0xA38C: return Unicode_Category_LO;
		case 0xA38D: return Unicode_Category_LO;
		case 0xA38E: return Unicode_Category_LO;
		case 0xA38F: return Unicode_Category_LO;
		case 0xA390: return Unicode_Category_LO;
		case 0xA391: return Unicode_Category_LO;
		case 0xA392: return Unicode_Category_LO;
		case 0xA393: return Unicode_Category_LO;
		case 0xA394: return Unicode_Category_LO;
		case 0xA395: return Unicode_Category_LO;
		case 0xA396: return Unicode_Category_LO;
		case 0xA397: return Unicode_Category_LO;
		case 0xA398: return Unicode_Category_LO;
		case 0xA399: return Unicode_Category_LO;
		case 0xA39A: return Unicode_Category_LO;
		case 0xA39B: return Unicode_Category_LO;
		case 0xA39C: return Unicode_Category_LO;
		case 0xA39D: return Unicode_Category_LO;
		case 0xA39E: return Unicode_Category_LO;
		case 0xA39F: return Unicode_Category_LO;
		case 0xA3A0: return Unicode_Category_LO;
		case 0xA3A1: return Unicode_Category_LO;
		case 0xA3A2: return Unicode_Category_LO;
		case 0xA3A3: return Unicode_Category_LO;
		case 0xA3A4: return Unicode_Category_LO;
		case 0xA3A5: return Unicode_Category_LO;
		case 0xA3A6: return Unicode_Category_LO;
		case 0xA3A7: return Unicode_Category_LO;
		case 0xA3A8: return Unicode_Category_LO;
		case 0xA3A9: return Unicode_Category_LO;
		case 0xA3AA: return Unicode_Category_LO;
		case 0xA3AB: return Unicode_Category_LO;
		case 0xA3AC: return Unicode_Category_LO;
		case 0xA3AD: return Unicode_Category_LO;
		case 0xA3AE: return Unicode_Category_LO;
		case 0xA3AF: return Unicode_Category_LO;
		case 0xA3B0: return Unicode_Category_LO;
		case 0xA3B1: return Unicode_Category_LO;
		case 0xA3B2: return Unicode_Category_LO;
		case 0xA3B3: return Unicode_Category_LO;
		case 0xA3B4: return Unicode_Category_LO;
		case 0xA3B5: return Unicode_Category_LO;
		case 0xA3B6: return Unicode_Category_LO;
		case 0xA3B7: return Unicode_Category_LO;
		case 0xA3B8: return Unicode_Category_LO;
		case 0xA3B9: return Unicode_Category_LO;
		case 0xA3BA: return Unicode_Category_LO;
		case 0xA3BB: return Unicode_Category_LO;
		case 0xA3BC: return Unicode_Category_LO;
		case 0xA3BD: return Unicode_Category_LO;
		case 0xA3BE: return Unicode_Category_LO;
		case 0xA3BF: return Unicode_Category_LO;
		case 0xA3C0: return Unicode_Category_LO;
		case 0xA3C1: return Unicode_Category_LO;
		case 0xA3C2: return Unicode_Category_LO;
		case 0xA3C3: return Unicode_Category_LO;
		case 0xA3C4: return Unicode_Category_LO;
		case 0xA3C5: return Unicode_Category_LO;
		case 0xA3C6: return Unicode_Category_LO;
		case 0xA3C7: return Unicode_Category_LO;
		case 0xA3C8: return Unicode_Category_LO;
		case 0xA3C9: return Unicode_Category_LO;
		case 0xA3CA: return Unicode_Category_LO;
		case 0xA3CB: return Unicode_Category_LO;
		case 0xA3CC: return Unicode_Category_LO;
		case 0xA3CD: return Unicode_Category_LO;
		case 0xA3CE: return Unicode_Category_LO;
		case 0xA3CF: return Unicode_Category_LO;
		case 0xA3D0: return Unicode_Category_LO;
		case 0xA3D1: return Unicode_Category_LO;
		case 0xA3D2: return Unicode_Category_LO;
		case 0xA3D3: return Unicode_Category_LO;
		case 0xA3D4: return Unicode_Category_LO;
		case 0xA3D5: return Unicode_Category_LO;
		case 0xA3D6: return Unicode_Category_LO;
		case 0xA3D7: return Unicode_Category_LO;
		case 0xA3D8: return Unicode_Category_LO;
		case 0xA3D9: return Unicode_Category_LO;
		case 0xA3DA: return Unicode_Category_LO;
		case 0xA3DB: return Unicode_Category_LO;
		case 0xA3DC: return Unicode_Category_LO;
		case 0xA3DD: return Unicode_Category_LO;
		case 0xA3DE: return Unicode_Category_LO;
		case 0xA3DF: return Unicode_Category_LO;
		case 0xA3E0: return Unicode_Category_LO;
		case 0xA3E1: return Unicode_Category_LO;
		case 0xA3E2: return Unicode_Category_LO;
		case 0xA3E3: return Unicode_Category_LO;
		case 0xA3E4: return Unicode_Category_LO;
		case 0xA3E5: return Unicode_Category_LO;
		case 0xA3E6: return Unicode_Category_LO;
		case 0xA3E7: return Unicode_Category_LO;
		case 0xA3E8: return Unicode_Category_LO;
		case 0xA3E9: return Unicode_Category_LO;
		case 0xA3EA: return Unicode_Category_LO;
		case 0xA3EB: return Unicode_Category_LO;
		case 0xA3EC: return Unicode_Category_LO;
		case 0xA3ED: return Unicode_Category_LO;
		case 0xA3EE: return Unicode_Category_LO;
		case 0xA3EF: return Unicode_Category_LO;
		case 0xA3F0: return Unicode_Category_LO;
		case 0xA3F1: return Unicode_Category_LO;
		case 0xA3F2: return Unicode_Category_LO;
		case 0xA3F3: return Unicode_Category_LO;
		case 0xA3F4: return Unicode_Category_LO;
		case 0xA3F5: return Unicode_Category_LO;
		case 0xA3F6: return Unicode_Category_LO;
		case 0xA3F7: return Unicode_Category_LO;
		case 0xA3F8: return Unicode_Category_LO;
		case 0xA3F9: return Unicode_Category_LO;
		case 0xA3FA: return Unicode_Category_LO;
		case 0xA3FB: return Unicode_Category_LO;
		case 0xA3FC: return Unicode_Category_LO;
		case 0xA3FD: return Unicode_Category_LO;
		case 0xA3FE: return Unicode_Category_LO;
		case 0xA3FF: return Unicode_Category_LO;
		case 0xA400: return Unicode_Category_LO;
		case 0xA401: return Unicode_Category_LO;
		case 0xA402: return Unicode_Category_LO;
		case 0xA403: return Unicode_Category_LO;
		case 0xA404: return Unicode_Category_LO;
		case 0xA405: return Unicode_Category_LO;
		case 0xA406: return Unicode_Category_LO;
		case 0xA407: return Unicode_Category_LO;
		case 0xA408: return Unicode_Category_LO;
		case 0xA409: return Unicode_Category_LO;
		case 0xA40A: return Unicode_Category_LO;
		case 0xA40B: return Unicode_Category_LO;
		case 0xA40C: return Unicode_Category_LO;
		case 0xA40D: return Unicode_Category_LO;
		case 0xA40E: return Unicode_Category_LO;
		case 0xA40F: return Unicode_Category_LO;
		case 0xA410: return Unicode_Category_LO;
		case 0xA411: return Unicode_Category_LO;
		case 0xA412: return Unicode_Category_LO;
		case 0xA413: return Unicode_Category_LO;
		case 0xA414: return Unicode_Category_LO;
		case 0xA415: return Unicode_Category_LO;
		case 0xA416: return Unicode_Category_LO;
		case 0xA417: return Unicode_Category_LO;
		case 0xA418: return Unicode_Category_LO;
		case 0xA419: return Unicode_Category_LO;
		case 0xA41A: return Unicode_Category_LO;
		case 0xA41B: return Unicode_Category_LO;
		case 0xA41C: return Unicode_Category_LO;
		case 0xA41D: return Unicode_Category_LO;
		case 0xA41E: return Unicode_Category_LO;
		case 0xA41F: return Unicode_Category_LO;
		case 0xA420: return Unicode_Category_LO;
		case 0xA421: return Unicode_Category_LO;
		case 0xA422: return Unicode_Category_LO;
		case 0xA423: return Unicode_Category_LO;
		case 0xA424: return Unicode_Category_LO;
		case 0xA425: return Unicode_Category_LO;
		case 0xA426: return Unicode_Category_LO;
		case 0xA427: return Unicode_Category_LO;
		case 0xA428: return Unicode_Category_LO;
		case 0xA429: return Unicode_Category_LO;
		case 0xA42A: return Unicode_Category_LO;
		case 0xA42B: return Unicode_Category_LO;
		case 0xA42C: return Unicode_Category_LO;
		case 0xA42D: return Unicode_Category_LO;
		case 0xA42E: return Unicode_Category_LO;
		case 0xA42F: return Unicode_Category_LO;
		case 0xA430: return Unicode_Category_LO;
		case 0xA431: return Unicode_Category_LO;
		case 0xA432: return Unicode_Category_LO;
		case 0xA433: return Unicode_Category_LO;
		case 0xA434: return Unicode_Category_LO;
		case 0xA435: return Unicode_Category_LO;
		case 0xA436: return Unicode_Category_LO;
		case 0xA437: return Unicode_Category_LO;
		case 0xA438: return Unicode_Category_LO;
		case 0xA439: return Unicode_Category_LO;
		case 0xA43A: return Unicode_Category_LO;
		case 0xA43B: return Unicode_Category_LO;
		case 0xA43C: return Unicode_Category_LO;
		case 0xA43D: return Unicode_Category_LO;
		case 0xA43E: return Unicode_Category_LO;
		case 0xA43F: return Unicode_Category_LO;
		case 0xA440: return Unicode_Category_LO;
		case 0xA441: return Unicode_Category_LO;
		case 0xA442: return Unicode_Category_LO;
		case 0xA443: return Unicode_Category_LO;
		case 0xA444: return Unicode_Category_LO;
		case 0xA445: return Unicode_Category_LO;
		case 0xA446: return Unicode_Category_LO;
		case 0xA447: return Unicode_Category_LO;
		case 0xA448: return Unicode_Category_LO;
		case 0xA449: return Unicode_Category_LO;
		case 0xA44A: return Unicode_Category_LO;
		case 0xA44B: return Unicode_Category_LO;
		case 0xA44C: return Unicode_Category_LO;
		case 0xA44D: return Unicode_Category_LO;
		case 0xA44E: return Unicode_Category_LO;
		case 0xA44F: return Unicode_Category_LO;
		case 0xA450: return Unicode_Category_LO;
		case 0xA451: return Unicode_Category_LO;
		case 0xA452: return Unicode_Category_LO;
		case 0xA453: return Unicode_Category_LO;
		case 0xA454: return Unicode_Category_LO;
		case 0xA455: return Unicode_Category_LO;
		case 0xA456: return Unicode_Category_LO;
		case 0xA457: return Unicode_Category_LO;
		case 0xA458: return Unicode_Category_LO;
		case 0xA459: return Unicode_Category_LO;
		case 0xA45A: return Unicode_Category_LO;
		case 0xA45B: return Unicode_Category_LO;
		case 0xA45C: return Unicode_Category_LO;
		case 0xA45D: return Unicode_Category_LO;
		case 0xA45E: return Unicode_Category_LO;
		case 0xA45F: return Unicode_Category_LO;
		case 0xA460: return Unicode_Category_LO;
		case 0xA461: return Unicode_Category_LO;
		case 0xA462: return Unicode_Category_LO;
		case 0xA463: return Unicode_Category_LO;
		case 0xA464: return Unicode_Category_LO;
		case 0xA465: return Unicode_Category_LO;
		case 0xA466: return Unicode_Category_LO;
		case 0xA467: return Unicode_Category_LO;
		case 0xA468: return Unicode_Category_LO;
		case 0xA469: return Unicode_Category_LO;
		case 0xA46A: return Unicode_Category_LO;
		case 0xA46B: return Unicode_Category_LO;
		case 0xA46C: return Unicode_Category_LO;
		case 0xA46D: return Unicode_Category_LO;
		case 0xA46E: return Unicode_Category_LO;
		case 0xA46F: return Unicode_Category_LO;
		case 0xA470: return Unicode_Category_LO;
		case 0xA471: return Unicode_Category_LO;
		case 0xA472: return Unicode_Category_LO;
		case 0xA473: return Unicode_Category_LO;
		case 0xA474: return Unicode_Category_LO;
		case 0xA475: return Unicode_Category_LO;
		case 0xA476: return Unicode_Category_LO;
		case 0xA477: return Unicode_Category_LO;
		case 0xA478: return Unicode_Category_LO;
		case 0xA479: return Unicode_Category_LO;
		case 0xA47A: return Unicode_Category_LO;
		case 0xA47B: return Unicode_Category_LO;
		case 0xA47C: return Unicode_Category_LO;
		case 0xA47D: return Unicode_Category_LO;
		case 0xA47E: return Unicode_Category_LO;
		case 0xA47F: return Unicode_Category_LO;
		case 0xA480: return Unicode_Category_LO;
		case 0xA481: return Unicode_Category_LO;
		case 0xA482: return Unicode_Category_LO;
		case 0xA483: return Unicode_Category_LO;
		case 0xA484: return Unicode_Category_LO;
		case 0xA485: return Unicode_Category_LO;
		case 0xA486: return Unicode_Category_LO;
		case 0xA487: return Unicode_Category_LO;
		case 0xA488: return Unicode_Category_LO;
		case 0xA489: return Unicode_Category_LO;
		case 0xA48A: return Unicode_Category_LO;
		case 0xA48B: return Unicode_Category_LO;
		case 0xA48C: return Unicode_Category_LO;
		case 0xA490: return Unicode_Category_SO;
		case 0xA491: return Unicode_Category_SO;
		case 0xA492: return Unicode_Category_SO;
		case 0xA493: return Unicode_Category_SO;
		case 0xA494: return Unicode_Category_SO;
		case 0xA495: return Unicode_Category_SO;
		case 0xA496: return Unicode_Category_SO;
		case 0xA497: return Unicode_Category_SO;
		case 0xA498: return Unicode_Category_SO;
		case 0xA499: return Unicode_Category_SO;
		case 0xA49A: return Unicode_Category_SO;
		case 0xA49B: return Unicode_Category_SO;
		case 0xA49C: return Unicode_Category_SO;
		case 0xA49D: return Unicode_Category_SO;
		case 0xA49E: return Unicode_Category_SO;
		case 0xA49F: return Unicode_Category_SO;
		case 0xA4A0: return Unicode_Category_SO;
		case 0xA4A1: return Unicode_Category_SO;
		case 0xA4A2: return Unicode_Category_SO;
		case 0xA4A3: return Unicode_Category_SO;
		case 0xA4A4: return Unicode_Category_SO;
		case 0xA4A5: return Unicode_Category_SO;
		case 0xA4A6: return Unicode_Category_SO;
		case 0xA4A7: return Unicode_Category_SO;
		case 0xA4A8: return Unicode_Category_SO;
		case 0xA4A9: return Unicode_Category_SO;
		case 0xA4AA: return Unicode_Category_SO;
		case 0xA4AB: return Unicode_Category_SO;
		case 0xA4AC: return Unicode_Category_SO;
		case 0xA4AD: return Unicode_Category_SO;
		case 0xA4AE: return Unicode_Category_SO;
		case 0xA4AF: return Unicode_Category_SO;
		case 0xA4B0: return Unicode_Category_SO;
		case 0xA4B1: return Unicode_Category_SO;
		case 0xA4B2: return Unicode_Category_SO;
		case 0xA4B3: return Unicode_Category_SO;
		case 0xA4B4: return Unicode_Category_SO;
		case 0xA4B5: return Unicode_Category_SO;
		case 0xA4B6: return Unicode_Category_SO;
		case 0xA4B7: return Unicode_Category_SO;
		case 0xA4B8: return Unicode_Category_SO;
		case 0xA4B9: return Unicode_Category_SO;
		case 0xA4BA: return Unicode_Category_SO;
		case 0xA4BB: return Unicode_Category_SO;
		case 0xA4BC: return Unicode_Category_SO;
		case 0xA4BD: return Unicode_Category_SO;
		case 0xA4BE: return Unicode_Category_SO;
		case 0xA4BF: return Unicode_Category_SO;
		case 0xA4C0: return Unicode_Category_SO;
		case 0xA4C1: return Unicode_Category_SO;
		case 0xA4C2: return Unicode_Category_SO;
		case 0xA4C3: return Unicode_Category_SO;
		case 0xA4C4: return Unicode_Category_SO;
		case 0xA4C5: return Unicode_Category_SO;
		case 0xA4C6: return Unicode_Category_SO;
		case 0xA4D0: return Unicode_Category_LO;
		case 0xA4D1: return Unicode_Category_LO;
		case 0xA4D2: return Unicode_Category_LO;
		case 0xA4D3: return Unicode_Category_LO;
		case 0xA4D4: return Unicode_Category_LO;
		case 0xA4D5: return Unicode_Category_LO;
		case 0xA4D6: return Unicode_Category_LO;
		case 0xA4D7: return Unicode_Category_LO;
		case 0xA4D8: return Unicode_Category_LO;
		case 0xA4D9: return Unicode_Category_LO;
		case 0xA4DA: return Unicode_Category_LO;
		case 0xA4DB: return Unicode_Category_LO;
		case 0xA4DC: return Unicode_Category_LO;
		case 0xA4DD: return Unicode_Category_LO;
		case 0xA4DE: return Unicode_Category_LO;
		case 0xA4DF: return Unicode_Category_LO;
		case 0xA4E0: return Unicode_Category_LO;
		case 0xA4E1: return Unicode_Category_LO;
		case 0xA4E2: return Unicode_Category_LO;
		case 0xA4E3: return Unicode_Category_LO;
		case 0xA4E4: return Unicode_Category_LO;
		case 0xA4E5: return Unicode_Category_LO;
		case 0xA4E6: return Unicode_Category_LO;
		case 0xA4E7: return Unicode_Category_LO;
		case 0xA4E8: return Unicode_Category_LO;
		case 0xA4E9: return Unicode_Category_LO;
		case 0xA4EA: return Unicode_Category_LO;
		case 0xA4EB: return Unicode_Category_LO;
		case 0xA4EC: return Unicode_Category_LO;
		case 0xA4ED: return Unicode_Category_LO;
		case 0xA4EE: return Unicode_Category_LO;
		case 0xA4EF: return Unicode_Category_LO;
		case 0xA4F0: return Unicode_Category_LO;
		case 0xA4F1: return Unicode_Category_LO;
		case 0xA4F2: return Unicode_Category_LO;
		case 0xA4F3: return Unicode_Category_LO;
		case 0xA4F4: return Unicode_Category_LO;
		case 0xA4F5: return Unicode_Category_LO;
		case 0xA4F6: return Unicode_Category_LO;
		case 0xA4F7: return Unicode_Category_LO;
		case 0xA4F8: return Unicode_Category_LM;
		case 0xA4F9: return Unicode_Category_LM;
		case 0xA4FA: return Unicode_Category_LM;
		case 0xA4FB: return Unicode_Category_LM;
		case 0xA4FC: return Unicode_Category_LM;
		case 0xA4FD: return Unicode_Category_LM;
		case 0xA4FE: return Unicode_Category_PO;
		case 0xA4FF: return Unicode_Category_PO;
		case 0xA500: return Unicode_Category_LO;
		case 0xA501: return Unicode_Category_LO;
		case 0xA502: return Unicode_Category_LO;
		case 0xA503: return Unicode_Category_LO;
		case 0xA504: return Unicode_Category_LO;
		case 0xA505: return Unicode_Category_LO;
		case 0xA506: return Unicode_Category_LO;
		case 0xA507: return Unicode_Category_LO;
		case 0xA508: return Unicode_Category_LO;
		case 0xA509: return Unicode_Category_LO;
		case 0xA50A: return Unicode_Category_LO;
		case 0xA50B: return Unicode_Category_LO;
		case 0xA50C: return Unicode_Category_LO;
		case 0xA50D: return Unicode_Category_LO;
		case 0xA50E: return Unicode_Category_LO;
		case 0xA50F: return Unicode_Category_LO;
		case 0xA510: return Unicode_Category_LO;
		case 0xA511: return Unicode_Category_LO;
		case 0xA512: return Unicode_Category_LO;
		case 0xA513: return Unicode_Category_LO;
		case 0xA514: return Unicode_Category_LO;
		case 0xA515: return Unicode_Category_LO;
		case 0xA516: return Unicode_Category_LO;
		case 0xA517: return Unicode_Category_LO;
		case 0xA518: return Unicode_Category_LO;
		case 0xA519: return Unicode_Category_LO;
		case 0xA51A: return Unicode_Category_LO;
		case 0xA51B: return Unicode_Category_LO;
		case 0xA51C: return Unicode_Category_LO;
		case 0xA51D: return Unicode_Category_LO;
		case 0xA51E: return Unicode_Category_LO;
		case 0xA51F: return Unicode_Category_LO;
		case 0xA520: return Unicode_Category_LO;
		case 0xA521: return Unicode_Category_LO;
		case 0xA522: return Unicode_Category_LO;
		case 0xA523: return Unicode_Category_LO;
		case 0xA524: return Unicode_Category_LO;
		case 0xA525: return Unicode_Category_LO;
		case 0xA526: return Unicode_Category_LO;
		case 0xA527: return Unicode_Category_LO;
		case 0xA528: return Unicode_Category_LO;
		case 0xA529: return Unicode_Category_LO;
		case 0xA52A: return Unicode_Category_LO;
		case 0xA52B: return Unicode_Category_LO;
		case 0xA52C: return Unicode_Category_LO;
		case 0xA52D: return Unicode_Category_LO;
		case 0xA52E: return Unicode_Category_LO;
		case 0xA52F: return Unicode_Category_LO;
		case 0xA530: return Unicode_Category_LO;
		case 0xA531: return Unicode_Category_LO;
		case 0xA532: return Unicode_Category_LO;
		case 0xA533: return Unicode_Category_LO;
		case 0xA534: return Unicode_Category_LO;
		case 0xA535: return Unicode_Category_LO;
		case 0xA536: return Unicode_Category_LO;
		case 0xA537: return Unicode_Category_LO;
		case 0xA538: return Unicode_Category_LO;
		case 0xA539: return Unicode_Category_LO;
		case 0xA53A: return Unicode_Category_LO;
		case 0xA53B: return Unicode_Category_LO;
		case 0xA53C: return Unicode_Category_LO;
		case 0xA53D: return Unicode_Category_LO;
		case 0xA53E: return Unicode_Category_LO;
		case 0xA53F: return Unicode_Category_LO;
		case 0xA540: return Unicode_Category_LO;
		case 0xA541: return Unicode_Category_LO;
		case 0xA542: return Unicode_Category_LO;
		case 0xA543: return Unicode_Category_LO;
		case 0xA544: return Unicode_Category_LO;
		case 0xA545: return Unicode_Category_LO;
		case 0xA546: return Unicode_Category_LO;
		case 0xA547: return Unicode_Category_LO;
		case 0xA548: return Unicode_Category_LO;
		case 0xA549: return Unicode_Category_LO;
		case 0xA54A: return Unicode_Category_LO;
		case 0xA54B: return Unicode_Category_LO;
		case 0xA54C: return Unicode_Category_LO;
		case 0xA54D: return Unicode_Category_LO;
		case 0xA54E: return Unicode_Category_LO;
		case 0xA54F: return Unicode_Category_LO;
		case 0xA550: return Unicode_Category_LO;
		case 0xA551: return Unicode_Category_LO;
		case 0xA552: return Unicode_Category_LO;
		case 0xA553: return Unicode_Category_LO;
		case 0xA554: return Unicode_Category_LO;
		case 0xA555: return Unicode_Category_LO;
		case 0xA556: return Unicode_Category_LO;
		case 0xA557: return Unicode_Category_LO;
		case 0xA558: return Unicode_Category_LO;
		case 0xA559: return Unicode_Category_LO;
		case 0xA55A: return Unicode_Category_LO;
		case 0xA55B: return Unicode_Category_LO;
		case 0xA55C: return Unicode_Category_LO;
		case 0xA55D: return Unicode_Category_LO;
		case 0xA55E: return Unicode_Category_LO;
		case 0xA55F: return Unicode_Category_LO;
		case 0xA560: return Unicode_Category_LO;
		case 0xA561: return Unicode_Category_LO;
		case 0xA562: return Unicode_Category_LO;
		case 0xA563: return Unicode_Category_LO;
		case 0xA564: return Unicode_Category_LO;
		case 0xA565: return Unicode_Category_LO;
		case 0xA566: return Unicode_Category_LO;
		case 0xA567: return Unicode_Category_LO;
		case 0xA568: return Unicode_Category_LO;
		case 0xA569: return Unicode_Category_LO;
		case 0xA56A: return Unicode_Category_LO;
		case 0xA56B: return Unicode_Category_LO;
		case 0xA56C: return Unicode_Category_LO;
		case 0xA56D: return Unicode_Category_LO;
		case 0xA56E: return Unicode_Category_LO;
		case 0xA56F: return Unicode_Category_LO;
		case 0xA570: return Unicode_Category_LO;
		case 0xA571: return Unicode_Category_LO;
		case 0xA572: return Unicode_Category_LO;
		case 0xA573: return Unicode_Category_LO;
		case 0xA574: return Unicode_Category_LO;
		case 0xA575: return Unicode_Category_LO;
		case 0xA576: return Unicode_Category_LO;
		case 0xA577: return Unicode_Category_LO;
		case 0xA578: return Unicode_Category_LO;
		case 0xA579: return Unicode_Category_LO;
		case 0xA57A: return Unicode_Category_LO;
		case 0xA57B: return Unicode_Category_LO;
		case 0xA57C: return Unicode_Category_LO;
		case 0xA57D: return Unicode_Category_LO;
		case 0xA57E: return Unicode_Category_LO;
		case 0xA57F: return Unicode_Category_LO;
		case 0xA580: return Unicode_Category_LO;
		case 0xA581: return Unicode_Category_LO;
		case 0xA582: return Unicode_Category_LO;
		case 0xA583: return Unicode_Category_LO;
		case 0xA584: return Unicode_Category_LO;
		case 0xA585: return Unicode_Category_LO;
		case 0xA586: return Unicode_Category_LO;
		case 0xA587: return Unicode_Category_LO;
		case 0xA588: return Unicode_Category_LO;
		case 0xA589: return Unicode_Category_LO;
		case 0xA58A: return Unicode_Category_LO;
		case 0xA58B: return Unicode_Category_LO;
		case 0xA58C: return Unicode_Category_LO;
		case 0xA58D: return Unicode_Category_LO;
		case 0xA58E: return Unicode_Category_LO;
		case 0xA58F: return Unicode_Category_LO;
		case 0xA590: return Unicode_Category_LO;
		case 0xA591: return Unicode_Category_LO;
		case 0xA592: return Unicode_Category_LO;
		case 0xA593: return Unicode_Category_LO;
		case 0xA594: return Unicode_Category_LO;
		case 0xA595: return Unicode_Category_LO;
		case 0xA596: return Unicode_Category_LO;
		case 0xA597: return Unicode_Category_LO;
		case 0xA598: return Unicode_Category_LO;
		case 0xA599: return Unicode_Category_LO;
		case 0xA59A: return Unicode_Category_LO;
		case 0xA59B: return Unicode_Category_LO;
		case 0xA59C: return Unicode_Category_LO;
		case 0xA59D: return Unicode_Category_LO;
		case 0xA59E: return Unicode_Category_LO;
		case 0xA59F: return Unicode_Category_LO;
		case 0xA5A0: return Unicode_Category_LO;
		case 0xA5A1: return Unicode_Category_LO;
		case 0xA5A2: return Unicode_Category_LO;
		case 0xA5A3: return Unicode_Category_LO;
		case 0xA5A4: return Unicode_Category_LO;
		case 0xA5A5: return Unicode_Category_LO;
		case 0xA5A6: return Unicode_Category_LO;
		case 0xA5A7: return Unicode_Category_LO;
		case 0xA5A8: return Unicode_Category_LO;
		case 0xA5A9: return Unicode_Category_LO;
		case 0xA5AA: return Unicode_Category_LO;
		case 0xA5AB: return Unicode_Category_LO;
		case 0xA5AC: return Unicode_Category_LO;
		case 0xA5AD: return Unicode_Category_LO;
		case 0xA5AE: return Unicode_Category_LO;
		case 0xA5AF: return Unicode_Category_LO;
		case 0xA5B0: return Unicode_Category_LO;
		case 0xA5B1: return Unicode_Category_LO;
		case 0xA5B2: return Unicode_Category_LO;
		case 0xA5B3: return Unicode_Category_LO;
		case 0xA5B4: return Unicode_Category_LO;
		case 0xA5B5: return Unicode_Category_LO;
		case 0xA5B6: return Unicode_Category_LO;
		case 0xA5B7: return Unicode_Category_LO;
		case 0xA5B8: return Unicode_Category_LO;
		case 0xA5B9: return Unicode_Category_LO;
		case 0xA5BA: return Unicode_Category_LO;
		case 0xA5BB: return Unicode_Category_LO;
		case 0xA5BC: return Unicode_Category_LO;
		case 0xA5BD: return Unicode_Category_LO;
		case 0xA5BE: return Unicode_Category_LO;
		case 0xA5BF: return Unicode_Category_LO;
		case 0xA5C0: return Unicode_Category_LO;
		case 0xA5C1: return Unicode_Category_LO;
		case 0xA5C2: return Unicode_Category_LO;
		case 0xA5C3: return Unicode_Category_LO;
		case 0xA5C4: return Unicode_Category_LO;
		case 0xA5C5: return Unicode_Category_LO;
		case 0xA5C6: return Unicode_Category_LO;
		case 0xA5C7: return Unicode_Category_LO;
		case 0xA5C8: return Unicode_Category_LO;
		case 0xA5C9: return Unicode_Category_LO;
		case 0xA5CA: return Unicode_Category_LO;
		case 0xA5CB: return Unicode_Category_LO;
		case 0xA5CC: return Unicode_Category_LO;
		case 0xA5CD: return Unicode_Category_LO;
		case 0xA5CE: return Unicode_Category_LO;
		case 0xA5CF: return Unicode_Category_LO;
		case 0xA5D0: return Unicode_Category_LO;
		case 0xA5D1: return Unicode_Category_LO;
		case 0xA5D2: return Unicode_Category_LO;
		case 0xA5D3: return Unicode_Category_LO;
		case 0xA5D4: return Unicode_Category_LO;
		case 0xA5D5: return Unicode_Category_LO;
		case 0xA5D6: return Unicode_Category_LO;
		case 0xA5D7: return Unicode_Category_LO;
		case 0xA5D8: return Unicode_Category_LO;
		case 0xA5D9: return Unicode_Category_LO;
		case 0xA5DA: return Unicode_Category_LO;
		case 0xA5DB: return Unicode_Category_LO;
		case 0xA5DC: return Unicode_Category_LO;
		case 0xA5DD: return Unicode_Category_LO;
		case 0xA5DE: return Unicode_Category_LO;
		case 0xA5DF: return Unicode_Category_LO;
		case 0xA5E0: return Unicode_Category_LO;
		case 0xA5E1: return Unicode_Category_LO;
		case 0xA5E2: return Unicode_Category_LO;
		case 0xA5E3: return Unicode_Category_LO;
		case 0xA5E4: return Unicode_Category_LO;
		case 0xA5E5: return Unicode_Category_LO;
		case 0xA5E6: return Unicode_Category_LO;
		case 0xA5E7: return Unicode_Category_LO;
		case 0xA5E8: return Unicode_Category_LO;
		case 0xA5E9: return Unicode_Category_LO;
		case 0xA5EA: return Unicode_Category_LO;
		case 0xA5EB: return Unicode_Category_LO;
		case 0xA5EC: return Unicode_Category_LO;
		case 0xA5ED: return Unicode_Category_LO;
		case 0xA5EE: return Unicode_Category_LO;
		case 0xA5EF: return Unicode_Category_LO;
		case 0xA5F0: return Unicode_Category_LO;
		case 0xA5F1: return Unicode_Category_LO;
		case 0xA5F2: return Unicode_Category_LO;
		case 0xA5F3: return Unicode_Category_LO;
		case 0xA5F4: return Unicode_Category_LO;
		case 0xA5F5: return Unicode_Category_LO;
		case 0xA5F6: return Unicode_Category_LO;
		case 0xA5F7: return Unicode_Category_LO;
		case 0xA5F8: return Unicode_Category_LO;
		case 0xA5F9: return Unicode_Category_LO;
		case 0xA5FA: return Unicode_Category_LO;
		case 0xA5FB: return Unicode_Category_LO;
		case 0xA5FC: return Unicode_Category_LO;
		case 0xA5FD: return Unicode_Category_LO;
		case 0xA5FE: return Unicode_Category_LO;
		case 0xA5FF: return Unicode_Category_LO;
		case 0xA600: return Unicode_Category_LO;
		case 0xA601: return Unicode_Category_LO;
		case 0xA602: return Unicode_Category_LO;
		case 0xA603: return Unicode_Category_LO;
		case 0xA604: return Unicode_Category_LO;
		case 0xA605: return Unicode_Category_LO;
		case 0xA606: return Unicode_Category_LO;
		case 0xA607: return Unicode_Category_LO;
		case 0xA608: return Unicode_Category_LO;
		case 0xA609: return Unicode_Category_LO;
		case 0xA60A: return Unicode_Category_LO;
		case 0xA60B: return Unicode_Category_LO;
		case 0xA60C: return Unicode_Category_LM;
		case 0xA60D: return Unicode_Category_PO;
		case 0xA60E: return Unicode_Category_PO;
		case 0xA60F: return Unicode_Category_PO;
		case 0xA610: return Unicode_Category_LO;
		case 0xA611: return Unicode_Category_LO;
		case 0xA612: return Unicode_Category_LO;
		case 0xA613: return Unicode_Category_LO;
		case 0xA614: return Unicode_Category_LO;
		case 0xA615: return Unicode_Category_LO;
		case 0xA616: return Unicode_Category_LO;
		case 0xA617: return Unicode_Category_LO;
		case 0xA618: return Unicode_Category_LO;
		case 0xA619: return Unicode_Category_LO;
		case 0xA61A: return Unicode_Category_LO;
		case 0xA61B: return Unicode_Category_LO;
		case 0xA61C: return Unicode_Category_LO;
		case 0xA61D: return Unicode_Category_LO;
		case 0xA61E: return Unicode_Category_LO;
		case 0xA61F: return Unicode_Category_LO;
		case 0xA620: return Unicode_Category_ND;
		case 0xA621: return Unicode_Category_ND;
		case 0xA622: return Unicode_Category_ND;
		case 0xA623: return Unicode_Category_ND;
		case 0xA624: return Unicode_Category_ND;
		case 0xA625: return Unicode_Category_ND;
		case 0xA626: return Unicode_Category_ND;
		case 0xA627: return Unicode_Category_ND;
		case 0xA628: return Unicode_Category_ND;
		case 0xA629: return Unicode_Category_ND;
		case 0xA62A: return Unicode_Category_LO;
		case 0xA62B: return Unicode_Category_LO;
		case 0xA640: return Unicode_Category_LU;
		case 0xA641: return Unicode_Category_LL;
		case 0xA642: return Unicode_Category_LU;
		case 0xA643: return Unicode_Category_LL;
		case 0xA644: return Unicode_Category_LU;
		case 0xA645: return Unicode_Category_LL;
		case 0xA646: return Unicode_Category_LU;
		case 0xA647: return Unicode_Category_LL;
		case 0xA648: return Unicode_Category_LU;
		case 0xA649: return Unicode_Category_LL;
		case 0xA64A: return Unicode_Category_LU;
		case 0xA64B: return Unicode_Category_LL;
		case 0xA64C: return Unicode_Category_LU;
		case 0xA64D: return Unicode_Category_LL;
		case 0xA64E: return Unicode_Category_LU;
		case 0xA64F: return Unicode_Category_LL;
		case 0xA650: return Unicode_Category_LU;
		case 0xA651: return Unicode_Category_LL;
		case 0xA652: return Unicode_Category_LU;
		case 0xA653: return Unicode_Category_LL;
		case 0xA654: return Unicode_Category_LU;
		case 0xA655: return Unicode_Category_LL;
		case 0xA656: return Unicode_Category_LU;
		case 0xA657: return Unicode_Category_LL;
		case 0xA658: return Unicode_Category_LU;
		case 0xA659: return Unicode_Category_LL;
		case 0xA65A: return Unicode_Category_LU;
		case 0xA65B: return Unicode_Category_LL;
		case 0xA65C: return Unicode_Category_LU;
		case 0xA65D: return Unicode_Category_LL;
		case 0xA65E: return Unicode_Category_LU;
		case 0xA65F: return Unicode_Category_LL;
		case 0xA660: return Unicode_Category_LU;
		case 0xA661: return Unicode_Category_LL;
		case 0xA662: return Unicode_Category_LU;
		case 0xA663: return Unicode_Category_LL;
		case 0xA664: return Unicode_Category_LU;
		case 0xA665: return Unicode_Category_LL;
		case 0xA666: return Unicode_Category_LU;
		case 0xA667: return Unicode_Category_LL;
		case 0xA668: return Unicode_Category_LU;
		case 0xA669: return Unicode_Category_LL;
		case 0xA66A: return Unicode_Category_LU;
		case 0xA66B: return Unicode_Category_LL;
		case 0xA66C: return Unicode_Category_LU;
		case 0xA66D: return Unicode_Category_LL;
		case 0xA66E: return Unicode_Category_LO;
		case 0xA66F: return Unicode_Category_MN;
		case 0xA670: return Unicode_Category_ME;
		case 0xA671: return Unicode_Category_ME;
		case 0xA672: return Unicode_Category_ME;
		case 0xA673: return Unicode_Category_PO;
		case 0xA674: return Unicode_Category_MN;
		case 0xA675: return Unicode_Category_MN;
		case 0xA676: return Unicode_Category_MN;
		case 0xA677: return Unicode_Category_MN;
		case 0xA678: return Unicode_Category_MN;
		case 0xA679: return Unicode_Category_MN;
		case 0xA67A: return Unicode_Category_MN;
		case 0xA67B: return Unicode_Category_MN;
		case 0xA67C: return Unicode_Category_MN;
		case 0xA67D: return Unicode_Category_MN;
		case 0xA67E: return Unicode_Category_PO;
		case 0xA67F: return Unicode_Category_LM;
		case 0xA680: return Unicode_Category_LU;
		case 0xA681: return Unicode_Category_LL;
		case 0xA682: return Unicode_Category_LU;
		case 0xA683: return Unicode_Category_LL;
		case 0xA684: return Unicode_Category_LU;
		case 0xA685: return Unicode_Category_LL;
		case 0xA686: return Unicode_Category_LU;
		case 0xA687: return Unicode_Category_LL;
		case 0xA688: return Unicode_Category_LU;
		case 0xA689: return Unicode_Category_LL;
		case 0xA68A: return Unicode_Category_LU;
		case 0xA68B: return Unicode_Category_LL;
		case 0xA68C: return Unicode_Category_LU;
		case 0xA68D: return Unicode_Category_LL;
		case 0xA68E: return Unicode_Category_LU;
		case 0xA68F: return Unicode_Category_LL;
		case 0xA690: return Unicode_Category_LU;
		case 0xA691: return Unicode_Category_LL;
		case 0xA692: return Unicode_Category_LU;
		case 0xA693: return Unicode_Category_LL;
		case 0xA694: return Unicode_Category_LU;
		case 0xA695: return Unicode_Category_LL;
		case 0xA696: return Unicode_Category_LU;
		case 0xA697: return Unicode_Category_LL;
		case 0xA698: return Unicode_Category_LU;
		case 0xA699: return Unicode_Category_LL;
		case 0xA69A: return Unicode_Category_LU;
		case 0xA69B: return Unicode_Category_LL;
		case 0xA69C: return Unicode_Category_LM;
		case 0xA69D: return Unicode_Category_LM;
		case 0xA69E: return Unicode_Category_MN;
		case 0xA69F: return Unicode_Category_MN;
		case 0xA6A0: return Unicode_Category_LO;
		case 0xA6A1: return Unicode_Category_LO;
		case 0xA6A2: return Unicode_Category_LO;
		case 0xA6A3: return Unicode_Category_LO;
		case 0xA6A4: return Unicode_Category_LO;
		case 0xA6A5: return Unicode_Category_LO;
		case 0xA6A6: return Unicode_Category_LO;
		case 0xA6A7: return Unicode_Category_LO;
		case 0xA6A8: return Unicode_Category_LO;
		case 0xA6A9: return Unicode_Category_LO;
		case 0xA6AA: return Unicode_Category_LO;
		case 0xA6AB: return Unicode_Category_LO;
		case 0xA6AC: return Unicode_Category_LO;
		case 0xA6AD: return Unicode_Category_LO;
		case 0xA6AE: return Unicode_Category_LO;
		case 0xA6AF: return Unicode_Category_LO;
		case 0xA6B0: return Unicode_Category_LO;
		case 0xA6B1: return Unicode_Category_LO;
		case 0xA6B2: return Unicode_Category_LO;
		case 0xA6B3: return Unicode_Category_LO;
		case 0xA6B4: return Unicode_Category_LO;
		case 0xA6B5: return Unicode_Category_LO;
		case 0xA6B6: return Unicode_Category_LO;
		case 0xA6B7: return Unicode_Category_LO;
		case 0xA6B8: return Unicode_Category_LO;
		case 0xA6B9: return Unicode_Category_LO;
		case 0xA6BA: return Unicode_Category_LO;
		case 0xA6BB: return Unicode_Category_LO;
		case 0xA6BC: return Unicode_Category_LO;
		case 0xA6BD: return Unicode_Category_LO;
		case 0xA6BE: return Unicode_Category_LO;
		case 0xA6BF: return Unicode_Category_LO;
		case 0xA6C0: return Unicode_Category_LO;
		case 0xA6C1: return Unicode_Category_LO;
		case 0xA6C2: return Unicode_Category_LO;
		case 0xA6C3: return Unicode_Category_LO;
		case 0xA6C4: return Unicode_Category_LO;
		case 0xA6C5: return Unicode_Category_LO;
		case 0xA6C6: return Unicode_Category_LO;
		case 0xA6C7: return Unicode_Category_LO;
		case 0xA6C8: return Unicode_Category_LO;
		case 0xA6C9: return Unicode_Category_LO;
		case 0xA6CA: return Unicode_Category_LO;
		case 0xA6CB: return Unicode_Category_LO;
		case 0xA6CC: return Unicode_Category_LO;
		case 0xA6CD: return Unicode_Category_LO;
		case 0xA6CE: return Unicode_Category_LO;
		case 0xA6CF: return Unicode_Category_LO;
		case 0xA6D0: return Unicode_Category_LO;
		case 0xA6D1: return Unicode_Category_LO;
		case 0xA6D2: return Unicode_Category_LO;
		case 0xA6D3: return Unicode_Category_LO;
		case 0xA6D4: return Unicode_Category_LO;
		case 0xA6D5: return Unicode_Category_LO;
		case 0xA6D6: return Unicode_Category_LO;
		case 0xA6D7: return Unicode_Category_LO;
		case 0xA6D8: return Unicode_Category_LO;
		case 0xA6D9: return Unicode_Category_LO;
		case 0xA6DA: return Unicode_Category_LO;
		case 0xA6DB: return Unicode_Category_LO;
		case 0xA6DC: return Unicode_Category_LO;
		case 0xA6DD: return Unicode_Category_LO;
		case 0xA6DE: return Unicode_Category_LO;
		case 0xA6DF: return Unicode_Category_LO;
		case 0xA6E0: return Unicode_Category_LO;
		case 0xA6E1: return Unicode_Category_LO;
		case 0xA6E2: return Unicode_Category_LO;
		case 0xA6E3: return Unicode_Category_LO;
		case 0xA6E4: return Unicode_Category_LO;
		case 0xA6E5: return Unicode_Category_LO;
		case 0xA6E6: return Unicode_Category_NL;
		case 0xA6E7: return Unicode_Category_NL;
		case 0xA6E8: return Unicode_Category_NL;
		case 0xA6E9: return Unicode_Category_NL;
		case 0xA6EA: return Unicode_Category_NL;
		case 0xA6EB: return Unicode_Category_NL;
		case 0xA6EC: return Unicode_Category_NL;
		case 0xA6ED: return Unicode_Category_NL;
		case 0xA6EE: return Unicode_Category_NL;
		case 0xA6EF: return Unicode_Category_NL;
		case 0xA6F0: return Unicode_Category_MN;
		case 0xA6F1: return Unicode_Category_MN;
		case 0xA6F2: return Unicode_Category_PO;
		case 0xA6F3: return Unicode_Category_PO;
		case 0xA6F4: return Unicode_Category_PO;
		case 0xA6F5: return Unicode_Category_PO;
		case 0xA6F6: return Unicode_Category_PO;
		case 0xA6F7: return Unicode_Category_PO;
		case 0xA700: return Unicode_Category_SK;
		case 0xA701: return Unicode_Category_SK;
		case 0xA702: return Unicode_Category_SK;
		case 0xA703: return Unicode_Category_SK;
		case 0xA704: return Unicode_Category_SK;
		case 0xA705: return Unicode_Category_SK;
		case 0xA706: return Unicode_Category_SK;
		case 0xA707: return Unicode_Category_SK;
		case 0xA708: return Unicode_Category_SK;
		case 0xA709: return Unicode_Category_SK;
		case 0xA70A: return Unicode_Category_SK;
		case 0xA70B: return Unicode_Category_SK;
		case 0xA70C: return Unicode_Category_SK;
		case 0xA70D: return Unicode_Category_SK;
		case 0xA70E: return Unicode_Category_SK;
		case 0xA70F: return Unicode_Category_SK;
		case 0xA710: return Unicode_Category_SK;
		case 0xA711: return Unicode_Category_SK;
		case 0xA712: return Unicode_Category_SK;
		case 0xA713: return Unicode_Category_SK;
		case 0xA714: return Unicode_Category_SK;
		case 0xA715: return Unicode_Category_SK;
		case 0xA716: return Unicode_Category_SK;
		case 0xA717: return Unicode_Category_LM;
		case 0xA718: return Unicode_Category_LM;
		case 0xA719: return Unicode_Category_LM;
		case 0xA71A: return Unicode_Category_LM;
		case 0xA71B: return Unicode_Category_LM;
		case 0xA71C: return Unicode_Category_LM;
		case 0xA71D: return Unicode_Category_LM;
		case 0xA71E: return Unicode_Category_LM;
		case 0xA71F: return Unicode_Category_LM;
		case 0xA720: return Unicode_Category_SK;
		case 0xA721: return Unicode_Category_SK;
		case 0xA722: return Unicode_Category_LU;
		case 0xA723: return Unicode_Category_LL;
		case 0xA724: return Unicode_Category_LU;
		case 0xA725: return Unicode_Category_LL;
		case 0xA726: return Unicode_Category_LU;
		case 0xA727: return Unicode_Category_LL;
		case 0xA728: return Unicode_Category_LU;
		case 0xA729: return Unicode_Category_LL;
		case 0xA72A: return Unicode_Category_LU;
		case 0xA72B: return Unicode_Category_LL;
		case 0xA72C: return Unicode_Category_LU;
		case 0xA72D: return Unicode_Category_LL;
		case 0xA72E: return Unicode_Category_LU;
		case 0xA72F: return Unicode_Category_LL;
		case 0xA730: return Unicode_Category_LL;
		case 0xA731: return Unicode_Category_LL;
		case 0xA732: return Unicode_Category_LU;
		case 0xA733: return Unicode_Category_LL;
		case 0xA734: return Unicode_Category_LU;
		case 0xA735: return Unicode_Category_LL;
		case 0xA736: return Unicode_Category_LU;
		case 0xA737: return Unicode_Category_LL;
		case 0xA738: return Unicode_Category_LU;
		case 0xA739: return Unicode_Category_LL;
		case 0xA73A: return Unicode_Category_LU;
		case 0xA73B: return Unicode_Category_LL;
		case 0xA73C: return Unicode_Category_LU;
		case 0xA73D: return Unicode_Category_LL;
		case 0xA73E: return Unicode_Category_LU;
		case 0xA73F: return Unicode_Category_LL;
		case 0xA740: return Unicode_Category_LU;
		case 0xA741: return Unicode_Category_LL;
		case 0xA742: return Unicode_Category_LU;
		case 0xA743: return Unicode_Category_LL;
		case 0xA744: return Unicode_Category_LU;
		case 0xA745: return Unicode_Category_LL;
		case 0xA746: return Unicode_Category_LU;
		case 0xA747: return Unicode_Category_LL;
		case 0xA748: return Unicode_Category_LU;
		case 0xA749: return Unicode_Category_LL;
		case 0xA74A: return Unicode_Category_LU;
		case 0xA74B: return Unicode_Category_LL;
		case 0xA74C: return Unicode_Category_LU;
		case 0xA74D: return Unicode_Category_LL;
		case 0xA74E: return Unicode_Category_LU;
		case 0xA74F: return Unicode_Category_LL;
		case 0xA750: return Unicode_Category_LU;
		case 0xA751: return Unicode_Category_LL;
		case 0xA752: return Unicode_Category_LU;
		case 0xA753: return Unicode_Category_LL;
		case 0xA754: return Unicode_Category_LU;
		case 0xA755: return Unicode_Category_LL;
		case 0xA756: return Unicode_Category_LU;
		case 0xA757: return Unicode_Category_LL;
		case 0xA758: return Unicode_Category_LU;
		case 0xA759: return Unicode_Category_LL;
		case 0xA75A: return Unicode_Category_LU;
		case 0xA75B: return Unicode_Category_LL;
		case 0xA75C: return Unicode_Category_LU;
		case 0xA75D: return Unicode_Category_LL;
		case 0xA75E: return Unicode_Category_LU;
		case 0xA75F: return Unicode_Category_LL;
		case 0xA760: return Unicode_Category_LU;
		case 0xA761: return Unicode_Category_LL;
		case 0xA762: return Unicode_Category_LU;
		case 0xA763: return Unicode_Category_LL;
		case 0xA764: return Unicode_Category_LU;
		case 0xA765: return Unicode_Category_LL;
		case 0xA766: return Unicode_Category_LU;
		case 0xA767: return Unicode_Category_LL;
		case 0xA768: return Unicode_Category_LU;
		case 0xA769: return Unicode_Category_LL;
		case 0xA76A: return Unicode_Category_LU;
		case 0xA76B: return Unicode_Category_LL;
		case 0xA76C: return Unicode_Category_LU;
		case 0xA76D: return Unicode_Category_LL;
		case 0xA76E: return Unicode_Category_LU;
		case 0xA76F: return Unicode_Category_LL;
		case 0xA770: return Unicode_Category_LM;
		case 0xA771: return Unicode_Category_LL;
		case 0xA772: return Unicode_Category_LL;
		case 0xA773: return Unicode_Category_LL;
		case 0xA774: return Unicode_Category_LL;
		case 0xA775: return Unicode_Category_LL;
		case 0xA776: return Unicode_Category_LL;
		case 0xA777: return Unicode_Category_LL;
		case 0xA778: return Unicode_Category_LL;
		case 0xA779: return Unicode_Category_LU;
		case 0xA77A: return Unicode_Category_LL;
		case 0xA77B: return Unicode_Category_LU;
		case 0xA77C: return Unicode_Category_LL;
		case 0xA77D: return Unicode_Category_LU;
		case 0xA77E: return Unicode_Category_LU;
		case 0xA77F: return Unicode_Category_LL;
		case 0xA780: return Unicode_Category_LU;
		case 0xA781: return Unicode_Category_LL;
		case 0xA782: return Unicode_Category_LU;
		case 0xA783: return Unicode_Category_LL;
		case 0xA784: return Unicode_Category_LU;
		case 0xA785: return Unicode_Category_LL;
		case 0xA786: return Unicode_Category_LU;
		case 0xA787: return Unicode_Category_LL;
		case 0xA788: return Unicode_Category_LM;
		case 0xA789: return Unicode_Category_SK;
		case 0xA78A: return Unicode_Category_SK;
		case 0xA78B: return Unicode_Category_LU;
		case 0xA78C: return Unicode_Category_LL;
		case 0xA78D: return Unicode_Category_LU;
		case 0xA78E: return Unicode_Category_LL;
		case 0xA78F: return Unicode_Category_LO;
		case 0xA790: return Unicode_Category_LU;
		case 0xA791: return Unicode_Category_LL;
		case 0xA792: return Unicode_Category_LU;
		case 0xA793: return Unicode_Category_LL;
		case 0xA794: return Unicode_Category_LL;
		case 0xA795: return Unicode_Category_LL;
		case 0xA796: return Unicode_Category_LU;
		case 0xA797: return Unicode_Category_LL;
		case 0xA798: return Unicode_Category_LU;
		case 0xA799: return Unicode_Category_LL;
		case 0xA79A: return Unicode_Category_LU;
		case 0xA79B: return Unicode_Category_LL;
		case 0xA79C: return Unicode_Category_LU;
		case 0xA79D: return Unicode_Category_LL;
		case 0xA79E: return Unicode_Category_LU;
		case 0xA79F: return Unicode_Category_LL;
		case 0xA7A0: return Unicode_Category_LU;
		case 0xA7A1: return Unicode_Category_LL;
		case 0xA7A2: return Unicode_Category_LU;
		case 0xA7A3: return Unicode_Category_LL;
		case 0xA7A4: return Unicode_Category_LU;
		case 0xA7A5: return Unicode_Category_LL;
		case 0xA7A6: return Unicode_Category_LU;
		case 0xA7A7: return Unicode_Category_LL;
		case 0xA7A8: return Unicode_Category_LU;
		case 0xA7A9: return Unicode_Category_LL;
		case 0xA7AA: return Unicode_Category_LU;
		case 0xA7AB: return Unicode_Category_LU;
		case 0xA7AC: return Unicode_Category_LU;
		case 0xA7AD: return Unicode_Category_LU;
		case 0xA7AE: return Unicode_Category_LU;
		case 0xA7AF: return Unicode_Category_LL;
		case 0xA7B0: return Unicode_Category_LU;
		case 0xA7B1: return Unicode_Category_LU;
		case 0xA7B2: return Unicode_Category_LU;
		case 0xA7B3: return Unicode_Category_LU;
		case 0xA7B4: return Unicode_Category_LU;
		case 0xA7B5: return Unicode_Category_LL;
		case 0xA7B6: return Unicode_Category_LU;
		case 0xA7B7: return Unicode_Category_LL;
		case 0xA7B8: return Unicode_Category_LU;
		case 0xA7B9: return Unicode_Category_LL;
		case 0xA7BA: return Unicode_Category_LU;
		case 0xA7BB: return Unicode_Category_LL;
		case 0xA7BC: return Unicode_Category_LU;
		case 0xA7BD: return Unicode_Category_LL;
		case 0xA7BE: return Unicode_Category_LU;
		case 0xA7BF: return Unicode_Category_LL;
		case 0xA7C2: return Unicode_Category_LU;
		case 0xA7C3: return Unicode_Category_LL;
		case 0xA7C4: return Unicode_Category_LU;
		case 0xA7C5: return Unicode_Category_LU;
		case 0xA7C6: return Unicode_Category_LU;
		case 0xA7C7: return Unicode_Category_LU;
		case 0xA7C8: return Unicode_Category_LL;
		case 0xA7C9: return Unicode_Category_LU;
		case 0xA7CA: return Unicode_Category_LL;
		case 0xA7F5: return Unicode_Category_LU;
		case 0xA7F6: return Unicode_Category_LL;
		case 0xA7F7: return Unicode_Category_LO;
		case 0xA7F8: return Unicode_Category_LM;
		case 0xA7F9: return Unicode_Category_LM;
		case 0xA7FA: return Unicode_Category_LL;
		case 0xA7FB: return Unicode_Category_LO;
		case 0xA7FC: return Unicode_Category_LO;
		case 0xA7FD: return Unicode_Category_LO;
		case 0xA7FE: return Unicode_Category_LO;
		case 0xA7FF: return Unicode_Category_LO;
		case 0xA800: return Unicode_Category_LO;
		case 0xA801: return Unicode_Category_LO;
		case 0xA802: return Unicode_Category_MN;
		case 0xA803: return Unicode_Category_LO;
		case 0xA804: return Unicode_Category_LO;
		case 0xA805: return Unicode_Category_LO;
		case 0xA806: return Unicode_Category_MN;
		case 0xA807: return Unicode_Category_LO;
		case 0xA808: return Unicode_Category_LO;
		case 0xA809: return Unicode_Category_LO;
		case 0xA80A: return Unicode_Category_LO;
		case 0xA80B: return Unicode_Category_MN;
		case 0xA80C: return Unicode_Category_LO;
		case 0xA80D: return Unicode_Category_LO;
		case 0xA80E: return Unicode_Category_LO;
		case 0xA80F: return Unicode_Category_LO;
		case 0xA810: return Unicode_Category_LO;
		case 0xA811: return Unicode_Category_LO;
		case 0xA812: return Unicode_Category_LO;
		case 0xA813: return Unicode_Category_LO;
		case 0xA814: return Unicode_Category_LO;
		case 0xA815: return Unicode_Category_LO;
		case 0xA816: return Unicode_Category_LO;
		case 0xA817: return Unicode_Category_LO;
		case 0xA818: return Unicode_Category_LO;
		case 0xA819: return Unicode_Category_LO;
		case 0xA81A: return Unicode_Category_LO;
		case 0xA81B: return Unicode_Category_LO;
		case 0xA81C: return Unicode_Category_LO;
		case 0xA81D: return Unicode_Category_LO;
		case 0xA81E: return Unicode_Category_LO;
		case 0xA81F: return Unicode_Category_LO;
		case 0xA820: return Unicode_Category_LO;
		case 0xA821: return Unicode_Category_LO;
		case 0xA822: return Unicode_Category_LO;
		case 0xA823: return Unicode_Category_MC;
		case 0xA824: return Unicode_Category_MC;
		case 0xA825: return Unicode_Category_MN;
		case 0xA826: return Unicode_Category_MN;
		case 0xA827: return Unicode_Category_MC;
		case 0xA828: return Unicode_Category_SO;
		case 0xA829: return Unicode_Category_SO;
		case 0xA82A: return Unicode_Category_SO;
		case 0xA82B: return Unicode_Category_SO;
		case 0xA82C: return Unicode_Category_MN;
		case 0xA830: return Unicode_Category_NO;
		case 0xA831: return Unicode_Category_NO;
		case 0xA832: return Unicode_Category_NO;
		case 0xA833: return Unicode_Category_NO;
		case 0xA834: return Unicode_Category_NO;
		case 0xA835: return Unicode_Category_NO;
		case 0xA836: return Unicode_Category_SO;
		case 0xA837: return Unicode_Category_SO;
		case 0xA838: return Unicode_Category_SC;
		case 0xA839: return Unicode_Category_SO;
		case 0xA840: return Unicode_Category_LO;
		case 0xA841: return Unicode_Category_LO;
		case 0xA842: return Unicode_Category_LO;
		case 0xA843: return Unicode_Category_LO;
		case 0xA844: return Unicode_Category_LO;
		case 0xA845: return Unicode_Category_LO;
		case 0xA846: return Unicode_Category_LO;
		case 0xA847: return Unicode_Category_LO;
		case 0xA848: return Unicode_Category_LO;
		case 0xA849: return Unicode_Category_LO;
		case 0xA84A: return Unicode_Category_LO;
		case 0xA84B: return Unicode_Category_LO;
		case 0xA84C: return Unicode_Category_LO;
		case 0xA84D: return Unicode_Category_LO;
		case 0xA84E: return Unicode_Category_LO;
		case 0xA84F: return Unicode_Category_LO;
		case 0xA850: return Unicode_Category_LO;
		case 0xA851: return Unicode_Category_LO;
		case 0xA852: return Unicode_Category_LO;
		case 0xA853: return Unicode_Category_LO;
		case 0xA854: return Unicode_Category_LO;
		case 0xA855: return Unicode_Category_LO;
		case 0xA856: return Unicode_Category_LO;
		case 0xA857: return Unicode_Category_LO;
		case 0xA858: return Unicode_Category_LO;
		case 0xA859: return Unicode_Category_LO;
		case 0xA85A: return Unicode_Category_LO;
		case 0xA85B: return Unicode_Category_LO;
		case 0xA85C: return Unicode_Category_LO;
		case 0xA85D: return Unicode_Category_LO;
		case 0xA85E: return Unicode_Category_LO;
		case 0xA85F: return Unicode_Category_LO;
		case 0xA860: return Unicode_Category_LO;
		case 0xA861: return Unicode_Category_LO;
		case 0xA862: return Unicode_Category_LO;
		case 0xA863: return Unicode_Category_LO;
		case 0xA864: return Unicode_Category_LO;
		case 0xA865: return Unicode_Category_LO;
		case 0xA866: return Unicode_Category_LO;
		case 0xA867: return Unicode_Category_LO;
		case 0xA868: return Unicode_Category_LO;
		case 0xA869: return Unicode_Category_LO;
		case 0xA86A: return Unicode_Category_LO;
		case 0xA86B: return Unicode_Category_LO;
		case 0xA86C: return Unicode_Category_LO;
		case 0xA86D: return Unicode_Category_LO;
		case 0xA86E: return Unicode_Category_LO;
		case 0xA86F: return Unicode_Category_LO;
		case 0xA870: return Unicode_Category_LO;
		case 0xA871: return Unicode_Category_LO;
		case 0xA872: return Unicode_Category_LO;
		case 0xA873: return Unicode_Category_LO;
		case 0xA874: return Unicode_Category_PO;
		case 0xA875: return Unicode_Category_PO;
		case 0xA876: return Unicode_Category_PO;
		case 0xA877: return Unicode_Category_PO;
		case 0xA880: return Unicode_Category_MC;
		case 0xA881: return Unicode_Category_MC;
		case 0xA882: return Unicode_Category_LO;
		case 0xA883: return Unicode_Category_LO;
		case 0xA884: return Unicode_Category_LO;
		case 0xA885: return Unicode_Category_LO;
		case 0xA886: return Unicode_Category_LO;
		case 0xA887: return Unicode_Category_LO;
		case 0xA888: return Unicode_Category_LO;
		case 0xA889: return Unicode_Category_LO;
		case 0xA88A: return Unicode_Category_LO;
		case 0xA88B: return Unicode_Category_LO;
		case 0xA88C: return Unicode_Category_LO;
		case 0xA88D: return Unicode_Category_LO;
		case 0xA88E: return Unicode_Category_LO;
		case 0xA88F: return Unicode_Category_LO;
		case 0xA890: return Unicode_Category_LO;
		case 0xA891: return Unicode_Category_LO;
		case 0xA892: return Unicode_Category_LO;
		case 0xA893: return Unicode_Category_LO;
		case 0xA894: return Unicode_Category_LO;
		case 0xA895: return Unicode_Category_LO;
		case 0xA896: return Unicode_Category_LO;
		case 0xA897: return Unicode_Category_LO;
		case 0xA898: return Unicode_Category_LO;
		case 0xA899: return Unicode_Category_LO;
		case 0xA89A: return Unicode_Category_LO;
		case 0xA89B: return Unicode_Category_LO;
		case 0xA89C: return Unicode_Category_LO;
		case 0xA89D: return Unicode_Category_LO;
		case 0xA89E: return Unicode_Category_LO;
		case 0xA89F: return Unicode_Category_LO;
		case 0xA8A0: return Unicode_Category_LO;
		case 0xA8A1: return Unicode_Category_LO;
		case 0xA8A2: return Unicode_Category_LO;
		case 0xA8A3: return Unicode_Category_LO;
		case 0xA8A4: return Unicode_Category_LO;
		case 0xA8A5: return Unicode_Category_LO;
		case 0xA8A6: return Unicode_Category_LO;
		case 0xA8A7: return Unicode_Category_LO;
		case 0xA8A8: return Unicode_Category_LO;
		case 0xA8A9: return Unicode_Category_LO;
		case 0xA8AA: return Unicode_Category_LO;
		case 0xA8AB: return Unicode_Category_LO;
		case 0xA8AC: return Unicode_Category_LO;
		case 0xA8AD: return Unicode_Category_LO;
		case 0xA8AE: return Unicode_Category_LO;
		case 0xA8AF: return Unicode_Category_LO;
		case 0xA8B0: return Unicode_Category_LO;
		case 0xA8B1: return Unicode_Category_LO;
		case 0xA8B2: return Unicode_Category_LO;
		case 0xA8B3: return Unicode_Category_LO;
		case 0xA8B4: return Unicode_Category_MC;
		case 0xA8B5: return Unicode_Category_MC;
		case 0xA8B6: return Unicode_Category_MC;
		case 0xA8B7: return Unicode_Category_MC;
		case 0xA8B8: return Unicode_Category_MC;
		case 0xA8B9: return Unicode_Category_MC;
		case 0xA8BA: return Unicode_Category_MC;
		case 0xA8BB: return Unicode_Category_MC;
		case 0xA8BC: return Unicode_Category_MC;
		case 0xA8BD: return Unicode_Category_MC;
		case 0xA8BE: return Unicode_Category_MC;
		case 0xA8BF: return Unicode_Category_MC;
		case 0xA8C0: return Unicode_Category_MC;
		case 0xA8C1: return Unicode_Category_MC;
		case 0xA8C2: return Unicode_Category_MC;
		case 0xA8C3: return Unicode_Category_MC;
		case 0xA8C4: return Unicode_Category_MN;
		case 0xA8C5: return Unicode_Category_MN;
		case 0xA8CE: return Unicode_Category_PO;
		case 0xA8CF: return Unicode_Category_PO;
		case 0xA8D0: return Unicode_Category_ND;
		case 0xA8D1: return Unicode_Category_ND;
		case 0xA8D2: return Unicode_Category_ND;
		case 0xA8D3: return Unicode_Category_ND;
		case 0xA8D4: return Unicode_Category_ND;
		case 0xA8D5: return Unicode_Category_ND;
		case 0xA8D6: return Unicode_Category_ND;
		case 0xA8D7: return Unicode_Category_ND;
		case 0xA8D8: return Unicode_Category_ND;
		case 0xA8D9: return Unicode_Category_ND;
		case 0xA8E0: return Unicode_Category_MN;
		case 0xA8E1: return Unicode_Category_MN;
		case 0xA8E2: return Unicode_Category_MN;
		case 0xA8E3: return Unicode_Category_MN;
		case 0xA8E4: return Unicode_Category_MN;
		case 0xA8E5: return Unicode_Category_MN;
		case 0xA8E6: return Unicode_Category_MN;
		case 0xA8E7: return Unicode_Category_MN;
		case 0xA8E8: return Unicode_Category_MN;
		case 0xA8E9: return Unicode_Category_MN;
		case 0xA8EA: return Unicode_Category_MN;
		case 0xA8EB: return Unicode_Category_MN;
		case 0xA8EC: return Unicode_Category_MN;
		case 0xA8ED: return Unicode_Category_MN;
		case 0xA8EE: return Unicode_Category_MN;
		case 0xA8EF: return Unicode_Category_MN;
		case 0xA8F0: return Unicode_Category_MN;
		case 0xA8F1: return Unicode_Category_MN;
		case 0xA8F2: return Unicode_Category_LO;
		case 0xA8F3: return Unicode_Category_LO;
		case 0xA8F4: return Unicode_Category_LO;
		case 0xA8F5: return Unicode_Category_LO;
		case 0xA8F6: return Unicode_Category_LO;
		case 0xA8F7: return Unicode_Category_LO;
		case 0xA8F8: return Unicode_Category_PO;
		case 0xA8F9: return Unicode_Category_PO;
		case 0xA8FA: return Unicode_Category_PO;
		case 0xA8FB: return Unicode_Category_LO;
		case 0xA8FC: return Unicode_Category_PO;
		case 0xA8FD: return Unicode_Category_LO;
		case 0xA8FE: return Unicode_Category_LO;
		case 0xA8FF: return Unicode_Category_MN;
		case 0xA900: return Unicode_Category_ND;
		case 0xA901: return Unicode_Category_ND;
		case 0xA902: return Unicode_Category_ND;
		case 0xA903: return Unicode_Category_ND;
		case 0xA904: return Unicode_Category_ND;
		case 0xA905: return Unicode_Category_ND;
		case 0xA906: return Unicode_Category_ND;
		case 0xA907: return Unicode_Category_ND;
		case 0xA908: return Unicode_Category_ND;
		case 0xA909: return Unicode_Category_ND;
		case 0xA90A: return Unicode_Category_LO;
		case 0xA90B: return Unicode_Category_LO;
		case 0xA90C: return Unicode_Category_LO;
		case 0xA90D: return Unicode_Category_LO;
		case 0xA90E: return Unicode_Category_LO;
		case 0xA90F: return Unicode_Category_LO;
		case 0xA910: return Unicode_Category_LO;
		case 0xA911: return Unicode_Category_LO;
		case 0xA912: return Unicode_Category_LO;
		case 0xA913: return Unicode_Category_LO;
		case 0xA914: return Unicode_Category_LO;
		case 0xA915: return Unicode_Category_LO;
		case 0xA916: return Unicode_Category_LO;
		case 0xA917: return Unicode_Category_LO;
		case 0xA918: return Unicode_Category_LO;
		case 0xA919: return Unicode_Category_LO;
		case 0xA91A: return Unicode_Category_LO;
		case 0xA91B: return Unicode_Category_LO;
		case 0xA91C: return Unicode_Category_LO;
		case 0xA91D: return Unicode_Category_LO;
		case 0xA91E: return Unicode_Category_LO;
		case 0xA91F: return Unicode_Category_LO;
		case 0xA920: return Unicode_Category_LO;
		case 0xA921: return Unicode_Category_LO;
		case 0xA922: return Unicode_Category_LO;
		case 0xA923: return Unicode_Category_LO;
		case 0xA924: return Unicode_Category_LO;
		case 0xA925: return Unicode_Category_LO;
		case 0xA926: return Unicode_Category_MN;
		case 0xA927: return Unicode_Category_MN;
		case 0xA928: return Unicode_Category_MN;
		case 0xA929: return Unicode_Category_MN;
		case 0xA92A: return Unicode_Category_MN;
		case 0xA92B: return Unicode_Category_MN;
		case 0xA92C: return Unicode_Category_MN;
		case 0xA92D: return Unicode_Category_MN;
		case 0xA92E: return Unicode_Category_PO;
		case 0xA92F: return Unicode_Category_PO;
		case 0xA930: return Unicode_Category_LO;
		case 0xA931: return Unicode_Category_LO;
		case 0xA932: return Unicode_Category_LO;
		case 0xA933: return Unicode_Category_LO;
		case 0xA934: return Unicode_Category_LO;
		case 0xA935: return Unicode_Category_LO;
		case 0xA936: return Unicode_Category_LO;
		case 0xA937: return Unicode_Category_LO;
		case 0xA938: return Unicode_Category_LO;
		case 0xA939: return Unicode_Category_LO;
		case 0xA93A: return Unicode_Category_LO;
		case 0xA93B: return Unicode_Category_LO;
		case 0xA93C: return Unicode_Category_LO;
		case 0xA93D: return Unicode_Category_LO;
		case 0xA93E: return Unicode_Category_LO;
		case 0xA93F: return Unicode_Category_LO;
		case 0xA940: return Unicode_Category_LO;
		case 0xA941: return Unicode_Category_LO;
		case 0xA942: return Unicode_Category_LO;
		case 0xA943: return Unicode_Category_LO;
		case 0xA944: return Unicode_Category_LO;
		case 0xA945: return Unicode_Category_LO;
		case 0xA946: return Unicode_Category_LO;
		case 0xA947: return Unicode_Category_MN;
		case 0xA948: return Unicode_Category_MN;
		case 0xA949: return Unicode_Category_MN;
		case 0xA94A: return Unicode_Category_MN;
		case 0xA94B: return Unicode_Category_MN;
		case 0xA94C: return Unicode_Category_MN;
		case 0xA94D: return Unicode_Category_MN;
		case 0xA94E: return Unicode_Category_MN;
		case 0xA94F: return Unicode_Category_MN;
		case 0xA950: return Unicode_Category_MN;
		case 0xA951: return Unicode_Category_MN;
		case 0xA952: return Unicode_Category_MC;
		case 0xA953: return Unicode_Category_MC;
		case 0xA95F: return Unicode_Category_PO;
		case 0xA960: return Unicode_Category_LO;
		case 0xA961: return Unicode_Category_LO;
		case 0xA962: return Unicode_Category_LO;
		case 0xA963: return Unicode_Category_LO;
		case 0xA964: return Unicode_Category_LO;
		case 0xA965: return Unicode_Category_LO;
		case 0xA966: return Unicode_Category_LO;
		case 0xA967: return Unicode_Category_LO;
		case 0xA968: return Unicode_Category_LO;
		case 0xA969: return Unicode_Category_LO;
		case 0xA96A: return Unicode_Category_LO;
		case 0xA96B: return Unicode_Category_LO;
		case 0xA96C: return Unicode_Category_LO;
		case 0xA96D: return Unicode_Category_LO;
		case 0xA96E: return Unicode_Category_LO;
		case 0xA96F: return Unicode_Category_LO;
		case 0xA970: return Unicode_Category_LO;
		case 0xA971: return Unicode_Category_LO;
		case 0xA972: return Unicode_Category_LO;
		case 0xA973: return Unicode_Category_LO;
		case 0xA974: return Unicode_Category_LO;
		case 0xA975: return Unicode_Category_LO;
		case 0xA976: return Unicode_Category_LO;
		case 0xA977: return Unicode_Category_LO;
		case 0xA978: return Unicode_Category_LO;
		case 0xA979: return Unicode_Category_LO;
		case 0xA97A: return Unicode_Category_LO;
		case 0xA97B: return Unicode_Category_LO;
		case 0xA97C: return Unicode_Category_LO;
		case 0xA980: return Unicode_Category_MN;
		case 0xA981: return Unicode_Category_MN;
		case 0xA982: return Unicode_Category_MN;
		case 0xA983: return Unicode_Category_MC;
		case 0xA984: return Unicode_Category_LO;
		case 0xA985: return Unicode_Category_LO;
		case 0xA986: return Unicode_Category_LO;
		case 0xA987: return Unicode_Category_LO;
		case 0xA988: return Unicode_Category_LO;
		case 0xA989: return Unicode_Category_LO;
		case 0xA98A: return Unicode_Category_LO;
		case 0xA98B: return Unicode_Category_LO;
		case 0xA98C: return Unicode_Category_LO;
		case 0xA98D: return Unicode_Category_LO;
		case 0xA98E: return Unicode_Category_LO;
		case 0xA98F: return Unicode_Category_LO;
		case 0xA990: return Unicode_Category_LO;
		case 0xA991: return Unicode_Category_LO;
		case 0xA992: return Unicode_Category_LO;
		case 0xA993: return Unicode_Category_LO;
		case 0xA994: return Unicode_Category_LO;
		case 0xA995: return Unicode_Category_LO;
		case 0xA996: return Unicode_Category_LO;
		case 0xA997: return Unicode_Category_LO;
		case 0xA998: return Unicode_Category_LO;
		case 0xA999: return Unicode_Category_LO;
		case 0xA99A: return Unicode_Category_LO;
		case 0xA99B: return Unicode_Category_LO;
		case 0xA99C: return Unicode_Category_LO;
		case 0xA99D: return Unicode_Category_LO;
		case 0xA99E: return Unicode_Category_LO;
		case 0xA99F: return Unicode_Category_LO;
		case 0xA9A0: return Unicode_Category_LO;
		case 0xA9A1: return Unicode_Category_LO;
		case 0xA9A2: return Unicode_Category_LO;
		case 0xA9A3: return Unicode_Category_LO;
		case 0xA9A4: return Unicode_Category_LO;
		case 0xA9A5: return Unicode_Category_LO;
		case 0xA9A6: return Unicode_Category_LO;
		case 0xA9A7: return Unicode_Category_LO;
		case 0xA9A8: return Unicode_Category_LO;
		case 0xA9A9: return Unicode_Category_LO;
		case 0xA9AA: return Unicode_Category_LO;
		case 0xA9AB: return Unicode_Category_LO;
		case 0xA9AC: return Unicode_Category_LO;
		case 0xA9AD: return Unicode_Category_LO;
		case 0xA9AE: return Unicode_Category_LO;
		case 0xA9AF: return Unicode_Category_LO;
		case 0xA9B0: return Unicode_Category_LO;
		case 0xA9B1: return Unicode_Category_LO;
		case 0xA9B2: return Unicode_Category_LO;
		case 0xA9B3: return Unicode_Category_MN;
		case 0xA9B4: return Unicode_Category_MC;
		case 0xA9B5: return Unicode_Category_MC;
		case 0xA9B6: return Unicode_Category_MN;
		case 0xA9B7: return Unicode_Category_MN;
		case 0xA9B8: return Unicode_Category_MN;
		case 0xA9B9: return Unicode_Category_MN;
		case 0xA9BA: return Unicode_Category_MC;
		case 0xA9BB: return Unicode_Category_MC;
		case 0xA9BC: return Unicode_Category_MN;
		case 0xA9BD: return Unicode_Category_MN;
		case 0xA9BE: return Unicode_Category_MC;
		case 0xA9BF: return Unicode_Category_MC;
		case 0xA9C0: return Unicode_Category_MC;
		case 0xA9C1: return Unicode_Category_PO;
		case 0xA9C2: return Unicode_Category_PO;
		case 0xA9C3: return Unicode_Category_PO;
		case 0xA9C4: return Unicode_Category_PO;
		case 0xA9C5: return Unicode_Category_PO;
		case 0xA9C6: return Unicode_Category_PO;
		case 0xA9C7: return Unicode_Category_PO;
		case 0xA9C8: return Unicode_Category_PO;
		case 0xA9C9: return Unicode_Category_PO;
		case 0xA9CA: return Unicode_Category_PO;
		case 0xA9CB: return Unicode_Category_PO;
		case 0xA9CC: return Unicode_Category_PO;
		case 0xA9CD: return Unicode_Category_PO;
		case 0xA9CF: return Unicode_Category_LM;
		case 0xA9D0: return Unicode_Category_ND;
		case 0xA9D1: return Unicode_Category_ND;
		case 0xA9D2: return Unicode_Category_ND;
		case 0xA9D3: return Unicode_Category_ND;
		case 0xA9D4: return Unicode_Category_ND;
		case 0xA9D5: return Unicode_Category_ND;
		case 0xA9D6: return Unicode_Category_ND;
		case 0xA9D7: return Unicode_Category_ND;
		case 0xA9D8: return Unicode_Category_ND;
		case 0xA9D9: return Unicode_Category_ND;
		case 0xA9DE: return Unicode_Category_PO;
		case 0xA9DF: return Unicode_Category_PO;
		case 0xA9E0: return Unicode_Category_LO;
		case 0xA9E1: return Unicode_Category_LO;
		case 0xA9E2: return Unicode_Category_LO;
		case 0xA9E3: return Unicode_Category_LO;
		case 0xA9E4: return Unicode_Category_LO;
		case 0xA9E5: return Unicode_Category_MN;
		case 0xA9E6: return Unicode_Category_LM;
		case 0xA9E7: return Unicode_Category_LO;
		case 0xA9E8: return Unicode_Category_LO;
		case 0xA9E9: return Unicode_Category_LO;
		case 0xA9EA: return Unicode_Category_LO;
		case 0xA9EB: return Unicode_Category_LO;
		case 0xA9EC: return Unicode_Category_LO;
		case 0xA9ED: return Unicode_Category_LO;
		case 0xA9EE: return Unicode_Category_LO;
		case 0xA9EF: return Unicode_Category_LO;
		case 0xA9F0: return Unicode_Category_ND;
		case 0xA9F1: return Unicode_Category_ND;
		case 0xA9F2: return Unicode_Category_ND;
		case 0xA9F3: return Unicode_Category_ND;
		case 0xA9F4: return Unicode_Category_ND;
		case 0xA9F5: return Unicode_Category_ND;
		case 0xA9F6: return Unicode_Category_ND;
		case 0xA9F7: return Unicode_Category_ND;
		case 0xA9F8: return Unicode_Category_ND;
		case 0xA9F9: return Unicode_Category_ND;
		case 0xA9FA: return Unicode_Category_LO;
		case 0xA9FB: return Unicode_Category_LO;
		case 0xA9FC: return Unicode_Category_LO;
		case 0xA9FD: return Unicode_Category_LO;
		case 0xA9FE: return Unicode_Category_LO;
		case 0xAA00: return Unicode_Category_LO;
		case 0xAA01: return Unicode_Category_LO;
		case 0xAA02: return Unicode_Category_LO;
		case 0xAA03: return Unicode_Category_LO;
		case 0xAA04: return Unicode_Category_LO;
		case 0xAA05: return Unicode_Category_LO;
		case 0xAA06: return Unicode_Category_LO;
		case 0xAA07: return Unicode_Category_LO;
		case 0xAA08: return Unicode_Category_LO;
		case 0xAA09: return Unicode_Category_LO;
		case 0xAA0A: return Unicode_Category_LO;
		case 0xAA0B: return Unicode_Category_LO;
		case 0xAA0C: return Unicode_Category_LO;
		case 0xAA0D: return Unicode_Category_LO;
		case 0xAA0E: return Unicode_Category_LO;
		case 0xAA0F: return Unicode_Category_LO;
		case 0xAA10: return Unicode_Category_LO;
		case 0xAA11: return Unicode_Category_LO;
		case 0xAA12: return Unicode_Category_LO;
		case 0xAA13: return Unicode_Category_LO;
		case 0xAA14: return Unicode_Category_LO;
		case 0xAA15: return Unicode_Category_LO;
		case 0xAA16: return Unicode_Category_LO;
		case 0xAA17: return Unicode_Category_LO;
		case 0xAA18: return Unicode_Category_LO;
		case 0xAA19: return Unicode_Category_LO;
		case 0xAA1A: return Unicode_Category_LO;
		case 0xAA1B: return Unicode_Category_LO;
		case 0xAA1C: return Unicode_Category_LO;
		case 0xAA1D: return Unicode_Category_LO;
		case 0xAA1E: return Unicode_Category_LO;
		case 0xAA1F: return Unicode_Category_LO;
		case 0xAA20: return Unicode_Category_LO;
		case 0xAA21: return Unicode_Category_LO;
		case 0xAA22: return Unicode_Category_LO;
		case 0xAA23: return Unicode_Category_LO;
		case 0xAA24: return Unicode_Category_LO;
		case 0xAA25: return Unicode_Category_LO;
		case 0xAA26: return Unicode_Category_LO;
		case 0xAA27: return Unicode_Category_LO;
		case 0xAA28: return Unicode_Category_LO;
		case 0xAA29: return Unicode_Category_MN;
		case 0xAA2A: return Unicode_Category_MN;
		case 0xAA2B: return Unicode_Category_MN;
		case 0xAA2C: return Unicode_Category_MN;
		case 0xAA2D: return Unicode_Category_MN;
		case 0xAA2E: return Unicode_Category_MN;
		case 0xAA2F: return Unicode_Category_MC;
		case 0xAA30: return Unicode_Category_MC;
		case 0xAA31: return Unicode_Category_MN;
		case 0xAA32: return Unicode_Category_MN;
		case 0xAA33: return Unicode_Category_MC;
		case 0xAA34: return Unicode_Category_MC;
		case 0xAA35: return Unicode_Category_MN;
		case 0xAA36: return Unicode_Category_MN;
		case 0xAA40: return Unicode_Category_LO;
		case 0xAA41: return Unicode_Category_LO;
		case 0xAA42: return Unicode_Category_LO;
		case 0xAA43: return Unicode_Category_MN;
		case 0xAA44: return Unicode_Category_LO;
		case 0xAA45: return Unicode_Category_LO;
		case 0xAA46: return Unicode_Category_LO;
		case 0xAA47: return Unicode_Category_LO;
		case 0xAA48: return Unicode_Category_LO;
		case 0xAA49: return Unicode_Category_LO;
		case 0xAA4A: return Unicode_Category_LO;
		case 0xAA4B: return Unicode_Category_LO;
		case 0xAA4C: return Unicode_Category_MN;
		case 0xAA4D: return Unicode_Category_MC;
		case 0xAA50: return Unicode_Category_ND;
		case 0xAA51: return Unicode_Category_ND;
		case 0xAA52: return Unicode_Category_ND;
		case 0xAA53: return Unicode_Category_ND;
		case 0xAA54: return Unicode_Category_ND;
		case 0xAA55: return Unicode_Category_ND;
		case 0xAA56: return Unicode_Category_ND;
		case 0xAA57: return Unicode_Category_ND;
		case 0xAA58: return Unicode_Category_ND;
		case 0xAA59: return Unicode_Category_ND;
		case 0xAA5C: return Unicode_Category_PO;
		case 0xAA5D: return Unicode_Category_PO;
		case 0xAA5E: return Unicode_Category_PO;
		case 0xAA5F: return Unicode_Category_PO;
		case 0xAA60: return Unicode_Category_LO;
		case 0xAA61: return Unicode_Category_LO;
		case 0xAA62: return Unicode_Category_LO;
		case 0xAA63: return Unicode_Category_LO;
		case 0xAA64: return Unicode_Category_LO;
		case 0xAA65: return Unicode_Category_LO;
		case 0xAA66: return Unicode_Category_LO;
		case 0xAA67: return Unicode_Category_LO;
		case 0xAA68: return Unicode_Category_LO;
		case 0xAA69: return Unicode_Category_LO;
		case 0xAA6A: return Unicode_Category_LO;
		case 0xAA6B: return Unicode_Category_LO;
		case 0xAA6C: return Unicode_Category_LO;
		case 0xAA6D: return Unicode_Category_LO;
		case 0xAA6E: return Unicode_Category_LO;
		case 0xAA6F: return Unicode_Category_LO;
		case 0xAA70: return Unicode_Category_LM;
		case 0xAA71: return Unicode_Category_LO;
		case 0xAA72: return Unicode_Category_LO;
		case 0xAA73: return Unicode_Category_LO;
		case 0xAA74: return Unicode_Category_LO;
		case 0xAA75: return Unicode_Category_LO;
		case 0xAA76: return Unicode_Category_LO;
		case 0xAA77: return Unicode_Category_SO;
		case 0xAA78: return Unicode_Category_SO;
		case 0xAA79: return Unicode_Category_SO;
		case 0xAA7A: return Unicode_Category_LO;
		case 0xAA7B: return Unicode_Category_MC;
		case 0xAA7C: return Unicode_Category_MN;
		case 0xAA7D: return Unicode_Category_MC;
		case 0xAA7E: return Unicode_Category_LO;
		case 0xAA7F: return Unicode_Category_LO;
		case 0xAA80: return Unicode_Category_LO;
		case 0xAA81: return Unicode_Category_LO;
		case 0xAA82: return Unicode_Category_LO;
		case 0xAA83: return Unicode_Category_LO;
		case 0xAA84: return Unicode_Category_LO;
		case 0xAA85: return Unicode_Category_LO;
		case 0xAA86: return Unicode_Category_LO;
		case 0xAA87: return Unicode_Category_LO;
		case 0xAA88: return Unicode_Category_LO;
		case 0xAA89: return Unicode_Category_LO;
		case 0xAA8A: return Unicode_Category_LO;
		case 0xAA8B: return Unicode_Category_LO;
		case 0xAA8C: return Unicode_Category_LO;
		case 0xAA8D: return Unicode_Category_LO;
		case 0xAA8E: return Unicode_Category_LO;
		case 0xAA8F: return Unicode_Category_LO;
		case 0xAA90: return Unicode_Category_LO;
		case 0xAA91: return Unicode_Category_LO;
		case 0xAA92: return Unicode_Category_LO;
		case 0xAA93: return Unicode_Category_LO;
		case 0xAA94: return Unicode_Category_LO;
		case 0xAA95: return Unicode_Category_LO;
		case 0xAA96: return Unicode_Category_LO;
		case 0xAA97: return Unicode_Category_LO;
		case 0xAA98: return Unicode_Category_LO;
		case 0xAA99: return Unicode_Category_LO;
		case 0xAA9A: return Unicode_Category_LO;
		case 0xAA9B: return Unicode_Category_LO;
		case 0xAA9C: return Unicode_Category_LO;
		case 0xAA9D: return Unicode_Category_LO;
		case 0xAA9E: return Unicode_Category_LO;
		case 0xAA9F: return Unicode_Category_LO;
		case 0xAAA0: return Unicode_Category_LO;
		case 0xAAA1: return Unicode_Category_LO;
		case 0xAAA2: return Unicode_Category_LO;
		case 0xAAA3: return Unicode_Category_LO;
		case 0xAAA4: return Unicode_Category_LO;
		case 0xAAA5: return Unicode_Category_LO;
		case 0xAAA6: return Unicode_Category_LO;
		case 0xAAA7: return Unicode_Category_LO;
		case 0xAAA8: return Unicode_Category_LO;
		case 0xAAA9: return Unicode_Category_LO;
		case 0xAAAA: return Unicode_Category_LO;
		case 0xAAAB: return Unicode_Category_LO;
		case 0xAAAC: return Unicode_Category_LO;
		case 0xAAAD: return Unicode_Category_LO;
		case 0xAAAE: return Unicode_Category_LO;
		case 0xAAAF: return Unicode_Category_LO;
		case 0xAAB0: return Unicode_Category_MN;
		case 0xAAB1: return Unicode_Category_LO;
		case 0xAAB2: return Unicode_Category_MN;
		case 0xAAB3: return Unicode_Category_MN;
		case 0xAAB4: return Unicode_Category_MN;
		case 0xAAB5: return Unicode_Category_LO;
		case 0xAAB6: return Unicode_Category_LO;
		case 0xAAB7: return Unicode_Category_MN;
		case 0xAAB8: return Unicode_Category_MN;
		case 0xAAB9: return Unicode_Category_LO;
		case 0xAABA: return Unicode_Category_LO;
		case 0xAABB: return Unicode_Category_LO;
		case 0xAABC: return Unicode_Category_LO;
		case 0xAABD: return Unicode_Category_LO;
		case 0xAABE: return Unicode_Category_MN;
		case 0xAABF: return Unicode_Category_MN;
		case 0xAAC0: return Unicode_Category_LO;
		case 0xAAC1: return Unicode_Category_MN;
		case 0xAAC2: return Unicode_Category_LO;
		case 0xAADB: return Unicode_Category_LO;
		case 0xAADC: return Unicode_Category_LO;
		case 0xAADD: return Unicode_Category_LM;
		case 0xAADE: return Unicode_Category_PO;
		case 0xAADF: return Unicode_Category_PO;
		case 0xAAE0: return Unicode_Category_LO;
		case 0xAAE1: return Unicode_Category_LO;
		case 0xAAE2: return Unicode_Category_LO;
		case 0xAAE3: return Unicode_Category_LO;
		case 0xAAE4: return Unicode_Category_LO;
		case 0xAAE5: return Unicode_Category_LO;
		case 0xAAE6: return Unicode_Category_LO;
		case 0xAAE7: return Unicode_Category_LO;
		case 0xAAE8: return Unicode_Category_LO;
		case 0xAAE9: return Unicode_Category_LO;
		case 0xAAEA: return Unicode_Category_LO;
		case 0xAAEB: return Unicode_Category_MC;
		case 0xAAEC: return Unicode_Category_MN;
		case 0xAAED: return Unicode_Category_MN;
		case 0xAAEE: return Unicode_Category_MC;
		case 0xAAEF: return Unicode_Category_MC;
		case 0xAAF0: return Unicode_Category_PO;
		case 0xAAF1: return Unicode_Category_PO;
		case 0xAAF2: return Unicode_Category_LO;
		case 0xAAF3: return Unicode_Category_LM;
		case 0xAAF4: return Unicode_Category_LM;
		case 0xAAF5: return Unicode_Category_MC;
		case 0xAAF6: return Unicode_Category_MN;
		case 0xAB01: return Unicode_Category_LO;
		case 0xAB02: return Unicode_Category_LO;
		case 0xAB03: return Unicode_Category_LO;
		case 0xAB04: return Unicode_Category_LO;
		case 0xAB05: return Unicode_Category_LO;
		case 0xAB06: return Unicode_Category_LO;
		case 0xAB09: return Unicode_Category_LO;
		case 0xAB0A: return Unicode_Category_LO;
		case 0xAB0B: return Unicode_Category_LO;
		case 0xAB0C: return Unicode_Category_LO;
		case 0xAB0D: return Unicode_Category_LO;
		case 0xAB0E: return Unicode_Category_LO;
		case 0xAB11: return Unicode_Category_LO;
		case 0xAB12: return Unicode_Category_LO;
		case 0xAB13: return Unicode_Category_LO;
		case 0xAB14: return Unicode_Category_LO;
		case 0xAB15: return Unicode_Category_LO;
		case 0xAB16: return Unicode_Category_LO;
		case 0xAB20: return Unicode_Category_LO;
		case 0xAB21: return Unicode_Category_LO;
		case 0xAB22: return Unicode_Category_LO;
		case 0xAB23: return Unicode_Category_LO;
		case 0xAB24: return Unicode_Category_LO;
		case 0xAB25: return Unicode_Category_LO;
		case 0xAB26: return Unicode_Category_LO;
		case 0xAB28: return Unicode_Category_LO;
		case 0xAB29: return Unicode_Category_LO;
		case 0xAB2A: return Unicode_Category_LO;
		case 0xAB2B: return Unicode_Category_LO;
		case 0xAB2C: return Unicode_Category_LO;
		case 0xAB2D: return Unicode_Category_LO;
		case 0xAB2E: return Unicode_Category_LO;
		case 0xAB30: return Unicode_Category_LL;
		case 0xAB31: return Unicode_Category_LL;
		case 0xAB32: return Unicode_Category_LL;
		case 0xAB33: return Unicode_Category_LL;
		case 0xAB34: return Unicode_Category_LL;
		case 0xAB35: return Unicode_Category_LL;
		case 0xAB36: return Unicode_Category_LL;
		case 0xAB37: return Unicode_Category_LL;
		case 0xAB38: return Unicode_Category_LL;
		case 0xAB39: return Unicode_Category_LL;
		case 0xAB3A: return Unicode_Category_LL;
		case 0xAB3B: return Unicode_Category_LL;
		case 0xAB3C: return Unicode_Category_LL;
		case 0xAB3D: return Unicode_Category_LL;
		case 0xAB3E: return Unicode_Category_LL;
		case 0xAB3F: return Unicode_Category_LL;
		case 0xAB40: return Unicode_Category_LL;
		case 0xAB41: return Unicode_Category_LL;
		case 0xAB42: return Unicode_Category_LL;
		case 0xAB43: return Unicode_Category_LL;
		case 0xAB44: return Unicode_Category_LL;
		case 0xAB45: return Unicode_Category_LL;
		case 0xAB46: return Unicode_Category_LL;
		case 0xAB47: return Unicode_Category_LL;
		case 0xAB48: return Unicode_Category_LL;
		case 0xAB49: return Unicode_Category_LL;
		case 0xAB4A: return Unicode_Category_LL;
		case 0xAB4B: return Unicode_Category_LL;
		case 0xAB4C: return Unicode_Category_LL;
		case 0xAB4D: return Unicode_Category_LL;
		case 0xAB4E: return Unicode_Category_LL;
		case 0xAB4F: return Unicode_Category_LL;
		case 0xAB50: return Unicode_Category_LL;
		case 0xAB51: return Unicode_Category_LL;
		case 0xAB52: return Unicode_Category_LL;
		case 0xAB53: return Unicode_Category_LL;
		case 0xAB54: return Unicode_Category_LL;
		case 0xAB55: return Unicode_Category_LL;
		case 0xAB56: return Unicode_Category_LL;
		case 0xAB57: return Unicode_Category_LL;
		case 0xAB58: return Unicode_Category_LL;
		case 0xAB59: return Unicode_Category_LL;
		case 0xAB5A: return Unicode_Category_LL;
		case 0xAB5B: return Unicode_Category_SK;
		case 0xAB5C: return Unicode_Category_LM;
		case 0xAB5D: return Unicode_Category_LM;
		case 0xAB5E: return Unicode_Category_LM;
		case 0xAB5F: return Unicode_Category_LM;
		case 0xAB60: return Unicode_Category_LL;
		case 0xAB61: return Unicode_Category_LL;
		case 0xAB62: return Unicode_Category_LL;
		case 0xAB63: return Unicode_Category_LL;
		case 0xAB64: return Unicode_Category_LL;
		case 0xAB65: return Unicode_Category_LL;
		case 0xAB66: return Unicode_Category_LL;
		case 0xAB67: return Unicode_Category_LL;
		case 0xAB68: return Unicode_Category_LL;
		case 0xAB69: return Unicode_Category_LM;
		case 0xAB6A: return Unicode_Category_SK;
		case 0xAB6B: return Unicode_Category_SK;
		case 0xAB70: return Unicode_Category_LL;
		case 0xAB71: return Unicode_Category_LL;
		case 0xAB72: return Unicode_Category_LL;
		case 0xAB73: return Unicode_Category_LL;
		case 0xAB74: return Unicode_Category_LL;
		case 0xAB75: return Unicode_Category_LL;
		case 0xAB76: return Unicode_Category_LL;
		case 0xAB77: return Unicode_Category_LL;
		case 0xAB78: return Unicode_Category_LL;
		case 0xAB79: return Unicode_Category_LL;
		case 0xAB7A: return Unicode_Category_LL;
		case 0xAB7B: return Unicode_Category_LL;
		case 0xAB7C: return Unicode_Category_LL;
		case 0xAB7D: return Unicode_Category_LL;
		case 0xAB7E: return Unicode_Category_LL;
		case 0xAB7F: return Unicode_Category_LL;
		case 0xAB80: return Unicode_Category_LL;
		case 0xAB81: return Unicode_Category_LL;
		case 0xAB82: return Unicode_Category_LL;
		case 0xAB83: return Unicode_Category_LL;
		case 0xAB84: return Unicode_Category_LL;
		case 0xAB85: return Unicode_Category_LL;
		case 0xAB86: return Unicode_Category_LL;
		case 0xAB87: return Unicode_Category_LL;
		case 0xAB88: return Unicode_Category_LL;
		case 0xAB89: return Unicode_Category_LL;
		case 0xAB8A: return Unicode_Category_LL;
		case 0xAB8B: return Unicode_Category_LL;
		case 0xAB8C: return Unicode_Category_LL;
		case 0xAB8D: return Unicode_Category_LL;
		case 0xAB8E: return Unicode_Category_LL;
		case 0xAB8F: return Unicode_Category_LL;
		case 0xAB90: return Unicode_Category_LL;
		case 0xAB91: return Unicode_Category_LL;
		case 0xAB92: return Unicode_Category_LL;
		case 0xAB93: return Unicode_Category_LL;
		case 0xAB94: return Unicode_Category_LL;
		case 0xAB95: return Unicode_Category_LL;
		case 0xAB96: return Unicode_Category_LL;
		case 0xAB97: return Unicode_Category_LL;
		case 0xAB98: return Unicode_Category_LL;
		case 0xAB99: return Unicode_Category_LL;
		case 0xAB9A: return Unicode_Category_LL;
		case 0xAB9B: return Unicode_Category_LL;
		case 0xAB9C: return Unicode_Category_LL;
		case 0xAB9D: return Unicode_Category_LL;
		case 0xAB9E: return Unicode_Category_LL;
		case 0xAB9F: return Unicode_Category_LL;
		case 0xABA0: return Unicode_Category_LL;
		case 0xABA1: return Unicode_Category_LL;
		case 0xABA2: return Unicode_Category_LL;
		case 0xABA3: return Unicode_Category_LL;
		case 0xABA4: return Unicode_Category_LL;
		case 0xABA5: return Unicode_Category_LL;
		case 0xABA6: return Unicode_Category_LL;
		case 0xABA7: return Unicode_Category_LL;
		case 0xABA8: return Unicode_Category_LL;
		case 0xABA9: return Unicode_Category_LL;
		case 0xABAA: return Unicode_Category_LL;
		case 0xABAB: return Unicode_Category_LL;
		case 0xABAC: return Unicode_Category_LL;
		case 0xABAD: return Unicode_Category_LL;
		case 0xABAE: return Unicode_Category_LL;
		case 0xABAF: return Unicode_Category_LL;
		case 0xABB0: return Unicode_Category_LL;
		case 0xABB1: return Unicode_Category_LL;
		case 0xABB2: return Unicode_Category_LL;
		case 0xABB3: return Unicode_Category_LL;
		case 0xABB4: return Unicode_Category_LL;
		case 0xABB5: return Unicode_Category_LL;
		case 0xABB6: return Unicode_Category_LL;
		case 0xABB7: return Unicode_Category_LL;
		case 0xABB8: return Unicode_Category_LL;
		case 0xABB9: return Unicode_Category_LL;
		case 0xABBA: return Unicode_Category_LL;
		case 0xABBB: return Unicode_Category_LL;
		case 0xABBC: return Unicode_Category_LL;
		case 0xABBD: return Unicode_Category_LL;
		case 0xABBE: return Unicode_Category_LL;
		case 0xABBF: return Unicode_Category_LL;
		case 0xABC0: return Unicode_Category_LO;
		case 0xABC1: return Unicode_Category_LO;
		case 0xABC2: return Unicode_Category_LO;
		case 0xABC3: return Unicode_Category_LO;
		case 0xABC4: return Unicode_Category_LO;
		case 0xABC5: return Unicode_Category_LO;
		case 0xABC6: return Unicode_Category_LO;
		case 0xABC7: return Unicode_Category_LO;
		case 0xABC8: return Unicode_Category_LO;
		case 0xABC9: return Unicode_Category_LO;
		case 0xABCA: return Unicode_Category_LO;
		case 0xABCB: return Unicode_Category_LO;
		case 0xABCC: return Unicode_Category_LO;
		case 0xABCD: return Unicode_Category_LO;
		case 0xABCE: return Unicode_Category_LO;
		case 0xABCF: return Unicode_Category_LO;
		case 0xABD0: return Unicode_Category_LO;
		case 0xABD1: return Unicode_Category_LO;
		case 0xABD2: return Unicode_Category_LO;
		case 0xABD3: return Unicode_Category_LO;
		case 0xABD4: return Unicode_Category_LO;
		case 0xABD5: return Unicode_Category_LO;
		case 0xABD6: return Unicode_Category_LO;
		case 0xABD7: return Unicode_Category_LO;
		case 0xABD8: return Unicode_Category_LO;
		case 0xABD9: return Unicode_Category_LO;
		case 0xABDA: return Unicode_Category_LO;
		case 0xABDB: return Unicode_Category_LO;
		case 0xABDC: return Unicode_Category_LO;
		case 0xABDD: return Unicode_Category_LO;
		case 0xABDE: return Unicode_Category_LO;
		case 0xABDF: return Unicode_Category_LO;
		case 0xABE0: return Unicode_Category_LO;
		case 0xABE1: return Unicode_Category_LO;
		case 0xABE2: return Unicode_Category_LO;
		case 0xABE3: return Unicode_Category_MC;
		case 0xABE4: return Unicode_Category_MC;
		case 0xABE5: return Unicode_Category_MN;
		case 0xABE6: return Unicode_Category_MC;
		case 0xABE7: return Unicode_Category_MC;
		case 0xABE8: return Unicode_Category_MN;
		case 0xABE9: return Unicode_Category_MC;
		case 0xABEA: return Unicode_Category_MC;
		case 0xABEB: return Unicode_Category_PO;
		case 0xABEC: return Unicode_Category_MC;
		case 0xABED: return Unicode_Category_MN;
		case 0xABF0: return Unicode_Category_ND;
		case 0xABF1: return Unicode_Category_ND;
		case 0xABF2: return Unicode_Category_ND;
		case 0xABF3: return Unicode_Category_ND;
		case 0xABF4: return Unicode_Category_ND;
		case 0xABF5: return Unicode_Category_ND;
		case 0xABF6: return Unicode_Category_ND;
		case 0xABF7: return Unicode_Category_ND;
		case 0xABF8: return Unicode_Category_ND;
		case 0xABF9: return Unicode_Category_ND;
		case 0xAC00: return Unicode_Category_LO;
		case 0xD7A3: return Unicode_Category_LO;
		case 0xD7B0: return Unicode_Category_LO;
		case 0xD7B1: return Unicode_Category_LO;
		case 0xD7B2: return Unicode_Category_LO;
		case 0xD7B3: return Unicode_Category_LO;
		case 0xD7B4: return Unicode_Category_LO;
		case 0xD7B5: return Unicode_Category_LO;
		case 0xD7B6: return Unicode_Category_LO;
		case 0xD7B7: return Unicode_Category_LO;
		case 0xD7B8: return Unicode_Category_LO;
		case 0xD7B9: return Unicode_Category_LO;
		case 0xD7BA: return Unicode_Category_LO;
		case 0xD7BB: return Unicode_Category_LO;
		case 0xD7BC: return Unicode_Category_LO;
		case 0xD7BD: return Unicode_Category_LO;
		case 0xD7BE: return Unicode_Category_LO;
		case 0xD7BF: return Unicode_Category_LO;
		case 0xD7C0: return Unicode_Category_LO;
		case 0xD7C1: return Unicode_Category_LO;
		case 0xD7C2: return Unicode_Category_LO;
		case 0xD7C3: return Unicode_Category_LO;
		case 0xD7C4: return Unicode_Category_LO;
		case 0xD7C5: return Unicode_Category_LO;
		case 0xD7C6: return Unicode_Category_LO;
		case 0xD7CB: return Unicode_Category_LO;
		case 0xD7CC: return Unicode_Category_LO;
		case 0xD7CD: return Unicode_Category_LO;
		case 0xD7CE: return Unicode_Category_LO;
		case 0xD7CF: return Unicode_Category_LO;
		case 0xD7D0: return Unicode_Category_LO;
		case 0xD7D1: return Unicode_Category_LO;
		case 0xD7D2: return Unicode_Category_LO;
		case 0xD7D3: return Unicode_Category_LO;
		case 0xD7D4: return Unicode_Category_LO;
		case 0xD7D5: return Unicode_Category_LO;
		case 0xD7D6: return Unicode_Category_LO;
		case 0xD7D7: return Unicode_Category_LO;
		case 0xD7D8: return Unicode_Category_LO;
		case 0xD7D9: return Unicode_Category_LO;
		case 0xD7DA: return Unicode_Category_LO;
		case 0xD7DB: return Unicode_Category_LO;
		case 0xD7DC: return Unicode_Category_LO;
		case 0xD7DD: return Unicode_Category_LO;
		case 0xD7DE: return Unicode_Category_LO;
		case 0xD7DF: return Unicode_Category_LO;
		case 0xD7E0: return Unicode_Category_LO;
		case 0xD7E1: return Unicode_Category_LO;
		case 0xD7E2: return Unicode_Category_LO;
		case 0xD7E3: return Unicode_Category_LO;
		case 0xD7E4: return Unicode_Category_LO;
		case 0xD7E5: return Unicode_Category_LO;
		case 0xD7E6: return Unicode_Category_LO;
		case 0xD7E7: return Unicode_Category_LO;
		case 0xD7E8: return Unicode_Category_LO;
		case 0xD7E9: return Unicode_Category_LO;
		case 0xD7EA: return Unicode_Category_LO;
		case 0xD7EB: return Unicode_Category_LO;
		case 0xD7EC: return Unicode_Category_LO;
		case 0xD7ED: return Unicode_Category_LO;
		case 0xD7EE: return Unicode_Category_LO;
		case 0xD7EF: return Unicode_Category_LO;
		case 0xD7F0: return Unicode_Category_LO;
		case 0xD7F1: return Unicode_Category_LO;
		case 0xD7F2: return Unicode_Category_LO;
		case 0xD7F3: return Unicode_Category_LO;
		case 0xD7F4: return Unicode_Category_LO;
		case 0xD7F5: return Unicode_Category_LO;
		case 0xD7F6: return Unicode_Category_LO;
		case 0xD7F7: return Unicode_Category_LO;
		case 0xD7F8: return Unicode_Category_LO;
		case 0xD7F9: return Unicode_Category_LO;
		case 0xD7FA: return Unicode_Category_LO;
		case 0xD7FB: return Unicode_Category_LO;
		case 0xD800: return Unicode_Category_CS;
		case 0xDB7F: return Unicode_Category_CS;
		case 0xDB80: return Unicode_Category_CS;
		case 0xDBFF: return Unicode_Category_CS;
		case 0xDC00: return Unicode_Category_CS;
		case 0xDFFF: return Unicode_Category_CS;
		case 0xE000: return Unicode_Category_CO;
		case 0xF8FF: return Unicode_Category_CO;
		case 0xF900: return Unicode_Category_LO;
		case 0xF901: return Unicode_Category_LO;
		case 0xF902: return Unicode_Category_LO;
		case 0xF903: return Unicode_Category_LO;
		case 0xF904: return Unicode_Category_LO;
		case 0xF905: return Unicode_Category_LO;
		case 0xF906: return Unicode_Category_LO;
		case 0xF907: return Unicode_Category_LO;
		case 0xF908: return Unicode_Category_LO;
		case 0xF909: return Unicode_Category_LO;
		case 0xF90A: return Unicode_Category_LO;
		case 0xF90B: return Unicode_Category_LO;
		case 0xF90C: return Unicode_Category_LO;
		case 0xF90D: return Unicode_Category_LO;
		case 0xF90E: return Unicode_Category_LO;
		case 0xF90F: return Unicode_Category_LO;
		case 0xF910: return Unicode_Category_LO;
		case 0xF911: return Unicode_Category_LO;
		case 0xF912: return Unicode_Category_LO;
		case 0xF913: return Unicode_Category_LO;
		case 0xF914: return Unicode_Category_LO;
		case 0xF915: return Unicode_Category_LO;
		case 0xF916: return Unicode_Category_LO;
		case 0xF917: return Unicode_Category_LO;
		case 0xF918: return Unicode_Category_LO;
		case 0xF919: return Unicode_Category_LO;
		case 0xF91A: return Unicode_Category_LO;
		case 0xF91B: return Unicode_Category_LO;
		case 0xF91C: return Unicode_Category_LO;
		case 0xF91D: return Unicode_Category_LO;
		case 0xF91E: return Unicode_Category_LO;
		case 0xF91F: return Unicode_Category_LO;
		case 0xF920: return Unicode_Category_LO;
		case 0xF921: return Unicode_Category_LO;
		case 0xF922: return Unicode_Category_LO;
		case 0xF923: return Unicode_Category_LO;
		case 0xF924: return Unicode_Category_LO;
		case 0xF925: return Unicode_Category_LO;
		case 0xF926: return Unicode_Category_LO;
		case 0xF927: return Unicode_Category_LO;
		case 0xF928: return Unicode_Category_LO;
		case 0xF929: return Unicode_Category_LO;
		case 0xF92A: return Unicode_Category_LO;
		case 0xF92B: return Unicode_Category_LO;
		case 0xF92C: return Unicode_Category_LO;
		case 0xF92D: return Unicode_Category_LO;
		case 0xF92E: return Unicode_Category_LO;
		case 0xF92F: return Unicode_Category_LO;
		case 0xF930: return Unicode_Category_LO;
		case 0xF931: return Unicode_Category_LO;
		case 0xF932: return Unicode_Category_LO;
		case 0xF933: return Unicode_Category_LO;
		case 0xF934: return Unicode_Category_LO;
		case 0xF935: return Unicode_Category_LO;
		case 0xF936: return Unicode_Category_LO;
		case 0xF937: return Unicode_Category_LO;
		case 0xF938: return Unicode_Category_LO;
		case 0xF939: return Unicode_Category_LO;
		case 0xF93A: return Unicode_Category_LO;
		case 0xF93B: return Unicode_Category_LO;
		case 0xF93C: return Unicode_Category_LO;
		case 0xF93D: return Unicode_Category_LO;
		case 0xF93E: return Unicode_Category_LO;
		case 0xF93F: return Unicode_Category_LO;
		case 0xF940: return Unicode_Category_LO;
		case 0xF941: return Unicode_Category_LO;
		case 0xF942: return Unicode_Category_LO;
		case 0xF943: return Unicode_Category_LO;
		case 0xF944: return Unicode_Category_LO;
		case 0xF945: return Unicode_Category_LO;
		case 0xF946: return Unicode_Category_LO;
		case 0xF947: return Unicode_Category_LO;
		case 0xF948: return Unicode_Category_LO;
		case 0xF949: return Unicode_Category_LO;
		case 0xF94A: return Unicode_Category_LO;
		case 0xF94B: return Unicode_Category_LO;
		case 0xF94C: return Unicode_Category_LO;
		case 0xF94D: return Unicode_Category_LO;
		case 0xF94E: return Unicode_Category_LO;
		case 0xF94F: return Unicode_Category_LO;
		case 0xF950: return Unicode_Category_LO;
		case 0xF951: return Unicode_Category_LO;
		case 0xF952: return Unicode_Category_LO;
		case 0xF953: return Unicode_Category_LO;
		case 0xF954: return Unicode_Category_LO;
		case 0xF955: return Unicode_Category_LO;
		case 0xF956: return Unicode_Category_LO;
		case 0xF957: return Unicode_Category_LO;
		case 0xF958: return Unicode_Category_LO;
		case 0xF959: return Unicode_Category_LO;
		case 0xF95A: return Unicode_Category_LO;
		case 0xF95B: return Unicode_Category_LO;
		case 0xF95C: return Unicode_Category_LO;
		case 0xF95D: return Unicode_Category_LO;
		case 0xF95E: return Unicode_Category_LO;
		case 0xF95F: return Unicode_Category_LO;
		case 0xF960: return Unicode_Category_LO;
		case 0xF961: return Unicode_Category_LO;
		case 0xF962: return Unicode_Category_LO;
		case 0xF963: return Unicode_Category_LO;
		case 0xF964: return Unicode_Category_LO;
		case 0xF965: return Unicode_Category_LO;
		case 0xF966: return Unicode_Category_LO;
		case 0xF967: return Unicode_Category_LO;
		case 0xF968: return Unicode_Category_LO;
		case 0xF969: return Unicode_Category_LO;
		case 0xF96A: return Unicode_Category_LO;
		case 0xF96B: return Unicode_Category_LO;
		case 0xF96C: return Unicode_Category_LO;
		case 0xF96D: return Unicode_Category_LO;
		case 0xF96E: return Unicode_Category_LO;
		case 0xF96F: return Unicode_Category_LO;
		case 0xF970: return Unicode_Category_LO;
		case 0xF971: return Unicode_Category_LO;
		case 0xF972: return Unicode_Category_LO;
		case 0xF973: return Unicode_Category_LO;
		case 0xF974: return Unicode_Category_LO;
		case 0xF975: return Unicode_Category_LO;
		case 0xF976: return Unicode_Category_LO;
		case 0xF977: return Unicode_Category_LO;
		case 0xF978: return Unicode_Category_LO;
		case 0xF979: return Unicode_Category_LO;
		case 0xF97A: return Unicode_Category_LO;
		case 0xF97B: return Unicode_Category_LO;
		case 0xF97C: return Unicode_Category_LO;
		case 0xF97D: return Unicode_Category_LO;
		case 0xF97E: return Unicode_Category_LO;
		case 0xF97F: return Unicode_Category_LO;
		case 0xF980: return Unicode_Category_LO;
		case 0xF981: return Unicode_Category_LO;
		case 0xF982: return Unicode_Category_LO;
		case 0xF983: return Unicode_Category_LO;
		case 0xF984: return Unicode_Category_LO;
		case 0xF985: return Unicode_Category_LO;
		case 0xF986: return Unicode_Category_LO;
		case 0xF987: return Unicode_Category_LO;
		case 0xF988: return Unicode_Category_LO;
		case 0xF989: return Unicode_Category_LO;
		case 0xF98A: return Unicode_Category_LO;
		case 0xF98B: return Unicode_Category_LO;
		case 0xF98C: return Unicode_Category_LO;
		case 0xF98D: return Unicode_Category_LO;
		case 0xF98E: return Unicode_Category_LO;
		case 0xF98F: return Unicode_Category_LO;
		case 0xF990: return Unicode_Category_LO;
		case 0xF991: return Unicode_Category_LO;
		case 0xF992: return Unicode_Category_LO;
		case 0xF993: return Unicode_Category_LO;
		case 0xF994: return Unicode_Category_LO;
		case 0xF995: return Unicode_Category_LO;
		case 0xF996: return Unicode_Category_LO;
		case 0xF997: return Unicode_Category_LO;
		case 0xF998: return Unicode_Category_LO;
		case 0xF999: return Unicode_Category_LO;
		case 0xF99A: return Unicode_Category_LO;
		case 0xF99B: return Unicode_Category_LO;
		case 0xF99C: return Unicode_Category_LO;
		case 0xF99D: return Unicode_Category_LO;
		case 0xF99E: return Unicode_Category_LO;
		case 0xF99F: return Unicode_Category_LO;
		case 0xF9A0: return Unicode_Category_LO;
		case 0xF9A1: return Unicode_Category_LO;
		case 0xF9A2: return Unicode_Category_LO;
		case 0xF9A3: return Unicode_Category_LO;
		case 0xF9A4: return Unicode_Category_LO;
		case 0xF9A5: return Unicode_Category_LO;
		case 0xF9A6: return Unicode_Category_LO;
		case 0xF9A7: return Unicode_Category_LO;
		case 0xF9A8: return Unicode_Category_LO;
		case 0xF9A9: return Unicode_Category_LO;
		case 0xF9AA: return Unicode_Category_LO;
		case 0xF9AB: return Unicode_Category_LO;
		case 0xF9AC: return Unicode_Category_LO;
		case 0xF9AD: return Unicode_Category_LO;
		case 0xF9AE: return Unicode_Category_LO;
		case 0xF9AF: return Unicode_Category_LO;
		case 0xF9B0: return Unicode_Category_LO;
		case 0xF9B1: return Unicode_Category_LO;
		case 0xF9B2: return Unicode_Category_LO;
		case 0xF9B3: return Unicode_Category_LO;
		case 0xF9B4: return Unicode_Category_LO;
		case 0xF9B5: return Unicode_Category_LO;
		case 0xF9B6: return Unicode_Category_LO;
		case 0xF9B7: return Unicode_Category_LO;
		case 0xF9B8: return Unicode_Category_LO;
		case 0xF9B9: return Unicode_Category_LO;
		case 0xF9BA: return Unicode_Category_LO;
		case 0xF9BB: return Unicode_Category_LO;
		case 0xF9BC: return Unicode_Category_LO;
		case 0xF9BD: return Unicode_Category_LO;
		case 0xF9BE: return Unicode_Category_LO;
		case 0xF9BF: return Unicode_Category_LO;
		case 0xF9C0: return Unicode_Category_LO;
		case 0xF9C1: return Unicode_Category_LO;
		case 0xF9C2: return Unicode_Category_LO;
		case 0xF9C3: return Unicode_Category_LO;
		case 0xF9C4: return Unicode_Category_LO;
		case 0xF9C5: return Unicode_Category_LO;
		case 0xF9C6: return Unicode_Category_LO;
		case 0xF9C7: return Unicode_Category_LO;
		case 0xF9C8: return Unicode_Category_LO;
		case 0xF9C9: return Unicode_Category_LO;
		case 0xF9CA: return Unicode_Category_LO;
		case 0xF9CB: return Unicode_Category_LO;
		case 0xF9CC: return Unicode_Category_LO;
		case 0xF9CD: return Unicode_Category_LO;
		case 0xF9CE: return Unicode_Category_LO;
		case 0xF9CF: return Unicode_Category_LO;
		case 0xF9D0: return Unicode_Category_LO;
		case 0xF9D1: return Unicode_Category_LO;
		case 0xF9D2: return Unicode_Category_LO;
		case 0xF9D3: return Unicode_Category_LO;
		case 0xF9D4: return Unicode_Category_LO;
		case 0xF9D5: return Unicode_Category_LO;
		case 0xF9D6: return Unicode_Category_LO;
		case 0xF9D7: return Unicode_Category_LO;
		case 0xF9D8: return Unicode_Category_LO;
		case 0xF9D9: return Unicode_Category_LO;
		case 0xF9DA: return Unicode_Category_LO;
		case 0xF9DB: return Unicode_Category_LO;
		case 0xF9DC: return Unicode_Category_LO;
		case 0xF9DD: return Unicode_Category_LO;
		case 0xF9DE: return Unicode_Category_LO;
		case 0xF9DF: return Unicode_Category_LO;
		case 0xF9E0: return Unicode_Category_LO;
		case 0xF9E1: return Unicode_Category_LO;
		case 0xF9E2: return Unicode_Category_LO;
		case 0xF9E3: return Unicode_Category_LO;
		case 0xF9E4: return Unicode_Category_LO;
		case 0xF9E5: return Unicode_Category_LO;
		case 0xF9E6: return Unicode_Category_LO;
		case 0xF9E7: return Unicode_Category_LO;
		case 0xF9E8: return Unicode_Category_LO;
		case 0xF9E9: return Unicode_Category_LO;
		case 0xF9EA: return Unicode_Category_LO;
		case 0xF9EB: return Unicode_Category_LO;
		case 0xF9EC: return Unicode_Category_LO;
		case 0xF9ED: return Unicode_Category_LO;
		case 0xF9EE: return Unicode_Category_LO;
		case 0xF9EF: return Unicode_Category_LO;
		case 0xF9F0: return Unicode_Category_LO;
		case 0xF9F1: return Unicode_Category_LO;
		case 0xF9F2: return Unicode_Category_LO;
		case 0xF9F3: return Unicode_Category_LO;
		case 0xF9F4: return Unicode_Category_LO;
		case 0xF9F5: return Unicode_Category_LO;
		case 0xF9F6: return Unicode_Category_LO;
		case 0xF9F7: return Unicode_Category_LO;
		case 0xF9F8: return Unicode_Category_LO;
		case 0xF9F9: return Unicode_Category_LO;
		case 0xF9FA: return Unicode_Category_LO;
		case 0xF9FB: return Unicode_Category_LO;
		case 0xF9FC: return Unicode_Category_LO;
		case 0xF9FD: return Unicode_Category_LO;
		case 0xF9FE: return Unicode_Category_LO;
		case 0xF9FF: return Unicode_Category_LO;
		case 0xFA00: return Unicode_Category_LO;
		case 0xFA01: return Unicode_Category_LO;
		case 0xFA02: return Unicode_Category_LO;
		case 0xFA03: return Unicode_Category_LO;
		case 0xFA04: return Unicode_Category_LO;
		case 0xFA05: return Unicode_Category_LO;
		case 0xFA06: return Unicode_Category_LO;
		case 0xFA07: return Unicode_Category_LO;
		case 0xFA08: return Unicode_Category_LO;
		case 0xFA09: return Unicode_Category_LO;
		case 0xFA0A: return Unicode_Category_LO;
		case 0xFA0B: return Unicode_Category_LO;
		case 0xFA0C: return Unicode_Category_LO;
		case 0xFA0D: return Unicode_Category_LO;
		case 0xFA0E: return Unicode_Category_LO;
		case 0xFA0F: return Unicode_Category_LO;
		case 0xFA10: return Unicode_Category_LO;
		case 0xFA11: return Unicode_Category_LO;
		case 0xFA12: return Unicode_Category_LO;
		case 0xFA13: return Unicode_Category_LO;
		case 0xFA14: return Unicode_Category_LO;
		case 0xFA15: return Unicode_Category_LO;
		case 0xFA16: return Unicode_Category_LO;
		case 0xFA17: return Unicode_Category_LO;
		case 0xFA18: return Unicode_Category_LO;
		case 0xFA19: return Unicode_Category_LO;
		case 0xFA1A: return Unicode_Category_LO;
		case 0xFA1B: return Unicode_Category_LO;
		case 0xFA1C: return Unicode_Category_LO;
		case 0xFA1D: return Unicode_Category_LO;
		case 0xFA1E: return Unicode_Category_LO;
		case 0xFA1F: return Unicode_Category_LO;
		case 0xFA20: return Unicode_Category_LO;
		case 0xFA21: return Unicode_Category_LO;
		case 0xFA22: return Unicode_Category_LO;
		case 0xFA23: return Unicode_Category_LO;
		case 0xFA24: return Unicode_Category_LO;
		case 0xFA25: return Unicode_Category_LO;
		case 0xFA26: return Unicode_Category_LO;
		case 0xFA27: return Unicode_Category_LO;
		case 0xFA28: return Unicode_Category_LO;
		case 0xFA29: return Unicode_Category_LO;
		case 0xFA2A: return Unicode_Category_LO;
		case 0xFA2B: return Unicode_Category_LO;
		case 0xFA2C: return Unicode_Category_LO;
		case 0xFA2D: return Unicode_Category_LO;
		case 0xFA2E: return Unicode_Category_LO;
		case 0xFA2F: return Unicode_Category_LO;
		case 0xFA30: return Unicode_Category_LO;
		case 0xFA31: return Unicode_Category_LO;
		case 0xFA32: return Unicode_Category_LO;
		case 0xFA33: return Unicode_Category_LO;
		case 0xFA34: return Unicode_Category_LO;
		case 0xFA35: return Unicode_Category_LO;
		case 0xFA36: return Unicode_Category_LO;
		case 0xFA37: return Unicode_Category_LO;
		case 0xFA38: return Unicode_Category_LO;
		case 0xFA39: return Unicode_Category_LO;
		case 0xFA3A: return Unicode_Category_LO;
		case 0xFA3B: return Unicode_Category_LO;
		case 0xFA3C: return Unicode_Category_LO;
		case 0xFA3D: return Unicode_Category_LO;
		case 0xFA3E: return Unicode_Category_LO;
		case 0xFA3F: return Unicode_Category_LO;
		case 0xFA40: return Unicode_Category_LO;
		case 0xFA41: return Unicode_Category_LO;
		case 0xFA42: return Unicode_Category_LO;
		case 0xFA43: return Unicode_Category_LO;
		case 0xFA44: return Unicode_Category_LO;
		case 0xFA45: return Unicode_Category_LO;
		case 0xFA46: return Unicode_Category_LO;
		case 0xFA47: return Unicode_Category_LO;
		case 0xFA48: return Unicode_Category_LO;
		case 0xFA49: return Unicode_Category_LO;
		case 0xFA4A: return Unicode_Category_LO;
		case 0xFA4B: return Unicode_Category_LO;
		case 0xFA4C: return Unicode_Category_LO;
		case 0xFA4D: return Unicode_Category_LO;
		case 0xFA4E: return Unicode_Category_LO;
		case 0xFA4F: return Unicode_Category_LO;
		case 0xFA50: return Unicode_Category_LO;
		case 0xFA51: return Unicode_Category_LO;
		case 0xFA52: return Unicode_Category_LO;
		case 0xFA53: return Unicode_Category_LO;
		case 0xFA54: return Unicode_Category_LO;
		case 0xFA55: return Unicode_Category_LO;
		case 0xFA56: return Unicode_Category_LO;
		case 0xFA57: return Unicode_Category_LO;
		case 0xFA58: return Unicode_Category_LO;
		case 0xFA59: return Unicode_Category_LO;
		case 0xFA5A: return Unicode_Category_LO;
		case 0xFA5B: return Unicode_Category_LO;
		case 0xFA5C: return Unicode_Category_LO;
		case 0xFA5D: return Unicode_Category_LO;
		case 0xFA5E: return Unicode_Category_LO;
		case 0xFA5F: return Unicode_Category_LO;
		case 0xFA60: return Unicode_Category_LO;
		case 0xFA61: return Unicode_Category_LO;
		case 0xFA62: return Unicode_Category_LO;
		case 0xFA63: return Unicode_Category_LO;
		case 0xFA64: return Unicode_Category_LO;
		case 0xFA65: return Unicode_Category_LO;
		case 0xFA66: return Unicode_Category_LO;
		case 0xFA67: return Unicode_Category_LO;
		case 0xFA68: return Unicode_Category_LO;
		case 0xFA69: return Unicode_Category_LO;
		case 0xFA6A: return Unicode_Category_LO;
		case 0xFA6B: return Unicode_Category_LO;
		case 0xFA6C: return Unicode_Category_LO;
		case 0xFA6D: return Unicode_Category_LO;
		case 0xFA70: return Unicode_Category_LO;
		case 0xFA71: return Unicode_Category_LO;
		case 0xFA72: return Unicode_Category_LO;
		case 0xFA73: return Unicode_Category_LO;
		case 0xFA74: return Unicode_Category_LO;
		case 0xFA75: return Unicode_Category_LO;
		case 0xFA76: return Unicode_Category_LO;
		case 0xFA77: return Unicode_Category_LO;
		case 0xFA78: return Unicode_Category_LO;
		case 0xFA79: return Unicode_Category_LO;
		case 0xFA7A: return Unicode_Category_LO;
		case 0xFA7B: return Unicode_Category_LO;
		case 0xFA7C: return Unicode_Category_LO;
		case 0xFA7D: return Unicode_Category_LO;
		case 0xFA7E: return Unicode_Category_LO;
		case 0xFA7F: return Unicode_Category_LO;
		case 0xFA80: return Unicode_Category_LO;
		case 0xFA81: return Unicode_Category_LO;
		case 0xFA82: return Unicode_Category_LO;
		case 0xFA83: return Unicode_Category_LO;
		case 0xFA84: return Unicode_Category_LO;
		case 0xFA85: return Unicode_Category_LO;
		case 0xFA86: return Unicode_Category_LO;
		case 0xFA87: return Unicode_Category_LO;
		case 0xFA88: return Unicode_Category_LO;
		case 0xFA89: return Unicode_Category_LO;
		case 0xFA8A: return Unicode_Category_LO;
		case 0xFA8B: return Unicode_Category_LO;
		case 0xFA8C: return Unicode_Category_LO;
		case 0xFA8D: return Unicode_Category_LO;
		case 0xFA8E: return Unicode_Category_LO;
		case 0xFA8F: return Unicode_Category_LO;
		case 0xFA90: return Unicode_Category_LO;
		case 0xFA91: return Unicode_Category_LO;
		case 0xFA92: return Unicode_Category_LO;
		case 0xFA93: return Unicode_Category_LO;
		case 0xFA94: return Unicode_Category_LO;
		case 0xFA95: return Unicode_Category_LO;
		case 0xFA96: return Unicode_Category_LO;
		case 0xFA97: return Unicode_Category_LO;
		case 0xFA98: return Unicode_Category_LO;
		case 0xFA99: return Unicode_Category_LO;
		case 0xFA9A: return Unicode_Category_LO;
		case 0xFA9B: return Unicode_Category_LO;
		case 0xFA9C: return Unicode_Category_LO;
		case 0xFA9D: return Unicode_Category_LO;
		case 0xFA9E: return Unicode_Category_LO;
		case 0xFA9F: return Unicode_Category_LO;
		case 0xFAA0: return Unicode_Category_LO;
		case 0xFAA1: return Unicode_Category_LO;
		case 0xFAA2: return Unicode_Category_LO;
		case 0xFAA3: return Unicode_Category_LO;
		case 0xFAA4: return Unicode_Category_LO;
		case 0xFAA5: return Unicode_Category_LO;
		case 0xFAA6: return Unicode_Category_LO;
		case 0xFAA7: return Unicode_Category_LO;
		case 0xFAA8: return Unicode_Category_LO;
		case 0xFAA9: return Unicode_Category_LO;
		case 0xFAAA: return Unicode_Category_LO;
		case 0xFAAB: return Unicode_Category_LO;
		case 0xFAAC: return Unicode_Category_LO;
		case 0xFAAD: return Unicode_Category_LO;
		case 0xFAAE: return Unicode_Category_LO;
		case 0xFAAF: return Unicode_Category_LO;
		case 0xFAB0: return Unicode_Category_LO;
		case 0xFAB1: return Unicode_Category_LO;
		case 0xFAB2: return Unicode_Category_LO;
		case 0xFAB3: return Unicode_Category_LO;
		case 0xFAB4: return Unicode_Category_LO;
		case 0xFAB5: return Unicode_Category_LO;
		case 0xFAB6: return Unicode_Category_LO;
		case 0xFAB7: return Unicode_Category_LO;
		case 0xFAB8: return Unicode_Category_LO;
		case 0xFAB9: return Unicode_Category_LO;
		case 0xFABA: return Unicode_Category_LO;
		case 0xFABB: return Unicode_Category_LO;
		case 0xFABC: return Unicode_Category_LO;
		case 0xFABD: return Unicode_Category_LO;
		case 0xFABE: return Unicode_Category_LO;
		case 0xFABF: return Unicode_Category_LO;
		case 0xFAC0: return Unicode_Category_LO;
		case 0xFAC1: return Unicode_Category_LO;
		case 0xFAC2: return Unicode_Category_LO;
		case 0xFAC3: return Unicode_Category_LO;
		case 0xFAC4: return Unicode_Category_LO;
		case 0xFAC5: return Unicode_Category_LO;
		case 0xFAC6: return Unicode_Category_LO;
		case 0xFAC7: return Unicode_Category_LO;
		case 0xFAC8: return Unicode_Category_LO;
		case 0xFAC9: return Unicode_Category_LO;
		case 0xFACA: return Unicode_Category_LO;
		case 0xFACB: return Unicode_Category_LO;
		case 0xFACC: return Unicode_Category_LO;
		case 0xFACD: return Unicode_Category_LO;
		case 0xFACE: return Unicode_Category_LO;
		case 0xFACF: return Unicode_Category_LO;
		case 0xFAD0: return Unicode_Category_LO;
		case 0xFAD1: return Unicode_Category_LO;
		case 0xFAD2: return Unicode_Category_LO;
		case 0xFAD3: return Unicode_Category_LO;
		case 0xFAD4: return Unicode_Category_LO;
		case 0xFAD5: return Unicode_Category_LO;
		case 0xFAD6: return Unicode_Category_LO;
		case 0xFAD7: return Unicode_Category_LO;
		case 0xFAD8: return Unicode_Category_LO;
		case 0xFAD9: return Unicode_Category_LO;
		case 0xFB00: return Unicode_Category_LL;
		case 0xFB01: return Unicode_Category_LL;
		case 0xFB02: return Unicode_Category_LL;
		case 0xFB03: return Unicode_Category_LL;
		case 0xFB04: return Unicode_Category_LL;
		case 0xFB05: return Unicode_Category_LL;
		case 0xFB06: return Unicode_Category_LL;
		case 0xFB13: return Unicode_Category_LL;
		case 0xFB14: return Unicode_Category_LL;
		case 0xFB15: return Unicode_Category_LL;
		case 0xFB16: return Unicode_Category_LL;
		case 0xFB17: return Unicode_Category_LL;
		case 0xFB1D: return Unicode_Category_LO;
		case 0xFB1E: return Unicode_Category_MN;
		case 0xFB1F: return Unicode_Category_LO;
		case 0xFB20: return Unicode_Category_LO;
		case 0xFB21: return Unicode_Category_LO;
		case 0xFB22: return Unicode_Category_LO;
		case 0xFB23: return Unicode_Category_LO;
		case 0xFB24: return Unicode_Category_LO;
		case 0xFB25: return Unicode_Category_LO;
		case 0xFB26: return Unicode_Category_LO;
		case 0xFB27: return Unicode_Category_LO;
		case 0xFB28: return Unicode_Category_LO;
		case 0xFB29: return Unicode_Category_SM;
		case 0xFB2A: return Unicode_Category_LO;
		case 0xFB2B: return Unicode_Category_LO;
		case 0xFB2C: return Unicode_Category_LO;
		case 0xFB2D: return Unicode_Category_LO;
		case 0xFB2E: return Unicode_Category_LO;
		case 0xFB2F: return Unicode_Category_LO;
		case 0xFB30: return Unicode_Category_LO;
		case 0xFB31: return Unicode_Category_LO;
		case 0xFB32: return Unicode_Category_LO;
		case 0xFB33: return Unicode_Category_LO;
		case 0xFB34: return Unicode_Category_LO;
		case 0xFB35: return Unicode_Category_LO;
		case 0xFB36: return Unicode_Category_LO;
		case 0xFB38: return Unicode_Category_LO;
		case 0xFB39: return Unicode_Category_LO;
		case 0xFB3A: return Unicode_Category_LO;
		case 0xFB3B: return Unicode_Category_LO;
		case 0xFB3C: return Unicode_Category_LO;
		case 0xFB3E: return Unicode_Category_LO;
		case 0xFB40: return Unicode_Category_LO;
		case 0xFB41: return Unicode_Category_LO;
		case 0xFB43: return Unicode_Category_LO;
		case 0xFB44: return Unicode_Category_LO;
		case 0xFB46: return Unicode_Category_LO;
		case 0xFB47: return Unicode_Category_LO;
		case 0xFB48: return Unicode_Category_LO;
		case 0xFB49: return Unicode_Category_LO;
		case 0xFB4A: return Unicode_Category_LO;
		case 0xFB4B: return Unicode_Category_LO;
		case 0xFB4C: return Unicode_Category_LO;
		case 0xFB4D: return Unicode_Category_LO;
		case 0xFB4E: return Unicode_Category_LO;
		case 0xFB4F: return Unicode_Category_LO;
		case 0xFB50: return Unicode_Category_LO;
		case 0xFB51: return Unicode_Category_LO;
		case 0xFB52: return Unicode_Category_LO;
		case 0xFB53: return Unicode_Category_LO;
		case 0xFB54: return Unicode_Category_LO;
		case 0xFB55: return Unicode_Category_LO;
		case 0xFB56: return Unicode_Category_LO;
		case 0xFB57: return Unicode_Category_LO;
		case 0xFB58: return Unicode_Category_LO;
		case 0xFB59: return Unicode_Category_LO;
		case 0xFB5A: return Unicode_Category_LO;
		case 0xFB5B: return Unicode_Category_LO;
		case 0xFB5C: return Unicode_Category_LO;
		case 0xFB5D: return Unicode_Category_LO;
		case 0xFB5E: return Unicode_Category_LO;
		case 0xFB5F: return Unicode_Category_LO;
		case 0xFB60: return Unicode_Category_LO;
		case 0xFB61: return Unicode_Category_LO;
		case 0xFB62: return Unicode_Category_LO;
		case 0xFB63: return Unicode_Category_LO;
		case 0xFB64: return Unicode_Category_LO;
		case 0xFB65: return Unicode_Category_LO;
		case 0xFB66: return Unicode_Category_LO;
		case 0xFB67: return Unicode_Category_LO;
		case 0xFB68: return Unicode_Category_LO;
		case 0xFB69: return Unicode_Category_LO;
		case 0xFB6A: return Unicode_Category_LO;
		case 0xFB6B: return Unicode_Category_LO;
		case 0xFB6C: return Unicode_Category_LO;
		case 0xFB6D: return Unicode_Category_LO;
		case 0xFB6E: return Unicode_Category_LO;
		case 0xFB6F: return Unicode_Category_LO;
		case 0xFB70: return Unicode_Category_LO;
		case 0xFB71: return Unicode_Category_LO;
		case 0xFB72: return Unicode_Category_LO;
		case 0xFB73: return Unicode_Category_LO;
		case 0xFB74: return Unicode_Category_LO;
		case 0xFB75: return Unicode_Category_LO;
		case 0xFB76: return Unicode_Category_LO;
		case 0xFB77: return Unicode_Category_LO;
		case 0xFB78: return Unicode_Category_LO;
		case 0xFB79: return Unicode_Category_LO;
		case 0xFB7A: return Unicode_Category_LO;
		case 0xFB7B: return Unicode_Category_LO;
		case 0xFB7C: return Unicode_Category_LO;
		case 0xFB7D: return Unicode_Category_LO;
		case 0xFB7E: return Unicode_Category_LO;
		case 0xFB7F: return Unicode_Category_LO;
		case 0xFB80: return Unicode_Category_LO;
		case 0xFB81: return Unicode_Category_LO;
		case 0xFB82: return Unicode_Category_LO;
		case 0xFB83: return Unicode_Category_LO;
		case 0xFB84: return Unicode_Category_LO;
		case 0xFB85: return Unicode_Category_LO;
		case 0xFB86: return Unicode_Category_LO;
		case 0xFB87: return Unicode_Category_LO;
		case 0xFB88: return Unicode_Category_LO;
		case 0xFB89: return Unicode_Category_LO;
		case 0xFB8A: return Unicode_Category_LO;
		case 0xFB8B: return Unicode_Category_LO;
		case 0xFB8C: return Unicode_Category_LO;
		case 0xFB8D: return Unicode_Category_LO;
		case 0xFB8E: return Unicode_Category_LO;
		case 0xFB8F: return Unicode_Category_LO;
		case 0xFB90: return Unicode_Category_LO;
		case 0xFB91: return Unicode_Category_LO;
		case 0xFB92: return Unicode_Category_LO;
		case 0xFB93: return Unicode_Category_LO;
		case 0xFB94: return Unicode_Category_LO;
		case 0xFB95: return Unicode_Category_LO;
		case 0xFB96: return Unicode_Category_LO;
		case 0xFB97: return Unicode_Category_LO;
		case 0xFB98: return Unicode_Category_LO;
		case 0xFB99: return Unicode_Category_LO;
		case 0xFB9A: return Unicode_Category_LO;
		case 0xFB9B: return Unicode_Category_LO;
		case 0xFB9C: return Unicode_Category_LO;
		case 0xFB9D: return Unicode_Category_LO;
		case 0xFB9E: return Unicode_Category_LO;
		case 0xFB9F: return Unicode_Category_LO;
		case 0xFBA0: return Unicode_Category_LO;
		case 0xFBA1: return Unicode_Category_LO;
		case 0xFBA2: return Unicode_Category_LO;
		case 0xFBA3: return Unicode_Category_LO;
		case 0xFBA4: return Unicode_Category_LO;
		case 0xFBA5: return Unicode_Category_LO;
		case 0xFBA6: return Unicode_Category_LO;
		case 0xFBA7: return Unicode_Category_LO;
		case 0xFBA8: return Unicode_Category_LO;
		case 0xFBA9: return Unicode_Category_LO;
		case 0xFBAA: return Unicode_Category_LO;
		case 0xFBAB: return Unicode_Category_LO;
		case 0xFBAC: return Unicode_Category_LO;
		case 0xFBAD: return Unicode_Category_LO;
		case 0xFBAE: return Unicode_Category_LO;
		case 0xFBAF: return Unicode_Category_LO;
		case 0xFBB0: return Unicode_Category_LO;
		case 0xFBB1: return Unicode_Category_LO;
		case 0xFBB2: return Unicode_Category_SK;
		case 0xFBB3: return Unicode_Category_SK;
		case 0xFBB4: return Unicode_Category_SK;
		case 0xFBB5: return Unicode_Category_SK;
		case 0xFBB6: return Unicode_Category_SK;
		case 0xFBB7: return Unicode_Category_SK;
		case 0xFBB8: return Unicode_Category_SK;
		case 0xFBB9: return Unicode_Category_SK;
		case 0xFBBA: return Unicode_Category_SK;
		case 0xFBBB: return Unicode_Category_SK;
		case 0xFBBC: return Unicode_Category_SK;
		case 0xFBBD: return Unicode_Category_SK;
		case 0xFBBE: return Unicode_Category_SK;
		case 0xFBBF: return Unicode_Category_SK;
		case 0xFBC0: return Unicode_Category_SK;
		case 0xFBC1: return Unicode_Category_SK;
		case 0xFBD3: return Unicode_Category_LO;
		case 0xFBD4: return Unicode_Category_LO;
		case 0xFBD5: return Unicode_Category_LO;
		case 0xFBD6: return Unicode_Category_LO;
		case 0xFBD7: return Unicode_Category_LO;
		case 0xFBD8: return Unicode_Category_LO;
		case 0xFBD9: return Unicode_Category_LO;
		case 0xFBDA: return Unicode_Category_LO;
		case 0xFBDB: return Unicode_Category_LO;
		case 0xFBDC: return Unicode_Category_LO;
		case 0xFBDD: return Unicode_Category_LO;
		case 0xFBDE: return Unicode_Category_LO;
		case 0xFBDF: return Unicode_Category_LO;
		case 0xFBE0: return Unicode_Category_LO;
		case 0xFBE1: return Unicode_Category_LO;
		case 0xFBE2: return Unicode_Category_LO;
		case 0xFBE3: return Unicode_Category_LO;
		case 0xFBE4: return Unicode_Category_LO;
		case 0xFBE5: return Unicode_Category_LO;
		case 0xFBE6: return Unicode_Category_LO;
		case 0xFBE7: return Unicode_Category_LO;
		case 0xFBE8: return Unicode_Category_LO;
		case 0xFBE9: return Unicode_Category_LO;
		case 0xFBEA: return Unicode_Category_LO;
		case 0xFBEB: return Unicode_Category_LO;
		case 0xFBEC: return Unicode_Category_LO;
		case 0xFBED: return Unicode_Category_LO;
		case 0xFBEE: return Unicode_Category_LO;
		case 0xFBEF: return Unicode_Category_LO;
		case 0xFBF0: return Unicode_Category_LO;
		case 0xFBF1: return Unicode_Category_LO;
		case 0xFBF2: return Unicode_Category_LO;
		case 0xFBF3: return Unicode_Category_LO;
		case 0xFBF4: return Unicode_Category_LO;
		case 0xFBF5: return Unicode_Category_LO;
		case 0xFBF6: return Unicode_Category_LO;
		case 0xFBF7: return Unicode_Category_LO;
		case 0xFBF8: return Unicode_Category_LO;
		case 0xFBF9: return Unicode_Category_LO;
		case 0xFBFA: return Unicode_Category_LO;
		case 0xFBFB: return Unicode_Category_LO;
		case 0xFBFC: return Unicode_Category_LO;
		case 0xFBFD: return Unicode_Category_LO;
		case 0xFBFE: return Unicode_Category_LO;
		case 0xFBFF: return Unicode_Category_LO;
		case 0xFC00: return Unicode_Category_LO;
		case 0xFC01: return Unicode_Category_LO;
		case 0xFC02: return Unicode_Category_LO;
		case 0xFC03: return Unicode_Category_LO;
		case 0xFC04: return Unicode_Category_LO;
		case 0xFC05: return Unicode_Category_LO;
		case 0xFC06: return Unicode_Category_LO;
		case 0xFC07: return Unicode_Category_LO;
		case 0xFC08: return Unicode_Category_LO;
		case 0xFC09: return Unicode_Category_LO;
		case 0xFC0A: return Unicode_Category_LO;
		case 0xFC0B: return Unicode_Category_LO;
		case 0xFC0C: return Unicode_Category_LO;
		case 0xFC0D: return Unicode_Category_LO;
		case 0xFC0E: return Unicode_Category_LO;
		case 0xFC0F: return Unicode_Category_LO;
		case 0xFC10: return Unicode_Category_LO;
		case 0xFC11: return Unicode_Category_LO;
		case 0xFC12: return Unicode_Category_LO;
		case 0xFC13: return Unicode_Category_LO;
		case 0xFC14: return Unicode_Category_LO;
		case 0xFC15: return Unicode_Category_LO;
		case 0xFC16: return Unicode_Category_LO;
		case 0xFC17: return Unicode_Category_LO;
		case 0xFC18: return Unicode_Category_LO;
		case 0xFC19: return Unicode_Category_LO;
		case 0xFC1A: return Unicode_Category_LO;
		case 0xFC1B: return Unicode_Category_LO;
		case 0xFC1C: return Unicode_Category_LO;
		case 0xFC1D: return Unicode_Category_LO;
		case 0xFC1E: return Unicode_Category_LO;
		case 0xFC1F: return Unicode_Category_LO;
		case 0xFC20: return Unicode_Category_LO;
		case 0xFC21: return Unicode_Category_LO;
		case 0xFC22: return Unicode_Category_LO;
		case 0xFC23: return Unicode_Category_LO;
		case 0xFC24: return Unicode_Category_LO;
		case 0xFC25: return Unicode_Category_LO;
		case 0xFC26: return Unicode_Category_LO;
		case 0xFC27: return Unicode_Category_LO;
		case 0xFC28: return Unicode_Category_LO;
		case 0xFC29: return Unicode_Category_LO;
		case 0xFC2A: return Unicode_Category_LO;
		case 0xFC2B: return Unicode_Category_LO;
		case 0xFC2C: return Unicode_Category_LO;
		case 0xFC2D: return Unicode_Category_LO;
		case 0xFC2E: return Unicode_Category_LO;
		case 0xFC2F: return Unicode_Category_LO;
		case 0xFC30: return Unicode_Category_LO;
		case 0xFC31: return Unicode_Category_LO;
		case 0xFC32: return Unicode_Category_LO;
		case 0xFC33: return Unicode_Category_LO;
		case 0xFC34: return Unicode_Category_LO;
		case 0xFC35: return Unicode_Category_LO;
		case 0xFC36: return Unicode_Category_LO;
		case 0xFC37: return Unicode_Category_LO;
		case 0xFC38: return Unicode_Category_LO;
		case 0xFC39: return Unicode_Category_LO;
		case 0xFC3A: return Unicode_Category_LO;
		case 0xFC3B: return Unicode_Category_LO;
		case 0xFC3C: return Unicode_Category_LO;
		case 0xFC3D: return Unicode_Category_LO;
		case 0xFC3E: return Unicode_Category_LO;
		case 0xFC3F: return Unicode_Category_LO;
		case 0xFC40: return Unicode_Category_LO;
		case 0xFC41: return Unicode_Category_LO;
		case 0xFC42: return Unicode_Category_LO;
		case 0xFC43: return Unicode_Category_LO;
		case 0xFC44: return Unicode_Category_LO;
		case 0xFC45: return Unicode_Category_LO;
		case 0xFC46: return Unicode_Category_LO;
		case 0xFC47: return Unicode_Category_LO;
		case 0xFC48: return Unicode_Category_LO;
		case 0xFC49: return Unicode_Category_LO;
		case 0xFC4A: return Unicode_Category_LO;
		case 0xFC4B: return Unicode_Category_LO;
		case 0xFC4C: return Unicode_Category_LO;
		case 0xFC4D: return Unicode_Category_LO;
		case 0xFC4E: return Unicode_Category_LO;
		case 0xFC4F: return Unicode_Category_LO;
		case 0xFC50: return Unicode_Category_LO;
		case 0xFC51: return Unicode_Category_LO;
		case 0xFC52: return Unicode_Category_LO;
		case 0xFC53: return Unicode_Category_LO;
		case 0xFC54: return Unicode_Category_LO;
		case 0xFC55: return Unicode_Category_LO;
		case 0xFC56: return Unicode_Category_LO;
		case 0xFC57: return Unicode_Category_LO;
		case 0xFC58: return Unicode_Category_LO;
		case 0xFC59: return Unicode_Category_LO;
		case 0xFC5A: return Unicode_Category_LO;
		case 0xFC5B: return Unicode_Category_LO;
		case 0xFC5C: return Unicode_Category_LO;
		case 0xFC5D: return Unicode_Category_LO;
		case 0xFC5E: return Unicode_Category_LO;
		case 0xFC5F: return Unicode_Category_LO;
		case 0xFC60: return Unicode_Category_LO;
		case 0xFC61: return Unicode_Category_LO;
		case 0xFC62: return Unicode_Category_LO;
		case 0xFC63: return Unicode_Category_LO;
		case 0xFC64: return Unicode_Category_LO;
		case 0xFC65: return Unicode_Category_LO;
		case 0xFC66: return Unicode_Category_LO;
		case 0xFC67: return Unicode_Category_LO;
		case 0xFC68: return Unicode_Category_LO;
		case 0xFC69: return Unicode_Category_LO;
		case 0xFC6A: return Unicode_Category_LO;
		case 0xFC6B: return Unicode_Category_LO;
		case 0xFC6C: return Unicode_Category_LO;
		case 0xFC6D: return Unicode_Category_LO;
		case 0xFC6E: return Unicode_Category_LO;
		case 0xFC6F: return Unicode_Category_LO;
		case 0xFC70: return Unicode_Category_LO;
		case 0xFC71: return Unicode_Category_LO;
		case 0xFC72: return Unicode_Category_LO;
		case 0xFC73: return Unicode_Category_LO;
		case 0xFC74: return Unicode_Category_LO;
		case 0xFC75: return Unicode_Category_LO;
		case 0xFC76: return Unicode_Category_LO;
		case 0xFC77: return Unicode_Category_LO;
		case 0xFC78: return Unicode_Category_LO;
		case 0xFC79: return Unicode_Category_LO;
		case 0xFC7A: return Unicode_Category_LO;
		case 0xFC7B: return Unicode_Category_LO;
		case 0xFC7C: return Unicode_Category_LO;
		case 0xFC7D: return Unicode_Category_LO;
		case 0xFC7E: return Unicode_Category_LO;
		case 0xFC7F: return Unicode_Category_LO;
		case 0xFC80: return Unicode_Category_LO;
		case 0xFC81: return Unicode_Category_LO;
		case 0xFC82: return Unicode_Category_LO;
		case 0xFC83: return Unicode_Category_LO;
		case 0xFC84: return Unicode_Category_LO;
		case 0xFC85: return Unicode_Category_LO;
		case 0xFC86: return Unicode_Category_LO;
		case 0xFC87: return Unicode_Category_LO;
		case 0xFC88: return Unicode_Category_LO;
		case 0xFC89: return Unicode_Category_LO;
		case 0xFC8A: return Unicode_Category_LO;
		case 0xFC8B: return Unicode_Category_LO;
		case 0xFC8C: return Unicode_Category_LO;
		case 0xFC8D: return Unicode_Category_LO;
		case 0xFC8E: return Unicode_Category_LO;
		case 0xFC8F: return Unicode_Category_LO;
		case 0xFC90: return Unicode_Category_LO;
		case 0xFC91: return Unicode_Category_LO;
		case 0xFC92: return Unicode_Category_LO;
		case 0xFC93: return Unicode_Category_LO;
		case 0xFC94: return Unicode_Category_LO;
		case 0xFC95: return Unicode_Category_LO;
		case 0xFC96: return Unicode_Category_LO;
		case 0xFC97: return Unicode_Category_LO;
		case 0xFC98: return Unicode_Category_LO;
		case 0xFC99: return Unicode_Category_LO;
		case 0xFC9A: return Unicode_Category_LO;
		case 0xFC9B: return Unicode_Category_LO;
		case 0xFC9C: return Unicode_Category_LO;
		case 0xFC9D: return Unicode_Category_LO;
		case 0xFC9E: return Unicode_Category_LO;
		case 0xFC9F: return Unicode_Category_LO;
		case 0xFCA0: return Unicode_Category_LO;
		case 0xFCA1: return Unicode_Category_LO;
		case 0xFCA2: return Unicode_Category_LO;
		case 0xFCA3: return Unicode_Category_LO;
		case 0xFCA4: return Unicode_Category_LO;
		case 0xFCA5: return Unicode_Category_LO;
		case 0xFCA6: return Unicode_Category_LO;
		case 0xFCA7: return Unicode_Category_LO;
		case 0xFCA8: return Unicode_Category_LO;
		case 0xFCA9: return Unicode_Category_LO;
		case 0xFCAA: return Unicode_Category_LO;
		case 0xFCAB: return Unicode_Category_LO;
		case 0xFCAC: return Unicode_Category_LO;
		case 0xFCAD: return Unicode_Category_LO;
		case 0xFCAE: return Unicode_Category_LO;
		case 0xFCAF: return Unicode_Category_LO;
		case 0xFCB0: return Unicode_Category_LO;
		case 0xFCB1: return Unicode_Category_LO;
		case 0xFCB2: return Unicode_Category_LO;
		case 0xFCB3: return Unicode_Category_LO;
		case 0xFCB4: return Unicode_Category_LO;
		case 0xFCB5: return Unicode_Category_LO;
		case 0xFCB6: return Unicode_Category_LO;
		case 0xFCB7: return Unicode_Category_LO;
		case 0xFCB8: return Unicode_Category_LO;
		case 0xFCB9: return Unicode_Category_LO;
		case 0xFCBA: return Unicode_Category_LO;
		case 0xFCBB: return Unicode_Category_LO;
		case 0xFCBC: return Unicode_Category_LO;
		case 0xFCBD: return Unicode_Category_LO;
		case 0xFCBE: return Unicode_Category_LO;
		case 0xFCBF: return Unicode_Category_LO;
		case 0xFCC0: return Unicode_Category_LO;
		case 0xFCC1: return Unicode_Category_LO;
		case 0xFCC2: return Unicode_Category_LO;
		case 0xFCC3: return Unicode_Category_LO;
		case 0xFCC4: return Unicode_Category_LO;
		case 0xFCC5: return Unicode_Category_LO;
		case 0xFCC6: return Unicode_Category_LO;
		case 0xFCC7: return Unicode_Category_LO;
		case 0xFCC8: return Unicode_Category_LO;
		case 0xFCC9: return Unicode_Category_LO;
		case 0xFCCA: return Unicode_Category_LO;
		case 0xFCCB: return Unicode_Category_LO;
		case 0xFCCC: return Unicode_Category_LO;
		case 0xFCCD: return Unicode_Category_LO;
		case 0xFCCE: return Unicode_Category_LO;
		case 0xFCCF: return Unicode_Category_LO;
		case 0xFCD0: return Unicode_Category_LO;
		case 0xFCD1: return Unicode_Category_LO;
		case 0xFCD2: return Unicode_Category_LO;
		case 0xFCD3: return Unicode_Category_LO;
		case 0xFCD4: return Unicode_Category_LO;
		case 0xFCD5: return Unicode_Category_LO;
		case 0xFCD6: return Unicode_Category_LO;
		case 0xFCD7: return Unicode_Category_LO;
		case 0xFCD8: return Unicode_Category_LO;
		case 0xFCD9: return Unicode_Category_LO;
		case 0xFCDA: return Unicode_Category_LO;
		case 0xFCDB: return Unicode_Category_LO;
		case 0xFCDC: return Unicode_Category_LO;
		case 0xFCDD: return Unicode_Category_LO;
		case 0xFCDE: return Unicode_Category_LO;
		case 0xFCDF: return Unicode_Category_LO;
		case 0xFCE0: return Unicode_Category_LO;
		case 0xFCE1: return Unicode_Category_LO;
		case 0xFCE2: return Unicode_Category_LO;
		case 0xFCE3: return Unicode_Category_LO;
		case 0xFCE4: return Unicode_Category_LO;
		case 0xFCE5: return Unicode_Category_LO;
		case 0xFCE6: return Unicode_Category_LO;
		case 0xFCE7: return Unicode_Category_LO;
		case 0xFCE8: return Unicode_Category_LO;
		case 0xFCE9: return Unicode_Category_LO;
		case 0xFCEA: return Unicode_Category_LO;
		case 0xFCEB: return Unicode_Category_LO;
		case 0xFCEC: return Unicode_Category_LO;
		case 0xFCED: return Unicode_Category_LO;
		case 0xFCEE: return Unicode_Category_LO;
		case 0xFCEF: return Unicode_Category_LO;
		case 0xFCF0: return Unicode_Category_LO;
		case 0xFCF1: return Unicode_Category_LO;
		case 0xFCF2: return Unicode_Category_LO;
		case 0xFCF3: return Unicode_Category_LO;
		case 0xFCF4: return Unicode_Category_LO;
		case 0xFCF5: return Unicode_Category_LO;
		case 0xFCF6: return Unicode_Category_LO;
		case 0xFCF7: return Unicode_Category_LO;
		case 0xFCF8: return Unicode_Category_LO;
		case 0xFCF9: return Unicode_Category_LO;
		case 0xFCFA: return Unicode_Category_LO;
		case 0xFCFB: return Unicode_Category_LO;
		case 0xFCFC: return Unicode_Category_LO;
		case 0xFCFD: return Unicode_Category_LO;
		case 0xFCFE: return Unicode_Category_LO;
		case 0xFCFF: return Unicode_Category_LO;
		case 0xFD00: return Unicode_Category_LO;
		case 0xFD01: return Unicode_Category_LO;
		case 0xFD02: return Unicode_Category_LO;
		case 0xFD03: return Unicode_Category_LO;
		case 0xFD04: return Unicode_Category_LO;
		case 0xFD05: return Unicode_Category_LO;
		case 0xFD06: return Unicode_Category_LO;
		case 0xFD07: return Unicode_Category_LO;
		case 0xFD08: return Unicode_Category_LO;
		case 0xFD09: return Unicode_Category_LO;
		case 0xFD0A: return Unicode_Category_LO;
		case 0xFD0B: return Unicode_Category_LO;
		case 0xFD0C: return Unicode_Category_LO;
		case 0xFD0D: return Unicode_Category_LO;
		case 0xFD0E: return Unicode_Category_LO;
		case 0xFD0F: return Unicode_Category_LO;
		case 0xFD10: return Unicode_Category_LO;
		case 0xFD11: return Unicode_Category_LO;
		case 0xFD12: return Unicode_Category_LO;
		case 0xFD13: return Unicode_Category_LO;
		case 0xFD14: return Unicode_Category_LO;
		case 0xFD15: return Unicode_Category_LO;
		case 0xFD16: return Unicode_Category_LO;
		case 0xFD17: return Unicode_Category_LO;
		case 0xFD18: return Unicode_Category_LO;
		case 0xFD19: return Unicode_Category_LO;
		case 0xFD1A: return Unicode_Category_LO;
		case 0xFD1B: return Unicode_Category_LO;
		case 0xFD1C: return Unicode_Category_LO;
		case 0xFD1D: return Unicode_Category_LO;
		case 0xFD1E: return Unicode_Category_LO;
		case 0xFD1F: return Unicode_Category_LO;
		case 0xFD20: return Unicode_Category_LO;
		case 0xFD21: return Unicode_Category_LO;
		case 0xFD22: return Unicode_Category_LO;
		case 0xFD23: return Unicode_Category_LO;
		case 0xFD24: return Unicode_Category_LO;
		case 0xFD25: return Unicode_Category_LO;
		case 0xFD26: return Unicode_Category_LO;
		case 0xFD27: return Unicode_Category_LO;
		case 0xFD28: return Unicode_Category_LO;
		case 0xFD29: return Unicode_Category_LO;
		case 0xFD2A: return Unicode_Category_LO;
		case 0xFD2B: return Unicode_Category_LO;
		case 0xFD2C: return Unicode_Category_LO;
		case 0xFD2D: return Unicode_Category_LO;
		case 0xFD2E: return Unicode_Category_LO;
		case 0xFD2F: return Unicode_Category_LO;
		case 0xFD30: return Unicode_Category_LO;
		case 0xFD31: return Unicode_Category_LO;
		case 0xFD32: return Unicode_Category_LO;
		case 0xFD33: return Unicode_Category_LO;
		case 0xFD34: return Unicode_Category_LO;
		case 0xFD35: return Unicode_Category_LO;
		case 0xFD36: return Unicode_Category_LO;
		case 0xFD37: return Unicode_Category_LO;
		case 0xFD38: return Unicode_Category_LO;
		case 0xFD39: return Unicode_Category_LO;
		case 0xFD3A: return Unicode_Category_LO;
		case 0xFD3B: return Unicode_Category_LO;
		case 0xFD3C: return Unicode_Category_LO;
		case 0xFD3D: return Unicode_Category_LO;
		case 0xFD3E: return Unicode_Category_PE;
		case 0xFD3F: return Unicode_Category_PS;
		case 0xFD50: return Unicode_Category_LO;
		case 0xFD51: return Unicode_Category_LO;
		case 0xFD52: return Unicode_Category_LO;
		case 0xFD53: return Unicode_Category_LO;
		case 0xFD54: return Unicode_Category_LO;
		case 0xFD55: return Unicode_Category_LO;
		case 0xFD56: return Unicode_Category_LO;
		case 0xFD57: return Unicode_Category_LO;
		case 0xFD58: return Unicode_Category_LO;
		case 0xFD59: return Unicode_Category_LO;
		case 0xFD5A: return Unicode_Category_LO;
		case 0xFD5B: return Unicode_Category_LO;
		case 0xFD5C: return Unicode_Category_LO;
		case 0xFD5D: return Unicode_Category_LO;
		case 0xFD5E: return Unicode_Category_LO;
		case 0xFD5F: return Unicode_Category_LO;
		case 0xFD60: return Unicode_Category_LO;
		case 0xFD61: return Unicode_Category_LO;
		case 0xFD62: return Unicode_Category_LO;
		case 0xFD63: return Unicode_Category_LO;
		case 0xFD64: return Unicode_Category_LO;
		case 0xFD65: return Unicode_Category_LO;
		case 0xFD66: return Unicode_Category_LO;
		case 0xFD67: return Unicode_Category_LO;
		case 0xFD68: return Unicode_Category_LO;
		case 0xFD69: return Unicode_Category_LO;
		case 0xFD6A: return Unicode_Category_LO;
		case 0xFD6B: return Unicode_Category_LO;
		case 0xFD6C: return Unicode_Category_LO;
		case 0xFD6D: return Unicode_Category_LO;
		case 0xFD6E: return Unicode_Category_LO;
		case 0xFD6F: return Unicode_Category_LO;
		case 0xFD70: return Unicode_Category_LO;
		case 0xFD71: return Unicode_Category_LO;
		case 0xFD72: return Unicode_Category_LO;
		case 0xFD73: return Unicode_Category_LO;
		case 0xFD74: return Unicode_Category_LO;
		case 0xFD75: return Unicode_Category_LO;
		case 0xFD76: return Unicode_Category_LO;
		case 0xFD77: return Unicode_Category_LO;
		case 0xFD78: return Unicode_Category_LO;
		case 0xFD79: return Unicode_Category_LO;
		case 0xFD7A: return Unicode_Category_LO;
		case 0xFD7B: return Unicode_Category_LO;
		case 0xFD7C: return Unicode_Category_LO;
		case 0xFD7D: return Unicode_Category_LO;
		case 0xFD7E: return Unicode_Category_LO;
		case 0xFD7F: return Unicode_Category_LO;
		case 0xFD80: return Unicode_Category_LO;
		case 0xFD81: return Unicode_Category_LO;
		case 0xFD82: return Unicode_Category_LO;
		case 0xFD83: return Unicode_Category_LO;
		case 0xFD84: return Unicode_Category_LO;
		case 0xFD85: return Unicode_Category_LO;
		case 0xFD86: return Unicode_Category_LO;
		case 0xFD87: return Unicode_Category_LO;
		case 0xFD88: return Unicode_Category_LO;
		case 0xFD89: return Unicode_Category_LO;
		case 0xFD8A: return Unicode_Category_LO;
		case 0xFD8B: return Unicode_Category_LO;
		case 0xFD8C: return Unicode_Category_LO;
		case 0xFD8D: return Unicode_Category_LO;
		case 0xFD8E: return Unicode_Category_LO;
		case 0xFD8F: return Unicode_Category_LO;
		case 0xFD92: return Unicode_Category_LO;
		case 0xFD93: return Unicode_Category_LO;
		case 0xFD94: return Unicode_Category_LO;
		case 0xFD95: return Unicode_Category_LO;
		case 0xFD96: return Unicode_Category_LO;
		case 0xFD97: return Unicode_Category_LO;
		case 0xFD98: return Unicode_Category_LO;
		case 0xFD99: return Unicode_Category_LO;
		case 0xFD9A: return Unicode_Category_LO;
		case 0xFD9B: return Unicode_Category_LO;
		case 0xFD9C: return Unicode_Category_LO;
		case 0xFD9D: return Unicode_Category_LO;
		case 0xFD9E: return Unicode_Category_LO;
		case 0xFD9F: return Unicode_Category_LO;
		case 0xFDA0: return Unicode_Category_LO;
		case 0xFDA1: return Unicode_Category_LO;
		case 0xFDA2: return Unicode_Category_LO;
		case 0xFDA3: return Unicode_Category_LO;
		case 0xFDA4: return Unicode_Category_LO;
		case 0xFDA5: return Unicode_Category_LO;
		case 0xFDA6: return Unicode_Category_LO;
		case 0xFDA7: return Unicode_Category_LO;
		case 0xFDA8: return Unicode_Category_LO;
		case 0xFDA9: return Unicode_Category_LO;
		case 0xFDAA: return Unicode_Category_LO;
		case 0xFDAB: return Unicode_Category_LO;
		case 0xFDAC: return Unicode_Category_LO;
		case 0xFDAD: return Unicode_Category_LO;
		case 0xFDAE: return Unicode_Category_LO;
		case 0xFDAF: return Unicode_Category_LO;
		case 0xFDB0: return Unicode_Category_LO;
		case 0xFDB1: return Unicode_Category_LO;
		case 0xFDB2: return Unicode_Category_LO;
		case 0xFDB3: return Unicode_Category_LO;
		case 0xFDB4: return Unicode_Category_LO;
		case 0xFDB5: return Unicode_Category_LO;
		case 0xFDB6: return Unicode_Category_LO;
		case 0xFDB7: return Unicode_Category_LO;
		case 0xFDB8: return Unicode_Category_LO;
		case 0xFDB9: return Unicode_Category_LO;
		case 0xFDBA: return Unicode_Category_LO;
		case 0xFDBB: return Unicode_Category_LO;
		case 0xFDBC: return Unicode_Category_LO;
		case 0xFDBD: return Unicode_Category_LO;
		case 0xFDBE: return Unicode_Category_LO;
		case 0xFDBF: return Unicode_Category_LO;
		case 0xFDC0: return Unicode_Category_LO;
		case 0xFDC1: return Unicode_Category_LO;
		case 0xFDC2: return Unicode_Category_LO;
		case 0xFDC3: return Unicode_Category_LO;
		case 0xFDC4: return Unicode_Category_LO;
		case 0xFDC5: return Unicode_Category_LO;
		case 0xFDC6: return Unicode_Category_LO;
		case 0xFDC7: return Unicode_Category_LO;
		case 0xFDF0: return Unicode_Category_LO;
		case 0xFDF1: return Unicode_Category_LO;
		case 0xFDF2: return Unicode_Category_LO;
		case 0xFDF3: return Unicode_Category_LO;
		case 0xFDF4: return Unicode_Category_LO;
		case 0xFDF5: return Unicode_Category_LO;
		case 0xFDF6: return Unicode_Category_LO;
		case 0xFDF7: return Unicode_Category_LO;
		case 0xFDF8: return Unicode_Category_LO;
		case 0xFDF9: return Unicode_Category_LO;
		case 0xFDFA: return Unicode_Category_LO;
		case 0xFDFB: return Unicode_Category_LO;
		case 0xFDFC: return Unicode_Category_SC;
		case 0xFDFD: return Unicode_Category_SO;
		case 0xFE00: return Unicode_Category_MN;
		case 0xFE01: return Unicode_Category_MN;
		case 0xFE02: return Unicode_Category_MN;
		case 0xFE03: return Unicode_Category_MN;
		case 0xFE04: return Unicode_Category_MN;
		case 0xFE05: return Unicode_Category_MN;
		case 0xFE06: return Unicode_Category_MN;
		case 0xFE07: return Unicode_Category_MN;
		case 0xFE08: return Unicode_Category_MN;
		case 0xFE09: return Unicode_Category_MN;
		case 0xFE0A: return Unicode_Category_MN;
		case 0xFE0B: return Unicode_Category_MN;
		case 0xFE0C: return Unicode_Category_MN;
		case 0xFE0D: return Unicode_Category_MN;
		case 0xFE0E: return Unicode_Category_MN;
		case 0xFE0F: return Unicode_Category_MN;
		case 0xFE10: return Unicode_Category_PO;
		case 0xFE11: return Unicode_Category_PO;
		case 0xFE12: return Unicode_Category_PO;
		case 0xFE13: return Unicode_Category_PO;
		case 0xFE14: return Unicode_Category_PO;
		case 0xFE15: return Unicode_Category_PO;
		case 0xFE16: return Unicode_Category_PO;
		case 0xFE17: return Unicode_Category_PS;
		case 0xFE18: return Unicode_Category_PE;
		case 0xFE19: return Unicode_Category_PO;
		case 0xFE20: return Unicode_Category_MN;
		case 0xFE21: return Unicode_Category_MN;
		case 0xFE22: return Unicode_Category_MN;
		case 0xFE23: return Unicode_Category_MN;
		case 0xFE24: return Unicode_Category_MN;
		case 0xFE25: return Unicode_Category_MN;
		case 0xFE26: return Unicode_Category_MN;
		case 0xFE27: return Unicode_Category_MN;
		case 0xFE28: return Unicode_Category_MN;
		case 0xFE29: return Unicode_Category_MN;
		case 0xFE2A: return Unicode_Category_MN;
		case 0xFE2B: return Unicode_Category_MN;
		case 0xFE2C: return Unicode_Category_MN;
		case 0xFE2D: return Unicode_Category_MN;
		case 0xFE2E: return Unicode_Category_MN;
		case 0xFE2F: return Unicode_Category_MN;
		case 0xFE30: return Unicode_Category_PO;
		case 0xFE31: return Unicode_Category_PD;
		case 0xFE32: return Unicode_Category_PD;
		case 0xFE33: return Unicode_Category_PC;
		case 0xFE34: return Unicode_Category_PC;
		case 0xFE35: return Unicode_Category_PS;
		case 0xFE36: return Unicode_Category_PE;
		case 0xFE37: return Unicode_Category_PS;
		case 0xFE38: return Unicode_Category_PE;
		case 0xFE39: return Unicode_Category_PS;
		case 0xFE3A: return Unicode_Category_PE;
		case 0xFE3B: return Unicode_Category_PS;
		case 0xFE3C: return Unicode_Category_PE;
		case 0xFE3D: return Unicode_Category_PS;
		case 0xFE3E: return Unicode_Category_PE;
		case 0xFE3F: return Unicode_Category_PS;
		case 0xFE40: return Unicode_Category_PE;
		case 0xFE41: return Unicode_Category_PS;
		case 0xFE42: return Unicode_Category_PE;
		case 0xFE43: return Unicode_Category_PS;
		case 0xFE44: return Unicode_Category_PE;
		case 0xFE45: return Unicode_Category_PO;
		case 0xFE46: return Unicode_Category_PO;
		case 0xFE47: return Unicode_Category_PS;
		case 0xFE48: return Unicode_Category_PE;
		case 0xFE49: return Unicode_Category_PO;
		case 0xFE4A: return Unicode_Category_PO;
		case 0xFE4B: return Unicode_Category_PO;
		case 0xFE4C: return Unicode_Category_PO;
		case 0xFE4D: return Unicode_Category_PC;
		case 0xFE4E: return Unicode_Category_PC;
		case 0xFE4F: return Unicode_Category_PC;
		case 0xFE50: return Unicode_Category_PO;
		case 0xFE51: return Unicode_Category_PO;
		case 0xFE52: return Unicode_Category_PO;
		case 0xFE54: return Unicode_Category_PO;
		case 0xFE55: return Unicode_Category_PO;
		case 0xFE56: return Unicode_Category_PO;
		case 0xFE57: return Unicode_Category_PO;
		case 0xFE58: return Unicode_Category_PD;
		case 0xFE59: return Unicode_Category_PS;
		case 0xFE5A: return Unicode_Category_PE;
		case 0xFE5B: return Unicode_Category_PS;
		case 0xFE5C: return Unicode_Category_PE;
		case 0xFE5D: return Unicode_Category_PS;
		case 0xFE5E: return Unicode_Category_PE;
		case 0xFE5F: return Unicode_Category_PO;
		case 0xFE60: return Unicode_Category_PO;
		case 0xFE61: return Unicode_Category_PO;
		case 0xFE62: return Unicode_Category_SM;
		case 0xFE63: return Unicode_Category_PD;
		case 0xFE64: return Unicode_Category_SM;
		case 0xFE65: return Unicode_Category_SM;
		case 0xFE66: return Unicode_Category_SM;
		case 0xFE68: return Unicode_Category_PO;
		case 0xFE69: return Unicode_Category_SC;
		case 0xFE6A: return Unicode_Category_PO;
		case 0xFE6B: return Unicode_Category_PO;
		case 0xFE70: return Unicode_Category_LO;
		case 0xFE71: return Unicode_Category_LO;
		case 0xFE72: return Unicode_Category_LO;
		case 0xFE73: return Unicode_Category_LO;
		case 0xFE74: return Unicode_Category_LO;
		case 0xFE76: return Unicode_Category_LO;
		case 0xFE77: return Unicode_Category_LO;
		case 0xFE78: return Unicode_Category_LO;
		case 0xFE79: return Unicode_Category_LO;
		case 0xFE7A: return Unicode_Category_LO;
		case 0xFE7B: return Unicode_Category_LO;
		case 0xFE7C: return Unicode_Category_LO;
		case 0xFE7D: return Unicode_Category_LO;
		case 0xFE7E: return Unicode_Category_LO;
		case 0xFE7F: return Unicode_Category_LO;
		case 0xFE80: return Unicode_Category_LO;
		case 0xFE81: return Unicode_Category_LO;
		case 0xFE82: return Unicode_Category_LO;
		case 0xFE83: return Unicode_Category_LO;
		case 0xFE84: return Unicode_Category_LO;
		case 0xFE85: return Unicode_Category_LO;
		case 0xFE86: return Unicode_Category_LO;
		case 0xFE87: return Unicode_Category_LO;
		case 0xFE88: return Unicode_Category_LO;
		case 0xFE89: return Unicode_Category_LO;
		case 0xFE8A: return Unicode_Category_LO;
		case 0xFE8B: return Unicode_Category_LO;
		case 0xFE8C: return Unicode_Category_LO;
		case 0xFE8D: return Unicode_Category_LO;
		case 0xFE8E: return Unicode_Category_LO;
		case 0xFE8F: return Unicode_Category_LO;
		case 0xFE90: return Unicode_Category_LO;
		case 0xFE91: return Unicode_Category_LO;
		case 0xFE92: return Unicode_Category_LO;
		case 0xFE93: return Unicode_Category_LO;
		case 0xFE94: return Unicode_Category_LO;
		case 0xFE95: return Unicode_Category_LO;
		case 0xFE96: return Unicode_Category_LO;
		case 0xFE97: return Unicode_Category_LO;
		case 0xFE98: return Unicode_Category_LO;
		case 0xFE99: return Unicode_Category_LO;
		case 0xFE9A: return Unicode_Category_LO;
		case 0xFE9B: return Unicode_Category_LO;
		case 0xFE9C: return Unicode_Category_LO;
		case 0xFE9D: return Unicode_Category_LO;
		case 0xFE9E: return Unicode_Category_LO;
		case 0xFE9F: return Unicode_Category_LO;
		case 0xFEA0: return Unicode_Category_LO;
		case 0xFEA1: return Unicode_Category_LO;
		case 0xFEA2: return Unicode_Category_LO;
		case 0xFEA3: return Unicode_Category_LO;
		case 0xFEA4: return Unicode_Category_LO;
		case 0xFEA5: return Unicode_Category_LO;
		case 0xFEA6: return Unicode_Category_LO;
		case 0xFEA7: return Unicode_Category_LO;
		case 0xFEA8: return Unicode_Category_LO;
		case 0xFEA9: return Unicode_Category_LO;
		case 0xFEAA: return Unicode_Category_LO;
		case 0xFEAB: return Unicode_Category_LO;
		case 0xFEAC: return Unicode_Category_LO;
		case 0xFEAD: return Unicode_Category_LO;
		case 0xFEAE: return Unicode_Category_LO;
		case 0xFEAF: return Unicode_Category_LO;
		case 0xFEB0: return Unicode_Category_LO;
		case 0xFEB1: return Unicode_Category_LO;
		case 0xFEB2: return Unicode_Category_LO;
		case 0xFEB3: return Unicode_Category_LO;
		case 0xFEB4: return Unicode_Category_LO;
		case 0xFEB5: return Unicode_Category_LO;
		case 0xFEB6: return Unicode_Category_LO;
		case 0xFEB7: return Unicode_Category_LO;
		case 0xFEB8: return Unicode_Category_LO;
		case 0xFEB9: return Unicode_Category_LO;
		case 0xFEBA: return Unicode_Category_LO;
		case 0xFEBB: return Unicode_Category_LO;
		case 0xFEBC: return Unicode_Category_LO;
		case 0xFEBD: return Unicode_Category_LO;
		case 0xFEBE: return Unicode_Category_LO;
		case 0xFEBF: return Unicode_Category_LO;
		case 0xFEC0: return Unicode_Category_LO;
		case 0xFEC1: return Unicode_Category_LO;
		case 0xFEC2: return Unicode_Category_LO;
		case 0xFEC3: return Unicode_Category_LO;
		case 0xFEC4: return Unicode_Category_LO;
		case 0xFEC5: return Unicode_Category_LO;
		case 0xFEC6: return Unicode_Category_LO;
		case 0xFEC7: return Unicode_Category_LO;
		case 0xFEC8: return Unicode_Category_LO;
		case 0xFEC9: return Unicode_Category_LO;
		case 0xFECA: return Unicode_Category_LO;
		case 0xFECB: return Unicode_Category_LO;
		case 0xFECC: return Unicode_Category_LO;
		case 0xFECD: return Unicode_Category_LO;
		case 0xFECE: return Unicode_Category_LO;
		case 0xFECF: return Unicode_Category_LO;
		case 0xFED0: return Unicode_Category_LO;
		case 0xFED1: return Unicode_Category_LO;
		case 0xFED2: return Unicode_Category_LO;
		case 0xFED3: return Unicode_Category_LO;
		case 0xFED4: return Unicode_Category_LO;
		case 0xFED5: return Unicode_Category_LO;
		case 0xFED6: return Unicode_Category_LO;
		case 0xFED7: return Unicode_Category_LO;
		case 0xFED8: return Unicode_Category_LO;
		case 0xFED9: return Unicode_Category_LO;
		case 0xFEDA: return Unicode_Category_LO;
		case 0xFEDB: return Unicode_Category_LO;
		case 0xFEDC: return Unicode_Category_LO;
		case 0xFEDD: return Unicode_Category_LO;
		case 0xFEDE: return Unicode_Category_LO;
		case 0xFEDF: return Unicode_Category_LO;
		case 0xFEE0: return Unicode_Category_LO;
		case 0xFEE1: return Unicode_Category_LO;
		case 0xFEE2: return Unicode_Category_LO;
		case 0xFEE3: return Unicode_Category_LO;
		case 0xFEE4: return Unicode_Category_LO;
		case 0xFEE5: return Unicode_Category_LO;
		case 0xFEE6: return Unicode_Category_LO;
		case 0xFEE7: return Unicode_Category_LO;
		case 0xFEE8: return Unicode_Category_LO;
		case 0xFEE9: return Unicode_Category_LO;
		case 0xFEEA: return Unicode_Category_LO;
		case 0xFEEB: return Unicode_Category_LO;
		case 0xFEEC: return Unicode_Category_LO;
		case 0xFEED: return Unicode_Category_LO;
		case 0xFEEE: return Unicode_Category_LO;
		case 0xFEEF: return Unicode_Category_LO;
		case 0xFEF0: return Unicode_Category_LO;
		case 0xFEF1: return Unicode_Category_LO;
		case 0xFEF2: return Unicode_Category_LO;
		case 0xFEF3: return Unicode_Category_LO;
		case 0xFEF4: return Unicode_Category_LO;
		case 0xFEF5: return Unicode_Category_LO;
		case 0xFEF6: return Unicode_Category_LO;
		case 0xFEF7: return Unicode_Category_LO;
		case 0xFEF8: return Unicode_Category_LO;
		case 0xFEF9: return Unicode_Category_LO;
		case 0xFEFA: return Unicode_Category_LO;
		case 0xFEFB: return Unicode_Category_LO;
		case 0xFEFC: return Unicode_Category_LO;
		case 0xFEFF: return Unicode_Category_CF;
		case 0xFF01: return Unicode_Category_PO;
		case 0xFF02: return Unicode_Category_PO;
		case 0xFF03: return Unicode_Category_PO;
		case 0xFF04: return Unicode_Category_SC;
		case 0xFF05: return Unicode_Category_PO;
		case 0xFF06: return Unicode_Category_PO;
		case 0xFF07: return Unicode_Category_PO;
		case 0xFF08: return Unicode_Category_PS;
		case 0xFF09: return Unicode_Category_PE;
		case 0xFF0A: return Unicode_Category_PO;
		case 0xFF0B: return Unicode_Category_SM;
		case 0xFF0C: return Unicode_Category_PO;
		case 0xFF0D: return Unicode_Category_PD;
		case 0xFF0E: return Unicode_Category_PO;
		case 0xFF0F: return Unicode_Category_PO;
		case 0xFF10: return Unicode_Category_ND;
		case 0xFF11: return Unicode_Category_ND;
		case 0xFF12: return Unicode_Category_ND;
		case 0xFF13: return Unicode_Category_ND;
		case 0xFF14: return Unicode_Category_ND;
		case 0xFF15: return Unicode_Category_ND;
		case 0xFF16: return Unicode_Category_ND;
		case 0xFF17: return Unicode_Category_ND;
		case 0xFF18: return Unicode_Category_ND;
		case 0xFF19: return Unicode_Category_ND;
		case 0xFF1A: return Unicode_Category_PO;
		case 0xFF1B: return Unicode_Category_PO;
		case 0xFF1C: return Unicode_Category_SM;
		case 0xFF1D: return Unicode_Category_SM;
		case 0xFF1E: return Unicode_Category_SM;
		case 0xFF1F: return Unicode_Category_PO;
		case 0xFF20: return Unicode_Category_PO;
		case 0xFF21: return Unicode_Category_LU;
		case 0xFF22: return Unicode_Category_LU;
		case 0xFF23: return Unicode_Category_LU;
		case 0xFF24: return Unicode_Category_LU;
		case 0xFF25: return Unicode_Category_LU;
		case 0xFF26: return Unicode_Category_LU;
		case 0xFF27: return Unicode_Category_LU;
		case 0xFF28: return Unicode_Category_LU;
		case 0xFF29: return Unicode_Category_LU;
		case 0xFF2A: return Unicode_Category_LU;
		case 0xFF2B: return Unicode_Category_LU;
		case 0xFF2C: return Unicode_Category_LU;
		case 0xFF2D: return Unicode_Category_LU;
		case 0xFF2E: return Unicode_Category_LU;
		case 0xFF2F: return Unicode_Category_LU;
		case 0xFF30: return Unicode_Category_LU;
		case 0xFF31: return Unicode_Category_LU;
		case 0xFF32: return Unicode_Category_LU;
		case 0xFF33: return Unicode_Category_LU;
		case 0xFF34: return Unicode_Category_LU;
		case 0xFF35: return Unicode_Category_LU;
		case 0xFF36: return Unicode_Category_LU;
		case 0xFF37: return Unicode_Category_LU;
		case 0xFF38: return Unicode_Category_LU;
		case 0xFF39: return Unicode_Category_LU;
		case 0xFF3A: return Unicode_Category_LU;
		case 0xFF3B: return Unicode_Category_PS;
		case 0xFF3C: return Unicode_Category_PO;
		case 0xFF3D: return Unicode_Category_PE;
		case 0xFF3E: return Unicode_Category_SK;
		case 0xFF3F: return Unicode_Category_PC;
		case 0xFF40: return Unicode_Category_SK;
		case 0xFF41: return Unicode_Category_LL;
		case 0xFF42: return Unicode_Category_LL;
		case 0xFF43: return Unicode_Category_LL;
		case 0xFF44: return Unicode_Category_LL;
		case 0xFF45: return Unicode_Category_LL;
		case 0xFF46: return Unicode_Category_LL;
		case 0xFF47: return Unicode_Category_LL;
		case 0xFF48: return Unicode_Category_LL;
		case 0xFF49: return Unicode_Category_LL;
		case 0xFF4A: return Unicode_Category_LL;
		case 0xFF4B: return Unicode_Category_LL;
		case 0xFF4C: return Unicode_Category_LL;
		case 0xFF4D: return Unicode_Category_LL;
		case 0xFF4E: return Unicode_Category_LL;
		case 0xFF4F: return Unicode_Category_LL;
		case 0xFF50: return Unicode_Category_LL;
		case 0xFF51: return Unicode_Category_LL;
		case 0xFF52: return Unicode_Category_LL;
		case 0xFF53: return Unicode_Category_LL;
		case 0xFF54: return Unicode_Category_LL;
		case 0xFF55: return Unicode_Category_LL;
		case 0xFF56: return Unicode_Category_LL;
		case 0xFF57: return Unicode_Category_LL;
		case 0xFF58: return Unicode_Category_LL;
		case 0xFF59: return Unicode_Category_LL;
		case 0xFF5A: return Unicode_Category_LL;
		case 0xFF5B: return Unicode_Category_PS;
		case 0xFF5C: return Unicode_Category_SM;
		case 0xFF5D: return Unicode_Category_PE;
		case 0xFF5E: return Unicode_Category_SM;
		case 0xFF5F: return Unicode_Category_PS;
		case 0xFF60: return Unicode_Category_PE;
		case 0xFF61: return Unicode_Category_PO;
		case 0xFF62: return Unicode_Category_PS;
		case 0xFF63: return Unicode_Category_PE;
		case 0xFF64: return Unicode_Category_PO;
		case 0xFF65: return Unicode_Category_PO;
		case 0xFF66: return Unicode_Category_LO;
		case 0xFF67: return Unicode_Category_LO;
		case 0xFF68: return Unicode_Category_LO;
		case 0xFF69: return Unicode_Category_LO;
		case 0xFF6A: return Unicode_Category_LO;
		case 0xFF6B: return Unicode_Category_LO;
		case 0xFF6C: return Unicode_Category_LO;
		case 0xFF6D: return Unicode_Category_LO;
		case 0xFF6E: return Unicode_Category_LO;
		case 0xFF6F: return Unicode_Category_LO;
		case 0xFF70: return Unicode_Category_LM;
		case 0xFF71: return Unicode_Category_LO;
		case 0xFF72: return Unicode_Category_LO;
		case 0xFF73: return Unicode_Category_LO;
		case 0xFF74: return Unicode_Category_LO;
		case 0xFF75: return Unicode_Category_LO;
		case 0xFF76: return Unicode_Category_LO;
		case 0xFF77: return Unicode_Category_LO;
		case 0xFF78: return Unicode_Category_LO;
		case 0xFF79: return Unicode_Category_LO;
		case 0xFF7A: return Unicode_Category_LO;
		case 0xFF7B: return Unicode_Category_LO;
		case 0xFF7C: return Unicode_Category_LO;
		case 0xFF7D: return Unicode_Category_LO;
		case 0xFF7E: return Unicode_Category_LO;
		case 0xFF7F: return Unicode_Category_LO;
		case 0xFF80: return Unicode_Category_LO;
		case 0xFF81: return Unicode_Category_LO;
		case 0xFF82: return Unicode_Category_LO;
		case 0xFF83: return Unicode_Category_LO;
		case 0xFF84: return Unicode_Category_LO;
		case 0xFF85: return Unicode_Category_LO;
		case 0xFF86: return Unicode_Category_LO;
		case 0xFF87: return Unicode_Category_LO;
		case 0xFF88: return Unicode_Category_LO;
		case 0xFF89: return Unicode_Category_LO;
		case 0xFF8A: return Unicode_Category_LO;
		case 0xFF8B: return Unicode_Category_LO;
		case 0xFF8C: return Unicode_Category_LO;
		case 0xFF8D: return Unicode_Category_LO;
		case 0xFF8E: return Unicode_Category_LO;
		case 0xFF8F: return Unicode_Category_LO;
		case 0xFF90: return Unicode_Category_LO;
		case 0xFF91: return Unicode_Category_LO;
		case 0xFF92: return Unicode_Category_LO;
		case 0xFF93: return Unicode_Category_LO;
		case 0xFF94: return Unicode_Category_LO;
		case 0xFF95: return Unicode_Category_LO;
		case 0xFF96: return Unicode_Category_LO;
		case 0xFF97: return Unicode_Category_LO;
		case 0xFF98: return Unicode_Category_LO;
		case 0xFF99: return Unicode_Category_LO;
		case 0xFF9A: return Unicode_Category_LO;
		case 0xFF9B: return Unicode_Category_LO;
		case 0xFF9C: return Unicode_Category_LO;
		case 0xFF9D: return Unicode_Category_LO;
		case 0xFF9E: return Unicode_Category_LM;
		case 0xFF9F: return Unicode_Category_LM;
		case 0xFFA0: return Unicode_Category_LO;
		case 0xFFA1: return Unicode_Category_LO;
		case 0xFFA2: return Unicode_Category_LO;
		case 0xFFA3: return Unicode_Category_LO;
		case 0xFFA4: return Unicode_Category_LO;
		case 0xFFA5: return Unicode_Category_LO;
		case 0xFFA6: return Unicode_Category_LO;
		case 0xFFA7: return Unicode_Category_LO;
		case 0xFFA8: return Unicode_Category_LO;
		case 0xFFA9: return Unicode_Category_LO;
		case 0xFFAA: return Unicode_Category_LO;
		case 0xFFAB: return Unicode_Category_LO;
		case 0xFFAC: return Unicode_Category_LO;
		case 0xFFAD: return Unicode_Category_LO;
		case 0xFFAE: return Unicode_Category_LO;
		case 0xFFAF: return Unicode_Category_LO;
		case 0xFFB0: return Unicode_Category_LO;
		case 0xFFB1: return Unicode_Category_LO;
		case 0xFFB2: return Unicode_Category_LO;
		case 0xFFB3: return Unicode_Category_LO;
		case 0xFFB4: return Unicode_Category_LO;
		case 0xFFB5: return Unicode_Category_LO;
		case 0xFFB6: return Unicode_Category_LO;
		case 0xFFB7: return Unicode_Category_LO;
		case 0xFFB8: return Unicode_Category_LO;
		case 0xFFB9: return Unicode_Category_LO;
		case 0xFFBA: return Unicode_Category_LO;
		case 0xFFBB: return Unicode_Category_LO;
		case 0xFFBC: return Unicode_Category_LO;
		case 0xFFBD: return Unicode_Category_LO;
		case 0xFFBE: return Unicode_Category_LO;
		case 0xFFC2: return Unicode_Category_LO;
		case 0xFFC3: return Unicode_Category_LO;
		case 0xFFC4: return Unicode_Category_LO;
		case 0xFFC5: return Unicode_Category_LO;
		case 0xFFC6: return Unicode_Category_LO;
		case 0xFFC7: return Unicode_Category_LO;
		case 0xFFCA: return Unicode_Category_LO;
		case 0xFFCB: return Unicode_Category_LO;
		case 0xFFCC: return Unicode_Category_LO;
		case 0xFFCD: return Unicode_Category_LO;
		case 0xFFCE: return Unicode_Category_LO;
		case 0xFFCF: return Unicode_Category_LO;
		case 0xFFD2: return Unicode_Category_LO;
		case 0xFFD3: return Unicode_Category_LO;
		case 0xFFD4: return Unicode_Category_LO;
		case 0xFFD5: return Unicode_Category_LO;
		case 0xFFD6: return Unicode_Category_LO;
		case 0xFFD7: return Unicode_Category_LO;
		case 0xFFDA: return Unicode_Category_LO;
		case 0xFFDB: return Unicode_Category_LO;
		case 0xFFDC: return Unicode_Category_LO;
		case 0xFFE0: return Unicode_Category_SC;
		case 0xFFE1: return Unicode_Category_SC;
		case 0xFFE2: return Unicode_Category_SM;
		case 0xFFE3: return Unicode_Category_SK;
		case 0xFFE4: return Unicode_Category_SO;
		case 0xFFE5: return Unicode_Category_SC;
		case 0xFFE6: return Unicode_Category_SC;
		case 0xFFE8: return Unicode_Category_SO;
		case 0xFFE9: return Unicode_Category_SM;
		case 0xFFEA: return Unicode_Category_SM;
		case 0xFFEB: return Unicode_Category_SM;
		case 0xFFEC: return Unicode_Category_SM;
		case 0xFFED: return Unicode_Category_SO;
		case 0xFFEE: return Unicode_Category_SO;
		case 0xFFF9: return Unicode_Category_CF;
		case 0xFFFA: return Unicode_Category_CF;
		case 0xFFFB: return Unicode_Category_CF;
		case 0xFFFC: return Unicode_Category_SO;
		case 0xFFFD: return Unicode_Category_SO;
		case 0x10000: return Unicode_Category_LO;
		case 0x10001: return Unicode_Category_LO;
		case 0x10002: return Unicode_Category_LO;
		case 0x10003: return Unicode_Category_LO;
		case 0x10004: return Unicode_Category_LO;
		case 0x10005: return Unicode_Category_LO;
		case 0x10006: return Unicode_Category_LO;
		case 0x10007: return Unicode_Category_LO;
		case 0x10008: return Unicode_Category_LO;
		case 0x10009: return Unicode_Category_LO;
		case 0x1000A: return Unicode_Category_LO;
		case 0x1000B: return Unicode_Category_LO;
		case 0x1000D: return Unicode_Category_LO;
		case 0x1000E: return Unicode_Category_LO;
		case 0x1000F: return Unicode_Category_LO;
		case 0x10010: return Unicode_Category_LO;
		case 0x10011: return Unicode_Category_LO;
		case 0x10012: return Unicode_Category_LO;
		case 0x10013: return Unicode_Category_LO;
		case 0x10014: return Unicode_Category_LO;
		case 0x10015: return Unicode_Category_LO;
		case 0x10016: return Unicode_Category_LO;
		case 0x10017: return Unicode_Category_LO;
		case 0x10018: return Unicode_Category_LO;
		case 0x10019: return Unicode_Category_LO;
		case 0x1001A: return Unicode_Category_LO;
		case 0x1001B: return Unicode_Category_LO;
		case 0x1001C: return Unicode_Category_LO;
		case 0x1001D: return Unicode_Category_LO;
		case 0x1001E: return Unicode_Category_LO;
		case 0x1001F: return Unicode_Category_LO;
		case 0x10020: return Unicode_Category_LO;
		case 0x10021: return Unicode_Category_LO;
		case 0x10022: return Unicode_Category_LO;
		case 0x10023: return Unicode_Category_LO;
		case 0x10024: return Unicode_Category_LO;
		case 0x10025: return Unicode_Category_LO;
		case 0x10026: return Unicode_Category_LO;
		case 0x10028: return Unicode_Category_LO;
		case 0x10029: return Unicode_Category_LO;
		case 0x1002A: return Unicode_Category_LO;
		case 0x1002B: return Unicode_Category_LO;
		case 0x1002C: return Unicode_Category_LO;
		case 0x1002D: return Unicode_Category_LO;
		case 0x1002E: return Unicode_Category_LO;
		case 0x1002F: return Unicode_Category_LO;
		case 0x10030: return Unicode_Category_LO;
		case 0x10031: return Unicode_Category_LO;
		case 0x10032: return Unicode_Category_LO;
		case 0x10033: return Unicode_Category_LO;
		case 0x10034: return Unicode_Category_LO;
		case 0x10035: return Unicode_Category_LO;
		case 0x10036: return Unicode_Category_LO;
		case 0x10037: return Unicode_Category_LO;
		case 0x10038: return Unicode_Category_LO;
		case 0x10039: return Unicode_Category_LO;
		case 0x1003A: return Unicode_Category_LO;
		case 0x1003C: return Unicode_Category_LO;
		case 0x1003D: return Unicode_Category_LO;
		case 0x1003F: return Unicode_Category_LO;
		case 0x10040: return Unicode_Category_LO;
		case 0x10041: return Unicode_Category_LO;
		case 0x10042: return Unicode_Category_LO;
		case 0x10043: return Unicode_Category_LO;
		case 0x10044: return Unicode_Category_LO;
		case 0x10045: return Unicode_Category_LO;
		case 0x10046: return Unicode_Category_LO;
		case 0x10047: return Unicode_Category_LO;
		case 0x10048: return Unicode_Category_LO;
		case 0x10049: return Unicode_Category_LO;
		case 0x1004A: return Unicode_Category_LO;
		case 0x1004B: return Unicode_Category_LO;
		case 0x1004C: return Unicode_Category_LO;
		case 0x1004D: return Unicode_Category_LO;
		case 0x10050: return Unicode_Category_LO;
		case 0x10051: return Unicode_Category_LO;
		case 0x10052: return Unicode_Category_LO;
		case 0x10053: return Unicode_Category_LO;
		case 0x10054: return Unicode_Category_LO;
		case 0x10055: return Unicode_Category_LO;
		case 0x10056: return Unicode_Category_LO;
		case 0x10057: return Unicode_Category_LO;
		case 0x10058: return Unicode_Category_LO;
		case 0x10059: return Unicode_Category_LO;
		case 0x1005A: return Unicode_Category_LO;
		case 0x1005B: return Unicode_Category_LO;
		case 0x1005C: return Unicode_Category_LO;
		case 0x1005D: return Unicode_Category_LO;
		case 0x10080: return Unicode_Category_LO;
		case 0x10081: return Unicode_Category_LO;
		case 0x10082: return Unicode_Category_LO;
		case 0x10083: return Unicode_Category_LO;
		case 0x10084: return Unicode_Category_LO;
		case 0x10085: return Unicode_Category_LO;
		case 0x10086: return Unicode_Category_LO;
		case 0x10087: return Unicode_Category_LO;
		case 0x10088: return Unicode_Category_LO;
		case 0x10089: return Unicode_Category_LO;
		case 0x1008A: return Unicode_Category_LO;
		case 0x1008B: return Unicode_Category_LO;
		case 0x1008C: return Unicode_Category_LO;
		case 0x1008D: return Unicode_Category_LO;
		case 0x1008E: return Unicode_Category_LO;
		case 0x1008F: return Unicode_Category_LO;
		case 0x10090: return Unicode_Category_LO;
		case 0x10091: return Unicode_Category_LO;
		case 0x10092: return Unicode_Category_LO;
		case 0x10093: return Unicode_Category_LO;
		case 0x10094: return Unicode_Category_LO;
		case 0x10095: return Unicode_Category_LO;
		case 0x10096: return Unicode_Category_LO;
		case 0x10097: return Unicode_Category_LO;
		case 0x10098: return Unicode_Category_LO;
		case 0x10099: return Unicode_Category_LO;
		case 0x1009A: return Unicode_Category_LO;
		case 0x1009B: return Unicode_Category_LO;
		case 0x1009C: return Unicode_Category_LO;
		case 0x1009D: return Unicode_Category_LO;
		case 0x1009E: return Unicode_Category_LO;
		case 0x1009F: return Unicode_Category_LO;
		case 0x100A0: return Unicode_Category_LO;
		case 0x100A1: return Unicode_Category_LO;
		case 0x100A2: return Unicode_Category_LO;
		case 0x100A3: return Unicode_Category_LO;
		case 0x100A4: return Unicode_Category_LO;
		case 0x100A5: return Unicode_Category_LO;
		case 0x100A6: return Unicode_Category_LO;
		case 0x100A7: return Unicode_Category_LO;
		case 0x100A8: return Unicode_Category_LO;
		case 0x100A9: return Unicode_Category_LO;
		case 0x100AA: return Unicode_Category_LO;
		case 0x100AB: return Unicode_Category_LO;
		case 0x100AC: return Unicode_Category_LO;
		case 0x100AD: return Unicode_Category_LO;
		case 0x100AE: return Unicode_Category_LO;
		case 0x100AF: return Unicode_Category_LO;
		case 0x100B0: return Unicode_Category_LO;
		case 0x100B1: return Unicode_Category_LO;
		case 0x100B2: return Unicode_Category_LO;
		case 0x100B3: return Unicode_Category_LO;
		case 0x100B4: return Unicode_Category_LO;
		case 0x100B5: return Unicode_Category_LO;
		case 0x100B6: return Unicode_Category_LO;
		case 0x100B7: return Unicode_Category_LO;
		case 0x100B8: return Unicode_Category_LO;
		case 0x100B9: return Unicode_Category_LO;
		case 0x100BA: return Unicode_Category_LO;
		case 0x100BB: return Unicode_Category_LO;
		case 0x100BC: return Unicode_Category_LO;
		case 0x100BD: return Unicode_Category_LO;
		case 0x100BE: return Unicode_Category_LO;
		case 0x100BF: return Unicode_Category_LO;
		case 0x100C0: return Unicode_Category_LO;
		case 0x100C1: return Unicode_Category_LO;
		case 0x100C2: return Unicode_Category_LO;
		case 0x100C3: return Unicode_Category_LO;
		case 0x100C4: return Unicode_Category_LO;
		case 0x100C5: return Unicode_Category_LO;
		case 0x100C6: return Unicode_Category_LO;
		case 0x100C7: return Unicode_Category_LO;
		case 0x100C8: return Unicode_Category_LO;
		case 0x100C9: return Unicode_Category_LO;
		case 0x100CA: return Unicode_Category_LO;
		case 0x100CB: return Unicode_Category_LO;
		case 0x100CC: return Unicode_Category_LO;
		case 0x100CD: return Unicode_Category_LO;
		case 0x100CE: return Unicode_Category_LO;
		case 0x100CF: return Unicode_Category_LO;
		case 0x100D0: return Unicode_Category_LO;
		case 0x100D1: return Unicode_Category_LO;
		case 0x100D2: return Unicode_Category_LO;
		case 0x100D3: return Unicode_Category_LO;
		case 0x100D4: return Unicode_Category_LO;
		case 0x100D5: return Unicode_Category_LO;
		case 0x100D6: return Unicode_Category_LO;
		case 0x100D7: return Unicode_Category_LO;
		case 0x100D8: return Unicode_Category_LO;
		case 0x100D9: return Unicode_Category_LO;
		case 0x100DA: return Unicode_Category_LO;
		case 0x100DB: return Unicode_Category_LO;
		case 0x100DC: return Unicode_Category_LO;
		case 0x100DD: return Unicode_Category_LO;
		case 0x100DE: return Unicode_Category_LO;
		case 0x100DF: return Unicode_Category_LO;
		case 0x100E0: return Unicode_Category_LO;
		case 0x100E1: return Unicode_Category_LO;
		case 0x100E2: return Unicode_Category_LO;
		case 0x100E3: return Unicode_Category_LO;
		case 0x100E4: return Unicode_Category_LO;
		case 0x100E5: return Unicode_Category_LO;
		case 0x100E6: return Unicode_Category_LO;
		case 0x100E7: return Unicode_Category_LO;
		case 0x100E8: return Unicode_Category_LO;
		case 0x100E9: return Unicode_Category_LO;
		case 0x100EA: return Unicode_Category_LO;
		case 0x100EB: return Unicode_Category_LO;
		case 0x100EC: return Unicode_Category_LO;
		case 0x100ED: return Unicode_Category_LO;
		case 0x100EE: return Unicode_Category_LO;
		case 0x100EF: return Unicode_Category_LO;
		case 0x100F0: return Unicode_Category_LO;
		case 0x100F1: return Unicode_Category_LO;
		case 0x100F2: return Unicode_Category_LO;
		case 0x100F3: return Unicode_Category_LO;
		case 0x100F4: return Unicode_Category_LO;
		case 0x100F5: return Unicode_Category_LO;
		case 0x100F6: return Unicode_Category_LO;
		case 0x100F7: return Unicode_Category_LO;
		case 0x100F8: return Unicode_Category_LO;
		case 0x100F9: return Unicode_Category_LO;
		case 0x100FA: return Unicode_Category_LO;
		case 0x10100: return Unicode_Category_PO;
		case 0x10101: return Unicode_Category_PO;
		case 0x10102: return Unicode_Category_PO;
		case 0x10107: return Unicode_Category_NO;
		case 0x10108: return Unicode_Category_NO;
		case 0x10109: return Unicode_Category_NO;
		case 0x1010A: return Unicode_Category_NO;
		case 0x1010B: return Unicode_Category_NO;
		case 0x1010C: return Unicode_Category_NO;
		case 0x1010D: return Unicode_Category_NO;
		case 0x1010E: return Unicode_Category_NO;
		case 0x1010F: return Unicode_Category_NO;
		case 0x10110: return Unicode_Category_NO;
		case 0x10111: return Unicode_Category_NO;
		case 0x10112: return Unicode_Category_NO;
		case 0x10113: return Unicode_Category_NO;
		case 0x10114: return Unicode_Category_NO;
		case 0x10115: return Unicode_Category_NO;
		case 0x10116: return Unicode_Category_NO;
		case 0x10117: return Unicode_Category_NO;
		case 0x10118: return Unicode_Category_NO;
		case 0x10119: return Unicode_Category_NO;
		case 0x1011A: return Unicode_Category_NO;
		case 0x1011B: return Unicode_Category_NO;
		case 0x1011C: return Unicode_Category_NO;
		case 0x1011D: return Unicode_Category_NO;
		case 0x1011E: return Unicode_Category_NO;
		case 0x1011F: return Unicode_Category_NO;
		case 0x10120: return Unicode_Category_NO;
		case 0x10121: return Unicode_Category_NO;
		case 0x10122: return Unicode_Category_NO;
		case 0x10123: return Unicode_Category_NO;
		case 0x10124: return Unicode_Category_NO;
		case 0x10125: return Unicode_Category_NO;
		case 0x10126: return Unicode_Category_NO;
		case 0x10127: return Unicode_Category_NO;
		case 0x10128: return Unicode_Category_NO;
		case 0x10129: return Unicode_Category_NO;
		case 0x1012A: return Unicode_Category_NO;
		case 0x1012B: return Unicode_Category_NO;
		case 0x1012C: return Unicode_Category_NO;
		case 0x1012D: return Unicode_Category_NO;
		case 0x1012E: return Unicode_Category_NO;
		case 0x1012F: return Unicode_Category_NO;
		case 0x10130: return Unicode_Category_NO;
		case 0x10131: return Unicode_Category_NO;
		case 0x10132: return Unicode_Category_NO;
		case 0x10133: return Unicode_Category_NO;
		case 0x10137: return Unicode_Category_SO;
		case 0x10138: return Unicode_Category_SO;
		case 0x10139: return Unicode_Category_SO;
		case 0x1013A: return Unicode_Category_SO;
		case 0x1013B: return Unicode_Category_SO;
		case 0x1013C: return Unicode_Category_SO;
		case 0x1013D: return Unicode_Category_SO;
		case 0x1013E: return Unicode_Category_SO;
		case 0x1013F: return Unicode_Category_SO;
		case 0x10140: return Unicode_Category_NL;
		case 0x10141: return Unicode_Category_NL;
		case 0x10142: return Unicode_Category_NL;
		case 0x10143: return Unicode_Category_NL;
		case 0x10144: return Unicode_Category_NL;
		case 0x10145: return Unicode_Category_NL;
		case 0x10146: return Unicode_Category_NL;
		case 0x10147: return Unicode_Category_NL;
		case 0x10148: return Unicode_Category_NL;
		case 0x10149: return Unicode_Category_NL;
		case 0x1014A: return Unicode_Category_NL;
		case 0x1014B: return Unicode_Category_NL;
		case 0x1014C: return Unicode_Category_NL;
		case 0x1014D: return Unicode_Category_NL;
		case 0x1014E: return Unicode_Category_NL;
		case 0x1014F: return Unicode_Category_NL;
		case 0x10150: return Unicode_Category_NL;
		case 0x10151: return Unicode_Category_NL;
		case 0x10152: return Unicode_Category_NL;
		case 0x10153: return Unicode_Category_NL;
		case 0x10154: return Unicode_Category_NL;
		case 0x10155: return Unicode_Category_NL;
		case 0x10156: return Unicode_Category_NL;
		case 0x10157: return Unicode_Category_NL;
		case 0x10158: return Unicode_Category_NL;
		case 0x10159: return Unicode_Category_NL;
		case 0x1015A: return Unicode_Category_NL;
		case 0x1015B: return Unicode_Category_NL;
		case 0x1015C: return Unicode_Category_NL;
		case 0x1015D: return Unicode_Category_NL;
		case 0x1015E: return Unicode_Category_NL;
		case 0x1015F: return Unicode_Category_NL;
		case 0x10160: return Unicode_Category_NL;
		case 0x10161: return Unicode_Category_NL;
		case 0x10162: return Unicode_Category_NL;
		case 0x10163: return Unicode_Category_NL;
		case 0x10164: return Unicode_Category_NL;
		case 0x10165: return Unicode_Category_NL;
		case 0x10166: return Unicode_Category_NL;
		case 0x10167: return Unicode_Category_NL;
		case 0x10168: return Unicode_Category_NL;
		case 0x10169: return Unicode_Category_NL;
		case 0x1016A: return Unicode_Category_NL;
		case 0x1016B: return Unicode_Category_NL;
		case 0x1016C: return Unicode_Category_NL;
		case 0x1016D: return Unicode_Category_NL;
		case 0x1016E: return Unicode_Category_NL;
		case 0x1016F: return Unicode_Category_NL;
		case 0x10170: return Unicode_Category_NL;
		case 0x10171: return Unicode_Category_NL;
		case 0x10172: return Unicode_Category_NL;
		case 0x10173: return Unicode_Category_NL;
		case 0x10174: return Unicode_Category_NL;
		case 0x10175: return Unicode_Category_NO;
		case 0x10176: return Unicode_Category_NO;
		case 0x10177: return Unicode_Category_NO;
		case 0x10178: return Unicode_Category_NO;
		case 0x10179: return Unicode_Category_SO;
		case 0x1017A: return Unicode_Category_SO;
		case 0x1017B: return Unicode_Category_SO;
		case 0x1017C: return Unicode_Category_SO;
		case 0x1017D: return Unicode_Category_SO;
		case 0x1017E: return Unicode_Category_SO;
		case 0x1017F: return Unicode_Category_SO;
		case 0x10180: return Unicode_Category_SO;
		case 0x10181: return Unicode_Category_SO;
		case 0x10182: return Unicode_Category_SO;
		case 0x10183: return Unicode_Category_SO;
		case 0x10184: return Unicode_Category_SO;
		case 0x10185: return Unicode_Category_SO;
		case 0x10186: return Unicode_Category_SO;
		case 0x10187: return Unicode_Category_SO;
		case 0x10188: return Unicode_Category_SO;
		case 0x10189: return Unicode_Category_SO;
		case 0x1018A: return Unicode_Category_NO;
		case 0x1018B: return Unicode_Category_NO;
		case 0x1018C: return Unicode_Category_SO;
		case 0x1018D: return Unicode_Category_SO;
		case 0x1018E: return Unicode_Category_SO;
		case 0x10190: return Unicode_Category_SO;
		case 0x10191: return Unicode_Category_SO;
		case 0x10192: return Unicode_Category_SO;
		case 0x10193: return Unicode_Category_SO;
		case 0x10194: return Unicode_Category_SO;
		case 0x10195: return Unicode_Category_SO;
		case 0x10196: return Unicode_Category_SO;
		case 0x10197: return Unicode_Category_SO;
		case 0x10198: return Unicode_Category_SO;
		case 0x10199: return Unicode_Category_SO;
		case 0x1019A: return Unicode_Category_SO;
		case 0x1019B: return Unicode_Category_SO;
		case 0x1019C: return Unicode_Category_SO;
		case 0x101A0: return Unicode_Category_SO;
		case 0x101D0: return Unicode_Category_SO;
		case 0x101D1: return Unicode_Category_SO;
		case 0x101D2: return Unicode_Category_SO;
		case 0x101D3: return Unicode_Category_SO;
		case 0x101D4: return Unicode_Category_SO;
		case 0x101D5: return Unicode_Category_SO;
		case 0x101D6: return Unicode_Category_SO;
		case 0x101D7: return Unicode_Category_SO;
		case 0x101D8: return Unicode_Category_SO;
		case 0x101D9: return Unicode_Category_SO;
		case 0x101DA: return Unicode_Category_SO;
		case 0x101DB: return Unicode_Category_SO;
		case 0x101DC: return Unicode_Category_SO;
		case 0x101DD: return Unicode_Category_SO;
		case 0x101DE: return Unicode_Category_SO;
		case 0x101DF: return Unicode_Category_SO;
		case 0x101E0: return Unicode_Category_SO;
		case 0x101E1: return Unicode_Category_SO;
		case 0x101E2: return Unicode_Category_SO;
		case 0x101E3: return Unicode_Category_SO;
		case 0x101E4: return Unicode_Category_SO;
		case 0x101E5: return Unicode_Category_SO;
		case 0x101E6: return Unicode_Category_SO;
		case 0x101E7: return Unicode_Category_SO;
		case 0x101E8: return Unicode_Category_SO;
		case 0x101E9: return Unicode_Category_SO;
		case 0x101EA: return Unicode_Category_SO;
		case 0x101EB: return Unicode_Category_SO;
		case 0x101EC: return Unicode_Category_SO;
		case 0x101ED: return Unicode_Category_SO;
		case 0x101EE: return Unicode_Category_SO;
		case 0x101EF: return Unicode_Category_SO;
		case 0x101F0: return Unicode_Category_SO;
		case 0x101F1: return Unicode_Category_SO;
		case 0x101F2: return Unicode_Category_SO;
		case 0x101F3: return Unicode_Category_SO;
		case 0x101F4: return Unicode_Category_SO;
		case 0x101F5: return Unicode_Category_SO;
		case 0x101F6: return Unicode_Category_SO;
		case 0x101F7: return Unicode_Category_SO;
		case 0x101F8: return Unicode_Category_SO;
		case 0x101F9: return Unicode_Category_SO;
		case 0x101FA: return Unicode_Category_SO;
		case 0x101FB: return Unicode_Category_SO;
		case 0x101FC: return Unicode_Category_SO;
		case 0x101FD: return Unicode_Category_MN;
		case 0x10280: return Unicode_Category_LO;
		case 0x10281: return Unicode_Category_LO;
		case 0x10282: return Unicode_Category_LO;
		case 0x10283: return Unicode_Category_LO;
		case 0x10284: return Unicode_Category_LO;
		case 0x10285: return Unicode_Category_LO;
		case 0x10286: return Unicode_Category_LO;
		case 0x10287: return Unicode_Category_LO;
		case 0x10288: return Unicode_Category_LO;
		case 0x10289: return Unicode_Category_LO;
		case 0x1028A: return Unicode_Category_LO;
		case 0x1028B: return Unicode_Category_LO;
		case 0x1028C: return Unicode_Category_LO;
		case 0x1028D: return Unicode_Category_LO;
		case 0x1028E: return Unicode_Category_LO;
		case 0x1028F: return Unicode_Category_LO;
		case 0x10290: return Unicode_Category_LO;
		case 0x10291: return Unicode_Category_LO;
		case 0x10292: return Unicode_Category_LO;
		case 0x10293: return Unicode_Category_LO;
		case 0x10294: return Unicode_Category_LO;
		case 0x10295: return Unicode_Category_LO;
		case 0x10296: return Unicode_Category_LO;
		case 0x10297: return Unicode_Category_LO;
		case 0x10298: return Unicode_Category_LO;
		case 0x10299: return Unicode_Category_LO;
		case 0x1029A: return Unicode_Category_LO;
		case 0x1029B: return Unicode_Category_LO;
		case 0x1029C: return Unicode_Category_LO;
		case 0x102A0: return Unicode_Category_LO;
		case 0x102A1: return Unicode_Category_LO;
		case 0x102A2: return Unicode_Category_LO;
		case 0x102A3: return Unicode_Category_LO;
		case 0x102A4: return Unicode_Category_LO;
		case 0x102A5: return Unicode_Category_LO;
		case 0x102A6: return Unicode_Category_LO;
		case 0x102A7: return Unicode_Category_LO;
		case 0x102A8: return Unicode_Category_LO;
		case 0x102A9: return Unicode_Category_LO;
		case 0x102AA: return Unicode_Category_LO;
		case 0x102AB: return Unicode_Category_LO;
		case 0x102AC: return Unicode_Category_LO;
		case 0x102AD: return Unicode_Category_LO;
		case 0x102AE: return Unicode_Category_LO;
		case 0x102AF: return Unicode_Category_LO;
		case 0x102B0: return Unicode_Category_LO;
		case 0x102B1: return Unicode_Category_LO;
		case 0x102B2: return Unicode_Category_LO;
		case 0x102B3: return Unicode_Category_LO;
		case 0x102B4: return Unicode_Category_LO;
		case 0x102B5: return Unicode_Category_LO;
		case 0x102B6: return Unicode_Category_LO;
		case 0x102B7: return Unicode_Category_LO;
		case 0x102B8: return Unicode_Category_LO;
		case 0x102B9: return Unicode_Category_LO;
		case 0x102BA: return Unicode_Category_LO;
		case 0x102BB: return Unicode_Category_LO;
		case 0x102BC: return Unicode_Category_LO;
		case 0x102BD: return Unicode_Category_LO;
		case 0x102BE: return Unicode_Category_LO;
		case 0x102BF: return Unicode_Category_LO;
		case 0x102C0: return Unicode_Category_LO;
		case 0x102C1: return Unicode_Category_LO;
		case 0x102C2: return Unicode_Category_LO;
		case 0x102C3: return Unicode_Category_LO;
		case 0x102C4: return Unicode_Category_LO;
		case 0x102C5: return Unicode_Category_LO;
		case 0x102C6: return Unicode_Category_LO;
		case 0x102C7: return Unicode_Category_LO;
		case 0x102C8: return Unicode_Category_LO;
		case 0x102C9: return Unicode_Category_LO;
		case 0x102CA: return Unicode_Category_LO;
		case 0x102CB: return Unicode_Category_LO;
		case 0x102CC: return Unicode_Category_LO;
		case 0x102CD: return Unicode_Category_LO;
		case 0x102CE: return Unicode_Category_LO;
		case 0x102CF: return Unicode_Category_LO;
		case 0x102D0: return Unicode_Category_LO;
		case 0x102E0: return Unicode_Category_MN;
		case 0x102E1: return Unicode_Category_NO;
		case 0x102E2: return Unicode_Category_NO;
		case 0x102E3: return Unicode_Category_NO;
		case 0x102E4: return Unicode_Category_NO;
		case 0x102E5: return Unicode_Category_NO;
		case 0x102E6: return Unicode_Category_NO;
		case 0x102E7: return Unicode_Category_NO;
		case 0x102E8: return Unicode_Category_NO;
		case 0x102E9: return Unicode_Category_NO;
		case 0x102EA: return Unicode_Category_NO;
		case 0x102EB: return Unicode_Category_NO;
		case 0x102EC: return Unicode_Category_NO;
		case 0x102ED: return Unicode_Category_NO;
		case 0x102EE: return Unicode_Category_NO;
		case 0x102EF: return Unicode_Category_NO;
		case 0x102F0: return Unicode_Category_NO;
		case 0x102F1: return Unicode_Category_NO;
		case 0x102F2: return Unicode_Category_NO;
		case 0x102F3: return Unicode_Category_NO;
		case 0x102F4: return Unicode_Category_NO;
		case 0x102F5: return Unicode_Category_NO;
		case 0x102F6: return Unicode_Category_NO;
		case 0x102F7: return Unicode_Category_NO;
		case 0x102F8: return Unicode_Category_NO;
		case 0x102F9: return Unicode_Category_NO;
		case 0x102FA: return Unicode_Category_NO;
		case 0x102FB: return Unicode_Category_NO;
		case 0x10300: return Unicode_Category_LO;
		case 0x10301: return Unicode_Category_LO;
		case 0x10302: return Unicode_Category_LO;
		case 0x10303: return Unicode_Category_LO;
		case 0x10304: return Unicode_Category_LO;
		case 0x10305: return Unicode_Category_LO;
		case 0x10306: return Unicode_Category_LO;
		case 0x10307: return Unicode_Category_LO;
		case 0x10308: return Unicode_Category_LO;
		case 0x10309: return Unicode_Category_LO;
		case 0x1030A: return Unicode_Category_LO;
		case 0x1030B: return Unicode_Category_LO;
		case 0x1030C: return Unicode_Category_LO;
		case 0x1030D: return Unicode_Category_LO;
		case 0x1030E: return Unicode_Category_LO;
		case 0x1030F: return Unicode_Category_LO;
		case 0x10310: return Unicode_Category_LO;
		case 0x10311: return Unicode_Category_LO;
		case 0x10312: return Unicode_Category_LO;
		case 0x10313: return Unicode_Category_LO;
		case 0x10314: return Unicode_Category_LO;
		case 0x10315: return Unicode_Category_LO;
		case 0x10316: return Unicode_Category_LO;
		case 0x10317: return Unicode_Category_LO;
		case 0x10318: return Unicode_Category_LO;
		case 0x10319: return Unicode_Category_LO;
		case 0x1031A: return Unicode_Category_LO;
		case 0x1031B: return Unicode_Category_LO;
		case 0x1031C: return Unicode_Category_LO;
		case 0x1031D: return Unicode_Category_LO;
		case 0x1031E: return Unicode_Category_LO;
		case 0x1031F: return Unicode_Category_LO;
		case 0x10320: return Unicode_Category_NO;
		case 0x10321: return Unicode_Category_NO;
		case 0x10322: return Unicode_Category_NO;
		case 0x10323: return Unicode_Category_NO;
		case 0x1032D: return Unicode_Category_LO;
		case 0x1032E: return Unicode_Category_LO;
		case 0x1032F: return Unicode_Category_LO;
		case 0x10330: return Unicode_Category_LO;
		case 0x10331: return Unicode_Category_LO;
		case 0x10332: return Unicode_Category_LO;
		case 0x10333: return Unicode_Category_LO;
		case 0x10334: return Unicode_Category_LO;
		case 0x10335: return Unicode_Category_LO;
		case 0x10336: return Unicode_Category_LO;
		case 0x10337: return Unicode_Category_LO;
		case 0x10338: return Unicode_Category_LO;
		case 0x10339: return Unicode_Category_LO;
		case 0x1033A: return Unicode_Category_LO;
		case 0x1033B: return Unicode_Category_LO;
		case 0x1033C: return Unicode_Category_LO;
		case 0x1033D: return Unicode_Category_LO;
		case 0x1033E: return Unicode_Category_LO;
		case 0x1033F: return Unicode_Category_LO;
		case 0x10340: return Unicode_Category_LO;
		case 0x10341: return Unicode_Category_NL;
		case 0x10342: return Unicode_Category_LO;
		case 0x10343: return Unicode_Category_LO;
		case 0x10344: return Unicode_Category_LO;
		case 0x10345: return Unicode_Category_LO;
		case 0x10346: return Unicode_Category_LO;
		case 0x10347: return Unicode_Category_LO;
		case 0x10348: return Unicode_Category_LO;
		case 0x10349: return Unicode_Category_LO;
		case 0x1034A: return Unicode_Category_NL;
		case 0x10350: return Unicode_Category_LO;
		case 0x10351: return Unicode_Category_LO;
		case 0x10352: return Unicode_Category_LO;
		case 0x10353: return Unicode_Category_LO;
		case 0x10354: return Unicode_Category_LO;
		case 0x10355: return Unicode_Category_LO;
		case 0x10356: return Unicode_Category_LO;
		case 0x10357: return Unicode_Category_LO;
		case 0x10358: return Unicode_Category_LO;
		case 0x10359: return Unicode_Category_LO;
		case 0x1035A: return Unicode_Category_LO;
		case 0x1035B: return Unicode_Category_LO;
		case 0x1035C: return Unicode_Category_LO;
		case 0x1035D: return Unicode_Category_LO;
		case 0x1035E: return Unicode_Category_LO;
		case 0x1035F: return Unicode_Category_LO;
		case 0x10360: return Unicode_Category_LO;
		case 0x10361: return Unicode_Category_LO;
		case 0x10362: return Unicode_Category_LO;
		case 0x10363: return Unicode_Category_LO;
		case 0x10364: return Unicode_Category_LO;
		case 0x10365: return Unicode_Category_LO;
		case 0x10366: return Unicode_Category_LO;
		case 0x10367: return Unicode_Category_LO;
		case 0x10368: return Unicode_Category_LO;
		case 0x10369: return Unicode_Category_LO;
		case 0x1036A: return Unicode_Category_LO;
		case 0x1036B: return Unicode_Category_LO;
		case 0x1036C: return Unicode_Category_LO;
		case 0x1036D: return Unicode_Category_LO;
		case 0x1036E: return Unicode_Category_LO;
		case 0x1036F: return Unicode_Category_LO;
		case 0x10370: return Unicode_Category_LO;
		case 0x10371: return Unicode_Category_LO;
		case 0x10372: return Unicode_Category_LO;
		case 0x10373: return Unicode_Category_LO;
		case 0x10374: return Unicode_Category_LO;
		case 0x10375: return Unicode_Category_LO;
		case 0x10376: return Unicode_Category_MN;
		case 0x10377: return Unicode_Category_MN;
		case 0x10378: return Unicode_Category_MN;
		case 0x10379: return Unicode_Category_MN;
		case 0x1037A: return Unicode_Category_MN;
		case 0x10380: return Unicode_Category_LO;
		case 0x10381: return Unicode_Category_LO;
		case 0x10382: return Unicode_Category_LO;
		case 0x10383: return Unicode_Category_LO;
		case 0x10384: return Unicode_Category_LO;
		case 0x10385: return Unicode_Category_LO;
		case 0x10386: return Unicode_Category_LO;
		case 0x10387: return Unicode_Category_LO;
		case 0x10388: return Unicode_Category_LO;
		case 0x10389: return Unicode_Category_LO;
		case 0x1038A: return Unicode_Category_LO;
		case 0x1038B: return Unicode_Category_LO;
		case 0x1038C: return Unicode_Category_LO;
		case 0x1038D: return Unicode_Category_LO;
		case 0x1038E: return Unicode_Category_LO;
		case 0x1038F: return Unicode_Category_LO;
		case 0x10390: return Unicode_Category_LO;
		case 0x10391: return Unicode_Category_LO;
		case 0x10392: return Unicode_Category_LO;
		case 0x10393: return Unicode_Category_LO;
		case 0x10394: return Unicode_Category_LO;
		case 0x10395: return Unicode_Category_LO;
		case 0x10396: return Unicode_Category_LO;
		case 0x10397: return Unicode_Category_LO;
		case 0x10398: return Unicode_Category_LO;
		case 0x10399: return Unicode_Category_LO;
		case 0x1039A: return Unicode_Category_LO;
		case 0x1039B: return Unicode_Category_LO;
		case 0x1039C: return Unicode_Category_LO;
		case 0x1039D: return Unicode_Category_LO;
		case 0x1039F: return Unicode_Category_PO;
		case 0x103A0: return Unicode_Category_LO;
		case 0x103A1: return Unicode_Category_LO;
		case 0x103A2: return Unicode_Category_LO;
		case 0x103A3: return Unicode_Category_LO;
		case 0x103A4: return Unicode_Category_LO;
		case 0x103A5: return Unicode_Category_LO;
		case 0x103A6: return Unicode_Category_LO;
		case 0x103A7: return Unicode_Category_LO;
		case 0x103A8: return Unicode_Category_LO;
		case 0x103A9: return Unicode_Category_LO;
		case 0x103AA: return Unicode_Category_LO;
		case 0x103AB: return Unicode_Category_LO;
		case 0x103AC: return Unicode_Category_LO;
		case 0x103AD: return Unicode_Category_LO;
		case 0x103AE: return Unicode_Category_LO;
		case 0x103AF: return Unicode_Category_LO;
		case 0x103B0: return Unicode_Category_LO;
		case 0x103B1: return Unicode_Category_LO;
		case 0x103B2: return Unicode_Category_LO;
		case 0x103B3: return Unicode_Category_LO;
		case 0x103B4: return Unicode_Category_LO;
		case 0x103B5: return Unicode_Category_LO;
		case 0x103B6: return Unicode_Category_LO;
		case 0x103B7: return Unicode_Category_LO;
		case 0x103B8: return Unicode_Category_LO;
		case 0x103B9: return Unicode_Category_LO;
		case 0x103BA: return Unicode_Category_LO;
		case 0x103BB: return Unicode_Category_LO;
		case 0x103BC: return Unicode_Category_LO;
		case 0x103BD: return Unicode_Category_LO;
		case 0x103BE: return Unicode_Category_LO;
		case 0x103BF: return Unicode_Category_LO;
		case 0x103C0: return Unicode_Category_LO;
		case 0x103C1: return Unicode_Category_LO;
		case 0x103C2: return Unicode_Category_LO;
		case 0x103C3: return Unicode_Category_LO;
		case 0x103C8: return Unicode_Category_LO;
		case 0x103C9: return Unicode_Category_LO;
		case 0x103CA: return Unicode_Category_LO;
		case 0x103CB: return Unicode_Category_LO;
		case 0x103CC: return Unicode_Category_LO;
		case 0x103CD: return Unicode_Category_LO;
		case 0x103CE: return Unicode_Category_LO;
		case 0x103CF: return Unicode_Category_LO;
		case 0x103D0: return Unicode_Category_PO;
		case 0x103D1: return Unicode_Category_NL;
		case 0x103D2: return Unicode_Category_NL;
		case 0x103D3: return Unicode_Category_NL;
		case 0x103D4: return Unicode_Category_NL;
		case 0x103D5: return Unicode_Category_NL;
		case 0x10400: return Unicode_Category_LU;
		case 0x10401: return Unicode_Category_LU;
		case 0x10402: return Unicode_Category_LU;
		case 0x10403: return Unicode_Category_LU;
		case 0x10404: return Unicode_Category_LU;
		case 0x10405: return Unicode_Category_LU;
		case 0x10406: return Unicode_Category_LU;
		case 0x10407: return Unicode_Category_LU;
		case 0x10408: return Unicode_Category_LU;
		case 0x10409: return Unicode_Category_LU;
		case 0x1040A: return Unicode_Category_LU;
		case 0x1040B: return Unicode_Category_LU;
		case 0x1040C: return Unicode_Category_LU;
		case 0x1040D: return Unicode_Category_LU;
		case 0x1040E: return Unicode_Category_LU;
		case 0x1040F: return Unicode_Category_LU;
		case 0x10410: return Unicode_Category_LU;
		case 0x10411: return Unicode_Category_LU;
		case 0x10412: return Unicode_Category_LU;
		case 0x10413: return Unicode_Category_LU;
		case 0x10414: return Unicode_Category_LU;
		case 0x10415: return Unicode_Category_LU;
		case 0x10416: return Unicode_Category_LU;
		case 0x10417: return Unicode_Category_LU;
		case 0x10418: return Unicode_Category_LU;
		case 0x10419: return Unicode_Category_LU;
		case 0x1041A: return Unicode_Category_LU;
		case 0x1041B: return Unicode_Category_LU;
		case 0x1041C: return Unicode_Category_LU;
		case 0x1041D: return Unicode_Category_LU;
		case 0x1041E: return Unicode_Category_LU;
		case 0x1041F: return Unicode_Category_LU;
		case 0x10420: return Unicode_Category_LU;
		case 0x10421: return Unicode_Category_LU;
		case 0x10422: return Unicode_Category_LU;
		case 0x10423: return Unicode_Category_LU;
		case 0x10424: return Unicode_Category_LU;
		case 0x10425: return Unicode_Category_LU;
		case 0x10426: return Unicode_Category_LU;
		case 0x10427: return Unicode_Category_LU;
		case 0x10428: return Unicode_Category_LL;
		case 0x10429: return Unicode_Category_LL;
		case 0x1042A: return Unicode_Category_LL;
		case 0x1042B: return Unicode_Category_LL;
		case 0x1042C: return Unicode_Category_LL;
		case 0x1042D: return Unicode_Category_LL;
		case 0x1042E: return Unicode_Category_LL;
		case 0x1042F: return Unicode_Category_LL;
		case 0x10430: return Unicode_Category_LL;
		case 0x10431: return Unicode_Category_LL;
		case 0x10432: return Unicode_Category_LL;
		case 0x10433: return Unicode_Category_LL;
		case 0x10434: return Unicode_Category_LL;
		case 0x10435: return Unicode_Category_LL;
		case 0x10436: return Unicode_Category_LL;
		case 0x10437: return Unicode_Category_LL;
		case 0x10438: return Unicode_Category_LL;
		case 0x10439: return Unicode_Category_LL;
		case 0x1043A: return Unicode_Category_LL;
		case 0x1043B: return Unicode_Category_LL;
		case 0x1043C: return Unicode_Category_LL;
		case 0x1043D: return Unicode_Category_LL;
		case 0x1043E: return Unicode_Category_LL;
		case 0x1043F: return Unicode_Category_LL;
		case 0x10440: return Unicode_Category_LL;
		case 0x10441: return Unicode_Category_LL;
		case 0x10442: return Unicode_Category_LL;
		case 0x10443: return Unicode_Category_LL;
		case 0x10444: return Unicode_Category_LL;
		case 0x10445: return Unicode_Category_LL;
		case 0x10446: return Unicode_Category_LL;
		case 0x10447: return Unicode_Category_LL;
		case 0x10448: return Unicode_Category_LL;
		case 0x10449: return Unicode_Category_LL;
		case 0x1044A: return Unicode_Category_LL;
		case 0x1044B: return Unicode_Category_LL;
		case 0x1044C: return Unicode_Category_LL;
		case 0x1044D: return Unicode_Category_LL;
		case 0x1044E: return Unicode_Category_LL;
		case 0x1044F: return Unicode_Category_LL;
		case 0x10450: return Unicode_Category_LO;
		case 0x10451: return Unicode_Category_LO;
		case 0x10452: return Unicode_Category_LO;
		case 0x10453: return Unicode_Category_LO;
		case 0x10454: return Unicode_Category_LO;
		case 0x10455: return Unicode_Category_LO;
		case 0x10456: return Unicode_Category_LO;
		case 0x10457: return Unicode_Category_LO;
		case 0x10458: return Unicode_Category_LO;
		case 0x10459: return Unicode_Category_LO;
		case 0x1045A: return Unicode_Category_LO;
		case 0x1045B: return Unicode_Category_LO;
		case 0x1045C: return Unicode_Category_LO;
		case 0x1045D: return Unicode_Category_LO;
		case 0x1045E: return Unicode_Category_LO;
		case 0x1045F: return Unicode_Category_LO;
		case 0x10460: return Unicode_Category_LO;
		case 0x10461: return Unicode_Category_LO;
		case 0x10462: return Unicode_Category_LO;
		case 0x10463: return Unicode_Category_LO;
		case 0x10464: return Unicode_Category_LO;
		case 0x10465: return Unicode_Category_LO;
		case 0x10466: return Unicode_Category_LO;
		case 0x10467: return Unicode_Category_LO;
		case 0x10468: return Unicode_Category_LO;
		case 0x10469: return Unicode_Category_LO;
		case 0x1046A: return Unicode_Category_LO;
		case 0x1046B: return Unicode_Category_LO;
		case 0x1046C: return Unicode_Category_LO;
		case 0x1046D: return Unicode_Category_LO;
		case 0x1046E: return Unicode_Category_LO;
		case 0x1046F: return Unicode_Category_LO;
		case 0x10470: return Unicode_Category_LO;
		case 0x10471: return Unicode_Category_LO;
		case 0x10472: return Unicode_Category_LO;
		case 0x10473: return Unicode_Category_LO;
		case 0x10474: return Unicode_Category_LO;
		case 0x10475: return Unicode_Category_LO;
		case 0x10476: return Unicode_Category_LO;
		case 0x10477: return Unicode_Category_LO;
		case 0x10478: return Unicode_Category_LO;
		case 0x10479: return Unicode_Category_LO;
		case 0x1047A: return Unicode_Category_LO;
		case 0x1047B: return Unicode_Category_LO;
		case 0x1047C: return Unicode_Category_LO;
		case 0x1047D: return Unicode_Category_LO;
		case 0x1047E: return Unicode_Category_LO;
		case 0x1047F: return Unicode_Category_LO;
		case 0x10480: return Unicode_Category_LO;
		case 0x10481: return Unicode_Category_LO;
		case 0x10482: return Unicode_Category_LO;
		case 0x10483: return Unicode_Category_LO;
		case 0x10484: return Unicode_Category_LO;
		case 0x10485: return Unicode_Category_LO;
		case 0x10486: return Unicode_Category_LO;
		case 0x10487: return Unicode_Category_LO;
		case 0x10488: return Unicode_Category_LO;
		case 0x10489: return Unicode_Category_LO;
		case 0x1048A: return Unicode_Category_LO;
		case 0x1048B: return Unicode_Category_LO;
		case 0x1048C: return Unicode_Category_LO;
		case 0x1048D: return Unicode_Category_LO;
		case 0x1048E: return Unicode_Category_LO;
		case 0x1048F: return Unicode_Category_LO;
		case 0x10490: return Unicode_Category_LO;
		case 0x10491: return Unicode_Category_LO;
		case 0x10492: return Unicode_Category_LO;
		case 0x10493: return Unicode_Category_LO;
		case 0x10494: return Unicode_Category_LO;
		case 0x10495: return Unicode_Category_LO;
		case 0x10496: return Unicode_Category_LO;
		case 0x10497: return Unicode_Category_LO;
		case 0x10498: return Unicode_Category_LO;
		case 0x10499: return Unicode_Category_LO;
		case 0x1049A: return Unicode_Category_LO;
		case 0x1049B: return Unicode_Category_LO;
		case 0x1049C: return Unicode_Category_LO;
		case 0x1049D: return Unicode_Category_LO;
		case 0x104A0: return Unicode_Category_ND;
		case 0x104A1: return Unicode_Category_ND;
		case 0x104A2: return Unicode_Category_ND;
		case 0x104A3: return Unicode_Category_ND;
		case 0x104A4: return Unicode_Category_ND;
		case 0x104A5: return Unicode_Category_ND;
		case 0x104A6: return Unicode_Category_ND;
		case 0x104A7: return Unicode_Category_ND;
		case 0x104A8: return Unicode_Category_ND;
		case 0x104A9: return Unicode_Category_ND;
		case 0x104B0: return Unicode_Category_LU;
		case 0x104B1: return Unicode_Category_LU;
		case 0x104B2: return Unicode_Category_LU;
		case 0x104B3: return Unicode_Category_LU;
		case 0x104B4: return Unicode_Category_LU;
		case 0x104B5: return Unicode_Category_LU;
		case 0x104B6: return Unicode_Category_LU;
		case 0x104B7: return Unicode_Category_LU;
		case 0x104B8: return Unicode_Category_LU;
		case 0x104B9: return Unicode_Category_LU;
		case 0x104BA: return Unicode_Category_LU;
		case 0x104BB: return Unicode_Category_LU;
		case 0x104BC: return Unicode_Category_LU;
		case 0x104BD: return Unicode_Category_LU;
		case 0x104BE: return Unicode_Category_LU;
		case 0x104BF: return Unicode_Category_LU;
		case 0x104C0: return Unicode_Category_LU;
		case 0x104C1: return Unicode_Category_LU;
		case 0x104C2: return Unicode_Category_LU;
		case 0x104C3: return Unicode_Category_LU;
		case 0x104C4: return Unicode_Category_LU;
		case 0x104C5: return Unicode_Category_LU;
		case 0x104C6: return Unicode_Category_LU;
		case 0x104C7: return Unicode_Category_LU;
		case 0x104C8: return Unicode_Category_LU;
		case 0x104C9: return Unicode_Category_LU;
		case 0x104CA: return Unicode_Category_LU;
		case 0x104CB: return Unicode_Category_LU;
		case 0x104CC: return Unicode_Category_LU;
		case 0x104CD: return Unicode_Category_LU;
		case 0x104CE: return Unicode_Category_LU;
		case 0x104CF: return Unicode_Category_LU;
		case 0x104D0: return Unicode_Category_LU;
		case 0x104D1: return Unicode_Category_LU;
		case 0x104D2: return Unicode_Category_LU;
		case 0x104D3: return Unicode_Category_LU;
		case 0x104D8: return Unicode_Category_LL;
		case 0x104D9: return Unicode_Category_LL;
		case 0x104DA: return Unicode_Category_LL;
		case 0x104DB: return Unicode_Category_LL;
		case 0x104DC: return Unicode_Category_LL;
		case 0x104DD: return Unicode_Category_LL;
		case 0x104DE: return Unicode_Category_LL;
		case 0x104DF: return Unicode_Category_LL;
		case 0x104E0: return Unicode_Category_LL;
		case 0x104E1: return Unicode_Category_LL;
		case 0x104E2: return Unicode_Category_LL;
		case 0x104E3: return Unicode_Category_LL;
		case 0x104E4: return Unicode_Category_LL;
		case 0x104E5: return Unicode_Category_LL;
		case 0x104E6: return Unicode_Category_LL;
		case 0x104E7: return Unicode_Category_LL;
		case 0x104E8: return Unicode_Category_LL;
		case 0x104E9: return Unicode_Category_LL;
		case 0x104EA: return Unicode_Category_LL;
		case 0x104EB: return Unicode_Category_LL;
		case 0x104EC: return Unicode_Category_LL;
		case 0x104ED: return Unicode_Category_LL;
		case 0x104EE: return Unicode_Category_LL;
		case 0x104EF: return Unicode_Category_LL;
		case 0x104F0: return Unicode_Category_LL;
		case 0x104F1: return Unicode_Category_LL;
		case 0x104F2: return Unicode_Category_LL;
		case 0x104F3: return Unicode_Category_LL;
		case 0x104F4: return Unicode_Category_LL;
		case 0x104F5: return Unicode_Category_LL;
		case 0x104F6: return Unicode_Category_LL;
		case 0x104F7: return Unicode_Category_LL;
		case 0x104F8: return Unicode_Category_LL;
		case 0x104F9: return Unicode_Category_LL;
		case 0x104FA: return Unicode_Category_LL;
		case 0x104FB: return Unicode_Category_LL;
		case 0x10500: return Unicode_Category_LO;
		case 0x10501: return Unicode_Category_LO;
		case 0x10502: return Unicode_Category_LO;
		case 0x10503: return Unicode_Category_LO;
		case 0x10504: return Unicode_Category_LO;
		case 0x10505: return Unicode_Category_LO;
		case 0x10506: return Unicode_Category_LO;
		case 0x10507: return Unicode_Category_LO;
		case 0x10508: return Unicode_Category_LO;
		case 0x10509: return Unicode_Category_LO;
		case 0x1050A: return Unicode_Category_LO;
		case 0x1050B: return Unicode_Category_LO;
		case 0x1050C: return Unicode_Category_LO;
		case 0x1050D: return Unicode_Category_LO;
		case 0x1050E: return Unicode_Category_LO;
		case 0x1050F: return Unicode_Category_LO;
		case 0x10510: return Unicode_Category_LO;
		case 0x10511: return Unicode_Category_LO;
		case 0x10512: return Unicode_Category_LO;
		case 0x10513: return Unicode_Category_LO;
		case 0x10514: return Unicode_Category_LO;
		case 0x10515: return Unicode_Category_LO;
		case 0x10516: return Unicode_Category_LO;
		case 0x10517: return Unicode_Category_LO;
		case 0x10518: return Unicode_Category_LO;
		case 0x10519: return Unicode_Category_LO;
		case 0x1051A: return Unicode_Category_LO;
		case 0x1051B: return Unicode_Category_LO;
		case 0x1051C: return Unicode_Category_LO;
		case 0x1051D: return Unicode_Category_LO;
		case 0x1051E: return Unicode_Category_LO;
		case 0x1051F: return Unicode_Category_LO;
		case 0x10520: return Unicode_Category_LO;
		case 0x10521: return Unicode_Category_LO;
		case 0x10522: return Unicode_Category_LO;
		case 0x10523: return Unicode_Category_LO;
		case 0x10524: return Unicode_Category_LO;
		case 0x10525: return Unicode_Category_LO;
		case 0x10526: return Unicode_Category_LO;
		case 0x10527: return Unicode_Category_LO;
		case 0x10530: return Unicode_Category_LO;
		case 0x10531: return Unicode_Category_LO;
		case 0x10532: return Unicode_Category_LO;
		case 0x10533: return Unicode_Category_LO;
		case 0x10534: return Unicode_Category_LO;
		case 0x10535: return Unicode_Category_LO;
		case 0x10536: return Unicode_Category_LO;
		case 0x10537: return Unicode_Category_LO;
		case 0x10538: return Unicode_Category_LO;
		case 0x10539: return Unicode_Category_LO;
		case 0x1053A: return Unicode_Category_LO;
		case 0x1053B: return Unicode_Category_LO;
		case 0x1053C: return Unicode_Category_LO;
		case 0x1053D: return Unicode_Category_LO;
		case 0x1053E: return Unicode_Category_LO;
		case 0x1053F: return Unicode_Category_LO;
		case 0x10540: return Unicode_Category_LO;
		case 0x10541: return Unicode_Category_LO;
		case 0x10542: return Unicode_Category_LO;
		case 0x10543: return Unicode_Category_LO;
		case 0x10544: return Unicode_Category_LO;
		case 0x10545: return Unicode_Category_LO;
		case 0x10546: return Unicode_Category_LO;
		case 0x10547: return Unicode_Category_LO;
		case 0x10548: return Unicode_Category_LO;
		case 0x10549: return Unicode_Category_LO;
		case 0x1054A: return Unicode_Category_LO;
		case 0x1054B: return Unicode_Category_LO;
		case 0x1054C: return Unicode_Category_LO;
		case 0x1054D: return Unicode_Category_LO;
		case 0x1054E: return Unicode_Category_LO;
		case 0x1054F: return Unicode_Category_LO;
		case 0x10550: return Unicode_Category_LO;
		case 0x10551: return Unicode_Category_LO;
		case 0x10552: return Unicode_Category_LO;
		case 0x10553: return Unicode_Category_LO;
		case 0x10554: return Unicode_Category_LO;
		case 0x10555: return Unicode_Category_LO;
		case 0x10556: return Unicode_Category_LO;
		case 0x10557: return Unicode_Category_LO;
		case 0x10558: return Unicode_Category_LO;
		case 0x10559: return Unicode_Category_LO;
		case 0x1055A: return Unicode_Category_LO;
		case 0x1055B: return Unicode_Category_LO;
		case 0x1055C: return Unicode_Category_LO;
		case 0x1055D: return Unicode_Category_LO;
		case 0x1055E: return Unicode_Category_LO;
		case 0x1055F: return Unicode_Category_LO;
		case 0x10560: return Unicode_Category_LO;
		case 0x10561: return Unicode_Category_LO;
		case 0x10562: return Unicode_Category_LO;
		case 0x10563: return Unicode_Category_LO;
		case 0x1056F: return Unicode_Category_PO;
		case 0x10600: return Unicode_Category_LO;
		case 0x10601: return Unicode_Category_LO;
		case 0x10602: return Unicode_Category_LO;
		case 0x10603: return Unicode_Category_LO;
		case 0x10604: return Unicode_Category_LO;
		case 0x10605: return Unicode_Category_LO;
		case 0x10606: return Unicode_Category_LO;
		case 0x10607: return Unicode_Category_LO;
		case 0x10608: return Unicode_Category_LO;
		case 0x10609: return Unicode_Category_LO;
		case 0x1060A: return Unicode_Category_LO;
		case 0x1060B: return Unicode_Category_LO;
		case 0x1060C: return Unicode_Category_LO;
		case 0x1060D: return Unicode_Category_LO;
		case 0x1060E: return Unicode_Category_LO;
		case 0x1060F: return Unicode_Category_LO;
		case 0x10610: return Unicode_Category_LO;
		case 0x10611: return Unicode_Category_LO;
		case 0x10612: return Unicode_Category_LO;
		case 0x10613: return Unicode_Category_LO;
		case 0x10614: return Unicode_Category_LO;
		case 0x10615: return Unicode_Category_LO;
		case 0x10616: return Unicode_Category_LO;
		case 0x10617: return Unicode_Category_LO;
		case 0x10618: return Unicode_Category_LO;
		case 0x10619: return Unicode_Category_LO;
		case 0x1061A: return Unicode_Category_LO;
		case 0x1061B: return Unicode_Category_LO;
		case 0x1061C: return Unicode_Category_LO;
		case 0x1061D: return Unicode_Category_LO;
		case 0x1061E: return Unicode_Category_LO;
		case 0x1061F: return Unicode_Category_LO;
		case 0x10620: return Unicode_Category_LO;
		case 0x10621: return Unicode_Category_LO;
		case 0x10622: return Unicode_Category_LO;
		case 0x10623: return Unicode_Category_LO;
		case 0x10624: return Unicode_Category_LO;
		case 0x10625: return Unicode_Category_LO;
		case 0x10626: return Unicode_Category_LO;
		case 0x10627: return Unicode_Category_LO;
		case 0x10628: return Unicode_Category_LO;
		case 0x10629: return Unicode_Category_LO;
		case 0x1062A: return Unicode_Category_LO;
		case 0x1062B: return Unicode_Category_LO;
		case 0x1062C: return Unicode_Category_LO;
		case 0x1062D: return Unicode_Category_LO;
		case 0x1062E: return Unicode_Category_LO;
		case 0x1062F: return Unicode_Category_LO;
		case 0x10630: return Unicode_Category_LO;
		case 0x10631: return Unicode_Category_LO;
		case 0x10632: return Unicode_Category_LO;
		case 0x10633: return Unicode_Category_LO;
		case 0x10634: return Unicode_Category_LO;
		case 0x10635: return Unicode_Category_LO;
		case 0x10636: return Unicode_Category_LO;
		case 0x10637: return Unicode_Category_LO;
		case 0x10638: return Unicode_Category_LO;
		case 0x10639: return Unicode_Category_LO;
		case 0x1063A: return Unicode_Category_LO;
		case 0x1063B: return Unicode_Category_LO;
		case 0x1063C: return Unicode_Category_LO;
		case 0x1063D: return Unicode_Category_LO;
		case 0x1063E: return Unicode_Category_LO;
		case 0x1063F: return Unicode_Category_LO;
		case 0x10640: return Unicode_Category_LO;
		case 0x10641: return Unicode_Category_LO;
		case 0x10642: return Unicode_Category_LO;
		case 0x10643: return Unicode_Category_LO;
		case 0x10644: return Unicode_Category_LO;
		case 0x10645: return Unicode_Category_LO;
		case 0x10646: return Unicode_Category_LO;
		case 0x10647: return Unicode_Category_LO;
		case 0x10648: return Unicode_Category_LO;
		case 0x10649: return Unicode_Category_LO;
		case 0x1064A: return Unicode_Category_LO;
		case 0x1064B: return Unicode_Category_LO;
		case 0x1064C: return Unicode_Category_LO;
		case 0x1064D: return Unicode_Category_LO;
		case 0x1064E: return Unicode_Category_LO;
		case 0x1064F: return Unicode_Category_LO;
		case 0x10650: return Unicode_Category_LO;
		case 0x10651: return Unicode_Category_LO;
		case 0x10652: return Unicode_Category_LO;
		case 0x10653: return Unicode_Category_LO;
		case 0x10654: return Unicode_Category_LO;
		case 0x10655: return Unicode_Category_LO;
		case 0x10656: return Unicode_Category_LO;
		case 0x10657: return Unicode_Category_LO;
		case 0x10658: return Unicode_Category_LO;
		case 0x10659: return Unicode_Category_LO;
		case 0x1065A: return Unicode_Category_LO;
		case 0x1065B: return Unicode_Category_LO;
		case 0x1065C: return Unicode_Category_LO;
		case 0x1065D: return Unicode_Category_LO;
		case 0x1065E: return Unicode_Category_LO;
		case 0x1065F: return Unicode_Category_LO;
		case 0x10660: return Unicode_Category_LO;
		case 0x10661: return Unicode_Category_LO;
		case 0x10662: return Unicode_Category_LO;
		case 0x10663: return Unicode_Category_LO;
		case 0x10664: return Unicode_Category_LO;
		case 0x10665: return Unicode_Category_LO;
		case 0x10666: return Unicode_Category_LO;
		case 0x10667: return Unicode_Category_LO;
		case 0x10668: return Unicode_Category_LO;
		case 0x10669: return Unicode_Category_LO;
		case 0x1066A: return Unicode_Category_LO;
		case 0x1066B: return Unicode_Category_LO;
		case 0x1066C: return Unicode_Category_LO;
		case 0x1066D: return Unicode_Category_LO;
		case 0x1066E: return Unicode_Category_LO;
		case 0x1066F: return Unicode_Category_LO;
		case 0x10670: return Unicode_Category_LO;
		case 0x10671: return Unicode_Category_LO;
		case 0x10672: return Unicode_Category_LO;
		case 0x10673: return Unicode_Category_LO;
		case 0x10674: return Unicode_Category_LO;
		case 0x10675: return Unicode_Category_LO;
		case 0x10676: return Unicode_Category_LO;
		case 0x10677: return Unicode_Category_LO;
		case 0x10678: return Unicode_Category_LO;
		case 0x10679: return Unicode_Category_LO;
		case 0x1067A: return Unicode_Category_LO;
		case 0x1067B: return Unicode_Category_LO;
		case 0x1067C: return Unicode_Category_LO;
		case 0x1067D: return Unicode_Category_LO;
		case 0x1067E: return Unicode_Category_LO;
		case 0x1067F: return Unicode_Category_LO;
		case 0x10680: return Unicode_Category_LO;
		case 0x10681: return Unicode_Category_LO;
		case 0x10682: return Unicode_Category_LO;
		case 0x10683: return Unicode_Category_LO;
		case 0x10684: return Unicode_Category_LO;
		case 0x10685: return Unicode_Category_LO;
		case 0x10686: return Unicode_Category_LO;
		case 0x10687: return Unicode_Category_LO;
		case 0x10688: return Unicode_Category_LO;
		case 0x10689: return Unicode_Category_LO;
		case 0x1068A: return Unicode_Category_LO;
		case 0x1068B: return Unicode_Category_LO;
		case 0x1068C: return Unicode_Category_LO;
		case 0x1068D: return Unicode_Category_LO;
		case 0x1068E: return Unicode_Category_LO;
		case 0x1068F: return Unicode_Category_LO;
		case 0x10690: return Unicode_Category_LO;
		case 0x10691: return Unicode_Category_LO;
		case 0x10692: return Unicode_Category_LO;
		case 0x10693: return Unicode_Category_LO;
		case 0x10694: return Unicode_Category_LO;
		case 0x10695: return Unicode_Category_LO;
		case 0x10696: return Unicode_Category_LO;
		case 0x10697: return Unicode_Category_LO;
		case 0x10698: return Unicode_Category_LO;
		case 0x10699: return Unicode_Category_LO;
		case 0x1069A: return Unicode_Category_LO;
		case 0x1069B: return Unicode_Category_LO;
		case 0x1069C: return Unicode_Category_LO;
		case 0x1069D: return Unicode_Category_LO;
		case 0x1069E: return Unicode_Category_LO;
		case 0x1069F: return Unicode_Category_LO;
		case 0x106A0: return Unicode_Category_LO;
		case 0x106A1: return Unicode_Category_LO;
		case 0x106A2: return Unicode_Category_LO;
		case 0x106A3: return Unicode_Category_LO;
		case 0x106A4: return Unicode_Category_LO;
		case 0x106A5: return Unicode_Category_LO;
		case 0x106A6: return Unicode_Category_LO;
		case 0x106A7: return Unicode_Category_LO;
		case 0x106A8: return Unicode_Category_LO;
		case 0x106A9: return Unicode_Category_LO;
		case 0x106AA: return Unicode_Category_LO;
		case 0x106AB: return Unicode_Category_LO;
		case 0x106AC: return Unicode_Category_LO;
		case 0x106AD: return Unicode_Category_LO;
		case 0x106AE: return Unicode_Category_LO;
		case 0x106AF: return Unicode_Category_LO;
		case 0x106B0: return Unicode_Category_LO;
		case 0x106B1: return Unicode_Category_LO;
		case 0x106B2: return Unicode_Category_LO;
		case 0x106B3: return Unicode_Category_LO;
		case 0x106B4: return Unicode_Category_LO;
		case 0x106B5: return Unicode_Category_LO;
		case 0x106B6: return Unicode_Category_LO;
		case 0x106B7: return Unicode_Category_LO;
		case 0x106B8: return Unicode_Category_LO;
		case 0x106B9: return Unicode_Category_LO;
		case 0x106BA: return Unicode_Category_LO;
		case 0x106BB: return Unicode_Category_LO;
		case 0x106BC: return Unicode_Category_LO;
		case 0x106BD: return Unicode_Category_LO;
		case 0x106BE: return Unicode_Category_LO;
		case 0x106BF: return Unicode_Category_LO;
		case 0x106C0: return Unicode_Category_LO;
		case 0x106C1: return Unicode_Category_LO;
		case 0x106C2: return Unicode_Category_LO;
		case 0x106C3: return Unicode_Category_LO;
		case 0x106C4: return Unicode_Category_LO;
		case 0x106C5: return Unicode_Category_LO;
		case 0x106C6: return Unicode_Category_LO;
		case 0x106C7: return Unicode_Category_LO;
		case 0x106C8: return Unicode_Category_LO;
		case 0x106C9: return Unicode_Category_LO;
		case 0x106CA: return Unicode_Category_LO;
		case 0x106CB: return Unicode_Category_LO;
		case 0x106CC: return Unicode_Category_LO;
		case 0x106CD: return Unicode_Category_LO;
		case 0x106CE: return Unicode_Category_LO;
		case 0x106CF: return Unicode_Category_LO;
		case 0x106D0: return Unicode_Category_LO;
		case 0x106D1: return Unicode_Category_LO;
		case 0x106D2: return Unicode_Category_LO;
		case 0x106D3: return Unicode_Category_LO;
		case 0x106D4: return Unicode_Category_LO;
		case 0x106D5: return Unicode_Category_LO;
		case 0x106D6: return Unicode_Category_LO;
		case 0x106D7: return Unicode_Category_LO;
		case 0x106D8: return Unicode_Category_LO;
		case 0x106D9: return Unicode_Category_LO;
		case 0x106DA: return Unicode_Category_LO;
		case 0x106DB: return Unicode_Category_LO;
		case 0x106DC: return Unicode_Category_LO;
		case 0x106DD: return Unicode_Category_LO;
		case 0x106DE: return Unicode_Category_LO;
		case 0x106DF: return Unicode_Category_LO;
		case 0x106E0: return Unicode_Category_LO;
		case 0x106E1: return Unicode_Category_LO;
		case 0x106E2: return Unicode_Category_LO;
		case 0x106E3: return Unicode_Category_LO;
		case 0x106E4: return Unicode_Category_LO;
		case 0x106E5: return Unicode_Category_LO;
		case 0x106E6: return Unicode_Category_LO;
		case 0x106E7: return Unicode_Category_LO;
		case 0x106E8: return Unicode_Category_LO;
		case 0x106E9: return Unicode_Category_LO;
		case 0x106EA: return Unicode_Category_LO;
		case 0x106EB: return Unicode_Category_LO;
		case 0x106EC: return Unicode_Category_LO;
		case 0x106ED: return Unicode_Category_LO;
		case 0x106EE: return Unicode_Category_LO;
		case 0x106EF: return Unicode_Category_LO;
		case 0x106F0: return Unicode_Category_LO;
		case 0x106F1: return Unicode_Category_LO;
		case 0x106F2: return Unicode_Category_LO;
		case 0x106F3: return Unicode_Category_LO;
		case 0x106F4: return Unicode_Category_LO;
		case 0x106F5: return Unicode_Category_LO;
		case 0x106F6: return Unicode_Category_LO;
		case 0x106F7: return Unicode_Category_LO;
		case 0x106F8: return Unicode_Category_LO;
		case 0x106F9: return Unicode_Category_LO;
		case 0x106FA: return Unicode_Category_LO;
		case 0x106FB: return Unicode_Category_LO;
		case 0x106FC: return Unicode_Category_LO;
		case 0x106FD: return Unicode_Category_LO;
		case 0x106FE: return Unicode_Category_LO;
		case 0x106FF: return Unicode_Category_LO;
		case 0x10700: return Unicode_Category_LO;
		case 0x10701: return Unicode_Category_LO;
		case 0x10702: return Unicode_Category_LO;
		case 0x10703: return Unicode_Category_LO;
		case 0x10704: return Unicode_Category_LO;
		case 0x10705: return Unicode_Category_LO;
		case 0x10706: return Unicode_Category_LO;
		case 0x10707: return Unicode_Category_LO;
		case 0x10708: return Unicode_Category_LO;
		case 0x10709: return Unicode_Category_LO;
		case 0x1070A: return Unicode_Category_LO;
		case 0x1070B: return Unicode_Category_LO;
		case 0x1070C: return Unicode_Category_LO;
		case 0x1070D: return Unicode_Category_LO;
		case 0x1070E: return Unicode_Category_LO;
		case 0x1070F: return Unicode_Category_LO;
		case 0x10710: return Unicode_Category_LO;
		case 0x10711: return Unicode_Category_LO;
		case 0x10712: return Unicode_Category_LO;
		case 0x10713: return Unicode_Category_LO;
		case 0x10714: return Unicode_Category_LO;
		case 0x10715: return Unicode_Category_LO;
		case 0x10716: return Unicode_Category_LO;
		case 0x10717: return Unicode_Category_LO;
		case 0x10718: return Unicode_Category_LO;
		case 0x10719: return Unicode_Category_LO;
		case 0x1071A: return Unicode_Category_LO;
		case 0x1071B: return Unicode_Category_LO;
		case 0x1071C: return Unicode_Category_LO;
		case 0x1071D: return Unicode_Category_LO;
		case 0x1071E: return Unicode_Category_LO;
		case 0x1071F: return Unicode_Category_LO;
		case 0x10720: return Unicode_Category_LO;
		case 0x10721: return Unicode_Category_LO;
		case 0x10722: return Unicode_Category_LO;
		case 0x10723: return Unicode_Category_LO;
		case 0x10724: return Unicode_Category_LO;
		case 0x10725: return Unicode_Category_LO;
		case 0x10726: return Unicode_Category_LO;
		case 0x10727: return Unicode_Category_LO;
		case 0x10728: return Unicode_Category_LO;
		case 0x10729: return Unicode_Category_LO;
		case 0x1072A: return Unicode_Category_LO;
		case 0x1072B: return Unicode_Category_LO;
		case 0x1072C: return Unicode_Category_LO;
		case 0x1072D: return Unicode_Category_LO;
		case 0x1072E: return Unicode_Category_LO;
		case 0x1072F: return Unicode_Category_LO;
		case 0x10730: return Unicode_Category_LO;
		case 0x10731: return Unicode_Category_LO;
		case 0x10732: return Unicode_Category_LO;
		case 0x10733: return Unicode_Category_LO;
		case 0x10734: return Unicode_Category_LO;
		case 0x10735: return Unicode_Category_LO;
		case 0x10736: return Unicode_Category_LO;
		case 0x10740: return Unicode_Category_LO;
		case 0x10741: return Unicode_Category_LO;
		case 0x10742: return Unicode_Category_LO;
		case 0x10743: return Unicode_Category_LO;
		case 0x10744: return Unicode_Category_LO;
		case 0x10745: return Unicode_Category_LO;
		case 0x10746: return Unicode_Category_LO;
		case 0x10747: return Unicode_Category_LO;
		case 0x10748: return Unicode_Category_LO;
		case 0x10749: return Unicode_Category_LO;
		case 0x1074A: return Unicode_Category_LO;
		case 0x1074B: return Unicode_Category_LO;
		case 0x1074C: return Unicode_Category_LO;
		case 0x1074D: return Unicode_Category_LO;
		case 0x1074E: return Unicode_Category_LO;
		case 0x1074F: return Unicode_Category_LO;
		case 0x10750: return Unicode_Category_LO;
		case 0x10751: return Unicode_Category_LO;
		case 0x10752: return Unicode_Category_LO;
		case 0x10753: return Unicode_Category_LO;
		case 0x10754: return Unicode_Category_LO;
		case 0x10755: return Unicode_Category_LO;
		case 0x10760: return Unicode_Category_LO;
		case 0x10761: return Unicode_Category_LO;
		case 0x10762: return Unicode_Category_LO;
		case 0x10763: return Unicode_Category_LO;
		case 0x10764: return Unicode_Category_LO;
		case 0x10765: return Unicode_Category_LO;
		case 0x10766: return Unicode_Category_LO;
		case 0x10767: return Unicode_Category_LO;
		case 0x10800: return Unicode_Category_LO;
		case 0x10801: return Unicode_Category_LO;
		case 0x10802: return Unicode_Category_LO;
		case 0x10803: return Unicode_Category_LO;
		case 0x10804: return Unicode_Category_LO;
		case 0x10805: return Unicode_Category_LO;
		case 0x10808: return Unicode_Category_LO;
		case 0x1080A: return Unicode_Category_LO;
		case 0x1080B: return Unicode_Category_LO;
		case 0x1080C: return Unicode_Category_LO;
		case 0x1080D: return Unicode_Category_LO;
		case 0x1080E: return Unicode_Category_LO;
		case 0x1080F: return Unicode_Category_LO;
		case 0x10810: return Unicode_Category_LO;
		case 0x10811: return Unicode_Category_LO;
		case 0x10812: return Unicode_Category_LO;
		case 0x10813: return Unicode_Category_LO;
		case 0x10814: return Unicode_Category_LO;
		case 0x10815: return Unicode_Category_LO;
		case 0x10816: return Unicode_Category_LO;
		case 0x10817: return Unicode_Category_LO;
		case 0x10818: return Unicode_Category_LO;
		case 0x10819: return Unicode_Category_LO;
		case 0x1081A: return Unicode_Category_LO;
		case 0x1081B: return Unicode_Category_LO;
		case 0x1081C: return Unicode_Category_LO;
		case 0x1081D: return Unicode_Category_LO;
		case 0x1081E: return Unicode_Category_LO;
		case 0x1081F: return Unicode_Category_LO;
		case 0x10820: return Unicode_Category_LO;
		case 0x10821: return Unicode_Category_LO;
		case 0x10822: return Unicode_Category_LO;
		case 0x10823: return Unicode_Category_LO;
		case 0x10824: return Unicode_Category_LO;
		case 0x10825: return Unicode_Category_LO;
		case 0x10826: return Unicode_Category_LO;
		case 0x10827: return Unicode_Category_LO;
		case 0x10828: return Unicode_Category_LO;
		case 0x10829: return Unicode_Category_LO;
		case 0x1082A: return Unicode_Category_LO;
		case 0x1082B: return Unicode_Category_LO;
		case 0x1082C: return Unicode_Category_LO;
		case 0x1082D: return Unicode_Category_LO;
		case 0x1082E: return Unicode_Category_LO;
		case 0x1082F: return Unicode_Category_LO;
		case 0x10830: return Unicode_Category_LO;
		case 0x10831: return Unicode_Category_LO;
		case 0x10832: return Unicode_Category_LO;
		case 0x10833: return Unicode_Category_LO;
		case 0x10834: return Unicode_Category_LO;
		case 0x10835: return Unicode_Category_LO;
		case 0x10837: return Unicode_Category_LO;
		case 0x10838: return Unicode_Category_LO;
		case 0x1083C: return Unicode_Category_LO;
		case 0x1083F: return Unicode_Category_LO;
		case 0x10840: return Unicode_Category_LO;
		case 0x10841: return Unicode_Category_LO;
		case 0x10842: return Unicode_Category_LO;
		case 0x10843: return Unicode_Category_LO;
		case 0x10844: return Unicode_Category_LO;
		case 0x10845: return Unicode_Category_LO;
		case 0x10846: return Unicode_Category_LO;
		case 0x10847: return Unicode_Category_LO;
		case 0x10848: return Unicode_Category_LO;
		case 0x10849: return Unicode_Category_LO;
		case 0x1084A: return Unicode_Category_LO;
		case 0x1084B: return Unicode_Category_LO;
		case 0x1084C: return Unicode_Category_LO;
		case 0x1084D: return Unicode_Category_LO;
		case 0x1084E: return Unicode_Category_LO;
		case 0x1084F: return Unicode_Category_LO;
		case 0x10850: return Unicode_Category_LO;
		case 0x10851: return Unicode_Category_LO;
		case 0x10852: return Unicode_Category_LO;
		case 0x10853: return Unicode_Category_LO;
		case 0x10854: return Unicode_Category_LO;
		case 0x10855: return Unicode_Category_LO;
		case 0x10857: return Unicode_Category_PO;
		case 0x10858: return Unicode_Category_NO;
		case 0x10859: return Unicode_Category_NO;
		case 0x1085A: return Unicode_Category_NO;
		case 0x1085B: return Unicode_Category_NO;
		case 0x1085C: return Unicode_Category_NO;
		case 0x1085D: return Unicode_Category_NO;
		case 0x1085E: return Unicode_Category_NO;
		case 0x1085F: return Unicode_Category_NO;
		case 0x10860: return Unicode_Category_LO;
		case 0x10861: return Unicode_Category_LO;
		case 0x10862: return Unicode_Category_LO;
		case 0x10863: return Unicode_Category_LO;
		case 0x10864: return Unicode_Category_LO;
		case 0x10865: return Unicode_Category_LO;
		case 0x10866: return Unicode_Category_LO;
		case 0x10867: return Unicode_Category_LO;
		case 0x10868: return Unicode_Category_LO;
		case 0x10869: return Unicode_Category_LO;
		case 0x1086A: return Unicode_Category_LO;
		case 0x1086B: return Unicode_Category_LO;
		case 0x1086C: return Unicode_Category_LO;
		case 0x1086D: return Unicode_Category_LO;
		case 0x1086E: return Unicode_Category_LO;
		case 0x1086F: return Unicode_Category_LO;
		case 0x10870: return Unicode_Category_LO;
		case 0x10871: return Unicode_Category_LO;
		case 0x10872: return Unicode_Category_LO;
		case 0x10873: return Unicode_Category_LO;
		case 0x10874: return Unicode_Category_LO;
		case 0x10875: return Unicode_Category_LO;
		case 0x10876: return Unicode_Category_LO;
		case 0x10877: return Unicode_Category_SO;
		case 0x10878: return Unicode_Category_SO;
		case 0x10879: return Unicode_Category_NO;
		case 0x1087A: return Unicode_Category_NO;
		case 0x1087B: return Unicode_Category_NO;
		case 0x1087C: return Unicode_Category_NO;
		case 0x1087D: return Unicode_Category_NO;
		case 0x1087E: return Unicode_Category_NO;
		case 0x1087F: return Unicode_Category_NO;
		case 0x10880: return Unicode_Category_LO;
		case 0x10881: return Unicode_Category_LO;
		case 0x10882: return Unicode_Category_LO;
		case 0x10883: return Unicode_Category_LO;
		case 0x10884: return Unicode_Category_LO;
		case 0x10885: return Unicode_Category_LO;
		case 0x10886: return Unicode_Category_LO;
		case 0x10887: return Unicode_Category_LO;
		case 0x10888: return Unicode_Category_LO;
		case 0x10889: return Unicode_Category_LO;
		case 0x1088A: return Unicode_Category_LO;
		case 0x1088B: return Unicode_Category_LO;
		case 0x1088C: return Unicode_Category_LO;
		case 0x1088D: return Unicode_Category_LO;
		case 0x1088E: return Unicode_Category_LO;
		case 0x1088F: return Unicode_Category_LO;
		case 0x10890: return Unicode_Category_LO;
		case 0x10891: return Unicode_Category_LO;
		case 0x10892: return Unicode_Category_LO;
		case 0x10893: return Unicode_Category_LO;
		case 0x10894: return Unicode_Category_LO;
		case 0x10895: return Unicode_Category_LO;
		case 0x10896: return Unicode_Category_LO;
		case 0x10897: return Unicode_Category_LO;
		case 0x10898: return Unicode_Category_LO;
		case 0x10899: return Unicode_Category_LO;
		case 0x1089A: return Unicode_Category_LO;
		case 0x1089B: return Unicode_Category_LO;
		case 0x1089C: return Unicode_Category_LO;
		case 0x1089D: return Unicode_Category_LO;
		case 0x1089E: return Unicode_Category_LO;
		case 0x108A7: return Unicode_Category_NO;
		case 0x108A8: return Unicode_Category_NO;
		case 0x108A9: return Unicode_Category_NO;
		case 0x108AA: return Unicode_Category_NO;
		case 0x108AB: return Unicode_Category_NO;
		case 0x108AC: return Unicode_Category_NO;
		case 0x108AD: return Unicode_Category_NO;
		case 0x108AE: return Unicode_Category_NO;
		case 0x108AF: return Unicode_Category_NO;
		case 0x108E0: return Unicode_Category_LO;
		case 0x108E1: return Unicode_Category_LO;
		case 0x108E2: return Unicode_Category_LO;
		case 0x108E3: return Unicode_Category_LO;
		case 0x108E4: return Unicode_Category_LO;
		case 0x108E5: return Unicode_Category_LO;
		case 0x108E6: return Unicode_Category_LO;
		case 0x108E7: return Unicode_Category_LO;
		case 0x108E8: return Unicode_Category_LO;
		case 0x108E9: return Unicode_Category_LO;
		case 0x108EA: return Unicode_Category_LO;
		case 0x108EB: return Unicode_Category_LO;
		case 0x108EC: return Unicode_Category_LO;
		case 0x108ED: return Unicode_Category_LO;
		case 0x108EE: return Unicode_Category_LO;
		case 0x108EF: return Unicode_Category_LO;
		case 0x108F0: return Unicode_Category_LO;
		case 0x108F1: return Unicode_Category_LO;
		case 0x108F2: return Unicode_Category_LO;
		case 0x108F4: return Unicode_Category_LO;
		case 0x108F5: return Unicode_Category_LO;
		case 0x108FB: return Unicode_Category_NO;
		case 0x108FC: return Unicode_Category_NO;
		case 0x108FD: return Unicode_Category_NO;
		case 0x108FE: return Unicode_Category_NO;
		case 0x108FF: return Unicode_Category_NO;
		case 0x10900: return Unicode_Category_LO;
		case 0x10901: return Unicode_Category_LO;
		case 0x10902: return Unicode_Category_LO;
		case 0x10903: return Unicode_Category_LO;
		case 0x10904: return Unicode_Category_LO;
		case 0x10905: return Unicode_Category_LO;
		case 0x10906: return Unicode_Category_LO;
		case 0x10907: return Unicode_Category_LO;
		case 0x10908: return Unicode_Category_LO;
		case 0x10909: return Unicode_Category_LO;
		case 0x1090A: return Unicode_Category_LO;
		case 0x1090B: return Unicode_Category_LO;
		case 0x1090C: return Unicode_Category_LO;
		case 0x1090D: return Unicode_Category_LO;
		case 0x1090E: return Unicode_Category_LO;
		case 0x1090F: return Unicode_Category_LO;
		case 0x10910: return Unicode_Category_LO;
		case 0x10911: return Unicode_Category_LO;
		case 0x10912: return Unicode_Category_LO;
		case 0x10913: return Unicode_Category_LO;
		case 0x10914: return Unicode_Category_LO;
		case 0x10915: return Unicode_Category_LO;
		case 0x10916: return Unicode_Category_NO;
		case 0x10917: return Unicode_Category_NO;
		case 0x10918: return Unicode_Category_NO;
		case 0x10919: return Unicode_Category_NO;
		case 0x1091A: return Unicode_Category_NO;
		case 0x1091B: return Unicode_Category_NO;
		case 0x1091F: return Unicode_Category_PO;
		case 0x10920: return Unicode_Category_LO;
		case 0x10921: return Unicode_Category_LO;
		case 0x10922: return Unicode_Category_LO;
		case 0x10923: return Unicode_Category_LO;
		case 0x10924: return Unicode_Category_LO;
		case 0x10925: return Unicode_Category_LO;
		case 0x10926: return Unicode_Category_LO;
		case 0x10927: return Unicode_Category_LO;
		case 0x10928: return Unicode_Category_LO;
		case 0x10929: return Unicode_Category_LO;
		case 0x1092A: return Unicode_Category_LO;
		case 0x1092B: return Unicode_Category_LO;
		case 0x1092C: return Unicode_Category_LO;
		case 0x1092D: return Unicode_Category_LO;
		case 0x1092E: return Unicode_Category_LO;
		case 0x1092F: return Unicode_Category_LO;
		case 0x10930: return Unicode_Category_LO;
		case 0x10931: return Unicode_Category_LO;
		case 0x10932: return Unicode_Category_LO;
		case 0x10933: return Unicode_Category_LO;
		case 0x10934: return Unicode_Category_LO;
		case 0x10935: return Unicode_Category_LO;
		case 0x10936: return Unicode_Category_LO;
		case 0x10937: return Unicode_Category_LO;
		case 0x10938: return Unicode_Category_LO;
		case 0x10939: return Unicode_Category_LO;
		case 0x1093F: return Unicode_Category_PO;
		case 0x10980: return Unicode_Category_LO;
		case 0x10981: return Unicode_Category_LO;
		case 0x10982: return Unicode_Category_LO;
		case 0x10983: return Unicode_Category_LO;
		case 0x10984: return Unicode_Category_LO;
		case 0x10985: return Unicode_Category_LO;
		case 0x10986: return Unicode_Category_LO;
		case 0x10987: return Unicode_Category_LO;
		case 0x10988: return Unicode_Category_LO;
		case 0x10989: return Unicode_Category_LO;
		case 0x1098A: return Unicode_Category_LO;
		case 0x1098B: return Unicode_Category_LO;
		case 0x1098C: return Unicode_Category_LO;
		case 0x1098D: return Unicode_Category_LO;
		case 0x1098E: return Unicode_Category_LO;
		case 0x1098F: return Unicode_Category_LO;
		case 0x10990: return Unicode_Category_LO;
		case 0x10991: return Unicode_Category_LO;
		case 0x10992: return Unicode_Category_LO;
		case 0x10993: return Unicode_Category_LO;
		case 0x10994: return Unicode_Category_LO;
		case 0x10995: return Unicode_Category_LO;
		case 0x10996: return Unicode_Category_LO;
		case 0x10997: return Unicode_Category_LO;
		case 0x10998: return Unicode_Category_LO;
		case 0x10999: return Unicode_Category_LO;
		case 0x1099A: return Unicode_Category_LO;
		case 0x1099B: return Unicode_Category_LO;
		case 0x1099C: return Unicode_Category_LO;
		case 0x1099D: return Unicode_Category_LO;
		case 0x1099E: return Unicode_Category_LO;
		case 0x1099F: return Unicode_Category_LO;
		case 0x109A0: return Unicode_Category_LO;
		case 0x109A1: return Unicode_Category_LO;
		case 0x109A2: return Unicode_Category_LO;
		case 0x109A3: return Unicode_Category_LO;
		case 0x109A4: return Unicode_Category_LO;
		case 0x109A5: return Unicode_Category_LO;
		case 0x109A6: return Unicode_Category_LO;
		case 0x109A7: return Unicode_Category_LO;
		case 0x109A8: return Unicode_Category_LO;
		case 0x109A9: return Unicode_Category_LO;
		case 0x109AA: return Unicode_Category_LO;
		case 0x109AB: return Unicode_Category_LO;
		case 0x109AC: return Unicode_Category_LO;
		case 0x109AD: return Unicode_Category_LO;
		case 0x109AE: return Unicode_Category_LO;
		case 0x109AF: return Unicode_Category_LO;
		case 0x109B0: return Unicode_Category_LO;
		case 0x109B1: return Unicode_Category_LO;
		case 0x109B2: return Unicode_Category_LO;
		case 0x109B3: return Unicode_Category_LO;
		case 0x109B4: return Unicode_Category_LO;
		case 0x109B5: return Unicode_Category_LO;
		case 0x109B6: return Unicode_Category_LO;
		case 0x109B7: return Unicode_Category_LO;
		case 0x109BC: return Unicode_Category_NO;
		case 0x109BD: return Unicode_Category_NO;
		case 0x109BE: return Unicode_Category_LO;
		case 0x109BF: return Unicode_Category_LO;
		case 0x109C0: return Unicode_Category_NO;
		case 0x109C1: return Unicode_Category_NO;
		case 0x109C2: return Unicode_Category_NO;
		case 0x109C3: return Unicode_Category_NO;
		case 0x109C4: return Unicode_Category_NO;
		case 0x109C5: return Unicode_Category_NO;
		case 0x109C6: return Unicode_Category_NO;
		case 0x109C7: return Unicode_Category_NO;
		case 0x109C8: return Unicode_Category_NO;
		case 0x109C9: return Unicode_Category_NO;
		case 0x109CA: return Unicode_Category_NO;
		case 0x109CB: return Unicode_Category_NO;
		case 0x109CC: return Unicode_Category_NO;
		case 0x109CD: return Unicode_Category_NO;
		case 0x109CE: return Unicode_Category_NO;
		case 0x109CF: return Unicode_Category_NO;
		case 0x109D2: return Unicode_Category_NO;
		case 0x109D3: return Unicode_Category_NO;
		case 0x109D4: return Unicode_Category_NO;
		case 0x109D5: return Unicode_Category_NO;
		case 0x109D6: return Unicode_Category_NO;
		case 0x109D7: return Unicode_Category_NO;
		case 0x109D8: return Unicode_Category_NO;
		case 0x109D9: return Unicode_Category_NO;
		case 0x109DA: return Unicode_Category_NO;
		case 0x109DB: return Unicode_Category_NO;
		case 0x109DC: return Unicode_Category_NO;
		case 0x109DD: return Unicode_Category_NO;
		case 0x109DE: return Unicode_Category_NO;
		case 0x109DF: return Unicode_Category_NO;
		case 0x109E0: return Unicode_Category_NO;
		case 0x109E1: return Unicode_Category_NO;
		case 0x109E2: return Unicode_Category_NO;
		case 0x109E3: return Unicode_Category_NO;
		case 0x109E4: return Unicode_Category_NO;
		case 0x109E5: return Unicode_Category_NO;
		case 0x109E6: return Unicode_Category_NO;
		case 0x109E7: return Unicode_Category_NO;
		case 0x109E8: return Unicode_Category_NO;
		case 0x109E9: return Unicode_Category_NO;
		case 0x109EA: return Unicode_Category_NO;
		case 0x109EB: return Unicode_Category_NO;
		case 0x109EC: return Unicode_Category_NO;
		case 0x109ED: return Unicode_Category_NO;
		case 0x109EE: return Unicode_Category_NO;
		case 0x109EF: return Unicode_Category_NO;
		case 0x109F0: return Unicode_Category_NO;
		case 0x109F1: return Unicode_Category_NO;
		case 0x109F2: return Unicode_Category_NO;
		case 0x109F3: return Unicode_Category_NO;
		case 0x109F4: return Unicode_Category_NO;
		case 0x109F5: return Unicode_Category_NO;
		case 0x109F6: return Unicode_Category_NO;
		case 0x109F7: return Unicode_Category_NO;
		case 0x109F8: return Unicode_Category_NO;
		case 0x109F9: return Unicode_Category_NO;
		case 0x109FA: return Unicode_Category_NO;
		case 0x109FB: return Unicode_Category_NO;
		case 0x109FC: return Unicode_Category_NO;
		case 0x109FD: return Unicode_Category_NO;
		case 0x109FE: return Unicode_Category_NO;
		case 0x109FF: return Unicode_Category_NO;
		case 0x10A00: return Unicode_Category_LO;
		case 0x10A01: return Unicode_Category_MN;
		case 0x10A02: return Unicode_Category_MN;
		case 0x10A03: return Unicode_Category_MN;
		case 0x10A05: return Unicode_Category_MN;
		case 0x10A06: return Unicode_Category_MN;
		case 0x10A0C: return Unicode_Category_MN;
		case 0x10A0D: return Unicode_Category_MN;
		case 0x10A0E: return Unicode_Category_MN;
		case 0x10A0F: return Unicode_Category_MN;
		case 0x10A10: return Unicode_Category_LO;
		case 0x10A11: return Unicode_Category_LO;
		case 0x10A12: return Unicode_Category_LO;
		case 0x10A13: return Unicode_Category_LO;
		case 0x10A15: return Unicode_Category_LO;
		case 0x10A16: return Unicode_Category_LO;
		case 0x10A17: return Unicode_Category_LO;
		case 0x10A19: return Unicode_Category_LO;
		case 0x10A1A: return Unicode_Category_LO;
		case 0x10A1B: return Unicode_Category_LO;
		case 0x10A1C: return Unicode_Category_LO;
		case 0x10A1D: return Unicode_Category_LO;
		case 0x10A1E: return Unicode_Category_LO;
		case 0x10A1F: return Unicode_Category_LO;
		case 0x10A20: return Unicode_Category_LO;
		case 0x10A21: return Unicode_Category_LO;
		case 0x10A22: return Unicode_Category_LO;
		case 0x10A23: return Unicode_Category_LO;
		case 0x10A24: return Unicode_Category_LO;
		case 0x10A25: return Unicode_Category_LO;
		case 0x10A26: return Unicode_Category_LO;
		case 0x10A27: return Unicode_Category_LO;
		case 0x10A28: return Unicode_Category_LO;
		case 0x10A29: return Unicode_Category_LO;
		case 0x10A2A: return Unicode_Category_LO;
		case 0x10A2B: return Unicode_Category_LO;
		case 0x10A2C: return Unicode_Category_LO;
		case 0x10A2D: return Unicode_Category_LO;
		case 0x10A2E: return Unicode_Category_LO;
		case 0x10A2F: return Unicode_Category_LO;
		case 0x10A30: return Unicode_Category_LO;
		case 0x10A31: return Unicode_Category_LO;
		case 0x10A32: return Unicode_Category_LO;
		case 0x10A33: return Unicode_Category_LO;
		case 0x10A34: return Unicode_Category_LO;
		case 0x10A35: return Unicode_Category_LO;
		case 0x10A38: return Unicode_Category_MN;
		case 0x10A39: return Unicode_Category_MN;
		case 0x10A3A: return Unicode_Category_MN;
		case 0x10A3F: return Unicode_Category_MN;
		case 0x10A40: return Unicode_Category_NO;
		case 0x10A41: return Unicode_Category_NO;
		case 0x10A42: return Unicode_Category_NO;
		case 0x10A43: return Unicode_Category_NO;
		case 0x10A44: return Unicode_Category_NO;
		case 0x10A45: return Unicode_Category_NO;
		case 0x10A46: return Unicode_Category_NO;
		case 0x10A47: return Unicode_Category_NO;
		case 0x10A48: return Unicode_Category_NO;
		case 0x10A50: return Unicode_Category_PO;
		case 0x10A51: return Unicode_Category_PO;
		case 0x10A52: return Unicode_Category_PO;
		case 0x10A53: return Unicode_Category_PO;
		case 0x10A54: return Unicode_Category_PO;
		case 0x10A55: return Unicode_Category_PO;
		case 0x10A56: return Unicode_Category_PO;
		case 0x10A57: return Unicode_Category_PO;
		case 0x10A58: return Unicode_Category_PO;
		case 0x10A60: return Unicode_Category_LO;
		case 0x10A61: return Unicode_Category_LO;
		case 0x10A62: return Unicode_Category_LO;
		case 0x10A63: return Unicode_Category_LO;
		case 0x10A64: return Unicode_Category_LO;
		case 0x10A65: return Unicode_Category_LO;
		case 0x10A66: return Unicode_Category_LO;
		case 0x10A67: return Unicode_Category_LO;
		case 0x10A68: return Unicode_Category_LO;
		case 0x10A69: return Unicode_Category_LO;
		case 0x10A6A: return Unicode_Category_LO;
		case 0x10A6B: return Unicode_Category_LO;
		case 0x10A6C: return Unicode_Category_LO;
		case 0x10A6D: return Unicode_Category_LO;
		case 0x10A6E: return Unicode_Category_LO;
		case 0x10A6F: return Unicode_Category_LO;
		case 0x10A70: return Unicode_Category_LO;
		case 0x10A71: return Unicode_Category_LO;
		case 0x10A72: return Unicode_Category_LO;
		case 0x10A73: return Unicode_Category_LO;
		case 0x10A74: return Unicode_Category_LO;
		case 0x10A75: return Unicode_Category_LO;
		case 0x10A76: return Unicode_Category_LO;
		case 0x10A77: return Unicode_Category_LO;
		case 0x10A78: return Unicode_Category_LO;
		case 0x10A79: return Unicode_Category_LO;
		case 0x10A7A: return Unicode_Category_LO;
		case 0x10A7B: return Unicode_Category_LO;
		case 0x10A7C: return Unicode_Category_LO;
		case 0x10A7D: return Unicode_Category_NO;
		case 0x10A7E: return Unicode_Category_NO;
		case 0x10A7F: return Unicode_Category_PO;
		case 0x10A80: return Unicode_Category_LO;
		case 0x10A81: return Unicode_Category_LO;
		case 0x10A82: return Unicode_Category_LO;
		case 0x10A83: return Unicode_Category_LO;
		case 0x10A84: return Unicode_Category_LO;
		case 0x10A85: return Unicode_Category_LO;
		case 0x10A86: return Unicode_Category_LO;
		case 0x10A87: return Unicode_Category_LO;
		case 0x10A88: return Unicode_Category_LO;
		case 0x10A89: return Unicode_Category_LO;
		case 0x10A8A: return Unicode_Category_LO;
		case 0x10A8B: return Unicode_Category_LO;
		case 0x10A8C: return Unicode_Category_LO;
		case 0x10A8D: return Unicode_Category_LO;
		case 0x10A8E: return Unicode_Category_LO;
		case 0x10A8F: return Unicode_Category_LO;
		case 0x10A90: return Unicode_Category_LO;
		case 0x10A91: return Unicode_Category_LO;
		case 0x10A92: return Unicode_Category_LO;
		case 0x10A93: return Unicode_Category_LO;
		case 0x10A94: return Unicode_Category_LO;
		case 0x10A95: return Unicode_Category_LO;
		case 0x10A96: return Unicode_Category_LO;
		case 0x10A97: return Unicode_Category_LO;
		case 0x10A98: return Unicode_Category_LO;
		case 0x10A99: return Unicode_Category_LO;
		case 0x10A9A: return Unicode_Category_LO;
		case 0x10A9B: return Unicode_Category_LO;
		case 0x10A9C: return Unicode_Category_LO;
		case 0x10A9D: return Unicode_Category_NO;
		case 0x10A9E: return Unicode_Category_NO;
		case 0x10A9F: return Unicode_Category_NO;
		case 0x10AC0: return Unicode_Category_LO;
		case 0x10AC1: return Unicode_Category_LO;
		case 0x10AC2: return Unicode_Category_LO;
		case 0x10AC3: return Unicode_Category_LO;
		case 0x10AC4: return Unicode_Category_LO;
		case 0x10AC5: return Unicode_Category_LO;
		case 0x10AC6: return Unicode_Category_LO;
		case 0x10AC7: return Unicode_Category_LO;
		case 0x10AC8: return Unicode_Category_SO;
		case 0x10AC9: return Unicode_Category_LO;
		case 0x10ACA: return Unicode_Category_LO;
		case 0x10ACB: return Unicode_Category_LO;
		case 0x10ACC: return Unicode_Category_LO;
		case 0x10ACD: return Unicode_Category_LO;
		case 0x10ACE: return Unicode_Category_LO;
		case 0x10ACF: return Unicode_Category_LO;
		case 0x10AD0: return Unicode_Category_LO;
		case 0x10AD1: return Unicode_Category_LO;
		case 0x10AD2: return Unicode_Category_LO;
		case 0x10AD3: return Unicode_Category_LO;
		case 0x10AD4: return Unicode_Category_LO;
		case 0x10AD5: return Unicode_Category_LO;
		case 0x10AD6: return Unicode_Category_LO;
		case 0x10AD7: return Unicode_Category_LO;
		case 0x10AD8: return Unicode_Category_LO;
		case 0x10AD9: return Unicode_Category_LO;
		case 0x10ADA: return Unicode_Category_LO;
		case 0x10ADB: return Unicode_Category_LO;
		case 0x10ADC: return Unicode_Category_LO;
		case 0x10ADD: return Unicode_Category_LO;
		case 0x10ADE: return Unicode_Category_LO;
		case 0x10ADF: return Unicode_Category_LO;
		case 0x10AE0: return Unicode_Category_LO;
		case 0x10AE1: return Unicode_Category_LO;
		case 0x10AE2: return Unicode_Category_LO;
		case 0x10AE3: return Unicode_Category_LO;
		case 0x10AE4: return Unicode_Category_LO;
		case 0x10AE5: return Unicode_Category_MN;
		case 0x10AE6: return Unicode_Category_MN;
		case 0x10AEB: return Unicode_Category_NO;
		case 0x10AEC: return Unicode_Category_NO;
		case 0x10AED: return Unicode_Category_NO;
		case 0x10AEE: return Unicode_Category_NO;
		case 0x10AEF: return Unicode_Category_NO;
		case 0x10AF0: return Unicode_Category_PO;
		case 0x10AF1: return Unicode_Category_PO;
		case 0x10AF2: return Unicode_Category_PO;
		case 0x10AF3: return Unicode_Category_PO;
		case 0x10AF4: return Unicode_Category_PO;
		case 0x10AF5: return Unicode_Category_PO;
		case 0x10AF6: return Unicode_Category_PO;
		case 0x10B00: return Unicode_Category_LO;
		case 0x10B01: return Unicode_Category_LO;
		case 0x10B02: return Unicode_Category_LO;
		case 0x10B03: return Unicode_Category_LO;
		case 0x10B04: return Unicode_Category_LO;
		case 0x10B05: return Unicode_Category_LO;
		case 0x10B06: return Unicode_Category_LO;
		case 0x10B07: return Unicode_Category_LO;
		case 0x10B08: return Unicode_Category_LO;
		case 0x10B09: return Unicode_Category_LO;
		case 0x10B0A: return Unicode_Category_LO;
		case 0x10B0B: return Unicode_Category_LO;
		case 0x10B0C: return Unicode_Category_LO;
		case 0x10B0D: return Unicode_Category_LO;
		case 0x10B0E: return Unicode_Category_LO;
		case 0x10B0F: return Unicode_Category_LO;
		case 0x10B10: return Unicode_Category_LO;
		case 0x10B11: return Unicode_Category_LO;
		case 0x10B12: return Unicode_Category_LO;
		case 0x10B13: return Unicode_Category_LO;
		case 0x10B14: return Unicode_Category_LO;
		case 0x10B15: return Unicode_Category_LO;
		case 0x10B16: return Unicode_Category_LO;
		case 0x10B17: return Unicode_Category_LO;
		case 0x10B18: return Unicode_Category_LO;
		case 0x10B19: return Unicode_Category_LO;
		case 0x10B1A: return Unicode_Category_LO;
		case 0x10B1B: return Unicode_Category_LO;
		case 0x10B1C: return Unicode_Category_LO;
		case 0x10B1D: return Unicode_Category_LO;
		case 0x10B1E: return Unicode_Category_LO;
		case 0x10B1F: return Unicode_Category_LO;
		case 0x10B20: return Unicode_Category_LO;
		case 0x10B21: return Unicode_Category_LO;
		case 0x10B22: return Unicode_Category_LO;
		case 0x10B23: return Unicode_Category_LO;
		case 0x10B24: return Unicode_Category_LO;
		case 0x10B25: return Unicode_Category_LO;
		case 0x10B26: return Unicode_Category_LO;
		case 0x10B27: return Unicode_Category_LO;
		case 0x10B28: return Unicode_Category_LO;
		case 0x10B29: return Unicode_Category_LO;
		case 0x10B2A: return Unicode_Category_LO;
		case 0x10B2B: return Unicode_Category_LO;
		case 0x10B2C: return Unicode_Category_LO;
		case 0x10B2D: return Unicode_Category_LO;
		case 0x10B2E: return Unicode_Category_LO;
		case 0x10B2F: return Unicode_Category_LO;
		case 0x10B30: return Unicode_Category_LO;
		case 0x10B31: return Unicode_Category_LO;
		case 0x10B32: return Unicode_Category_LO;
		case 0x10B33: return Unicode_Category_LO;
		case 0x10B34: return Unicode_Category_LO;
		case 0x10B35: return Unicode_Category_LO;
		case 0x10B39: return Unicode_Category_PO;
		case 0x10B3A: return Unicode_Category_PO;
		case 0x10B3B: return Unicode_Category_PO;
		case 0x10B3C: return Unicode_Category_PO;
		case 0x10B3D: return Unicode_Category_PO;
		case 0x10B3E: return Unicode_Category_PO;
		case 0x10B3F: return Unicode_Category_PO;
		case 0x10B40: return Unicode_Category_LO;
		case 0x10B41: return Unicode_Category_LO;
		case 0x10B42: return Unicode_Category_LO;
		case 0x10B43: return Unicode_Category_LO;
		case 0x10B44: return Unicode_Category_LO;
		case 0x10B45: return Unicode_Category_LO;
		case 0x10B46: return Unicode_Category_LO;
		case 0x10B47: return Unicode_Category_LO;
		case 0x10B48: return Unicode_Category_LO;
		case 0x10B49: return Unicode_Category_LO;
		case 0x10B4A: return Unicode_Category_LO;
		case 0x10B4B: return Unicode_Category_LO;
		case 0x10B4C: return Unicode_Category_LO;
		case 0x10B4D: return Unicode_Category_LO;
		case 0x10B4E: return Unicode_Category_LO;
		case 0x10B4F: return Unicode_Category_LO;
		case 0x10B50: return Unicode_Category_LO;
		case 0x10B51: return Unicode_Category_LO;
		case 0x10B52: return Unicode_Category_LO;
		case 0x10B53: return Unicode_Category_LO;
		case 0x10B54: return Unicode_Category_LO;
		case 0x10B55: return Unicode_Category_LO;
		case 0x10B58: return Unicode_Category_NO;
		case 0x10B59: return Unicode_Category_NO;
		case 0x10B5A: return Unicode_Category_NO;
		case 0x10B5B: return Unicode_Category_NO;
		case 0x10B5C: return Unicode_Category_NO;
		case 0x10B5D: return Unicode_Category_NO;
		case 0x10B5E: return Unicode_Category_NO;
		case 0x10B5F: return Unicode_Category_NO;
		case 0x10B60: return Unicode_Category_LO;
		case 0x10B61: return Unicode_Category_LO;
		case 0x10B62: return Unicode_Category_LO;
		case 0x10B63: return Unicode_Category_LO;
		case 0x10B64: return Unicode_Category_LO;
		case 0x10B65: return Unicode_Category_LO;
		case 0x10B66: return Unicode_Category_LO;
		case 0x10B67: return Unicode_Category_LO;
		case 0x10B68: return Unicode_Category_LO;
		case 0x10B69: return Unicode_Category_LO;
		case 0x10B6A: return Unicode_Category_LO;
		case 0x10B6B: return Unicode_Category_LO;
		case 0x10B6C: return Unicode_Category_LO;
		case 0x10B6D: return Unicode_Category_LO;
		case 0x10B6E: return Unicode_Category_LO;
		case 0x10B6F: return Unicode_Category_LO;
		case 0x10B70: return Unicode_Category_LO;
		case 0x10B71: return Unicode_Category_LO;
		case 0x10B72: return Unicode_Category_LO;
		case 0x10B78: return Unicode_Category_NO;
		case 0x10B79: return Unicode_Category_NO;
		case 0x10B7A: return Unicode_Category_NO;
		case 0x10B7B: return Unicode_Category_NO;
		case 0x10B7C: return Unicode_Category_NO;
		case 0x10B7D: return Unicode_Category_NO;
		case 0x10B7E: return Unicode_Category_NO;
		case 0x10B7F: return Unicode_Category_NO;
		case 0x10B80: return Unicode_Category_LO;
		case 0x10B81: return Unicode_Category_LO;
		case 0x10B82: return Unicode_Category_LO;
		case 0x10B83: return Unicode_Category_LO;
		case 0x10B84: return Unicode_Category_LO;
		case 0x10B85: return Unicode_Category_LO;
		case 0x10B86: return Unicode_Category_LO;
		case 0x10B87: return Unicode_Category_LO;
		case 0x10B88: return Unicode_Category_LO;
		case 0x10B89: return Unicode_Category_LO;
		case 0x10B8A: return Unicode_Category_LO;
		case 0x10B8B: return Unicode_Category_LO;
		case 0x10B8C: return Unicode_Category_LO;
		case 0x10B8D: return Unicode_Category_LO;
		case 0x10B8E: return Unicode_Category_LO;
		case 0x10B8F: return Unicode_Category_LO;
		case 0x10B90: return Unicode_Category_LO;
		case 0x10B91: return Unicode_Category_LO;
		case 0x10B99: return Unicode_Category_PO;
		case 0x10B9A: return Unicode_Category_PO;
		case 0x10B9B: return Unicode_Category_PO;
		case 0x10B9C: return Unicode_Category_PO;
		case 0x10BA9: return Unicode_Category_NO;
		case 0x10BAA: return Unicode_Category_NO;
		case 0x10BAB: return Unicode_Category_NO;
		case 0x10BAC: return Unicode_Category_NO;
		case 0x10BAD: return Unicode_Category_NO;
		case 0x10BAE: return Unicode_Category_NO;
		case 0x10BAF: return Unicode_Category_NO;
		case 0x10C00: return Unicode_Category_LO;
		case 0x10C01: return Unicode_Category_LO;
		case 0x10C02: return Unicode_Category_LO;
		case 0x10C03: return Unicode_Category_LO;
		case 0x10C04: return Unicode_Category_LO;
		case 0x10C05: return Unicode_Category_LO;
		case 0x10C06: return Unicode_Category_LO;
		case 0x10C07: return Unicode_Category_LO;
		case 0x10C08: return Unicode_Category_LO;
		case 0x10C09: return Unicode_Category_LO;
		case 0x10C0A: return Unicode_Category_LO;
		case 0x10C0B: return Unicode_Category_LO;
		case 0x10C0C: return Unicode_Category_LO;
		case 0x10C0D: return Unicode_Category_LO;
		case 0x10C0E: return Unicode_Category_LO;
		case 0x10C0F: return Unicode_Category_LO;
		case 0x10C10: return Unicode_Category_LO;
		case 0x10C11: return Unicode_Category_LO;
		case 0x10C12: return Unicode_Category_LO;
		case 0x10C13: return Unicode_Category_LO;
		case 0x10C14: return Unicode_Category_LO;
		case 0x10C15: return Unicode_Category_LO;
		case 0x10C16: return Unicode_Category_LO;
		case 0x10C17: return Unicode_Category_LO;
		case 0x10C18: return Unicode_Category_LO;
		case 0x10C19: return Unicode_Category_LO;
		case 0x10C1A: return Unicode_Category_LO;
		case 0x10C1B: return Unicode_Category_LO;
		case 0x10C1C: return Unicode_Category_LO;
		case 0x10C1D: return Unicode_Category_LO;
		case 0x10C1E: return Unicode_Category_LO;
		case 0x10C1F: return Unicode_Category_LO;
		case 0x10C20: return Unicode_Category_LO;
		case 0x10C21: return Unicode_Category_LO;
		case 0x10C22: return Unicode_Category_LO;
		case 0x10C23: return Unicode_Category_LO;
		case 0x10C24: return Unicode_Category_LO;
		case 0x10C25: return Unicode_Category_LO;
		case 0x10C26: return Unicode_Category_LO;
		case 0x10C27: return Unicode_Category_LO;
		case 0x10C28: return Unicode_Category_LO;
		case 0x10C29: return Unicode_Category_LO;
		case 0x10C2A: return Unicode_Category_LO;
		case 0x10C2B: return Unicode_Category_LO;
		case 0x10C2C: return Unicode_Category_LO;
		case 0x10C2D: return Unicode_Category_LO;
		case 0x10C2E: return Unicode_Category_LO;
		case 0x10C2F: return Unicode_Category_LO;
		case 0x10C30: return Unicode_Category_LO;
		case 0x10C31: return Unicode_Category_LO;
		case 0x10C32: return Unicode_Category_LO;
		case 0x10C33: return Unicode_Category_LO;
		case 0x10C34: return Unicode_Category_LO;
		case 0x10C35: return Unicode_Category_LO;
		case 0x10C36: return Unicode_Category_LO;
		case 0x10C37: return Unicode_Category_LO;
		case 0x10C38: return Unicode_Category_LO;
		case 0x10C39: return Unicode_Category_LO;
		case 0x10C3A: return Unicode_Category_LO;
		case 0x10C3B: return Unicode_Category_LO;
		case 0x10C3C: return Unicode_Category_LO;
		case 0x10C3D: return Unicode_Category_LO;
		case 0x10C3E: return Unicode_Category_LO;
		case 0x10C3F: return Unicode_Category_LO;
		case 0x10C40: return Unicode_Category_LO;
		case 0x10C41: return Unicode_Category_LO;
		case 0x10C42: return Unicode_Category_LO;
		case 0x10C43: return Unicode_Category_LO;
		case 0x10C44: return Unicode_Category_LO;
		case 0x10C45: return Unicode_Category_LO;
		case 0x10C46: return Unicode_Category_LO;
		case 0x10C47: return Unicode_Category_LO;
		case 0x10C48: return Unicode_Category_LO;
		case 0x10C80: return Unicode_Category_LU;
		case 0x10C81: return Unicode_Category_LU;
		case 0x10C82: return Unicode_Category_LU;
		case 0x10C83: return Unicode_Category_LU;
		case 0x10C84: return Unicode_Category_LU;
		case 0x10C85: return Unicode_Category_LU;
		case 0x10C86: return Unicode_Category_LU;
		case 0x10C87: return Unicode_Category_LU;
		case 0x10C88: return Unicode_Category_LU;
		case 0x10C89: return Unicode_Category_LU;
		case 0x10C8A: return Unicode_Category_LU;
		case 0x10C8B: return Unicode_Category_LU;
		case 0x10C8C: return Unicode_Category_LU;
		case 0x10C8D: return Unicode_Category_LU;
		case 0x10C8E: return Unicode_Category_LU;
		case 0x10C8F: return Unicode_Category_LU;
		case 0x10C90: return Unicode_Category_LU;
		case 0x10C91: return Unicode_Category_LU;
		case 0x10C92: return Unicode_Category_LU;
		case 0x10C93: return Unicode_Category_LU;
		case 0x10C94: return Unicode_Category_LU;
		case 0x10C95: return Unicode_Category_LU;
		case 0x10C96: return Unicode_Category_LU;
		case 0x10C97: return Unicode_Category_LU;
		case 0x10C98: return Unicode_Category_LU;
		case 0x10C99: return Unicode_Category_LU;
		case 0x10C9A: return Unicode_Category_LU;
		case 0x10C9B: return Unicode_Category_LU;
		case 0x10C9C: return Unicode_Category_LU;
		case 0x10C9D: return Unicode_Category_LU;
		case 0x10C9E: return Unicode_Category_LU;
		case 0x10C9F: return Unicode_Category_LU;
		case 0x10CA0: return Unicode_Category_LU;
		case 0x10CA1: return Unicode_Category_LU;
		case 0x10CA2: return Unicode_Category_LU;
		case 0x10CA3: return Unicode_Category_LU;
		case 0x10CA4: return Unicode_Category_LU;
		case 0x10CA5: return Unicode_Category_LU;
		case 0x10CA6: return Unicode_Category_LU;
		case 0x10CA7: return Unicode_Category_LU;
		case 0x10CA8: return Unicode_Category_LU;
		case 0x10CA9: return Unicode_Category_LU;
		case 0x10CAA: return Unicode_Category_LU;
		case 0x10CAB: return Unicode_Category_LU;
		case 0x10CAC: return Unicode_Category_LU;
		case 0x10CAD: return Unicode_Category_LU;
		case 0x10CAE: return Unicode_Category_LU;
		case 0x10CAF: return Unicode_Category_LU;
		case 0x10CB0: return Unicode_Category_LU;
		case 0x10CB1: return Unicode_Category_LU;
		case 0x10CB2: return Unicode_Category_LU;
		case 0x10CC0: return Unicode_Category_LL;
		case 0x10CC1: return Unicode_Category_LL;
		case 0x10CC2: return Unicode_Category_LL;
		case 0x10CC3: return Unicode_Category_LL;
		case 0x10CC4: return Unicode_Category_LL;
		case 0x10CC5: return Unicode_Category_LL;
		case 0x10CC6: return Unicode_Category_LL;
		case 0x10CC7: return Unicode_Category_LL;
		case 0x10CC8: return Unicode_Category_LL;
		case 0x10CC9: return Unicode_Category_LL;
		case 0x10CCA: return Unicode_Category_LL;
		case 0x10CCB: return Unicode_Category_LL;
		case 0x10CCC: return Unicode_Category_LL;
		case 0x10CCD: return Unicode_Category_LL;
		case 0x10CCE: return Unicode_Category_LL;
		case 0x10CCF: return Unicode_Category_LL;
		case 0x10CD0: return Unicode_Category_LL;
		case 0x10CD1: return Unicode_Category_LL;
		case 0x10CD2: return Unicode_Category_LL;
		case 0x10CD3: return Unicode_Category_LL;
		case 0x10CD4: return Unicode_Category_LL;
		case 0x10CD5: return Unicode_Category_LL;
		case 0x10CD6: return Unicode_Category_LL;
		case 0x10CD7: return Unicode_Category_LL;
		case 0x10CD8: return Unicode_Category_LL;
		case 0x10CD9: return Unicode_Category_LL;
		case 0x10CDA: return Unicode_Category_LL;
		case 0x10CDB: return Unicode_Category_LL;
		case 0x10CDC: return Unicode_Category_LL;
		case 0x10CDD: return Unicode_Category_LL;
		case 0x10CDE: return Unicode_Category_LL;
		case 0x10CDF: return Unicode_Category_LL;
		case 0x10CE0: return Unicode_Category_LL;
		case 0x10CE1: return Unicode_Category_LL;
		case 0x10CE2: return Unicode_Category_LL;
		case 0x10CE3: return Unicode_Category_LL;
		case 0x10CE4: return Unicode_Category_LL;
		case 0x10CE5: return Unicode_Category_LL;
		case 0x10CE6: return Unicode_Category_LL;
		case 0x10CE7: return Unicode_Category_LL;
		case 0x10CE8: return Unicode_Category_LL;
		case 0x10CE9: return Unicode_Category_LL;
		case 0x10CEA: return Unicode_Category_LL;
		case 0x10CEB: return Unicode_Category_LL;
		case 0x10CEC: return Unicode_Category_LL;
		case 0x10CED: return Unicode_Category_LL;
		case 0x10CEE: return Unicode_Category_LL;
		case 0x10CEF: return Unicode_Category_LL;
		case 0x10CF0: return Unicode_Category_LL;
		case 0x10CF1: return Unicode_Category_LL;
		case 0x10CF2: return Unicode_Category_LL;
		case 0x10CFA: return Unicode_Category_NO;
		case 0x10CFB: return Unicode_Category_NO;
		case 0x10CFC: return Unicode_Category_NO;
		case 0x10CFD: return Unicode_Category_NO;
		case 0x10CFE: return Unicode_Category_NO;
		case 0x10CFF: return Unicode_Category_NO;
		case 0x10D00: return Unicode_Category_LO;
		case 0x10D01: return Unicode_Category_LO;
		case 0x10D02: return Unicode_Category_LO;
		case 0x10D03: return Unicode_Category_LO;
		case 0x10D04: return Unicode_Category_LO;
		case 0x10D05: return Unicode_Category_LO;
		case 0x10D06: return Unicode_Category_LO;
		case 0x10D07: return Unicode_Category_LO;
		case 0x10D08: return Unicode_Category_LO;
		case 0x10D09: return Unicode_Category_LO;
		case 0x10D0A: return Unicode_Category_LO;
		case 0x10D0B: return Unicode_Category_LO;
		case 0x10D0C: return Unicode_Category_LO;
		case 0x10D0D: return Unicode_Category_LO;
		case 0x10D0E: return Unicode_Category_LO;
		case 0x10D0F: return Unicode_Category_LO;
		case 0x10D10: return Unicode_Category_LO;
		case 0x10D11: return Unicode_Category_LO;
		case 0x10D12: return Unicode_Category_LO;
		case 0x10D13: return Unicode_Category_LO;
		case 0x10D14: return Unicode_Category_LO;
		case 0x10D15: return Unicode_Category_LO;
		case 0x10D16: return Unicode_Category_LO;
		case 0x10D17: return Unicode_Category_LO;
		case 0x10D18: return Unicode_Category_LO;
		case 0x10D19: return Unicode_Category_LO;
		case 0x10D1A: return Unicode_Category_LO;
		case 0x10D1B: return Unicode_Category_LO;
		case 0x10D1C: return Unicode_Category_LO;
		case 0x10D1D: return Unicode_Category_LO;
		case 0x10D1E: return Unicode_Category_LO;
		case 0x10D1F: return Unicode_Category_LO;
		case 0x10D20: return Unicode_Category_LO;
		case 0x10D21: return Unicode_Category_LO;
		case 0x10D22: return Unicode_Category_LO;
		case 0x10D23: return Unicode_Category_LO;
		case 0x10D24: return Unicode_Category_MN;
		case 0x10D25: return Unicode_Category_MN;
		case 0x10D26: return Unicode_Category_MN;
		case 0x10D27: return Unicode_Category_MN;
		case 0x10D30: return Unicode_Category_ND;
		case 0x10D31: return Unicode_Category_ND;
		case 0x10D32: return Unicode_Category_ND;
		case 0x10D33: return Unicode_Category_ND;
		case 0x10D34: return Unicode_Category_ND;
		case 0x10D35: return Unicode_Category_ND;
		case 0x10D36: return Unicode_Category_ND;
		case 0x10D37: return Unicode_Category_ND;
		case 0x10D38: return Unicode_Category_ND;
		case 0x10D39: return Unicode_Category_ND;
		case 0x10E60: return Unicode_Category_NO;
		case 0x10E61: return Unicode_Category_NO;
		case 0x10E62: return Unicode_Category_NO;
		case 0x10E63: return Unicode_Category_NO;
		case 0x10E64: return Unicode_Category_NO;
		case 0x10E65: return Unicode_Category_NO;
		case 0x10E66: return Unicode_Category_NO;
		case 0x10E67: return Unicode_Category_NO;
		case 0x10E68: return Unicode_Category_NO;
		case 0x10E69: return Unicode_Category_NO;
		case 0x10E6A: return Unicode_Category_NO;
		case 0x10E6B: return Unicode_Category_NO;
		case 0x10E6C: return Unicode_Category_NO;
		case 0x10E6D: return Unicode_Category_NO;
		case 0x10E6E: return Unicode_Category_NO;
		case 0x10E6F: return Unicode_Category_NO;
		case 0x10E70: return Unicode_Category_NO;
		case 0x10E71: return Unicode_Category_NO;
		case 0x10E72: return Unicode_Category_NO;
		case 0x10E73: return Unicode_Category_NO;
		case 0x10E74: return Unicode_Category_NO;
		case 0x10E75: return Unicode_Category_NO;
		case 0x10E76: return Unicode_Category_NO;
		case 0x10E77: return Unicode_Category_NO;
		case 0x10E78: return Unicode_Category_NO;
		case 0x10E79: return Unicode_Category_NO;
		case 0x10E7A: return Unicode_Category_NO;
		case 0x10E7B: return Unicode_Category_NO;
		case 0x10E7C: return Unicode_Category_NO;
		case 0x10E7D: return Unicode_Category_NO;
		case 0x10E7E: return Unicode_Category_NO;
		case 0x10E80: return Unicode_Category_LO;
		case 0x10E81: return Unicode_Category_LO;
		case 0x10E82: return Unicode_Category_LO;
		case 0x10E83: return Unicode_Category_LO;
		case 0x10E84: return Unicode_Category_LO;
		case 0x10E85: return Unicode_Category_LO;
		case 0x10E86: return Unicode_Category_LO;
		case 0x10E87: return Unicode_Category_LO;
		case 0x10E88: return Unicode_Category_LO;
		case 0x10E89: return Unicode_Category_LO;
		case 0x10E8A: return Unicode_Category_LO;
		case 0x10E8B: return Unicode_Category_LO;
		case 0x10E8C: return Unicode_Category_LO;
		case 0x10E8D: return Unicode_Category_LO;
		case 0x10E8E: return Unicode_Category_LO;
		case 0x10E8F: return Unicode_Category_LO;
		case 0x10E90: return Unicode_Category_LO;
		case 0x10E91: return Unicode_Category_LO;
		case 0x10E92: return Unicode_Category_LO;
		case 0x10E93: return Unicode_Category_LO;
		case 0x10E94: return Unicode_Category_LO;
		case 0x10E95: return Unicode_Category_LO;
		case 0x10E96: return Unicode_Category_LO;
		case 0x10E97: return Unicode_Category_LO;
		case 0x10E98: return Unicode_Category_LO;
		case 0x10E99: return Unicode_Category_LO;
		case 0x10E9A: return Unicode_Category_LO;
		case 0x10E9B: return Unicode_Category_LO;
		case 0x10E9C: return Unicode_Category_LO;
		case 0x10E9D: return Unicode_Category_LO;
		case 0x10E9E: return Unicode_Category_LO;
		case 0x10E9F: return Unicode_Category_LO;
		case 0x10EA0: return Unicode_Category_LO;
		case 0x10EA1: return Unicode_Category_LO;
		case 0x10EA2: return Unicode_Category_LO;
		case 0x10EA3: return Unicode_Category_LO;
		case 0x10EA4: return Unicode_Category_LO;
		case 0x10EA5: return Unicode_Category_LO;
		case 0x10EA6: return Unicode_Category_LO;
		case 0x10EA7: return Unicode_Category_LO;
		case 0x10EA8: return Unicode_Category_LO;
		case 0x10EA9: return Unicode_Category_LO;
		case 0x10EAB: return Unicode_Category_MN;
		case 0x10EAC: return Unicode_Category_MN;
		case 0x10EAD: return Unicode_Category_PD;
		case 0x10EB0: return Unicode_Category_LO;
		case 0x10EB1: return Unicode_Category_LO;
		case 0x10F00: return Unicode_Category_LO;
		case 0x10F01: return Unicode_Category_LO;
		case 0x10F02: return Unicode_Category_LO;
		case 0x10F03: return Unicode_Category_LO;
		case 0x10F04: return Unicode_Category_LO;
		case 0x10F05: return Unicode_Category_LO;
		case 0x10F06: return Unicode_Category_LO;
		case 0x10F07: return Unicode_Category_LO;
		case 0x10F08: return Unicode_Category_LO;
		case 0x10F09: return Unicode_Category_LO;
		case 0x10F0A: return Unicode_Category_LO;
		case 0x10F0B: return Unicode_Category_LO;
		case 0x10F0C: return Unicode_Category_LO;
		case 0x10F0D: return Unicode_Category_LO;
		case 0x10F0E: return Unicode_Category_LO;
		case 0x10F0F: return Unicode_Category_LO;
		case 0x10F10: return Unicode_Category_LO;
		case 0x10F11: return Unicode_Category_LO;
		case 0x10F12: return Unicode_Category_LO;
		case 0x10F13: return Unicode_Category_LO;
		case 0x10F14: return Unicode_Category_LO;
		case 0x10F15: return Unicode_Category_LO;
		case 0x10F16: return Unicode_Category_LO;
		case 0x10F17: return Unicode_Category_LO;
		case 0x10F18: return Unicode_Category_LO;
		case 0x10F19: return Unicode_Category_LO;
		case 0x10F1A: return Unicode_Category_LO;
		case 0x10F1B: return Unicode_Category_LO;
		case 0x10F1C: return Unicode_Category_LO;
		case 0x10F1D: return Unicode_Category_NO;
		case 0x10F1E: return Unicode_Category_NO;
		case 0x10F1F: return Unicode_Category_NO;
		case 0x10F20: return Unicode_Category_NO;
		case 0x10F21: return Unicode_Category_NO;
		case 0x10F22: return Unicode_Category_NO;
		case 0x10F23: return Unicode_Category_NO;
		case 0x10F24: return Unicode_Category_NO;
		case 0x10F25: return Unicode_Category_NO;
		case 0x10F26: return Unicode_Category_NO;
		case 0x10F27: return Unicode_Category_LO;
		case 0x10F30: return Unicode_Category_LO;
		case 0x10F31: return Unicode_Category_LO;
		case 0x10F32: return Unicode_Category_LO;
		case 0x10F33: return Unicode_Category_LO;
		case 0x10F34: return Unicode_Category_LO;
		case 0x10F35: return Unicode_Category_LO;
		case 0x10F36: return Unicode_Category_LO;
		case 0x10F37: return Unicode_Category_LO;
		case 0x10F38: return Unicode_Category_LO;
		case 0x10F39: return Unicode_Category_LO;
		case 0x10F3A: return Unicode_Category_LO;
		case 0x10F3B: return Unicode_Category_LO;
		case 0x10F3C: return Unicode_Category_LO;
		case 0x10F3D: return Unicode_Category_LO;
		case 0x10F3E: return Unicode_Category_LO;
		case 0x10F3F: return Unicode_Category_LO;
		case 0x10F40: return Unicode_Category_LO;
		case 0x10F41: return Unicode_Category_LO;
		case 0x10F42: return Unicode_Category_LO;
		case 0x10F43: return Unicode_Category_LO;
		case 0x10F44: return Unicode_Category_LO;
		case 0x10F45: return Unicode_Category_LO;
		case 0x10F46: return Unicode_Category_MN;
		case 0x10F47: return Unicode_Category_MN;
		case 0x10F48: return Unicode_Category_MN;
		case 0x10F49: return Unicode_Category_MN;
		case 0x10F4A: return Unicode_Category_MN;
		case 0x10F4B: return Unicode_Category_MN;
		case 0x10F4C: return Unicode_Category_MN;
		case 0x10F4D: return Unicode_Category_MN;
		case 0x10F4E: return Unicode_Category_MN;
		case 0x10F4F: return Unicode_Category_MN;
		case 0x10F50: return Unicode_Category_MN;
		case 0x10F51: return Unicode_Category_NO;
		case 0x10F52: return Unicode_Category_NO;
		case 0x10F53: return Unicode_Category_NO;
		case 0x10F54: return Unicode_Category_NO;
		case 0x10F55: return Unicode_Category_PO;
		case 0x10F56: return Unicode_Category_PO;
		case 0x10F57: return Unicode_Category_PO;
		case 0x10F58: return Unicode_Category_PO;
		case 0x10F59: return Unicode_Category_PO;
		case 0x10FB0: return Unicode_Category_LO;
		case 0x10FB1: return Unicode_Category_LO;
		case 0x10FB2: return Unicode_Category_LO;
		case 0x10FB3: return Unicode_Category_LO;
		case 0x10FB4: return Unicode_Category_LO;
		case 0x10FB5: return Unicode_Category_LO;
		case 0x10FB6: return Unicode_Category_LO;
		case 0x10FB7: return Unicode_Category_LO;
		case 0x10FB8: return Unicode_Category_LO;
		case 0x10FB9: return Unicode_Category_LO;
		case 0x10FBA: return Unicode_Category_LO;
		case 0x10FBB: return Unicode_Category_LO;
		case 0x10FBC: return Unicode_Category_LO;
		case 0x10FBD: return Unicode_Category_LO;
		case 0x10FBE: return Unicode_Category_LO;
		case 0x10FBF: return Unicode_Category_LO;
		case 0x10FC0: return Unicode_Category_LO;
		case 0x10FC1: return Unicode_Category_LO;
		case 0x10FC2: return Unicode_Category_LO;
		case 0x10FC3: return Unicode_Category_LO;
		case 0x10FC4: return Unicode_Category_LO;
		case 0x10FC5: return Unicode_Category_NO;
		case 0x10FC6: return Unicode_Category_NO;
		case 0x10FC7: return Unicode_Category_NO;
		case 0x10FC8: return Unicode_Category_NO;
		case 0x10FC9: return Unicode_Category_NO;
		case 0x10FCA: return Unicode_Category_NO;
		case 0x10FCB: return Unicode_Category_NO;
		case 0x10FE0: return Unicode_Category_LO;
		case 0x10FE1: return Unicode_Category_LO;
		case 0x10FE2: return Unicode_Category_LO;
		case 0x10FE3: return Unicode_Category_LO;
		case 0x10FE4: return Unicode_Category_LO;
		case 0x10FE5: return Unicode_Category_LO;
		case 0x10FE6: return Unicode_Category_LO;
		case 0x10FE7: return Unicode_Category_LO;
		case 0x10FE8: return Unicode_Category_LO;
		case 0x10FE9: return Unicode_Category_LO;
		case 0x10FEA: return Unicode_Category_LO;
		case 0x10FEB: return Unicode_Category_LO;
		case 0x10FEC: return Unicode_Category_LO;
		case 0x10FED: return Unicode_Category_LO;
		case 0x10FEE: return Unicode_Category_LO;
		case 0x10FEF: return Unicode_Category_LO;
		case 0x10FF0: return Unicode_Category_LO;
		case 0x10FF1: return Unicode_Category_LO;
		case 0x10FF2: return Unicode_Category_LO;
		case 0x10FF3: return Unicode_Category_LO;
		case 0x10FF4: return Unicode_Category_LO;
		case 0x10FF5: return Unicode_Category_LO;
		case 0x10FF6: return Unicode_Category_LO;
		case 0x11000: return Unicode_Category_MC;
		case 0x11001: return Unicode_Category_MN;
		case 0x11002: return Unicode_Category_MC;
		case 0x11003: return Unicode_Category_LO;
		case 0x11004: return Unicode_Category_LO;
		case 0x11005: return Unicode_Category_LO;
		case 0x11006: return Unicode_Category_LO;
		case 0x11007: return Unicode_Category_LO;
		case 0x11008: return Unicode_Category_LO;
		case 0x11009: return Unicode_Category_LO;
		case 0x1100A: return Unicode_Category_LO;
		case 0x1100B: return Unicode_Category_LO;
		case 0x1100C: return Unicode_Category_LO;
		case 0x1100D: return Unicode_Category_LO;
		case 0x1100E: return Unicode_Category_LO;
		case 0x1100F: return Unicode_Category_LO;
		case 0x11010: return Unicode_Category_LO;
		case 0x11011: return Unicode_Category_LO;
		case 0x11012: return Unicode_Category_LO;
		case 0x11013: return Unicode_Category_LO;
		case 0x11014: return Unicode_Category_LO;
		case 0x11015: return Unicode_Category_LO;
		case 0x11016: return Unicode_Category_LO;
		case 0x11017: return Unicode_Category_LO;
		case 0x11018: return Unicode_Category_LO;
		case 0x11019: return Unicode_Category_LO;
		case 0x1101A: return Unicode_Category_LO;
		case 0x1101B: return Unicode_Category_LO;
		case 0x1101C: return Unicode_Category_LO;
		case 0x1101D: return Unicode_Category_LO;
		case 0x1101E: return Unicode_Category_LO;
		case 0x1101F: return Unicode_Category_LO;
		case 0x11020: return Unicode_Category_LO;
		case 0x11021: return Unicode_Category_LO;
		case 0x11022: return Unicode_Category_LO;
		case 0x11023: return Unicode_Category_LO;
		case 0x11024: return Unicode_Category_LO;
		case 0x11025: return Unicode_Category_LO;
		case 0x11026: return Unicode_Category_LO;
		case 0x11027: return Unicode_Category_LO;
		case 0x11028: return Unicode_Category_LO;
		case 0x11029: return Unicode_Category_LO;
		case 0x1102A: return Unicode_Category_LO;
		case 0x1102B: return Unicode_Category_LO;
		case 0x1102C: return Unicode_Category_LO;
		case 0x1102D: return Unicode_Category_LO;
		case 0x1102E: return Unicode_Category_LO;
		case 0x1102F: return Unicode_Category_LO;
		case 0x11030: return Unicode_Category_LO;
		case 0x11031: return Unicode_Category_LO;
		case 0x11032: return Unicode_Category_LO;
		case 0x11033: return Unicode_Category_LO;
		case 0x11034: return Unicode_Category_LO;
		case 0x11035: return Unicode_Category_LO;
		case 0x11036: return Unicode_Category_LO;
		case 0x11037: return Unicode_Category_LO;
		case 0x11038: return Unicode_Category_MN;
		case 0x11039: return Unicode_Category_MN;
		case 0x1103A: return Unicode_Category_MN;
		case 0x1103B: return Unicode_Category_MN;
		case 0x1103C: return Unicode_Category_MN;
		case 0x1103D: return Unicode_Category_MN;
		case 0x1103E: return Unicode_Category_MN;
		case 0x1103F: return Unicode_Category_MN;
		case 0x11040: return Unicode_Category_MN;
		case 0x11041: return Unicode_Category_MN;
		case 0x11042: return Unicode_Category_MN;
		case 0x11043: return Unicode_Category_MN;
		case 0x11044: return Unicode_Category_MN;
		case 0x11045: return Unicode_Category_MN;
		case 0x11046: return Unicode_Category_MN;
		case 0x11047: return Unicode_Category_PO;
		case 0x11048: return Unicode_Category_PO;
		case 0x11049: return Unicode_Category_PO;
		case 0x1104A: return Unicode_Category_PO;
		case 0x1104B: return Unicode_Category_PO;
		case 0x1104C: return Unicode_Category_PO;
		case 0x1104D: return Unicode_Category_PO;
		case 0x11052: return Unicode_Category_NO;
		case 0x11053: return Unicode_Category_NO;
		case 0x11054: return Unicode_Category_NO;
		case 0x11055: return Unicode_Category_NO;
		case 0x11056: return Unicode_Category_NO;
		case 0x11057: return Unicode_Category_NO;
		case 0x11058: return Unicode_Category_NO;
		case 0x11059: return Unicode_Category_NO;
		case 0x1105A: return Unicode_Category_NO;
		case 0x1105B: return Unicode_Category_NO;
		case 0x1105C: return Unicode_Category_NO;
		case 0x1105D: return Unicode_Category_NO;
		case 0x1105E: return Unicode_Category_NO;
		case 0x1105F: return Unicode_Category_NO;
		case 0x11060: return Unicode_Category_NO;
		case 0x11061: return Unicode_Category_NO;
		case 0x11062: return Unicode_Category_NO;
		case 0x11063: return Unicode_Category_NO;
		case 0x11064: return Unicode_Category_NO;
		case 0x11065: return Unicode_Category_NO;
		case 0x11066: return Unicode_Category_ND;
		case 0x11067: return Unicode_Category_ND;
		case 0x11068: return Unicode_Category_ND;
		case 0x11069: return Unicode_Category_ND;
		case 0x1106A: return Unicode_Category_ND;
		case 0x1106B: return Unicode_Category_ND;
		case 0x1106C: return Unicode_Category_ND;
		case 0x1106D: return Unicode_Category_ND;
		case 0x1106E: return Unicode_Category_ND;
		case 0x1106F: return Unicode_Category_ND;
		case 0x1107F: return Unicode_Category_MN;
		case 0x11080: return Unicode_Category_MN;
		case 0x11081: return Unicode_Category_MN;
		case 0x11082: return Unicode_Category_MC;
		case 0x11083: return Unicode_Category_LO;
		case 0x11084: return Unicode_Category_LO;
		case 0x11085: return Unicode_Category_LO;
		case 0x11086: return Unicode_Category_LO;
		case 0x11087: return Unicode_Category_LO;
		case 0x11088: return Unicode_Category_LO;
		case 0x11089: return Unicode_Category_LO;
		case 0x1108A: return Unicode_Category_LO;
		case 0x1108B: return Unicode_Category_LO;
		case 0x1108C: return Unicode_Category_LO;
		case 0x1108D: return Unicode_Category_LO;
		case 0x1108E: return Unicode_Category_LO;
		case 0x1108F: return Unicode_Category_LO;
		case 0x11090: return Unicode_Category_LO;
		case 0x11091: return Unicode_Category_LO;
		case 0x11092: return Unicode_Category_LO;
		case 0x11093: return Unicode_Category_LO;
		case 0x11094: return Unicode_Category_LO;
		case 0x11095: return Unicode_Category_LO;
		case 0x11096: return Unicode_Category_LO;
		case 0x11097: return Unicode_Category_LO;
		case 0x11098: return Unicode_Category_LO;
		case 0x11099: return Unicode_Category_LO;
		case 0x1109A: return Unicode_Category_LO;
		case 0x1109B: return Unicode_Category_LO;
		case 0x1109C: return Unicode_Category_LO;
		case 0x1109D: return Unicode_Category_LO;
		case 0x1109E: return Unicode_Category_LO;
		case 0x1109F: return Unicode_Category_LO;
		case 0x110A0: return Unicode_Category_LO;
		case 0x110A1: return Unicode_Category_LO;
		case 0x110A2: return Unicode_Category_LO;
		case 0x110A3: return Unicode_Category_LO;
		case 0x110A4: return Unicode_Category_LO;
		case 0x110A5: return Unicode_Category_LO;
		case 0x110A6: return Unicode_Category_LO;
		case 0x110A7: return Unicode_Category_LO;
		case 0x110A8: return Unicode_Category_LO;
		case 0x110A9: return Unicode_Category_LO;
		case 0x110AA: return Unicode_Category_LO;
		case 0x110AB: return Unicode_Category_LO;
		case 0x110AC: return Unicode_Category_LO;
		case 0x110AD: return Unicode_Category_LO;
		case 0x110AE: return Unicode_Category_LO;
		case 0x110AF: return Unicode_Category_LO;
		case 0x110B0: return Unicode_Category_MC;
		case 0x110B1: return Unicode_Category_MC;
		case 0x110B2: return Unicode_Category_MC;
		case 0x110B3: return Unicode_Category_MN;
		case 0x110B4: return Unicode_Category_MN;
		case 0x110B5: return Unicode_Category_MN;
		case 0x110B6: return Unicode_Category_MN;
		case 0x110B7: return Unicode_Category_MC;
		case 0x110B8: return Unicode_Category_MC;
		case 0x110B9: return Unicode_Category_MN;
		case 0x110BA: return Unicode_Category_MN;
		case 0x110BB: return Unicode_Category_PO;
		case 0x110BC: return Unicode_Category_PO;
		case 0x110BD: return Unicode_Category_CF;
		case 0x110BE: return Unicode_Category_PO;
		case 0x110BF: return Unicode_Category_PO;
		case 0x110C0: return Unicode_Category_PO;
		case 0x110C1: return Unicode_Category_PO;
		case 0x110CD: return Unicode_Category_CF;
		case 0x110D0: return Unicode_Category_LO;
		case 0x110D1: return Unicode_Category_LO;
		case 0x110D2: return Unicode_Category_LO;
		case 0x110D3: return Unicode_Category_LO;
		case 0x110D4: return Unicode_Category_LO;
		case 0x110D5: return Unicode_Category_LO;
		case 0x110D6: return Unicode_Category_LO;
		case 0x110D7: return Unicode_Category_LO;
		case 0x110D8: return Unicode_Category_LO;
		case 0x110D9: return Unicode_Category_LO;
		case 0x110DA: return Unicode_Category_LO;
		case 0x110DB: return Unicode_Category_LO;
		case 0x110DC: return Unicode_Category_LO;
		case 0x110DD: return Unicode_Category_LO;
		case 0x110DE: return Unicode_Category_LO;
		case 0x110DF: return Unicode_Category_LO;
		case 0x110E0: return Unicode_Category_LO;
		case 0x110E1: return Unicode_Category_LO;
		case 0x110E2: return Unicode_Category_LO;
		case 0x110E3: return Unicode_Category_LO;
		case 0x110E4: return Unicode_Category_LO;
		case 0x110E5: return Unicode_Category_LO;
		case 0x110E6: return Unicode_Category_LO;
		case 0x110E7: return Unicode_Category_LO;
		case 0x110E8: return Unicode_Category_LO;
		case 0x110F0: return Unicode_Category_ND;
		case 0x110F1: return Unicode_Category_ND;
		case 0x110F2: return Unicode_Category_ND;
		case 0x110F3: return Unicode_Category_ND;
		case 0x110F4: return Unicode_Category_ND;
		case 0x110F5: return Unicode_Category_ND;
		case 0x110F6: return Unicode_Category_ND;
		case 0x110F7: return Unicode_Category_ND;
		case 0x110F8: return Unicode_Category_ND;
		case 0x110F9: return Unicode_Category_ND;
		case 0x11100: return Unicode_Category_MN;
		case 0x11101: return Unicode_Category_MN;
		case 0x11102: return Unicode_Category_MN;
		case 0x11103: return Unicode_Category_LO;
		case 0x11104: return Unicode_Category_LO;
		case 0x11105: return Unicode_Category_LO;
		case 0x11106: return Unicode_Category_LO;
		case 0x11107: return Unicode_Category_LO;
		case 0x11108: return Unicode_Category_LO;
		case 0x11109: return Unicode_Category_LO;
		case 0x1110A: return Unicode_Category_LO;
		case 0x1110B: return Unicode_Category_LO;
		case 0x1110C: return Unicode_Category_LO;
		case 0x1110D: return Unicode_Category_LO;
		case 0x1110E: return Unicode_Category_LO;
		case 0x1110F: return Unicode_Category_LO;
		case 0x11110: return Unicode_Category_LO;
		case 0x11111: return Unicode_Category_LO;
		case 0x11112: return Unicode_Category_LO;
		case 0x11113: return Unicode_Category_LO;
		case 0x11114: return Unicode_Category_LO;
		case 0x11115: return Unicode_Category_LO;
		case 0x11116: return Unicode_Category_LO;
		case 0x11117: return Unicode_Category_LO;
		case 0x11118: return Unicode_Category_LO;
		case 0x11119: return Unicode_Category_LO;
		case 0x1111A: return Unicode_Category_LO;
		case 0x1111B: return Unicode_Category_LO;
		case 0x1111C: return Unicode_Category_LO;
		case 0x1111D: return Unicode_Category_LO;
		case 0x1111E: return Unicode_Category_LO;
		case 0x1111F: return Unicode_Category_LO;
		case 0x11120: return Unicode_Category_LO;
		case 0x11121: return Unicode_Category_LO;
		case 0x11122: return Unicode_Category_LO;
		case 0x11123: return Unicode_Category_LO;
		case 0x11124: return Unicode_Category_LO;
		case 0x11125: return Unicode_Category_LO;
		case 0x11126: return Unicode_Category_LO;
		case 0x11127: return Unicode_Category_MN;
		case 0x11128: return Unicode_Category_MN;
		case 0x11129: return Unicode_Category_MN;
		case 0x1112A: return Unicode_Category_MN;
		case 0x1112B: return Unicode_Category_MN;
		case 0x1112C: return Unicode_Category_MC;
		case 0x1112D: return Unicode_Category_MN;
		case 0x1112E: return Unicode_Category_MN;
		case 0x1112F: return Unicode_Category_MN;
		case 0x11130: return Unicode_Category_MN;
		case 0x11131: return Unicode_Category_MN;
		case 0x11132: return Unicode_Category_MN;
		case 0x11133: return Unicode_Category_MN;
		case 0x11134: return Unicode_Category_MN;
		case 0x11136: return Unicode_Category_ND;
		case 0x11137: return Unicode_Category_ND;
		case 0x11138: return Unicode_Category_ND;
		case 0x11139: return Unicode_Category_ND;
		case 0x1113A: return Unicode_Category_ND;
		case 0x1113B: return Unicode_Category_ND;
		case 0x1113C: return Unicode_Category_ND;
		case 0x1113D: return Unicode_Category_ND;
		case 0x1113E: return Unicode_Category_ND;
		case 0x1113F: return Unicode_Category_ND;
		case 0x11140: return Unicode_Category_PO;
		case 0x11141: return Unicode_Category_PO;
		case 0x11142: return Unicode_Category_PO;
		case 0x11143: return Unicode_Category_PO;
		case 0x11144: return Unicode_Category_LO;
		case 0x11145: return Unicode_Category_MC;
		case 0x11146: return Unicode_Category_MC;
		case 0x11147: return Unicode_Category_LO;
		case 0x11150: return Unicode_Category_LO;
		case 0x11151: return Unicode_Category_LO;
		case 0x11152: return Unicode_Category_LO;
		case 0x11153: return Unicode_Category_LO;
		case 0x11154: return Unicode_Category_LO;
		case 0x11155: return Unicode_Category_LO;
		case 0x11156: return Unicode_Category_LO;
		case 0x11157: return Unicode_Category_LO;
		case 0x11158: return Unicode_Category_LO;
		case 0x11159: return Unicode_Category_LO;
		case 0x1115A: return Unicode_Category_LO;
		case 0x1115B: return Unicode_Category_LO;
		case 0x1115C: return Unicode_Category_LO;
		case 0x1115D: return Unicode_Category_LO;
		case 0x1115E: return Unicode_Category_LO;
		case 0x1115F: return Unicode_Category_LO;
		case 0x11160: return Unicode_Category_LO;
		case 0x11161: return Unicode_Category_LO;
		case 0x11162: return Unicode_Category_LO;
		case 0x11163: return Unicode_Category_LO;
		case 0x11164: return Unicode_Category_LO;
		case 0x11165: return Unicode_Category_LO;
		case 0x11166: return Unicode_Category_LO;
		case 0x11167: return Unicode_Category_LO;
		case 0x11168: return Unicode_Category_LO;
		case 0x11169: return Unicode_Category_LO;
		case 0x1116A: return Unicode_Category_LO;
		case 0x1116B: return Unicode_Category_LO;
		case 0x1116C: return Unicode_Category_LO;
		case 0x1116D: return Unicode_Category_LO;
		case 0x1116E: return Unicode_Category_LO;
		case 0x1116F: return Unicode_Category_LO;
		case 0x11170: return Unicode_Category_LO;
		case 0x11171: return Unicode_Category_LO;
		case 0x11172: return Unicode_Category_LO;
		case 0x11173: return Unicode_Category_MN;
		case 0x11174: return Unicode_Category_PO;
		case 0x11175: return Unicode_Category_PO;
		case 0x11176: return Unicode_Category_LO;
		case 0x11180: return Unicode_Category_MN;
		case 0x11181: return Unicode_Category_MN;
		case 0x11182: return Unicode_Category_MC;
		case 0x11183: return Unicode_Category_LO;
		case 0x11184: return Unicode_Category_LO;
		case 0x11185: return Unicode_Category_LO;
		case 0x11186: return Unicode_Category_LO;
		case 0x11187: return Unicode_Category_LO;
		case 0x11188: return Unicode_Category_LO;
		case 0x11189: return Unicode_Category_LO;
		case 0x1118A: return Unicode_Category_LO;
		case 0x1118B: return Unicode_Category_LO;
		case 0x1118C: return Unicode_Category_LO;
		case 0x1118D: return Unicode_Category_LO;
		case 0x1118E: return Unicode_Category_LO;
		case 0x1118F: return Unicode_Category_LO;
		case 0x11190: return Unicode_Category_LO;
		case 0x11191: return Unicode_Category_LO;
		case 0x11192: return Unicode_Category_LO;
		case 0x11193: return Unicode_Category_LO;
		case 0x11194: return Unicode_Category_LO;
		case 0x11195: return Unicode_Category_LO;
		case 0x11196: return Unicode_Category_LO;
		case 0x11197: return Unicode_Category_LO;
		case 0x11198: return Unicode_Category_LO;
		case 0x11199: return Unicode_Category_LO;
		case 0x1119A: return Unicode_Category_LO;
		case 0x1119B: return Unicode_Category_LO;
		case 0x1119C: return Unicode_Category_LO;
		case 0x1119D: return Unicode_Category_LO;
		case 0x1119E: return Unicode_Category_LO;
		case 0x1119F: return Unicode_Category_LO;
		case 0x111A0: return Unicode_Category_LO;
		case 0x111A1: return Unicode_Category_LO;
		case 0x111A2: return Unicode_Category_LO;
		case 0x111A3: return Unicode_Category_LO;
		case 0x111A4: return Unicode_Category_LO;
		case 0x111A5: return Unicode_Category_LO;
		case 0x111A6: return Unicode_Category_LO;
		case 0x111A7: return Unicode_Category_LO;
		case 0x111A8: return Unicode_Category_LO;
		case 0x111A9: return Unicode_Category_LO;
		case 0x111AA: return Unicode_Category_LO;
		case 0x111AB: return Unicode_Category_LO;
		case 0x111AC: return Unicode_Category_LO;
		case 0x111AD: return Unicode_Category_LO;
		case 0x111AE: return Unicode_Category_LO;
		case 0x111AF: return Unicode_Category_LO;
		case 0x111B0: return Unicode_Category_LO;
		case 0x111B1: return Unicode_Category_LO;
		case 0x111B2: return Unicode_Category_LO;
		case 0x111B3: return Unicode_Category_MC;
		case 0x111B4: return Unicode_Category_MC;
		case 0x111B5: return Unicode_Category_MC;
		case 0x111B6: return Unicode_Category_MN;
		case 0x111B7: return Unicode_Category_MN;
		case 0x111B8: return Unicode_Category_MN;
		case 0x111B9: return Unicode_Category_MN;
		case 0x111BA: return Unicode_Category_MN;
		case 0x111BB: return Unicode_Category_MN;
		case 0x111BC: return Unicode_Category_MN;
		case 0x111BD: return Unicode_Category_MN;
		case 0x111BE: return Unicode_Category_MN;
		case 0x111BF: return Unicode_Category_MC;
		case 0x111C0: return Unicode_Category_MC;
		case 0x111C1: return Unicode_Category_LO;
		case 0x111C2: return Unicode_Category_LO;
		case 0x111C3: return Unicode_Category_LO;
		case 0x111C4: return Unicode_Category_LO;
		case 0x111C5: return Unicode_Category_PO;
		case 0x111C6: return Unicode_Category_PO;
		case 0x111C7: return Unicode_Category_PO;
		case 0x111C8: return Unicode_Category_PO;
		case 0x111C9: return Unicode_Category_MN;
		case 0x111CA: return Unicode_Category_MN;
		case 0x111CB: return Unicode_Category_MN;
		case 0x111CC: return Unicode_Category_MN;
		case 0x111CD: return Unicode_Category_PO;
		case 0x111CE: return Unicode_Category_MC;
		case 0x111CF: return Unicode_Category_MN;
		case 0x111D0: return Unicode_Category_ND;
		case 0x111D1: return Unicode_Category_ND;
		case 0x111D2: return Unicode_Category_ND;
		case 0x111D3: return Unicode_Category_ND;
		case 0x111D4: return Unicode_Category_ND;
		case 0x111D5: return Unicode_Category_ND;
		case 0x111D6: return Unicode_Category_ND;
		case 0x111D7: return Unicode_Category_ND;
		case 0x111D8: return Unicode_Category_ND;
		case 0x111D9: return Unicode_Category_ND;
		case 0x111DA: return Unicode_Category_LO;
		case 0x111DB: return Unicode_Category_PO;
		case 0x111DC: return Unicode_Category_LO;
		case 0x111DD: return Unicode_Category_PO;
		case 0x111DE: return Unicode_Category_PO;
		case 0x111DF: return Unicode_Category_PO;
		case 0x111E1: return Unicode_Category_NO;
		case 0x111E2: return Unicode_Category_NO;
		case 0x111E3: return Unicode_Category_NO;
		case 0x111E4: return Unicode_Category_NO;
		case 0x111E5: return Unicode_Category_NO;
		case 0x111E6: return Unicode_Category_NO;
		case 0x111E7: return Unicode_Category_NO;
		case 0x111E8: return Unicode_Category_NO;
		case 0x111E9: return Unicode_Category_NO;
		case 0x111EA: return Unicode_Category_NO;
		case 0x111EB: return Unicode_Category_NO;
		case 0x111EC: return Unicode_Category_NO;
		case 0x111ED: return Unicode_Category_NO;
		case 0x111EE: return Unicode_Category_NO;
		case 0x111EF: return Unicode_Category_NO;
		case 0x111F0: return Unicode_Category_NO;
		case 0x111F1: return Unicode_Category_NO;
		case 0x111F2: return Unicode_Category_NO;
		case 0x111F3: return Unicode_Category_NO;
		case 0x111F4: return Unicode_Category_NO;
		case 0x11200: return Unicode_Category_LO;
		case 0x11201: return Unicode_Category_LO;
		case 0x11202: return Unicode_Category_LO;
		case 0x11203: return Unicode_Category_LO;
		case 0x11204: return Unicode_Category_LO;
		case 0x11205: return Unicode_Category_LO;
		case 0x11206: return Unicode_Category_LO;
		case 0x11207: return Unicode_Category_LO;
		case 0x11208: return Unicode_Category_LO;
		case 0x11209: return Unicode_Category_LO;
		case 0x1120A: return Unicode_Category_LO;
		case 0x1120B: return Unicode_Category_LO;
		case 0x1120C: return Unicode_Category_LO;
		case 0x1120D: return Unicode_Category_LO;
		case 0x1120E: return Unicode_Category_LO;
		case 0x1120F: return Unicode_Category_LO;
		case 0x11210: return Unicode_Category_LO;
		case 0x11211: return Unicode_Category_LO;
		case 0x11213: return Unicode_Category_LO;
		case 0x11214: return Unicode_Category_LO;
		case 0x11215: return Unicode_Category_LO;
		case 0x11216: return Unicode_Category_LO;
		case 0x11217: return Unicode_Category_LO;
		case 0x11218: return Unicode_Category_LO;
		case 0x11219: return Unicode_Category_LO;
		case 0x1121A: return Unicode_Category_LO;
		case 0x1121B: return Unicode_Category_LO;
		case 0x1121C: return Unicode_Category_LO;
		case 0x1121D: return Unicode_Category_LO;
		case 0x1121E: return Unicode_Category_LO;
		case 0x1121F: return Unicode_Category_LO;
		case 0x11220: return Unicode_Category_LO;
		case 0x11221: return Unicode_Category_LO;
		case 0x11222: return Unicode_Category_LO;
		case 0x11223: return Unicode_Category_LO;
		case 0x11224: return Unicode_Category_LO;
		case 0x11225: return Unicode_Category_LO;
		case 0x11226: return Unicode_Category_LO;
		case 0x11227: return Unicode_Category_LO;
		case 0x11228: return Unicode_Category_LO;
		case 0x11229: return Unicode_Category_LO;
		case 0x1122A: return Unicode_Category_LO;
		case 0x1122B: return Unicode_Category_LO;
		case 0x1122C: return Unicode_Category_MC;
		case 0x1122D: return Unicode_Category_MC;
		case 0x1122E: return Unicode_Category_MC;
		case 0x1122F: return Unicode_Category_MN;
		case 0x11230: return Unicode_Category_MN;
		case 0x11231: return Unicode_Category_MN;
		case 0x11232: return Unicode_Category_MC;
		case 0x11233: return Unicode_Category_MC;
		case 0x11234: return Unicode_Category_MN;
		case 0x11235: return Unicode_Category_MC;
		case 0x11236: return Unicode_Category_MN;
		case 0x11237: return Unicode_Category_MN;
		case 0x11238: return Unicode_Category_PO;
		case 0x11239: return Unicode_Category_PO;
		case 0x1123A: return Unicode_Category_PO;
		case 0x1123B: return Unicode_Category_PO;
		case 0x1123C: return Unicode_Category_PO;
		case 0x1123D: return Unicode_Category_PO;
		case 0x1123E: return Unicode_Category_MN;
		case 0x11280: return Unicode_Category_LO;
		case 0x11281: return Unicode_Category_LO;
		case 0x11282: return Unicode_Category_LO;
		case 0x11283: return Unicode_Category_LO;
		case 0x11284: return Unicode_Category_LO;
		case 0x11285: return Unicode_Category_LO;
		case 0x11286: return Unicode_Category_LO;
		case 0x11288: return Unicode_Category_LO;
		case 0x1128A: return Unicode_Category_LO;
		case 0x1128B: return Unicode_Category_LO;
		case 0x1128C: return Unicode_Category_LO;
		case 0x1128D: return Unicode_Category_LO;
		case 0x1128F: return Unicode_Category_LO;
		case 0x11290: return Unicode_Category_LO;
		case 0x11291: return Unicode_Category_LO;
		case 0x11292: return Unicode_Category_LO;
		case 0x11293: return Unicode_Category_LO;
		case 0x11294: return Unicode_Category_LO;
		case 0x11295: return Unicode_Category_LO;
		case 0x11296: return Unicode_Category_LO;
		case 0x11297: return Unicode_Category_LO;
		case 0x11298: return Unicode_Category_LO;
		case 0x11299: return Unicode_Category_LO;
		case 0x1129A: return Unicode_Category_LO;
		case 0x1129B: return Unicode_Category_LO;
		case 0x1129C: return Unicode_Category_LO;
		case 0x1129D: return Unicode_Category_LO;
		case 0x1129F: return Unicode_Category_LO;
		case 0x112A0: return Unicode_Category_LO;
		case 0x112A1: return Unicode_Category_LO;
		case 0x112A2: return Unicode_Category_LO;
		case 0x112A3: return Unicode_Category_LO;
		case 0x112A4: return Unicode_Category_LO;
		case 0x112A5: return Unicode_Category_LO;
		case 0x112A6: return Unicode_Category_LO;
		case 0x112A7: return Unicode_Category_LO;
		case 0x112A8: return Unicode_Category_LO;
		case 0x112A9: return Unicode_Category_PO;
		case 0x112B0: return Unicode_Category_LO;
		case 0x112B1: return Unicode_Category_LO;
		case 0x112B2: return Unicode_Category_LO;
		case 0x112B3: return Unicode_Category_LO;
		case 0x112B4: return Unicode_Category_LO;
		case 0x112B5: return Unicode_Category_LO;
		case 0x112B6: return Unicode_Category_LO;
		case 0x112B7: return Unicode_Category_LO;
		case 0x112B8: return Unicode_Category_LO;
		case 0x112B9: return Unicode_Category_LO;
		case 0x112BA: return Unicode_Category_LO;
		case 0x112BB: return Unicode_Category_LO;
		case 0x112BC: return Unicode_Category_LO;
		case 0x112BD: return Unicode_Category_LO;
		case 0x112BE: return Unicode_Category_LO;
		case 0x112BF: return Unicode_Category_LO;
		case 0x112C0: return Unicode_Category_LO;
		case 0x112C1: return Unicode_Category_LO;
		case 0x112C2: return Unicode_Category_LO;
		case 0x112C3: return Unicode_Category_LO;
		case 0x112C4: return Unicode_Category_LO;
		case 0x112C5: return Unicode_Category_LO;
		case 0x112C6: return Unicode_Category_LO;
		case 0x112C7: return Unicode_Category_LO;
		case 0x112C8: return Unicode_Category_LO;
		case 0x112C9: return Unicode_Category_LO;
		case 0x112CA: return Unicode_Category_LO;
		case 0x112CB: return Unicode_Category_LO;
		case 0x112CC: return Unicode_Category_LO;
		case 0x112CD: return Unicode_Category_LO;
		case 0x112CE: return Unicode_Category_LO;
		case 0x112CF: return Unicode_Category_LO;
		case 0x112D0: return Unicode_Category_LO;
		case 0x112D1: return Unicode_Category_LO;
		case 0x112D2: return Unicode_Category_LO;
		case 0x112D3: return Unicode_Category_LO;
		case 0x112D4: return Unicode_Category_LO;
		case 0x112D5: return Unicode_Category_LO;
		case 0x112D6: return Unicode_Category_LO;
		case 0x112D7: return Unicode_Category_LO;
		case 0x112D8: return Unicode_Category_LO;
		case 0x112D9: return Unicode_Category_LO;
		case 0x112DA: return Unicode_Category_LO;
		case 0x112DB: return Unicode_Category_LO;
		case 0x112DC: return Unicode_Category_LO;
		case 0x112DD: return Unicode_Category_LO;
		case 0x112DE: return Unicode_Category_LO;
		case 0x112DF: return Unicode_Category_MN;
		case 0x112E0: return Unicode_Category_MC;
		case 0x112E1: return Unicode_Category_MC;
		case 0x112E2: return Unicode_Category_MC;
		case 0x112E3: return Unicode_Category_MN;
		case 0x112E4: return Unicode_Category_MN;
		case 0x112E5: return Unicode_Category_MN;
		case 0x112E6: return Unicode_Category_MN;
		case 0x112E7: return Unicode_Category_MN;
		case 0x112E8: return Unicode_Category_MN;
		case 0x112E9: return Unicode_Category_MN;
		case 0x112EA: return Unicode_Category_MN;
		case 0x112F0: return Unicode_Category_ND;
		case 0x112F1: return Unicode_Category_ND;
		case 0x112F2: return Unicode_Category_ND;
		case 0x112F3: return Unicode_Category_ND;
		case 0x112F4: return Unicode_Category_ND;
		case 0x112F5: return Unicode_Category_ND;
		case 0x112F6: return Unicode_Category_ND;
		case 0x112F7: return Unicode_Category_ND;
		case 0x112F8: return Unicode_Category_ND;
		case 0x112F9: return Unicode_Category_ND;
		case 0x11300: return Unicode_Category_MN;
		case 0x11301: return Unicode_Category_MN;
		case 0x11302: return Unicode_Category_MC;
		case 0x11303: return Unicode_Category_MC;
		case 0x11305: return Unicode_Category_LO;
		case 0x11306: return Unicode_Category_LO;
		case 0x11307: return Unicode_Category_LO;
		case 0x11308: return Unicode_Category_LO;
		case 0x11309: return Unicode_Category_LO;
		case 0x1130A: return Unicode_Category_LO;
		case 0x1130B: return Unicode_Category_LO;
		case 0x1130C: return Unicode_Category_LO;
		case 0x1130F: return Unicode_Category_LO;
		case 0x11310: return Unicode_Category_LO;
		case 0x11313: return Unicode_Category_LO;
		case 0x11314: return Unicode_Category_LO;
		case 0x11315: return Unicode_Category_LO;
		case 0x11316: return Unicode_Category_LO;
		case 0x11317: return Unicode_Category_LO;
		case 0x11318: return Unicode_Category_LO;
		case 0x11319: return Unicode_Category_LO;
		case 0x1131A: return Unicode_Category_LO;
		case 0x1131B: return Unicode_Category_LO;
		case 0x1131C: return Unicode_Category_LO;
		case 0x1131D: return Unicode_Category_LO;
		case 0x1131E: return Unicode_Category_LO;
		case 0x1131F: return Unicode_Category_LO;
		case 0x11320: return Unicode_Category_LO;
		case 0x11321: return Unicode_Category_LO;
		case 0x11322: return Unicode_Category_LO;
		case 0x11323: return Unicode_Category_LO;
		case 0x11324: return Unicode_Category_LO;
		case 0x11325: return Unicode_Category_LO;
		case 0x11326: return Unicode_Category_LO;
		case 0x11327: return Unicode_Category_LO;
		case 0x11328: return Unicode_Category_LO;
		case 0x1132A: return Unicode_Category_LO;
		case 0x1132B: return Unicode_Category_LO;
		case 0x1132C: return Unicode_Category_LO;
		case 0x1132D: return Unicode_Category_LO;
		case 0x1132E: return Unicode_Category_LO;
		case 0x1132F: return Unicode_Category_LO;
		case 0x11330: return Unicode_Category_LO;
		case 0x11332: return Unicode_Category_LO;
		case 0x11333: return Unicode_Category_LO;
		case 0x11335: return Unicode_Category_LO;
		case 0x11336: return Unicode_Category_LO;
		case 0x11337: return Unicode_Category_LO;
		case 0x11338: return Unicode_Category_LO;
		case 0x11339: return Unicode_Category_LO;
		case 0x1133B: return Unicode_Category_MN;
		case 0x1133C: return Unicode_Category_MN;
		case 0x1133D: return Unicode_Category_LO;
		case 0x1133E: return Unicode_Category_MC;
		case 0x1133F: return Unicode_Category_MC;
		case 0x11340: return Unicode_Category_MN;
		case 0x11341: return Unicode_Category_MC;
		case 0x11342: return Unicode_Category_MC;
		case 0x11343: return Unicode_Category_MC;
		case 0x11344: return Unicode_Category_MC;
		case 0x11347: return Unicode_Category_MC;
		case 0x11348: return Unicode_Category_MC;
		case 0x1134B: return Unicode_Category_MC;
		case 0x1134C: return Unicode_Category_MC;
		case 0x1134D: return Unicode_Category_MC;
		case 0x11350: return Unicode_Category_LO;
		case 0x11357: return Unicode_Category_MC;
		case 0x1135D: return Unicode_Category_LO;
		case 0x1135E: return Unicode_Category_LO;
		case 0x1135F: return Unicode_Category_LO;
		case 0x11360: return Unicode_Category_LO;
		case 0x11361: return Unicode_Category_LO;
		case 0x11362: return Unicode_Category_MC;
		case 0x11363: return Unicode_Category_MC;
		case 0x11366: return Unicode_Category_MN;
		case 0x11367: return Unicode_Category_MN;
		case 0x11368: return Unicode_Category_MN;
		case 0x11369: return Unicode_Category_MN;
		case 0x1136A: return Unicode_Category_MN;
		case 0x1136B: return Unicode_Category_MN;
		case 0x1136C: return Unicode_Category_MN;
		case 0x11370: return Unicode_Category_MN;
		case 0x11371: return Unicode_Category_MN;
		case 0x11372: return Unicode_Category_MN;
		case 0x11373: return Unicode_Category_MN;
		case 0x11374: return Unicode_Category_MN;
		case 0x11400: return Unicode_Category_LO;
		case 0x11401: return Unicode_Category_LO;
		case 0x11402: return Unicode_Category_LO;
		case 0x11403: return Unicode_Category_LO;
		case 0x11404: return Unicode_Category_LO;
		case 0x11405: return Unicode_Category_LO;
		case 0x11406: return Unicode_Category_LO;
		case 0x11407: return Unicode_Category_LO;
		case 0x11408: return Unicode_Category_LO;
		case 0x11409: return Unicode_Category_LO;
		case 0x1140A: return Unicode_Category_LO;
		case 0x1140B: return Unicode_Category_LO;
		case 0x1140C: return Unicode_Category_LO;
		case 0x1140D: return Unicode_Category_LO;
		case 0x1140E: return Unicode_Category_LO;
		case 0x1140F: return Unicode_Category_LO;
		case 0x11410: return Unicode_Category_LO;
		case 0x11411: return Unicode_Category_LO;
		case 0x11412: return Unicode_Category_LO;
		case 0x11413: return Unicode_Category_LO;
		case 0x11414: return Unicode_Category_LO;
		case 0x11415: return Unicode_Category_LO;
		case 0x11416: return Unicode_Category_LO;
		case 0x11417: return Unicode_Category_LO;
		case 0x11418: return Unicode_Category_LO;
		case 0x11419: return Unicode_Category_LO;
		case 0x1141A: return Unicode_Category_LO;
		case 0x1141B: return Unicode_Category_LO;
		case 0x1141C: return Unicode_Category_LO;
		case 0x1141D: return Unicode_Category_LO;
		case 0x1141E: return Unicode_Category_LO;
		case 0x1141F: return Unicode_Category_LO;
		case 0x11420: return Unicode_Category_LO;
		case 0x11421: return Unicode_Category_LO;
		case 0x11422: return Unicode_Category_LO;
		case 0x11423: return Unicode_Category_LO;
		case 0x11424: return Unicode_Category_LO;
		case 0x11425: return Unicode_Category_LO;
		case 0x11426: return Unicode_Category_LO;
		case 0x11427: return Unicode_Category_LO;
		case 0x11428: return Unicode_Category_LO;
		case 0x11429: return Unicode_Category_LO;
		case 0x1142A: return Unicode_Category_LO;
		case 0x1142B: return Unicode_Category_LO;
		case 0x1142C: return Unicode_Category_LO;
		case 0x1142D: return Unicode_Category_LO;
		case 0x1142E: return Unicode_Category_LO;
		case 0x1142F: return Unicode_Category_LO;
		case 0x11430: return Unicode_Category_LO;
		case 0x11431: return Unicode_Category_LO;
		case 0x11432: return Unicode_Category_LO;
		case 0x11433: return Unicode_Category_LO;
		case 0x11434: return Unicode_Category_LO;
		case 0x11435: return Unicode_Category_MC;
		case 0x11436: return Unicode_Category_MC;
		case 0x11437: return Unicode_Category_MC;
		case 0x11438: return Unicode_Category_MN;
		case 0x11439: return Unicode_Category_MN;
		case 0x1143A: return Unicode_Category_MN;
		case 0x1143B: return Unicode_Category_MN;
		case 0x1143C: return Unicode_Category_MN;
		case 0x1143D: return Unicode_Category_MN;
		case 0x1143E: return Unicode_Category_MN;
		case 0x1143F: return Unicode_Category_MN;
		case 0x11440: return Unicode_Category_MC;
		case 0x11441: return Unicode_Category_MC;
		case 0x11442: return Unicode_Category_MN;
		case 0x11443: return Unicode_Category_MN;
		case 0x11444: return Unicode_Category_MN;
		case 0x11445: return Unicode_Category_MC;
		case 0x11446: return Unicode_Category_MN;
		case 0x11447: return Unicode_Category_LO;
		case 0x11448: return Unicode_Category_LO;
		case 0x11449: return Unicode_Category_LO;
		case 0x1144A: return Unicode_Category_LO;
		case 0x1144B: return Unicode_Category_PO;
		case 0x1144C: return Unicode_Category_PO;
		case 0x1144D: return Unicode_Category_PO;
		case 0x1144E: return Unicode_Category_PO;
		case 0x1144F: return Unicode_Category_PO;
		case 0x11450: return Unicode_Category_ND;
		case 0x11451: return Unicode_Category_ND;
		case 0x11452: return Unicode_Category_ND;
		case 0x11453: return Unicode_Category_ND;
		case 0x11454: return Unicode_Category_ND;
		case 0x11455: return Unicode_Category_ND;
		case 0x11456: return Unicode_Category_ND;
		case 0x11457: return Unicode_Category_ND;
		case 0x11458: return Unicode_Category_ND;
		case 0x11459: return Unicode_Category_ND;
		case 0x1145A: return Unicode_Category_PO;
		case 0x1145B: return Unicode_Category_PO;
		case 0x1145D: return Unicode_Category_PO;
		case 0x1145E: return Unicode_Category_MN;
		case 0x1145F: return Unicode_Category_LO;
		case 0x11460: return Unicode_Category_LO;
		case 0x11461: return Unicode_Category_LO;
		case 0x11480: return Unicode_Category_LO;
		case 0x11481: return Unicode_Category_LO;
		case 0x11482: return Unicode_Category_LO;
		case 0x11483: return Unicode_Category_LO;
		case 0x11484: return Unicode_Category_LO;
		case 0x11485: return Unicode_Category_LO;
		case 0x11486: return Unicode_Category_LO;
		case 0x11487: return Unicode_Category_LO;
		case 0x11488: return Unicode_Category_LO;
		case 0x11489: return Unicode_Category_LO;
		case 0x1148A: return Unicode_Category_LO;
		case 0x1148B: return Unicode_Category_LO;
		case 0x1148C: return Unicode_Category_LO;
		case 0x1148D: return Unicode_Category_LO;
		case 0x1148E: return Unicode_Category_LO;
		case 0x1148F: return Unicode_Category_LO;
		case 0x11490: return Unicode_Category_LO;
		case 0x11491: return Unicode_Category_LO;
		case 0x11492: return Unicode_Category_LO;
		case 0x11493: return Unicode_Category_LO;
		case 0x11494: return Unicode_Category_LO;
		case 0x11495: return Unicode_Category_LO;
		case 0x11496: return Unicode_Category_LO;
		case 0x11497: return Unicode_Category_LO;
		case 0x11498: return Unicode_Category_LO;
		case 0x11499: return Unicode_Category_LO;
		case 0x1149A: return Unicode_Category_LO;
		case 0x1149B: return Unicode_Category_LO;
		case 0x1149C: return Unicode_Category_LO;
		case 0x1149D: return Unicode_Category_LO;
		case 0x1149E: return Unicode_Category_LO;
		case 0x1149F: return Unicode_Category_LO;
		case 0x114A0: return Unicode_Category_LO;
		case 0x114A1: return Unicode_Category_LO;
		case 0x114A2: return Unicode_Category_LO;
		case 0x114A3: return Unicode_Category_LO;
		case 0x114A4: return Unicode_Category_LO;
		case 0x114A5: return Unicode_Category_LO;
		case 0x114A6: return Unicode_Category_LO;
		case 0x114A7: return Unicode_Category_LO;
		case 0x114A8: return Unicode_Category_LO;
		case 0x114A9: return Unicode_Category_LO;
		case 0x114AA: return Unicode_Category_LO;
		case 0x114AB: return Unicode_Category_LO;
		case 0x114AC: return Unicode_Category_LO;
		case 0x114AD: return Unicode_Category_LO;
		case 0x114AE: return Unicode_Category_LO;
		case 0x114AF: return Unicode_Category_LO;
		case 0x114B0: return Unicode_Category_MC;
		case 0x114B1: return Unicode_Category_MC;
		case 0x114B2: return Unicode_Category_MC;
		case 0x114B3: return Unicode_Category_MN;
		case 0x114B4: return Unicode_Category_MN;
		case 0x114B5: return Unicode_Category_MN;
		case 0x114B6: return Unicode_Category_MN;
		case 0x114B7: return Unicode_Category_MN;
		case 0x114B8: return Unicode_Category_MN;
		case 0x114B9: return Unicode_Category_MC;
		case 0x114BA: return Unicode_Category_MN;
		case 0x114BB: return Unicode_Category_MC;
		case 0x114BC: return Unicode_Category_MC;
		case 0x114BD: return Unicode_Category_MC;
		case 0x114BE: return Unicode_Category_MC;
		case 0x114BF: return Unicode_Category_MN;
		case 0x114C0: return Unicode_Category_MN;
		case 0x114C1: return Unicode_Category_MC;
		case 0x114C2: return Unicode_Category_MN;
		case 0x114C3: return Unicode_Category_MN;
		case 0x114C4: return Unicode_Category_LO;
		case 0x114C5: return Unicode_Category_LO;
		case 0x114C6: return Unicode_Category_PO;
		case 0x114C7: return Unicode_Category_LO;
		case 0x114D0: return Unicode_Category_ND;
		case 0x114D1: return Unicode_Category_ND;
		case 0x114D2: return Unicode_Category_ND;
		case 0x114D3: return Unicode_Category_ND;
		case 0x114D4: return Unicode_Category_ND;
		case 0x114D5: return Unicode_Category_ND;
		case 0x114D6: return Unicode_Category_ND;
		case 0x114D7: return Unicode_Category_ND;
		case 0x114D8: return Unicode_Category_ND;
		case 0x114D9: return Unicode_Category_ND;
		case 0x11580: return Unicode_Category_LO;
		case 0x11581: return Unicode_Category_LO;
		case 0x11582: return Unicode_Category_LO;
		case 0x11583: return Unicode_Category_LO;
		case 0x11584: return Unicode_Category_LO;
		case 0x11585: return Unicode_Category_LO;
		case 0x11586: return Unicode_Category_LO;
		case 0x11587: return Unicode_Category_LO;
		case 0x11588: return Unicode_Category_LO;
		case 0x11589: return Unicode_Category_LO;
		case 0x1158A: return Unicode_Category_LO;
		case 0x1158B: return Unicode_Category_LO;
		case 0x1158C: return Unicode_Category_LO;
		case 0x1158D: return Unicode_Category_LO;
		case 0x1158E: return Unicode_Category_LO;
		case 0x1158F: return Unicode_Category_LO;
		case 0x11590: return Unicode_Category_LO;
		case 0x11591: return Unicode_Category_LO;
		case 0x11592: return Unicode_Category_LO;
		case 0x11593: return Unicode_Category_LO;
		case 0x11594: return Unicode_Category_LO;
		case 0x11595: return Unicode_Category_LO;
		case 0x11596: return Unicode_Category_LO;
		case 0x11597: return Unicode_Category_LO;
		case 0x11598: return Unicode_Category_LO;
		case 0x11599: return Unicode_Category_LO;
		case 0x1159A: return Unicode_Category_LO;
		case 0x1159B: return Unicode_Category_LO;
		case 0x1159C: return Unicode_Category_LO;
		case 0x1159D: return Unicode_Category_LO;
		case 0x1159E: return Unicode_Category_LO;
		case 0x1159F: return Unicode_Category_LO;
		case 0x115A0: return Unicode_Category_LO;
		case 0x115A1: return Unicode_Category_LO;
		case 0x115A2: return Unicode_Category_LO;
		case 0x115A3: return Unicode_Category_LO;
		case 0x115A4: return Unicode_Category_LO;
		case 0x115A5: return Unicode_Category_LO;
		case 0x115A6: return Unicode_Category_LO;
		case 0x115A7: return Unicode_Category_LO;
		case 0x115A8: return Unicode_Category_LO;
		case 0x115A9: return Unicode_Category_LO;
		case 0x115AA: return Unicode_Category_LO;
		case 0x115AB: return Unicode_Category_LO;
		case 0x115AC: return Unicode_Category_LO;
		case 0x115AD: return Unicode_Category_LO;
		case 0x115AE: return Unicode_Category_LO;
		case 0x115AF: return Unicode_Category_MC;
		case 0x115B0: return Unicode_Category_MC;
		case 0x115B1: return Unicode_Category_MC;
		case 0x115B2: return Unicode_Category_MN;
		case 0x115B3: return Unicode_Category_MN;
		case 0x115B4: return Unicode_Category_MN;
		case 0x115B5: return Unicode_Category_MN;
		case 0x115B8: return Unicode_Category_MC;
		case 0x115B9: return Unicode_Category_MC;
		case 0x115BA: return Unicode_Category_MC;
		case 0x115BB: return Unicode_Category_MC;
		case 0x115BC: return Unicode_Category_MN;
		case 0x115BD: return Unicode_Category_MN;
		case 0x115BE: return Unicode_Category_MC;
		case 0x115BF: return Unicode_Category_MN;
		case 0x115C0: return Unicode_Category_MN;
		case 0x115C1: return Unicode_Category_PO;
		case 0x115C2: return Unicode_Category_PO;
		case 0x115C3: return Unicode_Category_PO;
		case 0x115C4: return Unicode_Category_PO;
		case 0x115C5: return Unicode_Category_PO;
		case 0x115C6: return Unicode_Category_PO;
		case 0x115C7: return Unicode_Category_PO;
		case 0x115C8: return Unicode_Category_PO;
		case 0x115C9: return Unicode_Category_PO;
		case 0x115CA: return Unicode_Category_PO;
		case 0x115CB: return Unicode_Category_PO;
		case 0x115CC: return Unicode_Category_PO;
		case 0x115CD: return Unicode_Category_PO;
		case 0x115CE: return Unicode_Category_PO;
		case 0x115CF: return Unicode_Category_PO;
		case 0x115D0: return Unicode_Category_PO;
		case 0x115D1: return Unicode_Category_PO;
		case 0x115D2: return Unicode_Category_PO;
		case 0x115D3: return Unicode_Category_PO;
		case 0x115D4: return Unicode_Category_PO;
		case 0x115D5: return Unicode_Category_PO;
		case 0x115D6: return Unicode_Category_PO;
		case 0x115D7: return Unicode_Category_PO;
		case 0x115D8: return Unicode_Category_LO;
		case 0x115D9: return Unicode_Category_LO;
		case 0x115DA: return Unicode_Category_LO;
		case 0x115DB: return Unicode_Category_LO;
		case 0x115DC: return Unicode_Category_MN;
		case 0x115DD: return Unicode_Category_MN;
		case 0x11600: return Unicode_Category_LO;
		case 0x11601: return Unicode_Category_LO;
		case 0x11602: return Unicode_Category_LO;
		case 0x11603: return Unicode_Category_LO;
		case 0x11604: return Unicode_Category_LO;
		case 0x11605: return Unicode_Category_LO;
		case 0x11606: return Unicode_Category_LO;
		case 0x11607: return Unicode_Category_LO;
		case 0x11608: return Unicode_Category_LO;
		case 0x11609: return Unicode_Category_LO;
		case 0x1160A: return Unicode_Category_LO;
		case 0x1160B: return Unicode_Category_LO;
		case 0x1160C: return Unicode_Category_LO;
		case 0x1160D: return Unicode_Category_LO;
		case 0x1160E: return Unicode_Category_LO;
		case 0x1160F: return Unicode_Category_LO;
		case 0x11610: return Unicode_Category_LO;
		case 0x11611: return Unicode_Category_LO;
		case 0x11612: return Unicode_Category_LO;
		case 0x11613: return Unicode_Category_LO;
		case 0x11614: return Unicode_Category_LO;
		case 0x11615: return Unicode_Category_LO;
		case 0x11616: return Unicode_Category_LO;
		case 0x11617: return Unicode_Category_LO;
		case 0x11618: return Unicode_Category_LO;
		case 0x11619: return Unicode_Category_LO;
		case 0x1161A: return Unicode_Category_LO;
		case 0x1161B: return Unicode_Category_LO;
		case 0x1161C: return Unicode_Category_LO;
		case 0x1161D: return Unicode_Category_LO;
		case 0x1161E: return Unicode_Category_LO;
		case 0x1161F: return Unicode_Category_LO;
		case 0x11620: return Unicode_Category_LO;
		case 0x11621: return Unicode_Category_LO;
		case 0x11622: return Unicode_Category_LO;
		case 0x11623: return Unicode_Category_LO;
		case 0x11624: return Unicode_Category_LO;
		case 0x11625: return Unicode_Category_LO;
		case 0x11626: return Unicode_Category_LO;
		case 0x11627: return Unicode_Category_LO;
		case 0x11628: return Unicode_Category_LO;
		case 0x11629: return Unicode_Category_LO;
		case 0x1162A: return Unicode_Category_LO;
		case 0x1162B: return Unicode_Category_LO;
		case 0x1162C: return Unicode_Category_LO;
		case 0x1162D: return Unicode_Category_LO;
		case 0x1162E: return Unicode_Category_LO;
		case 0x1162F: return Unicode_Category_LO;
		case 0x11630: return Unicode_Category_MC;
		case 0x11631: return Unicode_Category_MC;
		case 0x11632: return Unicode_Category_MC;
		case 0x11633: return Unicode_Category_MN;
		case 0x11634: return Unicode_Category_MN;
		case 0x11635: return Unicode_Category_MN;
		case 0x11636: return Unicode_Category_MN;
		case 0x11637: return Unicode_Category_MN;
		case 0x11638: return Unicode_Category_MN;
		case 0x11639: return Unicode_Category_MN;
		case 0x1163A: return Unicode_Category_MN;
		case 0x1163B: return Unicode_Category_MC;
		case 0x1163C: return Unicode_Category_MC;
		case 0x1163D: return Unicode_Category_MN;
		case 0x1163E: return Unicode_Category_MC;
		case 0x1163F: return Unicode_Category_MN;
		case 0x11640: return Unicode_Category_MN;
		case 0x11641: return Unicode_Category_PO;
		case 0x11642: return Unicode_Category_PO;
		case 0x11643: return Unicode_Category_PO;
		case 0x11644: return Unicode_Category_LO;
		case 0x11650: return Unicode_Category_ND;
		case 0x11651: return Unicode_Category_ND;
		case 0x11652: return Unicode_Category_ND;
		case 0x11653: return Unicode_Category_ND;
		case 0x11654: return Unicode_Category_ND;
		case 0x11655: return Unicode_Category_ND;
		case 0x11656: return Unicode_Category_ND;
		case 0x11657: return Unicode_Category_ND;
		case 0x11658: return Unicode_Category_ND;
		case 0x11659: return Unicode_Category_ND;
		case 0x11660: return Unicode_Category_PO;
		case 0x11661: return Unicode_Category_PO;
		case 0x11662: return Unicode_Category_PO;
		case 0x11663: return Unicode_Category_PO;
		case 0x11664: return Unicode_Category_PO;
		case 0x11665: return Unicode_Category_PO;
		case 0x11666: return Unicode_Category_PO;
		case 0x11667: return Unicode_Category_PO;
		case 0x11668: return Unicode_Category_PO;
		case 0x11669: return Unicode_Category_PO;
		case 0x1166A: return Unicode_Category_PO;
		case 0x1166B: return Unicode_Category_PO;
		case 0x1166C: return Unicode_Category_PO;
		case 0x11680: return Unicode_Category_LO;
		case 0x11681: return Unicode_Category_LO;
		case 0x11682: return Unicode_Category_LO;
		case 0x11683: return Unicode_Category_LO;
		case 0x11684: return Unicode_Category_LO;
		case 0x11685: return Unicode_Category_LO;
		case 0x11686: return Unicode_Category_LO;
		case 0x11687: return Unicode_Category_LO;
		case 0x11688: return Unicode_Category_LO;
		case 0x11689: return Unicode_Category_LO;
		case 0x1168A: return Unicode_Category_LO;
		case 0x1168B: return Unicode_Category_LO;
		case 0x1168C: return Unicode_Category_LO;
		case 0x1168D: return Unicode_Category_LO;
		case 0x1168E: return Unicode_Category_LO;
		case 0x1168F: return Unicode_Category_LO;
		case 0x11690: return Unicode_Category_LO;
		case 0x11691: return Unicode_Category_LO;
		case 0x11692: return Unicode_Category_LO;
		case 0x11693: return Unicode_Category_LO;
		case 0x11694: return Unicode_Category_LO;
		case 0x11695: return Unicode_Category_LO;
		case 0x11696: return Unicode_Category_LO;
		case 0x11697: return Unicode_Category_LO;
		case 0x11698: return Unicode_Category_LO;
		case 0x11699: return Unicode_Category_LO;
		case 0x1169A: return Unicode_Category_LO;
		case 0x1169B: return Unicode_Category_LO;
		case 0x1169C: return Unicode_Category_LO;
		case 0x1169D: return Unicode_Category_LO;
		case 0x1169E: return Unicode_Category_LO;
		case 0x1169F: return Unicode_Category_LO;
		case 0x116A0: return Unicode_Category_LO;
		case 0x116A1: return Unicode_Category_LO;
		case 0x116A2: return Unicode_Category_LO;
		case 0x116A3: return Unicode_Category_LO;
		case 0x116A4: return Unicode_Category_LO;
		case 0x116A5: return Unicode_Category_LO;
		case 0x116A6: return Unicode_Category_LO;
		case 0x116A7: return Unicode_Category_LO;
		case 0x116A8: return Unicode_Category_LO;
		case 0x116A9: return Unicode_Category_LO;
		case 0x116AA: return Unicode_Category_LO;
		case 0x116AB: return Unicode_Category_MN;
		case 0x116AC: return Unicode_Category_MC;
		case 0x116AD: return Unicode_Category_MN;
		case 0x116AE: return Unicode_Category_MC;
		case 0x116AF: return Unicode_Category_MC;
		case 0x116B0: return Unicode_Category_MN;
		case 0x116B1: return Unicode_Category_MN;
		case 0x116B2: return Unicode_Category_MN;
		case 0x116B3: return Unicode_Category_MN;
		case 0x116B4: return Unicode_Category_MN;
		case 0x116B5: return Unicode_Category_MN;
		case 0x116B6: return Unicode_Category_MC;
		case 0x116B7: return Unicode_Category_MN;
		case 0x116B8: return Unicode_Category_LO;
		case 0x116C0: return Unicode_Category_ND;
		case 0x116C1: return Unicode_Category_ND;
		case 0x116C2: return Unicode_Category_ND;
		case 0x116C3: return Unicode_Category_ND;
		case 0x116C4: return Unicode_Category_ND;
		case 0x116C5: return Unicode_Category_ND;
		case 0x116C6: return Unicode_Category_ND;
		case 0x116C7: return Unicode_Category_ND;
		case 0x116C8: return Unicode_Category_ND;
		case 0x116C9: return Unicode_Category_ND;
		case 0x11700: return Unicode_Category_LO;
		case 0x11701: return Unicode_Category_LO;
		case 0x11702: return Unicode_Category_LO;
		case 0x11703: return Unicode_Category_LO;
		case 0x11704: return Unicode_Category_LO;
		case 0x11705: return Unicode_Category_LO;
		case 0x11706: return Unicode_Category_LO;
		case 0x11707: return Unicode_Category_LO;
		case 0x11708: return Unicode_Category_LO;
		case 0x11709: return Unicode_Category_LO;
		case 0x1170A: return Unicode_Category_LO;
		case 0x1170B: return Unicode_Category_LO;
		case 0x1170C: return Unicode_Category_LO;
		case 0x1170D: return Unicode_Category_LO;
		case 0x1170E: return Unicode_Category_LO;
		case 0x1170F: return Unicode_Category_LO;
		case 0x11710: return Unicode_Category_LO;
		case 0x11711: return Unicode_Category_LO;
		case 0x11712: return Unicode_Category_LO;
		case 0x11713: return Unicode_Category_LO;
		case 0x11714: return Unicode_Category_LO;
		case 0x11715: return Unicode_Category_LO;
		case 0x11716: return Unicode_Category_LO;
		case 0x11717: return Unicode_Category_LO;
		case 0x11718: return Unicode_Category_LO;
		case 0x11719: return Unicode_Category_LO;
		case 0x1171A: return Unicode_Category_LO;
		case 0x1171D: return Unicode_Category_MN;
		case 0x1171E: return Unicode_Category_MN;
		case 0x1171F: return Unicode_Category_MN;
		case 0x11720: return Unicode_Category_MC;
		case 0x11721: return Unicode_Category_MC;
		case 0x11722: return Unicode_Category_MN;
		case 0x11723: return Unicode_Category_MN;
		case 0x11724: return Unicode_Category_MN;
		case 0x11725: return Unicode_Category_MN;
		case 0x11726: return Unicode_Category_MC;
		case 0x11727: return Unicode_Category_MN;
		case 0x11728: return Unicode_Category_MN;
		case 0x11729: return Unicode_Category_MN;
		case 0x1172A: return Unicode_Category_MN;
		case 0x1172B: return Unicode_Category_MN;
		case 0x11730: return Unicode_Category_ND;
		case 0x11731: return Unicode_Category_ND;
		case 0x11732: return Unicode_Category_ND;
		case 0x11733: return Unicode_Category_ND;
		case 0x11734: return Unicode_Category_ND;
		case 0x11735: return Unicode_Category_ND;
		case 0x11736: return Unicode_Category_ND;
		case 0x11737: return Unicode_Category_ND;
		case 0x11738: return Unicode_Category_ND;
		case 0x11739: return Unicode_Category_ND;
		case 0x1173A: return Unicode_Category_NO;
		case 0x1173B: return Unicode_Category_NO;
		case 0x1173C: return Unicode_Category_PO;
		case 0x1173D: return Unicode_Category_PO;
		case 0x1173E: return Unicode_Category_PO;
		case 0x1173F: return Unicode_Category_SO;
		case 0x11800: return Unicode_Category_LO;
		case 0x11801: return Unicode_Category_LO;
		case 0x11802: return Unicode_Category_LO;
		case 0x11803: return Unicode_Category_LO;
		case 0x11804: return Unicode_Category_LO;
		case 0x11805: return Unicode_Category_LO;
		case 0x11806: return Unicode_Category_LO;
		case 0x11807: return Unicode_Category_LO;
		case 0x11808: return Unicode_Category_LO;
		case 0x11809: return Unicode_Category_LO;
		case 0x1180A: return Unicode_Category_LO;
		case 0x1180B: return Unicode_Category_LO;
		case 0x1180C: return Unicode_Category_LO;
		case 0x1180D: return Unicode_Category_LO;
		case 0x1180E: return Unicode_Category_LO;
		case 0x1180F: return Unicode_Category_LO;
		case 0x11810: return Unicode_Category_LO;
		case 0x11811: return Unicode_Category_LO;
		case 0x11812: return Unicode_Category_LO;
		case 0x11813: return Unicode_Category_LO;
		case 0x11814: return Unicode_Category_LO;
		case 0x11815: return Unicode_Category_LO;
		case 0x11816: return Unicode_Category_LO;
		case 0x11817: return Unicode_Category_LO;
		case 0x11818: return Unicode_Category_LO;
		case 0x11819: return Unicode_Category_LO;
		case 0x1181A: return Unicode_Category_LO;
		case 0x1181B: return Unicode_Category_LO;
		case 0x1181C: return Unicode_Category_LO;
		case 0x1181D: return Unicode_Category_LO;
		case 0x1181E: return Unicode_Category_LO;
		case 0x1181F: return Unicode_Category_LO;
		case 0x11820: return Unicode_Category_LO;
		case 0x11821: return Unicode_Category_LO;
		case 0x11822: return Unicode_Category_LO;
		case 0x11823: return Unicode_Category_LO;
		case 0x11824: return Unicode_Category_LO;
		case 0x11825: return Unicode_Category_LO;
		case 0x11826: return Unicode_Category_LO;
		case 0x11827: return Unicode_Category_LO;
		case 0x11828: return Unicode_Category_LO;
		case 0x11829: return Unicode_Category_LO;
		case 0x1182A: return Unicode_Category_LO;
		case 0x1182B: return Unicode_Category_LO;
		case 0x1182C: return Unicode_Category_MC;
		case 0x1182D: return Unicode_Category_MC;
		case 0x1182E: return Unicode_Category_MC;
		case 0x1182F: return Unicode_Category_MN;
		case 0x11830: return Unicode_Category_MN;
		case 0x11831: return Unicode_Category_MN;
		case 0x11832: return Unicode_Category_MN;
		case 0x11833: return Unicode_Category_MN;
		case 0x11834: return Unicode_Category_MN;
		case 0x11835: return Unicode_Category_MN;
		case 0x11836: return Unicode_Category_MN;
		case 0x11837: return Unicode_Category_MN;
		case 0x11838: return Unicode_Category_MC;
		case 0x11839: return Unicode_Category_MN;
		case 0x1183A: return Unicode_Category_MN;
		case 0x1183B: return Unicode_Category_PO;
		case 0x118A0: return Unicode_Category_LU;
		case 0x118A1: return Unicode_Category_LU;
		case 0x118A2: return Unicode_Category_LU;
		case 0x118A3: return Unicode_Category_LU;
		case 0x118A4: return Unicode_Category_LU;
		case 0x118A5: return Unicode_Category_LU;
		case 0x118A6: return Unicode_Category_LU;
		case 0x118A7: return Unicode_Category_LU;
		case 0x118A8: return Unicode_Category_LU;
		case 0x118A9: return Unicode_Category_LU;
		case 0x118AA: return Unicode_Category_LU;
		case 0x118AB: return Unicode_Category_LU;
		case 0x118AC: return Unicode_Category_LU;
		case 0x118AD: return Unicode_Category_LU;
		case 0x118AE: return Unicode_Category_LU;
		case 0x118AF: return Unicode_Category_LU;
		case 0x118B0: return Unicode_Category_LU;
		case 0x118B1: return Unicode_Category_LU;
		case 0x118B2: return Unicode_Category_LU;
		case 0x118B3: return Unicode_Category_LU;
		case 0x118B4: return Unicode_Category_LU;
		case 0x118B5: return Unicode_Category_LU;
		case 0x118B6: return Unicode_Category_LU;
		case 0x118B7: return Unicode_Category_LU;
		case 0x118B8: return Unicode_Category_LU;
		case 0x118B9: return Unicode_Category_LU;
		case 0x118BA: return Unicode_Category_LU;
		case 0x118BB: return Unicode_Category_LU;
		case 0x118BC: return Unicode_Category_LU;
		case 0x118BD: return Unicode_Category_LU;
		case 0x118BE: return Unicode_Category_LU;
		case 0x118BF: return Unicode_Category_LU;
		case 0x118C0: return Unicode_Category_LL;
		case 0x118C1: return Unicode_Category_LL;
		case 0x118C2: return Unicode_Category_LL;
		case 0x118C3: return Unicode_Category_LL;
		case 0x118C4: return Unicode_Category_LL;
		case 0x118C5: return Unicode_Category_LL;
		case 0x118C6: return Unicode_Category_LL;
		case 0x118C7: return Unicode_Category_LL;
		case 0x118C8: return Unicode_Category_LL;
		case 0x118C9: return Unicode_Category_LL;
		case 0x118CA: return Unicode_Category_LL;
		case 0x118CB: return Unicode_Category_LL;
		case 0x118CC: return Unicode_Category_LL;
		case 0x118CD: return Unicode_Category_LL;
		case 0x118CE: return Unicode_Category_LL;
		case 0x118CF: return Unicode_Category_LL;
		case 0x118D0: return Unicode_Category_LL;
		case 0x118D1: return Unicode_Category_LL;
		case 0x118D2: return Unicode_Category_LL;
		case 0x118D3: return Unicode_Category_LL;
		case 0x118D4: return Unicode_Category_LL;
		case 0x118D5: return Unicode_Category_LL;
		case 0x118D6: return Unicode_Category_LL;
		case 0x118D7: return Unicode_Category_LL;
		case 0x118D8: return Unicode_Category_LL;
		case 0x118D9: return Unicode_Category_LL;
		case 0x118DA: return Unicode_Category_LL;
		case 0x118DB: return Unicode_Category_LL;
		case 0x118DC: return Unicode_Category_LL;
		case 0x118DD: return Unicode_Category_LL;
		case 0x118DE: return Unicode_Category_LL;
		case 0x118DF: return Unicode_Category_LL;
		case 0x118E0: return Unicode_Category_ND;
		case 0x118E1: return Unicode_Category_ND;
		case 0x118E2: return Unicode_Category_ND;
		case 0x118E3: return Unicode_Category_ND;
		case 0x118E4: return Unicode_Category_ND;
		case 0x118E5: return Unicode_Category_ND;
		case 0x118E6: return Unicode_Category_ND;
		case 0x118E7: return Unicode_Category_ND;
		case 0x118E8: return Unicode_Category_ND;
		case 0x118E9: return Unicode_Category_ND;
		case 0x118EA: return Unicode_Category_NO;
		case 0x118EB: return Unicode_Category_NO;
		case 0x118EC: return Unicode_Category_NO;
		case 0x118ED: return Unicode_Category_NO;
		case 0x118EE: return Unicode_Category_NO;
		case 0x118EF: return Unicode_Category_NO;
		case 0x118F0: return Unicode_Category_NO;
		case 0x118F1: return Unicode_Category_NO;
		case 0x118F2: return Unicode_Category_NO;
		case 0x118FF: return Unicode_Category_LO;
		case 0x11900: return Unicode_Category_LO;
		case 0x11901: return Unicode_Category_LO;
		case 0x11902: return Unicode_Category_LO;
		case 0x11903: return Unicode_Category_LO;
		case 0x11904: return Unicode_Category_LO;
		case 0x11905: return Unicode_Category_LO;
		case 0x11906: return Unicode_Category_LO;
		case 0x11909: return Unicode_Category_LO;
		case 0x1190C: return Unicode_Category_LO;
		case 0x1190D: return Unicode_Category_LO;
		case 0x1190E: return Unicode_Category_LO;
		case 0x1190F: return Unicode_Category_LO;
		case 0x11910: return Unicode_Category_LO;
		case 0x11911: return Unicode_Category_LO;
		case 0x11912: return Unicode_Category_LO;
		case 0x11913: return Unicode_Category_LO;
		case 0x11915: return Unicode_Category_LO;
		case 0x11916: return Unicode_Category_LO;
		case 0x11918: return Unicode_Category_LO;
		case 0x11919: return Unicode_Category_LO;
		case 0x1191A: return Unicode_Category_LO;
		case 0x1191B: return Unicode_Category_LO;
		case 0x1191C: return Unicode_Category_LO;
		case 0x1191D: return Unicode_Category_LO;
		case 0x1191E: return Unicode_Category_LO;
		case 0x1191F: return Unicode_Category_LO;
		case 0x11920: return Unicode_Category_LO;
		case 0x11921: return Unicode_Category_LO;
		case 0x11922: return Unicode_Category_LO;
		case 0x11923: return Unicode_Category_LO;
		case 0x11924: return Unicode_Category_LO;
		case 0x11925: return Unicode_Category_LO;
		case 0x11926: return Unicode_Category_LO;
		case 0x11927: return Unicode_Category_LO;
		case 0x11928: return Unicode_Category_LO;
		case 0x11929: return Unicode_Category_LO;
		case 0x1192A: return Unicode_Category_LO;
		case 0x1192B: return Unicode_Category_LO;
		case 0x1192C: return Unicode_Category_LO;
		case 0x1192D: return Unicode_Category_LO;
		case 0x1192E: return Unicode_Category_LO;
		case 0x1192F: return Unicode_Category_LO;
		case 0x11930: return Unicode_Category_MC;
		case 0x11931: return Unicode_Category_MC;
		case 0x11932: return Unicode_Category_MC;
		case 0x11933: return Unicode_Category_MC;
		case 0x11934: return Unicode_Category_MC;
		case 0x11935: return Unicode_Category_MC;
		case 0x11937: return Unicode_Category_MC;
		case 0x11938: return Unicode_Category_MC;
		case 0x1193B: return Unicode_Category_MN;
		case 0x1193C: return Unicode_Category_MN;
		case 0x1193D: return Unicode_Category_MC;
		case 0x1193E: return Unicode_Category_MN;
		case 0x1193F: return Unicode_Category_LO;
		case 0x11940: return Unicode_Category_MC;
		case 0x11941: return Unicode_Category_LO;
		case 0x11942: return Unicode_Category_MC;
		case 0x11943: return Unicode_Category_MN;
		case 0x11944: return Unicode_Category_PO;
		case 0x11945: return Unicode_Category_PO;
		case 0x11946: return Unicode_Category_PO;
		case 0x11950: return Unicode_Category_ND;
		case 0x11951: return Unicode_Category_ND;
		case 0x11952: return Unicode_Category_ND;
		case 0x11953: return Unicode_Category_ND;
		case 0x11954: return Unicode_Category_ND;
		case 0x11955: return Unicode_Category_ND;
		case 0x11956: return Unicode_Category_ND;
		case 0x11957: return Unicode_Category_ND;
		case 0x11958: return Unicode_Category_ND;
		case 0x11959: return Unicode_Category_ND;
		case 0x119A0: return Unicode_Category_LO;
		case 0x119A1: return Unicode_Category_LO;
		case 0x119A2: return Unicode_Category_LO;
		case 0x119A3: return Unicode_Category_LO;
		case 0x119A4: return Unicode_Category_LO;
		case 0x119A5: return Unicode_Category_LO;
		case 0x119A6: return Unicode_Category_LO;
		case 0x119A7: return Unicode_Category_LO;
		case 0x119AA: return Unicode_Category_LO;
		case 0x119AB: return Unicode_Category_LO;
		case 0x119AC: return Unicode_Category_LO;
		case 0x119AD: return Unicode_Category_LO;
		case 0x119AE: return Unicode_Category_LO;
		case 0x119AF: return Unicode_Category_LO;
		case 0x119B0: return Unicode_Category_LO;
		case 0x119B1: return Unicode_Category_LO;
		case 0x119B2: return Unicode_Category_LO;
		case 0x119B3: return Unicode_Category_LO;
		case 0x119B4: return Unicode_Category_LO;
		case 0x119B5: return Unicode_Category_LO;
		case 0x119B6: return Unicode_Category_LO;
		case 0x119B7: return Unicode_Category_LO;
		case 0x119B8: return Unicode_Category_LO;
		case 0x119B9: return Unicode_Category_LO;
		case 0x119BA: return Unicode_Category_LO;
		case 0x119BB: return Unicode_Category_LO;
		case 0x119BC: return Unicode_Category_LO;
		case 0x119BD: return Unicode_Category_LO;
		case 0x119BE: return Unicode_Category_LO;
		case 0x119BF: return Unicode_Category_LO;
		case 0x119C0: return Unicode_Category_LO;
		case 0x119C1: return Unicode_Category_LO;
		case 0x119C2: return Unicode_Category_LO;
		case 0x119C3: return Unicode_Category_LO;
		case 0x119C4: return Unicode_Category_LO;
		case 0x119C5: return Unicode_Category_LO;
		case 0x119C6: return Unicode_Category_LO;
		case 0x119C7: return Unicode_Category_LO;
		case 0x119C8: return Unicode_Category_LO;
		case 0x119C9: return Unicode_Category_LO;
		case 0x119CA: return Unicode_Category_LO;
		case 0x119CB: return Unicode_Category_LO;
		case 0x119CC: return Unicode_Category_LO;
		case 0x119CD: return Unicode_Category_LO;
		case 0x119CE: return Unicode_Category_LO;
		case 0x119CF: return Unicode_Category_LO;
		case 0x119D0: return Unicode_Category_LO;
		case 0x119D1: return Unicode_Category_MC;
		case 0x119D2: return Unicode_Category_MC;
		case 0x119D3: return Unicode_Category_MC;
		case 0x119D4: return Unicode_Category_MN;
		case 0x119D5: return Unicode_Category_MN;
		case 0x119D6: return Unicode_Category_MN;
		case 0x119D7: return Unicode_Category_MN;
		case 0x119DA: return Unicode_Category_MN;
		case 0x119DB: return Unicode_Category_MN;
		case 0x119DC: return Unicode_Category_MC;
		case 0x119DD: return Unicode_Category_MC;
		case 0x119DE: return Unicode_Category_MC;
		case 0x119DF: return Unicode_Category_MC;
		case 0x119E0: return Unicode_Category_MN;
		case 0x119E1: return Unicode_Category_LO;
		case 0x119E2: return Unicode_Category_PO;
		case 0x119E3: return Unicode_Category_LO;
		case 0x119E4: return Unicode_Category_MC;
		case 0x11A00: return Unicode_Category_LO;
		case 0x11A01: return Unicode_Category_MN;
		case 0x11A02: return Unicode_Category_MN;
		case 0x11A03: return Unicode_Category_MN;
		case 0x11A04: return Unicode_Category_MN;
		case 0x11A05: return Unicode_Category_MN;
		case 0x11A06: return Unicode_Category_MN;
		case 0x11A07: return Unicode_Category_MN;
		case 0x11A08: return Unicode_Category_MN;
		case 0x11A09: return Unicode_Category_MN;
		case 0x11A0A: return Unicode_Category_MN;
		case 0x11A0B: return Unicode_Category_LO;
		case 0x11A0C: return Unicode_Category_LO;
		case 0x11A0D: return Unicode_Category_LO;
		case 0x11A0E: return Unicode_Category_LO;
		case 0x11A0F: return Unicode_Category_LO;
		case 0x11A10: return Unicode_Category_LO;
		case 0x11A11: return Unicode_Category_LO;
		case 0x11A12: return Unicode_Category_LO;
		case 0x11A13: return Unicode_Category_LO;
		case 0x11A14: return Unicode_Category_LO;
		case 0x11A15: return Unicode_Category_LO;
		case 0x11A16: return Unicode_Category_LO;
		case 0x11A17: return Unicode_Category_LO;
		case 0x11A18: return Unicode_Category_LO;
		case 0x11A19: return Unicode_Category_LO;
		case 0x11A1A: return Unicode_Category_LO;
		case 0x11A1B: return Unicode_Category_LO;
		case 0x11A1C: return Unicode_Category_LO;
		case 0x11A1D: return Unicode_Category_LO;
		case 0x11A1E: return Unicode_Category_LO;
		case 0x11A1F: return Unicode_Category_LO;
		case 0x11A20: return Unicode_Category_LO;
		case 0x11A21: return Unicode_Category_LO;
		case 0x11A22: return Unicode_Category_LO;
		case 0x11A23: return Unicode_Category_LO;
		case 0x11A24: return Unicode_Category_LO;
		case 0x11A25: return Unicode_Category_LO;
		case 0x11A26: return Unicode_Category_LO;
		case 0x11A27: return Unicode_Category_LO;
		case 0x11A28: return Unicode_Category_LO;
		case 0x11A29: return Unicode_Category_LO;
		case 0x11A2A: return Unicode_Category_LO;
		case 0x11A2B: return Unicode_Category_LO;
		case 0x11A2C: return Unicode_Category_LO;
		case 0x11A2D: return Unicode_Category_LO;
		case 0x11A2E: return Unicode_Category_LO;
		case 0x11A2F: return Unicode_Category_LO;
		case 0x11A30: return Unicode_Category_LO;
		case 0x11A31: return Unicode_Category_LO;
		case 0x11A32: return Unicode_Category_LO;
		case 0x11A33: return Unicode_Category_MN;
		case 0x11A34: return Unicode_Category_MN;
		case 0x11A35: return Unicode_Category_MN;
		case 0x11A36: return Unicode_Category_MN;
		case 0x11A37: return Unicode_Category_MN;
		case 0x11A38: return Unicode_Category_MN;
		case 0x11A39: return Unicode_Category_MC;
		case 0x11A3A: return Unicode_Category_LO;
		case 0x11A3B: return Unicode_Category_MN;
		case 0x11A3C: return Unicode_Category_MN;
		case 0x11A3D: return Unicode_Category_MN;
		case 0x11A3E: return Unicode_Category_MN;
		case 0x11A3F: return Unicode_Category_PO;
		case 0x11A40: return Unicode_Category_PO;
		case 0x11A41: return Unicode_Category_PO;
		case 0x11A42: return Unicode_Category_PO;
		case 0x11A43: return Unicode_Category_PO;
		case 0x11A44: return Unicode_Category_PO;
		case 0x11A45: return Unicode_Category_PO;
		case 0x11A46: return Unicode_Category_PO;
		case 0x11A47: return Unicode_Category_MN;
		case 0x11A50: return Unicode_Category_LO;
		case 0x11A51: return Unicode_Category_MN;
		case 0x11A52: return Unicode_Category_MN;
		case 0x11A53: return Unicode_Category_MN;
		case 0x11A54: return Unicode_Category_MN;
		case 0x11A55: return Unicode_Category_MN;
		case 0x11A56: return Unicode_Category_MN;
		case 0x11A57: return Unicode_Category_MC;
		case 0x11A58: return Unicode_Category_MC;
		case 0x11A59: return Unicode_Category_MN;
		case 0x11A5A: return Unicode_Category_MN;
		case 0x11A5B: return Unicode_Category_MN;
		case 0x11A5C: return Unicode_Category_LO;
		case 0x11A5D: return Unicode_Category_LO;
		case 0x11A5E: return Unicode_Category_LO;
		case 0x11A5F: return Unicode_Category_LO;
		case 0x11A60: return Unicode_Category_LO;
		case 0x11A61: return Unicode_Category_LO;
		case 0x11A62: return Unicode_Category_LO;
		case 0x11A63: return Unicode_Category_LO;
		case 0x11A64: return Unicode_Category_LO;
		case 0x11A65: return Unicode_Category_LO;
		case 0x11A66: return Unicode_Category_LO;
		case 0x11A67: return Unicode_Category_LO;
		case 0x11A68: return Unicode_Category_LO;
		case 0x11A69: return Unicode_Category_LO;
		case 0x11A6A: return Unicode_Category_LO;
		case 0x11A6B: return Unicode_Category_LO;
		case 0x11A6C: return Unicode_Category_LO;
		case 0x11A6D: return Unicode_Category_LO;
		case 0x11A6E: return Unicode_Category_LO;
		case 0x11A6F: return Unicode_Category_LO;
		case 0x11A70: return Unicode_Category_LO;
		case 0x11A71: return Unicode_Category_LO;
		case 0x11A72: return Unicode_Category_LO;
		case 0x11A73: return Unicode_Category_LO;
		case 0x11A74: return Unicode_Category_LO;
		case 0x11A75: return Unicode_Category_LO;
		case 0x11A76: return Unicode_Category_LO;
		case 0x11A77: return Unicode_Category_LO;
		case 0x11A78: return Unicode_Category_LO;
		case 0x11A79: return Unicode_Category_LO;
		case 0x11A7A: return Unicode_Category_LO;
		case 0x11A7B: return Unicode_Category_LO;
		case 0x11A7C: return Unicode_Category_LO;
		case 0x11A7D: return Unicode_Category_LO;
		case 0x11A7E: return Unicode_Category_LO;
		case 0x11A7F: return Unicode_Category_LO;
		case 0x11A80: return Unicode_Category_LO;
		case 0x11A81: return Unicode_Category_LO;
		case 0x11A82: return Unicode_Category_LO;
		case 0x11A83: return Unicode_Category_LO;
		case 0x11A84: return Unicode_Category_LO;
		case 0x11A85: return Unicode_Category_LO;
		case 0x11A86: return Unicode_Category_LO;
		case 0x11A87: return Unicode_Category_LO;
		case 0x11A88: return Unicode_Category_LO;
		case 0x11A89: return Unicode_Category_LO;
		case 0x11A8A: return Unicode_Category_MN;
		case 0x11A8B: return Unicode_Category_MN;
		case 0x11A8C: return Unicode_Category_MN;
		case 0x11A8D: return Unicode_Category_MN;
		case 0x11A8E: return Unicode_Category_MN;
		case 0x11A8F: return Unicode_Category_MN;
		case 0x11A90: return Unicode_Category_MN;
		case 0x11A91: return Unicode_Category_MN;
		case 0x11A92: return Unicode_Category_MN;
		case 0x11A93: return Unicode_Category_MN;
		case 0x11A94: return Unicode_Category_MN;
		case 0x11A95: return Unicode_Category_MN;
		case 0x11A96: return Unicode_Category_MN;
		case 0x11A97: return Unicode_Category_MC;
		case 0x11A98: return Unicode_Category_MN;
		case 0x11A99: return Unicode_Category_MN;
		case 0x11A9A: return Unicode_Category_PO;
		case 0x11A9B: return Unicode_Category_PO;
		case 0x11A9C: return Unicode_Category_PO;
		case 0x11A9D: return Unicode_Category_LO;
		case 0x11A9E: return Unicode_Category_PO;
		case 0x11A9F: return Unicode_Category_PO;
		case 0x11AA0: return Unicode_Category_PO;
		case 0x11AA1: return Unicode_Category_PO;
		case 0x11AA2: return Unicode_Category_PO;
		case 0x11AC0: return Unicode_Category_LO;
		case 0x11AC1: return Unicode_Category_LO;
		case 0x11AC2: return Unicode_Category_LO;
		case 0x11AC3: return Unicode_Category_LO;
		case 0x11AC4: return Unicode_Category_LO;
		case 0x11AC5: return Unicode_Category_LO;
		case 0x11AC6: return Unicode_Category_LO;
		case 0x11AC7: return Unicode_Category_LO;
		case 0x11AC8: return Unicode_Category_LO;
		case 0x11AC9: return Unicode_Category_LO;
		case 0x11ACA: return Unicode_Category_LO;
		case 0x11ACB: return Unicode_Category_LO;
		case 0x11ACC: return Unicode_Category_LO;
		case 0x11ACD: return Unicode_Category_LO;
		case 0x11ACE: return Unicode_Category_LO;
		case 0x11ACF: return Unicode_Category_LO;
		case 0x11AD0: return Unicode_Category_LO;
		case 0x11AD1: return Unicode_Category_LO;
		case 0x11AD2: return Unicode_Category_LO;
		case 0x11AD3: return Unicode_Category_LO;
		case 0x11AD4: return Unicode_Category_LO;
		case 0x11AD5: return Unicode_Category_LO;
		case 0x11AD6: return Unicode_Category_LO;
		case 0x11AD7: return Unicode_Category_LO;
		case 0x11AD8: return Unicode_Category_LO;
		case 0x11AD9: return Unicode_Category_LO;
		case 0x11ADA: return Unicode_Category_LO;
		case 0x11ADB: return Unicode_Category_LO;
		case 0x11ADC: return Unicode_Category_LO;
		case 0x11ADD: return Unicode_Category_LO;
		case 0x11ADE: return Unicode_Category_LO;
		case 0x11ADF: return Unicode_Category_LO;
		case 0x11AE0: return Unicode_Category_LO;
		case 0x11AE1: return Unicode_Category_LO;
		case 0x11AE2: return Unicode_Category_LO;
		case 0x11AE3: return Unicode_Category_LO;
		case 0x11AE4: return Unicode_Category_LO;
		case 0x11AE5: return Unicode_Category_LO;
		case 0x11AE6: return Unicode_Category_LO;
		case 0x11AE7: return Unicode_Category_LO;
		case 0x11AE8: return Unicode_Category_LO;
		case 0x11AE9: return Unicode_Category_LO;
		case 0x11AEA: return Unicode_Category_LO;
		case 0x11AEB: return Unicode_Category_LO;
		case 0x11AEC: return Unicode_Category_LO;
		case 0x11AED: return Unicode_Category_LO;
		case 0x11AEE: return Unicode_Category_LO;
		case 0x11AEF: return Unicode_Category_LO;
		case 0x11AF0: return Unicode_Category_LO;
		case 0x11AF1: return Unicode_Category_LO;
		case 0x11AF2: return Unicode_Category_LO;
		case 0x11AF3: return Unicode_Category_LO;
		case 0x11AF4: return Unicode_Category_LO;
		case 0x11AF5: return Unicode_Category_LO;
		case 0x11AF6: return Unicode_Category_LO;
		case 0x11AF7: return Unicode_Category_LO;
		case 0x11AF8: return Unicode_Category_LO;
		case 0x11C00: return Unicode_Category_LO;
		case 0x11C01: return Unicode_Category_LO;
		case 0x11C02: return Unicode_Category_LO;
		case 0x11C03: return Unicode_Category_LO;
		case 0x11C04: return Unicode_Category_LO;
		case 0x11C05: return Unicode_Category_LO;
		case 0x11C06: return Unicode_Category_LO;
		case 0x11C07: return Unicode_Category_LO;
		case 0x11C08: return Unicode_Category_LO;
		case 0x11C0A: return Unicode_Category_LO;
		case 0x11C0B: return Unicode_Category_LO;
		case 0x11C0C: return Unicode_Category_LO;
		case 0x11C0D: return Unicode_Category_LO;
		case 0x11C0E: return Unicode_Category_LO;
		case 0x11C0F: return Unicode_Category_LO;
		case 0x11C10: return Unicode_Category_LO;
		case 0x11C11: return Unicode_Category_LO;
		case 0x11C12: return Unicode_Category_LO;
		case 0x11C13: return Unicode_Category_LO;
		case 0x11C14: return Unicode_Category_LO;
		case 0x11C15: return Unicode_Category_LO;
		case 0x11C16: return Unicode_Category_LO;
		case 0x11C17: return Unicode_Category_LO;
		case 0x11C18: return Unicode_Category_LO;
		case 0x11C19: return Unicode_Category_LO;
		case 0x11C1A: return Unicode_Category_LO;
		case 0x11C1B: return Unicode_Category_LO;
		case 0x11C1C: return Unicode_Category_LO;
		case 0x11C1D: return Unicode_Category_LO;
		case 0x11C1E: return Unicode_Category_LO;
		case 0x11C1F: return Unicode_Category_LO;
		case 0x11C20: return Unicode_Category_LO;
		case 0x11C21: return Unicode_Category_LO;
		case 0x11C22: return Unicode_Category_LO;
		case 0x11C23: return Unicode_Category_LO;
		case 0x11C24: return Unicode_Category_LO;
		case 0x11C25: return Unicode_Category_LO;
		case 0x11C26: return Unicode_Category_LO;
		case 0x11C27: return Unicode_Category_LO;
		case 0x11C28: return Unicode_Category_LO;
		case 0x11C29: return Unicode_Category_LO;
		case 0x11C2A: return Unicode_Category_LO;
		case 0x11C2B: return Unicode_Category_LO;
		case 0x11C2C: return Unicode_Category_LO;
		case 0x11C2D: return Unicode_Category_LO;
		case 0x11C2E: return Unicode_Category_LO;
		case 0x11C2F: return Unicode_Category_MC;
		case 0x11C30: return Unicode_Category_MN;
		case 0x11C31: return Unicode_Category_MN;
		case 0x11C32: return Unicode_Category_MN;
		case 0x11C33: return Unicode_Category_MN;
		case 0x11C34: return Unicode_Category_MN;
		case 0x11C35: return Unicode_Category_MN;
		case 0x11C36: return Unicode_Category_MN;
		case 0x11C38: return Unicode_Category_MN;
		case 0x11C39: return Unicode_Category_MN;
		case 0x11C3A: return Unicode_Category_MN;
		case 0x11C3B: return Unicode_Category_MN;
		case 0x11C3C: return Unicode_Category_MN;
		case 0x11C3D: return Unicode_Category_MN;
		case 0x11C3E: return Unicode_Category_MC;
		case 0x11C3F: return Unicode_Category_MN;
		case 0x11C40: return Unicode_Category_LO;
		case 0x11C41: return Unicode_Category_PO;
		case 0x11C42: return Unicode_Category_PO;
		case 0x11C43: return Unicode_Category_PO;
		case 0x11C44: return Unicode_Category_PO;
		case 0x11C45: return Unicode_Category_PO;
		case 0x11C50: return Unicode_Category_ND;
		case 0x11C51: return Unicode_Category_ND;
		case 0x11C52: return Unicode_Category_ND;
		case 0x11C53: return Unicode_Category_ND;
		case 0x11C54: return Unicode_Category_ND;
		case 0x11C55: return Unicode_Category_ND;
		case 0x11C56: return Unicode_Category_ND;
		case 0x11C57: return Unicode_Category_ND;
		case 0x11C58: return Unicode_Category_ND;
		case 0x11C59: return Unicode_Category_ND;
		case 0x11C5A: return Unicode_Category_NO;
		case 0x11C5B: return Unicode_Category_NO;
		case 0x11C5C: return Unicode_Category_NO;
		case 0x11C5D: return Unicode_Category_NO;
		case 0x11C5E: return Unicode_Category_NO;
		case 0x11C5F: return Unicode_Category_NO;
		case 0x11C60: return Unicode_Category_NO;
		case 0x11C61: return Unicode_Category_NO;
		case 0x11C62: return Unicode_Category_NO;
		case 0x11C63: return Unicode_Category_NO;
		case 0x11C64: return Unicode_Category_NO;
		case 0x11C65: return Unicode_Category_NO;
		case 0x11C66: return Unicode_Category_NO;
		case 0x11C67: return Unicode_Category_NO;
		case 0x11C68: return Unicode_Category_NO;
		case 0x11C69: return Unicode_Category_NO;
		case 0x11C6A: return Unicode_Category_NO;
		case 0x11C6B: return Unicode_Category_NO;
		case 0x11C6C: return Unicode_Category_NO;
		case 0x11C70: return Unicode_Category_PO;
		case 0x11C71: return Unicode_Category_PO;
		case 0x11C72: return Unicode_Category_LO;
		case 0x11C73: return Unicode_Category_LO;
		case 0x11C74: return Unicode_Category_LO;
		case 0x11C75: return Unicode_Category_LO;
		case 0x11C76: return Unicode_Category_LO;
		case 0x11C77: return Unicode_Category_LO;
		case 0x11C78: return Unicode_Category_LO;
		case 0x11C79: return Unicode_Category_LO;
		case 0x11C7A: return Unicode_Category_LO;
		case 0x11C7B: return Unicode_Category_LO;
		case 0x11C7C: return Unicode_Category_LO;
		case 0x11C7D: return Unicode_Category_LO;
		case 0x11C7E: return Unicode_Category_LO;
		case 0x11C7F: return Unicode_Category_LO;
		case 0x11C80: return Unicode_Category_LO;
		case 0x11C81: return Unicode_Category_LO;
		case 0x11C82: return Unicode_Category_LO;
		case 0x11C83: return Unicode_Category_LO;
		case 0x11C84: return Unicode_Category_LO;
		case 0x11C85: return Unicode_Category_LO;
		case 0x11C86: return Unicode_Category_LO;
		case 0x11C87: return Unicode_Category_LO;
		case 0x11C88: return Unicode_Category_LO;
		case 0x11C89: return Unicode_Category_LO;
		case 0x11C8A: return Unicode_Category_LO;
		case 0x11C8B: return Unicode_Category_LO;
		case 0x11C8C: return Unicode_Category_LO;
		case 0x11C8D: return Unicode_Category_LO;
		case 0x11C8E: return Unicode_Category_LO;
		case 0x11C8F: return Unicode_Category_LO;
		case 0x11C92: return Unicode_Category_MN;
		case 0x11C93: return Unicode_Category_MN;
		case 0x11C94: return Unicode_Category_MN;
		case 0x11C95: return Unicode_Category_MN;
		case 0x11C96: return Unicode_Category_MN;
		case 0x11C97: return Unicode_Category_MN;
		case 0x11C98: return Unicode_Category_MN;
		case 0x11C99: return Unicode_Category_MN;
		case 0x11C9A: return Unicode_Category_MN;
		case 0x11C9B: return Unicode_Category_MN;
		case 0x11C9C: return Unicode_Category_MN;
		case 0x11C9D: return Unicode_Category_MN;
		case 0x11C9E: return Unicode_Category_MN;
		case 0x11C9F: return Unicode_Category_MN;
		case 0x11CA0: return Unicode_Category_MN;
		case 0x11CA1: return Unicode_Category_MN;
		case 0x11CA2: return Unicode_Category_MN;
		case 0x11CA3: return Unicode_Category_MN;
		case 0x11CA4: return Unicode_Category_MN;
		case 0x11CA5: return Unicode_Category_MN;
		case 0x11CA6: return Unicode_Category_MN;
		case 0x11CA7: return Unicode_Category_MN;
		case 0x11CA9: return Unicode_Category_MC;
		case 0x11CAA: return Unicode_Category_MN;
		case 0x11CAB: return Unicode_Category_MN;
		case 0x11CAC: return Unicode_Category_MN;
		case 0x11CAD: return Unicode_Category_MN;
		case 0x11CAE: return Unicode_Category_MN;
		case 0x11CAF: return Unicode_Category_MN;
		case 0x11CB0: return Unicode_Category_MN;
		case 0x11CB1: return Unicode_Category_MC;
		case 0x11CB2: return Unicode_Category_MN;
		case 0x11CB3: return Unicode_Category_MN;
		case 0x11CB4: return Unicode_Category_MC;
		case 0x11CB5: return Unicode_Category_MN;
		case 0x11CB6: return Unicode_Category_MN;
		case 0x11D00: return Unicode_Category_LO;
		case 0x11D01: return Unicode_Category_LO;
		case 0x11D02: return Unicode_Category_LO;
		case 0x11D03: return Unicode_Category_LO;
		case 0x11D04: return Unicode_Category_LO;
		case 0x11D05: return Unicode_Category_LO;
		case 0x11D06: return Unicode_Category_LO;
		case 0x11D08: return Unicode_Category_LO;
		case 0x11D09: return Unicode_Category_LO;
		case 0x11D0B: return Unicode_Category_LO;
		case 0x11D0C: return Unicode_Category_LO;
		case 0x11D0D: return Unicode_Category_LO;
		case 0x11D0E: return Unicode_Category_LO;
		case 0x11D0F: return Unicode_Category_LO;
		case 0x11D10: return Unicode_Category_LO;
		case 0x11D11: return Unicode_Category_LO;
		case 0x11D12: return Unicode_Category_LO;
		case 0x11D13: return Unicode_Category_LO;
		case 0x11D14: return Unicode_Category_LO;
		case 0x11D15: return Unicode_Category_LO;
		case 0x11D16: return Unicode_Category_LO;
		case 0x11D17: return Unicode_Category_LO;
		case 0x11D18: return Unicode_Category_LO;
		case 0x11D19: return Unicode_Category_LO;
		case 0x11D1A: return Unicode_Category_LO;
		case 0x11D1B: return Unicode_Category_LO;
		case 0x11D1C: return Unicode_Category_LO;
		case 0x11D1D: return Unicode_Category_LO;
		case 0x11D1E: return Unicode_Category_LO;
		case 0x11D1F: return Unicode_Category_LO;
		case 0x11D20: return Unicode_Category_LO;
		case 0x11D21: return Unicode_Category_LO;
		case 0x11D22: return Unicode_Category_LO;
		case 0x11D23: return Unicode_Category_LO;
		case 0x11D24: return Unicode_Category_LO;
		case 0x11D25: return Unicode_Category_LO;
		case 0x11D26: return Unicode_Category_LO;
		case 0x11D27: return Unicode_Category_LO;
		case 0x11D28: return Unicode_Category_LO;
		case 0x11D29: return Unicode_Category_LO;
		case 0x11D2A: return Unicode_Category_LO;
		case 0x11D2B: return Unicode_Category_LO;
		case 0x11D2C: return Unicode_Category_LO;
		case 0x11D2D: return Unicode_Category_LO;
		case 0x11D2E: return Unicode_Category_LO;
		case 0x11D2F: return Unicode_Category_LO;
		case 0x11D30: return Unicode_Category_LO;
		case 0x11D31: return Unicode_Category_MN;
		case 0x11D32: return Unicode_Category_MN;
		case 0x11D33: return Unicode_Category_MN;
		case 0x11D34: return Unicode_Category_MN;
		case 0x11D35: return Unicode_Category_MN;
		case 0x11D36: return Unicode_Category_MN;
		case 0x11D3A: return Unicode_Category_MN;
		case 0x11D3C: return Unicode_Category_MN;
		case 0x11D3D: return Unicode_Category_MN;
		case 0x11D3F: return Unicode_Category_MN;
		case 0x11D40: return Unicode_Category_MN;
		case 0x11D41: return Unicode_Category_MN;
		case 0x11D42: return Unicode_Category_MN;
		case 0x11D43: return Unicode_Category_MN;
		case 0x11D44: return Unicode_Category_MN;
		case 0x11D45: return Unicode_Category_MN;
		case 0x11D46: return Unicode_Category_LO;
		case 0x11D47: return Unicode_Category_MN;
		case 0x11D50: return Unicode_Category_ND;
		case 0x11D51: return Unicode_Category_ND;
		case 0x11D52: return Unicode_Category_ND;
		case 0x11D53: return Unicode_Category_ND;
		case 0x11D54: return Unicode_Category_ND;
		case 0x11D55: return Unicode_Category_ND;
		case 0x11D56: return Unicode_Category_ND;
		case 0x11D57: return Unicode_Category_ND;
		case 0x11D58: return Unicode_Category_ND;
		case 0x11D59: return Unicode_Category_ND;
		case 0x11D60: return Unicode_Category_LO;
		case 0x11D61: return Unicode_Category_LO;
		case 0x11D62: return Unicode_Category_LO;
		case 0x11D63: return Unicode_Category_LO;
		case 0x11D64: return Unicode_Category_LO;
		case 0x11D65: return Unicode_Category_LO;
		case 0x11D67: return Unicode_Category_LO;
		case 0x11D68: return Unicode_Category_LO;
		case 0x11D6A: return Unicode_Category_LO;
		case 0x11D6B: return Unicode_Category_LO;
		case 0x11D6C: return Unicode_Category_LO;
		case 0x11D6D: return Unicode_Category_LO;
		case 0x11D6E: return Unicode_Category_LO;
		case 0x11D6F: return Unicode_Category_LO;
		case 0x11D70: return Unicode_Category_LO;
		case 0x11D71: return Unicode_Category_LO;
		case 0x11D72: return Unicode_Category_LO;
		case 0x11D73: return Unicode_Category_LO;
		case 0x11D74: return Unicode_Category_LO;
		case 0x11D75: return Unicode_Category_LO;
		case 0x11D76: return Unicode_Category_LO;
		case 0x11D77: return Unicode_Category_LO;
		case 0x11D78: return Unicode_Category_LO;
		case 0x11D79: return Unicode_Category_LO;
		case 0x11D7A: return Unicode_Category_LO;
		case 0x11D7B: return Unicode_Category_LO;
		case 0x11D7C: return Unicode_Category_LO;
		case 0x11D7D: return Unicode_Category_LO;
		case 0x11D7E: return Unicode_Category_LO;
		case 0x11D7F: return Unicode_Category_LO;
		case 0x11D80: return Unicode_Category_LO;
		case 0x11D81: return Unicode_Category_LO;
		case 0x11D82: return Unicode_Category_LO;
		case 0x11D83: return Unicode_Category_LO;
		case 0x11D84: return Unicode_Category_LO;
		case 0x11D85: return Unicode_Category_LO;
		case 0x11D86: return Unicode_Category_LO;
		case 0x11D87: return Unicode_Category_LO;
		case 0x11D88: return Unicode_Category_LO;
		case 0x11D89: return Unicode_Category_LO;
		case 0x11D8A: return Unicode_Category_MC;
		case 0x11D8B: return Unicode_Category_MC;
		case 0x11D8C: return Unicode_Category_MC;
		case 0x11D8D: return Unicode_Category_MC;
		case 0x11D8E: return Unicode_Category_MC;
		case 0x11D90: return Unicode_Category_MN;
		case 0x11D91: return Unicode_Category_MN;
		case 0x11D93: return Unicode_Category_MC;
		case 0x11D94: return Unicode_Category_MC;
		case 0x11D95: return Unicode_Category_MN;
		case 0x11D96: return Unicode_Category_MC;
		case 0x11D97: return Unicode_Category_MN;
		case 0x11D98: return Unicode_Category_LO;
		case 0x11DA0: return Unicode_Category_ND;
		case 0x11DA1: return Unicode_Category_ND;
		case 0x11DA2: return Unicode_Category_ND;
		case 0x11DA3: return Unicode_Category_ND;
		case 0x11DA4: return Unicode_Category_ND;
		case 0x11DA5: return Unicode_Category_ND;
		case 0x11DA6: return Unicode_Category_ND;
		case 0x11DA7: return Unicode_Category_ND;
		case 0x11DA8: return Unicode_Category_ND;
		case 0x11DA9: return Unicode_Category_ND;
		case 0x11EE0: return Unicode_Category_LO;
		case 0x11EE1: return Unicode_Category_LO;
		case 0x11EE2: return Unicode_Category_LO;
		case 0x11EE3: return Unicode_Category_LO;
		case 0x11EE4: return Unicode_Category_LO;
		case 0x11EE5: return Unicode_Category_LO;
		case 0x11EE6: return Unicode_Category_LO;
		case 0x11EE7: return Unicode_Category_LO;
		case 0x11EE8: return Unicode_Category_LO;
		case 0x11EE9: return Unicode_Category_LO;
		case 0x11EEA: return Unicode_Category_LO;
		case 0x11EEB: return Unicode_Category_LO;
		case 0x11EEC: return Unicode_Category_LO;
		case 0x11EED: return Unicode_Category_LO;
		case 0x11EEE: return Unicode_Category_LO;
		case 0x11EEF: return Unicode_Category_LO;
		case 0x11EF0: return Unicode_Category_LO;
		case 0x11EF1: return Unicode_Category_LO;
		case 0x11EF2: return Unicode_Category_LO;
		case 0x11EF3: return Unicode_Category_MN;
		case 0x11EF4: return Unicode_Category_MN;
		case 0x11EF5: return Unicode_Category_MC;
		case 0x11EF6: return Unicode_Category_MC;
		case 0x11EF7: return Unicode_Category_PO;
		case 0x11EF8: return Unicode_Category_PO;
		case 0x11FB0: return Unicode_Category_LO;
		case 0x11FC0: return Unicode_Category_NO;
		case 0x11FC1: return Unicode_Category_NO;
		case 0x11FC2: return Unicode_Category_NO;
		case 0x11FC3: return Unicode_Category_NO;
		case 0x11FC4: return Unicode_Category_NO;
		case 0x11FC5: return Unicode_Category_NO;
		case 0x11FC6: return Unicode_Category_NO;
		case 0x11FC7: return Unicode_Category_NO;
		case 0x11FC8: return Unicode_Category_NO;
		case 0x11FC9: return Unicode_Category_NO;
		case 0x11FCA: return Unicode_Category_NO;
		case 0x11FCB: return Unicode_Category_NO;
		case 0x11FCC: return Unicode_Category_NO;
		case 0x11FCD: return Unicode_Category_NO;
		case 0x11FCE: return Unicode_Category_NO;
		case 0x11FCF: return Unicode_Category_NO;
		case 0x11FD0: return Unicode_Category_NO;
		case 0x11FD1: return Unicode_Category_NO;
		case 0x11FD2: return Unicode_Category_NO;
		case 0x11FD3: return Unicode_Category_NO;
		case 0x11FD4: return Unicode_Category_NO;
		case 0x11FD5: return Unicode_Category_SO;
		case 0x11FD6: return Unicode_Category_SO;
		case 0x11FD7: return Unicode_Category_SO;
		case 0x11FD8: return Unicode_Category_SO;
		case 0x11FD9: return Unicode_Category_SO;
		case 0x11FDA: return Unicode_Category_SO;
		case 0x11FDB: return Unicode_Category_SO;
		case 0x11FDC: return Unicode_Category_SO;
		case 0x11FDD: return Unicode_Category_SC;
		case 0x11FDE: return Unicode_Category_SC;
		case 0x11FDF: return Unicode_Category_SC;
		case 0x11FE0: return Unicode_Category_SC;
		case 0x11FE1: return Unicode_Category_SO;
		case 0x11FE2: return Unicode_Category_SO;
		case 0x11FE3: return Unicode_Category_SO;
		case 0x11FE4: return Unicode_Category_SO;
		case 0x11FE5: return Unicode_Category_SO;
		case 0x11FE6: return Unicode_Category_SO;
		case 0x11FE7: return Unicode_Category_SO;
		case 0x11FE8: return Unicode_Category_SO;
		case 0x11FE9: return Unicode_Category_SO;
		case 0x11FEA: return Unicode_Category_SO;
		case 0x11FEB: return Unicode_Category_SO;
		case 0x11FEC: return Unicode_Category_SO;
		case 0x11FED: return Unicode_Category_SO;
		case 0x11FEE: return Unicode_Category_SO;
		case 0x11FEF: return Unicode_Category_SO;
		case 0x11FF0: return Unicode_Category_SO;
		case 0x11FF1: return Unicode_Category_SO;
		case 0x11FFF: return Unicode_Category_PO;
		case 0x12000: return Unicode_Category_LO;
		case 0x12001: return Unicode_Category_LO;
		case 0x12002: return Unicode_Category_LO;
		case 0x12003: return Unicode_Category_LO;
		case 0x12004: return Unicode_Category_LO;
		case 0x12005: return Unicode_Category_LO;
		case 0x12006: return Unicode_Category_LO;
		case 0x12007: return Unicode_Category_LO;
		case 0x12008: return Unicode_Category_LO;
		case 0x12009: return Unicode_Category_LO;
		case 0x1200A: return Unicode_Category_LO;
		case 0x1200B: return Unicode_Category_LO;
		case 0x1200C: return Unicode_Category_LO;
		case 0x1200D: return Unicode_Category_LO;
		case 0x1200E: return Unicode_Category_LO;
		case 0x1200F: return Unicode_Category_LO;
		case 0x12010: return Unicode_Category_LO;
		case 0x12011: return Unicode_Category_LO;
		case 0x12012: return Unicode_Category_LO;
		case 0x12013: return Unicode_Category_LO;
		case 0x12014: return Unicode_Category_LO;
		case 0x12015: return Unicode_Category_LO;
		case 0x12016: return Unicode_Category_LO;
		case 0x12017: return Unicode_Category_LO;
		case 0x12018: return Unicode_Category_LO;
		case 0x12019: return Unicode_Category_LO;
		case 0x1201A: return Unicode_Category_LO;
		case 0x1201B: return Unicode_Category_LO;
		case 0x1201C: return Unicode_Category_LO;
		case 0x1201D: return Unicode_Category_LO;
		case 0x1201E: return Unicode_Category_LO;
		case 0x1201F: return Unicode_Category_LO;
		case 0x12020: return Unicode_Category_LO;
		case 0x12021: return Unicode_Category_LO;
		case 0x12022: return Unicode_Category_LO;
		case 0x12023: return Unicode_Category_LO;
		case 0x12024: return Unicode_Category_LO;
		case 0x12025: return Unicode_Category_LO;
		case 0x12026: return Unicode_Category_LO;
		case 0x12027: return Unicode_Category_LO;
		case 0x12028: return Unicode_Category_LO;
		case 0x12029: return Unicode_Category_LO;
		case 0x1202A: return Unicode_Category_LO;
		case 0x1202B: return Unicode_Category_LO;
		case 0x1202C: return Unicode_Category_LO;
		case 0x1202D: return Unicode_Category_LO;
		case 0x1202E: return Unicode_Category_LO;
		case 0x1202F: return Unicode_Category_LO;
		case 0x12030: return Unicode_Category_LO;
		case 0x12031: return Unicode_Category_LO;
		case 0x12032: return Unicode_Category_LO;
		case 0x12033: return Unicode_Category_LO;
		case 0x12034: return Unicode_Category_LO;
		case 0x12035: return Unicode_Category_LO;
		case 0x12036: return Unicode_Category_LO;
		case 0x12037: return Unicode_Category_LO;
		case 0x12038: return Unicode_Category_LO;
		case 0x12039: return Unicode_Category_LO;
		case 0x1203A: return Unicode_Category_LO;
		case 0x1203B: return Unicode_Category_LO;
		case 0x1203C: return Unicode_Category_LO;
		case 0x1203D: return Unicode_Category_LO;
		case 0x1203E: return Unicode_Category_LO;
		case 0x1203F: return Unicode_Category_LO;
		case 0x12040: return Unicode_Category_LO;
		case 0x12041: return Unicode_Category_LO;
		case 0x12042: return Unicode_Category_LO;
		case 0x12043: return Unicode_Category_LO;
		case 0x12044: return Unicode_Category_LO;
		case 0x12045: return Unicode_Category_LO;
		case 0x12046: return Unicode_Category_LO;
		case 0x12047: return Unicode_Category_LO;
		case 0x12048: return Unicode_Category_LO;
		case 0x12049: return Unicode_Category_LO;
		case 0x1204A: return Unicode_Category_LO;
		case 0x1204B: return Unicode_Category_LO;
		case 0x1204C: return Unicode_Category_LO;
		case 0x1204D: return Unicode_Category_LO;
		case 0x1204E: return Unicode_Category_LO;
		case 0x1204F: return Unicode_Category_LO;
		case 0x12050: return Unicode_Category_LO;
		case 0x12051: return Unicode_Category_LO;
		case 0x12052: return Unicode_Category_LO;
		case 0x12053: return Unicode_Category_LO;
		case 0x12054: return Unicode_Category_LO;
		case 0x12055: return Unicode_Category_LO;
		case 0x12056: return Unicode_Category_LO;
		case 0x12057: return Unicode_Category_LO;
		case 0x12058: return Unicode_Category_LO;
		case 0x12059: return Unicode_Category_LO;
		case 0x1205A: return Unicode_Category_LO;
		case 0x1205B: return Unicode_Category_LO;
		case 0x1205C: return Unicode_Category_LO;
		case 0x1205D: return Unicode_Category_LO;
		case 0x1205E: return Unicode_Category_LO;
		case 0x1205F: return Unicode_Category_LO;
		case 0x12060: return Unicode_Category_LO;
		case 0x12061: return Unicode_Category_LO;
		case 0x12062: return Unicode_Category_LO;
		case 0x12063: return Unicode_Category_LO;
		case 0x12064: return Unicode_Category_LO;
		case 0x12065: return Unicode_Category_LO;
		case 0x12066: return Unicode_Category_LO;
		case 0x12067: return Unicode_Category_LO;
		case 0x12068: return Unicode_Category_LO;
		case 0x12069: return Unicode_Category_LO;
		case 0x1206A: return Unicode_Category_LO;
		case 0x1206B: return Unicode_Category_LO;
		case 0x1206C: return Unicode_Category_LO;
		case 0x1206D: return Unicode_Category_LO;
		case 0x1206E: return Unicode_Category_LO;
		case 0x1206F: return Unicode_Category_LO;
		case 0x12070: return Unicode_Category_LO;
		case 0x12071: return Unicode_Category_LO;
		case 0x12072: return Unicode_Category_LO;
		case 0x12073: return Unicode_Category_LO;
		case 0x12074: return Unicode_Category_LO;
		case 0x12075: return Unicode_Category_LO;
		case 0x12076: return Unicode_Category_LO;
		case 0x12077: return Unicode_Category_LO;
		case 0x12078: return Unicode_Category_LO;
		case 0x12079: return Unicode_Category_LO;
		case 0x1207A: return Unicode_Category_LO;
		case 0x1207B: return Unicode_Category_LO;
		case 0x1207C: return Unicode_Category_LO;
		case 0x1207D: return Unicode_Category_LO;
		case 0x1207E: return Unicode_Category_LO;
		case 0x1207F: return Unicode_Category_LO;
		case 0x12080: return Unicode_Category_LO;
		case 0x12081: return Unicode_Category_LO;
		case 0x12082: return Unicode_Category_LO;
		case 0x12083: return Unicode_Category_LO;
		case 0x12084: return Unicode_Category_LO;
		case 0x12085: return Unicode_Category_LO;
		case 0x12086: return Unicode_Category_LO;
		case 0x12087: return Unicode_Category_LO;
		case 0x12088: return Unicode_Category_LO;
		case 0x12089: return Unicode_Category_LO;
		case 0x1208A: return Unicode_Category_LO;
		case 0x1208B: return Unicode_Category_LO;
		case 0x1208C: return Unicode_Category_LO;
		case 0x1208D: return Unicode_Category_LO;
		case 0x1208E: return Unicode_Category_LO;
		case 0x1208F: return Unicode_Category_LO;
		case 0x12090: return Unicode_Category_LO;
		case 0x12091: return Unicode_Category_LO;
		case 0x12092: return Unicode_Category_LO;
		case 0x12093: return Unicode_Category_LO;
		case 0x12094: return Unicode_Category_LO;
		case 0x12095: return Unicode_Category_LO;
		case 0x12096: return Unicode_Category_LO;
		case 0x12097: return Unicode_Category_LO;
		case 0x12098: return Unicode_Category_LO;
		case 0x12099: return Unicode_Category_LO;
		case 0x1209A: return Unicode_Category_LO;
		case 0x1209B: return Unicode_Category_LO;
		case 0x1209C: return Unicode_Category_LO;
		case 0x1209D: return Unicode_Category_LO;
		case 0x1209E: return Unicode_Category_LO;
		case 0x1209F: return Unicode_Category_LO;
		case 0x120A0: return Unicode_Category_LO;
		case 0x120A1: return Unicode_Category_LO;
		case 0x120A2: return Unicode_Category_LO;
		case 0x120A3: return Unicode_Category_LO;
		case 0x120A4: return Unicode_Category_LO;
		case 0x120A5: return Unicode_Category_LO;
		case 0x120A6: return Unicode_Category_LO;
		case 0x120A7: return Unicode_Category_LO;
		case 0x120A8: return Unicode_Category_LO;
		case 0x120A9: return Unicode_Category_LO;
		case 0x120AA: return Unicode_Category_LO;
		case 0x120AB: return Unicode_Category_LO;
		case 0x120AC: return Unicode_Category_LO;
		case 0x120AD: return Unicode_Category_LO;
		case 0x120AE: return Unicode_Category_LO;
		case 0x120AF: return Unicode_Category_LO;
		case 0x120B0: return Unicode_Category_LO;
		case 0x120B1: return Unicode_Category_LO;
		case 0x120B2: return Unicode_Category_LO;
		case 0x120B3: return Unicode_Category_LO;
		case 0x120B4: return Unicode_Category_LO;
		case 0x120B5: return Unicode_Category_LO;
		case 0x120B6: return Unicode_Category_LO;
		case 0x120B7: return Unicode_Category_LO;
		case 0x120B8: return Unicode_Category_LO;
		case 0x120B9: return Unicode_Category_LO;
		case 0x120BA: return Unicode_Category_LO;
		case 0x120BB: return Unicode_Category_LO;
		case 0x120BC: return Unicode_Category_LO;
		case 0x120BD: return Unicode_Category_LO;
		case 0x120BE: return Unicode_Category_LO;
		case 0x120BF: return Unicode_Category_LO;
		case 0x120C0: return Unicode_Category_LO;
		case 0x120C1: return Unicode_Category_LO;
		case 0x120C2: return Unicode_Category_LO;
		case 0x120C3: return Unicode_Category_LO;
		case 0x120C4: return Unicode_Category_LO;
		case 0x120C5: return Unicode_Category_LO;
		case 0x120C6: return Unicode_Category_LO;
		case 0x120C7: return Unicode_Category_LO;
		case 0x120C8: return Unicode_Category_LO;
		case 0x120C9: return Unicode_Category_LO;
		case 0x120CA: return Unicode_Category_LO;
		case 0x120CB: return Unicode_Category_LO;
		case 0x120CC: return Unicode_Category_LO;
		case 0x120CD: return Unicode_Category_LO;
		case 0x120CE: return Unicode_Category_LO;
		case 0x120CF: return Unicode_Category_LO;
		case 0x120D0: return Unicode_Category_LO;
		case 0x120D1: return Unicode_Category_LO;
		case 0x120D2: return Unicode_Category_LO;
		case 0x120D3: return Unicode_Category_LO;
		case 0x120D4: return Unicode_Category_LO;
		case 0x120D5: return Unicode_Category_LO;
		case 0x120D6: return Unicode_Category_LO;
		case 0x120D7: return Unicode_Category_LO;
		case 0x120D8: return Unicode_Category_LO;
		case 0x120D9: return Unicode_Category_LO;
		case 0x120DA: return Unicode_Category_LO;
		case 0x120DB: return Unicode_Category_LO;
		case 0x120DC: return Unicode_Category_LO;
		case 0x120DD: return Unicode_Category_LO;
		case 0x120DE: return Unicode_Category_LO;
		case 0x120DF: return Unicode_Category_LO;
		case 0x120E0: return Unicode_Category_LO;
		case 0x120E1: return Unicode_Category_LO;
		case 0x120E2: return Unicode_Category_LO;
		case 0x120E3: return Unicode_Category_LO;
		case 0x120E4: return Unicode_Category_LO;
		case 0x120E5: return Unicode_Category_LO;
		case 0x120E6: return Unicode_Category_LO;
		case 0x120E7: return Unicode_Category_LO;
		case 0x120E8: return Unicode_Category_LO;
		case 0x120E9: return Unicode_Category_LO;
		case 0x120EA: return Unicode_Category_LO;
		case 0x120EB: return Unicode_Category_LO;
		case 0x120EC: return Unicode_Category_LO;
		case 0x120ED: return Unicode_Category_LO;
		case 0x120EE: return Unicode_Category_LO;
		case 0x120EF: return Unicode_Category_LO;
		case 0x120F0: return Unicode_Category_LO;
		case 0x120F1: return Unicode_Category_LO;
		case 0x120F2: return Unicode_Category_LO;
		case 0x120F3: return Unicode_Category_LO;
		case 0x120F4: return Unicode_Category_LO;
		case 0x120F5: return Unicode_Category_LO;
		case 0x120F6: return Unicode_Category_LO;
		case 0x120F7: return Unicode_Category_LO;
		case 0x120F8: return Unicode_Category_LO;
		case 0x120F9: return Unicode_Category_LO;
		case 0x120FA: return Unicode_Category_LO;
		case 0x120FB: return Unicode_Category_LO;
		case 0x120FC: return Unicode_Category_LO;
		case 0x120FD: return Unicode_Category_LO;
		case 0x120FE: return Unicode_Category_LO;
		case 0x120FF: return Unicode_Category_LO;
		case 0x12100: return Unicode_Category_LO;
		case 0x12101: return Unicode_Category_LO;
		case 0x12102: return Unicode_Category_LO;
		case 0x12103: return Unicode_Category_LO;
		case 0x12104: return Unicode_Category_LO;
		case 0x12105: return Unicode_Category_LO;
		case 0x12106: return Unicode_Category_LO;
		case 0x12107: return Unicode_Category_LO;
		case 0x12108: return Unicode_Category_LO;
		case 0x12109: return Unicode_Category_LO;
		case 0x1210A: return Unicode_Category_LO;
		case 0x1210B: return Unicode_Category_LO;
		case 0x1210C: return Unicode_Category_LO;
		case 0x1210D: return Unicode_Category_LO;
		case 0x1210E: return Unicode_Category_LO;
		case 0x1210F: return Unicode_Category_LO;
		case 0x12110: return Unicode_Category_LO;
		case 0x12111: return Unicode_Category_LO;
		case 0x12112: return Unicode_Category_LO;
		case 0x12113: return Unicode_Category_LO;
		case 0x12114: return Unicode_Category_LO;
		case 0x12115: return Unicode_Category_LO;
		case 0x12116: return Unicode_Category_LO;
		case 0x12117: return Unicode_Category_LO;
		case 0x12118: return Unicode_Category_LO;
		case 0x12119: return Unicode_Category_LO;
		case 0x1211A: return Unicode_Category_LO;
		case 0x1211B: return Unicode_Category_LO;
		case 0x1211C: return Unicode_Category_LO;
		case 0x1211D: return Unicode_Category_LO;
		case 0x1211E: return Unicode_Category_LO;
		case 0x1211F: return Unicode_Category_LO;
		case 0x12120: return Unicode_Category_LO;
		case 0x12121: return Unicode_Category_LO;
		case 0x12122: return Unicode_Category_LO;
		case 0x12123: return Unicode_Category_LO;
		case 0x12124: return Unicode_Category_LO;
		case 0x12125: return Unicode_Category_LO;
		case 0x12126: return Unicode_Category_LO;
		case 0x12127: return Unicode_Category_LO;
		case 0x12128: return Unicode_Category_LO;
		case 0x12129: return Unicode_Category_LO;
		case 0x1212A: return Unicode_Category_LO;
		case 0x1212B: return Unicode_Category_LO;
		case 0x1212C: return Unicode_Category_LO;
		case 0x1212D: return Unicode_Category_LO;
		case 0x1212E: return Unicode_Category_LO;
		case 0x1212F: return Unicode_Category_LO;
		case 0x12130: return Unicode_Category_LO;
		case 0x12131: return Unicode_Category_LO;
		case 0x12132: return Unicode_Category_LO;
		case 0x12133: return Unicode_Category_LO;
		case 0x12134: return Unicode_Category_LO;
		case 0x12135: return Unicode_Category_LO;
		case 0x12136: return Unicode_Category_LO;
		case 0x12137: return Unicode_Category_LO;
		case 0x12138: return Unicode_Category_LO;
		case 0x12139: return Unicode_Category_LO;
		case 0x1213A: return Unicode_Category_LO;
		case 0x1213B: return Unicode_Category_LO;
		case 0x1213C: return Unicode_Category_LO;
		case 0x1213D: return Unicode_Category_LO;
		case 0x1213E: return Unicode_Category_LO;
		case 0x1213F: return Unicode_Category_LO;
		case 0x12140: return Unicode_Category_LO;
		case 0x12141: return Unicode_Category_LO;
		case 0x12142: return Unicode_Category_LO;
		case 0x12143: return Unicode_Category_LO;
		case 0x12144: return Unicode_Category_LO;
		case 0x12145: return Unicode_Category_LO;
		case 0x12146: return Unicode_Category_LO;
		case 0x12147: return Unicode_Category_LO;
		case 0x12148: return Unicode_Category_LO;
		case 0x12149: return Unicode_Category_LO;
		case 0x1214A: return Unicode_Category_LO;
		case 0x1214B: return Unicode_Category_LO;
		case 0x1214C: return Unicode_Category_LO;
		case 0x1214D: return Unicode_Category_LO;
		case 0x1214E: return Unicode_Category_LO;
		case 0x1214F: return Unicode_Category_LO;
		case 0x12150: return Unicode_Category_LO;
		case 0x12151: return Unicode_Category_LO;
		case 0x12152: return Unicode_Category_LO;
		case 0x12153: return Unicode_Category_LO;
		case 0x12154: return Unicode_Category_LO;
		case 0x12155: return Unicode_Category_LO;
		case 0x12156: return Unicode_Category_LO;
		case 0x12157: return Unicode_Category_LO;
		case 0x12158: return Unicode_Category_LO;
		case 0x12159: return Unicode_Category_LO;
		case 0x1215A: return Unicode_Category_LO;
		case 0x1215B: return Unicode_Category_LO;
		case 0x1215C: return Unicode_Category_LO;
		case 0x1215D: return Unicode_Category_LO;
		case 0x1215E: return Unicode_Category_LO;
		case 0x1215F: return Unicode_Category_LO;
		case 0x12160: return Unicode_Category_LO;
		case 0x12161: return Unicode_Category_LO;
		case 0x12162: return Unicode_Category_LO;
		case 0x12163: return Unicode_Category_LO;
		case 0x12164: return Unicode_Category_LO;
		case 0x12165: return Unicode_Category_LO;
		case 0x12166: return Unicode_Category_LO;
		case 0x12167: return Unicode_Category_LO;
		case 0x12168: return Unicode_Category_LO;
		case 0x12169: return Unicode_Category_LO;
		case 0x1216A: return Unicode_Category_LO;
		case 0x1216B: return Unicode_Category_LO;
		case 0x1216C: return Unicode_Category_LO;
		case 0x1216D: return Unicode_Category_LO;
		case 0x1216E: return Unicode_Category_LO;
		case 0x1216F: return Unicode_Category_LO;
		case 0x12170: return Unicode_Category_LO;
		case 0x12171: return Unicode_Category_LO;
		case 0x12172: return Unicode_Category_LO;
		case 0x12173: return Unicode_Category_LO;
		case 0x12174: return Unicode_Category_LO;
		case 0x12175: return Unicode_Category_LO;
		case 0x12176: return Unicode_Category_LO;
		case 0x12177: return Unicode_Category_LO;
		case 0x12178: return Unicode_Category_LO;
		case 0x12179: return Unicode_Category_LO;
		case 0x1217A: return Unicode_Category_LO;
		case 0x1217B: return Unicode_Category_LO;
		case 0x1217C: return Unicode_Category_LO;
		case 0x1217D: return Unicode_Category_LO;
		case 0x1217E: return Unicode_Category_LO;
		case 0x1217F: return Unicode_Category_LO;
		case 0x12180: return Unicode_Category_LO;
		case 0x12181: return Unicode_Category_LO;
		case 0x12182: return Unicode_Category_LO;
		case 0x12183: return Unicode_Category_LO;
		case 0x12184: return Unicode_Category_LO;
		case 0x12185: return Unicode_Category_LO;
		case 0x12186: return Unicode_Category_LO;
		case 0x12187: return Unicode_Category_LO;
		case 0x12188: return Unicode_Category_LO;
		case 0x12189: return Unicode_Category_LO;
		case 0x1218A: return Unicode_Category_LO;
		case 0x1218B: return Unicode_Category_LO;
		case 0x1218C: return Unicode_Category_LO;
		case 0x1218D: return Unicode_Category_LO;
		case 0x1218E: return Unicode_Category_LO;
		case 0x1218F: return Unicode_Category_LO;
		case 0x12190: return Unicode_Category_LO;
		case 0x12191: return Unicode_Category_LO;
		case 0x12192: return Unicode_Category_LO;
		case 0x12193: return Unicode_Category_LO;
		case 0x12194: return Unicode_Category_LO;
		case 0x12195: return Unicode_Category_LO;
		case 0x12196: return Unicode_Category_LO;
		case 0x12197: return Unicode_Category_LO;
		case 0x12198: return Unicode_Category_LO;
		case 0x12199: return Unicode_Category_LO;
		case 0x1219A: return Unicode_Category_LO;
		case 0x1219B: return Unicode_Category_LO;
		case 0x1219C: return Unicode_Category_LO;
		case 0x1219D: return Unicode_Category_LO;
		case 0x1219E: return Unicode_Category_LO;
		case 0x1219F: return Unicode_Category_LO;
		case 0x121A0: return Unicode_Category_LO;
		case 0x121A1: return Unicode_Category_LO;
		case 0x121A2: return Unicode_Category_LO;
		case 0x121A3: return Unicode_Category_LO;
		case 0x121A4: return Unicode_Category_LO;
		case 0x121A5: return Unicode_Category_LO;
		case 0x121A6: return Unicode_Category_LO;
		case 0x121A7: return Unicode_Category_LO;
		case 0x121A8: return Unicode_Category_LO;
		case 0x121A9: return Unicode_Category_LO;
		case 0x121AA: return Unicode_Category_LO;
		case 0x121AB: return Unicode_Category_LO;
		case 0x121AC: return Unicode_Category_LO;
		case 0x121AD: return Unicode_Category_LO;
		case 0x121AE: return Unicode_Category_LO;
		case 0x121AF: return Unicode_Category_LO;
		case 0x121B0: return Unicode_Category_LO;
		case 0x121B1: return Unicode_Category_LO;
		case 0x121B2: return Unicode_Category_LO;
		case 0x121B3: return Unicode_Category_LO;
		case 0x121B4: return Unicode_Category_LO;
		case 0x121B5: return Unicode_Category_LO;
		case 0x121B6: return Unicode_Category_LO;
		case 0x121B7: return Unicode_Category_LO;
		case 0x121B8: return Unicode_Category_LO;
		case 0x121B9: return Unicode_Category_LO;
		case 0x121BA: return Unicode_Category_LO;
		case 0x121BB: return Unicode_Category_LO;
		case 0x121BC: return Unicode_Category_LO;
		case 0x121BD: return Unicode_Category_LO;
		case 0x121BE: return Unicode_Category_LO;
		case 0x121BF: return Unicode_Category_LO;
		case 0x121C0: return Unicode_Category_LO;
		case 0x121C1: return Unicode_Category_LO;
		case 0x121C2: return Unicode_Category_LO;
		case 0x121C3: return Unicode_Category_LO;
		case 0x121C4: return Unicode_Category_LO;
		case 0x121C5: return Unicode_Category_LO;
		case 0x121C6: return Unicode_Category_LO;
		case 0x121C7: return Unicode_Category_LO;
		case 0x121C8: return Unicode_Category_LO;
		case 0x121C9: return Unicode_Category_LO;
		case 0x121CA: return Unicode_Category_LO;
		case 0x121CB: return Unicode_Category_LO;
		case 0x121CC: return Unicode_Category_LO;
		case 0x121CD: return Unicode_Category_LO;
		case 0x121CE: return Unicode_Category_LO;
		case 0x121CF: return Unicode_Category_LO;
		case 0x121D0: return Unicode_Category_LO;
		case 0x121D1: return Unicode_Category_LO;
		case 0x121D2: return Unicode_Category_LO;
		case 0x121D3: return Unicode_Category_LO;
		case 0x121D4: return Unicode_Category_LO;
		case 0x121D5: return Unicode_Category_LO;
		case 0x121D6: return Unicode_Category_LO;
		case 0x121D7: return Unicode_Category_LO;
		case 0x121D8: return Unicode_Category_LO;
		case 0x121D9: return Unicode_Category_LO;
		case 0x121DA: return Unicode_Category_LO;
		case 0x121DB: return Unicode_Category_LO;
		case 0x121DC: return Unicode_Category_LO;
		case 0x121DD: return Unicode_Category_LO;
		case 0x121DE: return Unicode_Category_LO;
		case 0x121DF: return Unicode_Category_LO;
		case 0x121E0: return Unicode_Category_LO;
		case 0x121E1: return Unicode_Category_LO;
		case 0x121E2: return Unicode_Category_LO;
		case 0x121E3: return Unicode_Category_LO;
		case 0x121E4: return Unicode_Category_LO;
		case 0x121E5: return Unicode_Category_LO;
		case 0x121E6: return Unicode_Category_LO;
		case 0x121E7: return Unicode_Category_LO;
		case 0x121E8: return Unicode_Category_LO;
		case 0x121E9: return Unicode_Category_LO;
		case 0x121EA: return Unicode_Category_LO;
		case 0x121EB: return Unicode_Category_LO;
		case 0x121EC: return Unicode_Category_LO;
		case 0x121ED: return Unicode_Category_LO;
		case 0x121EE: return Unicode_Category_LO;
		case 0x121EF: return Unicode_Category_LO;
		case 0x121F0: return Unicode_Category_LO;
		case 0x121F1: return Unicode_Category_LO;
		case 0x121F2: return Unicode_Category_LO;
		case 0x121F3: return Unicode_Category_LO;
		case 0x121F4: return Unicode_Category_LO;
		case 0x121F5: return Unicode_Category_LO;
		case 0x121F6: return Unicode_Category_LO;
		case 0x121F7: return Unicode_Category_LO;
		case 0x121F8: return Unicode_Category_LO;
		case 0x121F9: return Unicode_Category_LO;
		case 0x121FA: return Unicode_Category_LO;
		case 0x121FB: return Unicode_Category_LO;
		case 0x121FC: return Unicode_Category_LO;
		case 0x121FD: return Unicode_Category_LO;
		case 0x121FE: return Unicode_Category_LO;
		case 0x121FF: return Unicode_Category_LO;
		case 0x12200: return Unicode_Category_LO;
		case 0x12201: return Unicode_Category_LO;
		case 0x12202: return Unicode_Category_LO;
		case 0x12203: return Unicode_Category_LO;
		case 0x12204: return Unicode_Category_LO;
		case 0x12205: return Unicode_Category_LO;
		case 0x12206: return Unicode_Category_LO;
		case 0x12207: return Unicode_Category_LO;
		case 0x12208: return Unicode_Category_LO;
		case 0x12209: return Unicode_Category_LO;
		case 0x1220A: return Unicode_Category_LO;
		case 0x1220B: return Unicode_Category_LO;
		case 0x1220C: return Unicode_Category_LO;
		case 0x1220D: return Unicode_Category_LO;
		case 0x1220E: return Unicode_Category_LO;
		case 0x1220F: return Unicode_Category_LO;
		case 0x12210: return Unicode_Category_LO;
		case 0x12211: return Unicode_Category_LO;
		case 0x12212: return Unicode_Category_LO;
		case 0x12213: return Unicode_Category_LO;
		case 0x12214: return Unicode_Category_LO;
		case 0x12215: return Unicode_Category_LO;
		case 0x12216: return Unicode_Category_LO;
		case 0x12217: return Unicode_Category_LO;
		case 0x12218: return Unicode_Category_LO;
		case 0x12219: return Unicode_Category_LO;
		case 0x1221A: return Unicode_Category_LO;
		case 0x1221B: return Unicode_Category_LO;
		case 0x1221C: return Unicode_Category_LO;
		case 0x1221D: return Unicode_Category_LO;
		case 0x1221E: return Unicode_Category_LO;
		case 0x1221F: return Unicode_Category_LO;
		case 0x12220: return Unicode_Category_LO;
		case 0x12221: return Unicode_Category_LO;
		case 0x12222: return Unicode_Category_LO;
		case 0x12223: return Unicode_Category_LO;
		case 0x12224: return Unicode_Category_LO;
		case 0x12225: return Unicode_Category_LO;
		case 0x12226: return Unicode_Category_LO;
		case 0x12227: return Unicode_Category_LO;
		case 0x12228: return Unicode_Category_LO;
		case 0x12229: return Unicode_Category_LO;
		case 0x1222A: return Unicode_Category_LO;
		case 0x1222B: return Unicode_Category_LO;
		case 0x1222C: return Unicode_Category_LO;
		case 0x1222D: return Unicode_Category_LO;
		case 0x1222E: return Unicode_Category_LO;
		case 0x1222F: return Unicode_Category_LO;
		case 0x12230: return Unicode_Category_LO;
		case 0x12231: return Unicode_Category_LO;
		case 0x12232: return Unicode_Category_LO;
		case 0x12233: return Unicode_Category_LO;
		case 0x12234: return Unicode_Category_LO;
		case 0x12235: return Unicode_Category_LO;
		case 0x12236: return Unicode_Category_LO;
		case 0x12237: return Unicode_Category_LO;
		case 0x12238: return Unicode_Category_LO;
		case 0x12239: return Unicode_Category_LO;
		case 0x1223A: return Unicode_Category_LO;
		case 0x1223B: return Unicode_Category_LO;
		case 0x1223C: return Unicode_Category_LO;
		case 0x1223D: return Unicode_Category_LO;
		case 0x1223E: return Unicode_Category_LO;
		case 0x1223F: return Unicode_Category_LO;
		case 0x12240: return Unicode_Category_LO;
		case 0x12241: return Unicode_Category_LO;
		case 0x12242: return Unicode_Category_LO;
		case 0x12243: return Unicode_Category_LO;
		case 0x12244: return Unicode_Category_LO;
		case 0x12245: return Unicode_Category_LO;
		case 0x12246: return Unicode_Category_LO;
		case 0x12247: return Unicode_Category_LO;
		case 0x12248: return Unicode_Category_LO;
		case 0x12249: return Unicode_Category_LO;
		case 0x1224A: return Unicode_Category_LO;
		case 0x1224B: return Unicode_Category_LO;
		case 0x1224C: return Unicode_Category_LO;
		case 0x1224D: return Unicode_Category_LO;
		case 0x1224E: return Unicode_Category_LO;
		case 0x1224F: return Unicode_Category_LO;
		case 0x12250: return Unicode_Category_LO;
		case 0x12251: return Unicode_Category_LO;
		case 0x12252: return Unicode_Category_LO;
		case 0x12253: return Unicode_Category_LO;
		case 0x12254: return Unicode_Category_LO;
		case 0x12255: return Unicode_Category_LO;
		case 0x12256: return Unicode_Category_LO;
		case 0x12257: return Unicode_Category_LO;
		case 0x12258: return Unicode_Category_LO;
		case 0x12259: return Unicode_Category_LO;
		case 0x1225A: return Unicode_Category_LO;
		case 0x1225B: return Unicode_Category_LO;
		case 0x1225C: return Unicode_Category_LO;
		case 0x1225D: return Unicode_Category_LO;
		case 0x1225E: return Unicode_Category_LO;
		case 0x1225F: return Unicode_Category_LO;
		case 0x12260: return Unicode_Category_LO;
		case 0x12261: return Unicode_Category_LO;
		case 0x12262: return Unicode_Category_LO;
		case 0x12263: return Unicode_Category_LO;
		case 0x12264: return Unicode_Category_LO;
		case 0x12265: return Unicode_Category_LO;
		case 0x12266: return Unicode_Category_LO;
		case 0x12267: return Unicode_Category_LO;
		case 0x12268: return Unicode_Category_LO;
		case 0x12269: return Unicode_Category_LO;
		case 0x1226A: return Unicode_Category_LO;
		case 0x1226B: return Unicode_Category_LO;
		case 0x1226C: return Unicode_Category_LO;
		case 0x1226D: return Unicode_Category_LO;
		case 0x1226E: return Unicode_Category_LO;
		case 0x1226F: return Unicode_Category_LO;
		case 0x12270: return Unicode_Category_LO;
		case 0x12271: return Unicode_Category_LO;
		case 0x12272: return Unicode_Category_LO;
		case 0x12273: return Unicode_Category_LO;
		case 0x12274: return Unicode_Category_LO;
		case 0x12275: return Unicode_Category_LO;
		case 0x12276: return Unicode_Category_LO;
		case 0x12277: return Unicode_Category_LO;
		case 0x12278: return Unicode_Category_LO;
		case 0x12279: return Unicode_Category_LO;
		case 0x1227A: return Unicode_Category_LO;
		case 0x1227B: return Unicode_Category_LO;
		case 0x1227C: return Unicode_Category_LO;
		case 0x1227D: return Unicode_Category_LO;
		case 0x1227E: return Unicode_Category_LO;
		case 0x1227F: return Unicode_Category_LO;
		case 0x12280: return Unicode_Category_LO;
		case 0x12281: return Unicode_Category_LO;
		case 0x12282: return Unicode_Category_LO;
		case 0x12283: return Unicode_Category_LO;
		case 0x12284: return Unicode_Category_LO;
		case 0x12285: return Unicode_Category_LO;
		case 0x12286: return Unicode_Category_LO;
		case 0x12287: return Unicode_Category_LO;
		case 0x12288: return Unicode_Category_LO;
		case 0x12289: return Unicode_Category_LO;
		case 0x1228A: return Unicode_Category_LO;
		case 0x1228B: return Unicode_Category_LO;
		case 0x1228C: return Unicode_Category_LO;
		case 0x1228D: return Unicode_Category_LO;
		case 0x1228E: return Unicode_Category_LO;
		case 0x1228F: return Unicode_Category_LO;
		case 0x12290: return Unicode_Category_LO;
		case 0x12291: return Unicode_Category_LO;
		case 0x12292: return Unicode_Category_LO;
		case 0x12293: return Unicode_Category_LO;
		case 0x12294: return Unicode_Category_LO;
		case 0x12295: return Unicode_Category_LO;
		case 0x12296: return Unicode_Category_LO;
		case 0x12297: return Unicode_Category_LO;
		case 0x12298: return Unicode_Category_LO;
		case 0x12299: return Unicode_Category_LO;
		case 0x1229A: return Unicode_Category_LO;
		case 0x1229B: return Unicode_Category_LO;
		case 0x1229C: return Unicode_Category_LO;
		case 0x1229D: return Unicode_Category_LO;
		case 0x1229E: return Unicode_Category_LO;
		case 0x1229F: return Unicode_Category_LO;
		case 0x122A0: return Unicode_Category_LO;
		case 0x122A1: return Unicode_Category_LO;
		case 0x122A2: return Unicode_Category_LO;
		case 0x122A3: return Unicode_Category_LO;
		case 0x122A4: return Unicode_Category_LO;
		case 0x122A5: return Unicode_Category_LO;
		case 0x122A6: return Unicode_Category_LO;
		case 0x122A7: return Unicode_Category_LO;
		case 0x122A8: return Unicode_Category_LO;
		case 0x122A9: return Unicode_Category_LO;
		case 0x122AA: return Unicode_Category_LO;
		case 0x122AB: return Unicode_Category_LO;
		case 0x122AC: return Unicode_Category_LO;
		case 0x122AD: return Unicode_Category_LO;
		case 0x122AE: return Unicode_Category_LO;
		case 0x122AF: return Unicode_Category_LO;
		case 0x122B0: return Unicode_Category_LO;
		case 0x122B1: return Unicode_Category_LO;
		case 0x122B2: return Unicode_Category_LO;
		case 0x122B3: return Unicode_Category_LO;
		case 0x122B4: return Unicode_Category_LO;
		case 0x122B5: return Unicode_Category_LO;
		case 0x122B6: return Unicode_Category_LO;
		case 0x122B7: return Unicode_Category_LO;
		case 0x122B8: return Unicode_Category_LO;
		case 0x122B9: return Unicode_Category_LO;
		case 0x122BA: return Unicode_Category_LO;
		case 0x122BB: return Unicode_Category_LO;
		case 0x122BC: return Unicode_Category_LO;
		case 0x122BD: return Unicode_Category_LO;
		case 0x122BE: return Unicode_Category_LO;
		case 0x122BF: return Unicode_Category_LO;
		case 0x122C0: return Unicode_Category_LO;
		case 0x122C1: return Unicode_Category_LO;
		case 0x122C2: return Unicode_Category_LO;
		case 0x122C3: return Unicode_Category_LO;
		case 0x122C4: return Unicode_Category_LO;
		case 0x122C5: return Unicode_Category_LO;
		case 0x122C6: return Unicode_Category_LO;
		case 0x122C7: return Unicode_Category_LO;
		case 0x122C8: return Unicode_Category_LO;
		case 0x122C9: return Unicode_Category_LO;
		case 0x122CA: return Unicode_Category_LO;
		case 0x122CB: return Unicode_Category_LO;
		case 0x122CC: return Unicode_Category_LO;
		case 0x122CD: return Unicode_Category_LO;
		case 0x122CE: return Unicode_Category_LO;
		case 0x122CF: return Unicode_Category_LO;
		case 0x122D0: return Unicode_Category_LO;
		case 0x122D1: return Unicode_Category_LO;
		case 0x122D2: return Unicode_Category_LO;
		case 0x122D3: return Unicode_Category_LO;
		case 0x122D4: return Unicode_Category_LO;
		case 0x122D5: return Unicode_Category_LO;
		case 0x122D6: return Unicode_Category_LO;
		case 0x122D7: return Unicode_Category_LO;
		case 0x122D8: return Unicode_Category_LO;
		case 0x122D9: return Unicode_Category_LO;
		case 0x122DA: return Unicode_Category_LO;
		case 0x122DB: return Unicode_Category_LO;
		case 0x122DC: return Unicode_Category_LO;
		case 0x122DD: return Unicode_Category_LO;
		case 0x122DE: return Unicode_Category_LO;
		case 0x122DF: return Unicode_Category_LO;
		case 0x122E0: return Unicode_Category_LO;
		case 0x122E1: return Unicode_Category_LO;
		case 0x122E2: return Unicode_Category_LO;
		case 0x122E3: return Unicode_Category_LO;
		case 0x122E4: return Unicode_Category_LO;
		case 0x122E5: return Unicode_Category_LO;
		case 0x122E6: return Unicode_Category_LO;
		case 0x122E7: return Unicode_Category_LO;
		case 0x122E8: return Unicode_Category_LO;
		case 0x122E9: return Unicode_Category_LO;
		case 0x122EA: return Unicode_Category_LO;
		case 0x122EB: return Unicode_Category_LO;
		case 0x122EC: return Unicode_Category_LO;
		case 0x122ED: return Unicode_Category_LO;
		case 0x122EE: return Unicode_Category_LO;
		case 0x122EF: return Unicode_Category_LO;
		case 0x122F0: return Unicode_Category_LO;
		case 0x122F1: return Unicode_Category_LO;
		case 0x122F2: return Unicode_Category_LO;
		case 0x122F3: return Unicode_Category_LO;
		case 0x122F4: return Unicode_Category_LO;
		case 0x122F5: return Unicode_Category_LO;
		case 0x122F6: return Unicode_Category_LO;
		case 0x122F7: return Unicode_Category_LO;
		case 0x122F8: return Unicode_Category_LO;
		case 0x122F9: return Unicode_Category_LO;
		case 0x122FA: return Unicode_Category_LO;
		case 0x122FB: return Unicode_Category_LO;
		case 0x122FC: return Unicode_Category_LO;
		case 0x122FD: return Unicode_Category_LO;
		case 0x122FE: return Unicode_Category_LO;
		case 0x122FF: return Unicode_Category_LO;
		case 0x12300: return Unicode_Category_LO;
		case 0x12301: return Unicode_Category_LO;
		case 0x12302: return Unicode_Category_LO;
		case 0x12303: return Unicode_Category_LO;
		case 0x12304: return Unicode_Category_LO;
		case 0x12305: return Unicode_Category_LO;
		case 0x12306: return Unicode_Category_LO;
		case 0x12307: return Unicode_Category_LO;
		case 0x12308: return Unicode_Category_LO;
		case 0x12309: return Unicode_Category_LO;
		case 0x1230A: return Unicode_Category_LO;
		case 0x1230B: return Unicode_Category_LO;
		case 0x1230C: return Unicode_Category_LO;
		case 0x1230D: return Unicode_Category_LO;
		case 0x1230E: return Unicode_Category_LO;
		case 0x1230F: return Unicode_Category_LO;
		case 0x12310: return Unicode_Category_LO;
		case 0x12311: return Unicode_Category_LO;
		case 0x12312: return Unicode_Category_LO;
		case 0x12313: return Unicode_Category_LO;
		case 0x12314: return Unicode_Category_LO;
		case 0x12315: return Unicode_Category_LO;
		case 0x12316: return Unicode_Category_LO;
		case 0x12317: return Unicode_Category_LO;
		case 0x12318: return Unicode_Category_LO;
		case 0x12319: return Unicode_Category_LO;
		case 0x1231A: return Unicode_Category_LO;
		case 0x1231B: return Unicode_Category_LO;
		case 0x1231C: return Unicode_Category_LO;
		case 0x1231D: return Unicode_Category_LO;
		case 0x1231E: return Unicode_Category_LO;
		case 0x1231F: return Unicode_Category_LO;
		case 0x12320: return Unicode_Category_LO;
		case 0x12321: return Unicode_Category_LO;
		case 0x12322: return Unicode_Category_LO;
		case 0x12323: return Unicode_Category_LO;
		case 0x12324: return Unicode_Category_LO;
		case 0x12325: return Unicode_Category_LO;
		case 0x12326: return Unicode_Category_LO;
		case 0x12327: return Unicode_Category_LO;
		case 0x12328: return Unicode_Category_LO;
		case 0x12329: return Unicode_Category_LO;
		case 0x1232A: return Unicode_Category_LO;
		case 0x1232B: return Unicode_Category_LO;
		case 0x1232C: return Unicode_Category_LO;
		case 0x1232D: return Unicode_Category_LO;
		case 0x1232E: return Unicode_Category_LO;
		case 0x1232F: return Unicode_Category_LO;
		case 0x12330: return Unicode_Category_LO;
		case 0x12331: return Unicode_Category_LO;
		case 0x12332: return Unicode_Category_LO;
		case 0x12333: return Unicode_Category_LO;
		case 0x12334: return Unicode_Category_LO;
		case 0x12335: return Unicode_Category_LO;
		case 0x12336: return Unicode_Category_LO;
		case 0x12337: return Unicode_Category_LO;
		case 0x12338: return Unicode_Category_LO;
		case 0x12339: return Unicode_Category_LO;
		case 0x1233A: return Unicode_Category_LO;
		case 0x1233B: return Unicode_Category_LO;
		case 0x1233C: return Unicode_Category_LO;
		case 0x1233D: return Unicode_Category_LO;
		case 0x1233E: return Unicode_Category_LO;
		case 0x1233F: return Unicode_Category_LO;
		case 0x12340: return Unicode_Category_LO;
		case 0x12341: return Unicode_Category_LO;
		case 0x12342: return Unicode_Category_LO;
		case 0x12343: return Unicode_Category_LO;
		case 0x12344: return Unicode_Category_LO;
		case 0x12345: return Unicode_Category_LO;
		case 0x12346: return Unicode_Category_LO;
		case 0x12347: return Unicode_Category_LO;
		case 0x12348: return Unicode_Category_LO;
		case 0x12349: return Unicode_Category_LO;
		case 0x1234A: return Unicode_Category_LO;
		case 0x1234B: return Unicode_Category_LO;
		case 0x1234C: return Unicode_Category_LO;
		case 0x1234D: return Unicode_Category_LO;
		case 0x1234E: return Unicode_Category_LO;
		case 0x1234F: return Unicode_Category_LO;
		case 0x12350: return Unicode_Category_LO;
		case 0x12351: return Unicode_Category_LO;
		case 0x12352: return Unicode_Category_LO;
		case 0x12353: return Unicode_Category_LO;
		case 0x12354: return Unicode_Category_LO;
		case 0x12355: return Unicode_Category_LO;
		case 0x12356: return Unicode_Category_LO;
		case 0x12357: return Unicode_Category_LO;
		case 0x12358: return Unicode_Category_LO;
		case 0x12359: return Unicode_Category_LO;
		case 0x1235A: return Unicode_Category_LO;
		case 0x1235B: return Unicode_Category_LO;
		case 0x1235C: return Unicode_Category_LO;
		case 0x1235D: return Unicode_Category_LO;
		case 0x1235E: return Unicode_Category_LO;
		case 0x1235F: return Unicode_Category_LO;
		case 0x12360: return Unicode_Category_LO;
		case 0x12361: return Unicode_Category_LO;
		case 0x12362: return Unicode_Category_LO;
		case 0x12363: return Unicode_Category_LO;
		case 0x12364: return Unicode_Category_LO;
		case 0x12365: return Unicode_Category_LO;
		case 0x12366: return Unicode_Category_LO;
		case 0x12367: return Unicode_Category_LO;
		case 0x12368: return Unicode_Category_LO;
		case 0x12369: return Unicode_Category_LO;
		case 0x1236A: return Unicode_Category_LO;
		case 0x1236B: return Unicode_Category_LO;
		case 0x1236C: return Unicode_Category_LO;
		case 0x1236D: return Unicode_Category_LO;
		case 0x1236E: return Unicode_Category_LO;
		case 0x1236F: return Unicode_Category_LO;
		case 0x12370: return Unicode_Category_LO;
		case 0x12371: return Unicode_Category_LO;
		case 0x12372: return Unicode_Category_LO;
		case 0x12373: return Unicode_Category_LO;
		case 0x12374: return Unicode_Category_LO;
		case 0x12375: return Unicode_Category_LO;
		case 0x12376: return Unicode_Category_LO;
		case 0x12377: return Unicode_Category_LO;
		case 0x12378: return Unicode_Category_LO;
		case 0x12379: return Unicode_Category_LO;
		case 0x1237A: return Unicode_Category_LO;
		case 0x1237B: return Unicode_Category_LO;
		case 0x1237C: return Unicode_Category_LO;
		case 0x1237D: return Unicode_Category_LO;
		case 0x1237E: return Unicode_Category_LO;
		case 0x1237F: return Unicode_Category_LO;
		case 0x12380: return Unicode_Category_LO;
		case 0x12381: return Unicode_Category_LO;
		case 0x12382: return Unicode_Category_LO;
		case 0x12383: return Unicode_Category_LO;
		case 0x12384: return Unicode_Category_LO;
		case 0x12385: return Unicode_Category_LO;
		case 0x12386: return Unicode_Category_LO;
		case 0x12387: return Unicode_Category_LO;
		case 0x12388: return Unicode_Category_LO;
		case 0x12389: return Unicode_Category_LO;
		case 0x1238A: return Unicode_Category_LO;
		case 0x1238B: return Unicode_Category_LO;
		case 0x1238C: return Unicode_Category_LO;
		case 0x1238D: return Unicode_Category_LO;
		case 0x1238E: return Unicode_Category_LO;
		case 0x1238F: return Unicode_Category_LO;
		case 0x12390: return Unicode_Category_LO;
		case 0x12391: return Unicode_Category_LO;
		case 0x12392: return Unicode_Category_LO;
		case 0x12393: return Unicode_Category_LO;
		case 0x12394: return Unicode_Category_LO;
		case 0x12395: return Unicode_Category_LO;
		case 0x12396: return Unicode_Category_LO;
		case 0x12397: return Unicode_Category_LO;
		case 0x12398: return Unicode_Category_LO;
		case 0x12399: return Unicode_Category_LO;
		case 0x12400: return Unicode_Category_NL;
		case 0x12401: return Unicode_Category_NL;
		case 0x12402: return Unicode_Category_NL;
		case 0x12403: return Unicode_Category_NL;
		case 0x12404: return Unicode_Category_NL;
		case 0x12405: return Unicode_Category_NL;
		case 0x12406: return Unicode_Category_NL;
		case 0x12407: return Unicode_Category_NL;
		case 0x12408: return Unicode_Category_NL;
		case 0x12409: return Unicode_Category_NL;
		case 0x1240A: return Unicode_Category_NL;
		case 0x1240B: return Unicode_Category_NL;
		case 0x1240C: return Unicode_Category_NL;
		case 0x1240D: return Unicode_Category_NL;
		case 0x1240E: return Unicode_Category_NL;
		case 0x1240F: return Unicode_Category_NL;
		case 0x12410: return Unicode_Category_NL;
		case 0x12411: return Unicode_Category_NL;
		case 0x12412: return Unicode_Category_NL;
		case 0x12413: return Unicode_Category_NL;
		case 0x12414: return Unicode_Category_NL;
		case 0x12415: return Unicode_Category_NL;
		case 0x12416: return Unicode_Category_NL;
		case 0x12417: return Unicode_Category_NL;
		case 0x12418: return Unicode_Category_NL;
		case 0x12419: return Unicode_Category_NL;
		case 0x1241A: return Unicode_Category_NL;
		case 0x1241B: return Unicode_Category_NL;
		case 0x1241C: return Unicode_Category_NL;
		case 0x1241D: return Unicode_Category_NL;
		case 0x1241E: return Unicode_Category_NL;
		case 0x1241F: return Unicode_Category_NL;
		case 0x12420: return Unicode_Category_NL;
		case 0x12421: return Unicode_Category_NL;
		case 0x12422: return Unicode_Category_NL;
		case 0x12423: return Unicode_Category_NL;
		case 0x12424: return Unicode_Category_NL;
		case 0x12425: return Unicode_Category_NL;
		case 0x12426: return Unicode_Category_NL;
		case 0x12427: return Unicode_Category_NL;
		case 0x12428: return Unicode_Category_NL;
		case 0x12429: return Unicode_Category_NL;
		case 0x1242A: return Unicode_Category_NL;
		case 0x1242B: return Unicode_Category_NL;
		case 0x1242C: return Unicode_Category_NL;
		case 0x1242D: return Unicode_Category_NL;
		case 0x1242E: return Unicode_Category_NL;
		case 0x1242F: return Unicode_Category_NL;
		case 0x12430: return Unicode_Category_NL;
		case 0x12431: return Unicode_Category_NL;
		case 0x12432: return Unicode_Category_NL;
		case 0x12433: return Unicode_Category_NL;
		case 0x12434: return Unicode_Category_NL;
		case 0x12435: return Unicode_Category_NL;
		case 0x12436: return Unicode_Category_NL;
		case 0x12437: return Unicode_Category_NL;
		case 0x12438: return Unicode_Category_NL;
		case 0x12439: return Unicode_Category_NL;
		case 0x1243A: return Unicode_Category_NL;
		case 0x1243B: return Unicode_Category_NL;
		case 0x1243C: return Unicode_Category_NL;
		case 0x1243D: return Unicode_Category_NL;
		case 0x1243E: return Unicode_Category_NL;
		case 0x1243F: return Unicode_Category_NL;
		case 0x12440: return Unicode_Category_NL;
		case 0x12441: return Unicode_Category_NL;
		case 0x12442: return Unicode_Category_NL;
		case 0x12443: return Unicode_Category_NL;
		case 0x12444: return Unicode_Category_NL;
		case 0x12445: return Unicode_Category_NL;
		case 0x12446: return Unicode_Category_NL;
		case 0x12447: return Unicode_Category_NL;
		case 0x12448: return Unicode_Category_NL;
		case 0x12449: return Unicode_Category_NL;
		case 0x1244A: return Unicode_Category_NL;
		case 0x1244B: return Unicode_Category_NL;
		case 0x1244C: return Unicode_Category_NL;
		case 0x1244D: return Unicode_Category_NL;
		case 0x1244E: return Unicode_Category_NL;
		case 0x1244F: return Unicode_Category_NL;
		case 0x12450: return Unicode_Category_NL;
		case 0x12451: return Unicode_Category_NL;
		case 0x12452: return Unicode_Category_NL;
		case 0x12453: return Unicode_Category_NL;
		case 0x12454: return Unicode_Category_NL;
		case 0x12455: return Unicode_Category_NL;
		case 0x12456: return Unicode_Category_NL;
		case 0x12457: return Unicode_Category_NL;
		case 0x12458: return Unicode_Category_NL;
		case 0x12459: return Unicode_Category_NL;
		case 0x1245A: return Unicode_Category_NL;
		case 0x1245B: return Unicode_Category_NL;
		case 0x1245C: return Unicode_Category_NL;
		case 0x1245D: return Unicode_Category_NL;
		case 0x1245E: return Unicode_Category_NL;
		case 0x1245F: return Unicode_Category_NL;
		case 0x12460: return Unicode_Category_NL;
		case 0x12461: return Unicode_Category_NL;
		case 0x12462: return Unicode_Category_NL;
		case 0x12463: return Unicode_Category_NL;
		case 0x12464: return Unicode_Category_NL;
		case 0x12465: return Unicode_Category_NL;
		case 0x12466: return Unicode_Category_NL;
		case 0x12467: return Unicode_Category_NL;
		case 0x12468: return Unicode_Category_NL;
		case 0x12469: return Unicode_Category_NL;
		case 0x1246A: return Unicode_Category_NL;
		case 0x1246B: return Unicode_Category_NL;
		case 0x1246C: return Unicode_Category_NL;
		case 0x1246D: return Unicode_Category_NL;
		case 0x1246E: return Unicode_Category_NL;
		case 0x12470: return Unicode_Category_PO;
		case 0x12471: return Unicode_Category_PO;
		case 0x12472: return Unicode_Category_PO;
		case 0x12473: return Unicode_Category_PO;
		case 0x12474: return Unicode_Category_PO;
		case 0x12480: return Unicode_Category_LO;
		case 0x12481: return Unicode_Category_LO;
		case 0x12482: return Unicode_Category_LO;
		case 0x12483: return Unicode_Category_LO;
		case 0x12484: return Unicode_Category_LO;
		case 0x12485: return Unicode_Category_LO;
		case 0x12486: return Unicode_Category_LO;
		case 0x12487: return Unicode_Category_LO;
		case 0x12488: return Unicode_Category_LO;
		case 0x12489: return Unicode_Category_LO;
		case 0x1248A: return Unicode_Category_LO;
		case 0x1248B: return Unicode_Category_LO;
		case 0x1248C: return Unicode_Category_LO;
		case 0x1248D: return Unicode_Category_LO;
		case 0x1248E: return Unicode_Category_LO;
		case 0x1248F: return Unicode_Category_LO;
		case 0x12490: return Unicode_Category_LO;
		case 0x12491: return Unicode_Category_LO;
		case 0x12492: return Unicode_Category_LO;
		case 0x12493: return Unicode_Category_LO;
		case 0x12494: return Unicode_Category_LO;
		case 0x12495: return Unicode_Category_LO;
		case 0x12496: return Unicode_Category_LO;
		case 0x12497: return Unicode_Category_LO;
		case 0x12498: return Unicode_Category_LO;
		case 0x12499: return Unicode_Category_LO;
		case 0x1249A: return Unicode_Category_LO;
		case 0x1249B: return Unicode_Category_LO;
		case 0x1249C: return Unicode_Category_LO;
		case 0x1249D: return Unicode_Category_LO;
		case 0x1249E: return Unicode_Category_LO;
		case 0x1249F: return Unicode_Category_LO;
		case 0x124A0: return Unicode_Category_LO;
		case 0x124A1: return Unicode_Category_LO;
		case 0x124A2: return Unicode_Category_LO;
		case 0x124A3: return Unicode_Category_LO;
		case 0x124A4: return Unicode_Category_LO;
		case 0x124A5: return Unicode_Category_LO;
		case 0x124A6: return Unicode_Category_LO;
		case 0x124A7: return Unicode_Category_LO;
		case 0x124A8: return Unicode_Category_LO;
		case 0x124A9: return Unicode_Category_LO;
		case 0x124AA: return Unicode_Category_LO;
		case 0x124AB: return Unicode_Category_LO;
		case 0x124AC: return Unicode_Category_LO;
		case 0x124AD: return Unicode_Category_LO;
		case 0x124AE: return Unicode_Category_LO;
		case 0x124AF: return Unicode_Category_LO;
		case 0x124B0: return Unicode_Category_LO;
		case 0x124B1: return Unicode_Category_LO;
		case 0x124B2: return Unicode_Category_LO;
		case 0x124B3: return Unicode_Category_LO;
		case 0x124B4: return Unicode_Category_LO;
		case 0x124B5: return Unicode_Category_LO;
		case 0x124B6: return Unicode_Category_LO;
		case 0x124B7: return Unicode_Category_LO;
		case 0x124B8: return Unicode_Category_LO;
		case 0x124B9: return Unicode_Category_LO;
		case 0x124BA: return Unicode_Category_LO;
		case 0x124BB: return Unicode_Category_LO;
		case 0x124BC: return Unicode_Category_LO;
		case 0x124BD: return Unicode_Category_LO;
		case 0x124BE: return Unicode_Category_LO;
		case 0x124BF: return Unicode_Category_LO;
		case 0x124C0: return Unicode_Category_LO;
		case 0x124C1: return Unicode_Category_LO;
		case 0x124C2: return Unicode_Category_LO;
		case 0x124C3: return Unicode_Category_LO;
		case 0x124C4: return Unicode_Category_LO;
		case 0x124C5: return Unicode_Category_LO;
		case 0x124C6: return Unicode_Category_LO;
		case 0x124C7: return Unicode_Category_LO;
		case 0x124C8: return Unicode_Category_LO;
		case 0x124C9: return Unicode_Category_LO;
		case 0x124CA: return Unicode_Category_LO;
		case 0x124CB: return Unicode_Category_LO;
		case 0x124CC: return Unicode_Category_LO;
		case 0x124CD: return Unicode_Category_LO;
		case 0x124CE: return Unicode_Category_LO;
		case 0x124CF: return Unicode_Category_LO;
		case 0x124D0: return Unicode_Category_LO;
		case 0x124D1: return Unicode_Category_LO;
		case 0x124D2: return Unicode_Category_LO;
		case 0x124D3: return Unicode_Category_LO;
		case 0x124D4: return Unicode_Category_LO;
		case 0x124D5: return Unicode_Category_LO;
		case 0x124D6: return Unicode_Category_LO;
		case 0x124D7: return Unicode_Category_LO;
		case 0x124D8: return Unicode_Category_LO;
		case 0x124D9: return Unicode_Category_LO;
		case 0x124DA: return Unicode_Category_LO;
		case 0x124DB: return Unicode_Category_LO;
		case 0x124DC: return Unicode_Category_LO;
		case 0x124DD: return Unicode_Category_LO;
		case 0x124DE: return Unicode_Category_LO;
		case 0x124DF: return Unicode_Category_LO;
		case 0x124E0: return Unicode_Category_LO;
		case 0x124E1: return Unicode_Category_LO;
		case 0x124E2: return Unicode_Category_LO;
		case 0x124E3: return Unicode_Category_LO;
		case 0x124E4: return Unicode_Category_LO;
		case 0x124E5: return Unicode_Category_LO;
		case 0x124E6: return Unicode_Category_LO;
		case 0x124E7: return Unicode_Category_LO;
		case 0x124E8: return Unicode_Category_LO;
		case 0x124E9: return Unicode_Category_LO;
		case 0x124EA: return Unicode_Category_LO;
		case 0x124EB: return Unicode_Category_LO;
		case 0x124EC: return Unicode_Category_LO;
		case 0x124ED: return Unicode_Category_LO;
		case 0x124EE: return Unicode_Category_LO;
		case 0x124EF: return Unicode_Category_LO;
		case 0x124F0: return Unicode_Category_LO;
		case 0x124F1: return Unicode_Category_LO;
		case 0x124F2: return Unicode_Category_LO;
		case 0x124F3: return Unicode_Category_LO;
		case 0x124F4: return Unicode_Category_LO;
		case 0x124F5: return Unicode_Category_LO;
		case 0x124F6: return Unicode_Category_LO;
		case 0x124F7: return Unicode_Category_LO;
		case 0x124F8: return Unicode_Category_LO;
		case 0x124F9: return Unicode_Category_LO;
		case 0x124FA: return Unicode_Category_LO;
		case 0x124FB: return Unicode_Category_LO;
		case 0x124FC: return Unicode_Category_LO;
		case 0x124FD: return Unicode_Category_LO;
		case 0x124FE: return Unicode_Category_LO;
		case 0x124FF: return Unicode_Category_LO;
		case 0x12500: return Unicode_Category_LO;
		case 0x12501: return Unicode_Category_LO;
		case 0x12502: return Unicode_Category_LO;
		case 0x12503: return Unicode_Category_LO;
		case 0x12504: return Unicode_Category_LO;
		case 0x12505: return Unicode_Category_LO;
		case 0x12506: return Unicode_Category_LO;
		case 0x12507: return Unicode_Category_LO;
		case 0x12508: return Unicode_Category_LO;
		case 0x12509: return Unicode_Category_LO;
		case 0x1250A: return Unicode_Category_LO;
		case 0x1250B: return Unicode_Category_LO;
		case 0x1250C: return Unicode_Category_LO;
		case 0x1250D: return Unicode_Category_LO;
		case 0x1250E: return Unicode_Category_LO;
		case 0x1250F: return Unicode_Category_LO;
		case 0x12510: return Unicode_Category_LO;
		case 0x12511: return Unicode_Category_LO;
		case 0x12512: return Unicode_Category_LO;
		case 0x12513: return Unicode_Category_LO;
		case 0x12514: return Unicode_Category_LO;
		case 0x12515: return Unicode_Category_LO;
		case 0x12516: return Unicode_Category_LO;
		case 0x12517: return Unicode_Category_LO;
		case 0x12518: return Unicode_Category_LO;
		case 0x12519: return Unicode_Category_LO;
		case 0x1251A: return Unicode_Category_LO;
		case 0x1251B: return Unicode_Category_LO;
		case 0x1251C: return Unicode_Category_LO;
		case 0x1251D: return Unicode_Category_LO;
		case 0x1251E: return Unicode_Category_LO;
		case 0x1251F: return Unicode_Category_LO;
		case 0x12520: return Unicode_Category_LO;
		case 0x12521: return Unicode_Category_LO;
		case 0x12522: return Unicode_Category_LO;
		case 0x12523: return Unicode_Category_LO;
		case 0x12524: return Unicode_Category_LO;
		case 0x12525: return Unicode_Category_LO;
		case 0x12526: return Unicode_Category_LO;
		case 0x12527: return Unicode_Category_LO;
		case 0x12528: return Unicode_Category_LO;
		case 0x12529: return Unicode_Category_LO;
		case 0x1252A: return Unicode_Category_LO;
		case 0x1252B: return Unicode_Category_LO;
		case 0x1252C: return Unicode_Category_LO;
		case 0x1252D: return Unicode_Category_LO;
		case 0x1252E: return Unicode_Category_LO;
		case 0x1252F: return Unicode_Category_LO;
		case 0x12530: return Unicode_Category_LO;
		case 0x12531: return Unicode_Category_LO;
		case 0x12532: return Unicode_Category_LO;
		case 0x12533: return Unicode_Category_LO;
		case 0x12534: return Unicode_Category_LO;
		case 0x12535: return Unicode_Category_LO;
		case 0x12536: return Unicode_Category_LO;
		case 0x12537: return Unicode_Category_LO;
		case 0x12538: return Unicode_Category_LO;
		case 0x12539: return Unicode_Category_LO;
		case 0x1253A: return Unicode_Category_LO;
		case 0x1253B: return Unicode_Category_LO;
		case 0x1253C: return Unicode_Category_LO;
		case 0x1253D: return Unicode_Category_LO;
		case 0x1253E: return Unicode_Category_LO;
		case 0x1253F: return Unicode_Category_LO;
		case 0x12540: return Unicode_Category_LO;
		case 0x12541: return Unicode_Category_LO;
		case 0x12542: return Unicode_Category_LO;
		case 0x12543: return Unicode_Category_LO;
		case 0x13000: return Unicode_Category_LO;
		case 0x13001: return Unicode_Category_LO;
		case 0x13002: return Unicode_Category_LO;
		case 0x13003: return Unicode_Category_LO;
		case 0x13004: return Unicode_Category_LO;
		case 0x13005: return Unicode_Category_LO;
		case 0x13006: return Unicode_Category_LO;
		case 0x13007: return Unicode_Category_LO;
		case 0x13008: return Unicode_Category_LO;
		case 0x13009: return Unicode_Category_LO;
		case 0x1300A: return Unicode_Category_LO;
		case 0x1300B: return Unicode_Category_LO;
		case 0x1300C: return Unicode_Category_LO;
		case 0x1300D: return Unicode_Category_LO;
		case 0x1300E: return Unicode_Category_LO;
		case 0x1300F: return Unicode_Category_LO;
		case 0x13010: return Unicode_Category_LO;
		case 0x13011: return Unicode_Category_LO;
		case 0x13012: return Unicode_Category_LO;
		case 0x13013: return Unicode_Category_LO;
		case 0x13014: return Unicode_Category_LO;
		case 0x13015: return Unicode_Category_LO;
		case 0x13016: return Unicode_Category_LO;
		case 0x13017: return Unicode_Category_LO;
		case 0x13018: return Unicode_Category_LO;
		case 0x13019: return Unicode_Category_LO;
		case 0x1301A: return Unicode_Category_LO;
		case 0x1301B: return Unicode_Category_LO;
		case 0x1301C: return Unicode_Category_LO;
		case 0x1301D: return Unicode_Category_LO;
		case 0x1301E: return Unicode_Category_LO;
		case 0x1301F: return Unicode_Category_LO;
		case 0x13020: return Unicode_Category_LO;
		case 0x13021: return Unicode_Category_LO;
		case 0x13022: return Unicode_Category_LO;
		case 0x13023: return Unicode_Category_LO;
		case 0x13024: return Unicode_Category_LO;
		case 0x13025: return Unicode_Category_LO;
		case 0x13026: return Unicode_Category_LO;
		case 0x13027: return Unicode_Category_LO;
		case 0x13028: return Unicode_Category_LO;
		case 0x13029: return Unicode_Category_LO;
		case 0x1302A: return Unicode_Category_LO;
		case 0x1302B: return Unicode_Category_LO;
		case 0x1302C: return Unicode_Category_LO;
		case 0x1302D: return Unicode_Category_LO;
		case 0x1302E: return Unicode_Category_LO;
		case 0x1302F: return Unicode_Category_LO;
		case 0x13030: return Unicode_Category_LO;
		case 0x13031: return Unicode_Category_LO;
		case 0x13032: return Unicode_Category_LO;
		case 0x13033: return Unicode_Category_LO;
		case 0x13034: return Unicode_Category_LO;
		case 0x13035: return Unicode_Category_LO;
		case 0x13036: return Unicode_Category_LO;
		case 0x13037: return Unicode_Category_LO;
		case 0x13038: return Unicode_Category_LO;
		case 0x13039: return Unicode_Category_LO;
		case 0x1303A: return Unicode_Category_LO;
		case 0x1303B: return Unicode_Category_LO;
		case 0x1303C: return Unicode_Category_LO;
		case 0x1303D: return Unicode_Category_LO;
		case 0x1303E: return Unicode_Category_LO;
		case 0x1303F: return Unicode_Category_LO;
		case 0x13040: return Unicode_Category_LO;
		case 0x13041: return Unicode_Category_LO;
		case 0x13042: return Unicode_Category_LO;
		case 0x13043: return Unicode_Category_LO;
		case 0x13044: return Unicode_Category_LO;
		case 0x13045: return Unicode_Category_LO;
		case 0x13046: return Unicode_Category_LO;
		case 0x13047: return Unicode_Category_LO;
		case 0x13048: return Unicode_Category_LO;
		case 0x13049: return Unicode_Category_LO;
		case 0x1304A: return Unicode_Category_LO;
		case 0x1304B: return Unicode_Category_LO;
		case 0x1304C: return Unicode_Category_LO;
		case 0x1304D: return Unicode_Category_LO;
		case 0x1304E: return Unicode_Category_LO;
		case 0x1304F: return Unicode_Category_LO;
		case 0x13050: return Unicode_Category_LO;
		case 0x13051: return Unicode_Category_LO;
		case 0x13052: return Unicode_Category_LO;
		case 0x13053: return Unicode_Category_LO;
		case 0x13054: return Unicode_Category_LO;
		case 0x13055: return Unicode_Category_LO;
		case 0x13056: return Unicode_Category_LO;
		case 0x13057: return Unicode_Category_LO;
		case 0x13058: return Unicode_Category_LO;
		case 0x13059: return Unicode_Category_LO;
		case 0x1305A: return Unicode_Category_LO;
		case 0x1305B: return Unicode_Category_LO;
		case 0x1305C: return Unicode_Category_LO;
		case 0x1305D: return Unicode_Category_LO;
		case 0x1305E: return Unicode_Category_LO;
		case 0x1305F: return Unicode_Category_LO;
		case 0x13060: return Unicode_Category_LO;
		case 0x13061: return Unicode_Category_LO;
		case 0x13062: return Unicode_Category_LO;
		case 0x13063: return Unicode_Category_LO;
		case 0x13064: return Unicode_Category_LO;
		case 0x13065: return Unicode_Category_LO;
		case 0x13066: return Unicode_Category_LO;
		case 0x13067: return Unicode_Category_LO;
		case 0x13068: return Unicode_Category_LO;
		case 0x13069: return Unicode_Category_LO;
		case 0x1306A: return Unicode_Category_LO;
		case 0x1306B: return Unicode_Category_LO;
		case 0x1306C: return Unicode_Category_LO;
		case 0x1306D: return Unicode_Category_LO;
		case 0x1306E: return Unicode_Category_LO;
		case 0x1306F: return Unicode_Category_LO;
		case 0x13070: return Unicode_Category_LO;
		case 0x13071: return Unicode_Category_LO;
		case 0x13072: return Unicode_Category_LO;
		case 0x13073: return Unicode_Category_LO;
		case 0x13074: return Unicode_Category_LO;
		case 0x13075: return Unicode_Category_LO;
		case 0x13076: return Unicode_Category_LO;
		case 0x13077: return Unicode_Category_LO;
		case 0x13078: return Unicode_Category_LO;
		case 0x13079: return Unicode_Category_LO;
		case 0x1307A: return Unicode_Category_LO;
		case 0x1307B: return Unicode_Category_LO;
		case 0x1307C: return Unicode_Category_LO;
		case 0x1307D: return Unicode_Category_LO;
		case 0x1307E: return Unicode_Category_LO;
		case 0x1307F: return Unicode_Category_LO;
		case 0x13080: return Unicode_Category_LO;
		case 0x13081: return Unicode_Category_LO;
		case 0x13082: return Unicode_Category_LO;
		case 0x13083: return Unicode_Category_LO;
		case 0x13084: return Unicode_Category_LO;
		case 0x13085: return Unicode_Category_LO;
		case 0x13086: return Unicode_Category_LO;
		case 0x13087: return Unicode_Category_LO;
		case 0x13088: return Unicode_Category_LO;
		case 0x13089: return Unicode_Category_LO;
		case 0x1308A: return Unicode_Category_LO;
		case 0x1308B: return Unicode_Category_LO;
		case 0x1308C: return Unicode_Category_LO;
		case 0x1308D: return Unicode_Category_LO;
		case 0x1308E: return Unicode_Category_LO;
		case 0x1308F: return Unicode_Category_LO;
		case 0x13090: return Unicode_Category_LO;
		case 0x13091: return Unicode_Category_LO;
		case 0x13092: return Unicode_Category_LO;
		case 0x13093: return Unicode_Category_LO;
		case 0x13094: return Unicode_Category_LO;
		case 0x13095: return Unicode_Category_LO;
		case 0x13096: return Unicode_Category_LO;
		case 0x13097: return Unicode_Category_LO;
		case 0x13098: return Unicode_Category_LO;
		case 0x13099: return Unicode_Category_LO;
		case 0x1309A: return Unicode_Category_LO;
		case 0x1309B: return Unicode_Category_LO;
		case 0x1309C: return Unicode_Category_LO;
		case 0x1309D: return Unicode_Category_LO;
		case 0x1309E: return Unicode_Category_LO;
		case 0x1309F: return Unicode_Category_LO;
		case 0x130A0: return Unicode_Category_LO;
		case 0x130A1: return Unicode_Category_LO;
		case 0x130A2: return Unicode_Category_LO;
		case 0x130A3: return Unicode_Category_LO;
		case 0x130A4: return Unicode_Category_LO;
		case 0x130A5: return Unicode_Category_LO;
		case 0x130A6: return Unicode_Category_LO;
		case 0x130A7: return Unicode_Category_LO;
		case 0x130A8: return Unicode_Category_LO;
		case 0x130A9: return Unicode_Category_LO;
		case 0x130AA: return Unicode_Category_LO;
		case 0x130AB: return Unicode_Category_LO;
		case 0x130AC: return Unicode_Category_LO;
		case 0x130AD: return Unicode_Category_LO;
		case 0x130AE: return Unicode_Category_LO;
		case 0x130AF: return Unicode_Category_LO;
		case 0x130B0: return Unicode_Category_LO;
		case 0x130B1: return Unicode_Category_LO;
		case 0x130B2: return Unicode_Category_LO;
		case 0x130B3: return Unicode_Category_LO;
		case 0x130B4: return Unicode_Category_LO;
		case 0x130B5: return Unicode_Category_LO;
		case 0x130B6: return Unicode_Category_LO;
		case 0x130B7: return Unicode_Category_LO;
		case 0x130B8: return Unicode_Category_LO;
		case 0x130B9: return Unicode_Category_LO;
		case 0x130BA: return Unicode_Category_LO;
		case 0x130BB: return Unicode_Category_LO;
		case 0x130BC: return Unicode_Category_LO;
		case 0x130BD: return Unicode_Category_LO;
		case 0x130BE: return Unicode_Category_LO;
		case 0x130BF: return Unicode_Category_LO;
		case 0x130C0: return Unicode_Category_LO;
		case 0x130C1: return Unicode_Category_LO;
		case 0x130C2: return Unicode_Category_LO;
		case 0x130C3: return Unicode_Category_LO;
		case 0x130C4: return Unicode_Category_LO;
		case 0x130C5: return Unicode_Category_LO;
		case 0x130C6: return Unicode_Category_LO;
		case 0x130C7: return Unicode_Category_LO;
		case 0x130C8: return Unicode_Category_LO;
		case 0x130C9: return Unicode_Category_LO;
		case 0x130CA: return Unicode_Category_LO;
		case 0x130CB: return Unicode_Category_LO;
		case 0x130CC: return Unicode_Category_LO;
		case 0x130CD: return Unicode_Category_LO;
		case 0x130CE: return Unicode_Category_LO;
		case 0x130CF: return Unicode_Category_LO;
		case 0x130D0: return Unicode_Category_LO;
		case 0x130D1: return Unicode_Category_LO;
		case 0x130D2: return Unicode_Category_LO;
		case 0x130D3: return Unicode_Category_LO;
		case 0x130D4: return Unicode_Category_LO;
		case 0x130D5: return Unicode_Category_LO;
		case 0x130D6: return Unicode_Category_LO;
		case 0x130D7: return Unicode_Category_LO;
		case 0x130D8: return Unicode_Category_LO;
		case 0x130D9: return Unicode_Category_LO;
		case 0x130DA: return Unicode_Category_LO;
		case 0x130DB: return Unicode_Category_LO;
		case 0x130DC: return Unicode_Category_LO;
		case 0x130DD: return Unicode_Category_LO;
		case 0x130DE: return Unicode_Category_LO;
		case 0x130DF: return Unicode_Category_LO;
		case 0x130E0: return Unicode_Category_LO;
		case 0x130E1: return Unicode_Category_LO;
		case 0x130E2: return Unicode_Category_LO;
		case 0x130E3: return Unicode_Category_LO;
		case 0x130E4: return Unicode_Category_LO;
		case 0x130E5: return Unicode_Category_LO;
		case 0x130E6: return Unicode_Category_LO;
		case 0x130E7: return Unicode_Category_LO;
		case 0x130E8: return Unicode_Category_LO;
		case 0x130E9: return Unicode_Category_LO;
		case 0x130EA: return Unicode_Category_LO;
		case 0x130EB: return Unicode_Category_LO;
		case 0x130EC: return Unicode_Category_LO;
		case 0x130ED: return Unicode_Category_LO;
		case 0x130EE: return Unicode_Category_LO;
		case 0x130EF: return Unicode_Category_LO;
		case 0x130F0: return Unicode_Category_LO;
		case 0x130F1: return Unicode_Category_LO;
		case 0x130F2: return Unicode_Category_LO;
		case 0x130F3: return Unicode_Category_LO;
		case 0x130F4: return Unicode_Category_LO;
		case 0x130F5: return Unicode_Category_LO;
		case 0x130F6: return Unicode_Category_LO;
		case 0x130F7: return Unicode_Category_LO;
		case 0x130F8: return Unicode_Category_LO;
		case 0x130F9: return Unicode_Category_LO;
		case 0x130FA: return Unicode_Category_LO;
		case 0x130FB: return Unicode_Category_LO;
		case 0x130FC: return Unicode_Category_LO;
		case 0x130FD: return Unicode_Category_LO;
		case 0x130FE: return Unicode_Category_LO;
		case 0x130FF: return Unicode_Category_LO;
		case 0x13100: return Unicode_Category_LO;
		case 0x13101: return Unicode_Category_LO;
		case 0x13102: return Unicode_Category_LO;
		case 0x13103: return Unicode_Category_LO;
		case 0x13104: return Unicode_Category_LO;
		case 0x13105: return Unicode_Category_LO;
		case 0x13106: return Unicode_Category_LO;
		case 0x13107: return Unicode_Category_LO;
		case 0x13108: return Unicode_Category_LO;
		case 0x13109: return Unicode_Category_LO;
		case 0x1310A: return Unicode_Category_LO;
		case 0x1310B: return Unicode_Category_LO;
		case 0x1310C: return Unicode_Category_LO;
		case 0x1310D: return Unicode_Category_LO;
		case 0x1310E: return Unicode_Category_LO;
		case 0x1310F: return Unicode_Category_LO;
		case 0x13110: return Unicode_Category_LO;
		case 0x13111: return Unicode_Category_LO;
		case 0x13112: return Unicode_Category_LO;
		case 0x13113: return Unicode_Category_LO;
		case 0x13114: return Unicode_Category_LO;
		case 0x13115: return Unicode_Category_LO;
		case 0x13116: return Unicode_Category_LO;
		case 0x13117: return Unicode_Category_LO;
		case 0x13118: return Unicode_Category_LO;
		case 0x13119: return Unicode_Category_LO;
		case 0x1311A: return Unicode_Category_LO;
		case 0x1311B: return Unicode_Category_LO;
		case 0x1311C: return Unicode_Category_LO;
		case 0x1311D: return Unicode_Category_LO;
		case 0x1311E: return Unicode_Category_LO;
		case 0x1311F: return Unicode_Category_LO;
		case 0x13120: return Unicode_Category_LO;
		case 0x13121: return Unicode_Category_LO;
		case 0x13122: return Unicode_Category_LO;
		case 0x13123: return Unicode_Category_LO;
		case 0x13124: return Unicode_Category_LO;
		case 0x13125: return Unicode_Category_LO;
		case 0x13126: return Unicode_Category_LO;
		case 0x13127: return Unicode_Category_LO;
		case 0x13128: return Unicode_Category_LO;
		case 0x13129: return Unicode_Category_LO;
		case 0x1312A: return Unicode_Category_LO;
		case 0x1312B: return Unicode_Category_LO;
		case 0x1312C: return Unicode_Category_LO;
		case 0x1312D: return Unicode_Category_LO;
		case 0x1312E: return Unicode_Category_LO;
		case 0x1312F: return Unicode_Category_LO;
		case 0x13130: return Unicode_Category_LO;
		case 0x13131: return Unicode_Category_LO;
		case 0x13132: return Unicode_Category_LO;
		case 0x13133: return Unicode_Category_LO;
		case 0x13134: return Unicode_Category_LO;
		case 0x13135: return Unicode_Category_LO;
		case 0x13136: return Unicode_Category_LO;
		case 0x13137: return Unicode_Category_LO;
		case 0x13138: return Unicode_Category_LO;
		case 0x13139: return Unicode_Category_LO;
		case 0x1313A: return Unicode_Category_LO;
		case 0x1313B: return Unicode_Category_LO;
		case 0x1313C: return Unicode_Category_LO;
		case 0x1313D: return Unicode_Category_LO;
		case 0x1313E: return Unicode_Category_LO;
		case 0x1313F: return Unicode_Category_LO;
		case 0x13140: return Unicode_Category_LO;
		case 0x13141: return Unicode_Category_LO;
		case 0x13142: return Unicode_Category_LO;
		case 0x13143: return Unicode_Category_LO;
		case 0x13144: return Unicode_Category_LO;
		case 0x13145: return Unicode_Category_LO;
		case 0x13146: return Unicode_Category_LO;
		case 0x13147: return Unicode_Category_LO;
		case 0x13148: return Unicode_Category_LO;
		case 0x13149: return Unicode_Category_LO;
		case 0x1314A: return Unicode_Category_LO;
		case 0x1314B: return Unicode_Category_LO;
		case 0x1314C: return Unicode_Category_LO;
		case 0x1314D: return Unicode_Category_LO;
		case 0x1314E: return Unicode_Category_LO;
		case 0x1314F: return Unicode_Category_LO;
		case 0x13150: return Unicode_Category_LO;
		case 0x13151: return Unicode_Category_LO;
		case 0x13152: return Unicode_Category_LO;
		case 0x13153: return Unicode_Category_LO;
		case 0x13154: return Unicode_Category_LO;
		case 0x13155: return Unicode_Category_LO;
		case 0x13156: return Unicode_Category_LO;
		case 0x13157: return Unicode_Category_LO;
		case 0x13158: return Unicode_Category_LO;
		case 0x13159: return Unicode_Category_LO;
		case 0x1315A: return Unicode_Category_LO;
		case 0x1315B: return Unicode_Category_LO;
		case 0x1315C: return Unicode_Category_LO;
		case 0x1315D: return Unicode_Category_LO;
		case 0x1315E: return Unicode_Category_LO;
		case 0x1315F: return Unicode_Category_LO;
		case 0x13160: return Unicode_Category_LO;
		case 0x13161: return Unicode_Category_LO;
		case 0x13162: return Unicode_Category_LO;
		case 0x13163: return Unicode_Category_LO;
		case 0x13164: return Unicode_Category_LO;
		case 0x13165: return Unicode_Category_LO;
		case 0x13166: return Unicode_Category_LO;
		case 0x13167: return Unicode_Category_LO;
		case 0x13168: return Unicode_Category_LO;
		case 0x13169: return Unicode_Category_LO;
		case 0x1316A: return Unicode_Category_LO;
		case 0x1316B: return Unicode_Category_LO;
		case 0x1316C: return Unicode_Category_LO;
		case 0x1316D: return Unicode_Category_LO;
		case 0x1316E: return Unicode_Category_LO;
		case 0x1316F: return Unicode_Category_LO;
		case 0x13170: return Unicode_Category_LO;
		case 0x13171: return Unicode_Category_LO;
		case 0x13172: return Unicode_Category_LO;
		case 0x13173: return Unicode_Category_LO;
		case 0x13174: return Unicode_Category_LO;
		case 0x13175: return Unicode_Category_LO;
		case 0x13176: return Unicode_Category_LO;
		case 0x13177: return Unicode_Category_LO;
		case 0x13178: return Unicode_Category_LO;
		case 0x13179: return Unicode_Category_LO;
		case 0x1317A: return Unicode_Category_LO;
		case 0x1317B: return Unicode_Category_LO;
		case 0x1317C: return Unicode_Category_LO;
		case 0x1317D: return Unicode_Category_LO;
		case 0x1317E: return Unicode_Category_LO;
		case 0x1317F: return Unicode_Category_LO;
		case 0x13180: return Unicode_Category_LO;
		case 0x13181: return Unicode_Category_LO;
		case 0x13182: return Unicode_Category_LO;
		case 0x13183: return Unicode_Category_LO;
		case 0x13184: return Unicode_Category_LO;
		case 0x13185: return Unicode_Category_LO;
		case 0x13186: return Unicode_Category_LO;
		case 0x13187: return Unicode_Category_LO;
		case 0x13188: return Unicode_Category_LO;
		case 0x13189: return Unicode_Category_LO;
		case 0x1318A: return Unicode_Category_LO;
		case 0x1318B: return Unicode_Category_LO;
		case 0x1318C: return Unicode_Category_LO;
		case 0x1318D: return Unicode_Category_LO;
		case 0x1318E: return Unicode_Category_LO;
		case 0x1318F: return Unicode_Category_LO;
		case 0x13190: return Unicode_Category_LO;
		case 0x13191: return Unicode_Category_LO;
		case 0x13192: return Unicode_Category_LO;
		case 0x13193: return Unicode_Category_LO;
		case 0x13194: return Unicode_Category_LO;
		case 0x13195: return Unicode_Category_LO;
		case 0x13196: return Unicode_Category_LO;
		case 0x13197: return Unicode_Category_LO;
		case 0x13198: return Unicode_Category_LO;
		case 0x13199: return Unicode_Category_LO;
		case 0x1319A: return Unicode_Category_LO;
		case 0x1319B: return Unicode_Category_LO;
		case 0x1319C: return Unicode_Category_LO;
		case 0x1319D: return Unicode_Category_LO;
		case 0x1319E: return Unicode_Category_LO;
		case 0x1319F: return Unicode_Category_LO;
		case 0x131A0: return Unicode_Category_LO;
		case 0x131A1: return Unicode_Category_LO;
		case 0x131A2: return Unicode_Category_LO;
		case 0x131A3: return Unicode_Category_LO;
		case 0x131A4: return Unicode_Category_LO;
		case 0x131A5: return Unicode_Category_LO;
		case 0x131A6: return Unicode_Category_LO;
		case 0x131A7: return Unicode_Category_LO;
		case 0x131A8: return Unicode_Category_LO;
		case 0x131A9: return Unicode_Category_LO;
		case 0x131AA: return Unicode_Category_LO;
		case 0x131AB: return Unicode_Category_LO;
		case 0x131AC: return Unicode_Category_LO;
		case 0x131AD: return Unicode_Category_LO;
		case 0x131AE: return Unicode_Category_LO;
		case 0x131AF: return Unicode_Category_LO;
		case 0x131B0: return Unicode_Category_LO;
		case 0x131B1: return Unicode_Category_LO;
		case 0x131B2: return Unicode_Category_LO;
		case 0x131B3: return Unicode_Category_LO;
		case 0x131B4: return Unicode_Category_LO;
		case 0x131B5: return Unicode_Category_LO;
		case 0x131B6: return Unicode_Category_LO;
		case 0x131B7: return Unicode_Category_LO;
		case 0x131B8: return Unicode_Category_LO;
		case 0x131B9: return Unicode_Category_LO;
		case 0x131BA: return Unicode_Category_LO;
		case 0x131BB: return Unicode_Category_LO;
		case 0x131BC: return Unicode_Category_LO;
		case 0x131BD: return Unicode_Category_LO;
		case 0x131BE: return Unicode_Category_LO;
		case 0x131BF: return Unicode_Category_LO;
		case 0x131C0: return Unicode_Category_LO;
		case 0x131C1: return Unicode_Category_LO;
		case 0x131C2: return Unicode_Category_LO;
		case 0x131C3: return Unicode_Category_LO;
		case 0x131C4: return Unicode_Category_LO;
		case 0x131C5: return Unicode_Category_LO;
		case 0x131C6: return Unicode_Category_LO;
		case 0x131C7: return Unicode_Category_LO;
		case 0x131C8: return Unicode_Category_LO;
		case 0x131C9: return Unicode_Category_LO;
		case 0x131CA: return Unicode_Category_LO;
		case 0x131CB: return Unicode_Category_LO;
		case 0x131CC: return Unicode_Category_LO;
		case 0x131CD: return Unicode_Category_LO;
		case 0x131CE: return Unicode_Category_LO;
		case 0x131CF: return Unicode_Category_LO;
		case 0x131D0: return Unicode_Category_LO;
		case 0x131D1: return Unicode_Category_LO;
		case 0x131D2: return Unicode_Category_LO;
		case 0x131D3: return Unicode_Category_LO;
		case 0x131D4: return Unicode_Category_LO;
		case 0x131D5: return Unicode_Category_LO;
		case 0x131D6: return Unicode_Category_LO;
		case 0x131D7: return Unicode_Category_LO;
		case 0x131D8: return Unicode_Category_LO;
		case 0x131D9: return Unicode_Category_LO;
		case 0x131DA: return Unicode_Category_LO;
		case 0x131DB: return Unicode_Category_LO;
		case 0x131DC: return Unicode_Category_LO;
		case 0x131DD: return Unicode_Category_LO;
		case 0x131DE: return Unicode_Category_LO;
		case 0x131DF: return Unicode_Category_LO;
		case 0x131E0: return Unicode_Category_LO;
		case 0x131E1: return Unicode_Category_LO;
		case 0x131E2: return Unicode_Category_LO;
		case 0x131E3: return Unicode_Category_LO;
		case 0x131E4: return Unicode_Category_LO;
		case 0x131E5: return Unicode_Category_LO;
		case 0x131E6: return Unicode_Category_LO;
		case 0x131E7: return Unicode_Category_LO;
		case 0x131E8: return Unicode_Category_LO;
		case 0x131E9: return Unicode_Category_LO;
		case 0x131EA: return Unicode_Category_LO;
		case 0x131EB: return Unicode_Category_LO;
		case 0x131EC: return Unicode_Category_LO;
		case 0x131ED: return Unicode_Category_LO;
		case 0x131EE: return Unicode_Category_LO;
		case 0x131EF: return Unicode_Category_LO;
		case 0x131F0: return Unicode_Category_LO;
		case 0x131F1: return Unicode_Category_LO;
		case 0x131F2: return Unicode_Category_LO;
		case 0x131F3: return Unicode_Category_LO;
		case 0x131F4: return Unicode_Category_LO;
		case 0x131F5: return Unicode_Category_LO;
		case 0x131F6: return Unicode_Category_LO;
		case 0x131F7: return Unicode_Category_LO;
		case 0x131F8: return Unicode_Category_LO;
		case 0x131F9: return Unicode_Category_LO;
		case 0x131FA: return Unicode_Category_LO;
		case 0x131FB: return Unicode_Category_LO;
		case 0x131FC: return Unicode_Category_LO;
		case 0x131FD: return Unicode_Category_LO;
		case 0x131FE: return Unicode_Category_LO;
		case 0x131FF: return Unicode_Category_LO;
		case 0x13200: return Unicode_Category_LO;
		case 0x13201: return Unicode_Category_LO;
		case 0x13202: return Unicode_Category_LO;
		case 0x13203: return Unicode_Category_LO;
		case 0x13204: return Unicode_Category_LO;
		case 0x13205: return Unicode_Category_LO;
		case 0x13206: return Unicode_Category_LO;
		case 0x13207: return Unicode_Category_LO;
		case 0x13208: return Unicode_Category_LO;
		case 0x13209: return Unicode_Category_LO;
		case 0x1320A: return Unicode_Category_LO;
		case 0x1320B: return Unicode_Category_LO;
		case 0x1320C: return Unicode_Category_LO;
		case 0x1320D: return Unicode_Category_LO;
		case 0x1320E: return Unicode_Category_LO;
		case 0x1320F: return Unicode_Category_LO;
		case 0x13210: return Unicode_Category_LO;
		case 0x13211: return Unicode_Category_LO;
		case 0x13212: return Unicode_Category_LO;
		case 0x13213: return Unicode_Category_LO;
		case 0x13214: return Unicode_Category_LO;
		case 0x13215: return Unicode_Category_LO;
		case 0x13216: return Unicode_Category_LO;
		case 0x13217: return Unicode_Category_LO;
		case 0x13218: return Unicode_Category_LO;
		case 0x13219: return Unicode_Category_LO;
		case 0x1321A: return Unicode_Category_LO;
		case 0x1321B: return Unicode_Category_LO;
		case 0x1321C: return Unicode_Category_LO;
		case 0x1321D: return Unicode_Category_LO;
		case 0x1321E: return Unicode_Category_LO;
		case 0x1321F: return Unicode_Category_LO;
		case 0x13220: return Unicode_Category_LO;
		case 0x13221: return Unicode_Category_LO;
		case 0x13222: return Unicode_Category_LO;
		case 0x13223: return Unicode_Category_LO;
		case 0x13224: return Unicode_Category_LO;
		case 0x13225: return Unicode_Category_LO;
		case 0x13226: return Unicode_Category_LO;
		case 0x13227: return Unicode_Category_LO;
		case 0x13228: return Unicode_Category_LO;
		case 0x13229: return Unicode_Category_LO;
		case 0x1322A: return Unicode_Category_LO;
		case 0x1322B: return Unicode_Category_LO;
		case 0x1322C: return Unicode_Category_LO;
		case 0x1322D: return Unicode_Category_LO;
		case 0x1322E: return Unicode_Category_LO;
		case 0x1322F: return Unicode_Category_LO;
		case 0x13230: return Unicode_Category_LO;
		case 0x13231: return Unicode_Category_LO;
		case 0x13232: return Unicode_Category_LO;
		case 0x13233: return Unicode_Category_LO;
		case 0x13234: return Unicode_Category_LO;
		case 0x13235: return Unicode_Category_LO;
		case 0x13236: return Unicode_Category_LO;
		case 0x13237: return Unicode_Category_LO;
		case 0x13238: return Unicode_Category_LO;
		case 0x13239: return Unicode_Category_LO;
		case 0x1323A: return Unicode_Category_LO;
		case 0x1323B: return Unicode_Category_LO;
		case 0x1323C: return Unicode_Category_LO;
		case 0x1323D: return Unicode_Category_LO;
		case 0x1323E: return Unicode_Category_LO;
		case 0x1323F: return Unicode_Category_LO;
		case 0x13240: return Unicode_Category_LO;
		case 0x13241: return Unicode_Category_LO;
		case 0x13242: return Unicode_Category_LO;
		case 0x13243: return Unicode_Category_LO;
		case 0x13244: return Unicode_Category_LO;
		case 0x13245: return Unicode_Category_LO;
		case 0x13246: return Unicode_Category_LO;
		case 0x13247: return Unicode_Category_LO;
		case 0x13248: return Unicode_Category_LO;
		case 0x13249: return Unicode_Category_LO;
		case 0x1324A: return Unicode_Category_LO;
		case 0x1324B: return Unicode_Category_LO;
		case 0x1324C: return Unicode_Category_LO;
		case 0x1324D: return Unicode_Category_LO;
		case 0x1324E: return Unicode_Category_LO;
		case 0x1324F: return Unicode_Category_LO;
		case 0x13250: return Unicode_Category_LO;
		case 0x13251: return Unicode_Category_LO;
		case 0x13252: return Unicode_Category_LO;
		case 0x13253: return Unicode_Category_LO;
		case 0x13254: return Unicode_Category_LO;
		case 0x13255: return Unicode_Category_LO;
		case 0x13256: return Unicode_Category_LO;
		case 0x13257: return Unicode_Category_LO;
		case 0x13258: return Unicode_Category_LO;
		case 0x13259: return Unicode_Category_LO;
		case 0x1325A: return Unicode_Category_LO;
		case 0x1325B: return Unicode_Category_LO;
		case 0x1325C: return Unicode_Category_LO;
		case 0x1325D: return Unicode_Category_LO;
		case 0x1325E: return Unicode_Category_LO;
		case 0x1325F: return Unicode_Category_LO;
		case 0x13260: return Unicode_Category_LO;
		case 0x13261: return Unicode_Category_LO;
		case 0x13262: return Unicode_Category_LO;
		case 0x13263: return Unicode_Category_LO;
		case 0x13264: return Unicode_Category_LO;
		case 0x13265: return Unicode_Category_LO;
		case 0x13266: return Unicode_Category_LO;
		case 0x13267: return Unicode_Category_LO;
		case 0x13268: return Unicode_Category_LO;
		case 0x13269: return Unicode_Category_LO;
		case 0x1326A: return Unicode_Category_LO;
		case 0x1326B: return Unicode_Category_LO;
		case 0x1326C: return Unicode_Category_LO;
		case 0x1326D: return Unicode_Category_LO;
		case 0x1326E: return Unicode_Category_LO;
		case 0x1326F: return Unicode_Category_LO;
		case 0x13270: return Unicode_Category_LO;
		case 0x13271: return Unicode_Category_LO;
		case 0x13272: return Unicode_Category_LO;
		case 0x13273: return Unicode_Category_LO;
		case 0x13274: return Unicode_Category_LO;
		case 0x13275: return Unicode_Category_LO;
		case 0x13276: return Unicode_Category_LO;
		case 0x13277: return Unicode_Category_LO;
		case 0x13278: return Unicode_Category_LO;
		case 0x13279: return Unicode_Category_LO;
		case 0x1327A: return Unicode_Category_LO;
		case 0x1327B: return Unicode_Category_LO;
		case 0x1327C: return Unicode_Category_LO;
		case 0x1327D: return Unicode_Category_LO;
		case 0x1327E: return Unicode_Category_LO;
		case 0x1327F: return Unicode_Category_LO;
		case 0x13280: return Unicode_Category_LO;
		case 0x13281: return Unicode_Category_LO;
		case 0x13282: return Unicode_Category_LO;
		case 0x13283: return Unicode_Category_LO;
		case 0x13284: return Unicode_Category_LO;
		case 0x13285: return Unicode_Category_LO;
		case 0x13286: return Unicode_Category_LO;
		case 0x13287: return Unicode_Category_LO;
		case 0x13288: return Unicode_Category_LO;
		case 0x13289: return Unicode_Category_LO;
		case 0x1328A: return Unicode_Category_LO;
		case 0x1328B: return Unicode_Category_LO;
		case 0x1328C: return Unicode_Category_LO;
		case 0x1328D: return Unicode_Category_LO;
		case 0x1328E: return Unicode_Category_LO;
		case 0x1328F: return Unicode_Category_LO;
		case 0x13290: return Unicode_Category_LO;
		case 0x13291: return Unicode_Category_LO;
		case 0x13292: return Unicode_Category_LO;
		case 0x13293: return Unicode_Category_LO;
		case 0x13294: return Unicode_Category_LO;
		case 0x13295: return Unicode_Category_LO;
		case 0x13296: return Unicode_Category_LO;
		case 0x13297: return Unicode_Category_LO;
		case 0x13298: return Unicode_Category_LO;
		case 0x13299: return Unicode_Category_LO;
		case 0x1329A: return Unicode_Category_LO;
		case 0x1329B: return Unicode_Category_LO;
		case 0x1329C: return Unicode_Category_LO;
		case 0x1329D: return Unicode_Category_LO;
		case 0x1329E: return Unicode_Category_LO;
		case 0x1329F: return Unicode_Category_LO;
		case 0x132A0: return Unicode_Category_LO;
		case 0x132A1: return Unicode_Category_LO;
		case 0x132A2: return Unicode_Category_LO;
		case 0x132A3: return Unicode_Category_LO;
		case 0x132A4: return Unicode_Category_LO;
		case 0x132A5: return Unicode_Category_LO;
		case 0x132A6: return Unicode_Category_LO;
		case 0x132A7: return Unicode_Category_LO;
		case 0x132A8: return Unicode_Category_LO;
		case 0x132A9: return Unicode_Category_LO;
		case 0x132AA: return Unicode_Category_LO;
		case 0x132AB: return Unicode_Category_LO;
		case 0x132AC: return Unicode_Category_LO;
		case 0x132AD: return Unicode_Category_LO;
		case 0x132AE: return Unicode_Category_LO;
		case 0x132AF: return Unicode_Category_LO;
		case 0x132B0: return Unicode_Category_LO;
		case 0x132B1: return Unicode_Category_LO;
		case 0x132B2: return Unicode_Category_LO;
		case 0x132B3: return Unicode_Category_LO;
		case 0x132B4: return Unicode_Category_LO;
		case 0x132B5: return Unicode_Category_LO;
		case 0x132B6: return Unicode_Category_LO;
		case 0x132B7: return Unicode_Category_LO;
		case 0x132B8: return Unicode_Category_LO;
		case 0x132B9: return Unicode_Category_LO;
		case 0x132BA: return Unicode_Category_LO;
		case 0x132BB: return Unicode_Category_LO;
		case 0x132BC: return Unicode_Category_LO;
		case 0x132BD: return Unicode_Category_LO;
		case 0x132BE: return Unicode_Category_LO;
		case 0x132BF: return Unicode_Category_LO;
		case 0x132C0: return Unicode_Category_LO;
		case 0x132C1: return Unicode_Category_LO;
		case 0x132C2: return Unicode_Category_LO;
		case 0x132C3: return Unicode_Category_LO;
		case 0x132C4: return Unicode_Category_LO;
		case 0x132C5: return Unicode_Category_LO;
		case 0x132C6: return Unicode_Category_LO;
		case 0x132C7: return Unicode_Category_LO;
		case 0x132C8: return Unicode_Category_LO;
		case 0x132C9: return Unicode_Category_LO;
		case 0x132CA: return Unicode_Category_LO;
		case 0x132CB: return Unicode_Category_LO;
		case 0x132CC: return Unicode_Category_LO;
		case 0x132CD: return Unicode_Category_LO;
		case 0x132CE: return Unicode_Category_LO;
		case 0x132CF: return Unicode_Category_LO;
		case 0x132D0: return Unicode_Category_LO;
		case 0x132D1: return Unicode_Category_LO;
		case 0x132D2: return Unicode_Category_LO;
		case 0x132D3: return Unicode_Category_LO;
		case 0x132D4: return Unicode_Category_LO;
		case 0x132D5: return Unicode_Category_LO;
		case 0x132D6: return Unicode_Category_LO;
		case 0x132D7: return Unicode_Category_LO;
		case 0x132D8: return Unicode_Category_LO;
		case 0x132D9: return Unicode_Category_LO;
		case 0x132DA: return Unicode_Category_LO;
		case 0x132DB: return Unicode_Category_LO;
		case 0x132DC: return Unicode_Category_LO;
		case 0x132DD: return Unicode_Category_LO;
		case 0x132DE: return Unicode_Category_LO;
		case 0x132DF: return Unicode_Category_LO;
		case 0x132E0: return Unicode_Category_LO;
		case 0x132E1: return Unicode_Category_LO;
		case 0x132E2: return Unicode_Category_LO;
		case 0x132E3: return Unicode_Category_LO;
		case 0x132E4: return Unicode_Category_LO;
		case 0x132E5: return Unicode_Category_LO;
		case 0x132E6: return Unicode_Category_LO;
		case 0x132E7: return Unicode_Category_LO;
		case 0x132E8: return Unicode_Category_LO;
		case 0x132E9: return Unicode_Category_LO;
		case 0x132EA: return Unicode_Category_LO;
		case 0x132EB: return Unicode_Category_LO;
		case 0x132EC: return Unicode_Category_LO;
		case 0x132ED: return Unicode_Category_LO;
		case 0x132EE: return Unicode_Category_LO;
		case 0x132EF: return Unicode_Category_LO;
		case 0x132F0: return Unicode_Category_LO;
		case 0x132F1: return Unicode_Category_LO;
		case 0x132F2: return Unicode_Category_LO;
		case 0x132F3: return Unicode_Category_LO;
		case 0x132F4: return Unicode_Category_LO;
		case 0x132F5: return Unicode_Category_LO;
		case 0x132F6: return Unicode_Category_LO;
		case 0x132F7: return Unicode_Category_LO;
		case 0x132F8: return Unicode_Category_LO;
		case 0x132F9: return Unicode_Category_LO;
		case 0x132FA: return Unicode_Category_LO;
		case 0x132FB: return Unicode_Category_LO;
		case 0x132FC: return Unicode_Category_LO;
		case 0x132FD: return Unicode_Category_LO;
		case 0x132FE: return Unicode_Category_LO;
		case 0x132FF: return Unicode_Category_LO;
		case 0x13300: return Unicode_Category_LO;
		case 0x13301: return Unicode_Category_LO;
		case 0x13302: return Unicode_Category_LO;
		case 0x13303: return Unicode_Category_LO;
		case 0x13304: return Unicode_Category_LO;
		case 0x13305: return Unicode_Category_LO;
		case 0x13306: return Unicode_Category_LO;
		case 0x13307: return Unicode_Category_LO;
		case 0x13308: return Unicode_Category_LO;
		case 0x13309: return Unicode_Category_LO;
		case 0x1330A: return Unicode_Category_LO;
		case 0x1330B: return Unicode_Category_LO;
		case 0x1330C: return Unicode_Category_LO;
		case 0x1330D: return Unicode_Category_LO;
		case 0x1330E: return Unicode_Category_LO;
		case 0x1330F: return Unicode_Category_LO;
		case 0x13310: return Unicode_Category_LO;
		case 0x13311: return Unicode_Category_LO;
		case 0x13312: return Unicode_Category_LO;
		case 0x13313: return Unicode_Category_LO;
		case 0x13314: return Unicode_Category_LO;
		case 0x13315: return Unicode_Category_LO;
		case 0x13316: return Unicode_Category_LO;
		case 0x13317: return Unicode_Category_LO;
		case 0x13318: return Unicode_Category_LO;
		case 0x13319: return Unicode_Category_LO;
		case 0x1331A: return Unicode_Category_LO;
		case 0x1331B: return Unicode_Category_LO;
		case 0x1331C: return Unicode_Category_LO;
		case 0x1331D: return Unicode_Category_LO;
		case 0x1331E: return Unicode_Category_LO;
		case 0x1331F: return Unicode_Category_LO;
		case 0x13320: return Unicode_Category_LO;
		case 0x13321: return Unicode_Category_LO;
		case 0x13322: return Unicode_Category_LO;
		case 0x13323: return Unicode_Category_LO;
		case 0x13324: return Unicode_Category_LO;
		case 0x13325: return Unicode_Category_LO;
		case 0x13326: return Unicode_Category_LO;
		case 0x13327: return Unicode_Category_LO;
		case 0x13328: return Unicode_Category_LO;
		case 0x13329: return Unicode_Category_LO;
		case 0x1332A: return Unicode_Category_LO;
		case 0x1332B: return Unicode_Category_LO;
		case 0x1332C: return Unicode_Category_LO;
		case 0x1332D: return Unicode_Category_LO;
		case 0x1332E: return Unicode_Category_LO;
		case 0x1332F: return Unicode_Category_LO;
		case 0x13330: return Unicode_Category_LO;
		case 0x13331: return Unicode_Category_LO;
		case 0x13332: return Unicode_Category_LO;
		case 0x13333: return Unicode_Category_LO;
		case 0x13334: return Unicode_Category_LO;
		case 0x13335: return Unicode_Category_LO;
		case 0x13336: return Unicode_Category_LO;
		case 0x13337: return Unicode_Category_LO;
		case 0x13338: return Unicode_Category_LO;
		case 0x13339: return Unicode_Category_LO;
		case 0x1333A: return Unicode_Category_LO;
		case 0x1333B: return Unicode_Category_LO;
		case 0x1333C: return Unicode_Category_LO;
		case 0x1333D: return Unicode_Category_LO;
		case 0x1333E: return Unicode_Category_LO;
		case 0x1333F: return Unicode_Category_LO;
		case 0x13340: return Unicode_Category_LO;
		case 0x13341: return Unicode_Category_LO;
		case 0x13342: return Unicode_Category_LO;
		case 0x13343: return Unicode_Category_LO;
		case 0x13344: return Unicode_Category_LO;
		case 0x13345: return Unicode_Category_LO;
		case 0x13346: return Unicode_Category_LO;
		case 0x13347: return Unicode_Category_LO;
		case 0x13348: return Unicode_Category_LO;
		case 0x13349: return Unicode_Category_LO;
		case 0x1334A: return Unicode_Category_LO;
		case 0x1334B: return Unicode_Category_LO;
		case 0x1334C: return Unicode_Category_LO;
		case 0x1334D: return Unicode_Category_LO;
		case 0x1334E: return Unicode_Category_LO;
		case 0x1334F: return Unicode_Category_LO;
		case 0x13350: return Unicode_Category_LO;
		case 0x13351: return Unicode_Category_LO;
		case 0x13352: return Unicode_Category_LO;
		case 0x13353: return Unicode_Category_LO;
		case 0x13354: return Unicode_Category_LO;
		case 0x13355: return Unicode_Category_LO;
		case 0x13356: return Unicode_Category_LO;
		case 0x13357: return Unicode_Category_LO;
		case 0x13358: return Unicode_Category_LO;
		case 0x13359: return Unicode_Category_LO;
		case 0x1335A: return Unicode_Category_LO;
		case 0x1335B: return Unicode_Category_LO;
		case 0x1335C: return Unicode_Category_LO;
		case 0x1335D: return Unicode_Category_LO;
		case 0x1335E: return Unicode_Category_LO;
		case 0x1335F: return Unicode_Category_LO;
		case 0x13360: return Unicode_Category_LO;
		case 0x13361: return Unicode_Category_LO;
		case 0x13362: return Unicode_Category_LO;
		case 0x13363: return Unicode_Category_LO;
		case 0x13364: return Unicode_Category_LO;
		case 0x13365: return Unicode_Category_LO;
		case 0x13366: return Unicode_Category_LO;
		case 0x13367: return Unicode_Category_LO;
		case 0x13368: return Unicode_Category_LO;
		case 0x13369: return Unicode_Category_LO;
		case 0x1336A: return Unicode_Category_LO;
		case 0x1336B: return Unicode_Category_LO;
		case 0x1336C: return Unicode_Category_LO;
		case 0x1336D: return Unicode_Category_LO;
		case 0x1336E: return Unicode_Category_LO;
		case 0x1336F: return Unicode_Category_LO;
		case 0x13370: return Unicode_Category_LO;
		case 0x13371: return Unicode_Category_LO;
		case 0x13372: return Unicode_Category_LO;
		case 0x13373: return Unicode_Category_LO;
		case 0x13374: return Unicode_Category_LO;
		case 0x13375: return Unicode_Category_LO;
		case 0x13376: return Unicode_Category_LO;
		case 0x13377: return Unicode_Category_LO;
		case 0x13378: return Unicode_Category_LO;
		case 0x13379: return Unicode_Category_LO;
		case 0x1337A: return Unicode_Category_LO;
		case 0x1337B: return Unicode_Category_LO;
		case 0x1337C: return Unicode_Category_LO;
		case 0x1337D: return Unicode_Category_LO;
		case 0x1337E: return Unicode_Category_LO;
		case 0x1337F: return Unicode_Category_LO;
		case 0x13380: return Unicode_Category_LO;
		case 0x13381: return Unicode_Category_LO;
		case 0x13382: return Unicode_Category_LO;
		case 0x13383: return Unicode_Category_LO;
		case 0x13384: return Unicode_Category_LO;
		case 0x13385: return Unicode_Category_LO;
		case 0x13386: return Unicode_Category_LO;
		case 0x13387: return Unicode_Category_LO;
		case 0x13388: return Unicode_Category_LO;
		case 0x13389: return Unicode_Category_LO;
		case 0x1338A: return Unicode_Category_LO;
		case 0x1338B: return Unicode_Category_LO;
		case 0x1338C: return Unicode_Category_LO;
		case 0x1338D: return Unicode_Category_LO;
		case 0x1338E: return Unicode_Category_LO;
		case 0x1338F: return Unicode_Category_LO;
		case 0x13390: return Unicode_Category_LO;
		case 0x13391: return Unicode_Category_LO;
		case 0x13392: return Unicode_Category_LO;
		case 0x13393: return Unicode_Category_LO;
		case 0x13394: return Unicode_Category_LO;
		case 0x13395: return Unicode_Category_LO;
		case 0x13396: return Unicode_Category_LO;
		case 0x13397: return Unicode_Category_LO;
		case 0x13398: return Unicode_Category_LO;
		case 0x13399: return Unicode_Category_LO;
		case 0x1339A: return Unicode_Category_LO;
		case 0x1339B: return Unicode_Category_LO;
		case 0x1339C: return Unicode_Category_LO;
		case 0x1339D: return Unicode_Category_LO;
		case 0x1339E: return Unicode_Category_LO;
		case 0x1339F: return Unicode_Category_LO;
		case 0x133A0: return Unicode_Category_LO;
		case 0x133A1: return Unicode_Category_LO;
		case 0x133A2: return Unicode_Category_LO;
		case 0x133A3: return Unicode_Category_LO;
		case 0x133A4: return Unicode_Category_LO;
		case 0x133A5: return Unicode_Category_LO;
		case 0x133A6: return Unicode_Category_LO;
		case 0x133A7: return Unicode_Category_LO;
		case 0x133A8: return Unicode_Category_LO;
		case 0x133A9: return Unicode_Category_LO;
		case 0x133AA: return Unicode_Category_LO;
		case 0x133AB: return Unicode_Category_LO;
		case 0x133AC: return Unicode_Category_LO;
		case 0x133AD: return Unicode_Category_LO;
		case 0x133AE: return Unicode_Category_LO;
		case 0x133AF: return Unicode_Category_LO;
		case 0x133B0: return Unicode_Category_LO;
		case 0x133B1: return Unicode_Category_LO;
		case 0x133B2: return Unicode_Category_LO;
		case 0x133B3: return Unicode_Category_LO;
		case 0x133B4: return Unicode_Category_LO;
		case 0x133B5: return Unicode_Category_LO;
		case 0x133B6: return Unicode_Category_LO;
		case 0x133B7: return Unicode_Category_LO;
		case 0x133B8: return Unicode_Category_LO;
		case 0x133B9: return Unicode_Category_LO;
		case 0x133BA: return Unicode_Category_LO;
		case 0x133BB: return Unicode_Category_LO;
		case 0x133BC: return Unicode_Category_LO;
		case 0x133BD: return Unicode_Category_LO;
		case 0x133BE: return Unicode_Category_LO;
		case 0x133BF: return Unicode_Category_LO;
		case 0x133C0: return Unicode_Category_LO;
		case 0x133C1: return Unicode_Category_LO;
		case 0x133C2: return Unicode_Category_LO;
		case 0x133C3: return Unicode_Category_LO;
		case 0x133C4: return Unicode_Category_LO;
		case 0x133C5: return Unicode_Category_LO;
		case 0x133C6: return Unicode_Category_LO;
		case 0x133C7: return Unicode_Category_LO;
		case 0x133C8: return Unicode_Category_LO;
		case 0x133C9: return Unicode_Category_LO;
		case 0x133CA: return Unicode_Category_LO;
		case 0x133CB: return Unicode_Category_LO;
		case 0x133CC: return Unicode_Category_LO;
		case 0x133CD: return Unicode_Category_LO;
		case 0x133CE: return Unicode_Category_LO;
		case 0x133CF: return Unicode_Category_LO;
		case 0x133D0: return Unicode_Category_LO;
		case 0x133D1: return Unicode_Category_LO;
		case 0x133D2: return Unicode_Category_LO;
		case 0x133D3: return Unicode_Category_LO;
		case 0x133D4: return Unicode_Category_LO;
		case 0x133D5: return Unicode_Category_LO;
		case 0x133D6: return Unicode_Category_LO;
		case 0x133D7: return Unicode_Category_LO;
		case 0x133D8: return Unicode_Category_LO;
		case 0x133D9: return Unicode_Category_LO;
		case 0x133DA: return Unicode_Category_LO;
		case 0x133DB: return Unicode_Category_LO;
		case 0x133DC: return Unicode_Category_LO;
		case 0x133DD: return Unicode_Category_LO;
		case 0x133DE: return Unicode_Category_LO;
		case 0x133DF: return Unicode_Category_LO;
		case 0x133E0: return Unicode_Category_LO;
		case 0x133E1: return Unicode_Category_LO;
		case 0x133E2: return Unicode_Category_LO;
		case 0x133E3: return Unicode_Category_LO;
		case 0x133E4: return Unicode_Category_LO;
		case 0x133E5: return Unicode_Category_LO;
		case 0x133E6: return Unicode_Category_LO;
		case 0x133E7: return Unicode_Category_LO;
		case 0x133E8: return Unicode_Category_LO;
		case 0x133E9: return Unicode_Category_LO;
		case 0x133EA: return Unicode_Category_LO;
		case 0x133EB: return Unicode_Category_LO;
		case 0x133EC: return Unicode_Category_LO;
		case 0x133ED: return Unicode_Category_LO;
		case 0x133EE: return Unicode_Category_LO;
		case 0x133EF: return Unicode_Category_LO;
		case 0x133F0: return Unicode_Category_LO;
		case 0x133F1: return Unicode_Category_LO;
		case 0x133F2: return Unicode_Category_LO;
		case 0x133F3: return Unicode_Category_LO;
		case 0x133F4: return Unicode_Category_LO;
		case 0x133F5: return Unicode_Category_LO;
		case 0x133F6: return Unicode_Category_LO;
		case 0x133F7: return Unicode_Category_LO;
		case 0x133F8: return Unicode_Category_LO;
		case 0x133F9: return Unicode_Category_LO;
		case 0x133FA: return Unicode_Category_LO;
		case 0x133FB: return Unicode_Category_LO;
		case 0x133FC: return Unicode_Category_LO;
		case 0x133FD: return Unicode_Category_LO;
		case 0x133FE: return Unicode_Category_LO;
		case 0x133FF: return Unicode_Category_LO;
		case 0x13400: return Unicode_Category_LO;
		case 0x13401: return Unicode_Category_LO;
		case 0x13402: return Unicode_Category_LO;
		case 0x13403: return Unicode_Category_LO;
		case 0x13404: return Unicode_Category_LO;
		case 0x13405: return Unicode_Category_LO;
		case 0x13406: return Unicode_Category_LO;
		case 0x13407: return Unicode_Category_LO;
		case 0x13408: return Unicode_Category_LO;
		case 0x13409: return Unicode_Category_LO;
		case 0x1340A: return Unicode_Category_LO;
		case 0x1340B: return Unicode_Category_LO;
		case 0x1340C: return Unicode_Category_LO;
		case 0x1340D: return Unicode_Category_LO;
		case 0x1340E: return Unicode_Category_LO;
		case 0x1340F: return Unicode_Category_LO;
		case 0x13410: return Unicode_Category_LO;
		case 0x13411: return Unicode_Category_LO;
		case 0x13412: return Unicode_Category_LO;
		case 0x13413: return Unicode_Category_LO;
		case 0x13414: return Unicode_Category_LO;
		case 0x13415: return Unicode_Category_LO;
		case 0x13416: return Unicode_Category_LO;
		case 0x13417: return Unicode_Category_LO;
		case 0x13418: return Unicode_Category_LO;
		case 0x13419: return Unicode_Category_LO;
		case 0x1341A: return Unicode_Category_LO;
		case 0x1341B: return Unicode_Category_LO;
		case 0x1341C: return Unicode_Category_LO;
		case 0x1341D: return Unicode_Category_LO;
		case 0x1341E: return Unicode_Category_LO;
		case 0x1341F: return Unicode_Category_LO;
		case 0x13420: return Unicode_Category_LO;
		case 0x13421: return Unicode_Category_LO;
		case 0x13422: return Unicode_Category_LO;
		case 0x13423: return Unicode_Category_LO;
		case 0x13424: return Unicode_Category_LO;
		case 0x13425: return Unicode_Category_LO;
		case 0x13426: return Unicode_Category_LO;
		case 0x13427: return Unicode_Category_LO;
		case 0x13428: return Unicode_Category_LO;
		case 0x13429: return Unicode_Category_LO;
		case 0x1342A: return Unicode_Category_LO;
		case 0x1342B: return Unicode_Category_LO;
		case 0x1342C: return Unicode_Category_LO;
		case 0x1342D: return Unicode_Category_LO;
		case 0x1342E: return Unicode_Category_LO;
		case 0x13430: return Unicode_Category_CF;
		case 0x13431: return Unicode_Category_CF;
		case 0x13432: return Unicode_Category_CF;
		case 0x13433: return Unicode_Category_CF;
		case 0x13434: return Unicode_Category_CF;
		case 0x13435: return Unicode_Category_CF;
		case 0x13436: return Unicode_Category_CF;
		case 0x13437: return Unicode_Category_CF;
		case 0x13438: return Unicode_Category_CF;
		case 0x14400: return Unicode_Category_LO;
		case 0x14401: return Unicode_Category_LO;
		case 0x14402: return Unicode_Category_LO;
		case 0x14403: return Unicode_Category_LO;
		case 0x14404: return Unicode_Category_LO;
		case 0x14405: return Unicode_Category_LO;
		case 0x14406: return Unicode_Category_LO;
		case 0x14407: return Unicode_Category_LO;
		case 0x14408: return Unicode_Category_LO;
		case 0x14409: return Unicode_Category_LO;
		case 0x1440A: return Unicode_Category_LO;
		case 0x1440B: return Unicode_Category_LO;
		case 0x1440C: return Unicode_Category_LO;
		case 0x1440D: return Unicode_Category_LO;
		case 0x1440E: return Unicode_Category_LO;
		case 0x1440F: return Unicode_Category_LO;
		case 0x14410: return Unicode_Category_LO;
		case 0x14411: return Unicode_Category_LO;
		case 0x14412: return Unicode_Category_LO;
		case 0x14413: return Unicode_Category_LO;
		case 0x14414: return Unicode_Category_LO;
		case 0x14415: return Unicode_Category_LO;
		case 0x14416: return Unicode_Category_LO;
		case 0x14417: return Unicode_Category_LO;
		case 0x14418: return Unicode_Category_LO;
		case 0x14419: return Unicode_Category_LO;
		case 0x1441A: return Unicode_Category_LO;
		case 0x1441B: return Unicode_Category_LO;
		case 0x1441C: return Unicode_Category_LO;
		case 0x1441D: return Unicode_Category_LO;
		case 0x1441E: return Unicode_Category_LO;
		case 0x1441F: return Unicode_Category_LO;
		case 0x14420: return Unicode_Category_LO;
		case 0x14421: return Unicode_Category_LO;
		case 0x14422: return Unicode_Category_LO;
		case 0x14423: return Unicode_Category_LO;
		case 0x14424: return Unicode_Category_LO;
		case 0x14425: return Unicode_Category_LO;
		case 0x14426: return Unicode_Category_LO;
		case 0x14427: return Unicode_Category_LO;
		case 0x14428: return Unicode_Category_LO;
		case 0x14429: return Unicode_Category_LO;
		case 0x1442A: return Unicode_Category_LO;
		case 0x1442B: return Unicode_Category_LO;
		case 0x1442C: return Unicode_Category_LO;
		case 0x1442D: return Unicode_Category_LO;
		case 0x1442E: return Unicode_Category_LO;
		case 0x1442F: return Unicode_Category_LO;
		case 0x14430: return Unicode_Category_LO;
		case 0x14431: return Unicode_Category_LO;
		case 0x14432: return Unicode_Category_LO;
		case 0x14433: return Unicode_Category_LO;
		case 0x14434: return Unicode_Category_LO;
		case 0x14435: return Unicode_Category_LO;
		case 0x14436: return Unicode_Category_LO;
		case 0x14437: return Unicode_Category_LO;
		case 0x14438: return Unicode_Category_LO;
		case 0x14439: return Unicode_Category_LO;
		case 0x1443A: return Unicode_Category_LO;
		case 0x1443B: return Unicode_Category_LO;
		case 0x1443C: return Unicode_Category_LO;
		case 0x1443D: return Unicode_Category_LO;
		case 0x1443E: return Unicode_Category_LO;
		case 0x1443F: return Unicode_Category_LO;
		case 0x14440: return Unicode_Category_LO;
		case 0x14441: return Unicode_Category_LO;
		case 0x14442: return Unicode_Category_LO;
		case 0x14443: return Unicode_Category_LO;
		case 0x14444: return Unicode_Category_LO;
		case 0x14445: return Unicode_Category_LO;
		case 0x14446: return Unicode_Category_LO;
		case 0x14447: return Unicode_Category_LO;
		case 0x14448: return Unicode_Category_LO;
		case 0x14449: return Unicode_Category_LO;
		case 0x1444A: return Unicode_Category_LO;
		case 0x1444B: return Unicode_Category_LO;
		case 0x1444C: return Unicode_Category_LO;
		case 0x1444D: return Unicode_Category_LO;
		case 0x1444E: return Unicode_Category_LO;
		case 0x1444F: return Unicode_Category_LO;
		case 0x14450: return Unicode_Category_LO;
		case 0x14451: return Unicode_Category_LO;
		case 0x14452: return Unicode_Category_LO;
		case 0x14453: return Unicode_Category_LO;
		case 0x14454: return Unicode_Category_LO;
		case 0x14455: return Unicode_Category_LO;
		case 0x14456: return Unicode_Category_LO;
		case 0x14457: return Unicode_Category_LO;
		case 0x14458: return Unicode_Category_LO;
		case 0x14459: return Unicode_Category_LO;
		case 0x1445A: return Unicode_Category_LO;
		case 0x1445B: return Unicode_Category_LO;
		case 0x1445C: return Unicode_Category_LO;
		case 0x1445D: return Unicode_Category_LO;
		case 0x1445E: return Unicode_Category_LO;
		case 0x1445F: return Unicode_Category_LO;
		case 0x14460: return Unicode_Category_LO;
		case 0x14461: return Unicode_Category_LO;
		case 0x14462: return Unicode_Category_LO;
		case 0x14463: return Unicode_Category_LO;
		case 0x14464: return Unicode_Category_LO;
		case 0x14465: return Unicode_Category_LO;
		case 0x14466: return Unicode_Category_LO;
		case 0x14467: return Unicode_Category_LO;
		case 0x14468: return Unicode_Category_LO;
		case 0x14469: return Unicode_Category_LO;
		case 0x1446A: return Unicode_Category_LO;
		case 0x1446B: return Unicode_Category_LO;
		case 0x1446C: return Unicode_Category_LO;
		case 0x1446D: return Unicode_Category_LO;
		case 0x1446E: return Unicode_Category_LO;
		case 0x1446F: return Unicode_Category_LO;
		case 0x14470: return Unicode_Category_LO;
		case 0x14471: return Unicode_Category_LO;
		case 0x14472: return Unicode_Category_LO;
		case 0x14473: return Unicode_Category_LO;
		case 0x14474: return Unicode_Category_LO;
		case 0x14475: return Unicode_Category_LO;
		case 0x14476: return Unicode_Category_LO;
		case 0x14477: return Unicode_Category_LO;
		case 0x14478: return Unicode_Category_LO;
		case 0x14479: return Unicode_Category_LO;
		case 0x1447A: return Unicode_Category_LO;
		case 0x1447B: return Unicode_Category_LO;
		case 0x1447C: return Unicode_Category_LO;
		case 0x1447D: return Unicode_Category_LO;
		case 0x1447E: return Unicode_Category_LO;
		case 0x1447F: return Unicode_Category_LO;
		case 0x14480: return Unicode_Category_LO;
		case 0x14481: return Unicode_Category_LO;
		case 0x14482: return Unicode_Category_LO;
		case 0x14483: return Unicode_Category_LO;
		case 0x14484: return Unicode_Category_LO;
		case 0x14485: return Unicode_Category_LO;
		case 0x14486: return Unicode_Category_LO;
		case 0x14487: return Unicode_Category_LO;
		case 0x14488: return Unicode_Category_LO;
		case 0x14489: return Unicode_Category_LO;
		case 0x1448A: return Unicode_Category_LO;
		case 0x1448B: return Unicode_Category_LO;
		case 0x1448C: return Unicode_Category_LO;
		case 0x1448D: return Unicode_Category_LO;
		case 0x1448E: return Unicode_Category_LO;
		case 0x1448F: return Unicode_Category_LO;
		case 0x14490: return Unicode_Category_LO;
		case 0x14491: return Unicode_Category_LO;
		case 0x14492: return Unicode_Category_LO;
		case 0x14493: return Unicode_Category_LO;
		case 0x14494: return Unicode_Category_LO;
		case 0x14495: return Unicode_Category_LO;
		case 0x14496: return Unicode_Category_LO;
		case 0x14497: return Unicode_Category_LO;
		case 0x14498: return Unicode_Category_LO;
		case 0x14499: return Unicode_Category_LO;
		case 0x1449A: return Unicode_Category_LO;
		case 0x1449B: return Unicode_Category_LO;
		case 0x1449C: return Unicode_Category_LO;
		case 0x1449D: return Unicode_Category_LO;
		case 0x1449E: return Unicode_Category_LO;
		case 0x1449F: return Unicode_Category_LO;
		case 0x144A0: return Unicode_Category_LO;
		case 0x144A1: return Unicode_Category_LO;
		case 0x144A2: return Unicode_Category_LO;
		case 0x144A3: return Unicode_Category_LO;
		case 0x144A4: return Unicode_Category_LO;
		case 0x144A5: return Unicode_Category_LO;
		case 0x144A6: return Unicode_Category_LO;
		case 0x144A7: return Unicode_Category_LO;
		case 0x144A8: return Unicode_Category_LO;
		case 0x144A9: return Unicode_Category_LO;
		case 0x144AA: return Unicode_Category_LO;
		case 0x144AB: return Unicode_Category_LO;
		case 0x144AC: return Unicode_Category_LO;
		case 0x144AD: return Unicode_Category_LO;
		case 0x144AE: return Unicode_Category_LO;
		case 0x144AF: return Unicode_Category_LO;
		case 0x144B0: return Unicode_Category_LO;
		case 0x144B1: return Unicode_Category_LO;
		case 0x144B2: return Unicode_Category_LO;
		case 0x144B3: return Unicode_Category_LO;
		case 0x144B4: return Unicode_Category_LO;
		case 0x144B5: return Unicode_Category_LO;
		case 0x144B6: return Unicode_Category_LO;
		case 0x144B7: return Unicode_Category_LO;
		case 0x144B8: return Unicode_Category_LO;
		case 0x144B9: return Unicode_Category_LO;
		case 0x144BA: return Unicode_Category_LO;
		case 0x144BB: return Unicode_Category_LO;
		case 0x144BC: return Unicode_Category_LO;
		case 0x144BD: return Unicode_Category_LO;
		case 0x144BE: return Unicode_Category_LO;
		case 0x144BF: return Unicode_Category_LO;
		case 0x144C0: return Unicode_Category_LO;
		case 0x144C1: return Unicode_Category_LO;
		case 0x144C2: return Unicode_Category_LO;
		case 0x144C3: return Unicode_Category_LO;
		case 0x144C4: return Unicode_Category_LO;
		case 0x144C5: return Unicode_Category_LO;
		case 0x144C6: return Unicode_Category_LO;
		case 0x144C7: return Unicode_Category_LO;
		case 0x144C8: return Unicode_Category_LO;
		case 0x144C9: return Unicode_Category_LO;
		case 0x144CA: return Unicode_Category_LO;
		case 0x144CB: return Unicode_Category_LO;
		case 0x144CC: return Unicode_Category_LO;
		case 0x144CD: return Unicode_Category_LO;
		case 0x144CE: return Unicode_Category_LO;
		case 0x144CF: return Unicode_Category_LO;
		case 0x144D0: return Unicode_Category_LO;
		case 0x144D1: return Unicode_Category_LO;
		case 0x144D2: return Unicode_Category_LO;
		case 0x144D3: return Unicode_Category_LO;
		case 0x144D4: return Unicode_Category_LO;
		case 0x144D5: return Unicode_Category_LO;
		case 0x144D6: return Unicode_Category_LO;
		case 0x144D7: return Unicode_Category_LO;
		case 0x144D8: return Unicode_Category_LO;
		case 0x144D9: return Unicode_Category_LO;
		case 0x144DA: return Unicode_Category_LO;
		case 0x144DB: return Unicode_Category_LO;
		case 0x144DC: return Unicode_Category_LO;
		case 0x144DD: return Unicode_Category_LO;
		case 0x144DE: return Unicode_Category_LO;
		case 0x144DF: return Unicode_Category_LO;
		case 0x144E0: return Unicode_Category_LO;
		case 0x144E1: return Unicode_Category_LO;
		case 0x144E2: return Unicode_Category_LO;
		case 0x144E3: return Unicode_Category_LO;
		case 0x144E4: return Unicode_Category_LO;
		case 0x144E5: return Unicode_Category_LO;
		case 0x144E6: return Unicode_Category_LO;
		case 0x144E7: return Unicode_Category_LO;
		case 0x144E8: return Unicode_Category_LO;
		case 0x144E9: return Unicode_Category_LO;
		case 0x144EA: return Unicode_Category_LO;
		case 0x144EB: return Unicode_Category_LO;
		case 0x144EC: return Unicode_Category_LO;
		case 0x144ED: return Unicode_Category_LO;
		case 0x144EE: return Unicode_Category_LO;
		case 0x144EF: return Unicode_Category_LO;
		case 0x144F0: return Unicode_Category_LO;
		case 0x144F1: return Unicode_Category_LO;
		case 0x144F2: return Unicode_Category_LO;
		case 0x144F3: return Unicode_Category_LO;
		case 0x144F4: return Unicode_Category_LO;
		case 0x144F5: return Unicode_Category_LO;
		case 0x144F6: return Unicode_Category_LO;
		case 0x144F7: return Unicode_Category_LO;
		case 0x144F8: return Unicode_Category_LO;
		case 0x144F9: return Unicode_Category_LO;
		case 0x144FA: return Unicode_Category_LO;
		case 0x144FB: return Unicode_Category_LO;
		case 0x144FC: return Unicode_Category_LO;
		case 0x144FD: return Unicode_Category_LO;
		case 0x144FE: return Unicode_Category_LO;
		case 0x144FF: return Unicode_Category_LO;
		case 0x14500: return Unicode_Category_LO;
		case 0x14501: return Unicode_Category_LO;
		case 0x14502: return Unicode_Category_LO;
		case 0x14503: return Unicode_Category_LO;
		case 0x14504: return Unicode_Category_LO;
		case 0x14505: return Unicode_Category_LO;
		case 0x14506: return Unicode_Category_LO;
		case 0x14507: return Unicode_Category_LO;
		case 0x14508: return Unicode_Category_LO;
		case 0x14509: return Unicode_Category_LO;
		case 0x1450A: return Unicode_Category_LO;
		case 0x1450B: return Unicode_Category_LO;
		case 0x1450C: return Unicode_Category_LO;
		case 0x1450D: return Unicode_Category_LO;
		case 0x1450E: return Unicode_Category_LO;
		case 0x1450F: return Unicode_Category_LO;
		case 0x14510: return Unicode_Category_LO;
		case 0x14511: return Unicode_Category_LO;
		case 0x14512: return Unicode_Category_LO;
		case 0x14513: return Unicode_Category_LO;
		case 0x14514: return Unicode_Category_LO;
		case 0x14515: return Unicode_Category_LO;
		case 0x14516: return Unicode_Category_LO;
		case 0x14517: return Unicode_Category_LO;
		case 0x14518: return Unicode_Category_LO;
		case 0x14519: return Unicode_Category_LO;
		case 0x1451A: return Unicode_Category_LO;
		case 0x1451B: return Unicode_Category_LO;
		case 0x1451C: return Unicode_Category_LO;
		case 0x1451D: return Unicode_Category_LO;
		case 0x1451E: return Unicode_Category_LO;
		case 0x1451F: return Unicode_Category_LO;
		case 0x14520: return Unicode_Category_LO;
		case 0x14521: return Unicode_Category_LO;
		case 0x14522: return Unicode_Category_LO;
		case 0x14523: return Unicode_Category_LO;
		case 0x14524: return Unicode_Category_LO;
		case 0x14525: return Unicode_Category_LO;
		case 0x14526: return Unicode_Category_LO;
		case 0x14527: return Unicode_Category_LO;
		case 0x14528: return Unicode_Category_LO;
		case 0x14529: return Unicode_Category_LO;
		case 0x1452A: return Unicode_Category_LO;
		case 0x1452B: return Unicode_Category_LO;
		case 0x1452C: return Unicode_Category_LO;
		case 0x1452D: return Unicode_Category_LO;
		case 0x1452E: return Unicode_Category_LO;
		case 0x1452F: return Unicode_Category_LO;
		case 0x14530: return Unicode_Category_LO;
		case 0x14531: return Unicode_Category_LO;
		case 0x14532: return Unicode_Category_LO;
		case 0x14533: return Unicode_Category_LO;
		case 0x14534: return Unicode_Category_LO;
		case 0x14535: return Unicode_Category_LO;
		case 0x14536: return Unicode_Category_LO;
		case 0x14537: return Unicode_Category_LO;
		case 0x14538: return Unicode_Category_LO;
		case 0x14539: return Unicode_Category_LO;
		case 0x1453A: return Unicode_Category_LO;
		case 0x1453B: return Unicode_Category_LO;
		case 0x1453C: return Unicode_Category_LO;
		case 0x1453D: return Unicode_Category_LO;
		case 0x1453E: return Unicode_Category_LO;
		case 0x1453F: return Unicode_Category_LO;
		case 0x14540: return Unicode_Category_LO;
		case 0x14541: return Unicode_Category_LO;
		case 0x14542: return Unicode_Category_LO;
		case 0x14543: return Unicode_Category_LO;
		case 0x14544: return Unicode_Category_LO;
		case 0x14545: return Unicode_Category_LO;
		case 0x14546: return Unicode_Category_LO;
		case 0x14547: return Unicode_Category_LO;
		case 0x14548: return Unicode_Category_LO;
		case 0x14549: return Unicode_Category_LO;
		case 0x1454A: return Unicode_Category_LO;
		case 0x1454B: return Unicode_Category_LO;
		case 0x1454C: return Unicode_Category_LO;
		case 0x1454D: return Unicode_Category_LO;
		case 0x1454E: return Unicode_Category_LO;
		case 0x1454F: return Unicode_Category_LO;
		case 0x14550: return Unicode_Category_LO;
		case 0x14551: return Unicode_Category_LO;
		case 0x14552: return Unicode_Category_LO;
		case 0x14553: return Unicode_Category_LO;
		case 0x14554: return Unicode_Category_LO;
		case 0x14555: return Unicode_Category_LO;
		case 0x14556: return Unicode_Category_LO;
		case 0x14557: return Unicode_Category_LO;
		case 0x14558: return Unicode_Category_LO;
		case 0x14559: return Unicode_Category_LO;
		case 0x1455A: return Unicode_Category_LO;
		case 0x1455B: return Unicode_Category_LO;
		case 0x1455C: return Unicode_Category_LO;
		case 0x1455D: return Unicode_Category_LO;
		case 0x1455E: return Unicode_Category_LO;
		case 0x1455F: return Unicode_Category_LO;
		case 0x14560: return Unicode_Category_LO;
		case 0x14561: return Unicode_Category_LO;
		case 0x14562: return Unicode_Category_LO;
		case 0x14563: return Unicode_Category_LO;
		case 0x14564: return Unicode_Category_LO;
		case 0x14565: return Unicode_Category_LO;
		case 0x14566: return Unicode_Category_LO;
		case 0x14567: return Unicode_Category_LO;
		case 0x14568: return Unicode_Category_LO;
		case 0x14569: return Unicode_Category_LO;
		case 0x1456A: return Unicode_Category_LO;
		case 0x1456B: return Unicode_Category_LO;
		case 0x1456C: return Unicode_Category_LO;
		case 0x1456D: return Unicode_Category_LO;
		case 0x1456E: return Unicode_Category_LO;
		case 0x1456F: return Unicode_Category_LO;
		case 0x14570: return Unicode_Category_LO;
		case 0x14571: return Unicode_Category_LO;
		case 0x14572: return Unicode_Category_LO;
		case 0x14573: return Unicode_Category_LO;
		case 0x14574: return Unicode_Category_LO;
		case 0x14575: return Unicode_Category_LO;
		case 0x14576: return Unicode_Category_LO;
		case 0x14577: return Unicode_Category_LO;
		case 0x14578: return Unicode_Category_LO;
		case 0x14579: return Unicode_Category_LO;
		case 0x1457A: return Unicode_Category_LO;
		case 0x1457B: return Unicode_Category_LO;
		case 0x1457C: return Unicode_Category_LO;
		case 0x1457D: return Unicode_Category_LO;
		case 0x1457E: return Unicode_Category_LO;
		case 0x1457F: return Unicode_Category_LO;
		case 0x14580: return Unicode_Category_LO;
		case 0x14581: return Unicode_Category_LO;
		case 0x14582: return Unicode_Category_LO;
		case 0x14583: return Unicode_Category_LO;
		case 0x14584: return Unicode_Category_LO;
		case 0x14585: return Unicode_Category_LO;
		case 0x14586: return Unicode_Category_LO;
		case 0x14587: return Unicode_Category_LO;
		case 0x14588: return Unicode_Category_LO;
		case 0x14589: return Unicode_Category_LO;
		case 0x1458A: return Unicode_Category_LO;
		case 0x1458B: return Unicode_Category_LO;
		case 0x1458C: return Unicode_Category_LO;
		case 0x1458D: return Unicode_Category_LO;
		case 0x1458E: return Unicode_Category_LO;
		case 0x1458F: return Unicode_Category_LO;
		case 0x14590: return Unicode_Category_LO;
		case 0x14591: return Unicode_Category_LO;
		case 0x14592: return Unicode_Category_LO;
		case 0x14593: return Unicode_Category_LO;
		case 0x14594: return Unicode_Category_LO;
		case 0x14595: return Unicode_Category_LO;
		case 0x14596: return Unicode_Category_LO;
		case 0x14597: return Unicode_Category_LO;
		case 0x14598: return Unicode_Category_LO;
		case 0x14599: return Unicode_Category_LO;
		case 0x1459A: return Unicode_Category_LO;
		case 0x1459B: return Unicode_Category_LO;
		case 0x1459C: return Unicode_Category_LO;
		case 0x1459D: return Unicode_Category_LO;
		case 0x1459E: return Unicode_Category_LO;
		case 0x1459F: return Unicode_Category_LO;
		case 0x145A0: return Unicode_Category_LO;
		case 0x145A1: return Unicode_Category_LO;
		case 0x145A2: return Unicode_Category_LO;
		case 0x145A3: return Unicode_Category_LO;
		case 0x145A4: return Unicode_Category_LO;
		case 0x145A5: return Unicode_Category_LO;
		case 0x145A6: return Unicode_Category_LO;
		case 0x145A7: return Unicode_Category_LO;
		case 0x145A8: return Unicode_Category_LO;
		case 0x145A9: return Unicode_Category_LO;
		case 0x145AA: return Unicode_Category_LO;
		case 0x145AB: return Unicode_Category_LO;
		case 0x145AC: return Unicode_Category_LO;
		case 0x145AD: return Unicode_Category_LO;
		case 0x145AE: return Unicode_Category_LO;
		case 0x145AF: return Unicode_Category_LO;
		case 0x145B0: return Unicode_Category_LO;
		case 0x145B1: return Unicode_Category_LO;
		case 0x145B2: return Unicode_Category_LO;
		case 0x145B3: return Unicode_Category_LO;
		case 0x145B4: return Unicode_Category_LO;
		case 0x145B5: return Unicode_Category_LO;
		case 0x145B6: return Unicode_Category_LO;
		case 0x145B7: return Unicode_Category_LO;
		case 0x145B8: return Unicode_Category_LO;
		case 0x145B9: return Unicode_Category_LO;
		case 0x145BA: return Unicode_Category_LO;
		case 0x145BB: return Unicode_Category_LO;
		case 0x145BC: return Unicode_Category_LO;
		case 0x145BD: return Unicode_Category_LO;
		case 0x145BE: return Unicode_Category_LO;
		case 0x145BF: return Unicode_Category_LO;
		case 0x145C0: return Unicode_Category_LO;
		case 0x145C1: return Unicode_Category_LO;
		case 0x145C2: return Unicode_Category_LO;
		case 0x145C3: return Unicode_Category_LO;
		case 0x145C4: return Unicode_Category_LO;
		case 0x145C5: return Unicode_Category_LO;
		case 0x145C6: return Unicode_Category_LO;
		case 0x145C7: return Unicode_Category_LO;
		case 0x145C8: return Unicode_Category_LO;
		case 0x145C9: return Unicode_Category_LO;
		case 0x145CA: return Unicode_Category_LO;
		case 0x145CB: return Unicode_Category_LO;
		case 0x145CC: return Unicode_Category_LO;
		case 0x145CD: return Unicode_Category_LO;
		case 0x145CE: return Unicode_Category_LO;
		case 0x145CF: return Unicode_Category_LO;
		case 0x145D0: return Unicode_Category_LO;
		case 0x145D1: return Unicode_Category_LO;
		case 0x145D2: return Unicode_Category_LO;
		case 0x145D3: return Unicode_Category_LO;
		case 0x145D4: return Unicode_Category_LO;
		case 0x145D5: return Unicode_Category_LO;
		case 0x145D6: return Unicode_Category_LO;
		case 0x145D7: return Unicode_Category_LO;
		case 0x145D8: return Unicode_Category_LO;
		case 0x145D9: return Unicode_Category_LO;
		case 0x145DA: return Unicode_Category_LO;
		case 0x145DB: return Unicode_Category_LO;
		case 0x145DC: return Unicode_Category_LO;
		case 0x145DD: return Unicode_Category_LO;
		case 0x145DE: return Unicode_Category_LO;
		case 0x145DF: return Unicode_Category_LO;
		case 0x145E0: return Unicode_Category_LO;
		case 0x145E1: return Unicode_Category_LO;
		case 0x145E2: return Unicode_Category_LO;
		case 0x145E3: return Unicode_Category_LO;
		case 0x145E4: return Unicode_Category_LO;
		case 0x145E5: return Unicode_Category_LO;
		case 0x145E6: return Unicode_Category_LO;
		case 0x145E7: return Unicode_Category_LO;
		case 0x145E8: return Unicode_Category_LO;
		case 0x145E9: return Unicode_Category_LO;
		case 0x145EA: return Unicode_Category_LO;
		case 0x145EB: return Unicode_Category_LO;
		case 0x145EC: return Unicode_Category_LO;
		case 0x145ED: return Unicode_Category_LO;
		case 0x145EE: return Unicode_Category_LO;
		case 0x145EF: return Unicode_Category_LO;
		case 0x145F0: return Unicode_Category_LO;
		case 0x145F1: return Unicode_Category_LO;
		case 0x145F2: return Unicode_Category_LO;
		case 0x145F3: return Unicode_Category_LO;
		case 0x145F4: return Unicode_Category_LO;
		case 0x145F5: return Unicode_Category_LO;
		case 0x145F6: return Unicode_Category_LO;
		case 0x145F7: return Unicode_Category_LO;
		case 0x145F8: return Unicode_Category_LO;
		case 0x145F9: return Unicode_Category_LO;
		case 0x145FA: return Unicode_Category_LO;
		case 0x145FB: return Unicode_Category_LO;
		case 0x145FC: return Unicode_Category_LO;
		case 0x145FD: return Unicode_Category_LO;
		case 0x145FE: return Unicode_Category_LO;
		case 0x145FF: return Unicode_Category_LO;
		case 0x14600: return Unicode_Category_LO;
		case 0x14601: return Unicode_Category_LO;
		case 0x14602: return Unicode_Category_LO;
		case 0x14603: return Unicode_Category_LO;
		case 0x14604: return Unicode_Category_LO;
		case 0x14605: return Unicode_Category_LO;
		case 0x14606: return Unicode_Category_LO;
		case 0x14607: return Unicode_Category_LO;
		case 0x14608: return Unicode_Category_LO;
		case 0x14609: return Unicode_Category_LO;
		case 0x1460A: return Unicode_Category_LO;
		case 0x1460B: return Unicode_Category_LO;
		case 0x1460C: return Unicode_Category_LO;
		case 0x1460D: return Unicode_Category_LO;
		case 0x1460E: return Unicode_Category_LO;
		case 0x1460F: return Unicode_Category_LO;
		case 0x14610: return Unicode_Category_LO;
		case 0x14611: return Unicode_Category_LO;
		case 0x14612: return Unicode_Category_LO;
		case 0x14613: return Unicode_Category_LO;
		case 0x14614: return Unicode_Category_LO;
		case 0x14615: return Unicode_Category_LO;
		case 0x14616: return Unicode_Category_LO;
		case 0x14617: return Unicode_Category_LO;
		case 0x14618: return Unicode_Category_LO;
		case 0x14619: return Unicode_Category_LO;
		case 0x1461A: return Unicode_Category_LO;
		case 0x1461B: return Unicode_Category_LO;
		case 0x1461C: return Unicode_Category_LO;
		case 0x1461D: return Unicode_Category_LO;
		case 0x1461E: return Unicode_Category_LO;
		case 0x1461F: return Unicode_Category_LO;
		case 0x14620: return Unicode_Category_LO;
		case 0x14621: return Unicode_Category_LO;
		case 0x14622: return Unicode_Category_LO;
		case 0x14623: return Unicode_Category_LO;
		case 0x14624: return Unicode_Category_LO;
		case 0x14625: return Unicode_Category_LO;
		case 0x14626: return Unicode_Category_LO;
		case 0x14627: return Unicode_Category_LO;
		case 0x14628: return Unicode_Category_LO;
		case 0x14629: return Unicode_Category_LO;
		case 0x1462A: return Unicode_Category_LO;
		case 0x1462B: return Unicode_Category_LO;
		case 0x1462C: return Unicode_Category_LO;
		case 0x1462D: return Unicode_Category_LO;
		case 0x1462E: return Unicode_Category_LO;
		case 0x1462F: return Unicode_Category_LO;
		case 0x14630: return Unicode_Category_LO;
		case 0x14631: return Unicode_Category_LO;
		case 0x14632: return Unicode_Category_LO;
		case 0x14633: return Unicode_Category_LO;
		case 0x14634: return Unicode_Category_LO;
		case 0x14635: return Unicode_Category_LO;
		case 0x14636: return Unicode_Category_LO;
		case 0x14637: return Unicode_Category_LO;
		case 0x14638: return Unicode_Category_LO;
		case 0x14639: return Unicode_Category_LO;
		case 0x1463A: return Unicode_Category_LO;
		case 0x1463B: return Unicode_Category_LO;
		case 0x1463C: return Unicode_Category_LO;
		case 0x1463D: return Unicode_Category_LO;
		case 0x1463E: return Unicode_Category_LO;
		case 0x1463F: return Unicode_Category_LO;
		case 0x14640: return Unicode_Category_LO;
		case 0x14641: return Unicode_Category_LO;
		case 0x14642: return Unicode_Category_LO;
		case 0x14643: return Unicode_Category_LO;
		case 0x14644: return Unicode_Category_LO;
		case 0x14645: return Unicode_Category_LO;
		case 0x14646: return Unicode_Category_LO;
		case 0x16800: return Unicode_Category_LO;
		case 0x16801: return Unicode_Category_LO;
		case 0x16802: return Unicode_Category_LO;
		case 0x16803: return Unicode_Category_LO;
		case 0x16804: return Unicode_Category_LO;
		case 0x16805: return Unicode_Category_LO;
		case 0x16806: return Unicode_Category_LO;
		case 0x16807: return Unicode_Category_LO;
		case 0x16808: return Unicode_Category_LO;
		case 0x16809: return Unicode_Category_LO;
		case 0x1680A: return Unicode_Category_LO;
		case 0x1680B: return Unicode_Category_LO;
		case 0x1680C: return Unicode_Category_LO;
		case 0x1680D: return Unicode_Category_LO;
		case 0x1680E: return Unicode_Category_LO;
		case 0x1680F: return Unicode_Category_LO;
		case 0x16810: return Unicode_Category_LO;
		case 0x16811: return Unicode_Category_LO;
		case 0x16812: return Unicode_Category_LO;
		case 0x16813: return Unicode_Category_LO;
		case 0x16814: return Unicode_Category_LO;
		case 0x16815: return Unicode_Category_LO;
		case 0x16816: return Unicode_Category_LO;
		case 0x16817: return Unicode_Category_LO;
		case 0x16818: return Unicode_Category_LO;
		case 0x16819: return Unicode_Category_LO;
		case 0x1681A: return Unicode_Category_LO;
		case 0x1681B: return Unicode_Category_LO;
		case 0x1681C: return Unicode_Category_LO;
		case 0x1681D: return Unicode_Category_LO;
		case 0x1681E: return Unicode_Category_LO;
		case 0x1681F: return Unicode_Category_LO;
		case 0x16820: return Unicode_Category_LO;
		case 0x16821: return Unicode_Category_LO;
		case 0x16822: return Unicode_Category_LO;
		case 0x16823: return Unicode_Category_LO;
		case 0x16824: return Unicode_Category_LO;
		case 0x16825: return Unicode_Category_LO;
		case 0x16826: return Unicode_Category_LO;
		case 0x16827: return Unicode_Category_LO;
		case 0x16828: return Unicode_Category_LO;
		case 0x16829: return Unicode_Category_LO;
		case 0x1682A: return Unicode_Category_LO;
		case 0x1682B: return Unicode_Category_LO;
		case 0x1682C: return Unicode_Category_LO;
		case 0x1682D: return Unicode_Category_LO;
		case 0x1682E: return Unicode_Category_LO;
		case 0x1682F: return Unicode_Category_LO;
		case 0x16830: return Unicode_Category_LO;
		case 0x16831: return Unicode_Category_LO;
		case 0x16832: return Unicode_Category_LO;
		case 0x16833: return Unicode_Category_LO;
		case 0x16834: return Unicode_Category_LO;
		case 0x16835: return Unicode_Category_LO;
		case 0x16836: return Unicode_Category_LO;
		case 0x16837: return Unicode_Category_LO;
		case 0x16838: return Unicode_Category_LO;
		case 0x16839: return Unicode_Category_LO;
		case 0x1683A: return Unicode_Category_LO;
		case 0x1683B: return Unicode_Category_LO;
		case 0x1683C: return Unicode_Category_LO;
		case 0x1683D: return Unicode_Category_LO;
		case 0x1683E: return Unicode_Category_LO;
		case 0x1683F: return Unicode_Category_LO;
		case 0x16840: return Unicode_Category_LO;
		case 0x16841: return Unicode_Category_LO;
		case 0x16842: return Unicode_Category_LO;
		case 0x16843: return Unicode_Category_LO;
		case 0x16844: return Unicode_Category_LO;
		case 0x16845: return Unicode_Category_LO;
		case 0x16846: return Unicode_Category_LO;
		case 0x16847: return Unicode_Category_LO;
		case 0x16848: return Unicode_Category_LO;
		case 0x16849: return Unicode_Category_LO;
		case 0x1684A: return Unicode_Category_LO;
		case 0x1684B: return Unicode_Category_LO;
		case 0x1684C: return Unicode_Category_LO;
		case 0x1684D: return Unicode_Category_LO;
		case 0x1684E: return Unicode_Category_LO;
		case 0x1684F: return Unicode_Category_LO;
		case 0x16850: return Unicode_Category_LO;
		case 0x16851: return Unicode_Category_LO;
		case 0x16852: return Unicode_Category_LO;
		case 0x16853: return Unicode_Category_LO;
		case 0x16854: return Unicode_Category_LO;
		case 0x16855: return Unicode_Category_LO;
		case 0x16856: return Unicode_Category_LO;
		case 0x16857: return Unicode_Category_LO;
		case 0x16858: return Unicode_Category_LO;
		case 0x16859: return Unicode_Category_LO;
		case 0x1685A: return Unicode_Category_LO;
		case 0x1685B: return Unicode_Category_LO;
		case 0x1685C: return Unicode_Category_LO;
		case 0x1685D: return Unicode_Category_LO;
		case 0x1685E: return Unicode_Category_LO;
		case 0x1685F: return Unicode_Category_LO;
		case 0x16860: return Unicode_Category_LO;
		case 0x16861: return Unicode_Category_LO;
		case 0x16862: return Unicode_Category_LO;
		case 0x16863: return Unicode_Category_LO;
		case 0x16864: return Unicode_Category_LO;
		case 0x16865: return Unicode_Category_LO;
		case 0x16866: return Unicode_Category_LO;
		case 0x16867: return Unicode_Category_LO;
		case 0x16868: return Unicode_Category_LO;
		case 0x16869: return Unicode_Category_LO;
		case 0x1686A: return Unicode_Category_LO;
		case 0x1686B: return Unicode_Category_LO;
		case 0x1686C: return Unicode_Category_LO;
		case 0x1686D: return Unicode_Category_LO;
		case 0x1686E: return Unicode_Category_LO;
		case 0x1686F: return Unicode_Category_LO;
		case 0x16870: return Unicode_Category_LO;
		case 0x16871: return Unicode_Category_LO;
		case 0x16872: return Unicode_Category_LO;
		case 0x16873: return Unicode_Category_LO;
		case 0x16874: return Unicode_Category_LO;
		case 0x16875: return Unicode_Category_LO;
		case 0x16876: return Unicode_Category_LO;
		case 0x16877: return Unicode_Category_LO;
		case 0x16878: return Unicode_Category_LO;
		case 0x16879: return Unicode_Category_LO;
		case 0x1687A: return Unicode_Category_LO;
		case 0x1687B: return Unicode_Category_LO;
		case 0x1687C: return Unicode_Category_LO;
		case 0x1687D: return Unicode_Category_LO;
		case 0x1687E: return Unicode_Category_LO;
		case 0x1687F: return Unicode_Category_LO;
		case 0x16880: return Unicode_Category_LO;
		case 0x16881: return Unicode_Category_LO;
		case 0x16882: return Unicode_Category_LO;
		case 0x16883: return Unicode_Category_LO;
		case 0x16884: return Unicode_Category_LO;
		case 0x16885: return Unicode_Category_LO;
		case 0x16886: return Unicode_Category_LO;
		case 0x16887: return Unicode_Category_LO;
		case 0x16888: return Unicode_Category_LO;
		case 0x16889: return Unicode_Category_LO;
		case 0x1688A: return Unicode_Category_LO;
		case 0x1688B: return Unicode_Category_LO;
		case 0x1688C: return Unicode_Category_LO;
		case 0x1688D: return Unicode_Category_LO;
		case 0x1688E: return Unicode_Category_LO;
		case 0x1688F: return Unicode_Category_LO;
		case 0x16890: return Unicode_Category_LO;
		case 0x16891: return Unicode_Category_LO;
		case 0x16892: return Unicode_Category_LO;
		case 0x16893: return Unicode_Category_LO;
		case 0x16894: return Unicode_Category_LO;
		case 0x16895: return Unicode_Category_LO;
		case 0x16896: return Unicode_Category_LO;
		case 0x16897: return Unicode_Category_LO;
		case 0x16898: return Unicode_Category_LO;
		case 0x16899: return Unicode_Category_LO;
		case 0x1689A: return Unicode_Category_LO;
		case 0x1689B: return Unicode_Category_LO;
		case 0x1689C: return Unicode_Category_LO;
		case 0x1689D: return Unicode_Category_LO;
		case 0x1689E: return Unicode_Category_LO;
		case 0x1689F: return Unicode_Category_LO;
		case 0x168A0: return Unicode_Category_LO;
		case 0x168A1: return Unicode_Category_LO;
		case 0x168A2: return Unicode_Category_LO;
		case 0x168A3: return Unicode_Category_LO;
		case 0x168A4: return Unicode_Category_LO;
		case 0x168A5: return Unicode_Category_LO;
		case 0x168A6: return Unicode_Category_LO;
		case 0x168A7: return Unicode_Category_LO;
		case 0x168A8: return Unicode_Category_LO;
		case 0x168A9: return Unicode_Category_LO;
		case 0x168AA: return Unicode_Category_LO;
		case 0x168AB: return Unicode_Category_LO;
		case 0x168AC: return Unicode_Category_LO;
		case 0x168AD: return Unicode_Category_LO;
		case 0x168AE: return Unicode_Category_LO;
		case 0x168AF: return Unicode_Category_LO;
		case 0x168B0: return Unicode_Category_LO;
		case 0x168B1: return Unicode_Category_LO;
		case 0x168B2: return Unicode_Category_LO;
		case 0x168B3: return Unicode_Category_LO;
		case 0x168B4: return Unicode_Category_LO;
		case 0x168B5: return Unicode_Category_LO;
		case 0x168B6: return Unicode_Category_LO;
		case 0x168B7: return Unicode_Category_LO;
		case 0x168B8: return Unicode_Category_LO;
		case 0x168B9: return Unicode_Category_LO;
		case 0x168BA: return Unicode_Category_LO;
		case 0x168BB: return Unicode_Category_LO;
		case 0x168BC: return Unicode_Category_LO;
		case 0x168BD: return Unicode_Category_LO;
		case 0x168BE: return Unicode_Category_LO;
		case 0x168BF: return Unicode_Category_LO;
		case 0x168C0: return Unicode_Category_LO;
		case 0x168C1: return Unicode_Category_LO;
		case 0x168C2: return Unicode_Category_LO;
		case 0x168C3: return Unicode_Category_LO;
		case 0x168C4: return Unicode_Category_LO;
		case 0x168C5: return Unicode_Category_LO;
		case 0x168C6: return Unicode_Category_LO;
		case 0x168C7: return Unicode_Category_LO;
		case 0x168C8: return Unicode_Category_LO;
		case 0x168C9: return Unicode_Category_LO;
		case 0x168CA: return Unicode_Category_LO;
		case 0x168CB: return Unicode_Category_LO;
		case 0x168CC: return Unicode_Category_LO;
		case 0x168CD: return Unicode_Category_LO;
		case 0x168CE: return Unicode_Category_LO;
		case 0x168CF: return Unicode_Category_LO;
		case 0x168D0: return Unicode_Category_LO;
		case 0x168D1: return Unicode_Category_LO;
		case 0x168D2: return Unicode_Category_LO;
		case 0x168D3: return Unicode_Category_LO;
		case 0x168D4: return Unicode_Category_LO;
		case 0x168D5: return Unicode_Category_LO;
		case 0x168D6: return Unicode_Category_LO;
		case 0x168D7: return Unicode_Category_LO;
		case 0x168D8: return Unicode_Category_LO;
		case 0x168D9: return Unicode_Category_LO;
		case 0x168DA: return Unicode_Category_LO;
		case 0x168DB: return Unicode_Category_LO;
		case 0x168DC: return Unicode_Category_LO;
		case 0x168DD: return Unicode_Category_LO;
		case 0x168DE: return Unicode_Category_LO;
		case 0x168DF: return Unicode_Category_LO;
		case 0x168E0: return Unicode_Category_LO;
		case 0x168E1: return Unicode_Category_LO;
		case 0x168E2: return Unicode_Category_LO;
		case 0x168E3: return Unicode_Category_LO;
		case 0x168E4: return Unicode_Category_LO;
		case 0x168E5: return Unicode_Category_LO;
		case 0x168E6: return Unicode_Category_LO;
		case 0x168E7: return Unicode_Category_LO;
		case 0x168E8: return Unicode_Category_LO;
		case 0x168E9: return Unicode_Category_LO;
		case 0x168EA: return Unicode_Category_LO;
		case 0x168EB: return Unicode_Category_LO;
		case 0x168EC: return Unicode_Category_LO;
		case 0x168ED: return Unicode_Category_LO;
		case 0x168EE: return Unicode_Category_LO;
		case 0x168EF: return Unicode_Category_LO;
		case 0x168F0: return Unicode_Category_LO;
		case 0x168F1: return Unicode_Category_LO;
		case 0x168F2: return Unicode_Category_LO;
		case 0x168F3: return Unicode_Category_LO;
		case 0x168F4: return Unicode_Category_LO;
		case 0x168F5: return Unicode_Category_LO;
		case 0x168F6: return Unicode_Category_LO;
		case 0x168F7: return Unicode_Category_LO;
		case 0x168F8: return Unicode_Category_LO;
		case 0x168F9: return Unicode_Category_LO;
		case 0x168FA: return Unicode_Category_LO;
		case 0x168FB: return Unicode_Category_LO;
		case 0x168FC: return Unicode_Category_LO;
		case 0x168FD: return Unicode_Category_LO;
		case 0x168FE: return Unicode_Category_LO;
		case 0x168FF: return Unicode_Category_LO;
		case 0x16900: return Unicode_Category_LO;
		case 0x16901: return Unicode_Category_LO;
		case 0x16902: return Unicode_Category_LO;
		case 0x16903: return Unicode_Category_LO;
		case 0x16904: return Unicode_Category_LO;
		case 0x16905: return Unicode_Category_LO;
		case 0x16906: return Unicode_Category_LO;
		case 0x16907: return Unicode_Category_LO;
		case 0x16908: return Unicode_Category_LO;
		case 0x16909: return Unicode_Category_LO;
		case 0x1690A: return Unicode_Category_LO;
		case 0x1690B: return Unicode_Category_LO;
		case 0x1690C: return Unicode_Category_LO;
		case 0x1690D: return Unicode_Category_LO;
		case 0x1690E: return Unicode_Category_LO;
		case 0x1690F: return Unicode_Category_LO;
		case 0x16910: return Unicode_Category_LO;
		case 0x16911: return Unicode_Category_LO;
		case 0x16912: return Unicode_Category_LO;
		case 0x16913: return Unicode_Category_LO;
		case 0x16914: return Unicode_Category_LO;
		case 0x16915: return Unicode_Category_LO;
		case 0x16916: return Unicode_Category_LO;
		case 0x16917: return Unicode_Category_LO;
		case 0x16918: return Unicode_Category_LO;
		case 0x16919: return Unicode_Category_LO;
		case 0x1691A: return Unicode_Category_LO;
		case 0x1691B: return Unicode_Category_LO;
		case 0x1691C: return Unicode_Category_LO;
		case 0x1691D: return Unicode_Category_LO;
		case 0x1691E: return Unicode_Category_LO;
		case 0x1691F: return Unicode_Category_LO;
		case 0x16920: return Unicode_Category_LO;
		case 0x16921: return Unicode_Category_LO;
		case 0x16922: return Unicode_Category_LO;
		case 0x16923: return Unicode_Category_LO;
		case 0x16924: return Unicode_Category_LO;
		case 0x16925: return Unicode_Category_LO;
		case 0x16926: return Unicode_Category_LO;
		case 0x16927: return Unicode_Category_LO;
		case 0x16928: return Unicode_Category_LO;
		case 0x16929: return Unicode_Category_LO;
		case 0x1692A: return Unicode_Category_LO;
		case 0x1692B: return Unicode_Category_LO;
		case 0x1692C: return Unicode_Category_LO;
		case 0x1692D: return Unicode_Category_LO;
		case 0x1692E: return Unicode_Category_LO;
		case 0x1692F: return Unicode_Category_LO;
		case 0x16930: return Unicode_Category_LO;
		case 0x16931: return Unicode_Category_LO;
		case 0x16932: return Unicode_Category_LO;
		case 0x16933: return Unicode_Category_LO;
		case 0x16934: return Unicode_Category_LO;
		case 0x16935: return Unicode_Category_LO;
		case 0x16936: return Unicode_Category_LO;
		case 0x16937: return Unicode_Category_LO;
		case 0x16938: return Unicode_Category_LO;
		case 0x16939: return Unicode_Category_LO;
		case 0x1693A: return Unicode_Category_LO;
		case 0x1693B: return Unicode_Category_LO;
		case 0x1693C: return Unicode_Category_LO;
		case 0x1693D: return Unicode_Category_LO;
		case 0x1693E: return Unicode_Category_LO;
		case 0x1693F: return Unicode_Category_LO;
		case 0x16940: return Unicode_Category_LO;
		case 0x16941: return Unicode_Category_LO;
		case 0x16942: return Unicode_Category_LO;
		case 0x16943: return Unicode_Category_LO;
		case 0x16944: return Unicode_Category_LO;
		case 0x16945: return Unicode_Category_LO;
		case 0x16946: return Unicode_Category_LO;
		case 0x16947: return Unicode_Category_LO;
		case 0x16948: return Unicode_Category_LO;
		case 0x16949: return Unicode_Category_LO;
		case 0x1694A: return Unicode_Category_LO;
		case 0x1694B: return Unicode_Category_LO;
		case 0x1694C: return Unicode_Category_LO;
		case 0x1694D: return Unicode_Category_LO;
		case 0x1694E: return Unicode_Category_LO;
		case 0x1694F: return Unicode_Category_LO;
		case 0x16950: return Unicode_Category_LO;
		case 0x16951: return Unicode_Category_LO;
		case 0x16952: return Unicode_Category_LO;
		case 0x16953: return Unicode_Category_LO;
		case 0x16954: return Unicode_Category_LO;
		case 0x16955: return Unicode_Category_LO;
		case 0x16956: return Unicode_Category_LO;
		case 0x16957: return Unicode_Category_LO;
		case 0x16958: return Unicode_Category_LO;
		case 0x16959: return Unicode_Category_LO;
		case 0x1695A: return Unicode_Category_LO;
		case 0x1695B: return Unicode_Category_LO;
		case 0x1695C: return Unicode_Category_LO;
		case 0x1695D: return Unicode_Category_LO;
		case 0x1695E: return Unicode_Category_LO;
		case 0x1695F: return Unicode_Category_LO;
		case 0x16960: return Unicode_Category_LO;
		case 0x16961: return Unicode_Category_LO;
		case 0x16962: return Unicode_Category_LO;
		case 0x16963: return Unicode_Category_LO;
		case 0x16964: return Unicode_Category_LO;
		case 0x16965: return Unicode_Category_LO;
		case 0x16966: return Unicode_Category_LO;
		case 0x16967: return Unicode_Category_LO;
		case 0x16968: return Unicode_Category_LO;
		case 0x16969: return Unicode_Category_LO;
		case 0x1696A: return Unicode_Category_LO;
		case 0x1696B: return Unicode_Category_LO;
		case 0x1696C: return Unicode_Category_LO;
		case 0x1696D: return Unicode_Category_LO;
		case 0x1696E: return Unicode_Category_LO;
		case 0x1696F: return Unicode_Category_LO;
		case 0x16970: return Unicode_Category_LO;
		case 0x16971: return Unicode_Category_LO;
		case 0x16972: return Unicode_Category_LO;
		case 0x16973: return Unicode_Category_LO;
		case 0x16974: return Unicode_Category_LO;
		case 0x16975: return Unicode_Category_LO;
		case 0x16976: return Unicode_Category_LO;
		case 0x16977: return Unicode_Category_LO;
		case 0x16978: return Unicode_Category_LO;
		case 0x16979: return Unicode_Category_LO;
		case 0x1697A: return Unicode_Category_LO;
		case 0x1697B: return Unicode_Category_LO;
		case 0x1697C: return Unicode_Category_LO;
		case 0x1697D: return Unicode_Category_LO;
		case 0x1697E: return Unicode_Category_LO;
		case 0x1697F: return Unicode_Category_LO;
		case 0x16980: return Unicode_Category_LO;
		case 0x16981: return Unicode_Category_LO;
		case 0x16982: return Unicode_Category_LO;
		case 0x16983: return Unicode_Category_LO;
		case 0x16984: return Unicode_Category_LO;
		case 0x16985: return Unicode_Category_LO;
		case 0x16986: return Unicode_Category_LO;
		case 0x16987: return Unicode_Category_LO;
		case 0x16988: return Unicode_Category_LO;
		case 0x16989: return Unicode_Category_LO;
		case 0x1698A: return Unicode_Category_LO;
		case 0x1698B: return Unicode_Category_LO;
		case 0x1698C: return Unicode_Category_LO;
		case 0x1698D: return Unicode_Category_LO;
		case 0x1698E: return Unicode_Category_LO;
		case 0x1698F: return Unicode_Category_LO;
		case 0x16990: return Unicode_Category_LO;
		case 0x16991: return Unicode_Category_LO;
		case 0x16992: return Unicode_Category_LO;
		case 0x16993: return Unicode_Category_LO;
		case 0x16994: return Unicode_Category_LO;
		case 0x16995: return Unicode_Category_LO;
		case 0x16996: return Unicode_Category_LO;
		case 0x16997: return Unicode_Category_LO;
		case 0x16998: return Unicode_Category_LO;
		case 0x16999: return Unicode_Category_LO;
		case 0x1699A: return Unicode_Category_LO;
		case 0x1699B: return Unicode_Category_LO;
		case 0x1699C: return Unicode_Category_LO;
		case 0x1699D: return Unicode_Category_LO;
		case 0x1699E: return Unicode_Category_LO;
		case 0x1699F: return Unicode_Category_LO;
		case 0x169A0: return Unicode_Category_LO;
		case 0x169A1: return Unicode_Category_LO;
		case 0x169A2: return Unicode_Category_LO;
		case 0x169A3: return Unicode_Category_LO;
		case 0x169A4: return Unicode_Category_LO;
		case 0x169A5: return Unicode_Category_LO;
		case 0x169A6: return Unicode_Category_LO;
		case 0x169A7: return Unicode_Category_LO;
		case 0x169A8: return Unicode_Category_LO;
		case 0x169A9: return Unicode_Category_LO;
		case 0x169AA: return Unicode_Category_LO;
		case 0x169AB: return Unicode_Category_LO;
		case 0x169AC: return Unicode_Category_LO;
		case 0x169AD: return Unicode_Category_LO;
		case 0x169AE: return Unicode_Category_LO;
		case 0x169AF: return Unicode_Category_LO;
		case 0x169B0: return Unicode_Category_LO;
		case 0x169B1: return Unicode_Category_LO;
		case 0x169B2: return Unicode_Category_LO;
		case 0x169B3: return Unicode_Category_LO;
		case 0x169B4: return Unicode_Category_LO;
		case 0x169B5: return Unicode_Category_LO;
		case 0x169B6: return Unicode_Category_LO;
		case 0x169B7: return Unicode_Category_LO;
		case 0x169B8: return Unicode_Category_LO;
		case 0x169B9: return Unicode_Category_LO;
		case 0x169BA: return Unicode_Category_LO;
		case 0x169BB: return Unicode_Category_LO;
		case 0x169BC: return Unicode_Category_LO;
		case 0x169BD: return Unicode_Category_LO;
		case 0x169BE: return Unicode_Category_LO;
		case 0x169BF: return Unicode_Category_LO;
		case 0x169C0: return Unicode_Category_LO;
		case 0x169C1: return Unicode_Category_LO;
		case 0x169C2: return Unicode_Category_LO;
		case 0x169C3: return Unicode_Category_LO;
		case 0x169C4: return Unicode_Category_LO;
		case 0x169C5: return Unicode_Category_LO;
		case 0x169C6: return Unicode_Category_LO;
		case 0x169C7: return Unicode_Category_LO;
		case 0x169C8: return Unicode_Category_LO;
		case 0x169C9: return Unicode_Category_LO;
		case 0x169CA: return Unicode_Category_LO;
		case 0x169CB: return Unicode_Category_LO;
		case 0x169CC: return Unicode_Category_LO;
		case 0x169CD: return Unicode_Category_LO;
		case 0x169CE: return Unicode_Category_LO;
		case 0x169CF: return Unicode_Category_LO;
		case 0x169D0: return Unicode_Category_LO;
		case 0x169D1: return Unicode_Category_LO;
		case 0x169D2: return Unicode_Category_LO;
		case 0x169D3: return Unicode_Category_LO;
		case 0x169D4: return Unicode_Category_LO;
		case 0x169D5: return Unicode_Category_LO;
		case 0x169D6: return Unicode_Category_LO;
		case 0x169D7: return Unicode_Category_LO;
		case 0x169D8: return Unicode_Category_LO;
		case 0x169D9: return Unicode_Category_LO;
		case 0x169DA: return Unicode_Category_LO;
		case 0x169DB: return Unicode_Category_LO;
		case 0x169DC: return Unicode_Category_LO;
		case 0x169DD: return Unicode_Category_LO;
		case 0x169DE: return Unicode_Category_LO;
		case 0x169DF: return Unicode_Category_LO;
		case 0x169E0: return Unicode_Category_LO;
		case 0x169E1: return Unicode_Category_LO;
		case 0x169E2: return Unicode_Category_LO;
		case 0x169E3: return Unicode_Category_LO;
		case 0x169E4: return Unicode_Category_LO;
		case 0x169E5: return Unicode_Category_LO;
		case 0x169E6: return Unicode_Category_LO;
		case 0x169E7: return Unicode_Category_LO;
		case 0x169E8: return Unicode_Category_LO;
		case 0x169E9: return Unicode_Category_LO;
		case 0x169EA: return Unicode_Category_LO;
		case 0x169EB: return Unicode_Category_LO;
		case 0x169EC: return Unicode_Category_LO;
		case 0x169ED: return Unicode_Category_LO;
		case 0x169EE: return Unicode_Category_LO;
		case 0x169EF: return Unicode_Category_LO;
		case 0x169F0: return Unicode_Category_LO;
		case 0x169F1: return Unicode_Category_LO;
		case 0x169F2: return Unicode_Category_LO;
		case 0x169F3: return Unicode_Category_LO;
		case 0x169F4: return Unicode_Category_LO;
		case 0x169F5: return Unicode_Category_LO;
		case 0x169F6: return Unicode_Category_LO;
		case 0x169F7: return Unicode_Category_LO;
		case 0x169F8: return Unicode_Category_LO;
		case 0x169F9: return Unicode_Category_LO;
		case 0x169FA: return Unicode_Category_LO;
		case 0x169FB: return Unicode_Category_LO;
		case 0x169FC: return Unicode_Category_LO;
		case 0x169FD: return Unicode_Category_LO;
		case 0x169FE: return Unicode_Category_LO;
		case 0x169FF: return Unicode_Category_LO;
		case 0x16A00: return Unicode_Category_LO;
		case 0x16A01: return Unicode_Category_LO;
		case 0x16A02: return Unicode_Category_LO;
		case 0x16A03: return Unicode_Category_LO;
		case 0x16A04: return Unicode_Category_LO;
		case 0x16A05: return Unicode_Category_LO;
		case 0x16A06: return Unicode_Category_LO;
		case 0x16A07: return Unicode_Category_LO;
		case 0x16A08: return Unicode_Category_LO;
		case 0x16A09: return Unicode_Category_LO;
		case 0x16A0A: return Unicode_Category_LO;
		case 0x16A0B: return Unicode_Category_LO;
		case 0x16A0C: return Unicode_Category_LO;
		case 0x16A0D: return Unicode_Category_LO;
		case 0x16A0E: return Unicode_Category_LO;
		case 0x16A0F: return Unicode_Category_LO;
		case 0x16A10: return Unicode_Category_LO;
		case 0x16A11: return Unicode_Category_LO;
		case 0x16A12: return Unicode_Category_LO;
		case 0x16A13: return Unicode_Category_LO;
		case 0x16A14: return Unicode_Category_LO;
		case 0x16A15: return Unicode_Category_LO;
		case 0x16A16: return Unicode_Category_LO;
		case 0x16A17: return Unicode_Category_LO;
		case 0x16A18: return Unicode_Category_LO;
		case 0x16A19: return Unicode_Category_LO;
		case 0x16A1A: return Unicode_Category_LO;
		case 0x16A1B: return Unicode_Category_LO;
		case 0x16A1C: return Unicode_Category_LO;
		case 0x16A1D: return Unicode_Category_LO;
		case 0x16A1E: return Unicode_Category_LO;
		case 0x16A1F: return Unicode_Category_LO;
		case 0x16A20: return Unicode_Category_LO;
		case 0x16A21: return Unicode_Category_LO;
		case 0x16A22: return Unicode_Category_LO;
		case 0x16A23: return Unicode_Category_LO;
		case 0x16A24: return Unicode_Category_LO;
		case 0x16A25: return Unicode_Category_LO;
		case 0x16A26: return Unicode_Category_LO;
		case 0x16A27: return Unicode_Category_LO;
		case 0x16A28: return Unicode_Category_LO;
		case 0x16A29: return Unicode_Category_LO;
		case 0x16A2A: return Unicode_Category_LO;
		case 0x16A2B: return Unicode_Category_LO;
		case 0x16A2C: return Unicode_Category_LO;
		case 0x16A2D: return Unicode_Category_LO;
		case 0x16A2E: return Unicode_Category_LO;
		case 0x16A2F: return Unicode_Category_LO;
		case 0x16A30: return Unicode_Category_LO;
		case 0x16A31: return Unicode_Category_LO;
		case 0x16A32: return Unicode_Category_LO;
		case 0x16A33: return Unicode_Category_LO;
		case 0x16A34: return Unicode_Category_LO;
		case 0x16A35: return Unicode_Category_LO;
		case 0x16A36: return Unicode_Category_LO;
		case 0x16A37: return Unicode_Category_LO;
		case 0x16A38: return Unicode_Category_LO;
		case 0x16A40: return Unicode_Category_LO;
		case 0x16A41: return Unicode_Category_LO;
		case 0x16A42: return Unicode_Category_LO;
		case 0x16A43: return Unicode_Category_LO;
		case 0x16A44: return Unicode_Category_LO;
		case 0x16A45: return Unicode_Category_LO;
		case 0x16A46: return Unicode_Category_LO;
		case 0x16A47: return Unicode_Category_LO;
		case 0x16A48: return Unicode_Category_LO;
		case 0x16A49: return Unicode_Category_LO;
		case 0x16A4A: return Unicode_Category_LO;
		case 0x16A4B: return Unicode_Category_LO;
		case 0x16A4C: return Unicode_Category_LO;
		case 0x16A4D: return Unicode_Category_LO;
		case 0x16A4E: return Unicode_Category_LO;
		case 0x16A4F: return Unicode_Category_LO;
		case 0x16A50: return Unicode_Category_LO;
		case 0x16A51: return Unicode_Category_LO;
		case 0x16A52: return Unicode_Category_LO;
		case 0x16A53: return Unicode_Category_LO;
		case 0x16A54: return Unicode_Category_LO;
		case 0x16A55: return Unicode_Category_LO;
		case 0x16A56: return Unicode_Category_LO;
		case 0x16A57: return Unicode_Category_LO;
		case 0x16A58: return Unicode_Category_LO;
		case 0x16A59: return Unicode_Category_LO;
		case 0x16A5A: return Unicode_Category_LO;
		case 0x16A5B: return Unicode_Category_LO;
		case 0x16A5C: return Unicode_Category_LO;
		case 0x16A5D: return Unicode_Category_LO;
		case 0x16A5E: return Unicode_Category_LO;
		case 0x16A60: return Unicode_Category_ND;
		case 0x16A61: return Unicode_Category_ND;
		case 0x16A62: return Unicode_Category_ND;
		case 0x16A63: return Unicode_Category_ND;
		case 0x16A64: return Unicode_Category_ND;
		case 0x16A65: return Unicode_Category_ND;
		case 0x16A66: return Unicode_Category_ND;
		case 0x16A67: return Unicode_Category_ND;
		case 0x16A68: return Unicode_Category_ND;
		case 0x16A69: return Unicode_Category_ND;
		case 0x16A6E: return Unicode_Category_PO;
		case 0x16A6F: return Unicode_Category_PO;
		case 0x16AD0: return Unicode_Category_LO;
		case 0x16AD1: return Unicode_Category_LO;
		case 0x16AD2: return Unicode_Category_LO;
		case 0x16AD3: return Unicode_Category_LO;
		case 0x16AD4: return Unicode_Category_LO;
		case 0x16AD5: return Unicode_Category_LO;
		case 0x16AD6: return Unicode_Category_LO;
		case 0x16AD7: return Unicode_Category_LO;
		case 0x16AD8: return Unicode_Category_LO;
		case 0x16AD9: return Unicode_Category_LO;
		case 0x16ADA: return Unicode_Category_LO;
		case 0x16ADB: return Unicode_Category_LO;
		case 0x16ADC: return Unicode_Category_LO;
		case 0x16ADD: return Unicode_Category_LO;
		case 0x16ADE: return Unicode_Category_LO;
		case 0x16ADF: return Unicode_Category_LO;
		case 0x16AE0: return Unicode_Category_LO;
		case 0x16AE1: return Unicode_Category_LO;
		case 0x16AE2: return Unicode_Category_LO;
		case 0x16AE3: return Unicode_Category_LO;
		case 0x16AE4: return Unicode_Category_LO;
		case 0x16AE5: return Unicode_Category_LO;
		case 0x16AE6: return Unicode_Category_LO;
		case 0x16AE7: return Unicode_Category_LO;
		case 0x16AE8: return Unicode_Category_LO;
		case 0x16AE9: return Unicode_Category_LO;
		case 0x16AEA: return Unicode_Category_LO;
		case 0x16AEB: return Unicode_Category_LO;
		case 0x16AEC: return Unicode_Category_LO;
		case 0x16AED: return Unicode_Category_LO;
		case 0x16AF0: return Unicode_Category_MN;
		case 0x16AF1: return Unicode_Category_MN;
		case 0x16AF2: return Unicode_Category_MN;
		case 0x16AF3: return Unicode_Category_MN;
		case 0x16AF4: return Unicode_Category_MN;
		case 0x16AF5: return Unicode_Category_PO;
		case 0x16B00: return Unicode_Category_LO;
		case 0x16B01: return Unicode_Category_LO;
		case 0x16B02: return Unicode_Category_LO;
		case 0x16B03: return Unicode_Category_LO;
		case 0x16B04: return Unicode_Category_LO;
		case 0x16B05: return Unicode_Category_LO;
		case 0x16B06: return Unicode_Category_LO;
		case 0x16B07: return Unicode_Category_LO;
		case 0x16B08: return Unicode_Category_LO;
		case 0x16B09: return Unicode_Category_LO;
		case 0x16B0A: return Unicode_Category_LO;
		case 0x16B0B: return Unicode_Category_LO;
		case 0x16B0C: return Unicode_Category_LO;
		case 0x16B0D: return Unicode_Category_LO;
		case 0x16B0E: return Unicode_Category_LO;
		case 0x16B0F: return Unicode_Category_LO;
		case 0x16B10: return Unicode_Category_LO;
		case 0x16B11: return Unicode_Category_LO;
		case 0x16B12: return Unicode_Category_LO;
		case 0x16B13: return Unicode_Category_LO;
		case 0x16B14: return Unicode_Category_LO;
		case 0x16B15: return Unicode_Category_LO;
		case 0x16B16: return Unicode_Category_LO;
		case 0x16B17: return Unicode_Category_LO;
		case 0x16B18: return Unicode_Category_LO;
		case 0x16B19: return Unicode_Category_LO;
		case 0x16B1A: return Unicode_Category_LO;
		case 0x16B1B: return Unicode_Category_LO;
		case 0x16B1C: return Unicode_Category_LO;
		case 0x16B1D: return Unicode_Category_LO;
		case 0x16B1E: return Unicode_Category_LO;
		case 0x16B1F: return Unicode_Category_LO;
		case 0x16B20: return Unicode_Category_LO;
		case 0x16B21: return Unicode_Category_LO;
		case 0x16B22: return Unicode_Category_LO;
		case 0x16B23: return Unicode_Category_LO;
		case 0x16B24: return Unicode_Category_LO;
		case 0x16B25: return Unicode_Category_LO;
		case 0x16B26: return Unicode_Category_LO;
		case 0x16B27: return Unicode_Category_LO;
		case 0x16B28: return Unicode_Category_LO;
		case 0x16B29: return Unicode_Category_LO;
		case 0x16B2A: return Unicode_Category_LO;
		case 0x16B2B: return Unicode_Category_LO;
		case 0x16B2C: return Unicode_Category_LO;
		case 0x16B2D: return Unicode_Category_LO;
		case 0x16B2E: return Unicode_Category_LO;
		case 0x16B2F: return Unicode_Category_LO;
		case 0x16B30: return Unicode_Category_MN;
		case 0x16B31: return Unicode_Category_MN;
		case 0x16B32: return Unicode_Category_MN;
		case 0x16B33: return Unicode_Category_MN;
		case 0x16B34: return Unicode_Category_MN;
		case 0x16B35: return Unicode_Category_MN;
		case 0x16B36: return Unicode_Category_MN;
		case 0x16B37: return Unicode_Category_PO;
		case 0x16B38: return Unicode_Category_PO;
		case 0x16B39: return Unicode_Category_PO;
		case 0x16B3A: return Unicode_Category_PO;
		case 0x16B3B: return Unicode_Category_PO;
		case 0x16B3C: return Unicode_Category_SO;
		case 0x16B3D: return Unicode_Category_SO;
		case 0x16B3E: return Unicode_Category_SO;
		case 0x16B3F: return Unicode_Category_SO;
		case 0x16B40: return Unicode_Category_LM;
		case 0x16B41: return Unicode_Category_LM;
		case 0x16B42: return Unicode_Category_LM;
		case 0x16B43: return Unicode_Category_LM;
		case 0x16B44: return Unicode_Category_PO;
		case 0x16B45: return Unicode_Category_SO;
		case 0x16B50: return Unicode_Category_ND;
		case 0x16B51: return Unicode_Category_ND;
		case 0x16B52: return Unicode_Category_ND;
		case 0x16B53: return Unicode_Category_ND;
		case 0x16B54: return Unicode_Category_ND;
		case 0x16B55: return Unicode_Category_ND;
		case 0x16B56: return Unicode_Category_ND;
		case 0x16B57: return Unicode_Category_ND;
		case 0x16B58: return Unicode_Category_ND;
		case 0x16B59: return Unicode_Category_ND;
		case 0x16B5B: return Unicode_Category_NO;
		case 0x16B5C: return Unicode_Category_NO;
		case 0x16B5D: return Unicode_Category_NO;
		case 0x16B5E: return Unicode_Category_NO;
		case 0x16B5F: return Unicode_Category_NO;
		case 0x16B60: return Unicode_Category_NO;
		case 0x16B61: return Unicode_Category_NO;
		case 0x16B63: return Unicode_Category_LO;
		case 0x16B64: return Unicode_Category_LO;
		case 0x16B65: return Unicode_Category_LO;
		case 0x16B66: return Unicode_Category_LO;
		case 0x16B67: return Unicode_Category_LO;
		case 0x16B68: return Unicode_Category_LO;
		case 0x16B69: return Unicode_Category_LO;
		case 0x16B6A: return Unicode_Category_LO;
		case 0x16B6B: return Unicode_Category_LO;
		case 0x16B6C: return Unicode_Category_LO;
		case 0x16B6D: return Unicode_Category_LO;
		case 0x16B6E: return Unicode_Category_LO;
		case 0x16B6F: return Unicode_Category_LO;
		case 0x16B70: return Unicode_Category_LO;
		case 0x16B71: return Unicode_Category_LO;
		case 0x16B72: return Unicode_Category_LO;
		case 0x16B73: return Unicode_Category_LO;
		case 0x16B74: return Unicode_Category_LO;
		case 0x16B75: return Unicode_Category_LO;
		case 0x16B76: return Unicode_Category_LO;
		case 0x16B77: return Unicode_Category_LO;
		case 0x16B7D: return Unicode_Category_LO;
		case 0x16B7E: return Unicode_Category_LO;
		case 0x16B7F: return Unicode_Category_LO;
		case 0x16B80: return Unicode_Category_LO;
		case 0x16B81: return Unicode_Category_LO;
		case 0x16B82: return Unicode_Category_LO;
		case 0x16B83: return Unicode_Category_LO;
		case 0x16B84: return Unicode_Category_LO;
		case 0x16B85: return Unicode_Category_LO;
		case 0x16B86: return Unicode_Category_LO;
		case 0x16B87: return Unicode_Category_LO;
		case 0x16B88: return Unicode_Category_LO;
		case 0x16B89: return Unicode_Category_LO;
		case 0x16B8A: return Unicode_Category_LO;
		case 0x16B8B: return Unicode_Category_LO;
		case 0x16B8C: return Unicode_Category_LO;
		case 0x16B8D: return Unicode_Category_LO;
		case 0x16B8E: return Unicode_Category_LO;
		case 0x16B8F: return Unicode_Category_LO;
		case 0x16E40: return Unicode_Category_LU;
		case 0x16E41: return Unicode_Category_LU;
		case 0x16E42: return Unicode_Category_LU;
		case 0x16E43: return Unicode_Category_LU;
		case 0x16E44: return Unicode_Category_LU;
		case 0x16E45: return Unicode_Category_LU;
		case 0x16E46: return Unicode_Category_LU;
		case 0x16E47: return Unicode_Category_LU;
		case 0x16E48: return Unicode_Category_LU;
		case 0x16E49: return Unicode_Category_LU;
		case 0x16E4A: return Unicode_Category_LU;
		case 0x16E4B: return Unicode_Category_LU;
		case 0x16E4C: return Unicode_Category_LU;
		case 0x16E4D: return Unicode_Category_LU;
		case 0x16E4E: return Unicode_Category_LU;
		case 0x16E4F: return Unicode_Category_LU;
		case 0x16E50: return Unicode_Category_LU;
		case 0x16E51: return Unicode_Category_LU;
		case 0x16E52: return Unicode_Category_LU;
		case 0x16E53: return Unicode_Category_LU;
		case 0x16E54: return Unicode_Category_LU;
		case 0x16E55: return Unicode_Category_LU;
		case 0x16E56: return Unicode_Category_LU;
		case 0x16E57: return Unicode_Category_LU;
		case 0x16E58: return Unicode_Category_LU;
		case 0x16E59: return Unicode_Category_LU;
		case 0x16E5A: return Unicode_Category_LU;
		case 0x16E5B: return Unicode_Category_LU;
		case 0x16E5C: return Unicode_Category_LU;
		case 0x16E5D: return Unicode_Category_LU;
		case 0x16E5E: return Unicode_Category_LU;
		case 0x16E5F: return Unicode_Category_LU;
		case 0x16E60: return Unicode_Category_LL;
		case 0x16E61: return Unicode_Category_LL;
		case 0x16E62: return Unicode_Category_LL;
		case 0x16E63: return Unicode_Category_LL;
		case 0x16E64: return Unicode_Category_LL;
		case 0x16E65: return Unicode_Category_LL;
		case 0x16E66: return Unicode_Category_LL;
		case 0x16E67: return Unicode_Category_LL;
		case 0x16E68: return Unicode_Category_LL;
		case 0x16E69: return Unicode_Category_LL;
		case 0x16E6A: return Unicode_Category_LL;
		case 0x16E6B: return Unicode_Category_LL;
		case 0x16E6C: return Unicode_Category_LL;
		case 0x16E6D: return Unicode_Category_LL;
		case 0x16E6E: return Unicode_Category_LL;
		case 0x16E6F: return Unicode_Category_LL;
		case 0x16E70: return Unicode_Category_LL;
		case 0x16E71: return Unicode_Category_LL;
		case 0x16E72: return Unicode_Category_LL;
		case 0x16E73: return Unicode_Category_LL;
		case 0x16E74: return Unicode_Category_LL;
		case 0x16E75: return Unicode_Category_LL;
		case 0x16E76: return Unicode_Category_LL;
		case 0x16E77: return Unicode_Category_LL;
		case 0x16E78: return Unicode_Category_LL;
		case 0x16E79: return Unicode_Category_LL;
		case 0x16E7A: return Unicode_Category_LL;
		case 0x16E7B: return Unicode_Category_LL;
		case 0x16E7C: return Unicode_Category_LL;
		case 0x16E7D: return Unicode_Category_LL;
		case 0x16E7E: return Unicode_Category_LL;
		case 0x16E7F: return Unicode_Category_LL;
		case 0x16E80: return Unicode_Category_NO;
		case 0x16E81: return Unicode_Category_NO;
		case 0x16E82: return Unicode_Category_NO;
		case 0x16E83: return Unicode_Category_NO;
		case 0x16E84: return Unicode_Category_NO;
		case 0x16E85: return Unicode_Category_NO;
		case 0x16E86: return Unicode_Category_NO;
		case 0x16E87: return Unicode_Category_NO;
		case 0x16E88: return Unicode_Category_NO;
		case 0x16E89: return Unicode_Category_NO;
		case 0x16E8A: return Unicode_Category_NO;
		case 0x16E8B: return Unicode_Category_NO;
		case 0x16E8C: return Unicode_Category_NO;
		case 0x16E8D: return Unicode_Category_NO;
		case 0x16E8E: return Unicode_Category_NO;
		case 0x16E8F: return Unicode_Category_NO;
		case 0x16E90: return Unicode_Category_NO;
		case 0x16E91: return Unicode_Category_NO;
		case 0x16E92: return Unicode_Category_NO;
		case 0x16E93: return Unicode_Category_NO;
		case 0x16E94: return Unicode_Category_NO;
		case 0x16E95: return Unicode_Category_NO;
		case 0x16E96: return Unicode_Category_NO;
		case 0x16E97: return Unicode_Category_PO;
		case 0x16E98: return Unicode_Category_PO;
		case 0x16E99: return Unicode_Category_PO;
		case 0x16E9A: return Unicode_Category_PO;
		case 0x16F00: return Unicode_Category_LO;
		case 0x16F01: return Unicode_Category_LO;
		case 0x16F02: return Unicode_Category_LO;
		case 0x16F03: return Unicode_Category_LO;
		case 0x16F04: return Unicode_Category_LO;
		case 0x16F05: return Unicode_Category_LO;
		case 0x16F06: return Unicode_Category_LO;
		case 0x16F07: return Unicode_Category_LO;
		case 0x16F08: return Unicode_Category_LO;
		case 0x16F09: return Unicode_Category_LO;
		case 0x16F0A: return Unicode_Category_LO;
		case 0x16F0B: return Unicode_Category_LO;
		case 0x16F0C: return Unicode_Category_LO;
		case 0x16F0D: return Unicode_Category_LO;
		case 0x16F0E: return Unicode_Category_LO;
		case 0x16F0F: return Unicode_Category_LO;
		case 0x16F10: return Unicode_Category_LO;
		case 0x16F11: return Unicode_Category_LO;
		case 0x16F12: return Unicode_Category_LO;
		case 0x16F13: return Unicode_Category_LO;
		case 0x16F14: return Unicode_Category_LO;
		case 0x16F15: return Unicode_Category_LO;
		case 0x16F16: return Unicode_Category_LO;
		case 0x16F17: return Unicode_Category_LO;
		case 0x16F18: return Unicode_Category_LO;
		case 0x16F19: return Unicode_Category_LO;
		case 0x16F1A: return Unicode_Category_LO;
		case 0x16F1B: return Unicode_Category_LO;
		case 0x16F1C: return Unicode_Category_LO;
		case 0x16F1D: return Unicode_Category_LO;
		case 0x16F1E: return Unicode_Category_LO;
		case 0x16F1F: return Unicode_Category_LO;
		case 0x16F20: return Unicode_Category_LO;
		case 0x16F21: return Unicode_Category_LO;
		case 0x16F22: return Unicode_Category_LO;
		case 0x16F23: return Unicode_Category_LO;
		case 0x16F24: return Unicode_Category_LO;
		case 0x16F25: return Unicode_Category_LO;
		case 0x16F26: return Unicode_Category_LO;
		case 0x16F27: return Unicode_Category_LO;
		case 0x16F28: return Unicode_Category_LO;
		case 0x16F29: return Unicode_Category_LO;
		case 0x16F2A: return Unicode_Category_LO;
		case 0x16F2B: return Unicode_Category_LO;
		case 0x16F2C: return Unicode_Category_LO;
		case 0x16F2D: return Unicode_Category_LO;
		case 0x16F2E: return Unicode_Category_LO;
		case 0x16F2F: return Unicode_Category_LO;
		case 0x16F30: return Unicode_Category_LO;
		case 0x16F31: return Unicode_Category_LO;
		case 0x16F32: return Unicode_Category_LO;
		case 0x16F33: return Unicode_Category_LO;
		case 0x16F34: return Unicode_Category_LO;
		case 0x16F35: return Unicode_Category_LO;
		case 0x16F36: return Unicode_Category_LO;
		case 0x16F37: return Unicode_Category_LO;
		case 0x16F38: return Unicode_Category_LO;
		case 0x16F39: return Unicode_Category_LO;
		case 0x16F3A: return Unicode_Category_LO;
		case 0x16F3B: return Unicode_Category_LO;
		case 0x16F3C: return Unicode_Category_LO;
		case 0x16F3D: return Unicode_Category_LO;
		case 0x16F3E: return Unicode_Category_LO;
		case 0x16F3F: return Unicode_Category_LO;
		case 0x16F40: return Unicode_Category_LO;
		case 0x16F41: return Unicode_Category_LO;
		case 0x16F42: return Unicode_Category_LO;
		case 0x16F43: return Unicode_Category_LO;
		case 0x16F44: return Unicode_Category_LO;
		case 0x16F45: return Unicode_Category_LO;
		case 0x16F46: return Unicode_Category_LO;
		case 0x16F47: return Unicode_Category_LO;
		case 0x16F48: return Unicode_Category_LO;
		case 0x16F49: return Unicode_Category_LO;
		case 0x16F4A: return Unicode_Category_LO;
		case 0x16F4F: return Unicode_Category_MN;
		case 0x16F50: return Unicode_Category_LO;
		case 0x16F51: return Unicode_Category_MC;
		case 0x16F52: return Unicode_Category_MC;
		case 0x16F53: return Unicode_Category_MC;
		case 0x16F54: return Unicode_Category_MC;
		case 0x16F55: return Unicode_Category_MC;
		case 0x16F56: return Unicode_Category_MC;
		case 0x16F57: return Unicode_Category_MC;
		case 0x16F58: return Unicode_Category_MC;
		case 0x16F59: return Unicode_Category_MC;
		case 0x16F5A: return Unicode_Category_MC;
		case 0x16F5B: return Unicode_Category_MC;
		case 0x16F5C: return Unicode_Category_MC;
		case 0x16F5D: return Unicode_Category_MC;
		case 0x16F5E: return Unicode_Category_MC;
		case 0x16F5F: return Unicode_Category_MC;
		case 0x16F60: return Unicode_Category_MC;
		case 0x16F61: return Unicode_Category_MC;
		case 0x16F62: return Unicode_Category_MC;
		case 0x16F63: return Unicode_Category_MC;
		case 0x16F64: return Unicode_Category_MC;
		case 0x16F65: return Unicode_Category_MC;
		case 0x16F66: return Unicode_Category_MC;
		case 0x16F67: return Unicode_Category_MC;
		case 0x16F68: return Unicode_Category_MC;
		case 0x16F69: return Unicode_Category_MC;
		case 0x16F6A: return Unicode_Category_MC;
		case 0x16F6B: return Unicode_Category_MC;
		case 0x16F6C: return Unicode_Category_MC;
		case 0x16F6D: return Unicode_Category_MC;
		case 0x16F6E: return Unicode_Category_MC;
		case 0x16F6F: return Unicode_Category_MC;
		case 0x16F70: return Unicode_Category_MC;
		case 0x16F71: return Unicode_Category_MC;
		case 0x16F72: return Unicode_Category_MC;
		case 0x16F73: return Unicode_Category_MC;
		case 0x16F74: return Unicode_Category_MC;
		case 0x16F75: return Unicode_Category_MC;
		case 0x16F76: return Unicode_Category_MC;
		case 0x16F77: return Unicode_Category_MC;
		case 0x16F78: return Unicode_Category_MC;
		case 0x16F79: return Unicode_Category_MC;
		case 0x16F7A: return Unicode_Category_MC;
		case 0x16F7B: return Unicode_Category_MC;
		case 0x16F7C: return Unicode_Category_MC;
		case 0x16F7D: return Unicode_Category_MC;
		case 0x16F7E: return Unicode_Category_MC;
		case 0x16F7F: return Unicode_Category_MC;
		case 0x16F80: return Unicode_Category_MC;
		case 0x16F81: return Unicode_Category_MC;
		case 0x16F82: return Unicode_Category_MC;
		case 0x16F83: return Unicode_Category_MC;
		case 0x16F84: return Unicode_Category_MC;
		case 0x16F85: return Unicode_Category_MC;
		case 0x16F86: return Unicode_Category_MC;
		case 0x16F87: return Unicode_Category_MC;
		case 0x16F8F: return Unicode_Category_MN;
		case 0x16F90: return Unicode_Category_MN;
		case 0x16F91: return Unicode_Category_MN;
		case 0x16F92: return Unicode_Category_MN;
		case 0x16F93: return Unicode_Category_LM;
		case 0x16F94: return Unicode_Category_LM;
		case 0x16F95: return Unicode_Category_LM;
		case 0x16F96: return Unicode_Category_LM;
		case 0x16F97: return Unicode_Category_LM;
		case 0x16F98: return Unicode_Category_LM;
		case 0x16F99: return Unicode_Category_LM;
		case 0x16F9A: return Unicode_Category_LM;
		case 0x16F9B: return Unicode_Category_LM;
		case 0x16F9C: return Unicode_Category_LM;
		case 0x16F9D: return Unicode_Category_LM;
		case 0x16F9E: return Unicode_Category_LM;
		case 0x16F9F: return Unicode_Category_LM;
		case 0x16FE0: return Unicode_Category_LM;
		case 0x16FE1: return Unicode_Category_LM;
		case 0x16FE2: return Unicode_Category_PO;
		case 0x16FE3: return Unicode_Category_LM;
		case 0x16FE4: return Unicode_Category_MN;
		case 0x16FF0: return Unicode_Category_MC;
		case 0x16FF1: return Unicode_Category_MC;
		case 0x17000: return Unicode_Category_LO;
		case 0x187F7: return Unicode_Category_LO;
		case 0x18800: return Unicode_Category_LO;
		case 0x18801: return Unicode_Category_LO;
		case 0x18802: return Unicode_Category_LO;
		case 0x18803: return Unicode_Category_LO;
		case 0x18804: return Unicode_Category_LO;
		case 0x18805: return Unicode_Category_LO;
		case 0x18806: return Unicode_Category_LO;
		case 0x18807: return Unicode_Category_LO;
		case 0x18808: return Unicode_Category_LO;
		case 0x18809: return Unicode_Category_LO;
		case 0x1880A: return Unicode_Category_LO;
		case 0x1880B: return Unicode_Category_LO;
		case 0x1880C: return Unicode_Category_LO;
		case 0x1880D: return Unicode_Category_LO;
		case 0x1880E: return Unicode_Category_LO;
		case 0x1880F: return Unicode_Category_LO;
		case 0x18810: return Unicode_Category_LO;
		case 0x18811: return Unicode_Category_LO;
		case 0x18812: return Unicode_Category_LO;
		case 0x18813: return Unicode_Category_LO;
		case 0x18814: return Unicode_Category_LO;
		case 0x18815: return Unicode_Category_LO;
		case 0x18816: return Unicode_Category_LO;
		case 0x18817: return Unicode_Category_LO;
		case 0x18818: return Unicode_Category_LO;
		case 0x18819: return Unicode_Category_LO;
		case 0x1881A: return Unicode_Category_LO;
		case 0x1881B: return Unicode_Category_LO;
		case 0x1881C: return Unicode_Category_LO;
		case 0x1881D: return Unicode_Category_LO;
		case 0x1881E: return Unicode_Category_LO;
		case 0x1881F: return Unicode_Category_LO;
		case 0x18820: return Unicode_Category_LO;
		case 0x18821: return Unicode_Category_LO;
		case 0x18822: return Unicode_Category_LO;
		case 0x18823: return Unicode_Category_LO;
		case 0x18824: return Unicode_Category_LO;
		case 0x18825: return Unicode_Category_LO;
		case 0x18826: return Unicode_Category_LO;
		case 0x18827: return Unicode_Category_LO;
		case 0x18828: return Unicode_Category_LO;
		case 0x18829: return Unicode_Category_LO;
		case 0x1882A: return Unicode_Category_LO;
		case 0x1882B: return Unicode_Category_LO;
		case 0x1882C: return Unicode_Category_LO;
		case 0x1882D: return Unicode_Category_LO;
		case 0x1882E: return Unicode_Category_LO;
		case 0x1882F: return Unicode_Category_LO;
		case 0x18830: return Unicode_Category_LO;
		case 0x18831: return Unicode_Category_LO;
		case 0x18832: return Unicode_Category_LO;
		case 0x18833: return Unicode_Category_LO;
		case 0x18834: return Unicode_Category_LO;
		case 0x18835: return Unicode_Category_LO;
		case 0x18836: return Unicode_Category_LO;
		case 0x18837: return Unicode_Category_LO;
		case 0x18838: return Unicode_Category_LO;
		case 0x18839: return Unicode_Category_LO;
		case 0x1883A: return Unicode_Category_LO;
		case 0x1883B: return Unicode_Category_LO;
		case 0x1883C: return Unicode_Category_LO;
		case 0x1883D: return Unicode_Category_LO;
		case 0x1883E: return Unicode_Category_LO;
		case 0x1883F: return Unicode_Category_LO;
		case 0x18840: return Unicode_Category_LO;
		case 0x18841: return Unicode_Category_LO;
		case 0x18842: return Unicode_Category_LO;
		case 0x18843: return Unicode_Category_LO;
		case 0x18844: return Unicode_Category_LO;
		case 0x18845: return Unicode_Category_LO;
		case 0x18846: return Unicode_Category_LO;
		case 0x18847: return Unicode_Category_LO;
		case 0x18848: return Unicode_Category_LO;
		case 0x18849: return Unicode_Category_LO;
		case 0x1884A: return Unicode_Category_LO;
		case 0x1884B: return Unicode_Category_LO;
		case 0x1884C: return Unicode_Category_LO;
		case 0x1884D: return Unicode_Category_LO;
		case 0x1884E: return Unicode_Category_LO;
		case 0x1884F: return Unicode_Category_LO;
		case 0x18850: return Unicode_Category_LO;
		case 0x18851: return Unicode_Category_LO;
		case 0x18852: return Unicode_Category_LO;
		case 0x18853: return Unicode_Category_LO;
		case 0x18854: return Unicode_Category_LO;
		case 0x18855: return Unicode_Category_LO;
		case 0x18856: return Unicode_Category_LO;
		case 0x18857: return Unicode_Category_LO;
		case 0x18858: return Unicode_Category_LO;
		case 0x18859: return Unicode_Category_LO;
		case 0x1885A: return Unicode_Category_LO;
		case 0x1885B: return Unicode_Category_LO;
		case 0x1885C: return Unicode_Category_LO;
		case 0x1885D: return Unicode_Category_LO;
		case 0x1885E: return Unicode_Category_LO;
		case 0x1885F: return Unicode_Category_LO;
		case 0x18860: return Unicode_Category_LO;
		case 0x18861: return Unicode_Category_LO;
		case 0x18862: return Unicode_Category_LO;
		case 0x18863: return Unicode_Category_LO;
		case 0x18864: return Unicode_Category_LO;
		case 0x18865: return Unicode_Category_LO;
		case 0x18866: return Unicode_Category_LO;
		case 0x18867: return Unicode_Category_LO;
		case 0x18868: return Unicode_Category_LO;
		case 0x18869: return Unicode_Category_LO;
		case 0x1886A: return Unicode_Category_LO;
		case 0x1886B: return Unicode_Category_LO;
		case 0x1886C: return Unicode_Category_LO;
		case 0x1886D: return Unicode_Category_LO;
		case 0x1886E: return Unicode_Category_LO;
		case 0x1886F: return Unicode_Category_LO;
		case 0x18870: return Unicode_Category_LO;
		case 0x18871: return Unicode_Category_LO;
		case 0x18872: return Unicode_Category_LO;
		case 0x18873: return Unicode_Category_LO;
		case 0x18874: return Unicode_Category_LO;
		case 0x18875: return Unicode_Category_LO;
		case 0x18876: return Unicode_Category_LO;
		case 0x18877: return Unicode_Category_LO;
		case 0x18878: return Unicode_Category_LO;
		case 0x18879: return Unicode_Category_LO;
		case 0x1887A: return Unicode_Category_LO;
		case 0x1887B: return Unicode_Category_LO;
		case 0x1887C: return Unicode_Category_LO;
		case 0x1887D: return Unicode_Category_LO;
		case 0x1887E: return Unicode_Category_LO;
		case 0x1887F: return Unicode_Category_LO;
		case 0x18880: return Unicode_Category_LO;
		case 0x18881: return Unicode_Category_LO;
		case 0x18882: return Unicode_Category_LO;
		case 0x18883: return Unicode_Category_LO;
		case 0x18884: return Unicode_Category_LO;
		case 0x18885: return Unicode_Category_LO;
		case 0x18886: return Unicode_Category_LO;
		case 0x18887: return Unicode_Category_LO;
		case 0x18888: return Unicode_Category_LO;
		case 0x18889: return Unicode_Category_LO;
		case 0x1888A: return Unicode_Category_LO;
		case 0x1888B: return Unicode_Category_LO;
		case 0x1888C: return Unicode_Category_LO;
		case 0x1888D: return Unicode_Category_LO;
		case 0x1888E: return Unicode_Category_LO;
		case 0x1888F: return Unicode_Category_LO;
		case 0x18890: return Unicode_Category_LO;
		case 0x18891: return Unicode_Category_LO;
		case 0x18892: return Unicode_Category_LO;
		case 0x18893: return Unicode_Category_LO;
		case 0x18894: return Unicode_Category_LO;
		case 0x18895: return Unicode_Category_LO;
		case 0x18896: return Unicode_Category_LO;
		case 0x18897: return Unicode_Category_LO;
		case 0x18898: return Unicode_Category_LO;
		case 0x18899: return Unicode_Category_LO;
		case 0x1889A: return Unicode_Category_LO;
		case 0x1889B: return Unicode_Category_LO;
		case 0x1889C: return Unicode_Category_LO;
		case 0x1889D: return Unicode_Category_LO;
		case 0x1889E: return Unicode_Category_LO;
		case 0x1889F: return Unicode_Category_LO;
		case 0x188A0: return Unicode_Category_LO;
		case 0x188A1: return Unicode_Category_LO;
		case 0x188A2: return Unicode_Category_LO;
		case 0x188A3: return Unicode_Category_LO;
		case 0x188A4: return Unicode_Category_LO;
		case 0x188A5: return Unicode_Category_LO;
		case 0x188A6: return Unicode_Category_LO;
		case 0x188A7: return Unicode_Category_LO;
		case 0x188A8: return Unicode_Category_LO;
		case 0x188A9: return Unicode_Category_LO;
		case 0x188AA: return Unicode_Category_LO;
		case 0x188AB: return Unicode_Category_LO;
		case 0x188AC: return Unicode_Category_LO;
		case 0x188AD: return Unicode_Category_LO;
		case 0x188AE: return Unicode_Category_LO;
		case 0x188AF: return Unicode_Category_LO;
		case 0x188B0: return Unicode_Category_LO;
		case 0x188B1: return Unicode_Category_LO;
		case 0x188B2: return Unicode_Category_LO;
		case 0x188B3: return Unicode_Category_LO;
		case 0x188B4: return Unicode_Category_LO;
		case 0x188B5: return Unicode_Category_LO;
		case 0x188B6: return Unicode_Category_LO;
		case 0x188B7: return Unicode_Category_LO;
		case 0x188B8: return Unicode_Category_LO;
		case 0x188B9: return Unicode_Category_LO;
		case 0x188BA: return Unicode_Category_LO;
		case 0x188BB: return Unicode_Category_LO;
		case 0x188BC: return Unicode_Category_LO;
		case 0x188BD: return Unicode_Category_LO;
		case 0x188BE: return Unicode_Category_LO;
		case 0x188BF: return Unicode_Category_LO;
		case 0x188C0: return Unicode_Category_LO;
		case 0x188C1: return Unicode_Category_LO;
		case 0x188C2: return Unicode_Category_LO;
		case 0x188C3: return Unicode_Category_LO;
		case 0x188C4: return Unicode_Category_LO;
		case 0x188C5: return Unicode_Category_LO;
		case 0x188C6: return Unicode_Category_LO;
		case 0x188C7: return Unicode_Category_LO;
		case 0x188C8: return Unicode_Category_LO;
		case 0x188C9: return Unicode_Category_LO;
		case 0x188CA: return Unicode_Category_LO;
		case 0x188CB: return Unicode_Category_LO;
		case 0x188CC: return Unicode_Category_LO;
		case 0x188CD: return Unicode_Category_LO;
		case 0x188CE: return Unicode_Category_LO;
		case 0x188CF: return Unicode_Category_LO;
		case 0x188D0: return Unicode_Category_LO;
		case 0x188D1: return Unicode_Category_LO;
		case 0x188D2: return Unicode_Category_LO;
		case 0x188D3: return Unicode_Category_LO;
		case 0x188D4: return Unicode_Category_LO;
		case 0x188D5: return Unicode_Category_LO;
		case 0x188D6: return Unicode_Category_LO;
		case 0x188D7: return Unicode_Category_LO;
		case 0x188D8: return Unicode_Category_LO;
		case 0x188D9: return Unicode_Category_LO;
		case 0x188DA: return Unicode_Category_LO;
		case 0x188DB: return Unicode_Category_LO;
		case 0x188DC: return Unicode_Category_LO;
		case 0x188DD: return Unicode_Category_LO;
		case 0x188DE: return Unicode_Category_LO;
		case 0x188DF: return Unicode_Category_LO;
		case 0x188E0: return Unicode_Category_LO;
		case 0x188E1: return Unicode_Category_LO;
		case 0x188E2: return Unicode_Category_LO;
		case 0x188E3: return Unicode_Category_LO;
		case 0x188E4: return Unicode_Category_LO;
		case 0x188E5: return Unicode_Category_LO;
		case 0x188E6: return Unicode_Category_LO;
		case 0x188E7: return Unicode_Category_LO;
		case 0x188E8: return Unicode_Category_LO;
		case 0x188E9: return Unicode_Category_LO;
		case 0x188EA: return Unicode_Category_LO;
		case 0x188EB: return Unicode_Category_LO;
		case 0x188EC: return Unicode_Category_LO;
		case 0x188ED: return Unicode_Category_LO;
		case 0x188EE: return Unicode_Category_LO;
		case 0x188EF: return Unicode_Category_LO;
		case 0x188F0: return Unicode_Category_LO;
		case 0x188F1: return Unicode_Category_LO;
		case 0x188F2: return Unicode_Category_LO;
		case 0x188F3: return Unicode_Category_LO;
		case 0x188F4: return Unicode_Category_LO;
		case 0x188F5: return Unicode_Category_LO;
		case 0x188F6: return Unicode_Category_LO;
		case 0x188F7: return Unicode_Category_LO;
		case 0x188F8: return Unicode_Category_LO;
		case 0x188F9: return Unicode_Category_LO;
		case 0x188FA: return Unicode_Category_LO;
		case 0x188FB: return Unicode_Category_LO;
		case 0x188FC: return Unicode_Category_LO;
		case 0x188FD: return Unicode_Category_LO;
		case 0x188FE: return Unicode_Category_LO;
		case 0x188FF: return Unicode_Category_LO;
		case 0x18900: return Unicode_Category_LO;
		case 0x18901: return Unicode_Category_LO;
		case 0x18902: return Unicode_Category_LO;
		case 0x18903: return Unicode_Category_LO;
		case 0x18904: return Unicode_Category_LO;
		case 0x18905: return Unicode_Category_LO;
		case 0x18906: return Unicode_Category_LO;
		case 0x18907: return Unicode_Category_LO;
		case 0x18908: return Unicode_Category_LO;
		case 0x18909: return Unicode_Category_LO;
		case 0x1890A: return Unicode_Category_LO;
		case 0x1890B: return Unicode_Category_LO;
		case 0x1890C: return Unicode_Category_LO;
		case 0x1890D: return Unicode_Category_LO;
		case 0x1890E: return Unicode_Category_LO;
		case 0x1890F: return Unicode_Category_LO;
		case 0x18910: return Unicode_Category_LO;
		case 0x18911: return Unicode_Category_LO;
		case 0x18912: return Unicode_Category_LO;
		case 0x18913: return Unicode_Category_LO;
		case 0x18914: return Unicode_Category_LO;
		case 0x18915: return Unicode_Category_LO;
		case 0x18916: return Unicode_Category_LO;
		case 0x18917: return Unicode_Category_LO;
		case 0x18918: return Unicode_Category_LO;
		case 0x18919: return Unicode_Category_LO;
		case 0x1891A: return Unicode_Category_LO;
		case 0x1891B: return Unicode_Category_LO;
		case 0x1891C: return Unicode_Category_LO;
		case 0x1891D: return Unicode_Category_LO;
		case 0x1891E: return Unicode_Category_LO;
		case 0x1891F: return Unicode_Category_LO;
		case 0x18920: return Unicode_Category_LO;
		case 0x18921: return Unicode_Category_LO;
		case 0x18922: return Unicode_Category_LO;
		case 0x18923: return Unicode_Category_LO;
		case 0x18924: return Unicode_Category_LO;
		case 0x18925: return Unicode_Category_LO;
		case 0x18926: return Unicode_Category_LO;
		case 0x18927: return Unicode_Category_LO;
		case 0x18928: return Unicode_Category_LO;
		case 0x18929: return Unicode_Category_LO;
		case 0x1892A: return Unicode_Category_LO;
		case 0x1892B: return Unicode_Category_LO;
		case 0x1892C: return Unicode_Category_LO;
		case 0x1892D: return Unicode_Category_LO;
		case 0x1892E: return Unicode_Category_LO;
		case 0x1892F: return Unicode_Category_LO;
		case 0x18930: return Unicode_Category_LO;
		case 0x18931: return Unicode_Category_LO;
		case 0x18932: return Unicode_Category_LO;
		case 0x18933: return Unicode_Category_LO;
		case 0x18934: return Unicode_Category_LO;
		case 0x18935: return Unicode_Category_LO;
		case 0x18936: return Unicode_Category_LO;
		case 0x18937: return Unicode_Category_LO;
		case 0x18938: return Unicode_Category_LO;
		case 0x18939: return Unicode_Category_LO;
		case 0x1893A: return Unicode_Category_LO;
		case 0x1893B: return Unicode_Category_LO;
		case 0x1893C: return Unicode_Category_LO;
		case 0x1893D: return Unicode_Category_LO;
		case 0x1893E: return Unicode_Category_LO;
		case 0x1893F: return Unicode_Category_LO;
		case 0x18940: return Unicode_Category_LO;
		case 0x18941: return Unicode_Category_LO;
		case 0x18942: return Unicode_Category_LO;
		case 0x18943: return Unicode_Category_LO;
		case 0x18944: return Unicode_Category_LO;
		case 0x18945: return Unicode_Category_LO;
		case 0x18946: return Unicode_Category_LO;
		case 0x18947: return Unicode_Category_LO;
		case 0x18948: return Unicode_Category_LO;
		case 0x18949: return Unicode_Category_LO;
		case 0x1894A: return Unicode_Category_LO;
		case 0x1894B: return Unicode_Category_LO;
		case 0x1894C: return Unicode_Category_LO;
		case 0x1894D: return Unicode_Category_LO;
		case 0x1894E: return Unicode_Category_LO;
		case 0x1894F: return Unicode_Category_LO;
		case 0x18950: return Unicode_Category_LO;
		case 0x18951: return Unicode_Category_LO;
		case 0x18952: return Unicode_Category_LO;
		case 0x18953: return Unicode_Category_LO;
		case 0x18954: return Unicode_Category_LO;
		case 0x18955: return Unicode_Category_LO;
		case 0x18956: return Unicode_Category_LO;
		case 0x18957: return Unicode_Category_LO;
		case 0x18958: return Unicode_Category_LO;
		case 0x18959: return Unicode_Category_LO;
		case 0x1895A: return Unicode_Category_LO;
		case 0x1895B: return Unicode_Category_LO;
		case 0x1895C: return Unicode_Category_LO;
		case 0x1895D: return Unicode_Category_LO;
		case 0x1895E: return Unicode_Category_LO;
		case 0x1895F: return Unicode_Category_LO;
		case 0x18960: return Unicode_Category_LO;
		case 0x18961: return Unicode_Category_LO;
		case 0x18962: return Unicode_Category_LO;
		case 0x18963: return Unicode_Category_LO;
		case 0x18964: return Unicode_Category_LO;
		case 0x18965: return Unicode_Category_LO;
		case 0x18966: return Unicode_Category_LO;
		case 0x18967: return Unicode_Category_LO;
		case 0x18968: return Unicode_Category_LO;
		case 0x18969: return Unicode_Category_LO;
		case 0x1896A: return Unicode_Category_LO;
		case 0x1896B: return Unicode_Category_LO;
		case 0x1896C: return Unicode_Category_LO;
		case 0x1896D: return Unicode_Category_LO;
		case 0x1896E: return Unicode_Category_LO;
		case 0x1896F: return Unicode_Category_LO;
		case 0x18970: return Unicode_Category_LO;
		case 0x18971: return Unicode_Category_LO;
		case 0x18972: return Unicode_Category_LO;
		case 0x18973: return Unicode_Category_LO;
		case 0x18974: return Unicode_Category_LO;
		case 0x18975: return Unicode_Category_LO;
		case 0x18976: return Unicode_Category_LO;
		case 0x18977: return Unicode_Category_LO;
		case 0x18978: return Unicode_Category_LO;
		case 0x18979: return Unicode_Category_LO;
		case 0x1897A: return Unicode_Category_LO;
		case 0x1897B: return Unicode_Category_LO;
		case 0x1897C: return Unicode_Category_LO;
		case 0x1897D: return Unicode_Category_LO;
		case 0x1897E: return Unicode_Category_LO;
		case 0x1897F: return Unicode_Category_LO;
		case 0x18980: return Unicode_Category_LO;
		case 0x18981: return Unicode_Category_LO;
		case 0x18982: return Unicode_Category_LO;
		case 0x18983: return Unicode_Category_LO;
		case 0x18984: return Unicode_Category_LO;
		case 0x18985: return Unicode_Category_LO;
		case 0x18986: return Unicode_Category_LO;
		case 0x18987: return Unicode_Category_LO;
		case 0x18988: return Unicode_Category_LO;
		case 0x18989: return Unicode_Category_LO;
		case 0x1898A: return Unicode_Category_LO;
		case 0x1898B: return Unicode_Category_LO;
		case 0x1898C: return Unicode_Category_LO;
		case 0x1898D: return Unicode_Category_LO;
		case 0x1898E: return Unicode_Category_LO;
		case 0x1898F: return Unicode_Category_LO;
		case 0x18990: return Unicode_Category_LO;
		case 0x18991: return Unicode_Category_LO;
		case 0x18992: return Unicode_Category_LO;
		case 0x18993: return Unicode_Category_LO;
		case 0x18994: return Unicode_Category_LO;
		case 0x18995: return Unicode_Category_LO;
		case 0x18996: return Unicode_Category_LO;
		case 0x18997: return Unicode_Category_LO;
		case 0x18998: return Unicode_Category_LO;
		case 0x18999: return Unicode_Category_LO;
		case 0x1899A: return Unicode_Category_LO;
		case 0x1899B: return Unicode_Category_LO;
		case 0x1899C: return Unicode_Category_LO;
		case 0x1899D: return Unicode_Category_LO;
		case 0x1899E: return Unicode_Category_LO;
		case 0x1899F: return Unicode_Category_LO;
		case 0x189A0: return Unicode_Category_LO;
		case 0x189A1: return Unicode_Category_LO;
		case 0x189A2: return Unicode_Category_LO;
		case 0x189A3: return Unicode_Category_LO;
		case 0x189A4: return Unicode_Category_LO;
		case 0x189A5: return Unicode_Category_LO;
		case 0x189A6: return Unicode_Category_LO;
		case 0x189A7: return Unicode_Category_LO;
		case 0x189A8: return Unicode_Category_LO;
		case 0x189A9: return Unicode_Category_LO;
		case 0x189AA: return Unicode_Category_LO;
		case 0x189AB: return Unicode_Category_LO;
		case 0x189AC: return Unicode_Category_LO;
		case 0x189AD: return Unicode_Category_LO;
		case 0x189AE: return Unicode_Category_LO;
		case 0x189AF: return Unicode_Category_LO;
		case 0x189B0: return Unicode_Category_LO;
		case 0x189B1: return Unicode_Category_LO;
		case 0x189B2: return Unicode_Category_LO;
		case 0x189B3: return Unicode_Category_LO;
		case 0x189B4: return Unicode_Category_LO;
		case 0x189B5: return Unicode_Category_LO;
		case 0x189B6: return Unicode_Category_LO;
		case 0x189B7: return Unicode_Category_LO;
		case 0x189B8: return Unicode_Category_LO;
		case 0x189B9: return Unicode_Category_LO;
		case 0x189BA: return Unicode_Category_LO;
		case 0x189BB: return Unicode_Category_LO;
		case 0x189BC: return Unicode_Category_LO;
		case 0x189BD: return Unicode_Category_LO;
		case 0x189BE: return Unicode_Category_LO;
		case 0x189BF: return Unicode_Category_LO;
		case 0x189C0: return Unicode_Category_LO;
		case 0x189C1: return Unicode_Category_LO;
		case 0x189C2: return Unicode_Category_LO;
		case 0x189C3: return Unicode_Category_LO;
		case 0x189C4: return Unicode_Category_LO;
		case 0x189C5: return Unicode_Category_LO;
		case 0x189C6: return Unicode_Category_LO;
		case 0x189C7: return Unicode_Category_LO;
		case 0x189C8: return Unicode_Category_LO;
		case 0x189C9: return Unicode_Category_LO;
		case 0x189CA: return Unicode_Category_LO;
		case 0x189CB: return Unicode_Category_LO;
		case 0x189CC: return Unicode_Category_LO;
		case 0x189CD: return Unicode_Category_LO;
		case 0x189CE: return Unicode_Category_LO;
		case 0x189CF: return Unicode_Category_LO;
		case 0x189D0: return Unicode_Category_LO;
		case 0x189D1: return Unicode_Category_LO;
		case 0x189D2: return Unicode_Category_LO;
		case 0x189D3: return Unicode_Category_LO;
		case 0x189D4: return Unicode_Category_LO;
		case 0x189D5: return Unicode_Category_LO;
		case 0x189D6: return Unicode_Category_LO;
		case 0x189D7: return Unicode_Category_LO;
		case 0x189D8: return Unicode_Category_LO;
		case 0x189D9: return Unicode_Category_LO;
		case 0x189DA: return Unicode_Category_LO;
		case 0x189DB: return Unicode_Category_LO;
		case 0x189DC: return Unicode_Category_LO;
		case 0x189DD: return Unicode_Category_LO;
		case 0x189DE: return Unicode_Category_LO;
		case 0x189DF: return Unicode_Category_LO;
		case 0x189E0: return Unicode_Category_LO;
		case 0x189E1: return Unicode_Category_LO;
		case 0x189E2: return Unicode_Category_LO;
		case 0x189E3: return Unicode_Category_LO;
		case 0x189E4: return Unicode_Category_LO;
		case 0x189E5: return Unicode_Category_LO;
		case 0x189E6: return Unicode_Category_LO;
		case 0x189E7: return Unicode_Category_LO;
		case 0x189E8: return Unicode_Category_LO;
		case 0x189E9: return Unicode_Category_LO;
		case 0x189EA: return Unicode_Category_LO;
		case 0x189EB: return Unicode_Category_LO;
		case 0x189EC: return Unicode_Category_LO;
		case 0x189ED: return Unicode_Category_LO;
		case 0x189EE: return Unicode_Category_LO;
		case 0x189EF: return Unicode_Category_LO;
		case 0x189F0: return Unicode_Category_LO;
		case 0x189F1: return Unicode_Category_LO;
		case 0x189F2: return Unicode_Category_LO;
		case 0x189F3: return Unicode_Category_LO;
		case 0x189F4: return Unicode_Category_LO;
		case 0x189F5: return Unicode_Category_LO;
		case 0x189F6: return Unicode_Category_LO;
		case 0x189F7: return Unicode_Category_LO;
		case 0x189F8: return Unicode_Category_LO;
		case 0x189F9: return Unicode_Category_LO;
		case 0x189FA: return Unicode_Category_LO;
		case 0x189FB: return Unicode_Category_LO;
		case 0x189FC: return Unicode_Category_LO;
		case 0x189FD: return Unicode_Category_LO;
		case 0x189FE: return Unicode_Category_LO;
		case 0x189FF: return Unicode_Category_LO;
		case 0x18A00: return Unicode_Category_LO;
		case 0x18A01: return Unicode_Category_LO;
		case 0x18A02: return Unicode_Category_LO;
		case 0x18A03: return Unicode_Category_LO;
		case 0x18A04: return Unicode_Category_LO;
		case 0x18A05: return Unicode_Category_LO;
		case 0x18A06: return Unicode_Category_LO;
		case 0x18A07: return Unicode_Category_LO;
		case 0x18A08: return Unicode_Category_LO;
		case 0x18A09: return Unicode_Category_LO;
		case 0x18A0A: return Unicode_Category_LO;
		case 0x18A0B: return Unicode_Category_LO;
		case 0x18A0C: return Unicode_Category_LO;
		case 0x18A0D: return Unicode_Category_LO;
		case 0x18A0E: return Unicode_Category_LO;
		case 0x18A0F: return Unicode_Category_LO;
		case 0x18A10: return Unicode_Category_LO;
		case 0x18A11: return Unicode_Category_LO;
		case 0x18A12: return Unicode_Category_LO;
		case 0x18A13: return Unicode_Category_LO;
		case 0x18A14: return Unicode_Category_LO;
		case 0x18A15: return Unicode_Category_LO;
		case 0x18A16: return Unicode_Category_LO;
		case 0x18A17: return Unicode_Category_LO;
		case 0x18A18: return Unicode_Category_LO;
		case 0x18A19: return Unicode_Category_LO;
		case 0x18A1A: return Unicode_Category_LO;
		case 0x18A1B: return Unicode_Category_LO;
		case 0x18A1C: return Unicode_Category_LO;
		case 0x18A1D: return Unicode_Category_LO;
		case 0x18A1E: return Unicode_Category_LO;
		case 0x18A1F: return Unicode_Category_LO;
		case 0x18A20: return Unicode_Category_LO;
		case 0x18A21: return Unicode_Category_LO;
		case 0x18A22: return Unicode_Category_LO;
		case 0x18A23: return Unicode_Category_LO;
		case 0x18A24: return Unicode_Category_LO;
		case 0x18A25: return Unicode_Category_LO;
		case 0x18A26: return Unicode_Category_LO;
		case 0x18A27: return Unicode_Category_LO;
		case 0x18A28: return Unicode_Category_LO;
		case 0x18A29: return Unicode_Category_LO;
		case 0x18A2A: return Unicode_Category_LO;
		case 0x18A2B: return Unicode_Category_LO;
		case 0x18A2C: return Unicode_Category_LO;
		case 0x18A2D: return Unicode_Category_LO;
		case 0x18A2E: return Unicode_Category_LO;
		case 0x18A2F: return Unicode_Category_LO;
		case 0x18A30: return Unicode_Category_LO;
		case 0x18A31: return Unicode_Category_LO;
		case 0x18A32: return Unicode_Category_LO;
		case 0x18A33: return Unicode_Category_LO;
		case 0x18A34: return Unicode_Category_LO;
		case 0x18A35: return Unicode_Category_LO;
		case 0x18A36: return Unicode_Category_LO;
		case 0x18A37: return Unicode_Category_LO;
		case 0x18A38: return Unicode_Category_LO;
		case 0x18A39: return Unicode_Category_LO;
		case 0x18A3A: return Unicode_Category_LO;
		case 0x18A3B: return Unicode_Category_LO;
		case 0x18A3C: return Unicode_Category_LO;
		case 0x18A3D: return Unicode_Category_LO;
		case 0x18A3E: return Unicode_Category_LO;
		case 0x18A3F: return Unicode_Category_LO;
		case 0x18A40: return Unicode_Category_LO;
		case 0x18A41: return Unicode_Category_LO;
		case 0x18A42: return Unicode_Category_LO;
		case 0x18A43: return Unicode_Category_LO;
		case 0x18A44: return Unicode_Category_LO;
		case 0x18A45: return Unicode_Category_LO;
		case 0x18A46: return Unicode_Category_LO;
		case 0x18A47: return Unicode_Category_LO;
		case 0x18A48: return Unicode_Category_LO;
		case 0x18A49: return Unicode_Category_LO;
		case 0x18A4A: return Unicode_Category_LO;
		case 0x18A4B: return Unicode_Category_LO;
		case 0x18A4C: return Unicode_Category_LO;
		case 0x18A4D: return Unicode_Category_LO;
		case 0x18A4E: return Unicode_Category_LO;
		case 0x18A4F: return Unicode_Category_LO;
		case 0x18A50: return Unicode_Category_LO;
		case 0x18A51: return Unicode_Category_LO;
		case 0x18A52: return Unicode_Category_LO;
		case 0x18A53: return Unicode_Category_LO;
		case 0x18A54: return Unicode_Category_LO;
		case 0x18A55: return Unicode_Category_LO;
		case 0x18A56: return Unicode_Category_LO;
		case 0x18A57: return Unicode_Category_LO;
		case 0x18A58: return Unicode_Category_LO;
		case 0x18A59: return Unicode_Category_LO;
		case 0x18A5A: return Unicode_Category_LO;
		case 0x18A5B: return Unicode_Category_LO;
		case 0x18A5C: return Unicode_Category_LO;
		case 0x18A5D: return Unicode_Category_LO;
		case 0x18A5E: return Unicode_Category_LO;
		case 0x18A5F: return Unicode_Category_LO;
		case 0x18A60: return Unicode_Category_LO;
		case 0x18A61: return Unicode_Category_LO;
		case 0x18A62: return Unicode_Category_LO;
		case 0x18A63: return Unicode_Category_LO;
		case 0x18A64: return Unicode_Category_LO;
		case 0x18A65: return Unicode_Category_LO;
		case 0x18A66: return Unicode_Category_LO;
		case 0x18A67: return Unicode_Category_LO;
		case 0x18A68: return Unicode_Category_LO;
		case 0x18A69: return Unicode_Category_LO;
		case 0x18A6A: return Unicode_Category_LO;
		case 0x18A6B: return Unicode_Category_LO;
		case 0x18A6C: return Unicode_Category_LO;
		case 0x18A6D: return Unicode_Category_LO;
		case 0x18A6E: return Unicode_Category_LO;
		case 0x18A6F: return Unicode_Category_LO;
		case 0x18A70: return Unicode_Category_LO;
		case 0x18A71: return Unicode_Category_LO;
		case 0x18A72: return Unicode_Category_LO;
		case 0x18A73: return Unicode_Category_LO;
		case 0x18A74: return Unicode_Category_LO;
		case 0x18A75: return Unicode_Category_LO;
		case 0x18A76: return Unicode_Category_LO;
		case 0x18A77: return Unicode_Category_LO;
		case 0x18A78: return Unicode_Category_LO;
		case 0x18A79: return Unicode_Category_LO;
		case 0x18A7A: return Unicode_Category_LO;
		case 0x18A7B: return Unicode_Category_LO;
		case 0x18A7C: return Unicode_Category_LO;
		case 0x18A7D: return Unicode_Category_LO;
		case 0x18A7E: return Unicode_Category_LO;
		case 0x18A7F: return Unicode_Category_LO;
		case 0x18A80: return Unicode_Category_LO;
		case 0x18A81: return Unicode_Category_LO;
		case 0x18A82: return Unicode_Category_LO;
		case 0x18A83: return Unicode_Category_LO;
		case 0x18A84: return Unicode_Category_LO;
		case 0x18A85: return Unicode_Category_LO;
		case 0x18A86: return Unicode_Category_LO;
		case 0x18A87: return Unicode_Category_LO;
		case 0x18A88: return Unicode_Category_LO;
		case 0x18A89: return Unicode_Category_LO;
		case 0x18A8A: return Unicode_Category_LO;
		case 0x18A8B: return Unicode_Category_LO;
		case 0x18A8C: return Unicode_Category_LO;
		case 0x18A8D: return Unicode_Category_LO;
		case 0x18A8E: return Unicode_Category_LO;
		case 0x18A8F: return Unicode_Category_LO;
		case 0x18A90: return Unicode_Category_LO;
		case 0x18A91: return Unicode_Category_LO;
		case 0x18A92: return Unicode_Category_LO;
		case 0x18A93: return Unicode_Category_LO;
		case 0x18A94: return Unicode_Category_LO;
		case 0x18A95: return Unicode_Category_LO;
		case 0x18A96: return Unicode_Category_LO;
		case 0x18A97: return Unicode_Category_LO;
		case 0x18A98: return Unicode_Category_LO;
		case 0x18A99: return Unicode_Category_LO;
		case 0x18A9A: return Unicode_Category_LO;
		case 0x18A9B: return Unicode_Category_LO;
		case 0x18A9C: return Unicode_Category_LO;
		case 0x18A9D: return Unicode_Category_LO;
		case 0x18A9E: return Unicode_Category_LO;
		case 0x18A9F: return Unicode_Category_LO;
		case 0x18AA0: return Unicode_Category_LO;
		case 0x18AA1: return Unicode_Category_LO;
		case 0x18AA2: return Unicode_Category_LO;
		case 0x18AA3: return Unicode_Category_LO;
		case 0x18AA4: return Unicode_Category_LO;
		case 0x18AA5: return Unicode_Category_LO;
		case 0x18AA6: return Unicode_Category_LO;
		case 0x18AA7: return Unicode_Category_LO;
		case 0x18AA8: return Unicode_Category_LO;
		case 0x18AA9: return Unicode_Category_LO;
		case 0x18AAA: return Unicode_Category_LO;
		case 0x18AAB: return Unicode_Category_LO;
		case 0x18AAC: return Unicode_Category_LO;
		case 0x18AAD: return Unicode_Category_LO;
		case 0x18AAE: return Unicode_Category_LO;
		case 0x18AAF: return Unicode_Category_LO;
		case 0x18AB0: return Unicode_Category_LO;
		case 0x18AB1: return Unicode_Category_LO;
		case 0x18AB2: return Unicode_Category_LO;
		case 0x18AB3: return Unicode_Category_LO;
		case 0x18AB4: return Unicode_Category_LO;
		case 0x18AB5: return Unicode_Category_LO;
		case 0x18AB6: return Unicode_Category_LO;
		case 0x18AB7: return Unicode_Category_LO;
		case 0x18AB8: return Unicode_Category_LO;
		case 0x18AB9: return Unicode_Category_LO;
		case 0x18ABA: return Unicode_Category_LO;
		case 0x18ABB: return Unicode_Category_LO;
		case 0x18ABC: return Unicode_Category_LO;
		case 0x18ABD: return Unicode_Category_LO;
		case 0x18ABE: return Unicode_Category_LO;
		case 0x18ABF: return Unicode_Category_LO;
		case 0x18AC0: return Unicode_Category_LO;
		case 0x18AC1: return Unicode_Category_LO;
		case 0x18AC2: return Unicode_Category_LO;
		case 0x18AC3: return Unicode_Category_LO;
		case 0x18AC4: return Unicode_Category_LO;
		case 0x18AC5: return Unicode_Category_LO;
		case 0x18AC6: return Unicode_Category_LO;
		case 0x18AC7: return Unicode_Category_LO;
		case 0x18AC8: return Unicode_Category_LO;
		case 0x18AC9: return Unicode_Category_LO;
		case 0x18ACA: return Unicode_Category_LO;
		case 0x18ACB: return Unicode_Category_LO;
		case 0x18ACC: return Unicode_Category_LO;
		case 0x18ACD: return Unicode_Category_LO;
		case 0x18ACE: return Unicode_Category_LO;
		case 0x18ACF: return Unicode_Category_LO;
		case 0x18AD0: return Unicode_Category_LO;
		case 0x18AD1: return Unicode_Category_LO;
		case 0x18AD2: return Unicode_Category_LO;
		case 0x18AD3: return Unicode_Category_LO;
		case 0x18AD4: return Unicode_Category_LO;
		case 0x18AD5: return Unicode_Category_LO;
		case 0x18AD6: return Unicode_Category_LO;
		case 0x18AD7: return Unicode_Category_LO;
		case 0x18AD8: return Unicode_Category_LO;
		case 0x18AD9: return Unicode_Category_LO;
		case 0x18ADA: return Unicode_Category_LO;
		case 0x18ADB: return Unicode_Category_LO;
		case 0x18ADC: return Unicode_Category_LO;
		case 0x18ADD: return Unicode_Category_LO;
		case 0x18ADE: return Unicode_Category_LO;
		case 0x18ADF: return Unicode_Category_LO;
		case 0x18AE0: return Unicode_Category_LO;
		case 0x18AE1: return Unicode_Category_LO;
		case 0x18AE2: return Unicode_Category_LO;
		case 0x18AE3: return Unicode_Category_LO;
		case 0x18AE4: return Unicode_Category_LO;
		case 0x18AE5: return Unicode_Category_LO;
		case 0x18AE6: return Unicode_Category_LO;
		case 0x18AE7: return Unicode_Category_LO;
		case 0x18AE8: return Unicode_Category_LO;
		case 0x18AE9: return Unicode_Category_LO;
		case 0x18AEA: return Unicode_Category_LO;
		case 0x18AEB: return Unicode_Category_LO;
		case 0x18AEC: return Unicode_Category_LO;
		case 0x18AED: return Unicode_Category_LO;
		case 0x18AEE: return Unicode_Category_LO;
		case 0x18AEF: return Unicode_Category_LO;
		case 0x18AF0: return Unicode_Category_LO;
		case 0x18AF1: return Unicode_Category_LO;
		case 0x18AF2: return Unicode_Category_LO;
		case 0x18AF3: return Unicode_Category_LO;
		case 0x18AF4: return Unicode_Category_LO;
		case 0x18AF5: return Unicode_Category_LO;
		case 0x18AF6: return Unicode_Category_LO;
		case 0x18AF7: return Unicode_Category_LO;
		case 0x18AF8: return Unicode_Category_LO;
		case 0x18AF9: return Unicode_Category_LO;
		case 0x18AFA: return Unicode_Category_LO;
		case 0x18AFB: return Unicode_Category_LO;
		case 0x18AFC: return Unicode_Category_LO;
		case 0x18AFD: return Unicode_Category_LO;
		case 0x18AFE: return Unicode_Category_LO;
		case 0x18AFF: return Unicode_Category_LO;
		case 0x18B00: return Unicode_Category_LO;
		case 0x18B01: return Unicode_Category_LO;
		case 0x18B02: return Unicode_Category_LO;
		case 0x18B03: return Unicode_Category_LO;
		case 0x18B04: return Unicode_Category_LO;
		case 0x18B05: return Unicode_Category_LO;
		case 0x18B06: return Unicode_Category_LO;
		case 0x18B07: return Unicode_Category_LO;
		case 0x18B08: return Unicode_Category_LO;
		case 0x18B09: return Unicode_Category_LO;
		case 0x18B0A: return Unicode_Category_LO;
		case 0x18B0B: return Unicode_Category_LO;
		case 0x18B0C: return Unicode_Category_LO;
		case 0x18B0D: return Unicode_Category_LO;
		case 0x18B0E: return Unicode_Category_LO;
		case 0x18B0F: return Unicode_Category_LO;
		case 0x18B10: return Unicode_Category_LO;
		case 0x18B11: return Unicode_Category_LO;
		case 0x18B12: return Unicode_Category_LO;
		case 0x18B13: return Unicode_Category_LO;
		case 0x18B14: return Unicode_Category_LO;
		case 0x18B15: return Unicode_Category_LO;
		case 0x18B16: return Unicode_Category_LO;
		case 0x18B17: return Unicode_Category_LO;
		case 0x18B18: return Unicode_Category_LO;
		case 0x18B19: return Unicode_Category_LO;
		case 0x18B1A: return Unicode_Category_LO;
		case 0x18B1B: return Unicode_Category_LO;
		case 0x18B1C: return Unicode_Category_LO;
		case 0x18B1D: return Unicode_Category_LO;
		case 0x18B1E: return Unicode_Category_LO;
		case 0x18B1F: return Unicode_Category_LO;
		case 0x18B20: return Unicode_Category_LO;
		case 0x18B21: return Unicode_Category_LO;
		case 0x18B22: return Unicode_Category_LO;
		case 0x18B23: return Unicode_Category_LO;
		case 0x18B24: return Unicode_Category_LO;
		case 0x18B25: return Unicode_Category_LO;
		case 0x18B26: return Unicode_Category_LO;
		case 0x18B27: return Unicode_Category_LO;
		case 0x18B28: return Unicode_Category_LO;
		case 0x18B29: return Unicode_Category_LO;
		case 0x18B2A: return Unicode_Category_LO;
		case 0x18B2B: return Unicode_Category_LO;
		case 0x18B2C: return Unicode_Category_LO;
		case 0x18B2D: return Unicode_Category_LO;
		case 0x18B2E: return Unicode_Category_LO;
		case 0x18B2F: return Unicode_Category_LO;
		case 0x18B30: return Unicode_Category_LO;
		case 0x18B31: return Unicode_Category_LO;
		case 0x18B32: return Unicode_Category_LO;
		case 0x18B33: return Unicode_Category_LO;
		case 0x18B34: return Unicode_Category_LO;
		case 0x18B35: return Unicode_Category_LO;
		case 0x18B36: return Unicode_Category_LO;
		case 0x18B37: return Unicode_Category_LO;
		case 0x18B38: return Unicode_Category_LO;
		case 0x18B39: return Unicode_Category_LO;
		case 0x18B3A: return Unicode_Category_LO;
		case 0x18B3B: return Unicode_Category_LO;
		case 0x18B3C: return Unicode_Category_LO;
		case 0x18B3D: return Unicode_Category_LO;
		case 0x18B3E: return Unicode_Category_LO;
		case 0x18B3F: return Unicode_Category_LO;
		case 0x18B40: return Unicode_Category_LO;
		case 0x18B41: return Unicode_Category_LO;
		case 0x18B42: return Unicode_Category_LO;
		case 0x18B43: return Unicode_Category_LO;
		case 0x18B44: return Unicode_Category_LO;
		case 0x18B45: return Unicode_Category_LO;
		case 0x18B46: return Unicode_Category_LO;
		case 0x18B47: return Unicode_Category_LO;
		case 0x18B48: return Unicode_Category_LO;
		case 0x18B49: return Unicode_Category_LO;
		case 0x18B4A: return Unicode_Category_LO;
		case 0x18B4B: return Unicode_Category_LO;
		case 0x18B4C: return Unicode_Category_LO;
		case 0x18B4D: return Unicode_Category_LO;
		case 0x18B4E: return Unicode_Category_LO;
		case 0x18B4F: return Unicode_Category_LO;
		case 0x18B50: return Unicode_Category_LO;
		case 0x18B51: return Unicode_Category_LO;
		case 0x18B52: return Unicode_Category_LO;
		case 0x18B53: return Unicode_Category_LO;
		case 0x18B54: return Unicode_Category_LO;
		case 0x18B55: return Unicode_Category_LO;
		case 0x18B56: return Unicode_Category_LO;
		case 0x18B57: return Unicode_Category_LO;
		case 0x18B58: return Unicode_Category_LO;
		case 0x18B59: return Unicode_Category_LO;
		case 0x18B5A: return Unicode_Category_LO;
		case 0x18B5B: return Unicode_Category_LO;
		case 0x18B5C: return Unicode_Category_LO;
		case 0x18B5D: return Unicode_Category_LO;
		case 0x18B5E: return Unicode_Category_LO;
		case 0x18B5F: return Unicode_Category_LO;
		case 0x18B60: return Unicode_Category_LO;
		case 0x18B61: return Unicode_Category_LO;
		case 0x18B62: return Unicode_Category_LO;
		case 0x18B63: return Unicode_Category_LO;
		case 0x18B64: return Unicode_Category_LO;
		case 0x18B65: return Unicode_Category_LO;
		case 0x18B66: return Unicode_Category_LO;
		case 0x18B67: return Unicode_Category_LO;
		case 0x18B68: return Unicode_Category_LO;
		case 0x18B69: return Unicode_Category_LO;
		case 0x18B6A: return Unicode_Category_LO;
		case 0x18B6B: return Unicode_Category_LO;
		case 0x18B6C: return Unicode_Category_LO;
		case 0x18B6D: return Unicode_Category_LO;
		case 0x18B6E: return Unicode_Category_LO;
		case 0x18B6F: return Unicode_Category_LO;
		case 0x18B70: return Unicode_Category_LO;
		case 0x18B71: return Unicode_Category_LO;
		case 0x18B72: return Unicode_Category_LO;
		case 0x18B73: return Unicode_Category_LO;
		case 0x18B74: return Unicode_Category_LO;
		case 0x18B75: return Unicode_Category_LO;
		case 0x18B76: return Unicode_Category_LO;
		case 0x18B77: return Unicode_Category_LO;
		case 0x18B78: return Unicode_Category_LO;
		case 0x18B79: return Unicode_Category_LO;
		case 0x18B7A: return Unicode_Category_LO;
		case 0x18B7B: return Unicode_Category_LO;
		case 0x18B7C: return Unicode_Category_LO;
		case 0x18B7D: return Unicode_Category_LO;
		case 0x18B7E: return Unicode_Category_LO;
		case 0x18B7F: return Unicode_Category_LO;
		case 0x18B80: return Unicode_Category_LO;
		case 0x18B81: return Unicode_Category_LO;
		case 0x18B82: return Unicode_Category_LO;
		case 0x18B83: return Unicode_Category_LO;
		case 0x18B84: return Unicode_Category_LO;
		case 0x18B85: return Unicode_Category_LO;
		case 0x18B86: return Unicode_Category_LO;
		case 0x18B87: return Unicode_Category_LO;
		case 0x18B88: return Unicode_Category_LO;
		case 0x18B89: return Unicode_Category_LO;
		case 0x18B8A: return Unicode_Category_LO;
		case 0x18B8B: return Unicode_Category_LO;
		case 0x18B8C: return Unicode_Category_LO;
		case 0x18B8D: return Unicode_Category_LO;
		case 0x18B8E: return Unicode_Category_LO;
		case 0x18B8F: return Unicode_Category_LO;
		case 0x18B90: return Unicode_Category_LO;
		case 0x18B91: return Unicode_Category_LO;
		case 0x18B92: return Unicode_Category_LO;
		case 0x18B93: return Unicode_Category_LO;
		case 0x18B94: return Unicode_Category_LO;
		case 0x18B95: return Unicode_Category_LO;
		case 0x18B96: return Unicode_Category_LO;
		case 0x18B97: return Unicode_Category_LO;
		case 0x18B98: return Unicode_Category_LO;
		case 0x18B99: return Unicode_Category_LO;
		case 0x18B9A: return Unicode_Category_LO;
		case 0x18B9B: return Unicode_Category_LO;
		case 0x18B9C: return Unicode_Category_LO;
		case 0x18B9D: return Unicode_Category_LO;
		case 0x18B9E: return Unicode_Category_LO;
		case 0x18B9F: return Unicode_Category_LO;
		case 0x18BA0: return Unicode_Category_LO;
		case 0x18BA1: return Unicode_Category_LO;
		case 0x18BA2: return Unicode_Category_LO;
		case 0x18BA3: return Unicode_Category_LO;
		case 0x18BA4: return Unicode_Category_LO;
		case 0x18BA5: return Unicode_Category_LO;
		case 0x18BA6: return Unicode_Category_LO;
		case 0x18BA7: return Unicode_Category_LO;
		case 0x18BA8: return Unicode_Category_LO;
		case 0x18BA9: return Unicode_Category_LO;
		case 0x18BAA: return Unicode_Category_LO;
		case 0x18BAB: return Unicode_Category_LO;
		case 0x18BAC: return Unicode_Category_LO;
		case 0x18BAD: return Unicode_Category_LO;
		case 0x18BAE: return Unicode_Category_LO;
		case 0x18BAF: return Unicode_Category_LO;
		case 0x18BB0: return Unicode_Category_LO;
		case 0x18BB1: return Unicode_Category_LO;
		case 0x18BB2: return Unicode_Category_LO;
		case 0x18BB3: return Unicode_Category_LO;
		case 0x18BB4: return Unicode_Category_LO;
		case 0x18BB5: return Unicode_Category_LO;
		case 0x18BB6: return Unicode_Category_LO;
		case 0x18BB7: return Unicode_Category_LO;
		case 0x18BB8: return Unicode_Category_LO;
		case 0x18BB9: return Unicode_Category_LO;
		case 0x18BBA: return Unicode_Category_LO;
		case 0x18BBB: return Unicode_Category_LO;
		case 0x18BBC: return Unicode_Category_LO;
		case 0x18BBD: return Unicode_Category_LO;
		case 0x18BBE: return Unicode_Category_LO;
		case 0x18BBF: return Unicode_Category_LO;
		case 0x18BC0: return Unicode_Category_LO;
		case 0x18BC1: return Unicode_Category_LO;
		case 0x18BC2: return Unicode_Category_LO;
		case 0x18BC3: return Unicode_Category_LO;
		case 0x18BC4: return Unicode_Category_LO;
		case 0x18BC5: return Unicode_Category_LO;
		case 0x18BC6: return Unicode_Category_LO;
		case 0x18BC7: return Unicode_Category_LO;
		case 0x18BC8: return Unicode_Category_LO;
		case 0x18BC9: return Unicode_Category_LO;
		case 0x18BCA: return Unicode_Category_LO;
		case 0x18BCB: return Unicode_Category_LO;
		case 0x18BCC: return Unicode_Category_LO;
		case 0x18BCD: return Unicode_Category_LO;
		case 0x18BCE: return Unicode_Category_LO;
		case 0x18BCF: return Unicode_Category_LO;
		case 0x18BD0: return Unicode_Category_LO;
		case 0x18BD1: return Unicode_Category_LO;
		case 0x18BD2: return Unicode_Category_LO;
		case 0x18BD3: return Unicode_Category_LO;
		case 0x18BD4: return Unicode_Category_LO;
		case 0x18BD5: return Unicode_Category_LO;
		case 0x18BD6: return Unicode_Category_LO;
		case 0x18BD7: return Unicode_Category_LO;
		case 0x18BD8: return Unicode_Category_LO;
		case 0x18BD9: return Unicode_Category_LO;
		case 0x18BDA: return Unicode_Category_LO;
		case 0x18BDB: return Unicode_Category_LO;
		case 0x18BDC: return Unicode_Category_LO;
		case 0x18BDD: return Unicode_Category_LO;
		case 0x18BDE: return Unicode_Category_LO;
		case 0x18BDF: return Unicode_Category_LO;
		case 0x18BE0: return Unicode_Category_LO;
		case 0x18BE1: return Unicode_Category_LO;
		case 0x18BE2: return Unicode_Category_LO;
		case 0x18BE3: return Unicode_Category_LO;
		case 0x18BE4: return Unicode_Category_LO;
		case 0x18BE5: return Unicode_Category_LO;
		case 0x18BE6: return Unicode_Category_LO;
		case 0x18BE7: return Unicode_Category_LO;
		case 0x18BE8: return Unicode_Category_LO;
		case 0x18BE9: return Unicode_Category_LO;
		case 0x18BEA: return Unicode_Category_LO;
		case 0x18BEB: return Unicode_Category_LO;
		case 0x18BEC: return Unicode_Category_LO;
		case 0x18BED: return Unicode_Category_LO;
		case 0x18BEE: return Unicode_Category_LO;
		case 0x18BEF: return Unicode_Category_LO;
		case 0x18BF0: return Unicode_Category_LO;
		case 0x18BF1: return Unicode_Category_LO;
		case 0x18BF2: return Unicode_Category_LO;
		case 0x18BF3: return Unicode_Category_LO;
		case 0x18BF4: return Unicode_Category_LO;
		case 0x18BF5: return Unicode_Category_LO;
		case 0x18BF6: return Unicode_Category_LO;
		case 0x18BF7: return Unicode_Category_LO;
		case 0x18BF8: return Unicode_Category_LO;
		case 0x18BF9: return Unicode_Category_LO;
		case 0x18BFA: return Unicode_Category_LO;
		case 0x18BFB: return Unicode_Category_LO;
		case 0x18BFC: return Unicode_Category_LO;
		case 0x18BFD: return Unicode_Category_LO;
		case 0x18BFE: return Unicode_Category_LO;
		case 0x18BFF: return Unicode_Category_LO;
		case 0x18C00: return Unicode_Category_LO;
		case 0x18C01: return Unicode_Category_LO;
		case 0x18C02: return Unicode_Category_LO;
		case 0x18C03: return Unicode_Category_LO;
		case 0x18C04: return Unicode_Category_LO;
		case 0x18C05: return Unicode_Category_LO;
		case 0x18C06: return Unicode_Category_LO;
		case 0x18C07: return Unicode_Category_LO;
		case 0x18C08: return Unicode_Category_LO;
		case 0x18C09: return Unicode_Category_LO;
		case 0x18C0A: return Unicode_Category_LO;
		case 0x18C0B: return Unicode_Category_LO;
		case 0x18C0C: return Unicode_Category_LO;
		case 0x18C0D: return Unicode_Category_LO;
		case 0x18C0E: return Unicode_Category_LO;
		case 0x18C0F: return Unicode_Category_LO;
		case 0x18C10: return Unicode_Category_LO;
		case 0x18C11: return Unicode_Category_LO;
		case 0x18C12: return Unicode_Category_LO;
		case 0x18C13: return Unicode_Category_LO;
		case 0x18C14: return Unicode_Category_LO;
		case 0x18C15: return Unicode_Category_LO;
		case 0x18C16: return Unicode_Category_LO;
		case 0x18C17: return Unicode_Category_LO;
		case 0x18C18: return Unicode_Category_LO;
		case 0x18C19: return Unicode_Category_LO;
		case 0x18C1A: return Unicode_Category_LO;
		case 0x18C1B: return Unicode_Category_LO;
		case 0x18C1C: return Unicode_Category_LO;
		case 0x18C1D: return Unicode_Category_LO;
		case 0x18C1E: return Unicode_Category_LO;
		case 0x18C1F: return Unicode_Category_LO;
		case 0x18C20: return Unicode_Category_LO;
		case 0x18C21: return Unicode_Category_LO;
		case 0x18C22: return Unicode_Category_LO;
		case 0x18C23: return Unicode_Category_LO;
		case 0x18C24: return Unicode_Category_LO;
		case 0x18C25: return Unicode_Category_LO;
		case 0x18C26: return Unicode_Category_LO;
		case 0x18C27: return Unicode_Category_LO;
		case 0x18C28: return Unicode_Category_LO;
		case 0x18C29: return Unicode_Category_LO;
		case 0x18C2A: return Unicode_Category_LO;
		case 0x18C2B: return Unicode_Category_LO;
		case 0x18C2C: return Unicode_Category_LO;
		case 0x18C2D: return Unicode_Category_LO;
		case 0x18C2E: return Unicode_Category_LO;
		case 0x18C2F: return Unicode_Category_LO;
		case 0x18C30: return Unicode_Category_LO;
		case 0x18C31: return Unicode_Category_LO;
		case 0x18C32: return Unicode_Category_LO;
		case 0x18C33: return Unicode_Category_LO;
		case 0x18C34: return Unicode_Category_LO;
		case 0x18C35: return Unicode_Category_LO;
		case 0x18C36: return Unicode_Category_LO;
		case 0x18C37: return Unicode_Category_LO;
		case 0x18C38: return Unicode_Category_LO;
		case 0x18C39: return Unicode_Category_LO;
		case 0x18C3A: return Unicode_Category_LO;
		case 0x18C3B: return Unicode_Category_LO;
		case 0x18C3C: return Unicode_Category_LO;
		case 0x18C3D: return Unicode_Category_LO;
		case 0x18C3E: return Unicode_Category_LO;
		case 0x18C3F: return Unicode_Category_LO;
		case 0x18C40: return Unicode_Category_LO;
		case 0x18C41: return Unicode_Category_LO;
		case 0x18C42: return Unicode_Category_LO;
		case 0x18C43: return Unicode_Category_LO;
		case 0x18C44: return Unicode_Category_LO;
		case 0x18C45: return Unicode_Category_LO;
		case 0x18C46: return Unicode_Category_LO;
		case 0x18C47: return Unicode_Category_LO;
		case 0x18C48: return Unicode_Category_LO;
		case 0x18C49: return Unicode_Category_LO;
		case 0x18C4A: return Unicode_Category_LO;
		case 0x18C4B: return Unicode_Category_LO;
		case 0x18C4C: return Unicode_Category_LO;
		case 0x18C4D: return Unicode_Category_LO;
		case 0x18C4E: return Unicode_Category_LO;
		case 0x18C4F: return Unicode_Category_LO;
		case 0x18C50: return Unicode_Category_LO;
		case 0x18C51: return Unicode_Category_LO;
		case 0x18C52: return Unicode_Category_LO;
		case 0x18C53: return Unicode_Category_LO;
		case 0x18C54: return Unicode_Category_LO;
		case 0x18C55: return Unicode_Category_LO;
		case 0x18C56: return Unicode_Category_LO;
		case 0x18C57: return Unicode_Category_LO;
		case 0x18C58: return Unicode_Category_LO;
		case 0x18C59: return Unicode_Category_LO;
		case 0x18C5A: return Unicode_Category_LO;
		case 0x18C5B: return Unicode_Category_LO;
		case 0x18C5C: return Unicode_Category_LO;
		case 0x18C5D: return Unicode_Category_LO;
		case 0x18C5E: return Unicode_Category_LO;
		case 0x18C5F: return Unicode_Category_LO;
		case 0x18C60: return Unicode_Category_LO;
		case 0x18C61: return Unicode_Category_LO;
		case 0x18C62: return Unicode_Category_LO;
		case 0x18C63: return Unicode_Category_LO;
		case 0x18C64: return Unicode_Category_LO;
		case 0x18C65: return Unicode_Category_LO;
		case 0x18C66: return Unicode_Category_LO;
		case 0x18C67: return Unicode_Category_LO;
		case 0x18C68: return Unicode_Category_LO;
		case 0x18C69: return Unicode_Category_LO;
		case 0x18C6A: return Unicode_Category_LO;
		case 0x18C6B: return Unicode_Category_LO;
		case 0x18C6C: return Unicode_Category_LO;
		case 0x18C6D: return Unicode_Category_LO;
		case 0x18C6E: return Unicode_Category_LO;
		case 0x18C6F: return Unicode_Category_LO;
		case 0x18C70: return Unicode_Category_LO;
		case 0x18C71: return Unicode_Category_LO;
		case 0x18C72: return Unicode_Category_LO;
		case 0x18C73: return Unicode_Category_LO;
		case 0x18C74: return Unicode_Category_LO;
		case 0x18C75: return Unicode_Category_LO;
		case 0x18C76: return Unicode_Category_LO;
		case 0x18C77: return Unicode_Category_LO;
		case 0x18C78: return Unicode_Category_LO;
		case 0x18C79: return Unicode_Category_LO;
		case 0x18C7A: return Unicode_Category_LO;
		case 0x18C7B: return Unicode_Category_LO;
		case 0x18C7C: return Unicode_Category_LO;
		case 0x18C7D: return Unicode_Category_LO;
		case 0x18C7E: return Unicode_Category_LO;
		case 0x18C7F: return Unicode_Category_LO;
		case 0x18C80: return Unicode_Category_LO;
		case 0x18C81: return Unicode_Category_LO;
		case 0x18C82: return Unicode_Category_LO;
		case 0x18C83: return Unicode_Category_LO;
		case 0x18C84: return Unicode_Category_LO;
		case 0x18C85: return Unicode_Category_LO;
		case 0x18C86: return Unicode_Category_LO;
		case 0x18C87: return Unicode_Category_LO;
		case 0x18C88: return Unicode_Category_LO;
		case 0x18C89: return Unicode_Category_LO;
		case 0x18C8A: return Unicode_Category_LO;
		case 0x18C8B: return Unicode_Category_LO;
		case 0x18C8C: return Unicode_Category_LO;
		case 0x18C8D: return Unicode_Category_LO;
		case 0x18C8E: return Unicode_Category_LO;
		case 0x18C8F: return Unicode_Category_LO;
		case 0x18C90: return Unicode_Category_LO;
		case 0x18C91: return Unicode_Category_LO;
		case 0x18C92: return Unicode_Category_LO;
		case 0x18C93: return Unicode_Category_LO;
		case 0x18C94: return Unicode_Category_LO;
		case 0x18C95: return Unicode_Category_LO;
		case 0x18C96: return Unicode_Category_LO;
		case 0x18C97: return Unicode_Category_LO;
		case 0x18C98: return Unicode_Category_LO;
		case 0x18C99: return Unicode_Category_LO;
		case 0x18C9A: return Unicode_Category_LO;
		case 0x18C9B: return Unicode_Category_LO;
		case 0x18C9C: return Unicode_Category_LO;
		case 0x18C9D: return Unicode_Category_LO;
		case 0x18C9E: return Unicode_Category_LO;
		case 0x18C9F: return Unicode_Category_LO;
		case 0x18CA0: return Unicode_Category_LO;
		case 0x18CA1: return Unicode_Category_LO;
		case 0x18CA2: return Unicode_Category_LO;
		case 0x18CA3: return Unicode_Category_LO;
		case 0x18CA4: return Unicode_Category_LO;
		case 0x18CA5: return Unicode_Category_LO;
		case 0x18CA6: return Unicode_Category_LO;
		case 0x18CA7: return Unicode_Category_LO;
		case 0x18CA8: return Unicode_Category_LO;
		case 0x18CA9: return Unicode_Category_LO;
		case 0x18CAA: return Unicode_Category_LO;
		case 0x18CAB: return Unicode_Category_LO;
		case 0x18CAC: return Unicode_Category_LO;
		case 0x18CAD: return Unicode_Category_LO;
		case 0x18CAE: return Unicode_Category_LO;
		case 0x18CAF: return Unicode_Category_LO;
		case 0x18CB0: return Unicode_Category_LO;
		case 0x18CB1: return Unicode_Category_LO;
		case 0x18CB2: return Unicode_Category_LO;
		case 0x18CB3: return Unicode_Category_LO;
		case 0x18CB4: return Unicode_Category_LO;
		case 0x18CB5: return Unicode_Category_LO;
		case 0x18CB6: return Unicode_Category_LO;
		case 0x18CB7: return Unicode_Category_LO;
		case 0x18CB8: return Unicode_Category_LO;
		case 0x18CB9: return Unicode_Category_LO;
		case 0x18CBA: return Unicode_Category_LO;
		case 0x18CBB: return Unicode_Category_LO;
		case 0x18CBC: return Unicode_Category_LO;
		case 0x18CBD: return Unicode_Category_LO;
		case 0x18CBE: return Unicode_Category_LO;
		case 0x18CBF: return Unicode_Category_LO;
		case 0x18CC0: return Unicode_Category_LO;
		case 0x18CC1: return Unicode_Category_LO;
		case 0x18CC2: return Unicode_Category_LO;
		case 0x18CC3: return Unicode_Category_LO;
		case 0x18CC4: return Unicode_Category_LO;
		case 0x18CC5: return Unicode_Category_LO;
		case 0x18CC6: return Unicode_Category_LO;
		case 0x18CC7: return Unicode_Category_LO;
		case 0x18CC8: return Unicode_Category_LO;
		case 0x18CC9: return Unicode_Category_LO;
		case 0x18CCA: return Unicode_Category_LO;
		case 0x18CCB: return Unicode_Category_LO;
		case 0x18CCC: return Unicode_Category_LO;
		case 0x18CCD: return Unicode_Category_LO;
		case 0x18CCE: return Unicode_Category_LO;
		case 0x18CCF: return Unicode_Category_LO;
		case 0x18CD0: return Unicode_Category_LO;
		case 0x18CD1: return Unicode_Category_LO;
		case 0x18CD2: return Unicode_Category_LO;
		case 0x18CD3: return Unicode_Category_LO;
		case 0x18CD4: return Unicode_Category_LO;
		case 0x18CD5: return Unicode_Category_LO;
		case 0x18D00: return Unicode_Category_LO;
		case 0x18D08: return Unicode_Category_LO;
		case 0x1B000: return Unicode_Category_LO;
		case 0x1B001: return Unicode_Category_LO;
		case 0x1B002: return Unicode_Category_LO;
		case 0x1B003: return Unicode_Category_LO;
		case 0x1B004: return Unicode_Category_LO;
		case 0x1B005: return Unicode_Category_LO;
		case 0x1B006: return Unicode_Category_LO;
		case 0x1B007: return Unicode_Category_LO;
		case 0x1B008: return Unicode_Category_LO;
		case 0x1B009: return Unicode_Category_LO;
		case 0x1B00A: return Unicode_Category_LO;
		case 0x1B00B: return Unicode_Category_LO;
		case 0x1B00C: return Unicode_Category_LO;
		case 0x1B00D: return Unicode_Category_LO;
		case 0x1B00E: return Unicode_Category_LO;
		case 0x1B00F: return Unicode_Category_LO;
		case 0x1B010: return Unicode_Category_LO;
		case 0x1B011: return Unicode_Category_LO;
		case 0x1B012: return Unicode_Category_LO;
		case 0x1B013: return Unicode_Category_LO;
		case 0x1B014: return Unicode_Category_LO;
		case 0x1B015: return Unicode_Category_LO;
		case 0x1B016: return Unicode_Category_LO;
		case 0x1B017: return Unicode_Category_LO;
		case 0x1B018: return Unicode_Category_LO;
		case 0x1B019: return Unicode_Category_LO;
		case 0x1B01A: return Unicode_Category_LO;
		case 0x1B01B: return Unicode_Category_LO;
		case 0x1B01C: return Unicode_Category_LO;
		case 0x1B01D: return Unicode_Category_LO;
		case 0x1B01E: return Unicode_Category_LO;
		case 0x1B01F: return Unicode_Category_LO;
		case 0x1B020: return Unicode_Category_LO;
		case 0x1B021: return Unicode_Category_LO;
		case 0x1B022: return Unicode_Category_LO;
		case 0x1B023: return Unicode_Category_LO;
		case 0x1B024: return Unicode_Category_LO;
		case 0x1B025: return Unicode_Category_LO;
		case 0x1B026: return Unicode_Category_LO;
		case 0x1B027: return Unicode_Category_LO;
		case 0x1B028: return Unicode_Category_LO;
		case 0x1B029: return Unicode_Category_LO;
		case 0x1B02A: return Unicode_Category_LO;
		case 0x1B02B: return Unicode_Category_LO;
		case 0x1B02C: return Unicode_Category_LO;
		case 0x1B02D: return Unicode_Category_LO;
		case 0x1B02E: return Unicode_Category_LO;
		case 0x1B02F: return Unicode_Category_LO;
		case 0x1B030: return Unicode_Category_LO;
		case 0x1B031: return Unicode_Category_LO;
		case 0x1B032: return Unicode_Category_LO;
		case 0x1B033: return Unicode_Category_LO;
		case 0x1B034: return Unicode_Category_LO;
		case 0x1B035: return Unicode_Category_LO;
		case 0x1B036: return Unicode_Category_LO;
		case 0x1B037: return Unicode_Category_LO;
		case 0x1B038: return Unicode_Category_LO;
		case 0x1B039: return Unicode_Category_LO;
		case 0x1B03A: return Unicode_Category_LO;
		case 0x1B03B: return Unicode_Category_LO;
		case 0x1B03C: return Unicode_Category_LO;
		case 0x1B03D: return Unicode_Category_LO;
		case 0x1B03E: return Unicode_Category_LO;
		case 0x1B03F: return Unicode_Category_LO;
		case 0x1B040: return Unicode_Category_LO;
		case 0x1B041: return Unicode_Category_LO;
		case 0x1B042: return Unicode_Category_LO;
		case 0x1B043: return Unicode_Category_LO;
		case 0x1B044: return Unicode_Category_LO;
		case 0x1B045: return Unicode_Category_LO;
		case 0x1B046: return Unicode_Category_LO;
		case 0x1B047: return Unicode_Category_LO;
		case 0x1B048: return Unicode_Category_LO;
		case 0x1B049: return Unicode_Category_LO;
		case 0x1B04A: return Unicode_Category_LO;
		case 0x1B04B: return Unicode_Category_LO;
		case 0x1B04C: return Unicode_Category_LO;
		case 0x1B04D: return Unicode_Category_LO;
		case 0x1B04E: return Unicode_Category_LO;
		case 0x1B04F: return Unicode_Category_LO;
		case 0x1B050: return Unicode_Category_LO;
		case 0x1B051: return Unicode_Category_LO;
		case 0x1B052: return Unicode_Category_LO;
		case 0x1B053: return Unicode_Category_LO;
		case 0x1B054: return Unicode_Category_LO;
		case 0x1B055: return Unicode_Category_LO;
		case 0x1B056: return Unicode_Category_LO;
		case 0x1B057: return Unicode_Category_LO;
		case 0x1B058: return Unicode_Category_LO;
		case 0x1B059: return Unicode_Category_LO;
		case 0x1B05A: return Unicode_Category_LO;
		case 0x1B05B: return Unicode_Category_LO;
		case 0x1B05C: return Unicode_Category_LO;
		case 0x1B05D: return Unicode_Category_LO;
		case 0x1B05E: return Unicode_Category_LO;
		case 0x1B05F: return Unicode_Category_LO;
		case 0x1B060: return Unicode_Category_LO;
		case 0x1B061: return Unicode_Category_LO;
		case 0x1B062: return Unicode_Category_LO;
		case 0x1B063: return Unicode_Category_LO;
		case 0x1B064: return Unicode_Category_LO;
		case 0x1B065: return Unicode_Category_LO;
		case 0x1B066: return Unicode_Category_LO;
		case 0x1B067: return Unicode_Category_LO;
		case 0x1B068: return Unicode_Category_LO;
		case 0x1B069: return Unicode_Category_LO;
		case 0x1B06A: return Unicode_Category_LO;
		case 0x1B06B: return Unicode_Category_LO;
		case 0x1B06C: return Unicode_Category_LO;
		case 0x1B06D: return Unicode_Category_LO;
		case 0x1B06E: return Unicode_Category_LO;
		case 0x1B06F: return Unicode_Category_LO;
		case 0x1B070: return Unicode_Category_LO;
		case 0x1B071: return Unicode_Category_LO;
		case 0x1B072: return Unicode_Category_LO;
		case 0x1B073: return Unicode_Category_LO;
		case 0x1B074: return Unicode_Category_LO;
		case 0x1B075: return Unicode_Category_LO;
		case 0x1B076: return Unicode_Category_LO;
		case 0x1B077: return Unicode_Category_LO;
		case 0x1B078: return Unicode_Category_LO;
		case 0x1B079: return Unicode_Category_LO;
		case 0x1B07A: return Unicode_Category_LO;
		case 0x1B07B: return Unicode_Category_LO;
		case 0x1B07C: return Unicode_Category_LO;
		case 0x1B07D: return Unicode_Category_LO;
		case 0x1B07E: return Unicode_Category_LO;
		case 0x1B07F: return Unicode_Category_LO;
		case 0x1B080: return Unicode_Category_LO;
		case 0x1B081: return Unicode_Category_LO;
		case 0x1B082: return Unicode_Category_LO;
		case 0x1B083: return Unicode_Category_LO;
		case 0x1B084: return Unicode_Category_LO;
		case 0x1B085: return Unicode_Category_LO;
		case 0x1B086: return Unicode_Category_LO;
		case 0x1B087: return Unicode_Category_LO;
		case 0x1B088: return Unicode_Category_LO;
		case 0x1B089: return Unicode_Category_LO;
		case 0x1B08A: return Unicode_Category_LO;
		case 0x1B08B: return Unicode_Category_LO;
		case 0x1B08C: return Unicode_Category_LO;
		case 0x1B08D: return Unicode_Category_LO;
		case 0x1B08E: return Unicode_Category_LO;
		case 0x1B08F: return Unicode_Category_LO;
		case 0x1B090: return Unicode_Category_LO;
		case 0x1B091: return Unicode_Category_LO;
		case 0x1B092: return Unicode_Category_LO;
		case 0x1B093: return Unicode_Category_LO;
		case 0x1B094: return Unicode_Category_LO;
		case 0x1B095: return Unicode_Category_LO;
		case 0x1B096: return Unicode_Category_LO;
		case 0x1B097: return Unicode_Category_LO;
		case 0x1B098: return Unicode_Category_LO;
		case 0x1B099: return Unicode_Category_LO;
		case 0x1B09A: return Unicode_Category_LO;
		case 0x1B09B: return Unicode_Category_LO;
		case 0x1B09C: return Unicode_Category_LO;
		case 0x1B09D: return Unicode_Category_LO;
		case 0x1B09E: return Unicode_Category_LO;
		case 0x1B09F: return Unicode_Category_LO;
		case 0x1B0A0: return Unicode_Category_LO;
		case 0x1B0A1: return Unicode_Category_LO;
		case 0x1B0A2: return Unicode_Category_LO;
		case 0x1B0A3: return Unicode_Category_LO;
		case 0x1B0A4: return Unicode_Category_LO;
		case 0x1B0A5: return Unicode_Category_LO;
		case 0x1B0A6: return Unicode_Category_LO;
		case 0x1B0A7: return Unicode_Category_LO;
		case 0x1B0A8: return Unicode_Category_LO;
		case 0x1B0A9: return Unicode_Category_LO;
		case 0x1B0AA: return Unicode_Category_LO;
		case 0x1B0AB: return Unicode_Category_LO;
		case 0x1B0AC: return Unicode_Category_LO;
		case 0x1B0AD: return Unicode_Category_LO;
		case 0x1B0AE: return Unicode_Category_LO;
		case 0x1B0AF: return Unicode_Category_LO;
		case 0x1B0B0: return Unicode_Category_LO;
		case 0x1B0B1: return Unicode_Category_LO;
		case 0x1B0B2: return Unicode_Category_LO;
		case 0x1B0B3: return Unicode_Category_LO;
		case 0x1B0B4: return Unicode_Category_LO;
		case 0x1B0B5: return Unicode_Category_LO;
		case 0x1B0B6: return Unicode_Category_LO;
		case 0x1B0B7: return Unicode_Category_LO;
		case 0x1B0B8: return Unicode_Category_LO;
		case 0x1B0B9: return Unicode_Category_LO;
		case 0x1B0BA: return Unicode_Category_LO;
		case 0x1B0BB: return Unicode_Category_LO;
		case 0x1B0BC: return Unicode_Category_LO;
		case 0x1B0BD: return Unicode_Category_LO;
		case 0x1B0BE: return Unicode_Category_LO;
		case 0x1B0BF: return Unicode_Category_LO;
		case 0x1B0C0: return Unicode_Category_LO;
		case 0x1B0C1: return Unicode_Category_LO;
		case 0x1B0C2: return Unicode_Category_LO;
		case 0x1B0C3: return Unicode_Category_LO;
		case 0x1B0C4: return Unicode_Category_LO;
		case 0x1B0C5: return Unicode_Category_LO;
		case 0x1B0C6: return Unicode_Category_LO;
		case 0x1B0C7: return Unicode_Category_LO;
		case 0x1B0C8: return Unicode_Category_LO;
		case 0x1B0C9: return Unicode_Category_LO;
		case 0x1B0CA: return Unicode_Category_LO;
		case 0x1B0CB: return Unicode_Category_LO;
		case 0x1B0CC: return Unicode_Category_LO;
		case 0x1B0CD: return Unicode_Category_LO;
		case 0x1B0CE: return Unicode_Category_LO;
		case 0x1B0CF: return Unicode_Category_LO;
		case 0x1B0D0: return Unicode_Category_LO;
		case 0x1B0D1: return Unicode_Category_LO;
		case 0x1B0D2: return Unicode_Category_LO;
		case 0x1B0D3: return Unicode_Category_LO;
		case 0x1B0D4: return Unicode_Category_LO;
		case 0x1B0D5: return Unicode_Category_LO;
		case 0x1B0D6: return Unicode_Category_LO;
		case 0x1B0D7: return Unicode_Category_LO;
		case 0x1B0D8: return Unicode_Category_LO;
		case 0x1B0D9: return Unicode_Category_LO;
		case 0x1B0DA: return Unicode_Category_LO;
		case 0x1B0DB: return Unicode_Category_LO;
		case 0x1B0DC: return Unicode_Category_LO;
		case 0x1B0DD: return Unicode_Category_LO;
		case 0x1B0DE: return Unicode_Category_LO;
		case 0x1B0DF: return Unicode_Category_LO;
		case 0x1B0E0: return Unicode_Category_LO;
		case 0x1B0E1: return Unicode_Category_LO;
		case 0x1B0E2: return Unicode_Category_LO;
		case 0x1B0E3: return Unicode_Category_LO;
		case 0x1B0E4: return Unicode_Category_LO;
		case 0x1B0E5: return Unicode_Category_LO;
		case 0x1B0E6: return Unicode_Category_LO;
		case 0x1B0E7: return Unicode_Category_LO;
		case 0x1B0E8: return Unicode_Category_LO;
		case 0x1B0E9: return Unicode_Category_LO;
		case 0x1B0EA: return Unicode_Category_LO;
		case 0x1B0EB: return Unicode_Category_LO;
		case 0x1B0EC: return Unicode_Category_LO;
		case 0x1B0ED: return Unicode_Category_LO;
		case 0x1B0EE: return Unicode_Category_LO;
		case 0x1B0EF: return Unicode_Category_LO;
		case 0x1B0F0: return Unicode_Category_LO;
		case 0x1B0F1: return Unicode_Category_LO;
		case 0x1B0F2: return Unicode_Category_LO;
		case 0x1B0F3: return Unicode_Category_LO;
		case 0x1B0F4: return Unicode_Category_LO;
		case 0x1B0F5: return Unicode_Category_LO;
		case 0x1B0F6: return Unicode_Category_LO;
		case 0x1B0F7: return Unicode_Category_LO;
		case 0x1B0F8: return Unicode_Category_LO;
		case 0x1B0F9: return Unicode_Category_LO;
		case 0x1B0FA: return Unicode_Category_LO;
		case 0x1B0FB: return Unicode_Category_LO;
		case 0x1B0FC: return Unicode_Category_LO;
		case 0x1B0FD: return Unicode_Category_LO;
		case 0x1B0FE: return Unicode_Category_LO;
		case 0x1B0FF: return Unicode_Category_LO;
		case 0x1B100: return Unicode_Category_LO;
		case 0x1B101: return Unicode_Category_LO;
		case 0x1B102: return Unicode_Category_LO;
		case 0x1B103: return Unicode_Category_LO;
		case 0x1B104: return Unicode_Category_LO;
		case 0x1B105: return Unicode_Category_LO;
		case 0x1B106: return Unicode_Category_LO;
		case 0x1B107: return Unicode_Category_LO;
		case 0x1B108: return Unicode_Category_LO;
		case 0x1B109: return Unicode_Category_LO;
		case 0x1B10A: return Unicode_Category_LO;
		case 0x1B10B: return Unicode_Category_LO;
		case 0x1B10C: return Unicode_Category_LO;
		case 0x1B10D: return Unicode_Category_LO;
		case 0x1B10E: return Unicode_Category_LO;
		case 0x1B10F: return Unicode_Category_LO;
		case 0x1B110: return Unicode_Category_LO;
		case 0x1B111: return Unicode_Category_LO;
		case 0x1B112: return Unicode_Category_LO;
		case 0x1B113: return Unicode_Category_LO;
		case 0x1B114: return Unicode_Category_LO;
		case 0x1B115: return Unicode_Category_LO;
		case 0x1B116: return Unicode_Category_LO;
		case 0x1B117: return Unicode_Category_LO;
		case 0x1B118: return Unicode_Category_LO;
		case 0x1B119: return Unicode_Category_LO;
		case 0x1B11A: return Unicode_Category_LO;
		case 0x1B11B: return Unicode_Category_LO;
		case 0x1B11C: return Unicode_Category_LO;
		case 0x1B11D: return Unicode_Category_LO;
		case 0x1B11E: return Unicode_Category_LO;
		case 0x1B150: return Unicode_Category_LO;
		case 0x1B151: return Unicode_Category_LO;
		case 0x1B152: return Unicode_Category_LO;
		case 0x1B164: return Unicode_Category_LO;
		case 0x1B165: return Unicode_Category_LO;
		case 0x1B166: return Unicode_Category_LO;
		case 0x1B167: return Unicode_Category_LO;
		case 0x1B170: return Unicode_Category_LO;
		case 0x1B171: return Unicode_Category_LO;
		case 0x1B172: return Unicode_Category_LO;
		case 0x1B173: return Unicode_Category_LO;
		case 0x1B174: return Unicode_Category_LO;
		case 0x1B175: return Unicode_Category_LO;
		case 0x1B176: return Unicode_Category_LO;
		case 0x1B177: return Unicode_Category_LO;
		case 0x1B178: return Unicode_Category_LO;
		case 0x1B179: return Unicode_Category_LO;
		case 0x1B17A: return Unicode_Category_LO;
		case 0x1B17B: return Unicode_Category_LO;
		case 0x1B17C: return Unicode_Category_LO;
		case 0x1B17D: return Unicode_Category_LO;
		case 0x1B17E: return Unicode_Category_LO;
		case 0x1B17F: return Unicode_Category_LO;
		case 0x1B180: return Unicode_Category_LO;
		case 0x1B181: return Unicode_Category_LO;
		case 0x1B182: return Unicode_Category_LO;
		case 0x1B183: return Unicode_Category_LO;
		case 0x1B184: return Unicode_Category_LO;
		case 0x1B185: return Unicode_Category_LO;
		case 0x1B186: return Unicode_Category_LO;
		case 0x1B187: return Unicode_Category_LO;
		case 0x1B188: return Unicode_Category_LO;
		case 0x1B189: return Unicode_Category_LO;
		case 0x1B18A: return Unicode_Category_LO;
		case 0x1B18B: return Unicode_Category_LO;
		case 0x1B18C: return Unicode_Category_LO;
		case 0x1B18D: return Unicode_Category_LO;
		case 0x1B18E: return Unicode_Category_LO;
		case 0x1B18F: return Unicode_Category_LO;
		case 0x1B190: return Unicode_Category_LO;
		case 0x1B191: return Unicode_Category_LO;
		case 0x1B192: return Unicode_Category_LO;
		case 0x1B193: return Unicode_Category_LO;
		case 0x1B194: return Unicode_Category_LO;
		case 0x1B195: return Unicode_Category_LO;
		case 0x1B196: return Unicode_Category_LO;
		case 0x1B197: return Unicode_Category_LO;
		case 0x1B198: return Unicode_Category_LO;
		case 0x1B199: return Unicode_Category_LO;
		case 0x1B19A: return Unicode_Category_LO;
		case 0x1B19B: return Unicode_Category_LO;
		case 0x1B19C: return Unicode_Category_LO;
		case 0x1B19D: return Unicode_Category_LO;
		case 0x1B19E: return Unicode_Category_LO;
		case 0x1B19F: return Unicode_Category_LO;
		case 0x1B1A0: return Unicode_Category_LO;
		case 0x1B1A1: return Unicode_Category_LO;
		case 0x1B1A2: return Unicode_Category_LO;
		case 0x1B1A3: return Unicode_Category_LO;
		case 0x1B1A4: return Unicode_Category_LO;
		case 0x1B1A5: return Unicode_Category_LO;
		case 0x1B1A6: return Unicode_Category_LO;
		case 0x1B1A7: return Unicode_Category_LO;
		case 0x1B1A8: return Unicode_Category_LO;
		case 0x1B1A9: return Unicode_Category_LO;
		case 0x1B1AA: return Unicode_Category_LO;
		case 0x1B1AB: return Unicode_Category_LO;
		case 0x1B1AC: return Unicode_Category_LO;
		case 0x1B1AD: return Unicode_Category_LO;
		case 0x1B1AE: return Unicode_Category_LO;
		case 0x1B1AF: return Unicode_Category_LO;
		case 0x1B1B0: return Unicode_Category_LO;
		case 0x1B1B1: return Unicode_Category_LO;
		case 0x1B1B2: return Unicode_Category_LO;
		case 0x1B1B3: return Unicode_Category_LO;
		case 0x1B1B4: return Unicode_Category_LO;
		case 0x1B1B5: return Unicode_Category_LO;
		case 0x1B1B6: return Unicode_Category_LO;
		case 0x1B1B7: return Unicode_Category_LO;
		case 0x1B1B8: return Unicode_Category_LO;
		case 0x1B1B9: return Unicode_Category_LO;
		case 0x1B1BA: return Unicode_Category_LO;
		case 0x1B1BB: return Unicode_Category_LO;
		case 0x1B1BC: return Unicode_Category_LO;
		case 0x1B1BD: return Unicode_Category_LO;
		case 0x1B1BE: return Unicode_Category_LO;
		case 0x1B1BF: return Unicode_Category_LO;
		case 0x1B1C0: return Unicode_Category_LO;
		case 0x1B1C1: return Unicode_Category_LO;
		case 0x1B1C2: return Unicode_Category_LO;
		case 0x1B1C3: return Unicode_Category_LO;
		case 0x1B1C4: return Unicode_Category_LO;
		case 0x1B1C5: return Unicode_Category_LO;
		case 0x1B1C6: return Unicode_Category_LO;
		case 0x1B1C7: return Unicode_Category_LO;
		case 0x1B1C8: return Unicode_Category_LO;
		case 0x1B1C9: return Unicode_Category_LO;
		case 0x1B1CA: return Unicode_Category_LO;
		case 0x1B1CB: return Unicode_Category_LO;
		case 0x1B1CC: return Unicode_Category_LO;
		case 0x1B1CD: return Unicode_Category_LO;
		case 0x1B1CE: return Unicode_Category_LO;
		case 0x1B1CF: return Unicode_Category_LO;
		case 0x1B1D0: return Unicode_Category_LO;
		case 0x1B1D1: return Unicode_Category_LO;
		case 0x1B1D2: return Unicode_Category_LO;
		case 0x1B1D3: return Unicode_Category_LO;
		case 0x1B1D4: return Unicode_Category_LO;
		case 0x1B1D5: return Unicode_Category_LO;
		case 0x1B1D6: return Unicode_Category_LO;
		case 0x1B1D7: return Unicode_Category_LO;
		case 0x1B1D8: return Unicode_Category_LO;
		case 0x1B1D9: return Unicode_Category_LO;
		case 0x1B1DA: return Unicode_Category_LO;
		case 0x1B1DB: return Unicode_Category_LO;
		case 0x1B1DC: return Unicode_Category_LO;
		case 0x1B1DD: return Unicode_Category_LO;
		case 0x1B1DE: return Unicode_Category_LO;
		case 0x1B1DF: return Unicode_Category_LO;
		case 0x1B1E0: return Unicode_Category_LO;
		case 0x1B1E1: return Unicode_Category_LO;
		case 0x1B1E2: return Unicode_Category_LO;
		case 0x1B1E3: return Unicode_Category_LO;
		case 0x1B1E4: return Unicode_Category_LO;
		case 0x1B1E5: return Unicode_Category_LO;
		case 0x1B1E6: return Unicode_Category_LO;
		case 0x1B1E7: return Unicode_Category_LO;
		case 0x1B1E8: return Unicode_Category_LO;
		case 0x1B1E9: return Unicode_Category_LO;
		case 0x1B1EA: return Unicode_Category_LO;
		case 0x1B1EB: return Unicode_Category_LO;
		case 0x1B1EC: return Unicode_Category_LO;
		case 0x1B1ED: return Unicode_Category_LO;
		case 0x1B1EE: return Unicode_Category_LO;
		case 0x1B1EF: return Unicode_Category_LO;
		case 0x1B1F0: return Unicode_Category_LO;
		case 0x1B1F1: return Unicode_Category_LO;
		case 0x1B1F2: return Unicode_Category_LO;
		case 0x1B1F3: return Unicode_Category_LO;
		case 0x1B1F4: return Unicode_Category_LO;
		case 0x1B1F5: return Unicode_Category_LO;
		case 0x1B1F6: return Unicode_Category_LO;
		case 0x1B1F7: return Unicode_Category_LO;
		case 0x1B1F8: return Unicode_Category_LO;
		case 0x1B1F9: return Unicode_Category_LO;
		case 0x1B1FA: return Unicode_Category_LO;
		case 0x1B1FB: return Unicode_Category_LO;
		case 0x1B1FC: return Unicode_Category_LO;
		case 0x1B1FD: return Unicode_Category_LO;
		case 0x1B1FE: return Unicode_Category_LO;
		case 0x1B1FF: return Unicode_Category_LO;
		case 0x1B200: return Unicode_Category_LO;
		case 0x1B201: return Unicode_Category_LO;
		case 0x1B202: return Unicode_Category_LO;
		case 0x1B203: return Unicode_Category_LO;
		case 0x1B204: return Unicode_Category_LO;
		case 0x1B205: return Unicode_Category_LO;
		case 0x1B206: return Unicode_Category_LO;
		case 0x1B207: return Unicode_Category_LO;
		case 0x1B208: return Unicode_Category_LO;
		case 0x1B209: return Unicode_Category_LO;
		case 0x1B20A: return Unicode_Category_LO;
		case 0x1B20B: return Unicode_Category_LO;
		case 0x1B20C: return Unicode_Category_LO;
		case 0x1B20D: return Unicode_Category_LO;
		case 0x1B20E: return Unicode_Category_LO;
		case 0x1B20F: return Unicode_Category_LO;
		case 0x1B210: return Unicode_Category_LO;
		case 0x1B211: return Unicode_Category_LO;
		case 0x1B212: return Unicode_Category_LO;
		case 0x1B213: return Unicode_Category_LO;
		case 0x1B214: return Unicode_Category_LO;
		case 0x1B215: return Unicode_Category_LO;
		case 0x1B216: return Unicode_Category_LO;
		case 0x1B217: return Unicode_Category_LO;
		case 0x1B218: return Unicode_Category_LO;
		case 0x1B219: return Unicode_Category_LO;
		case 0x1B21A: return Unicode_Category_LO;
		case 0x1B21B: return Unicode_Category_LO;
		case 0x1B21C: return Unicode_Category_LO;
		case 0x1B21D: return Unicode_Category_LO;
		case 0x1B21E: return Unicode_Category_LO;
		case 0x1B21F: return Unicode_Category_LO;
		case 0x1B220: return Unicode_Category_LO;
		case 0x1B221: return Unicode_Category_LO;
		case 0x1B222: return Unicode_Category_LO;
		case 0x1B223: return Unicode_Category_LO;
		case 0x1B224: return Unicode_Category_LO;
		case 0x1B225: return Unicode_Category_LO;
		case 0x1B226: return Unicode_Category_LO;
		case 0x1B227: return Unicode_Category_LO;
		case 0x1B228: return Unicode_Category_LO;
		case 0x1B229: return Unicode_Category_LO;
		case 0x1B22A: return Unicode_Category_LO;
		case 0x1B22B: return Unicode_Category_LO;
		case 0x1B22C: return Unicode_Category_LO;
		case 0x1B22D: return Unicode_Category_LO;
		case 0x1B22E: return Unicode_Category_LO;
		case 0x1B22F: return Unicode_Category_LO;
		case 0x1B230: return Unicode_Category_LO;
		case 0x1B231: return Unicode_Category_LO;
		case 0x1B232: return Unicode_Category_LO;
		case 0x1B233: return Unicode_Category_LO;
		case 0x1B234: return Unicode_Category_LO;
		case 0x1B235: return Unicode_Category_LO;
		case 0x1B236: return Unicode_Category_LO;
		case 0x1B237: return Unicode_Category_LO;
		case 0x1B238: return Unicode_Category_LO;
		case 0x1B239: return Unicode_Category_LO;
		case 0x1B23A: return Unicode_Category_LO;
		case 0x1B23B: return Unicode_Category_LO;
		case 0x1B23C: return Unicode_Category_LO;
		case 0x1B23D: return Unicode_Category_LO;
		case 0x1B23E: return Unicode_Category_LO;
		case 0x1B23F: return Unicode_Category_LO;
		case 0x1B240: return Unicode_Category_LO;
		case 0x1B241: return Unicode_Category_LO;
		case 0x1B242: return Unicode_Category_LO;
		case 0x1B243: return Unicode_Category_LO;
		case 0x1B244: return Unicode_Category_LO;
		case 0x1B245: return Unicode_Category_LO;
		case 0x1B246: return Unicode_Category_LO;
		case 0x1B247: return Unicode_Category_LO;
		case 0x1B248: return Unicode_Category_LO;
		case 0x1B249: return Unicode_Category_LO;
		case 0x1B24A: return Unicode_Category_LO;
		case 0x1B24B: return Unicode_Category_LO;
		case 0x1B24C: return Unicode_Category_LO;
		case 0x1B24D: return Unicode_Category_LO;
		case 0x1B24E: return Unicode_Category_LO;
		case 0x1B24F: return Unicode_Category_LO;
		case 0x1B250: return Unicode_Category_LO;
		case 0x1B251: return Unicode_Category_LO;
		case 0x1B252: return Unicode_Category_LO;
		case 0x1B253: return Unicode_Category_LO;
		case 0x1B254: return Unicode_Category_LO;
		case 0x1B255: return Unicode_Category_LO;
		case 0x1B256: return Unicode_Category_LO;
		case 0x1B257: return Unicode_Category_LO;
		case 0x1B258: return Unicode_Category_LO;
		case 0x1B259: return Unicode_Category_LO;
		case 0x1B25A: return Unicode_Category_LO;
		case 0x1B25B: return Unicode_Category_LO;
		case 0x1B25C: return Unicode_Category_LO;
		case 0x1B25D: return Unicode_Category_LO;
		case 0x1B25E: return Unicode_Category_LO;
		case 0x1B25F: return Unicode_Category_LO;
		case 0x1B260: return Unicode_Category_LO;
		case 0x1B261: return Unicode_Category_LO;
		case 0x1B262: return Unicode_Category_LO;
		case 0x1B263: return Unicode_Category_LO;
		case 0x1B264: return Unicode_Category_LO;
		case 0x1B265: return Unicode_Category_LO;
		case 0x1B266: return Unicode_Category_LO;
		case 0x1B267: return Unicode_Category_LO;
		case 0x1B268: return Unicode_Category_LO;
		case 0x1B269: return Unicode_Category_LO;
		case 0x1B26A: return Unicode_Category_LO;
		case 0x1B26B: return Unicode_Category_LO;
		case 0x1B26C: return Unicode_Category_LO;
		case 0x1B26D: return Unicode_Category_LO;
		case 0x1B26E: return Unicode_Category_LO;
		case 0x1B26F: return Unicode_Category_LO;
		case 0x1B270: return Unicode_Category_LO;
		case 0x1B271: return Unicode_Category_LO;
		case 0x1B272: return Unicode_Category_LO;
		case 0x1B273: return Unicode_Category_LO;
		case 0x1B274: return Unicode_Category_LO;
		case 0x1B275: return Unicode_Category_LO;
		case 0x1B276: return Unicode_Category_LO;
		case 0x1B277: return Unicode_Category_LO;
		case 0x1B278: return Unicode_Category_LO;
		case 0x1B279: return Unicode_Category_LO;
		case 0x1B27A: return Unicode_Category_LO;
		case 0x1B27B: return Unicode_Category_LO;
		case 0x1B27C: return Unicode_Category_LO;
		case 0x1B27D: return Unicode_Category_LO;
		case 0x1B27E: return Unicode_Category_LO;
		case 0x1B27F: return Unicode_Category_LO;
		case 0x1B280: return Unicode_Category_LO;
		case 0x1B281: return Unicode_Category_LO;
		case 0x1B282: return Unicode_Category_LO;
		case 0x1B283: return Unicode_Category_LO;
		case 0x1B284: return Unicode_Category_LO;
		case 0x1B285: return Unicode_Category_LO;
		case 0x1B286: return Unicode_Category_LO;
		case 0x1B287: return Unicode_Category_LO;
		case 0x1B288: return Unicode_Category_LO;
		case 0x1B289: return Unicode_Category_LO;
		case 0x1B28A: return Unicode_Category_LO;
		case 0x1B28B: return Unicode_Category_LO;
		case 0x1B28C: return Unicode_Category_LO;
		case 0x1B28D: return Unicode_Category_LO;
		case 0x1B28E: return Unicode_Category_LO;
		case 0x1B28F: return Unicode_Category_LO;
		case 0x1B290: return Unicode_Category_LO;
		case 0x1B291: return Unicode_Category_LO;
		case 0x1B292: return Unicode_Category_LO;
		case 0x1B293: return Unicode_Category_LO;
		case 0x1B294: return Unicode_Category_LO;
		case 0x1B295: return Unicode_Category_LO;
		case 0x1B296: return Unicode_Category_LO;
		case 0x1B297: return Unicode_Category_LO;
		case 0x1B298: return Unicode_Category_LO;
		case 0x1B299: return Unicode_Category_LO;
		case 0x1B29A: return Unicode_Category_LO;
		case 0x1B29B: return Unicode_Category_LO;
		case 0x1B29C: return Unicode_Category_LO;
		case 0x1B29D: return Unicode_Category_LO;
		case 0x1B29E: return Unicode_Category_LO;
		case 0x1B29F: return Unicode_Category_LO;
		case 0x1B2A0: return Unicode_Category_LO;
		case 0x1B2A1: return Unicode_Category_LO;
		case 0x1B2A2: return Unicode_Category_LO;
		case 0x1B2A3: return Unicode_Category_LO;
		case 0x1B2A4: return Unicode_Category_LO;
		case 0x1B2A5: return Unicode_Category_LO;
		case 0x1B2A6: return Unicode_Category_LO;
		case 0x1B2A7: return Unicode_Category_LO;
		case 0x1B2A8: return Unicode_Category_LO;
		case 0x1B2A9: return Unicode_Category_LO;
		case 0x1B2AA: return Unicode_Category_LO;
		case 0x1B2AB: return Unicode_Category_LO;
		case 0x1B2AC: return Unicode_Category_LO;
		case 0x1B2AD: return Unicode_Category_LO;
		case 0x1B2AE: return Unicode_Category_LO;
		case 0x1B2AF: return Unicode_Category_LO;
		case 0x1B2B0: return Unicode_Category_LO;
		case 0x1B2B1: return Unicode_Category_LO;
		case 0x1B2B2: return Unicode_Category_LO;
		case 0x1B2B3: return Unicode_Category_LO;
		case 0x1B2B4: return Unicode_Category_LO;
		case 0x1B2B5: return Unicode_Category_LO;
		case 0x1B2B6: return Unicode_Category_LO;
		case 0x1B2B7: return Unicode_Category_LO;
		case 0x1B2B8: return Unicode_Category_LO;
		case 0x1B2B9: return Unicode_Category_LO;
		case 0x1B2BA: return Unicode_Category_LO;
		case 0x1B2BB: return Unicode_Category_LO;
		case 0x1B2BC: return Unicode_Category_LO;
		case 0x1B2BD: return Unicode_Category_LO;
		case 0x1B2BE: return Unicode_Category_LO;
		case 0x1B2BF: return Unicode_Category_LO;
		case 0x1B2C0: return Unicode_Category_LO;
		case 0x1B2C1: return Unicode_Category_LO;
		case 0x1B2C2: return Unicode_Category_LO;
		case 0x1B2C3: return Unicode_Category_LO;
		case 0x1B2C4: return Unicode_Category_LO;
		case 0x1B2C5: return Unicode_Category_LO;
		case 0x1B2C6: return Unicode_Category_LO;
		case 0x1B2C7: return Unicode_Category_LO;
		case 0x1B2C8: return Unicode_Category_LO;
		case 0x1B2C9: return Unicode_Category_LO;
		case 0x1B2CA: return Unicode_Category_LO;
		case 0x1B2CB: return Unicode_Category_LO;
		case 0x1B2CC: return Unicode_Category_LO;
		case 0x1B2CD: return Unicode_Category_LO;
		case 0x1B2CE: return Unicode_Category_LO;
		case 0x1B2CF: return Unicode_Category_LO;
		case 0x1B2D0: return Unicode_Category_LO;
		case 0x1B2D1: return Unicode_Category_LO;
		case 0x1B2D2: return Unicode_Category_LO;
		case 0x1B2D3: return Unicode_Category_LO;
		case 0x1B2D4: return Unicode_Category_LO;
		case 0x1B2D5: return Unicode_Category_LO;
		case 0x1B2D6: return Unicode_Category_LO;
		case 0x1B2D7: return Unicode_Category_LO;
		case 0x1B2D8: return Unicode_Category_LO;
		case 0x1B2D9: return Unicode_Category_LO;
		case 0x1B2DA: return Unicode_Category_LO;
		case 0x1B2DB: return Unicode_Category_LO;
		case 0x1B2DC: return Unicode_Category_LO;
		case 0x1B2DD: return Unicode_Category_LO;
		case 0x1B2DE: return Unicode_Category_LO;
		case 0x1B2DF: return Unicode_Category_LO;
		case 0x1B2E0: return Unicode_Category_LO;
		case 0x1B2E1: return Unicode_Category_LO;
		case 0x1B2E2: return Unicode_Category_LO;
		case 0x1B2E3: return Unicode_Category_LO;
		case 0x1B2E4: return Unicode_Category_LO;
		case 0x1B2E5: return Unicode_Category_LO;
		case 0x1B2E6: return Unicode_Category_LO;
		case 0x1B2E7: return Unicode_Category_LO;
		case 0x1B2E8: return Unicode_Category_LO;
		case 0x1B2E9: return Unicode_Category_LO;
		case 0x1B2EA: return Unicode_Category_LO;
		case 0x1B2EB: return Unicode_Category_LO;
		case 0x1B2EC: return Unicode_Category_LO;
		case 0x1B2ED: return Unicode_Category_LO;
		case 0x1B2EE: return Unicode_Category_LO;
		case 0x1B2EF: return Unicode_Category_LO;
		case 0x1B2F0: return Unicode_Category_LO;
		case 0x1B2F1: return Unicode_Category_LO;
		case 0x1B2F2: return Unicode_Category_LO;
		case 0x1B2F3: return Unicode_Category_LO;
		case 0x1B2F4: return Unicode_Category_LO;
		case 0x1B2F5: return Unicode_Category_LO;
		case 0x1B2F6: return Unicode_Category_LO;
		case 0x1B2F7: return Unicode_Category_LO;
		case 0x1B2F8: return Unicode_Category_LO;
		case 0x1B2F9: return Unicode_Category_LO;
		case 0x1B2FA: return Unicode_Category_LO;
		case 0x1B2FB: return Unicode_Category_LO;
		case 0x1BC00: return Unicode_Category_LO;
		case 0x1BC01: return Unicode_Category_LO;
		case 0x1BC02: return Unicode_Category_LO;
		case 0x1BC03: return Unicode_Category_LO;
		case 0x1BC04: return Unicode_Category_LO;
		case 0x1BC05: return Unicode_Category_LO;
		case 0x1BC06: return Unicode_Category_LO;
		case 0x1BC07: return Unicode_Category_LO;
		case 0x1BC08: return Unicode_Category_LO;
		case 0x1BC09: return Unicode_Category_LO;
		case 0x1BC0A: return Unicode_Category_LO;
		case 0x1BC0B: return Unicode_Category_LO;
		case 0x1BC0C: return Unicode_Category_LO;
		case 0x1BC0D: return Unicode_Category_LO;
		case 0x1BC0E: return Unicode_Category_LO;
		case 0x1BC0F: return Unicode_Category_LO;
		case 0x1BC10: return Unicode_Category_LO;
		case 0x1BC11: return Unicode_Category_LO;
		case 0x1BC12: return Unicode_Category_LO;
		case 0x1BC13: return Unicode_Category_LO;
		case 0x1BC14: return Unicode_Category_LO;
		case 0x1BC15: return Unicode_Category_LO;
		case 0x1BC16: return Unicode_Category_LO;
		case 0x1BC17: return Unicode_Category_LO;
		case 0x1BC18: return Unicode_Category_LO;
		case 0x1BC19: return Unicode_Category_LO;
		case 0x1BC1A: return Unicode_Category_LO;
		case 0x1BC1B: return Unicode_Category_LO;
		case 0x1BC1C: return Unicode_Category_LO;
		case 0x1BC1D: return Unicode_Category_LO;
		case 0x1BC1E: return Unicode_Category_LO;
		case 0x1BC1F: return Unicode_Category_LO;
		case 0x1BC20: return Unicode_Category_LO;
		case 0x1BC21: return Unicode_Category_LO;
		case 0x1BC22: return Unicode_Category_LO;
		case 0x1BC23: return Unicode_Category_LO;
		case 0x1BC24: return Unicode_Category_LO;
		case 0x1BC25: return Unicode_Category_LO;
		case 0x1BC26: return Unicode_Category_LO;
		case 0x1BC27: return Unicode_Category_LO;
		case 0x1BC28: return Unicode_Category_LO;
		case 0x1BC29: return Unicode_Category_LO;
		case 0x1BC2A: return Unicode_Category_LO;
		case 0x1BC2B: return Unicode_Category_LO;
		case 0x1BC2C: return Unicode_Category_LO;
		case 0x1BC2D: return Unicode_Category_LO;
		case 0x1BC2E: return Unicode_Category_LO;
		case 0x1BC2F: return Unicode_Category_LO;
		case 0x1BC30: return Unicode_Category_LO;
		case 0x1BC31: return Unicode_Category_LO;
		case 0x1BC32: return Unicode_Category_LO;
		case 0x1BC33: return Unicode_Category_LO;
		case 0x1BC34: return Unicode_Category_LO;
		case 0x1BC35: return Unicode_Category_LO;
		case 0x1BC36: return Unicode_Category_LO;
		case 0x1BC37: return Unicode_Category_LO;
		case 0x1BC38: return Unicode_Category_LO;
		case 0x1BC39: return Unicode_Category_LO;
		case 0x1BC3A: return Unicode_Category_LO;
		case 0x1BC3B: return Unicode_Category_LO;
		case 0x1BC3C: return Unicode_Category_LO;
		case 0x1BC3D: return Unicode_Category_LO;
		case 0x1BC3E: return Unicode_Category_LO;
		case 0x1BC3F: return Unicode_Category_LO;
		case 0x1BC40: return Unicode_Category_LO;
		case 0x1BC41: return Unicode_Category_LO;
		case 0x1BC42: return Unicode_Category_LO;
		case 0x1BC43: return Unicode_Category_LO;
		case 0x1BC44: return Unicode_Category_LO;
		case 0x1BC45: return Unicode_Category_LO;
		case 0x1BC46: return Unicode_Category_LO;
		case 0x1BC47: return Unicode_Category_LO;
		case 0x1BC48: return Unicode_Category_LO;
		case 0x1BC49: return Unicode_Category_LO;
		case 0x1BC4A: return Unicode_Category_LO;
		case 0x1BC4B: return Unicode_Category_LO;
		case 0x1BC4C: return Unicode_Category_LO;
		case 0x1BC4D: return Unicode_Category_LO;
		case 0x1BC4E: return Unicode_Category_LO;
		case 0x1BC4F: return Unicode_Category_LO;
		case 0x1BC50: return Unicode_Category_LO;
		case 0x1BC51: return Unicode_Category_LO;
		case 0x1BC52: return Unicode_Category_LO;
		case 0x1BC53: return Unicode_Category_LO;
		case 0x1BC54: return Unicode_Category_LO;
		case 0x1BC55: return Unicode_Category_LO;
		case 0x1BC56: return Unicode_Category_LO;
		case 0x1BC57: return Unicode_Category_LO;
		case 0x1BC58: return Unicode_Category_LO;
		case 0x1BC59: return Unicode_Category_LO;
		case 0x1BC5A: return Unicode_Category_LO;
		case 0x1BC5B: return Unicode_Category_LO;
		case 0x1BC5C: return Unicode_Category_LO;
		case 0x1BC5D: return Unicode_Category_LO;
		case 0x1BC5E: return Unicode_Category_LO;
		case 0x1BC5F: return Unicode_Category_LO;
		case 0x1BC60: return Unicode_Category_LO;
		case 0x1BC61: return Unicode_Category_LO;
		case 0x1BC62: return Unicode_Category_LO;
		case 0x1BC63: return Unicode_Category_LO;
		case 0x1BC64: return Unicode_Category_LO;
		case 0x1BC65: return Unicode_Category_LO;
		case 0x1BC66: return Unicode_Category_LO;
		case 0x1BC67: return Unicode_Category_LO;
		case 0x1BC68: return Unicode_Category_LO;
		case 0x1BC69: return Unicode_Category_LO;
		case 0x1BC6A: return Unicode_Category_LO;
		case 0x1BC70: return Unicode_Category_LO;
		case 0x1BC71: return Unicode_Category_LO;
		case 0x1BC72: return Unicode_Category_LO;
		case 0x1BC73: return Unicode_Category_LO;
		case 0x1BC74: return Unicode_Category_LO;
		case 0x1BC75: return Unicode_Category_LO;
		case 0x1BC76: return Unicode_Category_LO;
		case 0x1BC77: return Unicode_Category_LO;
		case 0x1BC78: return Unicode_Category_LO;
		case 0x1BC79: return Unicode_Category_LO;
		case 0x1BC7A: return Unicode_Category_LO;
		case 0x1BC7B: return Unicode_Category_LO;
		case 0x1BC7C: return Unicode_Category_LO;
		case 0x1BC80: return Unicode_Category_LO;
		case 0x1BC81: return Unicode_Category_LO;
		case 0x1BC82: return Unicode_Category_LO;
		case 0x1BC83: return Unicode_Category_LO;
		case 0x1BC84: return Unicode_Category_LO;
		case 0x1BC85: return Unicode_Category_LO;
		case 0x1BC86: return Unicode_Category_LO;
		case 0x1BC87: return Unicode_Category_LO;
		case 0x1BC88: return Unicode_Category_LO;
		case 0x1BC90: return Unicode_Category_LO;
		case 0x1BC91: return Unicode_Category_LO;
		case 0x1BC92: return Unicode_Category_LO;
		case 0x1BC93: return Unicode_Category_LO;
		case 0x1BC94: return Unicode_Category_LO;
		case 0x1BC95: return Unicode_Category_LO;
		case 0x1BC96: return Unicode_Category_LO;
		case 0x1BC97: return Unicode_Category_LO;
		case 0x1BC98: return Unicode_Category_LO;
		case 0x1BC99: return Unicode_Category_LO;
		case 0x1BC9C: return Unicode_Category_SO;
		case 0x1BC9D: return Unicode_Category_MN;
		case 0x1BC9E: return Unicode_Category_MN;
		case 0x1BC9F: return Unicode_Category_PO;
		case 0x1BCA0: return Unicode_Category_CF;
		case 0x1BCA1: return Unicode_Category_CF;
		case 0x1BCA2: return Unicode_Category_CF;
		case 0x1BCA3: return Unicode_Category_CF;
		case 0x1D000: return Unicode_Category_SO;
		case 0x1D001: return Unicode_Category_SO;
		case 0x1D002: return Unicode_Category_SO;
		case 0x1D003: return Unicode_Category_SO;
		case 0x1D004: return Unicode_Category_SO;
		case 0x1D005: return Unicode_Category_SO;
		case 0x1D006: return Unicode_Category_SO;
		case 0x1D007: return Unicode_Category_SO;
		case 0x1D008: return Unicode_Category_SO;
		case 0x1D009: return Unicode_Category_SO;
		case 0x1D00A: return Unicode_Category_SO;
		case 0x1D00B: return Unicode_Category_SO;
		case 0x1D00C: return Unicode_Category_SO;
		case 0x1D00D: return Unicode_Category_SO;
		case 0x1D00E: return Unicode_Category_SO;
		case 0x1D00F: return Unicode_Category_SO;
		case 0x1D010: return Unicode_Category_SO;
		case 0x1D011: return Unicode_Category_SO;
		case 0x1D012: return Unicode_Category_SO;
		case 0x1D013: return Unicode_Category_SO;
		case 0x1D014: return Unicode_Category_SO;
		case 0x1D015: return Unicode_Category_SO;
		case 0x1D016: return Unicode_Category_SO;
		case 0x1D017: return Unicode_Category_SO;
		case 0x1D018: return Unicode_Category_SO;
		case 0x1D019: return Unicode_Category_SO;
		case 0x1D01A: return Unicode_Category_SO;
		case 0x1D01B: return Unicode_Category_SO;
		case 0x1D01C: return Unicode_Category_SO;
		case 0x1D01D: return Unicode_Category_SO;
		case 0x1D01E: return Unicode_Category_SO;
		case 0x1D01F: return Unicode_Category_SO;
		case 0x1D020: return Unicode_Category_SO;
		case 0x1D021: return Unicode_Category_SO;
		case 0x1D022: return Unicode_Category_SO;
		case 0x1D023: return Unicode_Category_SO;
		case 0x1D024: return Unicode_Category_SO;
		case 0x1D025: return Unicode_Category_SO;
		case 0x1D026: return Unicode_Category_SO;
		case 0x1D027: return Unicode_Category_SO;
		case 0x1D028: return Unicode_Category_SO;
		case 0x1D029: return Unicode_Category_SO;
		case 0x1D02A: return Unicode_Category_SO;
		case 0x1D02B: return Unicode_Category_SO;
		case 0x1D02C: return Unicode_Category_SO;
		case 0x1D02D: return Unicode_Category_SO;
		case 0x1D02E: return Unicode_Category_SO;
		case 0x1D02F: return Unicode_Category_SO;
		case 0x1D030: return Unicode_Category_SO;
		case 0x1D031: return Unicode_Category_SO;
		case 0x1D032: return Unicode_Category_SO;
		case 0x1D033: return Unicode_Category_SO;
		case 0x1D034: return Unicode_Category_SO;
		case 0x1D035: return Unicode_Category_SO;
		case 0x1D036: return Unicode_Category_SO;
		case 0x1D037: return Unicode_Category_SO;
		case 0x1D038: return Unicode_Category_SO;
		case 0x1D039: return Unicode_Category_SO;
		case 0x1D03A: return Unicode_Category_SO;
		case 0x1D03B: return Unicode_Category_SO;
		case 0x1D03C: return Unicode_Category_SO;
		case 0x1D03D: return Unicode_Category_SO;
		case 0x1D03E: return Unicode_Category_SO;
		case 0x1D03F: return Unicode_Category_SO;
		case 0x1D040: return Unicode_Category_SO;
		case 0x1D041: return Unicode_Category_SO;
		case 0x1D042: return Unicode_Category_SO;
		case 0x1D043: return Unicode_Category_SO;
		case 0x1D044: return Unicode_Category_SO;
		case 0x1D045: return Unicode_Category_SO;
		case 0x1D046: return Unicode_Category_SO;
		case 0x1D047: return Unicode_Category_SO;
		case 0x1D048: return Unicode_Category_SO;
		case 0x1D049: return Unicode_Category_SO;
		case 0x1D04A: return Unicode_Category_SO;
		case 0x1D04B: return Unicode_Category_SO;
		case 0x1D04C: return Unicode_Category_SO;
		case 0x1D04D: return Unicode_Category_SO;
		case 0x1D04E: return Unicode_Category_SO;
		case 0x1D04F: return Unicode_Category_SO;
		case 0x1D050: return Unicode_Category_SO;
		case 0x1D051: return Unicode_Category_SO;
		case 0x1D052: return Unicode_Category_SO;
		case 0x1D053: return Unicode_Category_SO;
		case 0x1D054: return Unicode_Category_SO;
		case 0x1D055: return Unicode_Category_SO;
		case 0x1D056: return Unicode_Category_SO;
		case 0x1D057: return Unicode_Category_SO;
		case 0x1D058: return Unicode_Category_SO;
		case 0x1D059: return Unicode_Category_SO;
		case 0x1D05A: return Unicode_Category_SO;
		case 0x1D05B: return Unicode_Category_SO;
		case 0x1D05C: return Unicode_Category_SO;
		case 0x1D05D: return Unicode_Category_SO;
		case 0x1D05E: return Unicode_Category_SO;
		case 0x1D05F: return Unicode_Category_SO;
		case 0x1D060: return Unicode_Category_SO;
		case 0x1D061: return Unicode_Category_SO;
		case 0x1D062: return Unicode_Category_SO;
		case 0x1D063: return Unicode_Category_SO;
		case 0x1D064: return Unicode_Category_SO;
		case 0x1D065: return Unicode_Category_SO;
		case 0x1D066: return Unicode_Category_SO;
		case 0x1D067: return Unicode_Category_SO;
		case 0x1D068: return Unicode_Category_SO;
		case 0x1D069: return Unicode_Category_SO;
		case 0x1D06A: return Unicode_Category_SO;
		case 0x1D06B: return Unicode_Category_SO;
		case 0x1D06C: return Unicode_Category_SO;
		case 0x1D06D: return Unicode_Category_SO;
		case 0x1D06E: return Unicode_Category_SO;
		case 0x1D06F: return Unicode_Category_SO;
		case 0x1D070: return Unicode_Category_SO;
		case 0x1D071: return Unicode_Category_SO;
		case 0x1D072: return Unicode_Category_SO;
		case 0x1D073: return Unicode_Category_SO;
		case 0x1D074: return Unicode_Category_SO;
		case 0x1D075: return Unicode_Category_SO;
		case 0x1D076: return Unicode_Category_SO;
		case 0x1D077: return Unicode_Category_SO;
		case 0x1D078: return Unicode_Category_SO;
		case 0x1D079: return Unicode_Category_SO;
		case 0x1D07A: return Unicode_Category_SO;
		case 0x1D07B: return Unicode_Category_SO;
		case 0x1D07C: return Unicode_Category_SO;
		case 0x1D07D: return Unicode_Category_SO;
		case 0x1D07E: return Unicode_Category_SO;
		case 0x1D07F: return Unicode_Category_SO;
		case 0x1D080: return Unicode_Category_SO;
		case 0x1D081: return Unicode_Category_SO;
		case 0x1D082: return Unicode_Category_SO;
		case 0x1D083: return Unicode_Category_SO;
		case 0x1D084: return Unicode_Category_SO;
		case 0x1D085: return Unicode_Category_SO;
		case 0x1D086: return Unicode_Category_SO;
		case 0x1D087: return Unicode_Category_SO;
		case 0x1D088: return Unicode_Category_SO;
		case 0x1D089: return Unicode_Category_SO;
		case 0x1D08A: return Unicode_Category_SO;
		case 0x1D08B: return Unicode_Category_SO;
		case 0x1D08C: return Unicode_Category_SO;
		case 0x1D08D: return Unicode_Category_SO;
		case 0x1D08E: return Unicode_Category_SO;
		case 0x1D08F: return Unicode_Category_SO;
		case 0x1D090: return Unicode_Category_SO;
		case 0x1D091: return Unicode_Category_SO;
		case 0x1D092: return Unicode_Category_SO;
		case 0x1D093: return Unicode_Category_SO;
		case 0x1D094: return Unicode_Category_SO;
		case 0x1D095: return Unicode_Category_SO;
		case 0x1D096: return Unicode_Category_SO;
		case 0x1D097: return Unicode_Category_SO;
		case 0x1D098: return Unicode_Category_SO;
		case 0x1D099: return Unicode_Category_SO;
		case 0x1D09A: return Unicode_Category_SO;
		case 0x1D09B: return Unicode_Category_SO;
		case 0x1D09C: return Unicode_Category_SO;
		case 0x1D09D: return Unicode_Category_SO;
		case 0x1D09E: return Unicode_Category_SO;
		case 0x1D09F: return Unicode_Category_SO;
		case 0x1D0A0: return Unicode_Category_SO;
		case 0x1D0A1: return Unicode_Category_SO;
		case 0x1D0A2: return Unicode_Category_SO;
		case 0x1D0A3: return Unicode_Category_SO;
		case 0x1D0A4: return Unicode_Category_SO;
		case 0x1D0A5: return Unicode_Category_SO;
		case 0x1D0A6: return Unicode_Category_SO;
		case 0x1D0A7: return Unicode_Category_SO;
		case 0x1D0A8: return Unicode_Category_SO;
		case 0x1D0A9: return Unicode_Category_SO;
		case 0x1D0AA: return Unicode_Category_SO;
		case 0x1D0AB: return Unicode_Category_SO;
		case 0x1D0AC: return Unicode_Category_SO;
		case 0x1D0AD: return Unicode_Category_SO;
		case 0x1D0AE: return Unicode_Category_SO;
		case 0x1D0AF: return Unicode_Category_SO;
		case 0x1D0B0: return Unicode_Category_SO;
		case 0x1D0B1: return Unicode_Category_SO;
		case 0x1D0B2: return Unicode_Category_SO;
		case 0x1D0B3: return Unicode_Category_SO;
		case 0x1D0B4: return Unicode_Category_SO;
		case 0x1D0B5: return Unicode_Category_SO;
		case 0x1D0B6: return Unicode_Category_SO;
		case 0x1D0B7: return Unicode_Category_SO;
		case 0x1D0B8: return Unicode_Category_SO;
		case 0x1D0B9: return Unicode_Category_SO;
		case 0x1D0BA: return Unicode_Category_SO;
		case 0x1D0BB: return Unicode_Category_SO;
		case 0x1D0BC: return Unicode_Category_SO;
		case 0x1D0BD: return Unicode_Category_SO;
		case 0x1D0BE: return Unicode_Category_SO;
		case 0x1D0BF: return Unicode_Category_SO;
		case 0x1D0C0: return Unicode_Category_SO;
		case 0x1D0C1: return Unicode_Category_SO;
		case 0x1D0C2: return Unicode_Category_SO;
		case 0x1D0C3: return Unicode_Category_SO;
		case 0x1D0C4: return Unicode_Category_SO;
		case 0x1D0C5: return Unicode_Category_SO;
		case 0x1D0C6: return Unicode_Category_SO;
		case 0x1D0C7: return Unicode_Category_SO;
		case 0x1D0C8: return Unicode_Category_SO;
		case 0x1D0C9: return Unicode_Category_SO;
		case 0x1D0CA: return Unicode_Category_SO;
		case 0x1D0CB: return Unicode_Category_SO;
		case 0x1D0CC: return Unicode_Category_SO;
		case 0x1D0CD: return Unicode_Category_SO;
		case 0x1D0CE: return Unicode_Category_SO;
		case 0x1D0CF: return Unicode_Category_SO;
		case 0x1D0D0: return Unicode_Category_SO;
		case 0x1D0D1: return Unicode_Category_SO;
		case 0x1D0D2: return Unicode_Category_SO;
		case 0x1D0D3: return Unicode_Category_SO;
		case 0x1D0D4: return Unicode_Category_SO;
		case 0x1D0D5: return Unicode_Category_SO;
		case 0x1D0D6: return Unicode_Category_SO;
		case 0x1D0D7: return Unicode_Category_SO;
		case 0x1D0D8: return Unicode_Category_SO;
		case 0x1D0D9: return Unicode_Category_SO;
		case 0x1D0DA: return Unicode_Category_SO;
		case 0x1D0DB: return Unicode_Category_SO;
		case 0x1D0DC: return Unicode_Category_SO;
		case 0x1D0DD: return Unicode_Category_SO;
		case 0x1D0DE: return Unicode_Category_SO;
		case 0x1D0DF: return Unicode_Category_SO;
		case 0x1D0E0: return Unicode_Category_SO;
		case 0x1D0E1: return Unicode_Category_SO;
		case 0x1D0E2: return Unicode_Category_SO;
		case 0x1D0E3: return Unicode_Category_SO;
		case 0x1D0E4: return Unicode_Category_SO;
		case 0x1D0E5: return Unicode_Category_SO;
		case 0x1D0E6: return Unicode_Category_SO;
		case 0x1D0E7: return Unicode_Category_SO;
		case 0x1D0E8: return Unicode_Category_SO;
		case 0x1D0E9: return Unicode_Category_SO;
		case 0x1D0EA: return Unicode_Category_SO;
		case 0x1D0EB: return Unicode_Category_SO;
		case 0x1D0EC: return Unicode_Category_SO;
		case 0x1D0ED: return Unicode_Category_SO;
		case 0x1D0EE: return Unicode_Category_SO;
		case 0x1D0EF: return Unicode_Category_SO;
		case 0x1D0F0: return Unicode_Category_SO;
		case 0x1D0F1: return Unicode_Category_SO;
		case 0x1D0F2: return Unicode_Category_SO;
		case 0x1D0F3: return Unicode_Category_SO;
		case 0x1D0F4: return Unicode_Category_SO;
		case 0x1D0F5: return Unicode_Category_SO;
		case 0x1D100: return Unicode_Category_SO;
		case 0x1D101: return Unicode_Category_SO;
		case 0x1D102: return Unicode_Category_SO;
		case 0x1D103: return Unicode_Category_SO;
		case 0x1D104: return Unicode_Category_SO;
		case 0x1D105: return Unicode_Category_SO;
		case 0x1D106: return Unicode_Category_SO;
		case 0x1D107: return Unicode_Category_SO;
		case 0x1D108: return Unicode_Category_SO;
		case 0x1D109: return Unicode_Category_SO;
		case 0x1D10A: return Unicode_Category_SO;
		case 0x1D10B: return Unicode_Category_SO;
		case 0x1D10C: return Unicode_Category_SO;
		case 0x1D10D: return Unicode_Category_SO;
		case 0x1D10E: return Unicode_Category_SO;
		case 0x1D10F: return Unicode_Category_SO;
		case 0x1D110: return Unicode_Category_SO;
		case 0x1D111: return Unicode_Category_SO;
		case 0x1D112: return Unicode_Category_SO;
		case 0x1D113: return Unicode_Category_SO;
		case 0x1D114: return Unicode_Category_SO;
		case 0x1D115: return Unicode_Category_SO;
		case 0x1D116: return Unicode_Category_SO;
		case 0x1D117: return Unicode_Category_SO;
		case 0x1D118: return Unicode_Category_SO;
		case 0x1D119: return Unicode_Category_SO;
		case 0x1D11A: return Unicode_Category_SO;
		case 0x1D11B: return Unicode_Category_SO;
		case 0x1D11C: return Unicode_Category_SO;
		case 0x1D11D: return Unicode_Category_SO;
		case 0x1D11E: return Unicode_Category_SO;
		case 0x1D11F: return Unicode_Category_SO;
		case 0x1D120: return Unicode_Category_SO;
		case 0x1D121: return Unicode_Category_SO;
		case 0x1D122: return Unicode_Category_SO;
		case 0x1D123: return Unicode_Category_SO;
		case 0x1D124: return Unicode_Category_SO;
		case 0x1D125: return Unicode_Category_SO;
		case 0x1D126: return Unicode_Category_SO;
		case 0x1D129: return Unicode_Category_SO;
		case 0x1D12A: return Unicode_Category_SO;
		case 0x1D12B: return Unicode_Category_SO;
		case 0x1D12C: return Unicode_Category_SO;
		case 0x1D12D: return Unicode_Category_SO;
		case 0x1D12E: return Unicode_Category_SO;
		case 0x1D12F: return Unicode_Category_SO;
		case 0x1D130: return Unicode_Category_SO;
		case 0x1D131: return Unicode_Category_SO;
		case 0x1D132: return Unicode_Category_SO;
		case 0x1D133: return Unicode_Category_SO;
		case 0x1D134: return Unicode_Category_SO;
		case 0x1D135: return Unicode_Category_SO;
		case 0x1D136: return Unicode_Category_SO;
		case 0x1D137: return Unicode_Category_SO;
		case 0x1D138: return Unicode_Category_SO;
		case 0x1D139: return Unicode_Category_SO;
		case 0x1D13A: return Unicode_Category_SO;
		case 0x1D13B: return Unicode_Category_SO;
		case 0x1D13C: return Unicode_Category_SO;
		case 0x1D13D: return Unicode_Category_SO;
		case 0x1D13E: return Unicode_Category_SO;
		case 0x1D13F: return Unicode_Category_SO;
		case 0x1D140: return Unicode_Category_SO;
		case 0x1D141: return Unicode_Category_SO;
		case 0x1D142: return Unicode_Category_SO;
		case 0x1D143: return Unicode_Category_SO;
		case 0x1D144: return Unicode_Category_SO;
		case 0x1D145: return Unicode_Category_SO;
		case 0x1D146: return Unicode_Category_SO;
		case 0x1D147: return Unicode_Category_SO;
		case 0x1D148: return Unicode_Category_SO;
		case 0x1D149: return Unicode_Category_SO;
		case 0x1D14A: return Unicode_Category_SO;
		case 0x1D14B: return Unicode_Category_SO;
		case 0x1D14C: return Unicode_Category_SO;
		case 0x1D14D: return Unicode_Category_SO;
		case 0x1D14E: return Unicode_Category_SO;
		case 0x1D14F: return Unicode_Category_SO;
		case 0x1D150: return Unicode_Category_SO;
		case 0x1D151: return Unicode_Category_SO;
		case 0x1D152: return Unicode_Category_SO;
		case 0x1D153: return Unicode_Category_SO;
		case 0x1D154: return Unicode_Category_SO;
		case 0x1D155: return Unicode_Category_SO;
		case 0x1D156: return Unicode_Category_SO;
		case 0x1D157: return Unicode_Category_SO;
		case 0x1D158: return Unicode_Category_SO;
		case 0x1D159: return Unicode_Category_SO;
		case 0x1D15A: return Unicode_Category_SO;
		case 0x1D15B: return Unicode_Category_SO;
		case 0x1D15C: return Unicode_Category_SO;
		case 0x1D15D: return Unicode_Category_SO;
		case 0x1D15E: return Unicode_Category_SO;
		case 0x1D15F: return Unicode_Category_SO;
		case 0x1D160: return Unicode_Category_SO;
		case 0x1D161: return Unicode_Category_SO;
		case 0x1D162: return Unicode_Category_SO;
		case 0x1D163: return Unicode_Category_SO;
		case 0x1D164: return Unicode_Category_SO;
		case 0x1D165: return Unicode_Category_MC;
		case 0x1D166: return Unicode_Category_MC;
		case 0x1D167: return Unicode_Category_MN;
		case 0x1D168: return Unicode_Category_MN;
		case 0x1D169: return Unicode_Category_MN;
		case 0x1D16A: return Unicode_Category_SO;
		case 0x1D16B: return Unicode_Category_SO;
		case 0x1D16C: return Unicode_Category_SO;
		case 0x1D16D: return Unicode_Category_MC;
		case 0x1D16E: return Unicode_Category_MC;
		case 0x1D16F: return Unicode_Category_MC;
		case 0x1D170: return Unicode_Category_MC;
		case 0x1D171: return Unicode_Category_MC;
		case 0x1D172: return Unicode_Category_MC;
		case 0x1D173: return Unicode_Category_CF;
		case 0x1D174: return Unicode_Category_CF;
		case 0x1D175: return Unicode_Category_CF;
		case 0x1D176: return Unicode_Category_CF;
		case 0x1D177: return Unicode_Category_CF;
		case 0x1D178: return Unicode_Category_CF;
		case 0x1D179: return Unicode_Category_CF;
		case 0x1D17A: return Unicode_Category_CF;
		case 0x1D17B: return Unicode_Category_MN;
		case 0x1D17C: return Unicode_Category_MN;
		case 0x1D17D: return Unicode_Category_MN;
		case 0x1D17E: return Unicode_Category_MN;
		case 0x1D17F: return Unicode_Category_MN;
		case 0x1D180: return Unicode_Category_MN;
		case 0x1D181: return Unicode_Category_MN;
		case 0x1D182: return Unicode_Category_MN;
		case 0x1D183: return Unicode_Category_SO;
		case 0x1D184: return Unicode_Category_SO;
		case 0x1D185: return Unicode_Category_MN;
		case 0x1D186: return Unicode_Category_MN;
		case 0x1D187: return Unicode_Category_MN;
		case 0x1D188: return Unicode_Category_MN;
		case 0x1D189: return Unicode_Category_MN;
		case 0x1D18A: return Unicode_Category_MN;
		case 0x1D18B: return Unicode_Category_MN;
		case 0x1D18C: return Unicode_Category_SO;
		case 0x1D18D: return Unicode_Category_SO;
		case 0x1D18E: return Unicode_Category_SO;
		case 0x1D18F: return Unicode_Category_SO;
		case 0x1D190: return Unicode_Category_SO;
		case 0x1D191: return Unicode_Category_SO;
		case 0x1D192: return Unicode_Category_SO;
		case 0x1D193: return Unicode_Category_SO;
		case 0x1D194: return Unicode_Category_SO;
		case 0x1D195: return Unicode_Category_SO;
		case 0x1D196: return Unicode_Category_SO;
		case 0x1D197: return Unicode_Category_SO;
		case 0x1D198: return Unicode_Category_SO;
		case 0x1D199: return Unicode_Category_SO;
		case 0x1D19A: return Unicode_Category_SO;
		case 0x1D19B: return Unicode_Category_SO;
		case 0x1D19C: return Unicode_Category_SO;
		case 0x1D19D: return Unicode_Category_SO;
		case 0x1D19E: return Unicode_Category_SO;
		case 0x1D19F: return Unicode_Category_SO;
		case 0x1D1A0: return Unicode_Category_SO;
		case 0x1D1A1: return Unicode_Category_SO;
		case 0x1D1A2: return Unicode_Category_SO;
		case 0x1D1A3: return Unicode_Category_SO;
		case 0x1D1A4: return Unicode_Category_SO;
		case 0x1D1A5: return Unicode_Category_SO;
		case 0x1D1A6: return Unicode_Category_SO;
		case 0x1D1A7: return Unicode_Category_SO;
		case 0x1D1A8: return Unicode_Category_SO;
		case 0x1D1A9: return Unicode_Category_SO;
		case 0x1D1AA: return Unicode_Category_MN;
		case 0x1D1AB: return Unicode_Category_MN;
		case 0x1D1AC: return Unicode_Category_MN;
		case 0x1D1AD: return Unicode_Category_MN;
		case 0x1D1AE: return Unicode_Category_SO;
		case 0x1D1AF: return Unicode_Category_SO;
		case 0x1D1B0: return Unicode_Category_SO;
		case 0x1D1B1: return Unicode_Category_SO;
		case 0x1D1B2: return Unicode_Category_SO;
		case 0x1D1B3: return Unicode_Category_SO;
		case 0x1D1B4: return Unicode_Category_SO;
		case 0x1D1B5: return Unicode_Category_SO;
		case 0x1D1B6: return Unicode_Category_SO;
		case 0x1D1B7: return Unicode_Category_SO;
		case 0x1D1B8: return Unicode_Category_SO;
		case 0x1D1B9: return Unicode_Category_SO;
		case 0x1D1BA: return Unicode_Category_SO;
		case 0x1D1BB: return Unicode_Category_SO;
		case 0x1D1BC: return Unicode_Category_SO;
		case 0x1D1BD: return Unicode_Category_SO;
		case 0x1D1BE: return Unicode_Category_SO;
		case 0x1D1BF: return Unicode_Category_SO;
		case 0x1D1C0: return Unicode_Category_SO;
		case 0x1D1C1: return Unicode_Category_SO;
		case 0x1D1C2: return Unicode_Category_SO;
		case 0x1D1C3: return Unicode_Category_SO;
		case 0x1D1C4: return Unicode_Category_SO;
		case 0x1D1C5: return Unicode_Category_SO;
		case 0x1D1C6: return Unicode_Category_SO;
		case 0x1D1C7: return Unicode_Category_SO;
		case 0x1D1C8: return Unicode_Category_SO;
		case 0x1D1C9: return Unicode_Category_SO;
		case 0x1D1CA: return Unicode_Category_SO;
		case 0x1D1CB: return Unicode_Category_SO;
		case 0x1D1CC: return Unicode_Category_SO;
		case 0x1D1CD: return Unicode_Category_SO;
		case 0x1D1CE: return Unicode_Category_SO;
		case 0x1D1CF: return Unicode_Category_SO;
		case 0x1D1D0: return Unicode_Category_SO;
		case 0x1D1D1: return Unicode_Category_SO;
		case 0x1D1D2: return Unicode_Category_SO;
		case 0x1D1D3: return Unicode_Category_SO;
		case 0x1D1D4: return Unicode_Category_SO;
		case 0x1D1D5: return Unicode_Category_SO;
		case 0x1D1D6: return Unicode_Category_SO;
		case 0x1D1D7: return Unicode_Category_SO;
		case 0x1D1D8: return Unicode_Category_SO;
		case 0x1D1D9: return Unicode_Category_SO;
		case 0x1D1DA: return Unicode_Category_SO;
		case 0x1D1DB: return Unicode_Category_SO;
		case 0x1D1DC: return Unicode_Category_SO;
		case 0x1D1DD: return Unicode_Category_SO;
		case 0x1D1DE: return Unicode_Category_SO;
		case 0x1D1DF: return Unicode_Category_SO;
		case 0x1D1E0: return Unicode_Category_SO;
		case 0x1D1E1: return Unicode_Category_SO;
		case 0x1D1E2: return Unicode_Category_SO;
		case 0x1D1E3: return Unicode_Category_SO;
		case 0x1D1E4: return Unicode_Category_SO;
		case 0x1D1E5: return Unicode_Category_SO;
		case 0x1D1E6: return Unicode_Category_SO;
		case 0x1D1E7: return Unicode_Category_SO;
		case 0x1D1E8: return Unicode_Category_SO;
		case 0x1D200: return Unicode_Category_SO;
		case 0x1D201: return Unicode_Category_SO;
		case 0x1D202: return Unicode_Category_SO;
		case 0x1D203: return Unicode_Category_SO;
		case 0x1D204: return Unicode_Category_SO;
		case 0x1D205: return Unicode_Category_SO;
		case 0x1D206: return Unicode_Category_SO;
		case 0x1D207: return Unicode_Category_SO;
		case 0x1D208: return Unicode_Category_SO;
		case 0x1D209: return Unicode_Category_SO;
		case 0x1D20A: return Unicode_Category_SO;
		case 0x1D20B: return Unicode_Category_SO;
		case 0x1D20C: return Unicode_Category_SO;
		case 0x1D20D: return Unicode_Category_SO;
		case 0x1D20E: return Unicode_Category_SO;
		case 0x1D20F: return Unicode_Category_SO;
		case 0x1D210: return Unicode_Category_SO;
		case 0x1D211: return Unicode_Category_SO;
		case 0x1D212: return Unicode_Category_SO;
		case 0x1D213: return Unicode_Category_SO;
		case 0x1D214: return Unicode_Category_SO;
		case 0x1D215: return Unicode_Category_SO;
		case 0x1D216: return Unicode_Category_SO;
		case 0x1D217: return Unicode_Category_SO;
		case 0x1D218: return Unicode_Category_SO;
		case 0x1D219: return Unicode_Category_SO;
		case 0x1D21A: return Unicode_Category_SO;
		case 0x1D21B: return Unicode_Category_SO;
		case 0x1D21C: return Unicode_Category_SO;
		case 0x1D21D: return Unicode_Category_SO;
		case 0x1D21E: return Unicode_Category_SO;
		case 0x1D21F: return Unicode_Category_SO;
		case 0x1D220: return Unicode_Category_SO;
		case 0x1D221: return Unicode_Category_SO;
		case 0x1D222: return Unicode_Category_SO;
		case 0x1D223: return Unicode_Category_SO;
		case 0x1D224: return Unicode_Category_SO;
		case 0x1D225: return Unicode_Category_SO;
		case 0x1D226: return Unicode_Category_SO;
		case 0x1D227: return Unicode_Category_SO;
		case 0x1D228: return Unicode_Category_SO;
		case 0x1D229: return Unicode_Category_SO;
		case 0x1D22A: return Unicode_Category_SO;
		case 0x1D22B: return Unicode_Category_SO;
		case 0x1D22C: return Unicode_Category_SO;
		case 0x1D22D: return Unicode_Category_SO;
		case 0x1D22E: return Unicode_Category_SO;
		case 0x1D22F: return Unicode_Category_SO;
		case 0x1D230: return Unicode_Category_SO;
		case 0x1D231: return Unicode_Category_SO;
		case 0x1D232: return Unicode_Category_SO;
		case 0x1D233: return Unicode_Category_SO;
		case 0x1D234: return Unicode_Category_SO;
		case 0x1D235: return Unicode_Category_SO;
		case 0x1D236: return Unicode_Category_SO;
		case 0x1D237: return Unicode_Category_SO;
		case 0x1D238: return Unicode_Category_SO;
		case 0x1D239: return Unicode_Category_SO;
		case 0x1D23A: return Unicode_Category_SO;
		case 0x1D23B: return Unicode_Category_SO;
		case 0x1D23C: return Unicode_Category_SO;
		case 0x1D23D: return Unicode_Category_SO;
		case 0x1D23E: return Unicode_Category_SO;
		case 0x1D23F: return Unicode_Category_SO;
		case 0x1D240: return Unicode_Category_SO;
		case 0x1D241: return Unicode_Category_SO;
		case 0x1D242: return Unicode_Category_MN;
		case 0x1D243: return Unicode_Category_MN;
		case 0x1D244: return Unicode_Category_MN;
		case 0x1D245: return Unicode_Category_SO;
		case 0x1D2E0: return Unicode_Category_NO;
		case 0x1D2E1: return Unicode_Category_NO;
		case 0x1D2E2: return Unicode_Category_NO;
		case 0x1D2E3: return Unicode_Category_NO;
		case 0x1D2E4: return Unicode_Category_NO;
		case 0x1D2E5: return Unicode_Category_NO;
		case 0x1D2E6: return Unicode_Category_NO;
		case 0x1D2E7: return Unicode_Category_NO;
		case 0x1D2E8: return Unicode_Category_NO;
		case 0x1D2E9: return Unicode_Category_NO;
		case 0x1D2EA: return Unicode_Category_NO;
		case 0x1D2EB: return Unicode_Category_NO;
		case 0x1D2EC: return Unicode_Category_NO;
		case 0x1D2ED: return Unicode_Category_NO;
		case 0x1D2EE: return Unicode_Category_NO;
		case 0x1D2EF: return Unicode_Category_NO;
		case 0x1D2F0: return Unicode_Category_NO;
		case 0x1D2F1: return Unicode_Category_NO;
		case 0x1D2F2: return Unicode_Category_NO;
		case 0x1D2F3: return Unicode_Category_NO;
		case 0x1D300: return Unicode_Category_SO;
		case 0x1D301: return Unicode_Category_SO;
		case 0x1D302: return Unicode_Category_SO;
		case 0x1D303: return Unicode_Category_SO;
		case 0x1D304: return Unicode_Category_SO;
		case 0x1D305: return Unicode_Category_SO;
		case 0x1D306: return Unicode_Category_SO;
		case 0x1D307: return Unicode_Category_SO;
		case 0x1D308: return Unicode_Category_SO;
		case 0x1D309: return Unicode_Category_SO;
		case 0x1D30A: return Unicode_Category_SO;
		case 0x1D30B: return Unicode_Category_SO;
		case 0x1D30C: return Unicode_Category_SO;
		case 0x1D30D: return Unicode_Category_SO;
		case 0x1D30E: return Unicode_Category_SO;
		case 0x1D30F: return Unicode_Category_SO;
		case 0x1D310: return Unicode_Category_SO;
		case 0x1D311: return Unicode_Category_SO;
		case 0x1D312: return Unicode_Category_SO;
		case 0x1D313: return Unicode_Category_SO;
		case 0x1D314: return Unicode_Category_SO;
		case 0x1D315: return Unicode_Category_SO;
		case 0x1D316: return Unicode_Category_SO;
		case 0x1D317: return Unicode_Category_SO;
		case 0x1D318: return Unicode_Category_SO;
		case 0x1D319: return Unicode_Category_SO;
		case 0x1D31A: return Unicode_Category_SO;
		case 0x1D31B: return Unicode_Category_SO;
		case 0x1D31C: return Unicode_Category_SO;
		case 0x1D31D: return Unicode_Category_SO;
		case 0x1D31E: return Unicode_Category_SO;
		case 0x1D31F: return Unicode_Category_SO;
		case 0x1D320: return Unicode_Category_SO;
		case 0x1D321: return Unicode_Category_SO;
		case 0x1D322: return Unicode_Category_SO;
		case 0x1D323: return Unicode_Category_SO;
		case 0x1D324: return Unicode_Category_SO;
		case 0x1D325: return Unicode_Category_SO;
		case 0x1D326: return Unicode_Category_SO;
		case 0x1D327: return Unicode_Category_SO;
		case 0x1D328: return Unicode_Category_SO;
		case 0x1D329: return Unicode_Category_SO;
		case 0x1D32A: return Unicode_Category_SO;
		case 0x1D32B: return Unicode_Category_SO;
		case 0x1D32C: return Unicode_Category_SO;
		case 0x1D32D: return Unicode_Category_SO;
		case 0x1D32E: return Unicode_Category_SO;
		case 0x1D32F: return Unicode_Category_SO;
		case 0x1D330: return Unicode_Category_SO;
		case 0x1D331: return Unicode_Category_SO;
		case 0x1D332: return Unicode_Category_SO;
		case 0x1D333: return Unicode_Category_SO;
		case 0x1D334: return Unicode_Category_SO;
		case 0x1D335: return Unicode_Category_SO;
		case 0x1D336: return Unicode_Category_SO;
		case 0x1D337: return Unicode_Category_SO;
		case 0x1D338: return Unicode_Category_SO;
		case 0x1D339: return Unicode_Category_SO;
		case 0x1D33A: return Unicode_Category_SO;
		case 0x1D33B: return Unicode_Category_SO;
		case 0x1D33C: return Unicode_Category_SO;
		case 0x1D33D: return Unicode_Category_SO;
		case 0x1D33E: return Unicode_Category_SO;
		case 0x1D33F: return Unicode_Category_SO;
		case 0x1D340: return Unicode_Category_SO;
		case 0x1D341: return Unicode_Category_SO;
		case 0x1D342: return Unicode_Category_SO;
		case 0x1D343: return Unicode_Category_SO;
		case 0x1D344: return Unicode_Category_SO;
		case 0x1D345: return Unicode_Category_SO;
		case 0x1D346: return Unicode_Category_SO;
		case 0x1D347: return Unicode_Category_SO;
		case 0x1D348: return Unicode_Category_SO;
		case 0x1D349: return Unicode_Category_SO;
		case 0x1D34A: return Unicode_Category_SO;
		case 0x1D34B: return Unicode_Category_SO;
		case 0x1D34C: return Unicode_Category_SO;
		case 0x1D34D: return Unicode_Category_SO;
		case 0x1D34E: return Unicode_Category_SO;
		case 0x1D34F: return Unicode_Category_SO;
		case 0x1D350: return Unicode_Category_SO;
		case 0x1D351: return Unicode_Category_SO;
		case 0x1D352: return Unicode_Category_SO;
		case 0x1D353: return Unicode_Category_SO;
		case 0x1D354: return Unicode_Category_SO;
		case 0x1D355: return Unicode_Category_SO;
		case 0x1D356: return Unicode_Category_SO;
		case 0x1D360: return Unicode_Category_NO;
		case 0x1D361: return Unicode_Category_NO;
		case 0x1D362: return Unicode_Category_NO;
		case 0x1D363: return Unicode_Category_NO;
		case 0x1D364: return Unicode_Category_NO;
		case 0x1D365: return Unicode_Category_NO;
		case 0x1D366: return Unicode_Category_NO;
		case 0x1D367: return Unicode_Category_NO;
		case 0x1D368: return Unicode_Category_NO;
		case 0x1D369: return Unicode_Category_NO;
		case 0x1D36A: return Unicode_Category_NO;
		case 0x1D36B: return Unicode_Category_NO;
		case 0x1D36C: return Unicode_Category_NO;
		case 0x1D36D: return Unicode_Category_NO;
		case 0x1D36E: return Unicode_Category_NO;
		case 0x1D36F: return Unicode_Category_NO;
		case 0x1D370: return Unicode_Category_NO;
		case 0x1D371: return Unicode_Category_NO;
		case 0x1D372: return Unicode_Category_NO;
		case 0x1D373: return Unicode_Category_NO;
		case 0x1D374: return Unicode_Category_NO;
		case 0x1D375: return Unicode_Category_NO;
		case 0x1D376: return Unicode_Category_NO;
		case 0x1D377: return Unicode_Category_NO;
		case 0x1D378: return Unicode_Category_NO;
		case 0x1D400: return Unicode_Category_LU;
		case 0x1D401: return Unicode_Category_LU;
		case 0x1D402: return Unicode_Category_LU;
		case 0x1D403: return Unicode_Category_LU;
		case 0x1D404: return Unicode_Category_LU;
		case 0x1D405: return Unicode_Category_LU;
		case 0x1D406: return Unicode_Category_LU;
		case 0x1D407: return Unicode_Category_LU;
		case 0x1D408: return Unicode_Category_LU;
		case 0x1D409: return Unicode_Category_LU;
		case 0x1D40A: return Unicode_Category_LU;
		case 0x1D40B: return Unicode_Category_LU;
		case 0x1D40C: return Unicode_Category_LU;
		case 0x1D40D: return Unicode_Category_LU;
		case 0x1D40E: return Unicode_Category_LU;
		case 0x1D40F: return Unicode_Category_LU;
		case 0x1D410: return Unicode_Category_LU;
		case 0x1D411: return Unicode_Category_LU;
		case 0x1D412: return Unicode_Category_LU;
		case 0x1D413: return Unicode_Category_LU;
		case 0x1D414: return Unicode_Category_LU;
		case 0x1D415: return Unicode_Category_LU;
		case 0x1D416: return Unicode_Category_LU;
		case 0x1D417: return Unicode_Category_LU;
		case 0x1D418: return Unicode_Category_LU;
		case 0x1D419: return Unicode_Category_LU;
		case 0x1D41A: return Unicode_Category_LL;
		case 0x1D41B: return Unicode_Category_LL;
		case 0x1D41C: return Unicode_Category_LL;
		case 0x1D41D: return Unicode_Category_LL;
		case 0x1D41E: return Unicode_Category_LL;
		case 0x1D41F: return Unicode_Category_LL;
		case 0x1D420: return Unicode_Category_LL;
		case 0x1D421: return Unicode_Category_LL;
		case 0x1D422: return Unicode_Category_LL;
		case 0x1D423: return Unicode_Category_LL;
		case 0x1D424: return Unicode_Category_LL;
		case 0x1D425: return Unicode_Category_LL;
		case 0x1D426: return Unicode_Category_LL;
		case 0x1D427: return Unicode_Category_LL;
		case 0x1D428: return Unicode_Category_LL;
		case 0x1D429: return Unicode_Category_LL;
		case 0x1D42A: return Unicode_Category_LL;
		case 0x1D42B: return Unicode_Category_LL;
		case 0x1D42C: return Unicode_Category_LL;
		case 0x1D42D: return Unicode_Category_LL;
		case 0x1D42E: return Unicode_Category_LL;
		case 0x1D42F: return Unicode_Category_LL;
		case 0x1D430: return Unicode_Category_LL;
		case 0x1D431: return Unicode_Category_LL;
		case 0x1D432: return Unicode_Category_LL;
		case 0x1D433: return Unicode_Category_LL;
		case 0x1D434: return Unicode_Category_LU;
		case 0x1D435: return Unicode_Category_LU;
		case 0x1D436: return Unicode_Category_LU;
		case 0x1D437: return Unicode_Category_LU;
		case 0x1D438: return Unicode_Category_LU;
		case 0x1D439: return Unicode_Category_LU;
		case 0x1D43A: return Unicode_Category_LU;
		case 0x1D43B: return Unicode_Category_LU;
		case 0x1D43C: return Unicode_Category_LU;
		case 0x1D43D: return Unicode_Category_LU;
		case 0x1D43E: return Unicode_Category_LU;
		case 0x1D43F: return Unicode_Category_LU;
		case 0x1D440: return Unicode_Category_LU;
		case 0x1D441: return Unicode_Category_LU;
		case 0x1D442: return Unicode_Category_LU;
		case 0x1D443: return Unicode_Category_LU;
		case 0x1D444: return Unicode_Category_LU;
		case 0x1D445: return Unicode_Category_LU;
		case 0x1D446: return Unicode_Category_LU;
		case 0x1D447: return Unicode_Category_LU;
		case 0x1D448: return Unicode_Category_LU;
		case 0x1D449: return Unicode_Category_LU;
		case 0x1D44A: return Unicode_Category_LU;
		case 0x1D44B: return Unicode_Category_LU;
		case 0x1D44C: return Unicode_Category_LU;
		case 0x1D44D: return Unicode_Category_LU;
		case 0x1D44E: return Unicode_Category_LL;
		case 0x1D44F: return Unicode_Category_LL;
		case 0x1D450: return Unicode_Category_LL;
		case 0x1D451: return Unicode_Category_LL;
		case 0x1D452: return Unicode_Category_LL;
		case 0x1D453: return Unicode_Category_LL;
		case 0x1D454: return Unicode_Category_LL;
		case 0x1D456: return Unicode_Category_LL;
		case 0x1D457: return Unicode_Category_LL;
		case 0x1D458: return Unicode_Category_LL;
		case 0x1D459: return Unicode_Category_LL;
		case 0x1D45A: return Unicode_Category_LL;
		case 0x1D45B: return Unicode_Category_LL;
		case 0x1D45C: return Unicode_Category_LL;
		case 0x1D45D: return Unicode_Category_LL;
		case 0x1D45E: return Unicode_Category_LL;
		case 0x1D45F: return Unicode_Category_LL;
		case 0x1D460: return Unicode_Category_LL;
		case 0x1D461: return Unicode_Category_LL;
		case 0x1D462: return Unicode_Category_LL;
		case 0x1D463: return Unicode_Category_LL;
		case 0x1D464: return Unicode_Category_LL;
		case 0x1D465: return Unicode_Category_LL;
		case 0x1D466: return Unicode_Category_LL;
		case 0x1D467: return Unicode_Category_LL;
		case 0x1D468: return Unicode_Category_LU;
		case 0x1D469: return Unicode_Category_LU;
		case 0x1D46A: return Unicode_Category_LU;
		case 0x1D46B: return Unicode_Category_LU;
		case 0x1D46C: return Unicode_Category_LU;
		case 0x1D46D: return Unicode_Category_LU;
		case 0x1D46E: return Unicode_Category_LU;
		case 0x1D46F: return Unicode_Category_LU;
		case 0x1D470: return Unicode_Category_LU;
		case 0x1D471: return Unicode_Category_LU;
		case 0x1D472: return Unicode_Category_LU;
		case 0x1D473: return Unicode_Category_LU;
		case 0x1D474: return Unicode_Category_LU;
		case 0x1D475: return Unicode_Category_LU;
		case 0x1D476: return Unicode_Category_LU;
		case 0x1D477: return Unicode_Category_LU;
		case 0x1D478: return Unicode_Category_LU;
		case 0x1D479: return Unicode_Category_LU;
		case 0x1D47A: return Unicode_Category_LU;
		case 0x1D47B: return Unicode_Category_LU;
		case 0x1D47C: return Unicode_Category_LU;
		case 0x1D47D: return Unicode_Category_LU;
		case 0x1D47E: return Unicode_Category_LU;
		case 0x1D47F: return Unicode_Category_LU;
		case 0x1D480: return Unicode_Category_LU;
		case 0x1D481: return Unicode_Category_LU;
		case 0x1D482: return Unicode_Category_LL;
		case 0x1D483: return Unicode_Category_LL;
		case 0x1D484: return Unicode_Category_LL;
		case 0x1D485: return Unicode_Category_LL;
		case 0x1D486: return Unicode_Category_LL;
		case 0x1D487: return Unicode_Category_LL;
		case 0x1D488: return Unicode_Category_LL;
		case 0x1D489: return Unicode_Category_LL;
		case 0x1D48A: return Unicode_Category_LL;
		case 0x1D48B: return Unicode_Category_LL;
		case 0x1D48C: return Unicode_Category_LL;
		case 0x1D48D: return Unicode_Category_LL;
		case 0x1D48E: return Unicode_Category_LL;
		case 0x1D48F: return Unicode_Category_LL;
		case 0x1D490: return Unicode_Category_LL;
		case 0x1D491: return Unicode_Category_LL;
		case 0x1D492: return Unicode_Category_LL;
		case 0x1D493: return Unicode_Category_LL;
		case 0x1D494: return Unicode_Category_LL;
		case 0x1D495: return Unicode_Category_LL;
		case 0x1D496: return Unicode_Category_LL;
		case 0x1D497: return Unicode_Category_LL;
		case 0x1D498: return Unicode_Category_LL;
		case 0x1D499: return Unicode_Category_LL;
		case 0x1D49A: return Unicode_Category_LL;
		case 0x1D49B: return Unicode_Category_LL;
		case 0x1D49C: return Unicode_Category_LU;
		case 0x1D49E: return Unicode_Category_LU;
		case 0x1D49F: return Unicode_Category_LU;
		case 0x1D4A2: return Unicode_Category_LU;
		case 0x1D4A5: return Unicode_Category_LU;
		case 0x1D4A6: return Unicode_Category_LU;
		case 0x1D4A9: return Unicode_Category_LU;
		case 0x1D4AA: return Unicode_Category_LU;
		case 0x1D4AB: return Unicode_Category_LU;
		case 0x1D4AC: return Unicode_Category_LU;
		case 0x1D4AE: return Unicode_Category_LU;
		case 0x1D4AF: return Unicode_Category_LU;
		case 0x1D4B0: return Unicode_Category_LU;
		case 0x1D4B1: return Unicode_Category_LU;
		case 0x1D4B2: return Unicode_Category_LU;
		case 0x1D4B3: return Unicode_Category_LU;
		case 0x1D4B4: return Unicode_Category_LU;
		case 0x1D4B5: return Unicode_Category_LU;
		case 0x1D4B6: return Unicode_Category_LL;
		case 0x1D4B7: return Unicode_Category_LL;
		case 0x1D4B8: return Unicode_Category_LL;
		case 0x1D4B9: return Unicode_Category_LL;
		case 0x1D4BB: return Unicode_Category_LL;
		case 0x1D4BD: return Unicode_Category_LL;
		case 0x1D4BE: return Unicode_Category_LL;
		case 0x1D4BF: return Unicode_Category_LL;
		case 0x1D4C0: return Unicode_Category_LL;
		case 0x1D4C1: return Unicode_Category_LL;
		case 0x1D4C2: return Unicode_Category_LL;
		case 0x1D4C3: return Unicode_Category_LL;
		case 0x1D4C5: return Unicode_Category_LL;
		case 0x1D4C6: return Unicode_Category_LL;
		case 0x1D4C7: return Unicode_Category_LL;
		case 0x1D4C8: return Unicode_Category_LL;
		case 0x1D4C9: return Unicode_Category_LL;
		case 0x1D4CA: return Unicode_Category_LL;
		case 0x1D4CB: return Unicode_Category_LL;
		case 0x1D4CC: return Unicode_Category_LL;
		case 0x1D4CD: return Unicode_Category_LL;
		case 0x1D4CE: return Unicode_Category_LL;
		case 0x1D4CF: return Unicode_Category_LL;
		case 0x1D4D0: return Unicode_Category_LU;
		case 0x1D4D1: return Unicode_Category_LU;
		case 0x1D4D2: return Unicode_Category_LU;
		case 0x1D4D3: return Unicode_Category_LU;
		case 0x1D4D4: return Unicode_Category_LU;
		case 0x1D4D5: return Unicode_Category_LU;
		case 0x1D4D6: return Unicode_Category_LU;
		case 0x1D4D7: return Unicode_Category_LU;
		case 0x1D4D8: return Unicode_Category_LU;
		case 0x1D4D9: return Unicode_Category_LU;
		case 0x1D4DA: return Unicode_Category_LU;
		case 0x1D4DB: return Unicode_Category_LU;
		case 0x1D4DC: return Unicode_Category_LU;
		case 0x1D4DD: return Unicode_Category_LU;
		case 0x1D4DE: return Unicode_Category_LU;
		case 0x1D4DF: return Unicode_Category_LU;
		case 0x1D4E0: return Unicode_Category_LU;
		case 0x1D4E1: return Unicode_Category_LU;
		case 0x1D4E2: return Unicode_Category_LU;
		case 0x1D4E3: return Unicode_Category_LU;
		case 0x1D4E4: return Unicode_Category_LU;
		case 0x1D4E5: return Unicode_Category_LU;
		case 0x1D4E6: return Unicode_Category_LU;
		case 0x1D4E7: return Unicode_Category_LU;
		case 0x1D4E8: return Unicode_Category_LU;
		case 0x1D4E9: return Unicode_Category_LU;
		case 0x1D4EA: return Unicode_Category_LL;
		case 0x1D4EB: return Unicode_Category_LL;
		case 0x1D4EC: return Unicode_Category_LL;
		case 0x1D4ED: return Unicode_Category_LL;
		case 0x1D4EE: return Unicode_Category_LL;
		case 0x1D4EF: return Unicode_Category_LL;
		case 0x1D4F0: return Unicode_Category_LL;
		case 0x1D4F1: return Unicode_Category_LL;
		case 0x1D4F2: return Unicode_Category_LL;
		case 0x1D4F3: return Unicode_Category_LL;
		case 0x1D4F4: return Unicode_Category_LL;
		case 0x1D4F5: return Unicode_Category_LL;
		case 0x1D4F6: return Unicode_Category_LL;
		case 0x1D4F7: return Unicode_Category_LL;
		case 0x1D4F8: return Unicode_Category_LL;
		case 0x1D4F9: return Unicode_Category_LL;
		case 0x1D4FA: return Unicode_Category_LL;
		case 0x1D4FB: return Unicode_Category_LL;
		case 0x1D4FC: return Unicode_Category_LL;
		case 0x1D4FD: return Unicode_Category_LL;
		case 0x1D4FE: return Unicode_Category_LL;
		case 0x1D4FF: return Unicode_Category_LL;
		case 0x1D500: return Unicode_Category_LL;
		case 0x1D501: return Unicode_Category_LL;
		case 0x1D502: return Unicode_Category_LL;
		case 0x1D503: return Unicode_Category_LL;
		case 0x1D504: return Unicode_Category_LU;
		case 0x1D505: return Unicode_Category_LU;
		case 0x1D507: return Unicode_Category_LU;
		case 0x1D508: return Unicode_Category_LU;
		case 0x1D509: return Unicode_Category_LU;
		case 0x1D50A: return Unicode_Category_LU;
		case 0x1D50D: return Unicode_Category_LU;
		case 0x1D50E: return Unicode_Category_LU;
		case 0x1D50F: return Unicode_Category_LU;
		case 0x1D510: return Unicode_Category_LU;
		case 0x1D511: return Unicode_Category_LU;
		case 0x1D512: return Unicode_Category_LU;
		case 0x1D513: return Unicode_Category_LU;
		case 0x1D514: return Unicode_Category_LU;
		case 0x1D516: return Unicode_Category_LU;
		case 0x1D517: return Unicode_Category_LU;
		case 0x1D518: return Unicode_Category_LU;
		case 0x1D519: return Unicode_Category_LU;
		case 0x1D51A: return Unicode_Category_LU;
		case 0x1D51B: return Unicode_Category_LU;
		case 0x1D51C: return Unicode_Category_LU;
		case 0x1D51E: return Unicode_Category_LL;
		case 0x1D51F: return Unicode_Category_LL;
		case 0x1D520: return Unicode_Category_LL;
		case 0x1D521: return Unicode_Category_LL;
		case 0x1D522: return Unicode_Category_LL;
		case 0x1D523: return Unicode_Category_LL;
		case 0x1D524: return Unicode_Category_LL;
		case 0x1D525: return Unicode_Category_LL;
		case 0x1D526: return Unicode_Category_LL;
		case 0x1D527: return Unicode_Category_LL;
		case 0x1D528: return Unicode_Category_LL;
		case 0x1D529: return Unicode_Category_LL;
		case 0x1D52A: return Unicode_Category_LL;
		case 0x1D52B: return Unicode_Category_LL;
		case 0x1D52C: return Unicode_Category_LL;
		case 0x1D52D: return Unicode_Category_LL;
		case 0x1D52E: return Unicode_Category_LL;
		case 0x1D52F: return Unicode_Category_LL;
		case 0x1D530: return Unicode_Category_LL;
		case 0x1D531: return Unicode_Category_LL;
		case 0x1D532: return Unicode_Category_LL;
		case 0x1D533: return Unicode_Category_LL;
		case 0x1D534: return Unicode_Category_LL;
		case 0x1D535: return Unicode_Category_LL;
		case 0x1D536: return Unicode_Category_LL;
		case 0x1D537: return Unicode_Category_LL;
		case 0x1D538: return Unicode_Category_LU;
		case 0x1D539: return Unicode_Category_LU;
		case 0x1D53B: return Unicode_Category_LU;
		case 0x1D53C: return Unicode_Category_LU;
		case 0x1D53D: return Unicode_Category_LU;
		case 0x1D53E: return Unicode_Category_LU;
		case 0x1D540: return Unicode_Category_LU;
		case 0x1D541: return Unicode_Category_LU;
		case 0x1D542: return Unicode_Category_LU;
		case 0x1D543: return Unicode_Category_LU;
		case 0x1D544: return Unicode_Category_LU;
		case 0x1D546: return Unicode_Category_LU;
		case 0x1D54A: return Unicode_Category_LU;
		case 0x1D54B: return Unicode_Category_LU;
		case 0x1D54C: return Unicode_Category_LU;
		case 0x1D54D: return Unicode_Category_LU;
		case 0x1D54E: return Unicode_Category_LU;
		case 0x1D54F: return Unicode_Category_LU;
		case 0x1D550: return Unicode_Category_LU;
		case 0x1D552: return Unicode_Category_LL;
		case 0x1D553: return Unicode_Category_LL;
		case 0x1D554: return Unicode_Category_LL;
		case 0x1D555: return Unicode_Category_LL;
		case 0x1D556: return Unicode_Category_LL;
		case 0x1D557: return Unicode_Category_LL;
		case 0x1D558: return Unicode_Category_LL;
		case 0x1D559: return Unicode_Category_LL;
		case 0x1D55A: return Unicode_Category_LL;
		case 0x1D55B: return Unicode_Category_LL;
		case 0x1D55C: return Unicode_Category_LL;
		case 0x1D55D: return Unicode_Category_LL;
		case 0x1D55E: return Unicode_Category_LL;
		case 0x1D55F: return Unicode_Category_LL;
		case 0x1D560: return Unicode_Category_LL;
		case 0x1D561: return Unicode_Category_LL;
		case 0x1D562: return Unicode_Category_LL;
		case 0x1D563: return Unicode_Category_LL;
		case 0x1D564: return Unicode_Category_LL;
		case 0x1D565: return Unicode_Category_LL;
		case 0x1D566: return Unicode_Category_LL;
		case 0x1D567: return Unicode_Category_LL;
		case 0x1D568: return Unicode_Category_LL;
		case 0x1D569: return Unicode_Category_LL;
		case 0x1D56A: return Unicode_Category_LL;
		case 0x1D56B: return Unicode_Category_LL;
		case 0x1D56C: return Unicode_Category_LU;
		case 0x1D56D: return Unicode_Category_LU;
		case 0x1D56E: return Unicode_Category_LU;
		case 0x1D56F: return Unicode_Category_LU;
		case 0x1D570: return Unicode_Category_LU;
		case 0x1D571: return Unicode_Category_LU;
		case 0x1D572: return Unicode_Category_LU;
		case 0x1D573: return Unicode_Category_LU;
		case 0x1D574: return Unicode_Category_LU;
		case 0x1D575: return Unicode_Category_LU;
		case 0x1D576: return Unicode_Category_LU;
		case 0x1D577: return Unicode_Category_LU;
		case 0x1D578: return Unicode_Category_LU;
		case 0x1D579: return Unicode_Category_LU;
		case 0x1D57A: return Unicode_Category_LU;
		case 0x1D57B: return Unicode_Category_LU;
		case 0x1D57C: return Unicode_Category_LU;
		case 0x1D57D: return Unicode_Category_LU;
		case 0x1D57E: return Unicode_Category_LU;
		case 0x1D57F: return Unicode_Category_LU;
		case 0x1D580: return Unicode_Category_LU;
		case 0x1D581: return Unicode_Category_LU;
		case 0x1D582: return Unicode_Category_LU;
		case 0x1D583: return Unicode_Category_LU;
		case 0x1D584: return Unicode_Category_LU;
		case 0x1D585: return Unicode_Category_LU;
		case 0x1D586: return Unicode_Category_LL;
		case 0x1D587: return Unicode_Category_LL;
		case 0x1D588: return Unicode_Category_LL;
		case 0x1D589: return Unicode_Category_LL;
		case 0x1D58A: return Unicode_Category_LL;
		case 0x1D58B: return Unicode_Category_LL;
		case 0x1D58C: return Unicode_Category_LL;
		case 0x1D58D: return Unicode_Category_LL;
		case 0x1D58E: return Unicode_Category_LL;
		case 0x1D58F: return Unicode_Category_LL;
		case 0x1D590: return Unicode_Category_LL;
		case 0x1D591: return Unicode_Category_LL;
		case 0x1D592: return Unicode_Category_LL;
		case 0x1D593: return Unicode_Category_LL;
		case 0x1D594: return Unicode_Category_LL;
		case 0x1D595: return Unicode_Category_LL;
		case 0x1D596: return Unicode_Category_LL;
		case 0x1D597: return Unicode_Category_LL;
		case 0x1D598: return Unicode_Category_LL;
		case 0x1D599: return Unicode_Category_LL;
		case 0x1D59A: return Unicode_Category_LL;
		case 0x1D59B: return Unicode_Category_LL;
		case 0x1D59C: return Unicode_Category_LL;
		case 0x1D59D: return Unicode_Category_LL;
		case 0x1D59E: return Unicode_Category_LL;
		case 0x1D59F: return Unicode_Category_LL;
		case 0x1D5A0: return Unicode_Category_LU;
		case 0x1D5A1: return Unicode_Category_LU;
		case 0x1D5A2: return Unicode_Category_LU;
		case 0x1D5A3: return Unicode_Category_LU;
		case 0x1D5A4: return Unicode_Category_LU;
		case 0x1D5A5: return Unicode_Category_LU;
		case 0x1D5A6: return Unicode_Category_LU;
		case 0x1D5A7: return Unicode_Category_LU;
		case 0x1D5A8: return Unicode_Category_LU;
		case 0x1D5A9: return Unicode_Category_LU;
		case 0x1D5AA: return Unicode_Category_LU;
		case 0x1D5AB: return Unicode_Category_LU;
		case 0x1D5AC: return Unicode_Category_LU;
		case 0x1D5AD: return Unicode_Category_LU;
		case 0x1D5AE: return Unicode_Category_LU;
		case 0x1D5AF: return Unicode_Category_LU;
		case 0x1D5B0: return Unicode_Category_LU;
		case 0x1D5B1: return Unicode_Category_LU;
		case 0x1D5B2: return Unicode_Category_LU;
		case 0x1D5B3: return Unicode_Category_LU;
		case 0x1D5B4: return Unicode_Category_LU;
		case 0x1D5B5: return Unicode_Category_LU;
		case 0x1D5B6: return Unicode_Category_LU;
		case 0x1D5B7: return Unicode_Category_LU;
		case 0x1D5B8: return Unicode_Category_LU;
		case 0x1D5B9: return Unicode_Category_LU;
		case 0x1D5BA: return Unicode_Category_LL;
		case 0x1D5BB: return Unicode_Category_LL;
		case 0x1D5BC: return Unicode_Category_LL;
		case 0x1D5BD: return Unicode_Category_LL;
		case 0x1D5BE: return Unicode_Category_LL;
		case 0x1D5BF: return Unicode_Category_LL;
		case 0x1D5C0: return Unicode_Category_LL;
		case 0x1D5C1: return Unicode_Category_LL;
		case 0x1D5C2: return Unicode_Category_LL;
		case 0x1D5C3: return Unicode_Category_LL;
		case 0x1D5C4: return Unicode_Category_LL;
		case 0x1D5C5: return Unicode_Category_LL;
		case 0x1D5C6: return Unicode_Category_LL;
		case 0x1D5C7: return Unicode_Category_LL;
		case 0x1D5C8: return Unicode_Category_LL;
		case 0x1D5C9: return Unicode_Category_LL;
		case 0x1D5CA: return Unicode_Category_LL;
		case 0x1D5CB: return Unicode_Category_LL;
		case 0x1D5CC: return Unicode_Category_LL;
		case 0x1D5CD: return Unicode_Category_LL;
		case 0x1D5CE: return Unicode_Category_LL;
		case 0x1D5CF: return Unicode_Category_LL;
		case 0x1D5D0: return Unicode_Category_LL;
		case 0x1D5D1: return Unicode_Category_LL;
		case 0x1D5D2: return Unicode_Category_LL;
		case 0x1D5D3: return Unicode_Category_LL;
		case 0x1D5D4: return Unicode_Category_LU;
		case 0x1D5D5: return Unicode_Category_LU;
		case 0x1D5D6: return Unicode_Category_LU;
		case 0x1D5D7: return Unicode_Category_LU;
		case 0x1D5D8: return Unicode_Category_LU;
		case 0x1D5D9: return Unicode_Category_LU;
		case 0x1D5DA: return Unicode_Category_LU;
		case 0x1D5DB: return Unicode_Category_LU;
		case 0x1D5DC: return Unicode_Category_LU;
		case 0x1D5DD: return Unicode_Category_LU;
		case 0x1D5DE: return Unicode_Category_LU;
		case 0x1D5DF: return Unicode_Category_LU;
		case 0x1D5E0: return Unicode_Category_LU;
		case 0x1D5E1: return Unicode_Category_LU;
		case 0x1D5E2: return Unicode_Category_LU;
		case 0x1D5E3: return Unicode_Category_LU;
		case 0x1D5E4: return Unicode_Category_LU;
		case 0x1D5E5: return Unicode_Category_LU;
		case 0x1D5E6: return Unicode_Category_LU;
		case 0x1D5E7: return Unicode_Category_LU;
		case 0x1D5E8: return Unicode_Category_LU;
		case 0x1D5E9: return Unicode_Category_LU;
		case 0x1D5EA: return Unicode_Category_LU;
		case 0x1D5EB: return Unicode_Category_LU;
		case 0x1D5EC: return Unicode_Category_LU;
		case 0x1D5ED: return Unicode_Category_LU;
		case 0x1D5EE: return Unicode_Category_LL;
		case 0x1D5EF: return Unicode_Category_LL;
		case 0x1D5F0: return Unicode_Category_LL;
		case 0x1D5F1: return Unicode_Category_LL;
		case 0x1D5F2: return Unicode_Category_LL;
		case 0x1D5F3: return Unicode_Category_LL;
		case 0x1D5F4: return Unicode_Category_LL;
		case 0x1D5F5: return Unicode_Category_LL;
		case 0x1D5F6: return Unicode_Category_LL;
		case 0x1D5F7: return Unicode_Category_LL;
		case 0x1D5F8: return Unicode_Category_LL;
		case 0x1D5F9: return Unicode_Category_LL;
		case 0x1D5FA: return Unicode_Category_LL;
		case 0x1D5FB: return Unicode_Category_LL;
		case 0x1D5FC: return Unicode_Category_LL;
		case 0x1D5FD: return Unicode_Category_LL;
		case 0x1D5FE: return Unicode_Category_LL;
		case 0x1D5FF: return Unicode_Category_LL;
		case 0x1D600: return Unicode_Category_LL;
		case 0x1D601: return Unicode_Category_LL;
		case 0x1D602: return Unicode_Category_LL;
		case 0x1D603: return Unicode_Category_LL;
		case 0x1D604: return Unicode_Category_LL;
		case 0x1D605: return Unicode_Category_LL;
		case 0x1D606: return Unicode_Category_LL;
		case 0x1D607: return Unicode_Category_LL;
		case 0x1D608: return Unicode_Category_LU;
		case 0x1D609: return Unicode_Category_LU;
		case 0x1D60A: return Unicode_Category_LU;
		case 0x1D60B: return Unicode_Category_LU;
		case 0x1D60C: return Unicode_Category_LU;
		case 0x1D60D: return Unicode_Category_LU;
		case 0x1D60E: return Unicode_Category_LU;
		case 0x1D60F: return Unicode_Category_LU;
		case 0x1D610: return Unicode_Category_LU;
		case 0x1D611: return Unicode_Category_LU;
		case 0x1D612: return Unicode_Category_LU;
		case 0x1D613: return Unicode_Category_LU;
		case 0x1D614: return Unicode_Category_LU;
		case 0x1D615: return Unicode_Category_LU;
		case 0x1D616: return Unicode_Category_LU;
		case 0x1D617: return Unicode_Category_LU;
		case 0x1D618: return Unicode_Category_LU;
		case 0x1D619: return Unicode_Category_LU;
		case 0x1D61A: return Unicode_Category_LU;
		case 0x1D61B: return Unicode_Category_LU;
		case 0x1D61C: return Unicode_Category_LU;
		case 0x1D61D: return Unicode_Category_LU;
		case 0x1D61E: return Unicode_Category_LU;
		case 0x1D61F: return Unicode_Category_LU;
		case 0x1D620: return Unicode_Category_LU;
		case 0x1D621: return Unicode_Category_LU;
		case 0x1D622: return Unicode_Category_LL;
		case 0x1D623: return Unicode_Category_LL;
		case 0x1D624: return Unicode_Category_LL;
		case 0x1D625: return Unicode_Category_LL;
		case 0x1D626: return Unicode_Category_LL;
		case 0x1D627: return Unicode_Category_LL;
		case 0x1D628: return Unicode_Category_LL;
		case 0x1D629: return Unicode_Category_LL;
		case 0x1D62A: return Unicode_Category_LL;
		case 0x1D62B: return Unicode_Category_LL;
		case 0x1D62C: return Unicode_Category_LL;
		case 0x1D62D: return Unicode_Category_LL;
		case 0x1D62E: return Unicode_Category_LL;
		case 0x1D62F: return Unicode_Category_LL;
		case 0x1D630: return Unicode_Category_LL;
		case 0x1D631: return Unicode_Category_LL;
		case 0x1D632: return Unicode_Category_LL;
		case 0x1D633: return Unicode_Category_LL;
		case 0x1D634: return Unicode_Category_LL;
		case 0x1D635: return Unicode_Category_LL;
		case 0x1D636: return Unicode_Category_LL;
		case 0x1D637: return Unicode_Category_LL;
		case 0x1D638: return Unicode_Category_LL;
		case 0x1D639: return Unicode_Category_LL;
		case 0x1D63A: return Unicode_Category_LL;
		case 0x1D63B: return Unicode_Category_LL;
		case 0x1D63C: return Unicode_Category_LU;
		case 0x1D63D: return Unicode_Category_LU;
		case 0x1D63E: return Unicode_Category_LU;
		case 0x1D63F: return Unicode_Category_LU;
		case 0x1D640: return Unicode_Category_LU;
		case 0x1D641: return Unicode_Category_LU;
		case 0x1D642: return Unicode_Category_LU;
		case 0x1D643: return Unicode_Category_LU;
		case 0x1D644: return Unicode_Category_LU;
		case 0x1D645: return Unicode_Category_LU;
		case 0x1D646: return Unicode_Category_LU;
		case 0x1D647: return Unicode_Category_LU;
		case 0x1D648: return Unicode_Category_LU;
		case 0x1D649: return Unicode_Category_LU;
		case 0x1D64A: return Unicode_Category_LU;
		case 0x1D64B: return Unicode_Category_LU;
		case 0x1D64C: return Unicode_Category_LU;
		case 0x1D64D: return Unicode_Category_LU;
		case 0x1D64E: return Unicode_Category_LU;
		case 0x1D64F: return Unicode_Category_LU;
		case 0x1D650: return Unicode_Category_LU;
		case 0x1D651: return Unicode_Category_LU;
		case 0x1D652: return Unicode_Category_LU;
		case 0x1D653: return Unicode_Category_LU;
		case 0x1D654: return Unicode_Category_LU;
		case 0x1D655: return Unicode_Category_LU;
		case 0x1D656: return Unicode_Category_LL;
		case 0x1D657: return Unicode_Category_LL;
		case 0x1D658: return Unicode_Category_LL;
		case 0x1D659: return Unicode_Category_LL;
		case 0x1D65A: return Unicode_Category_LL;
		case 0x1D65B: return Unicode_Category_LL;
		case 0x1D65C: return Unicode_Category_LL;
		case 0x1D65D: return Unicode_Category_LL;
		case 0x1D65E: return Unicode_Category_LL;
		case 0x1D65F: return Unicode_Category_LL;
		case 0x1D660: return Unicode_Category_LL;
		case 0x1D661: return Unicode_Category_LL;
		case 0x1D662: return Unicode_Category_LL;
		case 0x1D663: return Unicode_Category_LL;
		case 0x1D664: return Unicode_Category_LL;
		case 0x1D665: return Unicode_Category_LL;
		case 0x1D666: return Unicode_Category_LL;
		case 0x1D667: return Unicode_Category_LL;
		case 0x1D668: return Unicode_Category_LL;
		case 0x1D669: return Unicode_Category_LL;
		case 0x1D66A: return Unicode_Category_LL;
		case 0x1D66B: return Unicode_Category_LL;
		case 0x1D66C: return Unicode_Category_LL;
		case 0x1D66D: return Unicode_Category_LL;
		case 0x1D66E: return Unicode_Category_LL;
		case 0x1D66F: return Unicode_Category_LL;
		case 0x1D670: return Unicode_Category_LU;
		case 0x1D671: return Unicode_Category_LU;
		case 0x1D672: return Unicode_Category_LU;
		case 0x1D673: return Unicode_Category_LU;
		case 0x1D674: return Unicode_Category_LU;
		case 0x1D675: return Unicode_Category_LU;
		case 0x1D676: return Unicode_Category_LU;
		case 0x1D677: return Unicode_Category_LU;
		case 0x1D678: return Unicode_Category_LU;
		case 0x1D679: return Unicode_Category_LU;
		case 0x1D67A: return Unicode_Category_LU;
		case 0x1D67B: return Unicode_Category_LU;
		case 0x1D67C: return Unicode_Category_LU;
		case 0x1D67D: return Unicode_Category_LU;
		case 0x1D67E: return Unicode_Category_LU;
		case 0x1D67F: return Unicode_Category_LU;
		case 0x1D680: return Unicode_Category_LU;
		case 0x1D681: return Unicode_Category_LU;
		case 0x1D682: return Unicode_Category_LU;
		case 0x1D683: return Unicode_Category_LU;
		case 0x1D684: return Unicode_Category_LU;
		case 0x1D685: return Unicode_Category_LU;
		case 0x1D686: return Unicode_Category_LU;
		case 0x1D687: return Unicode_Category_LU;
		case 0x1D688: return Unicode_Category_LU;
		case 0x1D689: return Unicode_Category_LU;
		case 0x1D68A: return Unicode_Category_LL;
		case 0x1D68B: return Unicode_Category_LL;
		case 0x1D68C: return Unicode_Category_LL;
		case 0x1D68D: return Unicode_Category_LL;
		case 0x1D68E: return Unicode_Category_LL;
		case 0x1D68F: return Unicode_Category_LL;
		case 0x1D690: return Unicode_Category_LL;
		case 0x1D691: return Unicode_Category_LL;
		case 0x1D692: return Unicode_Category_LL;
		case 0x1D693: return Unicode_Category_LL;
		case 0x1D694: return Unicode_Category_LL;
		case 0x1D695: return Unicode_Category_LL;
		case 0x1D696: return Unicode_Category_LL;
		case 0x1D697: return Unicode_Category_LL;
		case 0x1D698: return Unicode_Category_LL;
		case 0x1D699: return Unicode_Category_LL;
		case 0x1D69A: return Unicode_Category_LL;
		case 0x1D69B: return Unicode_Category_LL;
		case 0x1D69C: return Unicode_Category_LL;
		case 0x1D69D: return Unicode_Category_LL;
		case 0x1D69E: return Unicode_Category_LL;
		case 0x1D69F: return Unicode_Category_LL;
		case 0x1D6A0: return Unicode_Category_LL;
		case 0x1D6A1: return Unicode_Category_LL;
		case 0x1D6A2: return Unicode_Category_LL;
		case 0x1D6A3: return Unicode_Category_LL;
		case 0x1D6A4: return Unicode_Category_LL;
		case 0x1D6A5: return Unicode_Category_LL;
		case 0x1D6A8: return Unicode_Category_LU;
		case 0x1D6A9: return Unicode_Category_LU;
		case 0x1D6AA: return Unicode_Category_LU;
		case 0x1D6AB: return Unicode_Category_LU;
		case 0x1D6AC: return Unicode_Category_LU;
		case 0x1D6AD: return Unicode_Category_LU;
		case 0x1D6AE: return Unicode_Category_LU;
		case 0x1D6AF: return Unicode_Category_LU;
		case 0x1D6B0: return Unicode_Category_LU;
		case 0x1D6B1: return Unicode_Category_LU;
		case 0x1D6B2: return Unicode_Category_LU;
		case 0x1D6B3: return Unicode_Category_LU;
		case 0x1D6B4: return Unicode_Category_LU;
		case 0x1D6B5: return Unicode_Category_LU;
		case 0x1D6B6: return Unicode_Category_LU;
		case 0x1D6B7: return Unicode_Category_LU;
		case 0x1D6B8: return Unicode_Category_LU;
		case 0x1D6B9: return Unicode_Category_LU;
		case 0x1D6BA: return Unicode_Category_LU;
		case 0x1D6BB: return Unicode_Category_LU;
		case 0x1D6BC: return Unicode_Category_LU;
		case 0x1D6BD: return Unicode_Category_LU;
		case 0x1D6BE: return Unicode_Category_LU;
		case 0x1D6BF: return Unicode_Category_LU;
		case 0x1D6C0: return Unicode_Category_LU;
		case 0x1D6C1: return Unicode_Category_SM;
		case 0x1D6C2: return Unicode_Category_LL;
		case 0x1D6C3: return Unicode_Category_LL;
		case 0x1D6C4: return Unicode_Category_LL;
		case 0x1D6C5: return Unicode_Category_LL;
		case 0x1D6C6: return Unicode_Category_LL;
		case 0x1D6C7: return Unicode_Category_LL;
		case 0x1D6C8: return Unicode_Category_LL;
		case 0x1D6C9: return Unicode_Category_LL;
		case 0x1D6CA: return Unicode_Category_LL;
		case 0x1D6CB: return Unicode_Category_LL;
		case 0x1D6CC: return Unicode_Category_LL;
		case 0x1D6CD: return Unicode_Category_LL;
		case 0x1D6CE: return Unicode_Category_LL;
		case 0x1D6CF: return Unicode_Category_LL;
		case 0x1D6D0: return Unicode_Category_LL;
		case 0x1D6D1: return Unicode_Category_LL;
		case 0x1D6D2: return Unicode_Category_LL;
		case 0x1D6D3: return Unicode_Category_LL;
		case 0x1D6D4: return Unicode_Category_LL;
		case 0x1D6D5: return Unicode_Category_LL;
		case 0x1D6D6: return Unicode_Category_LL;
		case 0x1D6D7: return Unicode_Category_LL;
		case 0x1D6D8: return Unicode_Category_LL;
		case 0x1D6D9: return Unicode_Category_LL;
		case 0x1D6DA: return Unicode_Category_LL;
		case 0x1D6DB: return Unicode_Category_SM;
		case 0x1D6DC: return Unicode_Category_LL;
		case 0x1D6DD: return Unicode_Category_LL;
		case 0x1D6DE: return Unicode_Category_LL;
		case 0x1D6DF: return Unicode_Category_LL;
		case 0x1D6E0: return Unicode_Category_LL;
		case 0x1D6E1: return Unicode_Category_LL;
		case 0x1D6E2: return Unicode_Category_LU;
		case 0x1D6E3: return Unicode_Category_LU;
		case 0x1D6E4: return Unicode_Category_LU;
		case 0x1D6E5: return Unicode_Category_LU;
		case 0x1D6E6: return Unicode_Category_LU;
		case 0x1D6E7: return Unicode_Category_LU;
		case 0x1D6E8: return Unicode_Category_LU;
		case 0x1D6E9: return Unicode_Category_LU;
		case 0x1D6EA: return Unicode_Category_LU;
		case 0x1D6EB: return Unicode_Category_LU;
		case 0x1D6EC: return Unicode_Category_LU;
		case 0x1D6ED: return Unicode_Category_LU;
		case 0x1D6EE: return Unicode_Category_LU;
		case 0x1D6EF: return Unicode_Category_LU;
		case 0x1D6F0: return Unicode_Category_LU;
		case 0x1D6F1: return Unicode_Category_LU;
		case 0x1D6F2: return Unicode_Category_LU;
		case 0x1D6F3: return Unicode_Category_LU;
		case 0x1D6F4: return Unicode_Category_LU;
		case 0x1D6F5: return Unicode_Category_LU;
		case 0x1D6F6: return Unicode_Category_LU;
		case 0x1D6F7: return Unicode_Category_LU;
		case 0x1D6F8: return Unicode_Category_LU;
		case 0x1D6F9: return Unicode_Category_LU;
		case 0x1D6FA: return Unicode_Category_LU;
		case 0x1D6FB: return Unicode_Category_SM;
		case 0x1D6FC: return Unicode_Category_LL;
		case 0x1D6FD: return Unicode_Category_LL;
		case 0x1D6FE: return Unicode_Category_LL;
		case 0x1D6FF: return Unicode_Category_LL;
		case 0x1D700: return Unicode_Category_LL;
		case 0x1D701: return Unicode_Category_LL;
		case 0x1D702: return Unicode_Category_LL;
		case 0x1D703: return Unicode_Category_LL;
		case 0x1D704: return Unicode_Category_LL;
		case 0x1D705: return Unicode_Category_LL;
		case 0x1D706: return Unicode_Category_LL;
		case 0x1D707: return Unicode_Category_LL;
		case 0x1D708: return Unicode_Category_LL;
		case 0x1D709: return Unicode_Category_LL;
		case 0x1D70A: return Unicode_Category_LL;
		case 0x1D70B: return Unicode_Category_LL;
		case 0x1D70C: return Unicode_Category_LL;
		case 0x1D70D: return Unicode_Category_LL;
		case 0x1D70E: return Unicode_Category_LL;
		case 0x1D70F: return Unicode_Category_LL;
		case 0x1D710: return Unicode_Category_LL;
		case 0x1D711: return Unicode_Category_LL;
		case 0x1D712: return Unicode_Category_LL;
		case 0x1D713: return Unicode_Category_LL;
		case 0x1D714: return Unicode_Category_LL;
		case 0x1D715: return Unicode_Category_SM;
		case 0x1D716: return Unicode_Category_LL;
		case 0x1D717: return Unicode_Category_LL;
		case 0x1D718: return Unicode_Category_LL;
		case 0x1D719: return Unicode_Category_LL;
		case 0x1D71A: return Unicode_Category_LL;
		case 0x1D71B: return Unicode_Category_LL;
		case 0x1D71C: return Unicode_Category_LU;
		case 0x1D71D: return Unicode_Category_LU;
		case 0x1D71E: return Unicode_Category_LU;
		case 0x1D71F: return Unicode_Category_LU;
		case 0x1D720: return Unicode_Category_LU;
		case 0x1D721: return Unicode_Category_LU;
		case 0x1D722: return Unicode_Category_LU;
		case 0x1D723: return Unicode_Category_LU;
		case 0x1D724: return Unicode_Category_LU;
		case 0x1D725: return Unicode_Category_LU;
		case 0x1D726: return Unicode_Category_LU;
		case 0x1D727: return Unicode_Category_LU;
		case 0x1D728: return Unicode_Category_LU;
		case 0x1D729: return Unicode_Category_LU;
		case 0x1D72A: return Unicode_Category_LU;
		case 0x1D72B: return Unicode_Category_LU;
		case 0x1D72C: return Unicode_Category_LU;
		case 0x1D72D: return Unicode_Category_LU;
		case 0x1D72E: return Unicode_Category_LU;
		case 0x1D72F: return Unicode_Category_LU;
		case 0x1D730: return Unicode_Category_LU;
		case 0x1D731: return Unicode_Category_LU;
		case 0x1D732: return Unicode_Category_LU;
		case 0x1D733: return Unicode_Category_LU;
		case 0x1D734: return Unicode_Category_LU;
		case 0x1D735: return Unicode_Category_SM;
		case 0x1D736: return Unicode_Category_LL;
		case 0x1D737: return Unicode_Category_LL;
		case 0x1D738: return Unicode_Category_LL;
		case 0x1D739: return Unicode_Category_LL;
		case 0x1D73A: return Unicode_Category_LL;
		case 0x1D73B: return Unicode_Category_LL;
		case 0x1D73C: return Unicode_Category_LL;
		case 0x1D73D: return Unicode_Category_LL;
		case 0x1D73E: return Unicode_Category_LL;
		case 0x1D73F: return Unicode_Category_LL;
		case 0x1D740: return Unicode_Category_LL;
		case 0x1D741: return Unicode_Category_LL;
		case 0x1D742: return Unicode_Category_LL;
		case 0x1D743: return Unicode_Category_LL;
		case 0x1D744: return Unicode_Category_LL;
		case 0x1D745: return Unicode_Category_LL;
		case 0x1D746: return Unicode_Category_LL;
		case 0x1D747: return Unicode_Category_LL;
		case 0x1D748: return Unicode_Category_LL;
		case 0x1D749: return Unicode_Category_LL;
		case 0x1D74A: return Unicode_Category_LL;
		case 0x1D74B: return Unicode_Category_LL;
		case 0x1D74C: return Unicode_Category_LL;
		case 0x1D74D: return Unicode_Category_LL;
		case 0x1D74E: return Unicode_Category_LL;
		case 0x1D74F: return Unicode_Category_SM;
		case 0x1D750: return Unicode_Category_LL;
		case 0x1D751: return Unicode_Category_LL;
		case 0x1D752: return Unicode_Category_LL;
		case 0x1D753: return Unicode_Category_LL;
		case 0x1D754: return Unicode_Category_LL;
		case 0x1D755: return Unicode_Category_LL;
		case 0x1D756: return Unicode_Category_LU;
		case 0x1D757: return Unicode_Category_LU;
		case 0x1D758: return Unicode_Category_LU;
		case 0x1D759: return Unicode_Category_LU;
		case 0x1D75A: return Unicode_Category_LU;
		case 0x1D75B: return Unicode_Category_LU;
		case 0x1D75C: return Unicode_Category_LU;
		case 0x1D75D: return Unicode_Category_LU;
		case 0x1D75E: return Unicode_Category_LU;
		case 0x1D75F: return Unicode_Category_LU;
		case 0x1D760: return Unicode_Category_LU;
		case 0x1D761: return Unicode_Category_LU;
		case 0x1D762: return Unicode_Category_LU;
		case 0x1D763: return Unicode_Category_LU;
		case 0x1D764: return Unicode_Category_LU;
		case 0x1D765: return Unicode_Category_LU;
		case 0x1D766: return Unicode_Category_LU;
		case 0x1D767: return Unicode_Category_LU;
		case 0x1D768: return Unicode_Category_LU;
		case 0x1D769: return Unicode_Category_LU;
		case 0x1D76A: return Unicode_Category_LU;
		case 0x1D76B: return Unicode_Category_LU;
		case 0x1D76C: return Unicode_Category_LU;
		case 0x1D76D: return Unicode_Category_LU;
		case 0x1D76E: return Unicode_Category_LU;
		case 0x1D76F: return Unicode_Category_SM;
		case 0x1D770: return Unicode_Category_LL;
		case 0x1D771: return Unicode_Category_LL;
		case 0x1D772: return Unicode_Category_LL;
		case 0x1D773: return Unicode_Category_LL;
		case 0x1D774: return Unicode_Category_LL;
		case 0x1D775: return Unicode_Category_LL;
		case 0x1D776: return Unicode_Category_LL;
		case 0x1D777: return Unicode_Category_LL;
		case 0x1D778: return Unicode_Category_LL;
		case 0x1D779: return Unicode_Category_LL;
		case 0x1D77A: return Unicode_Category_LL;
		case 0x1D77B: return Unicode_Category_LL;
		case 0x1D77C: return Unicode_Category_LL;
		case 0x1D77D: return Unicode_Category_LL;
		case 0x1D77E: return Unicode_Category_LL;
		case 0x1D77F: return Unicode_Category_LL;
		case 0x1D780: return Unicode_Category_LL;
		case 0x1D781: return Unicode_Category_LL;
		case 0x1D782: return Unicode_Category_LL;
		case 0x1D783: return Unicode_Category_LL;
		case 0x1D784: return Unicode_Category_LL;
		case 0x1D785: return Unicode_Category_LL;
		case 0x1D786: return Unicode_Category_LL;
		case 0x1D787: return Unicode_Category_LL;
		case 0x1D788: return Unicode_Category_LL;
		case 0x1D789: return Unicode_Category_SM;
		case 0x1D78A: return Unicode_Category_LL;
		case 0x1D78B: return Unicode_Category_LL;
		case 0x1D78C: return Unicode_Category_LL;
		case 0x1D78D: return Unicode_Category_LL;
		case 0x1D78E: return Unicode_Category_LL;
		case 0x1D78F: return Unicode_Category_LL;
		case 0x1D790: return Unicode_Category_LU;
		case 0x1D791: return Unicode_Category_LU;
		case 0x1D792: return Unicode_Category_LU;
		case 0x1D793: return Unicode_Category_LU;
		case 0x1D794: return Unicode_Category_LU;
		case 0x1D795: return Unicode_Category_LU;
		case 0x1D796: return Unicode_Category_LU;
		case 0x1D797: return Unicode_Category_LU;
		case 0x1D798: return Unicode_Category_LU;
		case 0x1D799: return Unicode_Category_LU;
		case 0x1D79A: return Unicode_Category_LU;
		case 0x1D79B: return Unicode_Category_LU;
		case 0x1D79C: return Unicode_Category_LU;
		case 0x1D79D: return Unicode_Category_LU;
		case 0x1D79E: return Unicode_Category_LU;
		case 0x1D79F: return Unicode_Category_LU;
		case 0x1D7A0: return Unicode_Category_LU;
		case 0x1D7A1: return Unicode_Category_LU;
		case 0x1D7A2: return Unicode_Category_LU;
		case 0x1D7A3: return Unicode_Category_LU;
		case 0x1D7A4: return Unicode_Category_LU;
		case 0x1D7A5: return Unicode_Category_LU;
		case 0x1D7A6: return Unicode_Category_LU;
		case 0x1D7A7: return Unicode_Category_LU;
		case 0x1D7A8: return Unicode_Category_LU;
		case 0x1D7A9: return Unicode_Category_SM;
		case 0x1D7AA: return Unicode_Category_LL;
		case 0x1D7AB: return Unicode_Category_LL;
		case 0x1D7AC: return Unicode_Category_LL;
		case 0x1D7AD: return Unicode_Category_LL;
		case 0x1D7AE: return Unicode_Category_LL;
		case 0x1D7AF: return Unicode_Category_LL;
		case 0x1D7B0: return Unicode_Category_LL;
		case 0x1D7B1: return Unicode_Category_LL;
		case 0x1D7B2: return Unicode_Category_LL;
		case 0x1D7B3: return Unicode_Category_LL;
		case 0x1D7B4: return Unicode_Category_LL;
		case 0x1D7B5: return Unicode_Category_LL;
		case 0x1D7B6: return Unicode_Category_LL;
		case 0x1D7B7: return Unicode_Category_LL;
		case 0x1D7B8: return Unicode_Category_LL;
		case 0x1D7B9: return Unicode_Category_LL;
		case 0x1D7BA: return Unicode_Category_LL;
		case 0x1D7BB: return Unicode_Category_LL;
		case 0x1D7BC: return Unicode_Category_LL;
		case 0x1D7BD: return Unicode_Category_LL;
		case 0x1D7BE: return Unicode_Category_LL;
		case 0x1D7BF: return Unicode_Category_LL;
		case 0x1D7C0: return Unicode_Category_LL;
		case 0x1D7C1: return Unicode_Category_LL;
		case 0x1D7C2: return Unicode_Category_LL;
		case 0x1D7C3: return Unicode_Category_SM;
		case 0x1D7C4: return Unicode_Category_LL;
		case 0x1D7C5: return Unicode_Category_LL;
		case 0x1D7C6: return Unicode_Category_LL;
		case 0x1D7C7: return Unicode_Category_LL;
		case 0x1D7C8: return Unicode_Category_LL;
		case 0x1D7C9: return Unicode_Category_LL;
		case 0x1D7CA: return Unicode_Category_LU;
		case 0x1D7CB: return Unicode_Category_LL;
		case 0x1D7CE: return Unicode_Category_ND;
		case 0x1D7CF: return Unicode_Category_ND;
		case 0x1D7D0: return Unicode_Category_ND;
		case 0x1D7D1: return Unicode_Category_ND;
		case 0x1D7D2: return Unicode_Category_ND;
		case 0x1D7D3: return Unicode_Category_ND;
		case 0x1D7D4: return Unicode_Category_ND;
		case 0x1D7D5: return Unicode_Category_ND;
		case 0x1D7D6: return Unicode_Category_ND;
		case 0x1D7D7: return Unicode_Category_ND;
		case 0x1D7D8: return Unicode_Category_ND;
		case 0x1D7D9: return Unicode_Category_ND;
		case 0x1D7DA: return Unicode_Category_ND;
		case 0x1D7DB: return Unicode_Category_ND;
		case 0x1D7DC: return Unicode_Category_ND;
		case 0x1D7DD: return Unicode_Category_ND;
		case 0x1D7DE: return Unicode_Category_ND;
		case 0x1D7DF: return Unicode_Category_ND;
		case 0x1D7E0: return Unicode_Category_ND;
		case 0x1D7E1: return Unicode_Category_ND;
		case 0x1D7E2: return Unicode_Category_ND;
		case 0x1D7E3: return Unicode_Category_ND;
		case 0x1D7E4: return Unicode_Category_ND;
		case 0x1D7E5: return Unicode_Category_ND;
		case 0x1D7E6: return Unicode_Category_ND;
		case 0x1D7E7: return Unicode_Category_ND;
		case 0x1D7E8: return Unicode_Category_ND;
		case 0x1D7E9: return Unicode_Category_ND;
		case 0x1D7EA: return Unicode_Category_ND;
		case 0x1D7EB: return Unicode_Category_ND;
		case 0x1D7EC: return Unicode_Category_ND;
		case 0x1D7ED: return Unicode_Category_ND;
		case 0x1D7EE: return Unicode_Category_ND;
		case 0x1D7EF: return Unicode_Category_ND;
		case 0x1D7F0: return Unicode_Category_ND;
		case 0x1D7F1: return Unicode_Category_ND;
		case 0x1D7F2: return Unicode_Category_ND;
		case 0x1D7F3: return Unicode_Category_ND;
		case 0x1D7F4: return Unicode_Category_ND;
		case 0x1D7F5: return Unicode_Category_ND;
		case 0x1D7F6: return Unicode_Category_ND;
		case 0x1D7F7: return Unicode_Category_ND;
		case 0x1D7F8: return Unicode_Category_ND;
		case 0x1D7F9: return Unicode_Category_ND;
		case 0x1D7FA: return Unicode_Category_ND;
		case 0x1D7FB: return Unicode_Category_ND;
		case 0x1D7FC: return Unicode_Category_ND;
		case 0x1D7FD: return Unicode_Category_ND;
		case 0x1D7FE: return Unicode_Category_ND;
		case 0x1D7FF: return Unicode_Category_ND;
		case 0x1D800: return Unicode_Category_SO;
		case 0x1D801: return Unicode_Category_SO;
		case 0x1D802: return Unicode_Category_SO;
		case 0x1D803: return Unicode_Category_SO;
		case 0x1D804: return Unicode_Category_SO;
		case 0x1D805: return Unicode_Category_SO;
		case 0x1D806: return Unicode_Category_SO;
		case 0x1D807: return Unicode_Category_SO;
		case 0x1D808: return Unicode_Category_SO;
		case 0x1D809: return Unicode_Category_SO;
		case 0x1D80A: return Unicode_Category_SO;
		case 0x1D80B: return Unicode_Category_SO;
		case 0x1D80C: return Unicode_Category_SO;
		case 0x1D80D: return Unicode_Category_SO;
		case 0x1D80E: return Unicode_Category_SO;
		case 0x1D80F: return Unicode_Category_SO;
		case 0x1D810: return Unicode_Category_SO;
		case 0x1D811: return Unicode_Category_SO;
		case 0x1D812: return Unicode_Category_SO;
		case 0x1D813: return Unicode_Category_SO;
		case 0x1D814: return Unicode_Category_SO;
		case 0x1D815: return Unicode_Category_SO;
		case 0x1D816: return Unicode_Category_SO;
		case 0x1D817: return Unicode_Category_SO;
		case 0x1D818: return Unicode_Category_SO;
		case 0x1D819: return Unicode_Category_SO;
		case 0x1D81A: return Unicode_Category_SO;
		case 0x1D81B: return Unicode_Category_SO;
		case 0x1D81C: return Unicode_Category_SO;
		case 0x1D81D: return Unicode_Category_SO;
		case 0x1D81E: return Unicode_Category_SO;
		case 0x1D81F: return Unicode_Category_SO;
		case 0x1D820: return Unicode_Category_SO;
		case 0x1D821: return Unicode_Category_SO;
		case 0x1D822: return Unicode_Category_SO;
		case 0x1D823: return Unicode_Category_SO;
		case 0x1D824: return Unicode_Category_SO;
		case 0x1D825: return Unicode_Category_SO;
		case 0x1D826: return Unicode_Category_SO;
		case 0x1D827: return Unicode_Category_SO;
		case 0x1D828: return Unicode_Category_SO;
		case 0x1D829: return Unicode_Category_SO;
		case 0x1D82A: return Unicode_Category_SO;
		case 0x1D82B: return Unicode_Category_SO;
		case 0x1D82C: return Unicode_Category_SO;
		case 0x1D82D: return Unicode_Category_SO;
		case 0x1D82E: return Unicode_Category_SO;
		case 0x1D82F: return Unicode_Category_SO;
		case 0x1D830: return Unicode_Category_SO;
		case 0x1D831: return Unicode_Category_SO;
		case 0x1D832: return Unicode_Category_SO;
		case 0x1D833: return Unicode_Category_SO;
		case 0x1D834: return Unicode_Category_SO;
		case 0x1D835: return Unicode_Category_SO;
		case 0x1D836: return Unicode_Category_SO;
		case 0x1D837: return Unicode_Category_SO;
		case 0x1D838: return Unicode_Category_SO;
		case 0x1D839: return Unicode_Category_SO;
		case 0x1D83A: return Unicode_Category_SO;
		case 0x1D83B: return Unicode_Category_SO;
		case 0x1D83C: return Unicode_Category_SO;
		case 0x1D83D: return Unicode_Category_SO;
		case 0x1D83E: return Unicode_Category_SO;
		case 0x1D83F: return Unicode_Category_SO;
		case 0x1D840: return Unicode_Category_SO;
		case 0x1D841: return Unicode_Category_SO;
		case 0x1D842: return Unicode_Category_SO;
		case 0x1D843: return Unicode_Category_SO;
		case 0x1D844: return Unicode_Category_SO;
		case 0x1D845: return Unicode_Category_SO;
		case 0x1D846: return Unicode_Category_SO;
		case 0x1D847: return Unicode_Category_SO;
		case 0x1D848: return Unicode_Category_SO;
		case 0x1D849: return Unicode_Category_SO;
		case 0x1D84A: return Unicode_Category_SO;
		case 0x1D84B: return Unicode_Category_SO;
		case 0x1D84C: return Unicode_Category_SO;
		case 0x1D84D: return Unicode_Category_SO;
		case 0x1D84E: return Unicode_Category_SO;
		case 0x1D84F: return Unicode_Category_SO;
		case 0x1D850: return Unicode_Category_SO;
		case 0x1D851: return Unicode_Category_SO;
		case 0x1D852: return Unicode_Category_SO;
		case 0x1D853: return Unicode_Category_SO;
		case 0x1D854: return Unicode_Category_SO;
		case 0x1D855: return Unicode_Category_SO;
		case 0x1D856: return Unicode_Category_SO;
		case 0x1D857: return Unicode_Category_SO;
		case 0x1D858: return Unicode_Category_SO;
		case 0x1D859: return Unicode_Category_SO;
		case 0x1D85A: return Unicode_Category_SO;
		case 0x1D85B: return Unicode_Category_SO;
		case 0x1D85C: return Unicode_Category_SO;
		case 0x1D85D: return Unicode_Category_SO;
		case 0x1D85E: return Unicode_Category_SO;
		case 0x1D85F: return Unicode_Category_SO;
		case 0x1D860: return Unicode_Category_SO;
		case 0x1D861: return Unicode_Category_SO;
		case 0x1D862: return Unicode_Category_SO;
		case 0x1D863: return Unicode_Category_SO;
		case 0x1D864: return Unicode_Category_SO;
		case 0x1D865: return Unicode_Category_SO;
		case 0x1D866: return Unicode_Category_SO;
		case 0x1D867: return Unicode_Category_SO;
		case 0x1D868: return Unicode_Category_SO;
		case 0x1D869: return Unicode_Category_SO;
		case 0x1D86A: return Unicode_Category_SO;
		case 0x1D86B: return Unicode_Category_SO;
		case 0x1D86C: return Unicode_Category_SO;
		case 0x1D86D: return Unicode_Category_SO;
		case 0x1D86E: return Unicode_Category_SO;
		case 0x1D86F: return Unicode_Category_SO;
		case 0x1D870: return Unicode_Category_SO;
		case 0x1D871: return Unicode_Category_SO;
		case 0x1D872: return Unicode_Category_SO;
		case 0x1D873: return Unicode_Category_SO;
		case 0x1D874: return Unicode_Category_SO;
		case 0x1D875: return Unicode_Category_SO;
		case 0x1D876: return Unicode_Category_SO;
		case 0x1D877: return Unicode_Category_SO;
		case 0x1D878: return Unicode_Category_SO;
		case 0x1D879: return Unicode_Category_SO;
		case 0x1D87A: return Unicode_Category_SO;
		case 0x1D87B: return Unicode_Category_SO;
		case 0x1D87C: return Unicode_Category_SO;
		case 0x1D87D: return Unicode_Category_SO;
		case 0x1D87E: return Unicode_Category_SO;
		case 0x1D87F: return Unicode_Category_SO;
		case 0x1D880: return Unicode_Category_SO;
		case 0x1D881: return Unicode_Category_SO;
		case 0x1D882: return Unicode_Category_SO;
		case 0x1D883: return Unicode_Category_SO;
		case 0x1D884: return Unicode_Category_SO;
		case 0x1D885: return Unicode_Category_SO;
		case 0x1D886: return Unicode_Category_SO;
		case 0x1D887: return Unicode_Category_SO;
		case 0x1D888: return Unicode_Category_SO;
		case 0x1D889: return Unicode_Category_SO;
		case 0x1D88A: return Unicode_Category_SO;
		case 0x1D88B: return Unicode_Category_SO;
		case 0x1D88C: return Unicode_Category_SO;
		case 0x1D88D: return Unicode_Category_SO;
		case 0x1D88E: return Unicode_Category_SO;
		case 0x1D88F: return Unicode_Category_SO;
		case 0x1D890: return Unicode_Category_SO;
		case 0x1D891: return Unicode_Category_SO;
		case 0x1D892: return Unicode_Category_SO;
		case 0x1D893: return Unicode_Category_SO;
		case 0x1D894: return Unicode_Category_SO;
		case 0x1D895: return Unicode_Category_SO;
		case 0x1D896: return Unicode_Category_SO;
		case 0x1D897: return Unicode_Category_SO;
		case 0x1D898: return Unicode_Category_SO;
		case 0x1D899: return Unicode_Category_SO;
		case 0x1D89A: return Unicode_Category_SO;
		case 0x1D89B: return Unicode_Category_SO;
		case 0x1D89C: return Unicode_Category_SO;
		case 0x1D89D: return Unicode_Category_SO;
		case 0x1D89E: return Unicode_Category_SO;
		case 0x1D89F: return Unicode_Category_SO;
		case 0x1D8A0: return Unicode_Category_SO;
		case 0x1D8A1: return Unicode_Category_SO;
		case 0x1D8A2: return Unicode_Category_SO;
		case 0x1D8A3: return Unicode_Category_SO;
		case 0x1D8A4: return Unicode_Category_SO;
		case 0x1D8A5: return Unicode_Category_SO;
		case 0x1D8A6: return Unicode_Category_SO;
		case 0x1D8A7: return Unicode_Category_SO;
		case 0x1D8A8: return Unicode_Category_SO;
		case 0x1D8A9: return Unicode_Category_SO;
		case 0x1D8AA: return Unicode_Category_SO;
		case 0x1D8AB: return Unicode_Category_SO;
		case 0x1D8AC: return Unicode_Category_SO;
		case 0x1D8AD: return Unicode_Category_SO;
		case 0x1D8AE: return Unicode_Category_SO;
		case 0x1D8AF: return Unicode_Category_SO;
		case 0x1D8B0: return Unicode_Category_SO;
		case 0x1D8B1: return Unicode_Category_SO;
		case 0x1D8B2: return Unicode_Category_SO;
		case 0x1D8B3: return Unicode_Category_SO;
		case 0x1D8B4: return Unicode_Category_SO;
		case 0x1D8B5: return Unicode_Category_SO;
		case 0x1D8B6: return Unicode_Category_SO;
		case 0x1D8B7: return Unicode_Category_SO;
		case 0x1D8B8: return Unicode_Category_SO;
		case 0x1D8B9: return Unicode_Category_SO;
		case 0x1D8BA: return Unicode_Category_SO;
		case 0x1D8BB: return Unicode_Category_SO;
		case 0x1D8BC: return Unicode_Category_SO;
		case 0x1D8BD: return Unicode_Category_SO;
		case 0x1D8BE: return Unicode_Category_SO;
		case 0x1D8BF: return Unicode_Category_SO;
		case 0x1D8C0: return Unicode_Category_SO;
		case 0x1D8C1: return Unicode_Category_SO;
		case 0x1D8C2: return Unicode_Category_SO;
		case 0x1D8C3: return Unicode_Category_SO;
		case 0x1D8C4: return Unicode_Category_SO;
		case 0x1D8C5: return Unicode_Category_SO;
		case 0x1D8C6: return Unicode_Category_SO;
		case 0x1D8C7: return Unicode_Category_SO;
		case 0x1D8C8: return Unicode_Category_SO;
		case 0x1D8C9: return Unicode_Category_SO;
		case 0x1D8CA: return Unicode_Category_SO;
		case 0x1D8CB: return Unicode_Category_SO;
		case 0x1D8CC: return Unicode_Category_SO;
		case 0x1D8CD: return Unicode_Category_SO;
		case 0x1D8CE: return Unicode_Category_SO;
		case 0x1D8CF: return Unicode_Category_SO;
		case 0x1D8D0: return Unicode_Category_SO;
		case 0x1D8D1: return Unicode_Category_SO;
		case 0x1D8D2: return Unicode_Category_SO;
		case 0x1D8D3: return Unicode_Category_SO;
		case 0x1D8D4: return Unicode_Category_SO;
		case 0x1D8D5: return Unicode_Category_SO;
		case 0x1D8D6: return Unicode_Category_SO;
		case 0x1D8D7: return Unicode_Category_SO;
		case 0x1D8D8: return Unicode_Category_SO;
		case 0x1D8D9: return Unicode_Category_SO;
		case 0x1D8DA: return Unicode_Category_SO;
		case 0x1D8DB: return Unicode_Category_SO;
		case 0x1D8DC: return Unicode_Category_SO;
		case 0x1D8DD: return Unicode_Category_SO;
		case 0x1D8DE: return Unicode_Category_SO;
		case 0x1D8DF: return Unicode_Category_SO;
		case 0x1D8E0: return Unicode_Category_SO;
		case 0x1D8E1: return Unicode_Category_SO;
		case 0x1D8E2: return Unicode_Category_SO;
		case 0x1D8E3: return Unicode_Category_SO;
		case 0x1D8E4: return Unicode_Category_SO;
		case 0x1D8E5: return Unicode_Category_SO;
		case 0x1D8E6: return Unicode_Category_SO;
		case 0x1D8E7: return Unicode_Category_SO;
		case 0x1D8E8: return Unicode_Category_SO;
		case 0x1D8E9: return Unicode_Category_SO;
		case 0x1D8EA: return Unicode_Category_SO;
		case 0x1D8EB: return Unicode_Category_SO;
		case 0x1D8EC: return Unicode_Category_SO;
		case 0x1D8ED: return Unicode_Category_SO;
		case 0x1D8EE: return Unicode_Category_SO;
		case 0x1D8EF: return Unicode_Category_SO;
		case 0x1D8F0: return Unicode_Category_SO;
		case 0x1D8F1: return Unicode_Category_SO;
		case 0x1D8F2: return Unicode_Category_SO;
		case 0x1D8F3: return Unicode_Category_SO;
		case 0x1D8F4: return Unicode_Category_SO;
		case 0x1D8F5: return Unicode_Category_SO;
		case 0x1D8F6: return Unicode_Category_SO;
		case 0x1D8F7: return Unicode_Category_SO;
		case 0x1D8F8: return Unicode_Category_SO;
		case 0x1D8F9: return Unicode_Category_SO;
		case 0x1D8FA: return Unicode_Category_SO;
		case 0x1D8FB: return Unicode_Category_SO;
		case 0x1D8FC: return Unicode_Category_SO;
		case 0x1D8FD: return Unicode_Category_SO;
		case 0x1D8FE: return Unicode_Category_SO;
		case 0x1D8FF: return Unicode_Category_SO;
		case 0x1D900: return Unicode_Category_SO;
		case 0x1D901: return Unicode_Category_SO;
		case 0x1D902: return Unicode_Category_SO;
		case 0x1D903: return Unicode_Category_SO;
		case 0x1D904: return Unicode_Category_SO;
		case 0x1D905: return Unicode_Category_SO;
		case 0x1D906: return Unicode_Category_SO;
		case 0x1D907: return Unicode_Category_SO;
		case 0x1D908: return Unicode_Category_SO;
		case 0x1D909: return Unicode_Category_SO;
		case 0x1D90A: return Unicode_Category_SO;
		case 0x1D90B: return Unicode_Category_SO;
		case 0x1D90C: return Unicode_Category_SO;
		case 0x1D90D: return Unicode_Category_SO;
		case 0x1D90E: return Unicode_Category_SO;
		case 0x1D90F: return Unicode_Category_SO;
		case 0x1D910: return Unicode_Category_SO;
		case 0x1D911: return Unicode_Category_SO;
		case 0x1D912: return Unicode_Category_SO;
		case 0x1D913: return Unicode_Category_SO;
		case 0x1D914: return Unicode_Category_SO;
		case 0x1D915: return Unicode_Category_SO;
		case 0x1D916: return Unicode_Category_SO;
		case 0x1D917: return Unicode_Category_SO;
		case 0x1D918: return Unicode_Category_SO;
		case 0x1D919: return Unicode_Category_SO;
		case 0x1D91A: return Unicode_Category_SO;
		case 0x1D91B: return Unicode_Category_SO;
		case 0x1D91C: return Unicode_Category_SO;
		case 0x1D91D: return Unicode_Category_SO;
		case 0x1D91E: return Unicode_Category_SO;
		case 0x1D91F: return Unicode_Category_SO;
		case 0x1D920: return Unicode_Category_SO;
		case 0x1D921: return Unicode_Category_SO;
		case 0x1D922: return Unicode_Category_SO;
		case 0x1D923: return Unicode_Category_SO;
		case 0x1D924: return Unicode_Category_SO;
		case 0x1D925: return Unicode_Category_SO;
		case 0x1D926: return Unicode_Category_SO;
		case 0x1D927: return Unicode_Category_SO;
		case 0x1D928: return Unicode_Category_SO;
		case 0x1D929: return Unicode_Category_SO;
		case 0x1D92A: return Unicode_Category_SO;
		case 0x1D92B: return Unicode_Category_SO;
		case 0x1D92C: return Unicode_Category_SO;
		case 0x1D92D: return Unicode_Category_SO;
		case 0x1D92E: return Unicode_Category_SO;
		case 0x1D92F: return Unicode_Category_SO;
		case 0x1D930: return Unicode_Category_SO;
		case 0x1D931: return Unicode_Category_SO;
		case 0x1D932: return Unicode_Category_SO;
		case 0x1D933: return Unicode_Category_SO;
		case 0x1D934: return Unicode_Category_SO;
		case 0x1D935: return Unicode_Category_SO;
		case 0x1D936: return Unicode_Category_SO;
		case 0x1D937: return Unicode_Category_SO;
		case 0x1D938: return Unicode_Category_SO;
		case 0x1D939: return Unicode_Category_SO;
		case 0x1D93A: return Unicode_Category_SO;
		case 0x1D93B: return Unicode_Category_SO;
		case 0x1D93C: return Unicode_Category_SO;
		case 0x1D93D: return Unicode_Category_SO;
		case 0x1D93E: return Unicode_Category_SO;
		case 0x1D93F: return Unicode_Category_SO;
		case 0x1D940: return Unicode_Category_SO;
		case 0x1D941: return Unicode_Category_SO;
		case 0x1D942: return Unicode_Category_SO;
		case 0x1D943: return Unicode_Category_SO;
		case 0x1D944: return Unicode_Category_SO;
		case 0x1D945: return Unicode_Category_SO;
		case 0x1D946: return Unicode_Category_SO;
		case 0x1D947: return Unicode_Category_SO;
		case 0x1D948: return Unicode_Category_SO;
		case 0x1D949: return Unicode_Category_SO;
		case 0x1D94A: return Unicode_Category_SO;
		case 0x1D94B: return Unicode_Category_SO;
		case 0x1D94C: return Unicode_Category_SO;
		case 0x1D94D: return Unicode_Category_SO;
		case 0x1D94E: return Unicode_Category_SO;
		case 0x1D94F: return Unicode_Category_SO;
		case 0x1D950: return Unicode_Category_SO;
		case 0x1D951: return Unicode_Category_SO;
		case 0x1D952: return Unicode_Category_SO;
		case 0x1D953: return Unicode_Category_SO;
		case 0x1D954: return Unicode_Category_SO;
		case 0x1D955: return Unicode_Category_SO;
		case 0x1D956: return Unicode_Category_SO;
		case 0x1D957: return Unicode_Category_SO;
		case 0x1D958: return Unicode_Category_SO;
		case 0x1D959: return Unicode_Category_SO;
		case 0x1D95A: return Unicode_Category_SO;
		case 0x1D95B: return Unicode_Category_SO;
		case 0x1D95C: return Unicode_Category_SO;
		case 0x1D95D: return Unicode_Category_SO;
		case 0x1D95E: return Unicode_Category_SO;
		case 0x1D95F: return Unicode_Category_SO;
		case 0x1D960: return Unicode_Category_SO;
		case 0x1D961: return Unicode_Category_SO;
		case 0x1D962: return Unicode_Category_SO;
		case 0x1D963: return Unicode_Category_SO;
		case 0x1D964: return Unicode_Category_SO;
		case 0x1D965: return Unicode_Category_SO;
		case 0x1D966: return Unicode_Category_SO;
		case 0x1D967: return Unicode_Category_SO;
		case 0x1D968: return Unicode_Category_SO;
		case 0x1D969: return Unicode_Category_SO;
		case 0x1D96A: return Unicode_Category_SO;
		case 0x1D96B: return Unicode_Category_SO;
		case 0x1D96C: return Unicode_Category_SO;
		case 0x1D96D: return Unicode_Category_SO;
		case 0x1D96E: return Unicode_Category_SO;
		case 0x1D96F: return Unicode_Category_SO;
		case 0x1D970: return Unicode_Category_SO;
		case 0x1D971: return Unicode_Category_SO;
		case 0x1D972: return Unicode_Category_SO;
		case 0x1D973: return Unicode_Category_SO;
		case 0x1D974: return Unicode_Category_SO;
		case 0x1D975: return Unicode_Category_SO;
		case 0x1D976: return Unicode_Category_SO;
		case 0x1D977: return Unicode_Category_SO;
		case 0x1D978: return Unicode_Category_SO;
		case 0x1D979: return Unicode_Category_SO;
		case 0x1D97A: return Unicode_Category_SO;
		case 0x1D97B: return Unicode_Category_SO;
		case 0x1D97C: return Unicode_Category_SO;
		case 0x1D97D: return Unicode_Category_SO;
		case 0x1D97E: return Unicode_Category_SO;
		case 0x1D97F: return Unicode_Category_SO;
		case 0x1D980: return Unicode_Category_SO;
		case 0x1D981: return Unicode_Category_SO;
		case 0x1D982: return Unicode_Category_SO;
		case 0x1D983: return Unicode_Category_SO;
		case 0x1D984: return Unicode_Category_SO;
		case 0x1D985: return Unicode_Category_SO;
		case 0x1D986: return Unicode_Category_SO;
		case 0x1D987: return Unicode_Category_SO;
		case 0x1D988: return Unicode_Category_SO;
		case 0x1D989: return Unicode_Category_SO;
		case 0x1D98A: return Unicode_Category_SO;
		case 0x1D98B: return Unicode_Category_SO;
		case 0x1D98C: return Unicode_Category_SO;
		case 0x1D98D: return Unicode_Category_SO;
		case 0x1D98E: return Unicode_Category_SO;
		case 0x1D98F: return Unicode_Category_SO;
		case 0x1D990: return Unicode_Category_SO;
		case 0x1D991: return Unicode_Category_SO;
		case 0x1D992: return Unicode_Category_SO;
		case 0x1D993: return Unicode_Category_SO;
		case 0x1D994: return Unicode_Category_SO;
		case 0x1D995: return Unicode_Category_SO;
		case 0x1D996: return Unicode_Category_SO;
		case 0x1D997: return Unicode_Category_SO;
		case 0x1D998: return Unicode_Category_SO;
		case 0x1D999: return Unicode_Category_SO;
		case 0x1D99A: return Unicode_Category_SO;
		case 0x1D99B: return Unicode_Category_SO;
		case 0x1D99C: return Unicode_Category_SO;
		case 0x1D99D: return Unicode_Category_SO;
		case 0x1D99E: return Unicode_Category_SO;
		case 0x1D99F: return Unicode_Category_SO;
		case 0x1D9A0: return Unicode_Category_SO;
		case 0x1D9A1: return Unicode_Category_SO;
		case 0x1D9A2: return Unicode_Category_SO;
		case 0x1D9A3: return Unicode_Category_SO;
		case 0x1D9A4: return Unicode_Category_SO;
		case 0x1D9A5: return Unicode_Category_SO;
		case 0x1D9A6: return Unicode_Category_SO;
		case 0x1D9A7: return Unicode_Category_SO;
		case 0x1D9A8: return Unicode_Category_SO;
		case 0x1D9A9: return Unicode_Category_SO;
		case 0x1D9AA: return Unicode_Category_SO;
		case 0x1D9AB: return Unicode_Category_SO;
		case 0x1D9AC: return Unicode_Category_SO;
		case 0x1D9AD: return Unicode_Category_SO;
		case 0x1D9AE: return Unicode_Category_SO;
		case 0x1D9AF: return Unicode_Category_SO;
		case 0x1D9B0: return Unicode_Category_SO;
		case 0x1D9B1: return Unicode_Category_SO;
		case 0x1D9B2: return Unicode_Category_SO;
		case 0x1D9B3: return Unicode_Category_SO;
		case 0x1D9B4: return Unicode_Category_SO;
		case 0x1D9B5: return Unicode_Category_SO;
		case 0x1D9B6: return Unicode_Category_SO;
		case 0x1D9B7: return Unicode_Category_SO;
		case 0x1D9B8: return Unicode_Category_SO;
		case 0x1D9B9: return Unicode_Category_SO;
		case 0x1D9BA: return Unicode_Category_SO;
		case 0x1D9BB: return Unicode_Category_SO;
		case 0x1D9BC: return Unicode_Category_SO;
		case 0x1D9BD: return Unicode_Category_SO;
		case 0x1D9BE: return Unicode_Category_SO;
		case 0x1D9BF: return Unicode_Category_SO;
		case 0x1D9C0: return Unicode_Category_SO;
		case 0x1D9C1: return Unicode_Category_SO;
		case 0x1D9C2: return Unicode_Category_SO;
		case 0x1D9C3: return Unicode_Category_SO;
		case 0x1D9C4: return Unicode_Category_SO;
		case 0x1D9C5: return Unicode_Category_SO;
		case 0x1D9C6: return Unicode_Category_SO;
		case 0x1D9C7: return Unicode_Category_SO;
		case 0x1D9C8: return Unicode_Category_SO;
		case 0x1D9C9: return Unicode_Category_SO;
		case 0x1D9CA: return Unicode_Category_SO;
		case 0x1D9CB: return Unicode_Category_SO;
		case 0x1D9CC: return Unicode_Category_SO;
		case 0x1D9CD: return Unicode_Category_SO;
		case 0x1D9CE: return Unicode_Category_SO;
		case 0x1D9CF: return Unicode_Category_SO;
		case 0x1D9D0: return Unicode_Category_SO;
		case 0x1D9D1: return Unicode_Category_SO;
		case 0x1D9D2: return Unicode_Category_SO;
		case 0x1D9D3: return Unicode_Category_SO;
		case 0x1D9D4: return Unicode_Category_SO;
		case 0x1D9D5: return Unicode_Category_SO;
		case 0x1D9D6: return Unicode_Category_SO;
		case 0x1D9D7: return Unicode_Category_SO;
		case 0x1D9D8: return Unicode_Category_SO;
		case 0x1D9D9: return Unicode_Category_SO;
		case 0x1D9DA: return Unicode_Category_SO;
		case 0x1D9DB: return Unicode_Category_SO;
		case 0x1D9DC: return Unicode_Category_SO;
		case 0x1D9DD: return Unicode_Category_SO;
		case 0x1D9DE: return Unicode_Category_SO;
		case 0x1D9DF: return Unicode_Category_SO;
		case 0x1D9E0: return Unicode_Category_SO;
		case 0x1D9E1: return Unicode_Category_SO;
		case 0x1D9E2: return Unicode_Category_SO;
		case 0x1D9E3: return Unicode_Category_SO;
		case 0x1D9E4: return Unicode_Category_SO;
		case 0x1D9E5: return Unicode_Category_SO;
		case 0x1D9E6: return Unicode_Category_SO;
		case 0x1D9E7: return Unicode_Category_SO;
		case 0x1D9E8: return Unicode_Category_SO;
		case 0x1D9E9: return Unicode_Category_SO;
		case 0x1D9EA: return Unicode_Category_SO;
		case 0x1D9EB: return Unicode_Category_SO;
		case 0x1D9EC: return Unicode_Category_SO;
		case 0x1D9ED: return Unicode_Category_SO;
		case 0x1D9EE: return Unicode_Category_SO;
		case 0x1D9EF: return Unicode_Category_SO;
		case 0x1D9F0: return Unicode_Category_SO;
		case 0x1D9F1: return Unicode_Category_SO;
		case 0x1D9F2: return Unicode_Category_SO;
		case 0x1D9F3: return Unicode_Category_SO;
		case 0x1D9F4: return Unicode_Category_SO;
		case 0x1D9F5: return Unicode_Category_SO;
		case 0x1D9F6: return Unicode_Category_SO;
		case 0x1D9F7: return Unicode_Category_SO;
		case 0x1D9F8: return Unicode_Category_SO;
		case 0x1D9F9: return Unicode_Category_SO;
		case 0x1D9FA: return Unicode_Category_SO;
		case 0x1D9FB: return Unicode_Category_SO;
		case 0x1D9FC: return Unicode_Category_SO;
		case 0x1D9FD: return Unicode_Category_SO;
		case 0x1D9FE: return Unicode_Category_SO;
		case 0x1D9FF: return Unicode_Category_SO;
		case 0x1DA00: return Unicode_Category_MN;
		case 0x1DA01: return Unicode_Category_MN;
		case 0x1DA02: return Unicode_Category_MN;
		case 0x1DA03: return Unicode_Category_MN;
		case 0x1DA04: return Unicode_Category_MN;
		case 0x1DA05: return Unicode_Category_MN;
		case 0x1DA06: return Unicode_Category_MN;
		case 0x1DA07: return Unicode_Category_MN;
		case 0x1DA08: return Unicode_Category_MN;
		case 0x1DA09: return Unicode_Category_MN;
		case 0x1DA0A: return Unicode_Category_MN;
		case 0x1DA0B: return Unicode_Category_MN;
		case 0x1DA0C: return Unicode_Category_MN;
		case 0x1DA0D: return Unicode_Category_MN;
		case 0x1DA0E: return Unicode_Category_MN;
		case 0x1DA0F: return Unicode_Category_MN;
		case 0x1DA10: return Unicode_Category_MN;
		case 0x1DA11: return Unicode_Category_MN;
		case 0x1DA12: return Unicode_Category_MN;
		case 0x1DA13: return Unicode_Category_MN;
		case 0x1DA14: return Unicode_Category_MN;
		case 0x1DA15: return Unicode_Category_MN;
		case 0x1DA16: return Unicode_Category_MN;
		case 0x1DA17: return Unicode_Category_MN;
		case 0x1DA18: return Unicode_Category_MN;
		case 0x1DA19: return Unicode_Category_MN;
		case 0x1DA1A: return Unicode_Category_MN;
		case 0x1DA1B: return Unicode_Category_MN;
		case 0x1DA1C: return Unicode_Category_MN;
		case 0x1DA1D: return Unicode_Category_MN;
		case 0x1DA1E: return Unicode_Category_MN;
		case 0x1DA1F: return Unicode_Category_MN;
		case 0x1DA20: return Unicode_Category_MN;
		case 0x1DA21: return Unicode_Category_MN;
		case 0x1DA22: return Unicode_Category_MN;
		case 0x1DA23: return Unicode_Category_MN;
		case 0x1DA24: return Unicode_Category_MN;
		case 0x1DA25: return Unicode_Category_MN;
		case 0x1DA26: return Unicode_Category_MN;
		case 0x1DA27: return Unicode_Category_MN;
		case 0x1DA28: return Unicode_Category_MN;
		case 0x1DA29: return Unicode_Category_MN;
		case 0x1DA2A: return Unicode_Category_MN;
		case 0x1DA2B: return Unicode_Category_MN;
		case 0x1DA2C: return Unicode_Category_MN;
		case 0x1DA2D: return Unicode_Category_MN;
		case 0x1DA2E: return Unicode_Category_MN;
		case 0x1DA2F: return Unicode_Category_MN;
		case 0x1DA30: return Unicode_Category_MN;
		case 0x1DA31: return Unicode_Category_MN;
		case 0x1DA32: return Unicode_Category_MN;
		case 0x1DA33: return Unicode_Category_MN;
		case 0x1DA34: return Unicode_Category_MN;
		case 0x1DA35: return Unicode_Category_MN;
		case 0x1DA36: return Unicode_Category_MN;
		case 0x1DA37: return Unicode_Category_SO;
		case 0x1DA38: return Unicode_Category_SO;
		case 0x1DA39: return Unicode_Category_SO;
		case 0x1DA3A: return Unicode_Category_SO;
		case 0x1DA3B: return Unicode_Category_MN;
		case 0x1DA3C: return Unicode_Category_MN;
		case 0x1DA3D: return Unicode_Category_MN;
		case 0x1DA3E: return Unicode_Category_MN;
		case 0x1DA3F: return Unicode_Category_MN;
		case 0x1DA40: return Unicode_Category_MN;
		case 0x1DA41: return Unicode_Category_MN;
		case 0x1DA42: return Unicode_Category_MN;
		case 0x1DA43: return Unicode_Category_MN;
		case 0x1DA44: return Unicode_Category_MN;
		case 0x1DA45: return Unicode_Category_MN;
		case 0x1DA46: return Unicode_Category_MN;
		case 0x1DA47: return Unicode_Category_MN;
		case 0x1DA48: return Unicode_Category_MN;
		case 0x1DA49: return Unicode_Category_MN;
		case 0x1DA4A: return Unicode_Category_MN;
		case 0x1DA4B: return Unicode_Category_MN;
		case 0x1DA4C: return Unicode_Category_MN;
		case 0x1DA4D: return Unicode_Category_MN;
		case 0x1DA4E: return Unicode_Category_MN;
		case 0x1DA4F: return Unicode_Category_MN;
		case 0x1DA50: return Unicode_Category_MN;
		case 0x1DA51: return Unicode_Category_MN;
		case 0x1DA52: return Unicode_Category_MN;
		case 0x1DA53: return Unicode_Category_MN;
		case 0x1DA54: return Unicode_Category_MN;
		case 0x1DA55: return Unicode_Category_MN;
		case 0x1DA56: return Unicode_Category_MN;
		case 0x1DA57: return Unicode_Category_MN;
		case 0x1DA58: return Unicode_Category_MN;
		case 0x1DA59: return Unicode_Category_MN;
		case 0x1DA5A: return Unicode_Category_MN;
		case 0x1DA5B: return Unicode_Category_MN;
		case 0x1DA5C: return Unicode_Category_MN;
		case 0x1DA5D: return Unicode_Category_MN;
		case 0x1DA5E: return Unicode_Category_MN;
		case 0x1DA5F: return Unicode_Category_MN;
		case 0x1DA60: return Unicode_Category_MN;
		case 0x1DA61: return Unicode_Category_MN;
		case 0x1DA62: return Unicode_Category_MN;
		case 0x1DA63: return Unicode_Category_MN;
		case 0x1DA64: return Unicode_Category_MN;
		case 0x1DA65: return Unicode_Category_MN;
		case 0x1DA66: return Unicode_Category_MN;
		case 0x1DA67: return Unicode_Category_MN;
		case 0x1DA68: return Unicode_Category_MN;
		case 0x1DA69: return Unicode_Category_MN;
		case 0x1DA6A: return Unicode_Category_MN;
		case 0x1DA6B: return Unicode_Category_MN;
		case 0x1DA6C: return Unicode_Category_MN;
		case 0x1DA6D: return Unicode_Category_SO;
		case 0x1DA6E: return Unicode_Category_SO;
		case 0x1DA6F: return Unicode_Category_SO;
		case 0x1DA70: return Unicode_Category_SO;
		case 0x1DA71: return Unicode_Category_SO;
		case 0x1DA72: return Unicode_Category_SO;
		case 0x1DA73: return Unicode_Category_SO;
		case 0x1DA74: return Unicode_Category_SO;
		case 0x1DA75: return Unicode_Category_MN;
		case 0x1DA76: return Unicode_Category_SO;
		case 0x1DA77: return Unicode_Category_SO;
		case 0x1DA78: return Unicode_Category_SO;
		case 0x1DA79: return Unicode_Category_SO;
		case 0x1DA7A: return Unicode_Category_SO;
		case 0x1DA7B: return Unicode_Category_SO;
		case 0x1DA7C: return Unicode_Category_SO;
		case 0x1DA7D: return Unicode_Category_SO;
		case 0x1DA7E: return Unicode_Category_SO;
		case 0x1DA7F: return Unicode_Category_SO;
		case 0x1DA80: return Unicode_Category_SO;
		case 0x1DA81: return Unicode_Category_SO;
		case 0x1DA82: return Unicode_Category_SO;
		case 0x1DA83: return Unicode_Category_SO;
		case 0x1DA84: return Unicode_Category_MN;
		case 0x1DA85: return Unicode_Category_SO;
		case 0x1DA86: return Unicode_Category_SO;
		case 0x1DA87: return Unicode_Category_PO;
		case 0x1DA88: return Unicode_Category_PO;
		case 0x1DA89: return Unicode_Category_PO;
		case 0x1DA8A: return Unicode_Category_PO;
		case 0x1DA8B: return Unicode_Category_PO;
		case 0x1DA9B: return Unicode_Category_MN;
		case 0x1DA9C: return Unicode_Category_MN;
		case 0x1DA9D: return Unicode_Category_MN;
		case 0x1DA9E: return Unicode_Category_MN;
		case 0x1DA9F: return Unicode_Category_MN;
		case 0x1DAA1: return Unicode_Category_MN;
		case 0x1DAA2: return Unicode_Category_MN;
		case 0x1DAA3: return Unicode_Category_MN;
		case 0x1DAA4: return Unicode_Category_MN;
		case 0x1DAA5: return Unicode_Category_MN;
		case 0x1DAA6: return Unicode_Category_MN;
		case 0x1DAA7: return Unicode_Category_MN;
		case 0x1DAA8: return Unicode_Category_MN;
		case 0x1DAA9: return Unicode_Category_MN;
		case 0x1DAAA: return Unicode_Category_MN;
		case 0x1DAAB: return Unicode_Category_MN;
		case 0x1DAAC: return Unicode_Category_MN;
		case 0x1DAAD: return Unicode_Category_MN;
		case 0x1DAAE: return Unicode_Category_MN;
		case 0x1DAAF: return Unicode_Category_MN;
		case 0x1E000: return Unicode_Category_MN;
		case 0x1E001: return Unicode_Category_MN;
		case 0x1E002: return Unicode_Category_MN;
		case 0x1E003: return Unicode_Category_MN;
		case 0x1E004: return Unicode_Category_MN;
		case 0x1E005: return Unicode_Category_MN;
		case 0x1E006: return Unicode_Category_MN;
		case 0x1E008: return Unicode_Category_MN;
		case 0x1E009: return Unicode_Category_MN;
		case 0x1E00A: return Unicode_Category_MN;
		case 0x1E00B: return Unicode_Category_MN;
		case 0x1E00C: return Unicode_Category_MN;
		case 0x1E00D: return Unicode_Category_MN;
		case 0x1E00E: return Unicode_Category_MN;
		case 0x1E00F: return Unicode_Category_MN;
		case 0x1E010: return Unicode_Category_MN;
		case 0x1E011: return Unicode_Category_MN;
		case 0x1E012: return Unicode_Category_MN;
		case 0x1E013: return Unicode_Category_MN;
		case 0x1E014: return Unicode_Category_MN;
		case 0x1E015: return Unicode_Category_MN;
		case 0x1E016: return Unicode_Category_MN;
		case 0x1E017: return Unicode_Category_MN;
		case 0x1E018: return Unicode_Category_MN;
		case 0x1E01B: return Unicode_Category_MN;
		case 0x1E01C: return Unicode_Category_MN;
		case 0x1E01D: return Unicode_Category_MN;
		case 0x1E01E: return Unicode_Category_MN;
		case 0x1E01F: return Unicode_Category_MN;
		case 0x1E020: return Unicode_Category_MN;
		case 0x1E021: return Unicode_Category_MN;
		case 0x1E023: return Unicode_Category_MN;
		case 0x1E024: return Unicode_Category_MN;
		case 0x1E026: return Unicode_Category_MN;
		case 0x1E027: return Unicode_Category_MN;
		case 0x1E028: return Unicode_Category_MN;
		case 0x1E029: return Unicode_Category_MN;
		case 0x1E02A: return Unicode_Category_MN;
		case 0x1E100: return Unicode_Category_LO;
		case 0x1E101: return Unicode_Category_LO;
		case 0x1E102: return Unicode_Category_LO;
		case 0x1E103: return Unicode_Category_LO;
		case 0x1E104: return Unicode_Category_LO;
		case 0x1E105: return Unicode_Category_LO;
		case 0x1E106: return Unicode_Category_LO;
		case 0x1E107: return Unicode_Category_LO;
		case 0x1E108: return Unicode_Category_LO;
		case 0x1E109: return Unicode_Category_LO;
		case 0x1E10A: return Unicode_Category_LO;
		case 0x1E10B: return Unicode_Category_LO;
		case 0x1E10C: return Unicode_Category_LO;
		case 0x1E10D: return Unicode_Category_LO;
		case 0x1E10E: return Unicode_Category_LO;
		case 0x1E10F: return Unicode_Category_LO;
		case 0x1E110: return Unicode_Category_LO;
		case 0x1E111: return Unicode_Category_LO;
		case 0x1E112: return Unicode_Category_LO;
		case 0x1E113: return Unicode_Category_LO;
		case 0x1E114: return Unicode_Category_LO;
		case 0x1E115: return Unicode_Category_LO;
		case 0x1E116: return Unicode_Category_LO;
		case 0x1E117: return Unicode_Category_LO;
		case 0x1E118: return Unicode_Category_LO;
		case 0x1E119: return Unicode_Category_LO;
		case 0x1E11A: return Unicode_Category_LO;
		case 0x1E11B: return Unicode_Category_LO;
		case 0x1E11C: return Unicode_Category_LO;
		case 0x1E11D: return Unicode_Category_LO;
		case 0x1E11E: return Unicode_Category_LO;
		case 0x1E11F: return Unicode_Category_LO;
		case 0x1E120: return Unicode_Category_LO;
		case 0x1E121: return Unicode_Category_LO;
		case 0x1E122: return Unicode_Category_LO;
		case 0x1E123: return Unicode_Category_LO;
		case 0x1E124: return Unicode_Category_LO;
		case 0x1E125: return Unicode_Category_LO;
		case 0x1E126: return Unicode_Category_LO;
		case 0x1E127: return Unicode_Category_LO;
		case 0x1E128: return Unicode_Category_LO;
		case 0x1E129: return Unicode_Category_LO;
		case 0x1E12A: return Unicode_Category_LO;
		case 0x1E12B: return Unicode_Category_LO;
		case 0x1E12C: return Unicode_Category_LO;
		case 0x1E130: return Unicode_Category_MN;
		case 0x1E131: return Unicode_Category_MN;
		case 0x1E132: return Unicode_Category_MN;
		case 0x1E133: return Unicode_Category_MN;
		case 0x1E134: return Unicode_Category_MN;
		case 0x1E135: return Unicode_Category_MN;
		case 0x1E136: return Unicode_Category_MN;
		case 0x1E137: return Unicode_Category_LM;
		case 0x1E138: return Unicode_Category_LM;
		case 0x1E139: return Unicode_Category_LM;
		case 0x1E13A: return Unicode_Category_LM;
		case 0x1E13B: return Unicode_Category_LM;
		case 0x1E13C: return Unicode_Category_LM;
		case 0x1E13D: return Unicode_Category_LM;
		case 0x1E140: return Unicode_Category_ND;
		case 0x1E141: return Unicode_Category_ND;
		case 0x1E142: return Unicode_Category_ND;
		case 0x1E143: return Unicode_Category_ND;
		case 0x1E144: return Unicode_Category_ND;
		case 0x1E145: return Unicode_Category_ND;
		case 0x1E146: return Unicode_Category_ND;
		case 0x1E147: return Unicode_Category_ND;
		case 0x1E148: return Unicode_Category_ND;
		case 0x1E149: return Unicode_Category_ND;
		case 0x1E14E: return Unicode_Category_LO;
		case 0x1E14F: return Unicode_Category_SO;
		case 0x1E2C0: return Unicode_Category_LO;
		case 0x1E2C1: return Unicode_Category_LO;
		case 0x1E2C2: return Unicode_Category_LO;
		case 0x1E2C3: return Unicode_Category_LO;
		case 0x1E2C4: return Unicode_Category_LO;
		case 0x1E2C5: return Unicode_Category_LO;
		case 0x1E2C6: return Unicode_Category_LO;
		case 0x1E2C7: return Unicode_Category_LO;
		case 0x1E2C8: return Unicode_Category_LO;
		case 0x1E2C9: return Unicode_Category_LO;
		case 0x1E2CA: return Unicode_Category_LO;
		case 0x1E2CB: return Unicode_Category_LO;
		case 0x1E2CC: return Unicode_Category_LO;
		case 0x1E2CD: return Unicode_Category_LO;
		case 0x1E2CE: return Unicode_Category_LO;
		case 0x1E2CF: return Unicode_Category_LO;
		case 0x1E2D0: return Unicode_Category_LO;
		case 0x1E2D1: return Unicode_Category_LO;
		case 0x1E2D2: return Unicode_Category_LO;
		case 0x1E2D3: return Unicode_Category_LO;
		case 0x1E2D4: return Unicode_Category_LO;
		case 0x1E2D5: return Unicode_Category_LO;
		case 0x1E2D6: return Unicode_Category_LO;
		case 0x1E2D7: return Unicode_Category_LO;
		case 0x1E2D8: return Unicode_Category_LO;
		case 0x1E2D9: return Unicode_Category_LO;
		case 0x1E2DA: return Unicode_Category_LO;
		case 0x1E2DB: return Unicode_Category_LO;
		case 0x1E2DC: return Unicode_Category_LO;
		case 0x1E2DD: return Unicode_Category_LO;
		case 0x1E2DE: return Unicode_Category_LO;
		case 0x1E2DF: return Unicode_Category_LO;
		case 0x1E2E0: return Unicode_Category_LO;
		case 0x1E2E1: return Unicode_Category_LO;
		case 0x1E2E2: return Unicode_Category_LO;
		case 0x1E2E3: return Unicode_Category_LO;
		case 0x1E2E4: return Unicode_Category_LO;
		case 0x1E2E5: return Unicode_Category_LO;
		case 0x1E2E6: return Unicode_Category_LO;
		case 0x1E2E7: return Unicode_Category_LO;
		case 0x1E2E8: return Unicode_Category_LO;
		case 0x1E2E9: return Unicode_Category_LO;
		case 0x1E2EA: return Unicode_Category_LO;
		case 0x1E2EB: return Unicode_Category_LO;
		case 0x1E2EC: return Unicode_Category_MN;
		case 0x1E2ED: return Unicode_Category_MN;
		case 0x1E2EE: return Unicode_Category_MN;
		case 0x1E2EF: return Unicode_Category_MN;
		case 0x1E2F0: return Unicode_Category_ND;
		case 0x1E2F1: return Unicode_Category_ND;
		case 0x1E2F2: return Unicode_Category_ND;
		case 0x1E2F3: return Unicode_Category_ND;
		case 0x1E2F4: return Unicode_Category_ND;
		case 0x1E2F5: return Unicode_Category_ND;
		case 0x1E2F6: return Unicode_Category_ND;
		case 0x1E2F7: return Unicode_Category_ND;
		case 0x1E2F8: return Unicode_Category_ND;
		case 0x1E2F9: return Unicode_Category_ND;
		case 0x1E2FF: return Unicode_Category_SC;
		case 0x1E800: return Unicode_Category_LO;
		case 0x1E801: return Unicode_Category_LO;
		case 0x1E802: return Unicode_Category_LO;
		case 0x1E803: return Unicode_Category_LO;
		case 0x1E804: return Unicode_Category_LO;
		case 0x1E805: return Unicode_Category_LO;
		case 0x1E806: return Unicode_Category_LO;
		case 0x1E807: return Unicode_Category_LO;
		case 0x1E808: return Unicode_Category_LO;
		case 0x1E809: return Unicode_Category_LO;
		case 0x1E80A: return Unicode_Category_LO;
		case 0x1E80B: return Unicode_Category_LO;
		case 0x1E80C: return Unicode_Category_LO;
		case 0x1E80D: return Unicode_Category_LO;
		case 0x1E80E: return Unicode_Category_LO;
		case 0x1E80F: return Unicode_Category_LO;
		case 0x1E810: return Unicode_Category_LO;
		case 0x1E811: return Unicode_Category_LO;
		case 0x1E812: return Unicode_Category_LO;
		case 0x1E813: return Unicode_Category_LO;
		case 0x1E814: return Unicode_Category_LO;
		case 0x1E815: return Unicode_Category_LO;
		case 0x1E816: return Unicode_Category_LO;
		case 0x1E817: return Unicode_Category_LO;
		case 0x1E818: return Unicode_Category_LO;
		case 0x1E819: return Unicode_Category_LO;
		case 0x1E81A: return Unicode_Category_LO;
		case 0x1E81B: return Unicode_Category_LO;
		case 0x1E81C: return Unicode_Category_LO;
		case 0x1E81D: return Unicode_Category_LO;
		case 0x1E81E: return Unicode_Category_LO;
		case 0x1E81F: return Unicode_Category_LO;
		case 0x1E820: return Unicode_Category_LO;
		case 0x1E821: return Unicode_Category_LO;
		case 0x1E822: return Unicode_Category_LO;
		case 0x1E823: return Unicode_Category_LO;
		case 0x1E824: return Unicode_Category_LO;
		case 0x1E825: return Unicode_Category_LO;
		case 0x1E826: return Unicode_Category_LO;
		case 0x1E827: return Unicode_Category_LO;
		case 0x1E828: return Unicode_Category_LO;
		case 0x1E829: return Unicode_Category_LO;
		case 0x1E82A: return Unicode_Category_LO;
		case 0x1E82B: return Unicode_Category_LO;
		case 0x1E82C: return Unicode_Category_LO;
		case 0x1E82D: return Unicode_Category_LO;
		case 0x1E82E: return Unicode_Category_LO;
		case 0x1E82F: return Unicode_Category_LO;
		case 0x1E830: return Unicode_Category_LO;
		case 0x1E831: return Unicode_Category_LO;
		case 0x1E832: return Unicode_Category_LO;
		case 0x1E833: return Unicode_Category_LO;
		case 0x1E834: return Unicode_Category_LO;
		case 0x1E835: return Unicode_Category_LO;
		case 0x1E836: return Unicode_Category_LO;
		case 0x1E837: return Unicode_Category_LO;
		case 0x1E838: return Unicode_Category_LO;
		case 0x1E839: return Unicode_Category_LO;
		case 0x1E83A: return Unicode_Category_LO;
		case 0x1E83B: return Unicode_Category_LO;
		case 0x1E83C: return Unicode_Category_LO;
		case 0x1E83D: return Unicode_Category_LO;
		case 0x1E83E: return Unicode_Category_LO;
		case 0x1E83F: return Unicode_Category_LO;
		case 0x1E840: return Unicode_Category_LO;
		case 0x1E841: return Unicode_Category_LO;
		case 0x1E842: return Unicode_Category_LO;
		case 0x1E843: return Unicode_Category_LO;
		case 0x1E844: return Unicode_Category_LO;
		case 0x1E845: return Unicode_Category_LO;
		case 0x1E846: return Unicode_Category_LO;
		case 0x1E847: return Unicode_Category_LO;
		case 0x1E848: return Unicode_Category_LO;
		case 0x1E849: return Unicode_Category_LO;
		case 0x1E84A: return Unicode_Category_LO;
		case 0x1E84B: return Unicode_Category_LO;
		case 0x1E84C: return Unicode_Category_LO;
		case 0x1E84D: return Unicode_Category_LO;
		case 0x1E84E: return Unicode_Category_LO;
		case 0x1E84F: return Unicode_Category_LO;
		case 0x1E850: return Unicode_Category_LO;
		case 0x1E851: return Unicode_Category_LO;
		case 0x1E852: return Unicode_Category_LO;
		case 0x1E853: return Unicode_Category_LO;
		case 0x1E854: return Unicode_Category_LO;
		case 0x1E855: return Unicode_Category_LO;
		case 0x1E856: return Unicode_Category_LO;
		case 0x1E857: return Unicode_Category_LO;
		case 0x1E858: return Unicode_Category_LO;
		case 0x1E859: return Unicode_Category_LO;
		case 0x1E85A: return Unicode_Category_LO;
		case 0x1E85B: return Unicode_Category_LO;
		case 0x1E85C: return Unicode_Category_LO;
		case 0x1E85D: return Unicode_Category_LO;
		case 0x1E85E: return Unicode_Category_LO;
		case 0x1E85F: return Unicode_Category_LO;
		case 0x1E860: return Unicode_Category_LO;
		case 0x1E861: return Unicode_Category_LO;
		case 0x1E862: return Unicode_Category_LO;
		case 0x1E863: return Unicode_Category_LO;
		case 0x1E864: return Unicode_Category_LO;
		case 0x1E865: return Unicode_Category_LO;
		case 0x1E866: return Unicode_Category_LO;
		case 0x1E867: return Unicode_Category_LO;
		case 0x1E868: return Unicode_Category_LO;
		case 0x1E869: return Unicode_Category_LO;
		case 0x1E86A: return Unicode_Category_LO;
		case 0x1E86B: return Unicode_Category_LO;
		case 0x1E86C: return Unicode_Category_LO;
		case 0x1E86D: return Unicode_Category_LO;
		case 0x1E86E: return Unicode_Category_LO;
		case 0x1E86F: return Unicode_Category_LO;
		case 0x1E870: return Unicode_Category_LO;
		case 0x1E871: return Unicode_Category_LO;
		case 0x1E872: return Unicode_Category_LO;
		case 0x1E873: return Unicode_Category_LO;
		case 0x1E874: return Unicode_Category_LO;
		case 0x1E875: return Unicode_Category_LO;
		case 0x1E876: return Unicode_Category_LO;
		case 0x1E877: return Unicode_Category_LO;
		case 0x1E878: return Unicode_Category_LO;
		case 0x1E879: return Unicode_Category_LO;
		case 0x1E87A: return Unicode_Category_LO;
		case 0x1E87B: return Unicode_Category_LO;
		case 0x1E87C: return Unicode_Category_LO;
		case 0x1E87D: return Unicode_Category_LO;
		case 0x1E87E: return Unicode_Category_LO;
		case 0x1E87F: return Unicode_Category_LO;
		case 0x1E880: return Unicode_Category_LO;
		case 0x1E881: return Unicode_Category_LO;
		case 0x1E882: return Unicode_Category_LO;
		case 0x1E883: return Unicode_Category_LO;
		case 0x1E884: return Unicode_Category_LO;
		case 0x1E885: return Unicode_Category_LO;
		case 0x1E886: return Unicode_Category_LO;
		case 0x1E887: return Unicode_Category_LO;
		case 0x1E888: return Unicode_Category_LO;
		case 0x1E889: return Unicode_Category_LO;
		case 0x1E88A: return Unicode_Category_LO;
		case 0x1E88B: return Unicode_Category_LO;
		case 0x1E88C: return Unicode_Category_LO;
		case 0x1E88D: return Unicode_Category_LO;
		case 0x1E88E: return Unicode_Category_LO;
		case 0x1E88F: return Unicode_Category_LO;
		case 0x1E890: return Unicode_Category_LO;
		case 0x1E891: return Unicode_Category_LO;
		case 0x1E892: return Unicode_Category_LO;
		case 0x1E893: return Unicode_Category_LO;
		case 0x1E894: return Unicode_Category_LO;
		case 0x1E895: return Unicode_Category_LO;
		case 0x1E896: return Unicode_Category_LO;
		case 0x1E897: return Unicode_Category_LO;
		case 0x1E898: return Unicode_Category_LO;
		case 0x1E899: return Unicode_Category_LO;
		case 0x1E89A: return Unicode_Category_LO;
		case 0x1E89B: return Unicode_Category_LO;
		case 0x1E89C: return Unicode_Category_LO;
		case 0x1E89D: return Unicode_Category_LO;
		case 0x1E89E: return Unicode_Category_LO;
		case 0x1E89F: return Unicode_Category_LO;
		case 0x1E8A0: return Unicode_Category_LO;
		case 0x1E8A1: return Unicode_Category_LO;
		case 0x1E8A2: return Unicode_Category_LO;
		case 0x1E8A3: return Unicode_Category_LO;
		case 0x1E8A4: return Unicode_Category_LO;
		case 0x1E8A5: return Unicode_Category_LO;
		case 0x1E8A6: return Unicode_Category_LO;
		case 0x1E8A7: return Unicode_Category_LO;
		case 0x1E8A8: return Unicode_Category_LO;
		case 0x1E8A9: return Unicode_Category_LO;
		case 0x1E8AA: return Unicode_Category_LO;
		case 0x1E8AB: return Unicode_Category_LO;
		case 0x1E8AC: return Unicode_Category_LO;
		case 0x1E8AD: return Unicode_Category_LO;
		case 0x1E8AE: return Unicode_Category_LO;
		case 0x1E8AF: return Unicode_Category_LO;
		case 0x1E8B0: return Unicode_Category_LO;
		case 0x1E8B1: return Unicode_Category_LO;
		case 0x1E8B2: return Unicode_Category_LO;
		case 0x1E8B3: return Unicode_Category_LO;
		case 0x1E8B4: return Unicode_Category_LO;
		case 0x1E8B5: return Unicode_Category_LO;
		case 0x1E8B6: return Unicode_Category_LO;
		case 0x1E8B7: return Unicode_Category_LO;
		case 0x1E8B8: return Unicode_Category_LO;
		case 0x1E8B9: return Unicode_Category_LO;
		case 0x1E8BA: return Unicode_Category_LO;
		case 0x1E8BB: return Unicode_Category_LO;
		case 0x1E8BC: return Unicode_Category_LO;
		case 0x1E8BD: return Unicode_Category_LO;
		case 0x1E8BE: return Unicode_Category_LO;
		case 0x1E8BF: return Unicode_Category_LO;
		case 0x1E8C0: return Unicode_Category_LO;
		case 0x1E8C1: return Unicode_Category_LO;
		case 0x1E8C2: return Unicode_Category_LO;
		case 0x1E8C3: return Unicode_Category_LO;
		case 0x1E8C4: return Unicode_Category_LO;
		case 0x1E8C7: return Unicode_Category_NO;
		case 0x1E8C8: return Unicode_Category_NO;
		case 0x1E8C9: return Unicode_Category_NO;
		case 0x1E8CA: return Unicode_Category_NO;
		case 0x1E8CB: return Unicode_Category_NO;
		case 0x1E8CC: return Unicode_Category_NO;
		case 0x1E8CD: return Unicode_Category_NO;
		case 0x1E8CE: return Unicode_Category_NO;
		case 0x1E8CF: return Unicode_Category_NO;
		case 0x1E8D0: return Unicode_Category_MN;
		case 0x1E8D1: return Unicode_Category_MN;
		case 0x1E8D2: return Unicode_Category_MN;
		case 0x1E8D3: return Unicode_Category_MN;
		case 0x1E8D4: return Unicode_Category_MN;
		case 0x1E8D5: return Unicode_Category_MN;
		case 0x1E8D6: return Unicode_Category_MN;
		case 0x1E900: return Unicode_Category_LU;
		case 0x1E901: return Unicode_Category_LU;
		case 0x1E902: return Unicode_Category_LU;
		case 0x1E903: return Unicode_Category_LU;
		case 0x1E904: return Unicode_Category_LU;
		case 0x1E905: return Unicode_Category_LU;
		case 0x1E906: return Unicode_Category_LU;
		case 0x1E907: return Unicode_Category_LU;
		case 0x1E908: return Unicode_Category_LU;
		case 0x1E909: return Unicode_Category_LU;
		case 0x1E90A: return Unicode_Category_LU;
		case 0x1E90B: return Unicode_Category_LU;
		case 0x1E90C: return Unicode_Category_LU;
		case 0x1E90D: return Unicode_Category_LU;
		case 0x1E90E: return Unicode_Category_LU;
		case 0x1E90F: return Unicode_Category_LU;
		case 0x1E910: return Unicode_Category_LU;
		case 0x1E911: return Unicode_Category_LU;
		case 0x1E912: return Unicode_Category_LU;
		case 0x1E913: return Unicode_Category_LU;
		case 0x1E914: return Unicode_Category_LU;
		case 0x1E915: return Unicode_Category_LU;
		case 0x1E916: return Unicode_Category_LU;
		case 0x1E917: return Unicode_Category_LU;
		case 0x1E918: return Unicode_Category_LU;
		case 0x1E919: return Unicode_Category_LU;
		case 0x1E91A: return Unicode_Category_LU;
		case 0x1E91B: return Unicode_Category_LU;
		case 0x1E91C: return Unicode_Category_LU;
		case 0x1E91D: return Unicode_Category_LU;
		case 0x1E91E: return Unicode_Category_LU;
		case 0x1E91F: return Unicode_Category_LU;
		case 0x1E920: return Unicode_Category_LU;
		case 0x1E921: return Unicode_Category_LU;
		case 0x1E922: return Unicode_Category_LL;
		case 0x1E923: return Unicode_Category_LL;
		case 0x1E924: return Unicode_Category_LL;
		case 0x1E925: return Unicode_Category_LL;
		case 0x1E926: return Unicode_Category_LL;
		case 0x1E927: return Unicode_Category_LL;
		case 0x1E928: return Unicode_Category_LL;
		case 0x1E929: return Unicode_Category_LL;
		case 0x1E92A: return Unicode_Category_LL;
		case 0x1E92B: return Unicode_Category_LL;
		case 0x1E92C: return Unicode_Category_LL;
		case 0x1E92D: return Unicode_Category_LL;
		case 0x1E92E: return Unicode_Category_LL;
		case 0x1E92F: return Unicode_Category_LL;
		case 0x1E930: return Unicode_Category_LL;
		case 0x1E931: return Unicode_Category_LL;
		case 0x1E932: return Unicode_Category_LL;
		case 0x1E933: return Unicode_Category_LL;
		case 0x1E934: return Unicode_Category_LL;
		case 0x1E935: return Unicode_Category_LL;
		case 0x1E936: return Unicode_Category_LL;
		case 0x1E937: return Unicode_Category_LL;
		case 0x1E938: return Unicode_Category_LL;
		case 0x1E939: return Unicode_Category_LL;
		case 0x1E93A: return Unicode_Category_LL;
		case 0x1E93B: return Unicode_Category_LL;
		case 0x1E93C: return Unicode_Category_LL;
		case 0x1E93D: return Unicode_Category_LL;
		case 0x1E93E: return Unicode_Category_LL;
		case 0x1E93F: return Unicode_Category_LL;
		case 0x1E940: return Unicode_Category_LL;
		case 0x1E941: return Unicode_Category_LL;
		case 0x1E942: return Unicode_Category_LL;
		case 0x1E943: return Unicode_Category_LL;
		case 0x1E944: return Unicode_Category_MN;
		case 0x1E945: return Unicode_Category_MN;
		case 0x1E946: return Unicode_Category_MN;
		case 0x1E947: return Unicode_Category_MN;
		case 0x1E948: return Unicode_Category_MN;
		case 0x1E949: return Unicode_Category_MN;
		case 0x1E94A: return Unicode_Category_MN;
		case 0x1E94B: return Unicode_Category_LM;
		case 0x1E950: return Unicode_Category_ND;
		case 0x1E951: return Unicode_Category_ND;
		case 0x1E952: return Unicode_Category_ND;
		case 0x1E953: return Unicode_Category_ND;
		case 0x1E954: return Unicode_Category_ND;
		case 0x1E955: return Unicode_Category_ND;
		case 0x1E956: return Unicode_Category_ND;
		case 0x1E957: return Unicode_Category_ND;
		case 0x1E958: return Unicode_Category_ND;
		case 0x1E959: return Unicode_Category_ND;
		case 0x1E95E: return Unicode_Category_PO;
		case 0x1E95F: return Unicode_Category_PO;
		case 0x1EC71: return Unicode_Category_NO;
		case 0x1EC72: return Unicode_Category_NO;
		case 0x1EC73: return Unicode_Category_NO;
		case 0x1EC74: return Unicode_Category_NO;
		case 0x1EC75: return Unicode_Category_NO;
		case 0x1EC76: return Unicode_Category_NO;
		case 0x1EC77: return Unicode_Category_NO;
		case 0x1EC78: return Unicode_Category_NO;
		case 0x1EC79: return Unicode_Category_NO;
		case 0x1EC7A: return Unicode_Category_NO;
		case 0x1EC7B: return Unicode_Category_NO;
		case 0x1EC7C: return Unicode_Category_NO;
		case 0x1EC7D: return Unicode_Category_NO;
		case 0x1EC7E: return Unicode_Category_NO;
		case 0x1EC7F: return Unicode_Category_NO;
		case 0x1EC80: return Unicode_Category_NO;
		case 0x1EC81: return Unicode_Category_NO;
		case 0x1EC82: return Unicode_Category_NO;
		case 0x1EC83: return Unicode_Category_NO;
		case 0x1EC84: return Unicode_Category_NO;
		case 0x1EC85: return Unicode_Category_NO;
		case 0x1EC86: return Unicode_Category_NO;
		case 0x1EC87: return Unicode_Category_NO;
		case 0x1EC88: return Unicode_Category_NO;
		case 0x1EC89: return Unicode_Category_NO;
		case 0x1EC8A: return Unicode_Category_NO;
		case 0x1EC8B: return Unicode_Category_NO;
		case 0x1EC8C: return Unicode_Category_NO;
		case 0x1EC8D: return Unicode_Category_NO;
		case 0x1EC8E: return Unicode_Category_NO;
		case 0x1EC8F: return Unicode_Category_NO;
		case 0x1EC90: return Unicode_Category_NO;
		case 0x1EC91: return Unicode_Category_NO;
		case 0x1EC92: return Unicode_Category_NO;
		case 0x1EC93: return Unicode_Category_NO;
		case 0x1EC94: return Unicode_Category_NO;
		case 0x1EC95: return Unicode_Category_NO;
		case 0x1EC96: return Unicode_Category_NO;
		case 0x1EC97: return Unicode_Category_NO;
		case 0x1EC98: return Unicode_Category_NO;
		case 0x1EC99: return Unicode_Category_NO;
		case 0x1EC9A: return Unicode_Category_NO;
		case 0x1EC9B: return Unicode_Category_NO;
		case 0x1EC9C: return Unicode_Category_NO;
		case 0x1EC9D: return Unicode_Category_NO;
		case 0x1EC9E: return Unicode_Category_NO;
		case 0x1EC9F: return Unicode_Category_NO;
		case 0x1ECA0: return Unicode_Category_NO;
		case 0x1ECA1: return Unicode_Category_NO;
		case 0x1ECA2: return Unicode_Category_NO;
		case 0x1ECA3: return Unicode_Category_NO;
		case 0x1ECA4: return Unicode_Category_NO;
		case 0x1ECA5: return Unicode_Category_NO;
		case 0x1ECA6: return Unicode_Category_NO;
		case 0x1ECA7: return Unicode_Category_NO;
		case 0x1ECA8: return Unicode_Category_NO;
		case 0x1ECA9: return Unicode_Category_NO;
		case 0x1ECAA: return Unicode_Category_NO;
		case 0x1ECAB: return Unicode_Category_NO;
		case 0x1ECAC: return Unicode_Category_SO;
		case 0x1ECAD: return Unicode_Category_NO;
		case 0x1ECAE: return Unicode_Category_NO;
		case 0x1ECAF: return Unicode_Category_NO;
		case 0x1ECB0: return Unicode_Category_SC;
		case 0x1ECB1: return Unicode_Category_NO;
		case 0x1ECB2: return Unicode_Category_NO;
		case 0x1ECB3: return Unicode_Category_NO;
		case 0x1ECB4: return Unicode_Category_NO;
		case 0x1ED01: return Unicode_Category_NO;
		case 0x1ED02: return Unicode_Category_NO;
		case 0x1ED03: return Unicode_Category_NO;
		case 0x1ED04: return Unicode_Category_NO;
		case 0x1ED05: return Unicode_Category_NO;
		case 0x1ED06: return Unicode_Category_NO;
		case 0x1ED07: return Unicode_Category_NO;
		case 0x1ED08: return Unicode_Category_NO;
		case 0x1ED09: return Unicode_Category_NO;
		case 0x1ED0A: return Unicode_Category_NO;
		case 0x1ED0B: return Unicode_Category_NO;
		case 0x1ED0C: return Unicode_Category_NO;
		case 0x1ED0D: return Unicode_Category_NO;
		case 0x1ED0E: return Unicode_Category_NO;
		case 0x1ED0F: return Unicode_Category_NO;
		case 0x1ED10: return Unicode_Category_NO;
		case 0x1ED11: return Unicode_Category_NO;
		case 0x1ED12: return Unicode_Category_NO;
		case 0x1ED13: return Unicode_Category_NO;
		case 0x1ED14: return Unicode_Category_NO;
		case 0x1ED15: return Unicode_Category_NO;
		case 0x1ED16: return Unicode_Category_NO;
		case 0x1ED17: return Unicode_Category_NO;
		case 0x1ED18: return Unicode_Category_NO;
		case 0x1ED19: return Unicode_Category_NO;
		case 0x1ED1A: return Unicode_Category_NO;
		case 0x1ED1B: return Unicode_Category_NO;
		case 0x1ED1C: return Unicode_Category_NO;
		case 0x1ED1D: return Unicode_Category_NO;
		case 0x1ED1E: return Unicode_Category_NO;
		case 0x1ED1F: return Unicode_Category_NO;
		case 0x1ED20: return Unicode_Category_NO;
		case 0x1ED21: return Unicode_Category_NO;
		case 0x1ED22: return Unicode_Category_NO;
		case 0x1ED23: return Unicode_Category_NO;
		case 0x1ED24: return Unicode_Category_NO;
		case 0x1ED25: return Unicode_Category_NO;
		case 0x1ED26: return Unicode_Category_NO;
		case 0x1ED27: return Unicode_Category_NO;
		case 0x1ED28: return Unicode_Category_NO;
		case 0x1ED29: return Unicode_Category_NO;
		case 0x1ED2A: return Unicode_Category_NO;
		case 0x1ED2B: return Unicode_Category_NO;
		case 0x1ED2C: return Unicode_Category_NO;
		case 0x1ED2D: return Unicode_Category_NO;
		case 0x1ED2E: return Unicode_Category_SO;
		case 0x1ED2F: return Unicode_Category_NO;
		case 0x1ED30: return Unicode_Category_NO;
		case 0x1ED31: return Unicode_Category_NO;
		case 0x1ED32: return Unicode_Category_NO;
		case 0x1ED33: return Unicode_Category_NO;
		case 0x1ED34: return Unicode_Category_NO;
		case 0x1ED35: return Unicode_Category_NO;
		case 0x1ED36: return Unicode_Category_NO;
		case 0x1ED37: return Unicode_Category_NO;
		case 0x1ED38: return Unicode_Category_NO;
		case 0x1ED39: return Unicode_Category_NO;
		case 0x1ED3A: return Unicode_Category_NO;
		case 0x1ED3B: return Unicode_Category_NO;
		case 0x1ED3C: return Unicode_Category_NO;
		case 0x1ED3D: return Unicode_Category_NO;
		case 0x1EE00: return Unicode_Category_LO;
		case 0x1EE01: return Unicode_Category_LO;
		case 0x1EE02: return Unicode_Category_LO;
		case 0x1EE03: return Unicode_Category_LO;
		case 0x1EE05: return Unicode_Category_LO;
		case 0x1EE06: return Unicode_Category_LO;
		case 0x1EE07: return Unicode_Category_LO;
		case 0x1EE08: return Unicode_Category_LO;
		case 0x1EE09: return Unicode_Category_LO;
		case 0x1EE0A: return Unicode_Category_LO;
		case 0x1EE0B: return Unicode_Category_LO;
		case 0x1EE0C: return Unicode_Category_LO;
		case 0x1EE0D: return Unicode_Category_LO;
		case 0x1EE0E: return Unicode_Category_LO;
		case 0x1EE0F: return Unicode_Category_LO;
		case 0x1EE10: return Unicode_Category_LO;
		case 0x1EE11: return Unicode_Category_LO;
		case 0x1EE12: return Unicode_Category_LO;
		case 0x1EE13: return Unicode_Category_LO;
		case 0x1EE14: return Unicode_Category_LO;
		case 0x1EE15: return Unicode_Category_LO;
		case 0x1EE16: return Unicode_Category_LO;
		case 0x1EE17: return Unicode_Category_LO;
		case 0x1EE18: return Unicode_Category_LO;
		case 0x1EE19: return Unicode_Category_LO;
		case 0x1EE1A: return Unicode_Category_LO;
		case 0x1EE1B: return Unicode_Category_LO;
		case 0x1EE1C: return Unicode_Category_LO;
		case 0x1EE1D: return Unicode_Category_LO;
		case 0x1EE1E: return Unicode_Category_LO;
		case 0x1EE1F: return Unicode_Category_LO;
		case 0x1EE21: return Unicode_Category_LO;
		case 0x1EE22: return Unicode_Category_LO;
		case 0x1EE24: return Unicode_Category_LO;
		case 0x1EE27: return Unicode_Category_LO;
		case 0x1EE29: return Unicode_Category_LO;
		case 0x1EE2A: return Unicode_Category_LO;
		case 0x1EE2B: return Unicode_Category_LO;
		case 0x1EE2C: return Unicode_Category_LO;
		case 0x1EE2D: return Unicode_Category_LO;
		case 0x1EE2E: return Unicode_Category_LO;
		case 0x1EE2F: return Unicode_Category_LO;
		case 0x1EE30: return Unicode_Category_LO;
		case 0x1EE31: return Unicode_Category_LO;
		case 0x1EE32: return Unicode_Category_LO;
		case 0x1EE34: return Unicode_Category_LO;
		case 0x1EE35: return Unicode_Category_LO;
		case 0x1EE36: return Unicode_Category_LO;
		case 0x1EE37: return Unicode_Category_LO;
		case 0x1EE39: return Unicode_Category_LO;
		case 0x1EE3B: return Unicode_Category_LO;
		case 0x1EE42: return Unicode_Category_LO;
		case 0x1EE47: return Unicode_Category_LO;
		case 0x1EE49: return Unicode_Category_LO;
		case 0x1EE4B: return Unicode_Category_LO;
		case 0x1EE4D: return Unicode_Category_LO;
		case 0x1EE4E: return Unicode_Category_LO;
		case 0x1EE4F: return Unicode_Category_LO;
		case 0x1EE51: return Unicode_Category_LO;
		case 0x1EE52: return Unicode_Category_LO;
		case 0x1EE54: return Unicode_Category_LO;
		case 0x1EE57: return Unicode_Category_LO;
		case 0x1EE59: return Unicode_Category_LO;
		case 0x1EE5B: return Unicode_Category_LO;
		case 0x1EE5D: return Unicode_Category_LO;
		case 0x1EE5F: return Unicode_Category_LO;
		case 0x1EE61: return Unicode_Category_LO;
		case 0x1EE62: return Unicode_Category_LO;
		case 0x1EE64: return Unicode_Category_LO;
		case 0x1EE67: return Unicode_Category_LO;
		case 0x1EE68: return Unicode_Category_LO;
		case 0x1EE69: return Unicode_Category_LO;
		case 0x1EE6A: return Unicode_Category_LO;
		case 0x1EE6C: return Unicode_Category_LO;
		case 0x1EE6D: return Unicode_Category_LO;
		case 0x1EE6E: return Unicode_Category_LO;
		case 0x1EE6F: return Unicode_Category_LO;
		case 0x1EE70: return Unicode_Category_LO;
		case 0x1EE71: return Unicode_Category_LO;
		case 0x1EE72: return Unicode_Category_LO;
		case 0x1EE74: return Unicode_Category_LO;
		case 0x1EE75: return Unicode_Category_LO;
		case 0x1EE76: return Unicode_Category_LO;
		case 0x1EE77: return Unicode_Category_LO;
		case 0x1EE79: return Unicode_Category_LO;
		case 0x1EE7A: return Unicode_Category_LO;
		case 0x1EE7B: return Unicode_Category_LO;
		case 0x1EE7C: return Unicode_Category_LO;
		case 0x1EE7E: return Unicode_Category_LO;
		case 0x1EE80: return Unicode_Category_LO;
		case 0x1EE81: return Unicode_Category_LO;
		case 0x1EE82: return Unicode_Category_LO;
		case 0x1EE83: return Unicode_Category_LO;
		case 0x1EE84: return Unicode_Category_LO;
		case 0x1EE85: return Unicode_Category_LO;
		case 0x1EE86: return Unicode_Category_LO;
		case 0x1EE87: return Unicode_Category_LO;
		case 0x1EE88: return Unicode_Category_LO;
		case 0x1EE89: return Unicode_Category_LO;
		case 0x1EE8B: return Unicode_Category_LO;
		case 0x1EE8C: return Unicode_Category_LO;
		case 0x1EE8D: return Unicode_Category_LO;
		case 0x1EE8E: return Unicode_Category_LO;
		case 0x1EE8F: return Unicode_Category_LO;
		case 0x1EE90: return Unicode_Category_LO;
		case 0x1EE91: return Unicode_Category_LO;
		case 0x1EE92: return Unicode_Category_LO;
		case 0x1EE93: return Unicode_Category_LO;
		case 0x1EE94: return Unicode_Category_LO;
		case 0x1EE95: return Unicode_Category_LO;
		case 0x1EE96: return Unicode_Category_LO;
		case 0x1EE97: return Unicode_Category_LO;
		case 0x1EE98: return Unicode_Category_LO;
		case 0x1EE99: return Unicode_Category_LO;
		case 0x1EE9A: return Unicode_Category_LO;
		case 0x1EE9B: return Unicode_Category_LO;
		case 0x1EEA1: return Unicode_Category_LO;
		case 0x1EEA2: return Unicode_Category_LO;
		case 0x1EEA3: return Unicode_Category_LO;
		case 0x1EEA5: return Unicode_Category_LO;
		case 0x1EEA6: return Unicode_Category_LO;
		case 0x1EEA7: return Unicode_Category_LO;
		case 0x1EEA8: return Unicode_Category_LO;
		case 0x1EEA9: return Unicode_Category_LO;
		case 0x1EEAB: return Unicode_Category_LO;
		case 0x1EEAC: return Unicode_Category_LO;
		case 0x1EEAD: return Unicode_Category_LO;
		case 0x1EEAE: return Unicode_Category_LO;
		case 0x1EEAF: return Unicode_Category_LO;
		case 0x1EEB0: return Unicode_Category_LO;
		case 0x1EEB1: return Unicode_Category_LO;
		case 0x1EEB2: return Unicode_Category_LO;
		case 0x1EEB3: return Unicode_Category_LO;
		case 0x1EEB4: return Unicode_Category_LO;
		case 0x1EEB5: return Unicode_Category_LO;
		case 0x1EEB6: return Unicode_Category_LO;
		case 0x1EEB7: return Unicode_Category_LO;
		case 0x1EEB8: return Unicode_Category_LO;
		case 0x1EEB9: return Unicode_Category_LO;
		case 0x1EEBA: return Unicode_Category_LO;
		case 0x1EEBB: return Unicode_Category_LO;
		case 0x1EEF0: return Unicode_Category_SM;
		case 0x1EEF1: return Unicode_Category_SM;
		case 0x1F000: return Unicode_Category_SO;
		case 0x1F001: return Unicode_Category_SO;
		case 0x1F002: return Unicode_Category_SO;
		case 0x1F003: return Unicode_Category_SO;
		case 0x1F004: return Unicode_Category_SO;
		case 0x1F005: return Unicode_Category_SO;
		case 0x1F006: return Unicode_Category_SO;
		case 0x1F007: return Unicode_Category_SO;
		case 0x1F008: return Unicode_Category_SO;
		case 0x1F009: return Unicode_Category_SO;
		case 0x1F00A: return Unicode_Category_SO;
		case 0x1F00B: return Unicode_Category_SO;
		case 0x1F00C: return Unicode_Category_SO;
		case 0x1F00D: return Unicode_Category_SO;
		case 0x1F00E: return Unicode_Category_SO;
		case 0x1F00F: return Unicode_Category_SO;
		case 0x1F010: return Unicode_Category_SO;
		case 0x1F011: return Unicode_Category_SO;
		case 0x1F012: return Unicode_Category_SO;
		case 0x1F013: return Unicode_Category_SO;
		case 0x1F014: return Unicode_Category_SO;
		case 0x1F015: return Unicode_Category_SO;
		case 0x1F016: return Unicode_Category_SO;
		case 0x1F017: return Unicode_Category_SO;
		case 0x1F018: return Unicode_Category_SO;
		case 0x1F019: return Unicode_Category_SO;
		case 0x1F01A: return Unicode_Category_SO;
		case 0x1F01B: return Unicode_Category_SO;
		case 0x1F01C: return Unicode_Category_SO;
		case 0x1F01D: return Unicode_Category_SO;
		case 0x1F01E: return Unicode_Category_SO;
		case 0x1F01F: return Unicode_Category_SO;
		case 0x1F020: return Unicode_Category_SO;
		case 0x1F021: return Unicode_Category_SO;
		case 0x1F022: return Unicode_Category_SO;
		case 0x1F023: return Unicode_Category_SO;
		case 0x1F024: return Unicode_Category_SO;
		case 0x1F025: return Unicode_Category_SO;
		case 0x1F026: return Unicode_Category_SO;
		case 0x1F027: return Unicode_Category_SO;
		case 0x1F028: return Unicode_Category_SO;
		case 0x1F029: return Unicode_Category_SO;
		case 0x1F02A: return Unicode_Category_SO;
		case 0x1F02B: return Unicode_Category_SO;
		case 0x1F030: return Unicode_Category_SO;
		case 0x1F031: return Unicode_Category_SO;
		case 0x1F032: return Unicode_Category_SO;
		case 0x1F033: return Unicode_Category_SO;
		case 0x1F034: return Unicode_Category_SO;
		case 0x1F035: return Unicode_Category_SO;
		case 0x1F036: return Unicode_Category_SO;
		case 0x1F037: return Unicode_Category_SO;
		case 0x1F038: return Unicode_Category_SO;
		case 0x1F039: return Unicode_Category_SO;
		case 0x1F03A: return Unicode_Category_SO;
		case 0x1F03B: return Unicode_Category_SO;
		case 0x1F03C: return Unicode_Category_SO;
		case 0x1F03D: return Unicode_Category_SO;
		case 0x1F03E: return Unicode_Category_SO;
		case 0x1F03F: return Unicode_Category_SO;
		case 0x1F040: return Unicode_Category_SO;
		case 0x1F041: return Unicode_Category_SO;
		case 0x1F042: return Unicode_Category_SO;
		case 0x1F043: return Unicode_Category_SO;
		case 0x1F044: return Unicode_Category_SO;
		case 0x1F045: return Unicode_Category_SO;
		case 0x1F046: return Unicode_Category_SO;
		case 0x1F047: return Unicode_Category_SO;
		case 0x1F048: return Unicode_Category_SO;
		case 0x1F049: return Unicode_Category_SO;
		case 0x1F04A: return Unicode_Category_SO;
		case 0x1F04B: return Unicode_Category_SO;
		case 0x1F04C: return Unicode_Category_SO;
		case 0x1F04D: return Unicode_Category_SO;
		case 0x1F04E: return Unicode_Category_SO;
		case 0x1F04F: return Unicode_Category_SO;
		case 0x1F050: return Unicode_Category_SO;
		case 0x1F051: return Unicode_Category_SO;
		case 0x1F052: return Unicode_Category_SO;
		case 0x1F053: return Unicode_Category_SO;
		case 0x1F054: return Unicode_Category_SO;
		case 0x1F055: return Unicode_Category_SO;
		case 0x1F056: return Unicode_Category_SO;
		case 0x1F057: return Unicode_Category_SO;
		case 0x1F058: return Unicode_Category_SO;
		case 0x1F059: return Unicode_Category_SO;
		case 0x1F05A: return Unicode_Category_SO;
		case 0x1F05B: return Unicode_Category_SO;
		case 0x1F05C: return Unicode_Category_SO;
		case 0x1F05D: return Unicode_Category_SO;
		case 0x1F05E: return Unicode_Category_SO;
		case 0x1F05F: return Unicode_Category_SO;
		case 0x1F060: return Unicode_Category_SO;
		case 0x1F061: return Unicode_Category_SO;
		case 0x1F062: return Unicode_Category_SO;
		case 0x1F063: return Unicode_Category_SO;
		case 0x1F064: return Unicode_Category_SO;
		case 0x1F065: return Unicode_Category_SO;
		case 0x1F066: return Unicode_Category_SO;
		case 0x1F067: return Unicode_Category_SO;
		case 0x1F068: return Unicode_Category_SO;
		case 0x1F069: return Unicode_Category_SO;
		case 0x1F06A: return Unicode_Category_SO;
		case 0x1F06B: return Unicode_Category_SO;
		case 0x1F06C: return Unicode_Category_SO;
		case 0x1F06D: return Unicode_Category_SO;
		case 0x1F06E: return Unicode_Category_SO;
		case 0x1F06F: return Unicode_Category_SO;
		case 0x1F070: return Unicode_Category_SO;
		case 0x1F071: return Unicode_Category_SO;
		case 0x1F072: return Unicode_Category_SO;
		case 0x1F073: return Unicode_Category_SO;
		case 0x1F074: return Unicode_Category_SO;
		case 0x1F075: return Unicode_Category_SO;
		case 0x1F076: return Unicode_Category_SO;
		case 0x1F077: return Unicode_Category_SO;
		case 0x1F078: return Unicode_Category_SO;
		case 0x1F079: return Unicode_Category_SO;
		case 0x1F07A: return Unicode_Category_SO;
		case 0x1F07B: return Unicode_Category_SO;
		case 0x1F07C: return Unicode_Category_SO;
		case 0x1F07D: return Unicode_Category_SO;
		case 0x1F07E: return Unicode_Category_SO;
		case 0x1F07F: return Unicode_Category_SO;
		case 0x1F080: return Unicode_Category_SO;
		case 0x1F081: return Unicode_Category_SO;
		case 0x1F082: return Unicode_Category_SO;
		case 0x1F083: return Unicode_Category_SO;
		case 0x1F084: return Unicode_Category_SO;
		case 0x1F085: return Unicode_Category_SO;
		case 0x1F086: return Unicode_Category_SO;
		case 0x1F087: return Unicode_Category_SO;
		case 0x1F088: return Unicode_Category_SO;
		case 0x1F089: return Unicode_Category_SO;
		case 0x1F08A: return Unicode_Category_SO;
		case 0x1F08B: return Unicode_Category_SO;
		case 0x1F08C: return Unicode_Category_SO;
		case 0x1F08D: return Unicode_Category_SO;
		case 0x1F08E: return Unicode_Category_SO;
		case 0x1F08F: return Unicode_Category_SO;
		case 0x1F090: return Unicode_Category_SO;
		case 0x1F091: return Unicode_Category_SO;
		case 0x1F092: return Unicode_Category_SO;
		case 0x1F093: return Unicode_Category_SO;
		case 0x1F0A0: return Unicode_Category_SO;
		case 0x1F0A1: return Unicode_Category_SO;
		case 0x1F0A2: return Unicode_Category_SO;
		case 0x1F0A3: return Unicode_Category_SO;
		case 0x1F0A4: return Unicode_Category_SO;
		case 0x1F0A5: return Unicode_Category_SO;
		case 0x1F0A6: return Unicode_Category_SO;
		case 0x1F0A7: return Unicode_Category_SO;
		case 0x1F0A8: return Unicode_Category_SO;
		case 0x1F0A9: return Unicode_Category_SO;
		case 0x1F0AA: return Unicode_Category_SO;
		case 0x1F0AB: return Unicode_Category_SO;
		case 0x1F0AC: return Unicode_Category_SO;
		case 0x1F0AD: return Unicode_Category_SO;
		case 0x1F0AE: return Unicode_Category_SO;
		case 0x1F0B1: return Unicode_Category_SO;
		case 0x1F0B2: return Unicode_Category_SO;
		case 0x1F0B3: return Unicode_Category_SO;
		case 0x1F0B4: return Unicode_Category_SO;
		case 0x1F0B5: return Unicode_Category_SO;
		case 0x1F0B6: return Unicode_Category_SO;
		case 0x1F0B7: return Unicode_Category_SO;
		case 0x1F0B8: return Unicode_Category_SO;
		case 0x1F0B9: return Unicode_Category_SO;
		case 0x1F0BA: return Unicode_Category_SO;
		case 0x1F0BB: return Unicode_Category_SO;
		case 0x1F0BC: return Unicode_Category_SO;
		case 0x1F0BD: return Unicode_Category_SO;
		case 0x1F0BE: return Unicode_Category_SO;
		case 0x1F0BF: return Unicode_Category_SO;
		case 0x1F0C1: return Unicode_Category_SO;
		case 0x1F0C2: return Unicode_Category_SO;
		case 0x1F0C3: return Unicode_Category_SO;
		case 0x1F0C4: return Unicode_Category_SO;
		case 0x1F0C5: return Unicode_Category_SO;
		case 0x1F0C6: return Unicode_Category_SO;
		case 0x1F0C7: return Unicode_Category_SO;
		case 0x1F0C8: return Unicode_Category_SO;
		case 0x1F0C9: return Unicode_Category_SO;
		case 0x1F0CA: return Unicode_Category_SO;
		case 0x1F0CB: return Unicode_Category_SO;
		case 0x1F0CC: return Unicode_Category_SO;
		case 0x1F0CD: return Unicode_Category_SO;
		case 0x1F0CE: return Unicode_Category_SO;
		case 0x1F0CF: return Unicode_Category_SO;
		case 0x1F0D1: return Unicode_Category_SO;
		case 0x1F0D2: return Unicode_Category_SO;
		case 0x1F0D3: return Unicode_Category_SO;
		case 0x1F0D4: return Unicode_Category_SO;
		case 0x1F0D5: return Unicode_Category_SO;
		case 0x1F0D6: return Unicode_Category_SO;
		case 0x1F0D7: return Unicode_Category_SO;
		case 0x1F0D8: return Unicode_Category_SO;
		case 0x1F0D9: return Unicode_Category_SO;
		case 0x1F0DA: return Unicode_Category_SO;
		case 0x1F0DB: return Unicode_Category_SO;
		case 0x1F0DC: return Unicode_Category_SO;
		case 0x1F0DD: return Unicode_Category_SO;
		case 0x1F0DE: return Unicode_Category_SO;
		case 0x1F0DF: return Unicode_Category_SO;
		case 0x1F0E0: return Unicode_Category_SO;
		case 0x1F0E1: return Unicode_Category_SO;
		case 0x1F0E2: return Unicode_Category_SO;
		case 0x1F0E3: return Unicode_Category_SO;
		case 0x1F0E4: return Unicode_Category_SO;
		case 0x1F0E5: return Unicode_Category_SO;
		case 0x1F0E6: return Unicode_Category_SO;
		case 0x1F0E7: return Unicode_Category_SO;
		case 0x1F0E8: return Unicode_Category_SO;
		case 0x1F0E9: return Unicode_Category_SO;
		case 0x1F0EA: return Unicode_Category_SO;
		case 0x1F0EB: return Unicode_Category_SO;
		case 0x1F0EC: return Unicode_Category_SO;
		case 0x1F0ED: return Unicode_Category_SO;
		case 0x1F0EE: return Unicode_Category_SO;
		case 0x1F0EF: return Unicode_Category_SO;
		case 0x1F0F0: return Unicode_Category_SO;
		case 0x1F0F1: return Unicode_Category_SO;
		case 0x1F0F2: return Unicode_Category_SO;
		case 0x1F0F3: return Unicode_Category_SO;
		case 0x1F0F4: return Unicode_Category_SO;
		case 0x1F0F5: return Unicode_Category_SO;
		case 0x1F100: return Unicode_Category_NO;
		case 0x1F101: return Unicode_Category_NO;
		case 0x1F102: return Unicode_Category_NO;
		case 0x1F103: return Unicode_Category_NO;
		case 0x1F104: return Unicode_Category_NO;
		case 0x1F105: return Unicode_Category_NO;
		case 0x1F106: return Unicode_Category_NO;
		case 0x1F107: return Unicode_Category_NO;
		case 0x1F108: return Unicode_Category_NO;
		case 0x1F109: return Unicode_Category_NO;
		case 0x1F10A: return Unicode_Category_NO;
		case 0x1F10B: return Unicode_Category_NO;
		case 0x1F10C: return Unicode_Category_NO;
		case 0x1F10D: return Unicode_Category_SO;
		case 0x1F10E: return Unicode_Category_SO;
		case 0x1F10F: return Unicode_Category_SO;
		case 0x1F110: return Unicode_Category_SO;
		case 0x1F111: return Unicode_Category_SO;
		case 0x1F112: return Unicode_Category_SO;
		case 0x1F113: return Unicode_Category_SO;
		case 0x1F114: return Unicode_Category_SO;
		case 0x1F115: return Unicode_Category_SO;
		case 0x1F116: return Unicode_Category_SO;
		case 0x1F117: return Unicode_Category_SO;
		case 0x1F118: return Unicode_Category_SO;
		case 0x1F119: return Unicode_Category_SO;
		case 0x1F11A: return Unicode_Category_SO;
		case 0x1F11B: return Unicode_Category_SO;
		case 0x1F11C: return Unicode_Category_SO;
		case 0x1F11D: return Unicode_Category_SO;
		case 0x1F11E: return Unicode_Category_SO;
		case 0x1F11F: return Unicode_Category_SO;
		case 0x1F120: return Unicode_Category_SO;
		case 0x1F121: return Unicode_Category_SO;
		case 0x1F122: return Unicode_Category_SO;
		case 0x1F123: return Unicode_Category_SO;
		case 0x1F124: return Unicode_Category_SO;
		case 0x1F125: return Unicode_Category_SO;
		case 0x1F126: return Unicode_Category_SO;
		case 0x1F127: return Unicode_Category_SO;
		case 0x1F128: return Unicode_Category_SO;
		case 0x1F129: return Unicode_Category_SO;
		case 0x1F12A: return Unicode_Category_SO;
		case 0x1F12B: return Unicode_Category_SO;
		case 0x1F12C: return Unicode_Category_SO;
		case 0x1F12D: return Unicode_Category_SO;
		case 0x1F12E: return Unicode_Category_SO;
		case 0x1F12F: return Unicode_Category_SO;
		case 0x1F130: return Unicode_Category_SO;
		case 0x1F131: return Unicode_Category_SO;
		case 0x1F132: return Unicode_Category_SO;
		case 0x1F133: return Unicode_Category_SO;
		case 0x1F134: return Unicode_Category_SO;
		case 0x1F135: return Unicode_Category_SO;
		case 0x1F136: return Unicode_Category_SO;
		case 0x1F137: return Unicode_Category_SO;
		case 0x1F138: return Unicode_Category_SO;
		case 0x1F139: return Unicode_Category_SO;
		case 0x1F13A: return Unicode_Category_SO;
		case 0x1F13B: return Unicode_Category_SO;
		case 0x1F13C: return Unicode_Category_SO;
		case 0x1F13D: return Unicode_Category_SO;
		case 0x1F13E: return Unicode_Category_SO;
		case 0x1F13F: return Unicode_Category_SO;
		case 0x1F140: return Unicode_Category_SO;
		case 0x1F141: return Unicode_Category_SO;
		case 0x1F142: return Unicode_Category_SO;
		case 0x1F143: return Unicode_Category_SO;
		case 0x1F144: return Unicode_Category_SO;
		case 0x1F145: return Unicode_Category_SO;
		case 0x1F146: return Unicode_Category_SO;
		case 0x1F147: return Unicode_Category_SO;
		case 0x1F148: return Unicode_Category_SO;
		case 0x1F149: return Unicode_Category_SO;
		case 0x1F14A: return Unicode_Category_SO;
		case 0x1F14B: return Unicode_Category_SO;
		case 0x1F14C: return Unicode_Category_SO;
		case 0x1F14D: return Unicode_Category_SO;
		case 0x1F14E: return Unicode_Category_SO;
		case 0x1F14F: return Unicode_Category_SO;
		case 0x1F150: return Unicode_Category_SO;
		case 0x1F151: return Unicode_Category_SO;
		case 0x1F152: return Unicode_Category_SO;
		case 0x1F153: return Unicode_Category_SO;
		case 0x1F154: return Unicode_Category_SO;
		case 0x1F155: return Unicode_Category_SO;
		case 0x1F156: return Unicode_Category_SO;
		case 0x1F157: return Unicode_Category_SO;
		case 0x1F158: return Unicode_Category_SO;
		case 0x1F159: return Unicode_Category_SO;
		case 0x1F15A: return Unicode_Category_SO;
		case 0x1F15B: return Unicode_Category_SO;
		case 0x1F15C: return Unicode_Category_SO;
		case 0x1F15D: return Unicode_Category_SO;
		case 0x1F15E: return Unicode_Category_SO;
		case 0x1F15F: return Unicode_Category_SO;
		case 0x1F160: return Unicode_Category_SO;
		case 0x1F161: return Unicode_Category_SO;
		case 0x1F162: return Unicode_Category_SO;
		case 0x1F163: return Unicode_Category_SO;
		case 0x1F164: return Unicode_Category_SO;
		case 0x1F165: return Unicode_Category_SO;
		case 0x1F166: return Unicode_Category_SO;
		case 0x1F167: return Unicode_Category_SO;
		case 0x1F168: return Unicode_Category_SO;
		case 0x1F169: return Unicode_Category_SO;
		case 0x1F16A: return Unicode_Category_SO;
		case 0x1F16B: return Unicode_Category_SO;
		case 0x1F16C: return Unicode_Category_SO;
		case 0x1F16D: return Unicode_Category_SO;
		case 0x1F16E: return Unicode_Category_SO;
		case 0x1F16F: return Unicode_Category_SO;
		case 0x1F170: return Unicode_Category_SO;
		case 0x1F171: return Unicode_Category_SO;
		case 0x1F172: return Unicode_Category_SO;
		case 0x1F173: return Unicode_Category_SO;
		case 0x1F174: return Unicode_Category_SO;
		case 0x1F175: return Unicode_Category_SO;
		case 0x1F176: return Unicode_Category_SO;
		case 0x1F177: return Unicode_Category_SO;
		case 0x1F178: return Unicode_Category_SO;
		case 0x1F179: return Unicode_Category_SO;
		case 0x1F17A: return Unicode_Category_SO;
		case 0x1F17B: return Unicode_Category_SO;
		case 0x1F17C: return Unicode_Category_SO;
		case 0x1F17D: return Unicode_Category_SO;
		case 0x1F17E: return Unicode_Category_SO;
		case 0x1F17F: return Unicode_Category_SO;
		case 0x1F180: return Unicode_Category_SO;
		case 0x1F181: return Unicode_Category_SO;
		case 0x1F182: return Unicode_Category_SO;
		case 0x1F183: return Unicode_Category_SO;
		case 0x1F184: return Unicode_Category_SO;
		case 0x1F185: return Unicode_Category_SO;
		case 0x1F186: return Unicode_Category_SO;
		case 0x1F187: return Unicode_Category_SO;
		case 0x1F188: return Unicode_Category_SO;
		case 0x1F189: return Unicode_Category_SO;
		case 0x1F18A: return Unicode_Category_SO;
		case 0x1F18B: return Unicode_Category_SO;
		case 0x1F18C: return Unicode_Category_SO;
		case 0x1F18D: return Unicode_Category_SO;
		case 0x1F18E: return Unicode_Category_SO;
		case 0x1F18F: return Unicode_Category_SO;
		case 0x1F190: return Unicode_Category_SO;
		case 0x1F191: return Unicode_Category_SO;
		case 0x1F192: return Unicode_Category_SO;
		case 0x1F193: return Unicode_Category_SO;
		case 0x1F194: return Unicode_Category_SO;
		case 0x1F195: return Unicode_Category_SO;
		case 0x1F196: return Unicode_Category_SO;
		case 0x1F197: return Unicode_Category_SO;
		case 0x1F198: return Unicode_Category_SO;
		case 0x1F199: return Unicode_Category_SO;
		case 0x1F19A: return Unicode_Category_SO;
		case 0x1F19B: return Unicode_Category_SO;
		case 0x1F19C: return Unicode_Category_SO;
		case 0x1F19D: return Unicode_Category_SO;
		case 0x1F19E: return Unicode_Category_SO;
		case 0x1F19F: return Unicode_Category_SO;
		case 0x1F1A0: return Unicode_Category_SO;
		case 0x1F1A1: return Unicode_Category_SO;
		case 0x1F1A2: return Unicode_Category_SO;
		case 0x1F1A3: return Unicode_Category_SO;
		case 0x1F1A4: return Unicode_Category_SO;
		case 0x1F1A5: return Unicode_Category_SO;
		case 0x1F1A6: return Unicode_Category_SO;
		case 0x1F1A7: return Unicode_Category_SO;
		case 0x1F1A8: return Unicode_Category_SO;
		case 0x1F1A9: return Unicode_Category_SO;
		case 0x1F1AA: return Unicode_Category_SO;
		case 0x1F1AB: return Unicode_Category_SO;
		case 0x1F1AC: return Unicode_Category_SO;
		case 0x1F1AD: return Unicode_Category_SO;
		case 0x1F1E6: return Unicode_Category_SO;
		case 0x1F1E7: return Unicode_Category_SO;
		case 0x1F1E8: return Unicode_Category_SO;
		case 0x1F1E9: return Unicode_Category_SO;
		case 0x1F1EA: return Unicode_Category_SO;
		case 0x1F1EB: return Unicode_Category_SO;
		case 0x1F1EC: return Unicode_Category_SO;
		case 0x1F1ED: return Unicode_Category_SO;
		case 0x1F1EE: return Unicode_Category_SO;
		case 0x1F1EF: return Unicode_Category_SO;
		case 0x1F1F0: return Unicode_Category_SO;
		case 0x1F1F1: return Unicode_Category_SO;
		case 0x1F1F2: return Unicode_Category_SO;
		case 0x1F1F3: return Unicode_Category_SO;
		case 0x1F1F4: return Unicode_Category_SO;
		case 0x1F1F5: return Unicode_Category_SO;
		case 0x1F1F6: return Unicode_Category_SO;
		case 0x1F1F7: return Unicode_Category_SO;
		case 0x1F1F8: return Unicode_Category_SO;
		case 0x1F1F9: return Unicode_Category_SO;
		case 0x1F1FA: return Unicode_Category_SO;
		case 0x1F1FB: return Unicode_Category_SO;
		case 0x1F1FC: return Unicode_Category_SO;
		case 0x1F1FD: return Unicode_Category_SO;
		case 0x1F1FE: return Unicode_Category_SO;
		case 0x1F1FF: return Unicode_Category_SO;
		case 0x1F200: return Unicode_Category_SO;
		case 0x1F201: return Unicode_Category_SO;
		case 0x1F202: return Unicode_Category_SO;
		case 0x1F210: return Unicode_Category_SO;
		case 0x1F211: return Unicode_Category_SO;
		case 0x1F212: return Unicode_Category_SO;
		case 0x1F213: return Unicode_Category_SO;
		case 0x1F214: return Unicode_Category_SO;
		case 0x1F215: return Unicode_Category_SO;
		case 0x1F216: return Unicode_Category_SO;
		case 0x1F217: return Unicode_Category_SO;
		case 0x1F218: return Unicode_Category_SO;
		case 0x1F219: return Unicode_Category_SO;
		case 0x1F21A: return Unicode_Category_SO;
		case 0x1F21B: return Unicode_Category_SO;
		case 0x1F21C: return Unicode_Category_SO;
		case 0x1F21D: return Unicode_Category_SO;
		case 0x1F21E: return Unicode_Category_SO;
		case 0x1F21F: return Unicode_Category_SO;
		case 0x1F220: return Unicode_Category_SO;
		case 0x1F221: return Unicode_Category_SO;
		case 0x1F222: return Unicode_Category_SO;
		case 0x1F223: return Unicode_Category_SO;
		case 0x1F224: return Unicode_Category_SO;
		case 0x1F225: return Unicode_Category_SO;
		case 0x1F226: return Unicode_Category_SO;
		case 0x1F227: return Unicode_Category_SO;
		case 0x1F228: return Unicode_Category_SO;
		case 0x1F229: return Unicode_Category_SO;
		case 0x1F22A: return Unicode_Category_SO;
		case 0x1F22B: return Unicode_Category_SO;
		case 0x1F22C: return Unicode_Category_SO;
		case 0x1F22D: return Unicode_Category_SO;
		case 0x1F22E: return Unicode_Category_SO;
		case 0x1F22F: return Unicode_Category_SO;
		case 0x1F230: return Unicode_Category_SO;
		case 0x1F231: return Unicode_Category_SO;
		case 0x1F232: return Unicode_Category_SO;
		case 0x1F233: return Unicode_Category_SO;
		case 0x1F234: return Unicode_Category_SO;
		case 0x1F235: return Unicode_Category_SO;
		case 0x1F236: return Unicode_Category_SO;
		case 0x1F237: return Unicode_Category_SO;
		case 0x1F238: return Unicode_Category_SO;
		case 0x1F239: return Unicode_Category_SO;
		case 0x1F23A: return Unicode_Category_SO;
		case 0x1F23B: return Unicode_Category_SO;
		case 0x1F240: return Unicode_Category_SO;
		case 0x1F241: return Unicode_Category_SO;
		case 0x1F242: return Unicode_Category_SO;
		case 0x1F243: return Unicode_Category_SO;
		case 0x1F244: return Unicode_Category_SO;
		case 0x1F245: return Unicode_Category_SO;
		case 0x1F246: return Unicode_Category_SO;
		case 0x1F247: return Unicode_Category_SO;
		case 0x1F248: return Unicode_Category_SO;
		case 0x1F250: return Unicode_Category_SO;
		case 0x1F251: return Unicode_Category_SO;
		case 0x1F260: return Unicode_Category_SO;
		case 0x1F261: return Unicode_Category_SO;
		case 0x1F262: return Unicode_Category_SO;
		case 0x1F263: return Unicode_Category_SO;
		case 0x1F264: return Unicode_Category_SO;
		case 0x1F265: return Unicode_Category_SO;
		case 0x1F300: return Unicode_Category_SO;
		case 0x1F301: return Unicode_Category_SO;
		case 0x1F302: return Unicode_Category_SO;
		case 0x1F303: return Unicode_Category_SO;
		case 0x1F304: return Unicode_Category_SO;
		case 0x1F305: return Unicode_Category_SO;
		case 0x1F306: return Unicode_Category_SO;
		case 0x1F307: return Unicode_Category_SO;
		case 0x1F308: return Unicode_Category_SO;
		case 0x1F309: return Unicode_Category_SO;
		case 0x1F30A: return Unicode_Category_SO;
		case 0x1F30B: return Unicode_Category_SO;
		case 0x1F30C: return Unicode_Category_SO;
		case 0x1F30D: return Unicode_Category_SO;
		case 0x1F30E: return Unicode_Category_SO;
		case 0x1F30F: return Unicode_Category_SO;
		case 0x1F310: return Unicode_Category_SO;
		case 0x1F311: return Unicode_Category_SO;
		case 0x1F312: return Unicode_Category_SO;
		case 0x1F313: return Unicode_Category_SO;
		case 0x1F314: return Unicode_Category_SO;
		case 0x1F315: return Unicode_Category_SO;
		case 0x1F316: return Unicode_Category_SO;
		case 0x1F317: return Unicode_Category_SO;
		case 0x1F318: return Unicode_Category_SO;
		case 0x1F319: return Unicode_Category_SO;
		case 0x1F31A: return Unicode_Category_SO;
		case 0x1F31B: return Unicode_Category_SO;
		case 0x1F31C: return Unicode_Category_SO;
		case 0x1F31D: return Unicode_Category_SO;
		case 0x1F31E: return Unicode_Category_SO;
		case 0x1F31F: return Unicode_Category_SO;
		case 0x1F320: return Unicode_Category_SO;
		case 0x1F321: return Unicode_Category_SO;
		case 0x1F322: return Unicode_Category_SO;
		case 0x1F323: return Unicode_Category_SO;
		case 0x1F324: return Unicode_Category_SO;
		case 0x1F325: return Unicode_Category_SO;
		case 0x1F326: return Unicode_Category_SO;
		case 0x1F327: return Unicode_Category_SO;
		case 0x1F328: return Unicode_Category_SO;
		case 0x1F329: return Unicode_Category_SO;
		case 0x1F32A: return Unicode_Category_SO;
		case 0x1F32B: return Unicode_Category_SO;
		case 0x1F32C: return Unicode_Category_SO;
		case 0x1F32D: return Unicode_Category_SO;
		case 0x1F32E: return Unicode_Category_SO;
		case 0x1F32F: return Unicode_Category_SO;
		case 0x1F330: return Unicode_Category_SO;
		case 0x1F331: return Unicode_Category_SO;
		case 0x1F332: return Unicode_Category_SO;
		case 0x1F333: return Unicode_Category_SO;
		case 0x1F334: return Unicode_Category_SO;
		case 0x1F335: return Unicode_Category_SO;
		case 0x1F336: return Unicode_Category_SO;
		case 0x1F337: return Unicode_Category_SO;
		case 0x1F338: return Unicode_Category_SO;
		case 0x1F339: return Unicode_Category_SO;
		case 0x1F33A: return Unicode_Category_SO;
		case 0x1F33B: return Unicode_Category_SO;
		case 0x1F33C: return Unicode_Category_SO;
		case 0x1F33D: return Unicode_Category_SO;
		case 0x1F33E: return Unicode_Category_SO;
		case 0x1F33F: return Unicode_Category_SO;
		case 0x1F340: return Unicode_Category_SO;
		case 0x1F341: return Unicode_Category_SO;
		case 0x1F342: return Unicode_Category_SO;
		case 0x1F343: return Unicode_Category_SO;
		case 0x1F344: return Unicode_Category_SO;
		case 0x1F345: return Unicode_Category_SO;
		case 0x1F346: return Unicode_Category_SO;
		case 0x1F347: return Unicode_Category_SO;
		case 0x1F348: return Unicode_Category_SO;
		case 0x1F349: return Unicode_Category_SO;
		case 0x1F34A: return Unicode_Category_SO;
		case 0x1F34B: return Unicode_Category_SO;
		case 0x1F34C: return Unicode_Category_SO;
		case 0x1F34D: return Unicode_Category_SO;
		case 0x1F34E: return Unicode_Category_SO;
		case 0x1F34F: return Unicode_Category_SO;
		case 0x1F350: return Unicode_Category_SO;
		case 0x1F351: return Unicode_Category_SO;
		case 0x1F352: return Unicode_Category_SO;
		case 0x1F353: return Unicode_Category_SO;
		case 0x1F354: return Unicode_Category_SO;
		case 0x1F355: return Unicode_Category_SO;
		case 0x1F356: return Unicode_Category_SO;
		case 0x1F357: return Unicode_Category_SO;
		case 0x1F358: return Unicode_Category_SO;
		case 0x1F359: return Unicode_Category_SO;
		case 0x1F35A: return Unicode_Category_SO;
		case 0x1F35B: return Unicode_Category_SO;
		case 0x1F35C: return Unicode_Category_SO;
		case 0x1F35D: return Unicode_Category_SO;
		case 0x1F35E: return Unicode_Category_SO;
		case 0x1F35F: return Unicode_Category_SO;
		case 0x1F360: return Unicode_Category_SO;
		case 0x1F361: return Unicode_Category_SO;
		case 0x1F362: return Unicode_Category_SO;
		case 0x1F363: return Unicode_Category_SO;
		case 0x1F364: return Unicode_Category_SO;
		case 0x1F365: return Unicode_Category_SO;
		case 0x1F366: return Unicode_Category_SO;
		case 0x1F367: return Unicode_Category_SO;
		case 0x1F368: return Unicode_Category_SO;
		case 0x1F369: return Unicode_Category_SO;
		case 0x1F36A: return Unicode_Category_SO;
		case 0x1F36B: return Unicode_Category_SO;
		case 0x1F36C: return Unicode_Category_SO;
		case 0x1F36D: return Unicode_Category_SO;
		case 0x1F36E: return Unicode_Category_SO;
		case 0x1F36F: return Unicode_Category_SO;
		case 0x1F370: return Unicode_Category_SO;
		case 0x1F371: return Unicode_Category_SO;
		case 0x1F372: return Unicode_Category_SO;
		case 0x1F373: return Unicode_Category_SO;
		case 0x1F374: return Unicode_Category_SO;
		case 0x1F375: return Unicode_Category_SO;
		case 0x1F376: return Unicode_Category_SO;
		case 0x1F377: return Unicode_Category_SO;
		case 0x1F378: return Unicode_Category_SO;
		case 0x1F379: return Unicode_Category_SO;
		case 0x1F37A: return Unicode_Category_SO;
		case 0x1F37B: return Unicode_Category_SO;
		case 0x1F37C: return Unicode_Category_SO;
		case 0x1F37D: return Unicode_Category_SO;
		case 0x1F37E: return Unicode_Category_SO;
		case 0x1F37F: return Unicode_Category_SO;
		case 0x1F380: return Unicode_Category_SO;
		case 0x1F381: return Unicode_Category_SO;
		case 0x1F382: return Unicode_Category_SO;
		case 0x1F383: return Unicode_Category_SO;
		case 0x1F384: return Unicode_Category_SO;
		case 0x1F385: return Unicode_Category_SO;
		case 0x1F386: return Unicode_Category_SO;
		case 0x1F387: return Unicode_Category_SO;
		case 0x1F388: return Unicode_Category_SO;
		case 0x1F389: return Unicode_Category_SO;
		case 0x1F38A: return Unicode_Category_SO;
		case 0x1F38B: return Unicode_Category_SO;
		case 0x1F38C: return Unicode_Category_SO;
		case 0x1F38D: return Unicode_Category_SO;
		case 0x1F38E: return Unicode_Category_SO;
		case 0x1F38F: return Unicode_Category_SO;
		case 0x1F390: return Unicode_Category_SO;
		case 0x1F391: return Unicode_Category_SO;
		case 0x1F392: return Unicode_Category_SO;
		case 0x1F393: return Unicode_Category_SO;
		case 0x1F394: return Unicode_Category_SO;
		case 0x1F395: return Unicode_Category_SO;
		case 0x1F396: return Unicode_Category_SO;
		case 0x1F397: return Unicode_Category_SO;
		case 0x1F398: return Unicode_Category_SO;
		case 0x1F399: return Unicode_Category_SO;
		case 0x1F39A: return Unicode_Category_SO;
		case 0x1F39B: return Unicode_Category_SO;
		case 0x1F39C: return Unicode_Category_SO;
		case 0x1F39D: return Unicode_Category_SO;
		case 0x1F39E: return Unicode_Category_SO;
		case 0x1F39F: return Unicode_Category_SO;
		case 0x1F3A0: return Unicode_Category_SO;
		case 0x1F3A1: return Unicode_Category_SO;
		case 0x1F3A2: return Unicode_Category_SO;
		case 0x1F3A3: return Unicode_Category_SO;
		case 0x1F3A4: return Unicode_Category_SO;
		case 0x1F3A5: return Unicode_Category_SO;
		case 0x1F3A6: return Unicode_Category_SO;
		case 0x1F3A7: return Unicode_Category_SO;
		case 0x1F3A8: return Unicode_Category_SO;
		case 0x1F3A9: return Unicode_Category_SO;
		case 0x1F3AA: return Unicode_Category_SO;
		case 0x1F3AB: return Unicode_Category_SO;
		case 0x1F3AC: return Unicode_Category_SO;
		case 0x1F3AD: return Unicode_Category_SO;
		case 0x1F3AE: return Unicode_Category_SO;
		case 0x1F3AF: return Unicode_Category_SO;
		case 0x1F3B0: return Unicode_Category_SO;
		case 0x1F3B1: return Unicode_Category_SO;
		case 0x1F3B2: return Unicode_Category_SO;
		case 0x1F3B3: return Unicode_Category_SO;
		case 0x1F3B4: return Unicode_Category_SO;
		case 0x1F3B5: return Unicode_Category_SO;
		case 0x1F3B6: return Unicode_Category_SO;
		case 0x1F3B7: return Unicode_Category_SO;
		case 0x1F3B8: return Unicode_Category_SO;
		case 0x1F3B9: return Unicode_Category_SO;
		case 0x1F3BA: return Unicode_Category_SO;
		case 0x1F3BB: return Unicode_Category_SO;
		case 0x1F3BC: return Unicode_Category_SO;
		case 0x1F3BD: return Unicode_Category_SO;
		case 0x1F3BE: return Unicode_Category_SO;
		case 0x1F3BF: return Unicode_Category_SO;
		case 0x1F3C0: return Unicode_Category_SO;
		case 0x1F3C1: return Unicode_Category_SO;
		case 0x1F3C2: return Unicode_Category_SO;
		case 0x1F3C3: return Unicode_Category_SO;
		case 0x1F3C4: return Unicode_Category_SO;
		case 0x1F3C5: return Unicode_Category_SO;
		case 0x1F3C6: return Unicode_Category_SO;
		case 0x1F3C7: return Unicode_Category_SO;
		case 0x1F3C8: return Unicode_Category_SO;
		case 0x1F3C9: return Unicode_Category_SO;
		case 0x1F3CA: return Unicode_Category_SO;
		case 0x1F3CB: return Unicode_Category_SO;
		case 0x1F3CC: return Unicode_Category_SO;
		case 0x1F3CD: return Unicode_Category_SO;
		case 0x1F3CE: return Unicode_Category_SO;
		case 0x1F3CF: return Unicode_Category_SO;
		case 0x1F3D0: return Unicode_Category_SO;
		case 0x1F3D1: return Unicode_Category_SO;
		case 0x1F3D2: return Unicode_Category_SO;
		case 0x1F3D3: return Unicode_Category_SO;
		case 0x1F3D4: return Unicode_Category_SO;
		case 0x1F3D5: return Unicode_Category_SO;
		case 0x1F3D6: return Unicode_Category_SO;
		case 0x1F3D7: return Unicode_Category_SO;
		case 0x1F3D8: return Unicode_Category_SO;
		case 0x1F3D9: return Unicode_Category_SO;
		case 0x1F3DA: return Unicode_Category_SO;
		case 0x1F3DB: return Unicode_Category_SO;
		case 0x1F3DC: return Unicode_Category_SO;
		case 0x1F3DD: return Unicode_Category_SO;
		case 0x1F3DE: return Unicode_Category_SO;
		case 0x1F3DF: return Unicode_Category_SO;
		case 0x1F3E0: return Unicode_Category_SO;
		case 0x1F3E1: return Unicode_Category_SO;
		case 0x1F3E2: return Unicode_Category_SO;
		case 0x1F3E3: return Unicode_Category_SO;
		case 0x1F3E4: return Unicode_Category_SO;
		case 0x1F3E5: return Unicode_Category_SO;
		case 0x1F3E6: return Unicode_Category_SO;
		case 0x1F3E7: return Unicode_Category_SO;
		case 0x1F3E8: return Unicode_Category_SO;
		case 0x1F3E9: return Unicode_Category_SO;
		case 0x1F3EA: return Unicode_Category_SO;
		case 0x1F3EB: return Unicode_Category_SO;
		case 0x1F3EC: return Unicode_Category_SO;
		case 0x1F3ED: return Unicode_Category_SO;
		case 0x1F3EE: return Unicode_Category_SO;
		case 0x1F3EF: return Unicode_Category_SO;
		case 0x1F3F0: return Unicode_Category_SO;
		case 0x1F3F1: return Unicode_Category_SO;
		case 0x1F3F2: return Unicode_Category_SO;
		case 0x1F3F3: return Unicode_Category_SO;
		case 0x1F3F4: return Unicode_Category_SO;
		case 0x1F3F5: return Unicode_Category_SO;
		case 0x1F3F6: return Unicode_Category_SO;
		case 0x1F3F7: return Unicode_Category_SO;
		case 0x1F3F8: return Unicode_Category_SO;
		case 0x1F3F9: return Unicode_Category_SO;
		case 0x1F3FA: return Unicode_Category_SO;
		case 0x1F3FB: return Unicode_Category_SK;
		case 0x1F3FC: return Unicode_Category_SK;
		case 0x1F3FD: return Unicode_Category_SK;
		case 0x1F3FE: return Unicode_Category_SK;
		case 0x1F3FF: return Unicode_Category_SK;
		case 0x1F400: return Unicode_Category_SO;
		case 0x1F401: return Unicode_Category_SO;
		case 0x1F402: return Unicode_Category_SO;
		case 0x1F403: return Unicode_Category_SO;
		case 0x1F404: return Unicode_Category_SO;
		case 0x1F405: return Unicode_Category_SO;
		case 0x1F406: return Unicode_Category_SO;
		case 0x1F407: return Unicode_Category_SO;
		case 0x1F408: return Unicode_Category_SO;
		case 0x1F409: return Unicode_Category_SO;
		case 0x1F40A: return Unicode_Category_SO;
		case 0x1F40B: return Unicode_Category_SO;
		case 0x1F40C: return Unicode_Category_SO;
		case 0x1F40D: return Unicode_Category_SO;
		case 0x1F40E: return Unicode_Category_SO;
		case 0x1F40F: return Unicode_Category_SO;
		case 0x1F410: return Unicode_Category_SO;
		case 0x1F411: return Unicode_Category_SO;
		case 0x1F412: return Unicode_Category_SO;
		case 0x1F413: return Unicode_Category_SO;
		case 0x1F414: return Unicode_Category_SO;
		case 0x1F415: return Unicode_Category_SO;
		case 0x1F416: return Unicode_Category_SO;
		case 0x1F417: return Unicode_Category_SO;
		case 0x1F418: return Unicode_Category_SO;
		case 0x1F419: return Unicode_Category_SO;
		case 0x1F41A: return Unicode_Category_SO;
		case 0x1F41B: return Unicode_Category_SO;
		case 0x1F41C: return Unicode_Category_SO;
		case 0x1F41D: return Unicode_Category_SO;
		case 0x1F41E: return Unicode_Category_SO;
		case 0x1F41F: return Unicode_Category_SO;
		case 0x1F420: return Unicode_Category_SO;
		case 0x1F421: return Unicode_Category_SO;
		case 0x1F422: return Unicode_Category_SO;
		case 0x1F423: return Unicode_Category_SO;
		case 0x1F424: return Unicode_Category_SO;
		case 0x1F425: return Unicode_Category_SO;
		case 0x1F426: return Unicode_Category_SO;
		case 0x1F427: return Unicode_Category_SO;
		case 0x1F428: return Unicode_Category_SO;
		case 0x1F429: return Unicode_Category_SO;
		case 0x1F42A: return Unicode_Category_SO;
		case 0x1F42B: return Unicode_Category_SO;
		case 0x1F42C: return Unicode_Category_SO;
		case 0x1F42D: return Unicode_Category_SO;
		case 0x1F42E: return Unicode_Category_SO;
		case 0x1F42F: return Unicode_Category_SO;
		case 0x1F430: return Unicode_Category_SO;
		case 0x1F431: return Unicode_Category_SO;
		case 0x1F432: return Unicode_Category_SO;
		case 0x1F433: return Unicode_Category_SO;
		case 0x1F434: return Unicode_Category_SO;
		case 0x1F435: return Unicode_Category_SO;
		case 0x1F436: return Unicode_Category_SO;
		case 0x1F437: return Unicode_Category_SO;
		case 0x1F438: return Unicode_Category_SO;
		case 0x1F439: return Unicode_Category_SO;
		case 0x1F43A: return Unicode_Category_SO;
		case 0x1F43B: return Unicode_Category_SO;
		case 0x1F43C: return Unicode_Category_SO;
		case 0x1F43D: return Unicode_Category_SO;
		case 0x1F43E: return Unicode_Category_SO;
		case 0x1F43F: return Unicode_Category_SO;
		case 0x1F440: return Unicode_Category_SO;
		case 0x1F441: return Unicode_Category_SO;
		case 0x1F442: return Unicode_Category_SO;
		case 0x1F443: return Unicode_Category_SO;
		case 0x1F444: return Unicode_Category_SO;
		case 0x1F445: return Unicode_Category_SO;
		case 0x1F446: return Unicode_Category_SO;
		case 0x1F447: return Unicode_Category_SO;
		case 0x1F448: return Unicode_Category_SO;
		case 0x1F449: return Unicode_Category_SO;
		case 0x1F44A: return Unicode_Category_SO;
		case 0x1F44B: return Unicode_Category_SO;
		case 0x1F44C: return Unicode_Category_SO;
		case 0x1F44D: return Unicode_Category_SO;
		case 0x1F44E: return Unicode_Category_SO;
		case 0x1F44F: return Unicode_Category_SO;
		case 0x1F450: return Unicode_Category_SO;
		case 0x1F451: return Unicode_Category_SO;
		case 0x1F452: return Unicode_Category_SO;
		case 0x1F453: return Unicode_Category_SO;
		case 0x1F454: return Unicode_Category_SO;
		case 0x1F455: return Unicode_Category_SO;
		case 0x1F456: return Unicode_Category_SO;
		case 0x1F457: return Unicode_Category_SO;
		case 0x1F458: return Unicode_Category_SO;
		case 0x1F459: return Unicode_Category_SO;
		case 0x1F45A: return Unicode_Category_SO;
		case 0x1F45B: return Unicode_Category_SO;
		case 0x1F45C: return Unicode_Category_SO;
		case 0x1F45D: return Unicode_Category_SO;
		case 0x1F45E: return Unicode_Category_SO;
		case 0x1F45F: return Unicode_Category_SO;
		case 0x1F460: return Unicode_Category_SO;
		case 0x1F461: return Unicode_Category_SO;
		case 0x1F462: return Unicode_Category_SO;
		case 0x1F463: return Unicode_Category_SO;
		case 0x1F464: return Unicode_Category_SO;
		case 0x1F465: return Unicode_Category_SO;
		case 0x1F466: return Unicode_Category_SO;
		case 0x1F467: return Unicode_Category_SO;
		case 0x1F468: return Unicode_Category_SO;
		case 0x1F469: return Unicode_Category_SO;
		case 0x1F46A: return Unicode_Category_SO;
		case 0x1F46B: return Unicode_Category_SO;
		case 0x1F46C: return Unicode_Category_SO;
		case 0x1F46D: return Unicode_Category_SO;
		case 0x1F46E: return Unicode_Category_SO;
		case 0x1F46F: return Unicode_Category_SO;
		case 0x1F470: return Unicode_Category_SO;
		case 0x1F471: return Unicode_Category_SO;
		case 0x1F472: return Unicode_Category_SO;
		case 0x1F473: return Unicode_Category_SO;
		case 0x1F474: return Unicode_Category_SO;
		case 0x1F475: return Unicode_Category_SO;
		case 0x1F476: return Unicode_Category_SO;
		case 0x1F477: return Unicode_Category_SO;
		case 0x1F478: return Unicode_Category_SO;
		case 0x1F479: return Unicode_Category_SO;
		case 0x1F47A: return Unicode_Category_SO;
		case 0x1F47B: return Unicode_Category_SO;
		case 0x1F47C: return Unicode_Category_SO;
		case 0x1F47D: return Unicode_Category_SO;
		case 0x1F47E: return Unicode_Category_SO;
		case 0x1F47F: return Unicode_Category_SO;
		case 0x1F480: return Unicode_Category_SO;
		case 0x1F481: return Unicode_Category_SO;
		case 0x1F482: return Unicode_Category_SO;
		case 0x1F483: return Unicode_Category_SO;
		case 0x1F484: return Unicode_Category_SO;
		case 0x1F485: return Unicode_Category_SO;
		case 0x1F486: return Unicode_Category_SO;
		case 0x1F487: return Unicode_Category_SO;
		case 0x1F488: return Unicode_Category_SO;
		case 0x1F489: return Unicode_Category_SO;
		case 0x1F48A: return Unicode_Category_SO;
		case 0x1F48B: return Unicode_Category_SO;
		case 0x1F48C: return Unicode_Category_SO;
		case 0x1F48D: return Unicode_Category_SO;
		case 0x1F48E: return Unicode_Category_SO;
		case 0x1F48F: return Unicode_Category_SO;
		case 0x1F490: return Unicode_Category_SO;
		case 0x1F491: return Unicode_Category_SO;
		case 0x1F492: return Unicode_Category_SO;
		case 0x1F493: return Unicode_Category_SO;
		case 0x1F494: return Unicode_Category_SO;
		case 0x1F495: return Unicode_Category_SO;
		case 0x1F496: return Unicode_Category_SO;
		case 0x1F497: return Unicode_Category_SO;
		case 0x1F498: return Unicode_Category_SO;
		case 0x1F499: return Unicode_Category_SO;
		case 0x1F49A: return Unicode_Category_SO;
		case 0x1F49B: return Unicode_Category_SO;
		case 0x1F49C: return Unicode_Category_SO;
		case 0x1F49D: return Unicode_Category_SO;
		case 0x1F49E: return Unicode_Category_SO;
		case 0x1F49F: return Unicode_Category_SO;
		case 0x1F4A0: return Unicode_Category_SO;
		case 0x1F4A1: return Unicode_Category_SO;
		case 0x1F4A2: return Unicode_Category_SO;
		case 0x1F4A3: return Unicode_Category_SO;
		case 0x1F4A4: return Unicode_Category_SO;
		case 0x1F4A5: return Unicode_Category_SO;
		case 0x1F4A6: return Unicode_Category_SO;
		case 0x1F4A7: return Unicode_Category_SO;
		case 0x1F4A8: return Unicode_Category_SO;
		case 0x1F4A9: return Unicode_Category_SO;
		case 0x1F4AA: return Unicode_Category_SO;
		case 0x1F4AB: return Unicode_Category_SO;
		case 0x1F4AC: return Unicode_Category_SO;
		case 0x1F4AD: return Unicode_Category_SO;
		case 0x1F4AE: return Unicode_Category_SO;
		case 0x1F4AF: return Unicode_Category_SO;
		case 0x1F4B0: return Unicode_Category_SO;
		case 0x1F4B1: return Unicode_Category_SO;
		case 0x1F4B2: return Unicode_Category_SO;
		case 0x1F4B3: return Unicode_Category_SO;
		case 0x1F4B4: return Unicode_Category_SO;
		case 0x1F4B5: return Unicode_Category_SO;
		case 0x1F4B6: return Unicode_Category_SO;
		case 0x1F4B7: return Unicode_Category_SO;
		case 0x1F4B8: return Unicode_Category_SO;
		case 0x1F4B9: return Unicode_Category_SO;
		case 0x1F4BA: return Unicode_Category_SO;
		case 0x1F4BB: return Unicode_Category_SO;
		case 0x1F4BC: return Unicode_Category_SO;
		case 0x1F4BD: return Unicode_Category_SO;
		case 0x1F4BE: return Unicode_Category_SO;
		case 0x1F4BF: return Unicode_Category_SO;
		case 0x1F4C0: return Unicode_Category_SO;
		case 0x1F4C1: return Unicode_Category_SO;
		case 0x1F4C2: return Unicode_Category_SO;
		case 0x1F4C3: return Unicode_Category_SO;
		case 0x1F4C4: return Unicode_Category_SO;
		case 0x1F4C5: return Unicode_Category_SO;
		case 0x1F4C6: return Unicode_Category_SO;
		case 0x1F4C7: return Unicode_Category_SO;
		case 0x1F4C8: return Unicode_Category_SO;
		case 0x1F4C9: return Unicode_Category_SO;
		case 0x1F4CA: return Unicode_Category_SO;
		case 0x1F4CB: return Unicode_Category_SO;
		case 0x1F4CC: return Unicode_Category_SO;
		case 0x1F4CD: return Unicode_Category_SO;
		case 0x1F4CE: return Unicode_Category_SO;
		case 0x1F4CF: return Unicode_Category_SO;
		case 0x1F4D0: return Unicode_Category_SO;
		case 0x1F4D1: return Unicode_Category_SO;
		case 0x1F4D2: return Unicode_Category_SO;
		case 0x1F4D3: return Unicode_Category_SO;
		case 0x1F4D4: return Unicode_Category_SO;
		case 0x1F4D5: return Unicode_Category_SO;
		case 0x1F4D6: return Unicode_Category_SO;
		case 0x1F4D7: return Unicode_Category_SO;
		case 0x1F4D8: return Unicode_Category_SO;
		case 0x1F4D9: return Unicode_Category_SO;
		case 0x1F4DA: return Unicode_Category_SO;
		case 0x1F4DB: return Unicode_Category_SO;
		case 0x1F4DC: return Unicode_Category_SO;
		case 0x1F4DD: return Unicode_Category_SO;
		case 0x1F4DE: return Unicode_Category_SO;
		case 0x1F4DF: return Unicode_Category_SO;
		case 0x1F4E0: return Unicode_Category_SO;
		case 0x1F4E1: return Unicode_Category_SO;
		case 0x1F4E2: return Unicode_Category_SO;
		case 0x1F4E3: return Unicode_Category_SO;
		case 0x1F4E4: return Unicode_Category_SO;
		case 0x1F4E5: return Unicode_Category_SO;
		case 0x1F4E6: return Unicode_Category_SO;
		case 0x1F4E7: return Unicode_Category_SO;
		case 0x1F4E8: return Unicode_Category_SO;
		case 0x1F4E9: return Unicode_Category_SO;
		case 0x1F4EA: return Unicode_Category_SO;
		case 0x1F4EB: return Unicode_Category_SO;
		case 0x1F4EC: return Unicode_Category_SO;
		case 0x1F4ED: return Unicode_Category_SO;
		case 0x1F4EE: return Unicode_Category_SO;
		case 0x1F4EF: return Unicode_Category_SO;
		case 0x1F4F0: return Unicode_Category_SO;
		case 0x1F4F1: return Unicode_Category_SO;
		case 0x1F4F2: return Unicode_Category_SO;
		case 0x1F4F3: return Unicode_Category_SO;
		case 0x1F4F4: return Unicode_Category_SO;
		case 0x1F4F5: return Unicode_Category_SO;
		case 0x1F4F6: return Unicode_Category_SO;
		case 0x1F4F7: return Unicode_Category_SO;
		case 0x1F4F8: return Unicode_Category_SO;
		case 0x1F4F9: return Unicode_Category_SO;
		case 0x1F4FA: return Unicode_Category_SO;
		case 0x1F4FB: return Unicode_Category_SO;
		case 0x1F4FC: return Unicode_Category_SO;
		case 0x1F4FD: return Unicode_Category_SO;
		case 0x1F4FE: return Unicode_Category_SO;
		case 0x1F4FF: return Unicode_Category_SO;
		case 0x1F500: return Unicode_Category_SO;
		case 0x1F501: return Unicode_Category_SO;
		case 0x1F502: return Unicode_Category_SO;
		case 0x1F503: return Unicode_Category_SO;
		case 0x1F504: return Unicode_Category_SO;
		case 0x1F505: return Unicode_Category_SO;
		case 0x1F506: return Unicode_Category_SO;
		case 0x1F507: return Unicode_Category_SO;
		case 0x1F508: return Unicode_Category_SO;
		case 0x1F509: return Unicode_Category_SO;
		case 0x1F50A: return Unicode_Category_SO;
		case 0x1F50B: return Unicode_Category_SO;
		case 0x1F50C: return Unicode_Category_SO;
		case 0x1F50D: return Unicode_Category_SO;
		case 0x1F50E: return Unicode_Category_SO;
		case 0x1F50F: return Unicode_Category_SO;
		case 0x1F510: return Unicode_Category_SO;
		case 0x1F511: return Unicode_Category_SO;
		case 0x1F512: return Unicode_Category_SO;
		case 0x1F513: return Unicode_Category_SO;
		case 0x1F514: return Unicode_Category_SO;
		case 0x1F515: return Unicode_Category_SO;
		case 0x1F516: return Unicode_Category_SO;
		case 0x1F517: return Unicode_Category_SO;
		case 0x1F518: return Unicode_Category_SO;
		case 0x1F519: return Unicode_Category_SO;
		case 0x1F51A: return Unicode_Category_SO;
		case 0x1F51B: return Unicode_Category_SO;
		case 0x1F51C: return Unicode_Category_SO;
		case 0x1F51D: return Unicode_Category_SO;
		case 0x1F51E: return Unicode_Category_SO;
		case 0x1F51F: return Unicode_Category_SO;
		case 0x1F520: return Unicode_Category_SO;
		case 0x1F521: return Unicode_Category_SO;
		case 0x1F522: return Unicode_Category_SO;
		case 0x1F523: return Unicode_Category_SO;
		case 0x1F524: return Unicode_Category_SO;
		case 0x1F525: return Unicode_Category_SO;
		case 0x1F526: return Unicode_Category_SO;
		case 0x1F527: return Unicode_Category_SO;
		case 0x1F528: return Unicode_Category_SO;
		case 0x1F529: return Unicode_Category_SO;
		case 0x1F52A: return Unicode_Category_SO;
		case 0x1F52B: return Unicode_Category_SO;
		case 0x1F52C: return Unicode_Category_SO;
		case 0x1F52D: return Unicode_Category_SO;
		case 0x1F52E: return Unicode_Category_SO;
		case 0x1F52F: return Unicode_Category_SO;
		case 0x1F530: return Unicode_Category_SO;
		case 0x1F531: return Unicode_Category_SO;
		case 0x1F532: return Unicode_Category_SO;
		case 0x1F533: return Unicode_Category_SO;
		case 0x1F534: return Unicode_Category_SO;
		case 0x1F535: return Unicode_Category_SO;
		case 0x1F536: return Unicode_Category_SO;
		case 0x1F537: return Unicode_Category_SO;
		case 0x1F538: return Unicode_Category_SO;
		case 0x1F539: return Unicode_Category_SO;
		case 0x1F53A: return Unicode_Category_SO;
		case 0x1F53B: return Unicode_Category_SO;
		case 0x1F53C: return Unicode_Category_SO;
		case 0x1F53D: return Unicode_Category_SO;
		case 0x1F53E: return Unicode_Category_SO;
		case 0x1F53F: return Unicode_Category_SO;
		case 0x1F540: return Unicode_Category_SO;
		case 0x1F541: return Unicode_Category_SO;
		case 0x1F542: return Unicode_Category_SO;
		case 0x1F543: return Unicode_Category_SO;
		case 0x1F544: return Unicode_Category_SO;
		case 0x1F545: return Unicode_Category_SO;
		case 0x1F546: return Unicode_Category_SO;
		case 0x1F547: return Unicode_Category_SO;
		case 0x1F548: return Unicode_Category_SO;
		case 0x1F549: return Unicode_Category_SO;
		case 0x1F54A: return Unicode_Category_SO;
		case 0x1F54B: return Unicode_Category_SO;
		case 0x1F54C: return Unicode_Category_SO;
		case 0x1F54D: return Unicode_Category_SO;
		case 0x1F54E: return Unicode_Category_SO;
		case 0x1F54F: return Unicode_Category_SO;
		case 0x1F550: return Unicode_Category_SO;
		case 0x1F551: return Unicode_Category_SO;
		case 0x1F552: return Unicode_Category_SO;
		case 0x1F553: return Unicode_Category_SO;
		case 0x1F554: return Unicode_Category_SO;
		case 0x1F555: return Unicode_Category_SO;
		case 0x1F556: return Unicode_Category_SO;
		case 0x1F557: return Unicode_Category_SO;
		case 0x1F558: return Unicode_Category_SO;
		case 0x1F559: return Unicode_Category_SO;
		case 0x1F55A: return Unicode_Category_SO;
		case 0x1F55B: return Unicode_Category_SO;
		case 0x1F55C: return Unicode_Category_SO;
		case 0x1F55D: return Unicode_Category_SO;
		case 0x1F55E: return Unicode_Category_SO;
		case 0x1F55F: return Unicode_Category_SO;
		case 0x1F560: return Unicode_Category_SO;
		case 0x1F561: return Unicode_Category_SO;
		case 0x1F562: return Unicode_Category_SO;
		case 0x1F563: return Unicode_Category_SO;
		case 0x1F564: return Unicode_Category_SO;
		case 0x1F565: return Unicode_Category_SO;
		case 0x1F566: return Unicode_Category_SO;
		case 0x1F567: return Unicode_Category_SO;
		case 0x1F568: return Unicode_Category_SO;
		case 0x1F569: return Unicode_Category_SO;
		case 0x1F56A: return Unicode_Category_SO;
		case 0x1F56B: return Unicode_Category_SO;
		case 0x1F56C: return Unicode_Category_SO;
		case 0x1F56D: return Unicode_Category_SO;
		case 0x1F56E: return Unicode_Category_SO;
		case 0x1F56F: return Unicode_Category_SO;
		case 0x1F570: return Unicode_Category_SO;
		case 0x1F571: return Unicode_Category_SO;
		case 0x1F572: return Unicode_Category_SO;
		case 0x1F573: return Unicode_Category_SO;
		case 0x1F574: return Unicode_Category_SO;
		case 0x1F575: return Unicode_Category_SO;
		case 0x1F576: return Unicode_Category_SO;
		case 0x1F577: return Unicode_Category_SO;
		case 0x1F578: return Unicode_Category_SO;
		case 0x1F579: return Unicode_Category_SO;
		case 0x1F57A: return Unicode_Category_SO;
		case 0x1F57B: return Unicode_Category_SO;
		case 0x1F57C: return Unicode_Category_SO;
		case 0x1F57D: return Unicode_Category_SO;
		case 0x1F57E: return Unicode_Category_SO;
		case 0x1F57F: return Unicode_Category_SO;
		case 0x1F580: return Unicode_Category_SO;
		case 0x1F581: return Unicode_Category_SO;
		case 0x1F582: return Unicode_Category_SO;
		case 0x1F583: return Unicode_Category_SO;
		case 0x1F584: return Unicode_Category_SO;
		case 0x1F585: return Unicode_Category_SO;
		case 0x1F586: return Unicode_Category_SO;
		case 0x1F587: return Unicode_Category_SO;
		case 0x1F588: return Unicode_Category_SO;
		case 0x1F589: return Unicode_Category_SO;
		case 0x1F58A: return Unicode_Category_SO;
		case 0x1F58B: return Unicode_Category_SO;
		case 0x1F58C: return Unicode_Category_SO;
		case 0x1F58D: return Unicode_Category_SO;
		case 0x1F58E: return Unicode_Category_SO;
		case 0x1F58F: return Unicode_Category_SO;
		case 0x1F590: return Unicode_Category_SO;
		case 0x1F591: return Unicode_Category_SO;
		case 0x1F592: return Unicode_Category_SO;
		case 0x1F593: return Unicode_Category_SO;
		case 0x1F594: return Unicode_Category_SO;
		case 0x1F595: return Unicode_Category_SO;
		case 0x1F596: return Unicode_Category_SO;
		case 0x1F597: return Unicode_Category_SO;
		case 0x1F598: return Unicode_Category_SO;
		case 0x1F599: return Unicode_Category_SO;
		case 0x1F59A: return Unicode_Category_SO;
		case 0x1F59B: return Unicode_Category_SO;
		case 0x1F59C: return Unicode_Category_SO;
		case 0x1F59D: return Unicode_Category_SO;
		case 0x1F59E: return Unicode_Category_SO;
		case 0x1F59F: return Unicode_Category_SO;
		case 0x1F5A0: return Unicode_Category_SO;
		case 0x1F5A1: return Unicode_Category_SO;
		case 0x1F5A2: return Unicode_Category_SO;
		case 0x1F5A3: return Unicode_Category_SO;
		case 0x1F5A4: return Unicode_Category_SO;
		case 0x1F5A5: return Unicode_Category_SO;
		case 0x1F5A6: return Unicode_Category_SO;
		case 0x1F5A7: return Unicode_Category_SO;
		case 0x1F5A8: return Unicode_Category_SO;
		case 0x1F5A9: return Unicode_Category_SO;
		case 0x1F5AA: return Unicode_Category_SO;
		case 0x1F5AB: return Unicode_Category_SO;
		case 0x1F5AC: return Unicode_Category_SO;
		case 0x1F5AD: return Unicode_Category_SO;
		case 0x1F5AE: return Unicode_Category_SO;
		case 0x1F5AF: return Unicode_Category_SO;
		case 0x1F5B0: return Unicode_Category_SO;
		case 0x1F5B1: return Unicode_Category_SO;
		case 0x1F5B2: return Unicode_Category_SO;
		case 0x1F5B3: return Unicode_Category_SO;
		case 0x1F5B4: return Unicode_Category_SO;
		case 0x1F5B5: return Unicode_Category_SO;
		case 0x1F5B6: return Unicode_Category_SO;
		case 0x1F5B7: return Unicode_Category_SO;
		case 0x1F5B8: return Unicode_Category_SO;
		case 0x1F5B9: return Unicode_Category_SO;
		case 0x1F5BA: return Unicode_Category_SO;
		case 0x1F5BB: return Unicode_Category_SO;
		case 0x1F5BC: return Unicode_Category_SO;
		case 0x1F5BD: return Unicode_Category_SO;
		case 0x1F5BE: return Unicode_Category_SO;
		case 0x1F5BF: return Unicode_Category_SO;
		case 0x1F5C0: return Unicode_Category_SO;
		case 0x1F5C1: return Unicode_Category_SO;
		case 0x1F5C2: return Unicode_Category_SO;
		case 0x1F5C3: return Unicode_Category_SO;
		case 0x1F5C4: return Unicode_Category_SO;
		case 0x1F5C5: return Unicode_Category_SO;
		case 0x1F5C6: return Unicode_Category_SO;
		case 0x1F5C7: return Unicode_Category_SO;
		case 0x1F5C8: return Unicode_Category_SO;
		case 0x1F5C9: return Unicode_Category_SO;
		case 0x1F5CA: return Unicode_Category_SO;
		case 0x1F5CB: return Unicode_Category_SO;
		case 0x1F5CC: return Unicode_Category_SO;
		case 0x1F5CD: return Unicode_Category_SO;
		case 0x1F5CE: return Unicode_Category_SO;
		case 0x1F5CF: return Unicode_Category_SO;
		case 0x1F5D0: return Unicode_Category_SO;
		case 0x1F5D1: return Unicode_Category_SO;
		case 0x1F5D2: return Unicode_Category_SO;
		case 0x1F5D3: return Unicode_Category_SO;
		case 0x1F5D4: return Unicode_Category_SO;
		case 0x1F5D5: return Unicode_Category_SO;
		case 0x1F5D6: return Unicode_Category_SO;
		case 0x1F5D7: return Unicode_Category_SO;
		case 0x1F5D8: return Unicode_Category_SO;
		case 0x1F5D9: return Unicode_Category_SO;
		case 0x1F5DA: return Unicode_Category_SO;
		case 0x1F5DB: return Unicode_Category_SO;
		case 0x1F5DC: return Unicode_Category_SO;
		case 0x1F5DD: return Unicode_Category_SO;
		case 0x1F5DE: return Unicode_Category_SO;
		case 0x1F5DF: return Unicode_Category_SO;
		case 0x1F5E0: return Unicode_Category_SO;
		case 0x1F5E1: return Unicode_Category_SO;
		case 0x1F5E2: return Unicode_Category_SO;
		case 0x1F5E3: return Unicode_Category_SO;
		case 0x1F5E4: return Unicode_Category_SO;
		case 0x1F5E5: return Unicode_Category_SO;
		case 0x1F5E6: return Unicode_Category_SO;
		case 0x1F5E7: return Unicode_Category_SO;
		case 0x1F5E8: return Unicode_Category_SO;
		case 0x1F5E9: return Unicode_Category_SO;
		case 0x1F5EA: return Unicode_Category_SO;
		case 0x1F5EB: return Unicode_Category_SO;
		case 0x1F5EC: return Unicode_Category_SO;
		case 0x1F5ED: return Unicode_Category_SO;
		case 0x1F5EE: return Unicode_Category_SO;
		case 0x1F5EF: return Unicode_Category_SO;
		case 0x1F5F0: return Unicode_Category_SO;
		case 0x1F5F1: return Unicode_Category_SO;
		case 0x1F5F2: return Unicode_Category_SO;
		case 0x1F5F3: return Unicode_Category_SO;
		case 0x1F5F4: return Unicode_Category_SO;
		case 0x1F5F5: return Unicode_Category_SO;
		case 0x1F5F6: return Unicode_Category_SO;
		case 0x1F5F7: return Unicode_Category_SO;
		case 0x1F5F8: return Unicode_Category_SO;
		case 0x1F5F9: return Unicode_Category_SO;
		case 0x1F5FA: return Unicode_Category_SO;
		case 0x1F5FB: return Unicode_Category_SO;
		case 0x1F5FC: return Unicode_Category_SO;
		case 0x1F5FD: return Unicode_Category_SO;
		case 0x1F5FE: return Unicode_Category_SO;
		case 0x1F5FF: return Unicode_Category_SO;
		case 0x1F600: return Unicode_Category_SO;
		case 0x1F601: return Unicode_Category_SO;
		case 0x1F602: return Unicode_Category_SO;
		case 0x1F603: return Unicode_Category_SO;
		case 0x1F604: return Unicode_Category_SO;
		case 0x1F605: return Unicode_Category_SO;
		case 0x1F606: return Unicode_Category_SO;
		case 0x1F607: return Unicode_Category_SO;
		case 0x1F608: return Unicode_Category_SO;
		case 0x1F609: return Unicode_Category_SO;
		case 0x1F60A: return Unicode_Category_SO;
		case 0x1F60B: return Unicode_Category_SO;
		case 0x1F60C: return Unicode_Category_SO;
		case 0x1F60D: return Unicode_Category_SO;
		case 0x1F60E: return Unicode_Category_SO;
		case 0x1F60F: return Unicode_Category_SO;
		case 0x1F610: return Unicode_Category_SO;
		case 0x1F611: return Unicode_Category_SO;
		case 0x1F612: return Unicode_Category_SO;
		case 0x1F613: return Unicode_Category_SO;
		case 0x1F614: return Unicode_Category_SO;
		case 0x1F615: return Unicode_Category_SO;
		case 0x1F616: return Unicode_Category_SO;
		case 0x1F617: return Unicode_Category_SO;
		case 0x1F618: return Unicode_Category_SO;
		case 0x1F619: return Unicode_Category_SO;
		case 0x1F61A: return Unicode_Category_SO;
		case 0x1F61B: return Unicode_Category_SO;
		case 0x1F61C: return Unicode_Category_SO;
		case 0x1F61D: return Unicode_Category_SO;
		case 0x1F61E: return Unicode_Category_SO;
		case 0x1F61F: return Unicode_Category_SO;
		case 0x1F620: return Unicode_Category_SO;
		case 0x1F621: return Unicode_Category_SO;
		case 0x1F622: return Unicode_Category_SO;
		case 0x1F623: return Unicode_Category_SO;
		case 0x1F624: return Unicode_Category_SO;
		case 0x1F625: return Unicode_Category_SO;
		case 0x1F626: return Unicode_Category_SO;
		case 0x1F627: return Unicode_Category_SO;
		case 0x1F628: return Unicode_Category_SO;
		case 0x1F629: return Unicode_Category_SO;
		case 0x1F62A: return Unicode_Category_SO;
		case 0x1F62B: return Unicode_Category_SO;
		case 0x1F62C: return Unicode_Category_SO;
		case 0x1F62D: return Unicode_Category_SO;
		case 0x1F62E: return Unicode_Category_SO;
		case 0x1F62F: return Unicode_Category_SO;
		case 0x1F630: return Unicode_Category_SO;
		case 0x1F631: return Unicode_Category_SO;
		case 0x1F632: return Unicode_Category_SO;
		case 0x1F633: return Unicode_Category_SO;
		case 0x1F634: return Unicode_Category_SO;
		case 0x1F635: return Unicode_Category_SO;
		case 0x1F636: return Unicode_Category_SO;
		case 0x1F637: return Unicode_Category_SO;
		case 0x1F638: return Unicode_Category_SO;
		case 0x1F639: return Unicode_Category_SO;
		case 0x1F63A: return Unicode_Category_SO;
		case 0x1F63B: return Unicode_Category_SO;
		case 0x1F63C: return Unicode_Category_SO;
		case 0x1F63D: return Unicode_Category_SO;
		case 0x1F63E: return Unicode_Category_SO;
		case 0x1F63F: return Unicode_Category_SO;
		case 0x1F640: return Unicode_Category_SO;
		case 0x1F641: return Unicode_Category_SO;
		case 0x1F642: return Unicode_Category_SO;
		case 0x1F643: return Unicode_Category_SO;
		case 0x1F644: return Unicode_Category_SO;
		case 0x1F645: return Unicode_Category_SO;
		case 0x1F646: return Unicode_Category_SO;
		case 0x1F647: return Unicode_Category_SO;
		case 0x1F648: return Unicode_Category_SO;
		case 0x1F649: return Unicode_Category_SO;
		case 0x1F64A: return Unicode_Category_SO;
		case 0x1F64B: return Unicode_Category_SO;
		case 0x1F64C: return Unicode_Category_SO;
		case 0x1F64D: return Unicode_Category_SO;
		case 0x1F64E: return Unicode_Category_SO;
		case 0x1F64F: return Unicode_Category_SO;
		case 0x1F650: return Unicode_Category_SO;
		case 0x1F651: return Unicode_Category_SO;
		case 0x1F652: return Unicode_Category_SO;
		case 0x1F653: return Unicode_Category_SO;
		case 0x1F654: return Unicode_Category_SO;
		case 0x1F655: return Unicode_Category_SO;
		case 0x1F656: return Unicode_Category_SO;
		case 0x1F657: return Unicode_Category_SO;
		case 0x1F658: return Unicode_Category_SO;
		case 0x1F659: return Unicode_Category_SO;
		case 0x1F65A: return Unicode_Category_SO;
		case 0x1F65B: return Unicode_Category_SO;
		case 0x1F65C: return Unicode_Category_SO;
		case 0x1F65D: return Unicode_Category_SO;
		case 0x1F65E: return Unicode_Category_SO;
		case 0x1F65F: return Unicode_Category_SO;
		case 0x1F660: return Unicode_Category_SO;
		case 0x1F661: return Unicode_Category_SO;
		case 0x1F662: return Unicode_Category_SO;
		case 0x1F663: return Unicode_Category_SO;
		case 0x1F664: return Unicode_Category_SO;
		case 0x1F665: return Unicode_Category_SO;
		case 0x1F666: return Unicode_Category_SO;
		case 0x1F667: return Unicode_Category_SO;
		case 0x1F668: return Unicode_Category_SO;
		case 0x1F669: return Unicode_Category_SO;
		case 0x1F66A: return Unicode_Category_SO;
		case 0x1F66B: return Unicode_Category_SO;
		case 0x1F66C: return Unicode_Category_SO;
		case 0x1F66D: return Unicode_Category_SO;
		case 0x1F66E: return Unicode_Category_SO;
		case 0x1F66F: return Unicode_Category_SO;
		case 0x1F670: return Unicode_Category_SO;
		case 0x1F671: return Unicode_Category_SO;
		case 0x1F672: return Unicode_Category_SO;
		case 0x1F673: return Unicode_Category_SO;
		case 0x1F674: return Unicode_Category_SO;
		case 0x1F675: return Unicode_Category_SO;
		case 0x1F676: return Unicode_Category_SO;
		case 0x1F677: return Unicode_Category_SO;
		case 0x1F678: return Unicode_Category_SO;
		case 0x1F679: return Unicode_Category_SO;
		case 0x1F67A: return Unicode_Category_SO;
		case 0x1F67B: return Unicode_Category_SO;
		case 0x1F67C: return Unicode_Category_SO;
		case 0x1F67D: return Unicode_Category_SO;
		case 0x1F67E: return Unicode_Category_SO;
		case 0x1F67F: return Unicode_Category_SO;
		case 0x1F680: return Unicode_Category_SO;
		case 0x1F681: return Unicode_Category_SO;
		case 0x1F682: return Unicode_Category_SO;
		case 0x1F683: return Unicode_Category_SO;
		case 0x1F684: return Unicode_Category_SO;
		case 0x1F685: return Unicode_Category_SO;
		case 0x1F686: return Unicode_Category_SO;
		case 0x1F687: return Unicode_Category_SO;
		case 0x1F688: return Unicode_Category_SO;
		case 0x1F689: return Unicode_Category_SO;
		case 0x1F68A: return Unicode_Category_SO;
		case 0x1F68B: return Unicode_Category_SO;
		case 0x1F68C: return Unicode_Category_SO;
		case 0x1F68D: return Unicode_Category_SO;
		case 0x1F68E: return Unicode_Category_SO;
		case 0x1F68F: return Unicode_Category_SO;
		case 0x1F690: return Unicode_Category_SO;
		case 0x1F691: return Unicode_Category_SO;
		case 0x1F692: return Unicode_Category_SO;
		case 0x1F693: return Unicode_Category_SO;
		case 0x1F694: return Unicode_Category_SO;
		case 0x1F695: return Unicode_Category_SO;
		case 0x1F696: return Unicode_Category_SO;
		case 0x1F697: return Unicode_Category_SO;
		case 0x1F698: return Unicode_Category_SO;
		case 0x1F699: return Unicode_Category_SO;
		case 0x1F69A: return Unicode_Category_SO;
		case 0x1F69B: return Unicode_Category_SO;
		case 0x1F69C: return Unicode_Category_SO;
		case 0x1F69D: return Unicode_Category_SO;
		case 0x1F69E: return Unicode_Category_SO;
		case 0x1F69F: return Unicode_Category_SO;
		case 0x1F6A0: return Unicode_Category_SO;
		case 0x1F6A1: return Unicode_Category_SO;
		case 0x1F6A2: return Unicode_Category_SO;
		case 0x1F6A3: return Unicode_Category_SO;
		case 0x1F6A4: return Unicode_Category_SO;
		case 0x1F6A5: return Unicode_Category_SO;
		case 0x1F6A6: return Unicode_Category_SO;
		case 0x1F6A7: return Unicode_Category_SO;
		case 0x1F6A8: return Unicode_Category_SO;
		case 0x1F6A9: return Unicode_Category_SO;
		case 0x1F6AA: return Unicode_Category_SO;
		case 0x1F6AB: return Unicode_Category_SO;
		case 0x1F6AC: return Unicode_Category_SO;
		case 0x1F6AD: return Unicode_Category_SO;
		case 0x1F6AE: return Unicode_Category_SO;
		case 0x1F6AF: return Unicode_Category_SO;
		case 0x1F6B0: return Unicode_Category_SO;
		case 0x1F6B1: return Unicode_Category_SO;
		case 0x1F6B2: return Unicode_Category_SO;
		case 0x1F6B3: return Unicode_Category_SO;
		case 0x1F6B4: return Unicode_Category_SO;
		case 0x1F6B5: return Unicode_Category_SO;
		case 0x1F6B6: return Unicode_Category_SO;
		case 0x1F6B7: return Unicode_Category_SO;
		case 0x1F6B8: return Unicode_Category_SO;
		case 0x1F6B9: return Unicode_Category_SO;
		case 0x1F6BA: return Unicode_Category_SO;
		case 0x1F6BB: return Unicode_Category_SO;
		case 0x1F6BC: return Unicode_Category_SO;
		case 0x1F6BD: return Unicode_Category_SO;
		case 0x1F6BE: return Unicode_Category_SO;
		case 0x1F6BF: return Unicode_Category_SO;
		case 0x1F6C0: return Unicode_Category_SO;
		case 0x1F6C1: return Unicode_Category_SO;
		case 0x1F6C2: return Unicode_Category_SO;
		case 0x1F6C3: return Unicode_Category_SO;
		case 0x1F6C4: return Unicode_Category_SO;
		case 0x1F6C5: return Unicode_Category_SO;
		case 0x1F6C6: return Unicode_Category_SO;
		case 0x1F6C7: return Unicode_Category_SO;
		case 0x1F6C8: return Unicode_Category_SO;
		case 0x1F6C9: return Unicode_Category_SO;
		case 0x1F6CA: return Unicode_Category_SO;
		case 0x1F6CB: return Unicode_Category_SO;
		case 0x1F6CC: return Unicode_Category_SO;
		case 0x1F6CD: return Unicode_Category_SO;
		case 0x1F6CE: return Unicode_Category_SO;
		case 0x1F6CF: return Unicode_Category_SO;
		case 0x1F6D0: return Unicode_Category_SO;
		case 0x1F6D1: return Unicode_Category_SO;
		case 0x1F6D2: return Unicode_Category_SO;
		case 0x1F6D3: return Unicode_Category_SO;
		case 0x1F6D4: return Unicode_Category_SO;
		case 0x1F6D5: return Unicode_Category_SO;
		case 0x1F6D6: return Unicode_Category_SO;
		case 0x1F6D7: return Unicode_Category_SO;
		case 0x1F6E0: return Unicode_Category_SO;
		case 0x1F6E1: return Unicode_Category_SO;
		case 0x1F6E2: return Unicode_Category_SO;
		case 0x1F6E3: return Unicode_Category_SO;
		case 0x1F6E4: return Unicode_Category_SO;
		case 0x1F6E5: return Unicode_Category_SO;
		case 0x1F6E6: return Unicode_Category_SO;
		case 0x1F6E7: return Unicode_Category_SO;
		case 0x1F6E8: return Unicode_Category_SO;
		case 0x1F6E9: return Unicode_Category_SO;
		case 0x1F6EA: return Unicode_Category_SO;
		case 0x1F6EB: return Unicode_Category_SO;
		case 0x1F6EC: return Unicode_Category_SO;
		case 0x1F6F0: return Unicode_Category_SO;
		case 0x1F6F1: return Unicode_Category_SO;
		case 0x1F6F2: return Unicode_Category_SO;
		case 0x1F6F3: return Unicode_Category_SO;
		case 0x1F6F4: return Unicode_Category_SO;
		case 0x1F6F5: return Unicode_Category_SO;
		case 0x1F6F6: return Unicode_Category_SO;
		case 0x1F6F7: return Unicode_Category_SO;
		case 0x1F6F8: return Unicode_Category_SO;
		case 0x1F6F9: return Unicode_Category_SO;
		case 0x1F6FA: return Unicode_Category_SO;
		case 0x1F6FB: return Unicode_Category_SO;
		case 0x1F6FC: return Unicode_Category_SO;
		case 0x1F700: return Unicode_Category_SO;
		case 0x1F701: return Unicode_Category_SO;
		case 0x1F702: return Unicode_Category_SO;
		case 0x1F703: return Unicode_Category_SO;
		case 0x1F704: return Unicode_Category_SO;
		case 0x1F705: return Unicode_Category_SO;
		case 0x1F706: return Unicode_Category_SO;
		case 0x1F707: return Unicode_Category_SO;
		case 0x1F708: return Unicode_Category_SO;
		case 0x1F709: return Unicode_Category_SO;
		case 0x1F70A: return Unicode_Category_SO;
		case 0x1F70B: return Unicode_Category_SO;
		case 0x1F70C: return Unicode_Category_SO;
		case 0x1F70D: return Unicode_Category_SO;
		case 0x1F70E: return Unicode_Category_SO;
		case 0x1F70F: return Unicode_Category_SO;
		case 0x1F710: return Unicode_Category_SO;
		case 0x1F711: return Unicode_Category_SO;
		case 0x1F712: return Unicode_Category_SO;
		case 0x1F713: return Unicode_Category_SO;
		case 0x1F714: return Unicode_Category_SO;
		case 0x1F715: return Unicode_Category_SO;
		case 0x1F716: return Unicode_Category_SO;
		case 0x1F717: return Unicode_Category_SO;
		case 0x1F718: return Unicode_Category_SO;
		case 0x1F719: return Unicode_Category_SO;
		case 0x1F71A: return Unicode_Category_SO;
		case 0x1F71B: return Unicode_Category_SO;
		case 0x1F71C: return Unicode_Category_SO;
		case 0x1F71D: return Unicode_Category_SO;
		case 0x1F71E: return Unicode_Category_SO;
		case 0x1F71F: return Unicode_Category_SO;
		case 0x1F720: return Unicode_Category_SO;
		case 0x1F721: return Unicode_Category_SO;
		case 0x1F722: return Unicode_Category_SO;
		case 0x1F723: return Unicode_Category_SO;
		case 0x1F724: return Unicode_Category_SO;
		case 0x1F725: return Unicode_Category_SO;
		case 0x1F726: return Unicode_Category_SO;
		case 0x1F727: return Unicode_Category_SO;
		case 0x1F728: return Unicode_Category_SO;
		case 0x1F729: return Unicode_Category_SO;
		case 0x1F72A: return Unicode_Category_SO;
		case 0x1F72B: return Unicode_Category_SO;
		case 0x1F72C: return Unicode_Category_SO;
		case 0x1F72D: return Unicode_Category_SO;
		case 0x1F72E: return Unicode_Category_SO;
		case 0x1F72F: return Unicode_Category_SO;
		case 0x1F730: return Unicode_Category_SO;
		case 0x1F731: return Unicode_Category_SO;
		case 0x1F732: return Unicode_Category_SO;
		case 0x1F733: return Unicode_Category_SO;
		case 0x1F734: return Unicode_Category_SO;
		case 0x1F735: return Unicode_Category_SO;
		case 0x1F736: return Unicode_Category_SO;
		case 0x1F737: return Unicode_Category_SO;
		case 0x1F738: return Unicode_Category_SO;
		case 0x1F739: return Unicode_Category_SO;
		case 0x1F73A: return Unicode_Category_SO;
		case 0x1F73B: return Unicode_Category_SO;
		case 0x1F73C: return Unicode_Category_SO;
		case 0x1F73D: return Unicode_Category_SO;
		case 0x1F73E: return Unicode_Category_SO;
		case 0x1F73F: return Unicode_Category_SO;
		case 0x1F740: return Unicode_Category_SO;
		case 0x1F741: return Unicode_Category_SO;
		case 0x1F742: return Unicode_Category_SO;
		case 0x1F743: return Unicode_Category_SO;
		case 0x1F744: return Unicode_Category_SO;
		case 0x1F745: return Unicode_Category_SO;
		case 0x1F746: return Unicode_Category_SO;
		case 0x1F747: return Unicode_Category_SO;
		case 0x1F748: return Unicode_Category_SO;
		case 0x1F749: return Unicode_Category_SO;
		case 0x1F74A: return Unicode_Category_SO;
		case 0x1F74B: return Unicode_Category_SO;
		case 0x1F74C: return Unicode_Category_SO;
		case 0x1F74D: return Unicode_Category_SO;
		case 0x1F74E: return Unicode_Category_SO;
		case 0x1F74F: return Unicode_Category_SO;
		case 0x1F750: return Unicode_Category_SO;
		case 0x1F751: return Unicode_Category_SO;
		case 0x1F752: return Unicode_Category_SO;
		case 0x1F753: return Unicode_Category_SO;
		case 0x1F754: return Unicode_Category_SO;
		case 0x1F755: return Unicode_Category_SO;
		case 0x1F756: return Unicode_Category_SO;
		case 0x1F757: return Unicode_Category_SO;
		case 0x1F758: return Unicode_Category_SO;
		case 0x1F759: return Unicode_Category_SO;
		case 0x1F75A: return Unicode_Category_SO;
		case 0x1F75B: return Unicode_Category_SO;
		case 0x1F75C: return Unicode_Category_SO;
		case 0x1F75D: return Unicode_Category_SO;
		case 0x1F75E: return Unicode_Category_SO;
		case 0x1F75F: return Unicode_Category_SO;
		case 0x1F760: return Unicode_Category_SO;
		case 0x1F761: return Unicode_Category_SO;
		case 0x1F762: return Unicode_Category_SO;
		case 0x1F763: return Unicode_Category_SO;
		case 0x1F764: return Unicode_Category_SO;
		case 0x1F765: return Unicode_Category_SO;
		case 0x1F766: return Unicode_Category_SO;
		case 0x1F767: return Unicode_Category_SO;
		case 0x1F768: return Unicode_Category_SO;
		case 0x1F769: return Unicode_Category_SO;
		case 0x1F76A: return Unicode_Category_SO;
		case 0x1F76B: return Unicode_Category_SO;
		case 0x1F76C: return Unicode_Category_SO;
		case 0x1F76D: return Unicode_Category_SO;
		case 0x1F76E: return Unicode_Category_SO;
		case 0x1F76F: return Unicode_Category_SO;
		case 0x1F770: return Unicode_Category_SO;
		case 0x1F771: return Unicode_Category_SO;
		case 0x1F772: return Unicode_Category_SO;
		case 0x1F773: return Unicode_Category_SO;
		case 0x1F780: return Unicode_Category_SO;
		case 0x1F781: return Unicode_Category_SO;
		case 0x1F782: return Unicode_Category_SO;
		case 0x1F783: return Unicode_Category_SO;
		case 0x1F784: return Unicode_Category_SO;
		case 0x1F785: return Unicode_Category_SO;
		case 0x1F786: return Unicode_Category_SO;
		case 0x1F787: return Unicode_Category_SO;
		case 0x1F788: return Unicode_Category_SO;
		case 0x1F789: return Unicode_Category_SO;
		case 0x1F78A: return Unicode_Category_SO;
		case 0x1F78B: return Unicode_Category_SO;
		case 0x1F78C: return Unicode_Category_SO;
		case 0x1F78D: return Unicode_Category_SO;
		case 0x1F78E: return Unicode_Category_SO;
		case 0x1F78F: return Unicode_Category_SO;
		case 0x1F790: return Unicode_Category_SO;
		case 0x1F791: return Unicode_Category_SO;
		case 0x1F792: return Unicode_Category_SO;
		case 0x1F793: return Unicode_Category_SO;
		case 0x1F794: return Unicode_Category_SO;
		case 0x1F795: return Unicode_Category_SO;
		case 0x1F796: return Unicode_Category_SO;
		case 0x1F797: return Unicode_Category_SO;
		case 0x1F798: return Unicode_Category_SO;
		case 0x1F799: return Unicode_Category_SO;
		case 0x1F79A: return Unicode_Category_SO;
		case 0x1F79B: return Unicode_Category_SO;
		case 0x1F79C: return Unicode_Category_SO;
		case 0x1F79D: return Unicode_Category_SO;
		case 0x1F79E: return Unicode_Category_SO;
		case 0x1F79F: return Unicode_Category_SO;
		case 0x1F7A0: return Unicode_Category_SO;
		case 0x1F7A1: return Unicode_Category_SO;
		case 0x1F7A2: return Unicode_Category_SO;
		case 0x1F7A3: return Unicode_Category_SO;
		case 0x1F7A4: return Unicode_Category_SO;
		case 0x1F7A5: return Unicode_Category_SO;
		case 0x1F7A6: return Unicode_Category_SO;
		case 0x1F7A7: return Unicode_Category_SO;
		case 0x1F7A8: return Unicode_Category_SO;
		case 0x1F7A9: return Unicode_Category_SO;
		case 0x1F7AA: return Unicode_Category_SO;
		case 0x1F7AB: return Unicode_Category_SO;
		case 0x1F7AC: return Unicode_Category_SO;
		case 0x1F7AD: return Unicode_Category_SO;
		case 0x1F7AE: return Unicode_Category_SO;
		case 0x1F7AF: return Unicode_Category_SO;
		case 0x1F7B0: return Unicode_Category_SO;
		case 0x1F7B1: return Unicode_Category_SO;
		case 0x1F7B2: return Unicode_Category_SO;
		case 0x1F7B3: return Unicode_Category_SO;
		case 0x1F7B4: return Unicode_Category_SO;
		case 0x1F7B5: return Unicode_Category_SO;
		case 0x1F7B6: return Unicode_Category_SO;
		case 0x1F7B7: return Unicode_Category_SO;
		case 0x1F7B8: return Unicode_Category_SO;
		case 0x1F7B9: return Unicode_Category_SO;
		case 0x1F7BA: return Unicode_Category_SO;
		case 0x1F7BB: return Unicode_Category_SO;
		case 0x1F7BC: return Unicode_Category_SO;
		case 0x1F7BD: return Unicode_Category_SO;
		case 0x1F7BE: return Unicode_Category_SO;
		case 0x1F7BF: return Unicode_Category_SO;
		case 0x1F7C0: return Unicode_Category_SO;
		case 0x1F7C1: return Unicode_Category_SO;
		case 0x1F7C2: return Unicode_Category_SO;
		case 0x1F7C3: return Unicode_Category_SO;
		case 0x1F7C4: return Unicode_Category_SO;
		case 0x1F7C5: return Unicode_Category_SO;
		case 0x1F7C6: return Unicode_Category_SO;
		case 0x1F7C7: return Unicode_Category_SO;
		case 0x1F7C8: return Unicode_Category_SO;
		case 0x1F7C9: return Unicode_Category_SO;
		case 0x1F7CA: return Unicode_Category_SO;
		case 0x1F7CB: return Unicode_Category_SO;
		case 0x1F7CC: return Unicode_Category_SO;
		case 0x1F7CD: return Unicode_Category_SO;
		case 0x1F7CE: return Unicode_Category_SO;
		case 0x1F7CF: return Unicode_Category_SO;
		case 0x1F7D0: return Unicode_Category_SO;
		case 0x1F7D1: return Unicode_Category_SO;
		case 0x1F7D2: return Unicode_Category_SO;
		case 0x1F7D3: return Unicode_Category_SO;
		case 0x1F7D4: return Unicode_Category_SO;
		case 0x1F7D5: return Unicode_Category_SO;
		case 0x1F7D6: return Unicode_Category_SO;
		case 0x1F7D7: return Unicode_Category_SO;
		case 0x1F7D8: return Unicode_Category_SO;
		case 0x1F7E0: return Unicode_Category_SO;
		case 0x1F7E1: return Unicode_Category_SO;
		case 0x1F7E2: return Unicode_Category_SO;
		case 0x1F7E3: return Unicode_Category_SO;
		case 0x1F7E4: return Unicode_Category_SO;
		case 0x1F7E5: return Unicode_Category_SO;
		case 0x1F7E6: return Unicode_Category_SO;
		case 0x1F7E7: return Unicode_Category_SO;
		case 0x1F7E8: return Unicode_Category_SO;
		case 0x1F7E9: return Unicode_Category_SO;
		case 0x1F7EA: return Unicode_Category_SO;
		case 0x1F7EB: return Unicode_Category_SO;
		case 0x1F800: return Unicode_Category_SO;
		case 0x1F801: return Unicode_Category_SO;
		case 0x1F802: return Unicode_Category_SO;
		case 0x1F803: return Unicode_Category_SO;
		case 0x1F804: return Unicode_Category_SO;
		case 0x1F805: return Unicode_Category_SO;
		case 0x1F806: return Unicode_Category_SO;
		case 0x1F807: return Unicode_Category_SO;
		case 0x1F808: return Unicode_Category_SO;
		case 0x1F809: return Unicode_Category_SO;
		case 0x1F80A: return Unicode_Category_SO;
		case 0x1F80B: return Unicode_Category_SO;
		case 0x1F810: return Unicode_Category_SO;
		case 0x1F811: return Unicode_Category_SO;
		case 0x1F812: return Unicode_Category_SO;
		case 0x1F813: return Unicode_Category_SO;
		case 0x1F814: return Unicode_Category_SO;
		case 0x1F815: return Unicode_Category_SO;
		case 0x1F816: return Unicode_Category_SO;
		case 0x1F817: return Unicode_Category_SO;
		case 0x1F818: return Unicode_Category_SO;
		case 0x1F819: return Unicode_Category_SO;
		case 0x1F81A: return Unicode_Category_SO;
		case 0x1F81B: return Unicode_Category_SO;
		case 0x1F81C: return Unicode_Category_SO;
		case 0x1F81D: return Unicode_Category_SO;
		case 0x1F81E: return Unicode_Category_SO;
		case 0x1F81F: return Unicode_Category_SO;
		case 0x1F820: return Unicode_Category_SO;
		case 0x1F821: return Unicode_Category_SO;
		case 0x1F822: return Unicode_Category_SO;
		case 0x1F823: return Unicode_Category_SO;
		case 0x1F824: return Unicode_Category_SO;
		case 0x1F825: return Unicode_Category_SO;
		case 0x1F826: return Unicode_Category_SO;
		case 0x1F827: return Unicode_Category_SO;
		case 0x1F828: return Unicode_Category_SO;
		case 0x1F829: return Unicode_Category_SO;
		case 0x1F82A: return Unicode_Category_SO;
		case 0x1F82B: return Unicode_Category_SO;
		case 0x1F82C: return Unicode_Category_SO;
		case 0x1F82D: return Unicode_Category_SO;
		case 0x1F82E: return Unicode_Category_SO;
		case 0x1F82F: return Unicode_Category_SO;
		case 0x1F830: return Unicode_Category_SO;
		case 0x1F831: return Unicode_Category_SO;
		case 0x1F832: return Unicode_Category_SO;
		case 0x1F833: return Unicode_Category_SO;
		case 0x1F834: return Unicode_Category_SO;
		case 0x1F835: return Unicode_Category_SO;
		case 0x1F836: return Unicode_Category_SO;
		case 0x1F837: return Unicode_Category_SO;
		case 0x1F838: return Unicode_Category_SO;
		case 0x1F839: return Unicode_Category_SO;
		case 0x1F83A: return Unicode_Category_SO;
		case 0x1F83B: return Unicode_Category_SO;
		case 0x1F83C: return Unicode_Category_SO;
		case 0x1F83D: return Unicode_Category_SO;
		case 0x1F83E: return Unicode_Category_SO;
		case 0x1F83F: return Unicode_Category_SO;
		case 0x1F840: return Unicode_Category_SO;
		case 0x1F841: return Unicode_Category_SO;
		case 0x1F842: return Unicode_Category_SO;
		case 0x1F843: return Unicode_Category_SO;
		case 0x1F844: return Unicode_Category_SO;
		case 0x1F845: return Unicode_Category_SO;
		case 0x1F846: return Unicode_Category_SO;
		case 0x1F847: return Unicode_Category_SO;
		case 0x1F850: return Unicode_Category_SO;
		case 0x1F851: return Unicode_Category_SO;
		case 0x1F852: return Unicode_Category_SO;
		case 0x1F853: return Unicode_Category_SO;
		case 0x1F854: return Unicode_Category_SO;
		case 0x1F855: return Unicode_Category_SO;
		case 0x1F856: return Unicode_Category_SO;
		case 0x1F857: return Unicode_Category_SO;
		case 0x1F858: return Unicode_Category_SO;
		case 0x1F859: return Unicode_Category_SO;
		case 0x1F860: return Unicode_Category_SO;
		case 0x1F861: return Unicode_Category_SO;
		case 0x1F862: return Unicode_Category_SO;
		case 0x1F863: return Unicode_Category_SO;
		case 0x1F864: return Unicode_Category_SO;
		case 0x1F865: return Unicode_Category_SO;
		case 0x1F866: return Unicode_Category_SO;
		case 0x1F867: return Unicode_Category_SO;
		case 0x1F868: return Unicode_Category_SO;
		case 0x1F869: return Unicode_Category_SO;
		case 0x1F86A: return Unicode_Category_SO;
		case 0x1F86B: return Unicode_Category_SO;
		case 0x1F86C: return Unicode_Category_SO;
		case 0x1F86D: return Unicode_Category_SO;
		case 0x1F86E: return Unicode_Category_SO;
		case 0x1F86F: return Unicode_Category_SO;
		case 0x1F870: return Unicode_Category_SO;
		case 0x1F871: return Unicode_Category_SO;
		case 0x1F872: return Unicode_Category_SO;
		case 0x1F873: return Unicode_Category_SO;
		case 0x1F874: return Unicode_Category_SO;
		case 0x1F875: return Unicode_Category_SO;
		case 0x1F876: return Unicode_Category_SO;
		case 0x1F877: return Unicode_Category_SO;
		case 0x1F878: return Unicode_Category_SO;
		case 0x1F879: return Unicode_Category_SO;
		case 0x1F87A: return Unicode_Category_SO;
		case 0x1F87B: return Unicode_Category_SO;
		case 0x1F87C: return Unicode_Category_SO;
		case 0x1F87D: return Unicode_Category_SO;
		case 0x1F87E: return Unicode_Category_SO;
		case 0x1F87F: return Unicode_Category_SO;
		case 0x1F880: return Unicode_Category_SO;
		case 0x1F881: return Unicode_Category_SO;
		case 0x1F882: return Unicode_Category_SO;
		case 0x1F883: return Unicode_Category_SO;
		case 0x1F884: return Unicode_Category_SO;
		case 0x1F885: return Unicode_Category_SO;
		case 0x1F886: return Unicode_Category_SO;
		case 0x1F887: return Unicode_Category_SO;
		case 0x1F890: return Unicode_Category_SO;
		case 0x1F891: return Unicode_Category_SO;
		case 0x1F892: return Unicode_Category_SO;
		case 0x1F893: return Unicode_Category_SO;
		case 0x1F894: return Unicode_Category_SO;
		case 0x1F895: return Unicode_Category_SO;
		case 0x1F896: return Unicode_Category_SO;
		case 0x1F897: return Unicode_Category_SO;
		case 0x1F898: return Unicode_Category_SO;
		case 0x1F899: return Unicode_Category_SO;
		case 0x1F89A: return Unicode_Category_SO;
		case 0x1F89B: return Unicode_Category_SO;
		case 0x1F89C: return Unicode_Category_SO;
		case 0x1F89D: return Unicode_Category_SO;
		case 0x1F89E: return Unicode_Category_SO;
		case 0x1F89F: return Unicode_Category_SO;
		case 0x1F8A0: return Unicode_Category_SO;
		case 0x1F8A1: return Unicode_Category_SO;
		case 0x1F8A2: return Unicode_Category_SO;
		case 0x1F8A3: return Unicode_Category_SO;
		case 0x1F8A4: return Unicode_Category_SO;
		case 0x1F8A5: return Unicode_Category_SO;
		case 0x1F8A6: return Unicode_Category_SO;
		case 0x1F8A7: return Unicode_Category_SO;
		case 0x1F8A8: return Unicode_Category_SO;
		case 0x1F8A9: return Unicode_Category_SO;
		case 0x1F8AA: return Unicode_Category_SO;
		case 0x1F8AB: return Unicode_Category_SO;
		case 0x1F8AC: return Unicode_Category_SO;
		case 0x1F8AD: return Unicode_Category_SO;
		case 0x1F8B0: return Unicode_Category_SO;
		case 0x1F8B1: return Unicode_Category_SO;
		case 0x1F900: return Unicode_Category_SO;
		case 0x1F901: return Unicode_Category_SO;
		case 0x1F902: return Unicode_Category_SO;
		case 0x1F903: return Unicode_Category_SO;
		case 0x1F904: return Unicode_Category_SO;
		case 0x1F905: return Unicode_Category_SO;
		case 0x1F906: return Unicode_Category_SO;
		case 0x1F907: return Unicode_Category_SO;
		case 0x1F908: return Unicode_Category_SO;
		case 0x1F909: return Unicode_Category_SO;
		case 0x1F90A: return Unicode_Category_SO;
		case 0x1F90B: return Unicode_Category_SO;
		case 0x1F90C: return Unicode_Category_SO;
		case 0x1F90D: return Unicode_Category_SO;
		case 0x1F90E: return Unicode_Category_SO;
		case 0x1F90F: return Unicode_Category_SO;
		case 0x1F910: return Unicode_Category_SO;
		case 0x1F911: return Unicode_Category_SO;
		case 0x1F912: return Unicode_Category_SO;
		case 0x1F913: return Unicode_Category_SO;
		case 0x1F914: return Unicode_Category_SO;
		case 0x1F915: return Unicode_Category_SO;
		case 0x1F916: return Unicode_Category_SO;
		case 0x1F917: return Unicode_Category_SO;
		case 0x1F918: return Unicode_Category_SO;
		case 0x1F919: return Unicode_Category_SO;
		case 0x1F91A: return Unicode_Category_SO;
		case 0x1F91B: return Unicode_Category_SO;
		case 0x1F91C: return Unicode_Category_SO;
		case 0x1F91D: return Unicode_Category_SO;
		case 0x1F91E: return Unicode_Category_SO;
		case 0x1F91F: return Unicode_Category_SO;
		case 0x1F920: return Unicode_Category_SO;
		case 0x1F921: return Unicode_Category_SO;
		case 0x1F922: return Unicode_Category_SO;
		case 0x1F923: return Unicode_Category_SO;
		case 0x1F924: return Unicode_Category_SO;
		case 0x1F925: return Unicode_Category_SO;
		case 0x1F926: return Unicode_Category_SO;
		case 0x1F927: return Unicode_Category_SO;
		case 0x1F928: return Unicode_Category_SO;
		case 0x1F929: return Unicode_Category_SO;
		case 0x1F92A: return Unicode_Category_SO;
		case 0x1F92B: return Unicode_Category_SO;
		case 0x1F92C: return Unicode_Category_SO;
		case 0x1F92D: return Unicode_Category_SO;
		case 0x1F92E: return Unicode_Category_SO;
		case 0x1F92F: return Unicode_Category_SO;
		case 0x1F930: return Unicode_Category_SO;
		case 0x1F931: return Unicode_Category_SO;
		case 0x1F932: return Unicode_Category_SO;
		case 0x1F933: return Unicode_Category_SO;
		case 0x1F934: return Unicode_Category_SO;
		case 0x1F935: return Unicode_Category_SO;
		case 0x1F936: return Unicode_Category_SO;
		case 0x1F937: return Unicode_Category_SO;
		case 0x1F938: return Unicode_Category_SO;
		case 0x1F939: return Unicode_Category_SO;
		case 0x1F93A: return Unicode_Category_SO;
		case 0x1F93B: return Unicode_Category_SO;
		case 0x1F93C: return Unicode_Category_SO;
		case 0x1F93D: return Unicode_Category_SO;
		case 0x1F93E: return Unicode_Category_SO;
		case 0x1F93F: return Unicode_Category_SO;
		case 0x1F940: return Unicode_Category_SO;
		case 0x1F941: return Unicode_Category_SO;
		case 0x1F942: return Unicode_Category_SO;
		case 0x1F943: return Unicode_Category_SO;
		case 0x1F944: return Unicode_Category_SO;
		case 0x1F945: return Unicode_Category_SO;
		case 0x1F946: return Unicode_Category_SO;
		case 0x1F947: return Unicode_Category_SO;
		case 0x1F948: return Unicode_Category_SO;
		case 0x1F949: return Unicode_Category_SO;
		case 0x1F94A: return Unicode_Category_SO;
		case 0x1F94B: return Unicode_Category_SO;
		case 0x1F94C: return Unicode_Category_SO;
		case 0x1F94D: return Unicode_Category_SO;
		case 0x1F94E: return Unicode_Category_SO;
		case 0x1F94F: return Unicode_Category_SO;
		case 0x1F950: return Unicode_Category_SO;
		case 0x1F951: return Unicode_Category_SO;
		case 0x1F952: return Unicode_Category_SO;
		case 0x1F953: return Unicode_Category_SO;
		case 0x1F954: return Unicode_Category_SO;
		case 0x1F955: return Unicode_Category_SO;
		case 0x1F956: return Unicode_Category_SO;
		case 0x1F957: return Unicode_Category_SO;
		case 0x1F958: return Unicode_Category_SO;
		case 0x1F959: return Unicode_Category_SO;
		case 0x1F95A: return Unicode_Category_SO;
		case 0x1F95B: return Unicode_Category_SO;
		case 0x1F95C: return Unicode_Category_SO;
		case 0x1F95D: return Unicode_Category_SO;
		case 0x1F95E: return Unicode_Category_SO;
		case 0x1F95F: return Unicode_Category_SO;
		case 0x1F960: return Unicode_Category_SO;
		case 0x1F961: return Unicode_Category_SO;
		case 0x1F962: return Unicode_Category_SO;
		case 0x1F963: return Unicode_Category_SO;
		case 0x1F964: return Unicode_Category_SO;
		case 0x1F965: return Unicode_Category_SO;
		case 0x1F966: return Unicode_Category_SO;
		case 0x1F967: return Unicode_Category_SO;
		case 0x1F968: return Unicode_Category_SO;
		case 0x1F969: return Unicode_Category_SO;
		case 0x1F96A: return Unicode_Category_SO;
		case 0x1F96B: return Unicode_Category_SO;
		case 0x1F96C: return Unicode_Category_SO;
		case 0x1F96D: return Unicode_Category_SO;
		case 0x1F96E: return Unicode_Category_SO;
		case 0x1F96F: return Unicode_Category_SO;
		case 0x1F970: return Unicode_Category_SO;
		case 0x1F971: return Unicode_Category_SO;
		case 0x1F972: return Unicode_Category_SO;
		case 0x1F973: return Unicode_Category_SO;
		case 0x1F974: return Unicode_Category_SO;
		case 0x1F975: return Unicode_Category_SO;
		case 0x1F976: return Unicode_Category_SO;
		case 0x1F977: return Unicode_Category_SO;
		case 0x1F978: return Unicode_Category_SO;
		case 0x1F97A: return Unicode_Category_SO;
		case 0x1F97B: return Unicode_Category_SO;
		case 0x1F97C: return Unicode_Category_SO;
		case 0x1F97D: return Unicode_Category_SO;
		case 0x1F97E: return Unicode_Category_SO;
		case 0x1F97F: return Unicode_Category_SO;
		case 0x1F980: return Unicode_Category_SO;
		case 0x1F981: return Unicode_Category_SO;
		case 0x1F982: return Unicode_Category_SO;
		case 0x1F983: return Unicode_Category_SO;
		case 0x1F984: return Unicode_Category_SO;
		case 0x1F985: return Unicode_Category_SO;
		case 0x1F986: return Unicode_Category_SO;
		case 0x1F987: return Unicode_Category_SO;
		case 0x1F988: return Unicode_Category_SO;
		case 0x1F989: return Unicode_Category_SO;
		case 0x1F98A: return Unicode_Category_SO;
		case 0x1F98B: return Unicode_Category_SO;
		case 0x1F98C: return Unicode_Category_SO;
		case 0x1F98D: return Unicode_Category_SO;
		case 0x1F98E: return Unicode_Category_SO;
		case 0x1F98F: return Unicode_Category_SO;
		case 0x1F990: return Unicode_Category_SO;
		case 0x1F991: return Unicode_Category_SO;
		case 0x1F992: return Unicode_Category_SO;
		case 0x1F993: return Unicode_Category_SO;
		case 0x1F994: return Unicode_Category_SO;
		case 0x1F995: return Unicode_Category_SO;
		case 0x1F996: return Unicode_Category_SO;
		case 0x1F997: return Unicode_Category_SO;
		case 0x1F998: return Unicode_Category_SO;
		case 0x1F999: return Unicode_Category_SO;
		case 0x1F99A: return Unicode_Category_SO;
		case 0x1F99B: return Unicode_Category_SO;
		case 0x1F99C: return Unicode_Category_SO;
		case 0x1F99D: return Unicode_Category_SO;
		case 0x1F99E: return Unicode_Category_SO;
		case 0x1F99F: return Unicode_Category_SO;
		case 0x1F9A0: return Unicode_Category_SO;
		case 0x1F9A1: return Unicode_Category_SO;
		case 0x1F9A2: return Unicode_Category_SO;
		case 0x1F9A3: return Unicode_Category_SO;
		case 0x1F9A4: return Unicode_Category_SO;
		case 0x1F9A5: return Unicode_Category_SO;
		case 0x1F9A6: return Unicode_Category_SO;
		case 0x1F9A7: return Unicode_Category_SO;
		case 0x1F9A8: return Unicode_Category_SO;
		case 0x1F9A9: return Unicode_Category_SO;
		case 0x1F9AA: return Unicode_Category_SO;
		case 0x1F9AB: return Unicode_Category_SO;
		case 0x1F9AC: return Unicode_Category_SO;
		case 0x1F9AD: return Unicode_Category_SO;
		case 0x1F9AE: return Unicode_Category_SO;
		case 0x1F9AF: return Unicode_Category_SO;
		case 0x1F9B0: return Unicode_Category_SO;
		case 0x1F9B1: return Unicode_Category_SO;
		case 0x1F9B2: return Unicode_Category_SO;
		case 0x1F9B3: return Unicode_Category_SO;
		case 0x1F9B4: return Unicode_Category_SO;
		case 0x1F9B5: return Unicode_Category_SO;
		case 0x1F9B6: return Unicode_Category_SO;
		case 0x1F9B7: return Unicode_Category_SO;
		case 0x1F9B8: return Unicode_Category_SO;
		case 0x1F9B9: return Unicode_Category_SO;
		case 0x1F9BA: return Unicode_Category_SO;
		case 0x1F9BB: return Unicode_Category_SO;
		case 0x1F9BC: return Unicode_Category_SO;
		case 0x1F9BD: return Unicode_Category_SO;
		case 0x1F9BE: return Unicode_Category_SO;
		case 0x1F9BF: return Unicode_Category_SO;
		case 0x1F9C0: return Unicode_Category_SO;
		case 0x1F9C1: return Unicode_Category_SO;
		case 0x1F9C2: return Unicode_Category_SO;
		case 0x1F9C3: return Unicode_Category_SO;
		case 0x1F9C4: return Unicode_Category_SO;
		case 0x1F9C5: return Unicode_Category_SO;
		case 0x1F9C6: return Unicode_Category_SO;
		case 0x1F9C7: return Unicode_Category_SO;
		case 0x1F9C8: return Unicode_Category_SO;
		case 0x1F9C9: return Unicode_Category_SO;
		case 0x1F9CA: return Unicode_Category_SO;
		case 0x1F9CB: return Unicode_Category_SO;
		case 0x1F9CD: return Unicode_Category_SO;
		case 0x1F9CE: return Unicode_Category_SO;
		case 0x1F9CF: return Unicode_Category_SO;
		case 0x1F9D0: return Unicode_Category_SO;
		case 0x1F9D1: return Unicode_Category_SO;
		case 0x1F9D2: return Unicode_Category_SO;
		case 0x1F9D3: return Unicode_Category_SO;
		case 0x1F9D4: return Unicode_Category_SO;
		case 0x1F9D5: return Unicode_Category_SO;
		case 0x1F9D6: return Unicode_Category_SO;
		case 0x1F9D7: return Unicode_Category_SO;
		case 0x1F9D8: return Unicode_Category_SO;
		case 0x1F9D9: return Unicode_Category_SO;
		case 0x1F9DA: return Unicode_Category_SO;
		case 0x1F9DB: return Unicode_Category_SO;
		case 0x1F9DC: return Unicode_Category_SO;
		case 0x1F9DD: return Unicode_Category_SO;
		case 0x1F9DE: return Unicode_Category_SO;
		case 0x1F9DF: return Unicode_Category_SO;
		case 0x1F9E0: return Unicode_Category_SO;
		case 0x1F9E1: return Unicode_Category_SO;
		case 0x1F9E2: return Unicode_Category_SO;
		case 0x1F9E3: return Unicode_Category_SO;
		case 0x1F9E4: return Unicode_Category_SO;
		case 0x1F9E5: return Unicode_Category_SO;
		case 0x1F9E6: return Unicode_Category_SO;
		case 0x1F9E7: return Unicode_Category_SO;
		case 0x1F9E8: return Unicode_Category_SO;
		case 0x1F9E9: return Unicode_Category_SO;
		case 0x1F9EA: return Unicode_Category_SO;
		case 0x1F9EB: return Unicode_Category_SO;
		case 0x1F9EC: return Unicode_Category_SO;
		case 0x1F9ED: return Unicode_Category_SO;
		case 0x1F9EE: return Unicode_Category_SO;
		case 0x1F9EF: return Unicode_Category_SO;
		case 0x1F9F0: return Unicode_Category_SO;
		case 0x1F9F1: return Unicode_Category_SO;
		case 0x1F9F2: return Unicode_Category_SO;
		case 0x1F9F3: return Unicode_Category_SO;
		case 0x1F9F4: return Unicode_Category_SO;
		case 0x1F9F5: return Unicode_Category_SO;
		case 0x1F9F6: return Unicode_Category_SO;
		case 0x1F9F7: return Unicode_Category_SO;
		case 0x1F9F8: return Unicode_Category_SO;
		case 0x1F9F9: return Unicode_Category_SO;
		case 0x1F9FA: return Unicode_Category_SO;
		case 0x1F9FB: return Unicode_Category_SO;
		case 0x1F9FC: return Unicode_Category_SO;
		case 0x1F9FD: return Unicode_Category_SO;
		case 0x1F9FE: return Unicode_Category_SO;
		case 0x1F9FF: return Unicode_Category_SO;
		case 0x1FA00: return Unicode_Category_SO;
		case 0x1FA01: return Unicode_Category_SO;
		case 0x1FA02: return Unicode_Category_SO;
		case 0x1FA03: return Unicode_Category_SO;
		case 0x1FA04: return Unicode_Category_SO;
		case 0x1FA05: return Unicode_Category_SO;
		case 0x1FA06: return Unicode_Category_SO;
		case 0x1FA07: return Unicode_Category_SO;
		case 0x1FA08: return Unicode_Category_SO;
		case 0x1FA09: return Unicode_Category_SO;
		case 0x1FA0A: return Unicode_Category_SO;
		case 0x1FA0B: return Unicode_Category_SO;
		case 0x1FA0C: return Unicode_Category_SO;
		case 0x1FA0D: return Unicode_Category_SO;
		case 0x1FA0E: return Unicode_Category_SO;
		case 0x1FA0F: return Unicode_Category_SO;
		case 0x1FA10: return Unicode_Category_SO;
		case 0x1FA11: return Unicode_Category_SO;
		case 0x1FA12: return Unicode_Category_SO;
		case 0x1FA13: return Unicode_Category_SO;
		case 0x1FA14: return Unicode_Category_SO;
		case 0x1FA15: return Unicode_Category_SO;
		case 0x1FA16: return Unicode_Category_SO;
		case 0x1FA17: return Unicode_Category_SO;
		case 0x1FA18: return Unicode_Category_SO;
		case 0x1FA19: return Unicode_Category_SO;
		case 0x1FA1A: return Unicode_Category_SO;
		case 0x1FA1B: return Unicode_Category_SO;
		case 0x1FA1C: return Unicode_Category_SO;
		case 0x1FA1D: return Unicode_Category_SO;
		case 0x1FA1E: return Unicode_Category_SO;
		case 0x1FA1F: return Unicode_Category_SO;
		case 0x1FA20: return Unicode_Category_SO;
		case 0x1FA21: return Unicode_Category_SO;
		case 0x1FA22: return Unicode_Category_SO;
		case 0x1FA23: return Unicode_Category_SO;
		case 0x1FA24: return Unicode_Category_SO;
		case 0x1FA25: return Unicode_Category_SO;
		case 0x1FA26: return Unicode_Category_SO;
		case 0x1FA27: return Unicode_Category_SO;
		case 0x1FA28: return Unicode_Category_SO;
		case 0x1FA29: return Unicode_Category_SO;
		case 0x1FA2A: return Unicode_Category_SO;
		case 0x1FA2B: return Unicode_Category_SO;
		case 0x1FA2C: return Unicode_Category_SO;
		case 0x1FA2D: return Unicode_Category_SO;
		case 0x1FA2E: return Unicode_Category_SO;
		case 0x1FA2F: return Unicode_Category_SO;
		case 0x1FA30: return Unicode_Category_SO;
		case 0x1FA31: return Unicode_Category_SO;
		case 0x1FA32: return Unicode_Category_SO;
		case 0x1FA33: return Unicode_Category_SO;
		case 0x1FA34: return Unicode_Category_SO;
		case 0x1FA35: return Unicode_Category_SO;
		case 0x1FA36: return Unicode_Category_SO;
		case 0x1FA37: return Unicode_Category_SO;
		case 0x1FA38: return Unicode_Category_SO;
		case 0x1FA39: return Unicode_Category_SO;
		case 0x1FA3A: return Unicode_Category_SO;
		case 0x1FA3B: return Unicode_Category_SO;
		case 0x1FA3C: return Unicode_Category_SO;
		case 0x1FA3D: return Unicode_Category_SO;
		case 0x1FA3E: return Unicode_Category_SO;
		case 0x1FA3F: return Unicode_Category_SO;
		case 0x1FA40: return Unicode_Category_SO;
		case 0x1FA41: return Unicode_Category_SO;
		case 0x1FA42: return Unicode_Category_SO;
		case 0x1FA43: return Unicode_Category_SO;
		case 0x1FA44: return Unicode_Category_SO;
		case 0x1FA45: return Unicode_Category_SO;
		case 0x1FA46: return Unicode_Category_SO;
		case 0x1FA47: return Unicode_Category_SO;
		case 0x1FA48: return Unicode_Category_SO;
		case 0x1FA49: return Unicode_Category_SO;
		case 0x1FA4A: return Unicode_Category_SO;
		case 0x1FA4B: return Unicode_Category_SO;
		case 0x1FA4C: return Unicode_Category_SO;
		case 0x1FA4D: return Unicode_Category_SO;
		case 0x1FA4E: return Unicode_Category_SO;
		case 0x1FA4F: return Unicode_Category_SO;
		case 0x1FA50: return Unicode_Category_SO;
		case 0x1FA51: return Unicode_Category_SO;
		case 0x1FA52: return Unicode_Category_SO;
		case 0x1FA53: return Unicode_Category_SO;
		case 0x1FA60: return Unicode_Category_SO;
		case 0x1FA61: return Unicode_Category_SO;
		case 0x1FA62: return Unicode_Category_SO;
		case 0x1FA63: return Unicode_Category_SO;
		case 0x1FA64: return Unicode_Category_SO;
		case 0x1FA65: return Unicode_Category_SO;
		case 0x1FA66: return Unicode_Category_SO;
		case 0x1FA67: return Unicode_Category_SO;
		case 0x1FA68: return Unicode_Category_SO;
		case 0x1FA69: return Unicode_Category_SO;
		case 0x1FA6A: return Unicode_Category_SO;
		case 0x1FA6B: return Unicode_Category_SO;
		case 0x1FA6C: return Unicode_Category_SO;
		case 0x1FA6D: return Unicode_Category_SO;
		case 0x1FA70: return Unicode_Category_SO;
		case 0x1FA71: return Unicode_Category_SO;
		case 0x1FA72: return Unicode_Category_SO;
		case 0x1FA73: return Unicode_Category_SO;
		case 0x1FA74: return Unicode_Category_SO;
		case 0x1FA78: return Unicode_Category_SO;
		case 0x1FA79: return Unicode_Category_SO;
		case 0x1FA7A: return Unicode_Category_SO;
		case 0x1FA80: return Unicode_Category_SO;
		case 0x1FA81: return Unicode_Category_SO;
		case 0x1FA82: return Unicode_Category_SO;
		case 0x1FA83: return Unicode_Category_SO;
		case 0x1FA84: return Unicode_Category_SO;
		case 0x1FA85: return Unicode_Category_SO;
		case 0x1FA86: return Unicode_Category_SO;
		case 0x1FA90: return Unicode_Category_SO;
		case 0x1FA91: return Unicode_Category_SO;
		case 0x1FA92: return Unicode_Category_SO;
		case 0x1FA93: return Unicode_Category_SO;
		case 0x1FA94: return Unicode_Category_SO;
		case 0x1FA95: return Unicode_Category_SO;
		case 0x1FA96: return Unicode_Category_SO;
		case 0x1FA97: return Unicode_Category_SO;
		case 0x1FA98: return Unicode_Category_SO;
		case 0x1FA99: return Unicode_Category_SO;
		case 0x1FA9A: return Unicode_Category_SO;
		case 0x1FA9B: return Unicode_Category_SO;
		case 0x1FA9C: return Unicode_Category_SO;
		case 0x1FA9D: return Unicode_Category_SO;
		case 0x1FA9E: return Unicode_Category_SO;
		case 0x1FA9F: return Unicode_Category_SO;
		case 0x1FAA0: return Unicode_Category_SO;
		case 0x1FAA1: return Unicode_Category_SO;
		case 0x1FAA2: return Unicode_Category_SO;
		case 0x1FAA3: return Unicode_Category_SO;
		case 0x1FAA4: return Unicode_Category_SO;
		case 0x1FAA5: return Unicode_Category_SO;
		case 0x1FAA6: return Unicode_Category_SO;
		case 0x1FAA7: return Unicode_Category_SO;
		case 0x1FAA8: return Unicode_Category_SO;
		case 0x1FAB0: return Unicode_Category_SO;
		case 0x1FAB1: return Unicode_Category_SO;
		case 0x1FAB2: return Unicode_Category_SO;
		case 0x1FAB3: return Unicode_Category_SO;
		case 0x1FAB4: return Unicode_Category_SO;
		case 0x1FAB5: return Unicode_Category_SO;
		case 0x1FAB6: return Unicode_Category_SO;
		case 0x1FAC0: return Unicode_Category_SO;
		case 0x1FAC1: return Unicode_Category_SO;
		case 0x1FAC2: return Unicode_Category_SO;
		case 0x1FAD0: return Unicode_Category_SO;
		case 0x1FAD1: return Unicode_Category_SO;
		case 0x1FAD2: return Unicode_Category_SO;
		case 0x1FAD3: return Unicode_Category_SO;
		case 0x1FAD4: return Unicode_Category_SO;
		case 0x1FAD5: return Unicode_Category_SO;
		case 0x1FAD6: return Unicode_Category_SO;
		case 0x1FB00: return Unicode_Category_SO;
		case 0x1FB01: return Unicode_Category_SO;
		case 0x1FB02: return Unicode_Category_SO;
		case 0x1FB03: return Unicode_Category_SO;
		case 0x1FB04: return Unicode_Category_SO;
		case 0x1FB05: return Unicode_Category_SO;
		case 0x1FB06: return Unicode_Category_SO;
		case 0x1FB07: return Unicode_Category_SO;
		case 0x1FB08: return Unicode_Category_SO;
		case 0x1FB09: return Unicode_Category_SO;
		case 0x1FB0A: return Unicode_Category_SO;
		case 0x1FB0B: return Unicode_Category_SO;
		case 0x1FB0C: return Unicode_Category_SO;
		case 0x1FB0D: return Unicode_Category_SO;
		case 0x1FB0E: return Unicode_Category_SO;
		case 0x1FB0F: return Unicode_Category_SO;
		case 0x1FB10: return Unicode_Category_SO;
		case 0x1FB11: return Unicode_Category_SO;
		case 0x1FB12: return Unicode_Category_SO;
		case 0x1FB13: return Unicode_Category_SO;
		case 0x1FB14: return Unicode_Category_SO;
		case 0x1FB15: return Unicode_Category_SO;
		case 0x1FB16: return Unicode_Category_SO;
		case 0x1FB17: return Unicode_Category_SO;
		case 0x1FB18: return Unicode_Category_SO;
		case 0x1FB19: return Unicode_Category_SO;
		case 0x1FB1A: return Unicode_Category_SO;
		case 0x1FB1B: return Unicode_Category_SO;
		case 0x1FB1C: return Unicode_Category_SO;
		case 0x1FB1D: return Unicode_Category_SO;
		case 0x1FB1E: return Unicode_Category_SO;
		case 0x1FB1F: return Unicode_Category_SO;
		case 0x1FB20: return Unicode_Category_SO;
		case 0x1FB21: return Unicode_Category_SO;
		case 0x1FB22: return Unicode_Category_SO;
		case 0x1FB23: return Unicode_Category_SO;
		case 0x1FB24: return Unicode_Category_SO;
		case 0x1FB25: return Unicode_Category_SO;
		case 0x1FB26: return Unicode_Category_SO;
		case 0x1FB27: return Unicode_Category_SO;
		case 0x1FB28: return Unicode_Category_SO;
		case 0x1FB29: return Unicode_Category_SO;
		case 0x1FB2A: return Unicode_Category_SO;
		case 0x1FB2B: return Unicode_Category_SO;
		case 0x1FB2C: return Unicode_Category_SO;
		case 0x1FB2D: return Unicode_Category_SO;
		case 0x1FB2E: return Unicode_Category_SO;
		case 0x1FB2F: return Unicode_Category_SO;
		case 0x1FB30: return Unicode_Category_SO;
		case 0x1FB31: return Unicode_Category_SO;
		case 0x1FB32: return Unicode_Category_SO;
		case 0x1FB33: return Unicode_Category_SO;
		case 0x1FB34: return Unicode_Category_SO;
		case 0x1FB35: return Unicode_Category_SO;
		case 0x1FB36: return Unicode_Category_SO;
		case 0x1FB37: return Unicode_Category_SO;
		case 0x1FB38: return Unicode_Category_SO;
		case 0x1FB39: return Unicode_Category_SO;
		case 0x1FB3A: return Unicode_Category_SO;
		case 0x1FB3B: return Unicode_Category_SO;
		case 0x1FB3C: return Unicode_Category_SO;
		case 0x1FB3D: return Unicode_Category_SO;
		case 0x1FB3E: return Unicode_Category_SO;
		case 0x1FB3F: return Unicode_Category_SO;
		case 0x1FB40: return Unicode_Category_SO;
		case 0x1FB41: return Unicode_Category_SO;
		case 0x1FB42: return Unicode_Category_SO;
		case 0x1FB43: return Unicode_Category_SO;
		case 0x1FB44: return Unicode_Category_SO;
		case 0x1FB45: return Unicode_Category_SO;
		case 0x1FB46: return Unicode_Category_SO;
		case 0x1FB47: return Unicode_Category_SO;
		case 0x1FB48: return Unicode_Category_SO;
		case 0x1FB49: return Unicode_Category_SO;
		case 0x1FB4A: return Unicode_Category_SO;
		case 0x1FB4B: return Unicode_Category_SO;
		case 0x1FB4C: return Unicode_Category_SO;
		case 0x1FB4D: return Unicode_Category_SO;
		case 0x1FB4E: return Unicode_Category_SO;
		case 0x1FB4F: return Unicode_Category_SO;
		case 0x1FB50: return Unicode_Category_SO;
		case 0x1FB51: return Unicode_Category_SO;
		case 0x1FB52: return Unicode_Category_SO;
		case 0x1FB53: return Unicode_Category_SO;
		case 0x1FB54: return Unicode_Category_SO;
		case 0x1FB55: return Unicode_Category_SO;
		case 0x1FB56: return Unicode_Category_SO;
		case 0x1FB57: return Unicode_Category_SO;
		case 0x1FB58: return Unicode_Category_SO;
		case 0x1FB59: return Unicode_Category_SO;
		case 0x1FB5A: return Unicode_Category_SO;
		case 0x1FB5B: return Unicode_Category_SO;
		case 0x1FB5C: return Unicode_Category_SO;
		case 0x1FB5D: return Unicode_Category_SO;
		case 0x1FB5E: return Unicode_Category_SO;
		case 0x1FB5F: return Unicode_Category_SO;
		case 0x1FB60: return Unicode_Category_SO;
		case 0x1FB61: return Unicode_Category_SO;
		case 0x1FB62: return Unicode_Category_SO;
		case 0x1FB63: return Unicode_Category_SO;
		case 0x1FB64: return Unicode_Category_SO;
		case 0x1FB65: return Unicode_Category_SO;
		case 0x1FB66: return Unicode_Category_SO;
		case 0x1FB67: return Unicode_Category_SO;
		case 0x1FB68: return Unicode_Category_SO;
		case 0x1FB69: return Unicode_Category_SO;
		case 0x1FB6A: return Unicode_Category_SO;
		case 0x1FB6B: return Unicode_Category_SO;
		case 0x1FB6C: return Unicode_Category_SO;
		case 0x1FB6D: return Unicode_Category_SO;
		case 0x1FB6E: return Unicode_Category_SO;
		case 0x1FB6F: return Unicode_Category_SO;
		case 0x1FB70: return Unicode_Category_SO;
		case 0x1FB71: return Unicode_Category_SO;
		case 0x1FB72: return Unicode_Category_SO;
		case 0x1FB73: return Unicode_Category_SO;
		case 0x1FB74: return Unicode_Category_SO;
		case 0x1FB75: return Unicode_Category_SO;
		case 0x1FB76: return Unicode_Category_SO;
		case 0x1FB77: return Unicode_Category_SO;
		case 0x1FB78: return Unicode_Category_SO;
		case 0x1FB79: return Unicode_Category_SO;
		case 0x1FB7A: return Unicode_Category_SO;
		case 0x1FB7B: return Unicode_Category_SO;
		case 0x1FB7C: return Unicode_Category_SO;
		case 0x1FB7D: return Unicode_Category_SO;
		case 0x1FB7E: return Unicode_Category_SO;
		case 0x1FB7F: return Unicode_Category_SO;
		case 0x1FB80: return Unicode_Category_SO;
		case 0x1FB81: return Unicode_Category_SO;
		case 0x1FB82: return Unicode_Category_SO;
		case 0x1FB83: return Unicode_Category_SO;
		case 0x1FB84: return Unicode_Category_SO;
		case 0x1FB85: return Unicode_Category_SO;
		case 0x1FB86: return Unicode_Category_SO;
		case 0x1FB87: return Unicode_Category_SO;
		case 0x1FB88: return Unicode_Category_SO;
		case 0x1FB89: return Unicode_Category_SO;
		case 0x1FB8A: return Unicode_Category_SO;
		case 0x1FB8B: return Unicode_Category_SO;
		case 0x1FB8C: return Unicode_Category_SO;
		case 0x1FB8D: return Unicode_Category_SO;
		case 0x1FB8E: return Unicode_Category_SO;
		case 0x1FB8F: return Unicode_Category_SO;
		case 0x1FB90: return Unicode_Category_SO;
		case 0x1FB91: return Unicode_Category_SO;
		case 0x1FB92: return Unicode_Category_SO;
		case 0x1FB94: return Unicode_Category_SO;
		case 0x1FB95: return Unicode_Category_SO;
		case 0x1FB96: return Unicode_Category_SO;
		case 0x1FB97: return Unicode_Category_SO;
		case 0x1FB98: return Unicode_Category_SO;
		case 0x1FB99: return Unicode_Category_SO;
		case 0x1FB9A: return Unicode_Category_SO;
		case 0x1FB9B: return Unicode_Category_SO;
		case 0x1FB9C: return Unicode_Category_SO;
		case 0x1FB9D: return Unicode_Category_SO;
		case 0x1FB9E: return Unicode_Category_SO;
		case 0x1FB9F: return Unicode_Category_SO;
		case 0x1FBA0: return Unicode_Category_SO;
		case 0x1FBA1: return Unicode_Category_SO;
		case 0x1FBA2: return Unicode_Category_SO;
		case 0x1FBA3: return Unicode_Category_SO;
		case 0x1FBA4: return Unicode_Category_SO;
		case 0x1FBA5: return Unicode_Category_SO;
		case 0x1FBA6: return Unicode_Category_SO;
		case 0x1FBA7: return Unicode_Category_SO;
		case 0x1FBA8: return Unicode_Category_SO;
		case 0x1FBA9: return Unicode_Category_SO;
		case 0x1FBAA: return Unicode_Category_SO;
		case 0x1FBAB: return Unicode_Category_SO;
		case 0x1FBAC: return Unicode_Category_SO;
		case 0x1FBAD: return Unicode_Category_SO;
		case 0x1FBAE: return Unicode_Category_SO;
		case 0x1FBAF: return Unicode_Category_SO;
		case 0x1FBB0: return Unicode_Category_SO;
		case 0x1FBB1: return Unicode_Category_SO;
		case 0x1FBB2: return Unicode_Category_SO;
		case 0x1FBB3: return Unicode_Category_SO;
		case 0x1FBB4: return Unicode_Category_SO;
		case 0x1FBB5: return Unicode_Category_SO;
		case 0x1FBB6: return Unicode_Category_SO;
		case 0x1FBB7: return Unicode_Category_SO;
		case 0x1FBB8: return Unicode_Category_SO;
		case 0x1FBB9: return Unicode_Category_SO;
		case 0x1FBBA: return Unicode_Category_SO;
		case 0x1FBBB: return Unicode_Category_SO;
		case 0x1FBBC: return Unicode_Category_SO;
		case 0x1FBBD: return Unicode_Category_SO;
		case 0x1FBBE: return Unicode_Category_SO;
		case 0x1FBBF: return Unicode_Category_SO;
		case 0x1FBC0: return Unicode_Category_SO;
		case 0x1FBC1: return Unicode_Category_SO;
		case 0x1FBC2: return Unicode_Category_SO;
		case 0x1FBC3: return Unicode_Category_SO;
		case 0x1FBC4: return Unicode_Category_SO;
		case 0x1FBC5: return Unicode_Category_SO;
		case 0x1FBC6: return Unicode_Category_SO;
		case 0x1FBC7: return Unicode_Category_SO;
		case 0x1FBC8: return Unicode_Category_SO;
		case 0x1FBC9: return Unicode_Category_SO;
		case 0x1FBCA: return Unicode_Category_SO;
		case 0x1FBF0: return Unicode_Category_ND;
		case 0x1FBF1: return Unicode_Category_ND;
		case 0x1FBF2: return Unicode_Category_ND;
		case 0x1FBF3: return Unicode_Category_ND;
		case 0x1FBF4: return Unicode_Category_ND;
		case 0x1FBF5: return Unicode_Category_ND;
		case 0x1FBF6: return Unicode_Category_ND;
		case 0x1FBF7: return Unicode_Category_ND;
		case 0x1FBF8: return Unicode_Category_ND;
		case 0x1FBF9: return Unicode_Category_ND;
		case 0x20000: return Unicode_Category_LO;
		case 0x2A6DD: return Unicode_Category_LO;
		case 0x2A700: return Unicode_Category_LO;
		case 0x2B734: return Unicode_Category_LO;
		case 0x2B740: return Unicode_Category_LO;
		case 0x2B81D: return Unicode_Category_LO;
		case 0x2B820: return Unicode_Category_LO;
		case 0x2CEA1: return Unicode_Category_LO;
		case 0x2CEB0: return Unicode_Category_LO;
		case 0x2EBE0: return Unicode_Category_LO;
		case 0x2F800: return Unicode_Category_LO;
		case 0x2F801: return Unicode_Category_LO;
		case 0x2F802: return Unicode_Category_LO;
		case 0x2F803: return Unicode_Category_LO;
		case 0x2F804: return Unicode_Category_LO;
		case 0x2F805: return Unicode_Category_LO;
		case 0x2F806: return Unicode_Category_LO;
		case 0x2F807: return Unicode_Category_LO;
		case 0x2F808: return Unicode_Category_LO;
		case 0x2F809: return Unicode_Category_LO;
		case 0x2F80A: return Unicode_Category_LO;
		case 0x2F80B: return Unicode_Category_LO;
		case 0x2F80C: return Unicode_Category_LO;
		case 0x2F80D: return Unicode_Category_LO;
		case 0x2F80E: return Unicode_Category_LO;
		case 0x2F80F: return Unicode_Category_LO;
		case 0x2F810: return Unicode_Category_LO;
		case 0x2F811: return Unicode_Category_LO;
		case 0x2F812: return Unicode_Category_LO;
		case 0x2F813: return Unicode_Category_LO;
		case 0x2F814: return Unicode_Category_LO;
		case 0x2F815: return Unicode_Category_LO;
		case 0x2F816: return Unicode_Category_LO;
		case 0x2F817: return Unicode_Category_LO;
		case 0x2F818: return Unicode_Category_LO;
		case 0x2F819: return Unicode_Category_LO;
		case 0x2F81A: return Unicode_Category_LO;
		case 0x2F81B: return Unicode_Category_LO;
		case 0x2F81C: return Unicode_Category_LO;
		case 0x2F81D: return Unicode_Category_LO;
		case 0x2F81E: return Unicode_Category_LO;
		case 0x2F81F: return Unicode_Category_LO;
		case 0x2F820: return Unicode_Category_LO;
		case 0x2F821: return Unicode_Category_LO;
		case 0x2F822: return Unicode_Category_LO;
		case 0x2F823: return Unicode_Category_LO;
		case 0x2F824: return Unicode_Category_LO;
		case 0x2F825: return Unicode_Category_LO;
		case 0x2F826: return Unicode_Category_LO;
		case 0x2F827: return Unicode_Category_LO;
		case 0x2F828: return Unicode_Category_LO;
		case 0x2F829: return Unicode_Category_LO;
		case 0x2F82A: return Unicode_Category_LO;
		case 0x2F82B: return Unicode_Category_LO;
		case 0x2F82C: return Unicode_Category_LO;
		case 0x2F82D: return Unicode_Category_LO;
		case 0x2F82E: return Unicode_Category_LO;
		case 0x2F82F: return Unicode_Category_LO;
		case 0x2F830: return Unicode_Category_LO;
		case 0x2F831: return Unicode_Category_LO;
		case 0x2F832: return Unicode_Category_LO;
		case 0x2F833: return Unicode_Category_LO;
		case 0x2F834: return Unicode_Category_LO;
		case 0x2F835: return Unicode_Category_LO;
		case 0x2F836: return Unicode_Category_LO;
		case 0x2F837: return Unicode_Category_LO;
		case 0x2F838: return Unicode_Category_LO;
		case 0x2F839: return Unicode_Category_LO;
		case 0x2F83A: return Unicode_Category_LO;
		case 0x2F83B: return Unicode_Category_LO;
		case 0x2F83C: return Unicode_Category_LO;
		case 0x2F83D: return Unicode_Category_LO;
		case 0x2F83E: return Unicode_Category_LO;
		case 0x2F83F: return Unicode_Category_LO;
		case 0x2F840: return Unicode_Category_LO;
		case 0x2F841: return Unicode_Category_LO;
		case 0x2F842: return Unicode_Category_LO;
		case 0x2F843: return Unicode_Category_LO;
		case 0x2F844: return Unicode_Category_LO;
		case 0x2F845: return Unicode_Category_LO;
		case 0x2F846: return Unicode_Category_LO;
		case 0x2F847: return Unicode_Category_LO;
		case 0x2F848: return Unicode_Category_LO;
		case 0x2F849: return Unicode_Category_LO;
		case 0x2F84A: return Unicode_Category_LO;
		case 0x2F84B: return Unicode_Category_LO;
		case 0x2F84C: return Unicode_Category_LO;
		case 0x2F84D: return Unicode_Category_LO;
		case 0x2F84E: return Unicode_Category_LO;
		case 0x2F84F: return Unicode_Category_LO;
		case 0x2F850: return Unicode_Category_LO;
		case 0x2F851: return Unicode_Category_LO;
		case 0x2F852: return Unicode_Category_LO;
		case 0x2F853: return Unicode_Category_LO;
		case 0x2F854: return Unicode_Category_LO;
		case 0x2F855: return Unicode_Category_LO;
		case 0x2F856: return Unicode_Category_LO;
		case 0x2F857: return Unicode_Category_LO;
		case 0x2F858: return Unicode_Category_LO;
		case 0x2F859: return Unicode_Category_LO;
		case 0x2F85A: return Unicode_Category_LO;
		case 0x2F85B: return Unicode_Category_LO;
		case 0x2F85C: return Unicode_Category_LO;
		case 0x2F85D: return Unicode_Category_LO;
		case 0x2F85E: return Unicode_Category_LO;
		case 0x2F85F: return Unicode_Category_LO;
		case 0x2F860: return Unicode_Category_LO;
		case 0x2F861: return Unicode_Category_LO;
		case 0x2F862: return Unicode_Category_LO;
		case 0x2F863: return Unicode_Category_LO;
		case 0x2F864: return Unicode_Category_LO;
		case 0x2F865: return Unicode_Category_LO;
		case 0x2F866: return Unicode_Category_LO;
		case 0x2F867: return Unicode_Category_LO;
		case 0x2F868: return Unicode_Category_LO;
		case 0x2F869: return Unicode_Category_LO;
		case 0x2F86A: return Unicode_Category_LO;
		case 0x2F86B: return Unicode_Category_LO;
		case 0x2F86C: return Unicode_Category_LO;
		case 0x2F86D: return Unicode_Category_LO;
		case 0x2F86E: return Unicode_Category_LO;
		case 0x2F86F: return Unicode_Category_LO;
		case 0x2F870: return Unicode_Category_LO;
		case 0x2F871: return Unicode_Category_LO;
		case 0x2F872: return Unicode_Category_LO;
		case 0x2F873: return Unicode_Category_LO;
		case 0x2F874: return Unicode_Category_LO;
		case 0x2F875: return Unicode_Category_LO;
		case 0x2F876: return Unicode_Category_LO;
		case 0x2F877: return Unicode_Category_LO;
		case 0x2F878: return Unicode_Category_LO;
		case 0x2F879: return Unicode_Category_LO;
		case 0x2F87A: return Unicode_Category_LO;
		case 0x2F87B: return Unicode_Category_LO;
		case 0x2F87C: return Unicode_Category_LO;
		case 0x2F87D: return Unicode_Category_LO;
		case 0x2F87E: return Unicode_Category_LO;
		case 0x2F87F: return Unicode_Category_LO;
		case 0x2F880: return Unicode_Category_LO;
		case 0x2F881: return Unicode_Category_LO;
		case 0x2F882: return Unicode_Category_LO;
		case 0x2F883: return Unicode_Category_LO;
		case 0x2F884: return Unicode_Category_LO;
		case 0x2F885: return Unicode_Category_LO;
		case 0x2F886: return Unicode_Category_LO;
		case 0x2F887: return Unicode_Category_LO;
		case 0x2F888: return Unicode_Category_LO;
		case 0x2F889: return Unicode_Category_LO;
		case 0x2F88A: return Unicode_Category_LO;
		case 0x2F88B: return Unicode_Category_LO;
		case 0x2F88C: return Unicode_Category_LO;
		case 0x2F88D: return Unicode_Category_LO;
		case 0x2F88E: return Unicode_Category_LO;
		case 0x2F88F: return Unicode_Category_LO;
		case 0x2F890: return Unicode_Category_LO;
		case 0x2F891: return Unicode_Category_LO;
		case 0x2F892: return Unicode_Category_LO;
		case 0x2F893: return Unicode_Category_LO;
		case 0x2F894: return Unicode_Category_LO;
		case 0x2F895: return Unicode_Category_LO;
		case 0x2F896: return Unicode_Category_LO;
		case 0x2F897: return Unicode_Category_LO;
		case 0x2F898: return Unicode_Category_LO;
		case 0x2F899: return Unicode_Category_LO;
		case 0x2F89A: return Unicode_Category_LO;
		case 0x2F89B: return Unicode_Category_LO;
		case 0x2F89C: return Unicode_Category_LO;
		case 0x2F89D: return Unicode_Category_LO;
		case 0x2F89E: return Unicode_Category_LO;
		case 0x2F89F: return Unicode_Category_LO;
		case 0x2F8A0: return Unicode_Category_LO;
		case 0x2F8A1: return Unicode_Category_LO;
		case 0x2F8A2: return Unicode_Category_LO;
		case 0x2F8A3: return Unicode_Category_LO;
		case 0x2F8A4: return Unicode_Category_LO;
		case 0x2F8A5: return Unicode_Category_LO;
		case 0x2F8A6: return Unicode_Category_LO;
		case 0x2F8A7: return Unicode_Category_LO;
		case 0x2F8A8: return Unicode_Category_LO;
		case 0x2F8A9: return Unicode_Category_LO;
		case 0x2F8AA: return Unicode_Category_LO;
		case 0x2F8AB: return Unicode_Category_LO;
		case 0x2F8AC: return Unicode_Category_LO;
		case 0x2F8AD: return Unicode_Category_LO;
		case 0x2F8AE: return Unicode_Category_LO;
		case 0x2F8AF: return Unicode_Category_LO;
		case 0x2F8B0: return Unicode_Category_LO;
		case 0x2F8B1: return Unicode_Category_LO;
		case 0x2F8B2: return Unicode_Category_LO;
		case 0x2F8B3: return Unicode_Category_LO;
		case 0x2F8B4: return Unicode_Category_LO;
		case 0x2F8B5: return Unicode_Category_LO;
		case 0x2F8B6: return Unicode_Category_LO;
		case 0x2F8B7: return Unicode_Category_LO;
		case 0x2F8B8: return Unicode_Category_LO;
		case 0x2F8B9: return Unicode_Category_LO;
		case 0x2F8BA: return Unicode_Category_LO;
		case 0x2F8BB: return Unicode_Category_LO;
		case 0x2F8BC: return Unicode_Category_LO;
		case 0x2F8BD: return Unicode_Category_LO;
		case 0x2F8BE: return Unicode_Category_LO;
		case 0x2F8BF: return Unicode_Category_LO;
		case 0x2F8C0: return Unicode_Category_LO;
		case 0x2F8C1: return Unicode_Category_LO;
		case 0x2F8C2: return Unicode_Category_LO;
		case 0x2F8C3: return Unicode_Category_LO;
		case 0x2F8C4: return Unicode_Category_LO;
		case 0x2F8C5: return Unicode_Category_LO;
		case 0x2F8C6: return Unicode_Category_LO;
		case 0x2F8C7: return Unicode_Category_LO;
		case 0x2F8C8: return Unicode_Category_LO;
		case 0x2F8C9: return Unicode_Category_LO;
		case 0x2F8CA: return Unicode_Category_LO;
		case 0x2F8CB: return Unicode_Category_LO;
		case 0x2F8CC: return Unicode_Category_LO;
		case 0x2F8CD: return Unicode_Category_LO;
		case 0x2F8CE: return Unicode_Category_LO;
		case 0x2F8CF: return Unicode_Category_LO;
		case 0x2F8D0: return Unicode_Category_LO;
		case 0x2F8D1: return Unicode_Category_LO;
		case 0x2F8D2: return Unicode_Category_LO;
		case 0x2F8D3: return Unicode_Category_LO;
		case 0x2F8D4: return Unicode_Category_LO;
		case 0x2F8D5: return Unicode_Category_LO;
		case 0x2F8D6: return Unicode_Category_LO;
		case 0x2F8D7: return Unicode_Category_LO;
		case 0x2F8D8: return Unicode_Category_LO;
		case 0x2F8D9: return Unicode_Category_LO;
		case 0x2F8DA: return Unicode_Category_LO;
		case 0x2F8DB: return Unicode_Category_LO;
		case 0x2F8DC: return Unicode_Category_LO;
		case 0x2F8DD: return Unicode_Category_LO;
		case 0x2F8DE: return Unicode_Category_LO;
		case 0x2F8DF: return Unicode_Category_LO;
		case 0x2F8E0: return Unicode_Category_LO;
		case 0x2F8E1: return Unicode_Category_LO;
		case 0x2F8E2: return Unicode_Category_LO;
		case 0x2F8E3: return Unicode_Category_LO;
		case 0x2F8E4: return Unicode_Category_LO;
		case 0x2F8E5: return Unicode_Category_LO;
		case 0x2F8E6: return Unicode_Category_LO;
		case 0x2F8E7: return Unicode_Category_LO;
		case 0x2F8E8: return Unicode_Category_LO;
		case 0x2F8E9: return Unicode_Category_LO;
		case 0x2F8EA: return Unicode_Category_LO;
		case 0x2F8EB: return Unicode_Category_LO;
		case 0x2F8EC: return Unicode_Category_LO;
		case 0x2F8ED: return Unicode_Category_LO;
		case 0x2F8EE: return Unicode_Category_LO;
		case 0x2F8EF: return Unicode_Category_LO;
		case 0x2F8F0: return Unicode_Category_LO;
		case 0x2F8F1: return Unicode_Category_LO;
		case 0x2F8F2: return Unicode_Category_LO;
		case 0x2F8F3: return Unicode_Category_LO;
		case 0x2F8F4: return Unicode_Category_LO;
		case 0x2F8F5: return Unicode_Category_LO;
		case 0x2F8F6: return Unicode_Category_LO;
		case 0x2F8F7: return Unicode_Category_LO;
		case 0x2F8F8: return Unicode_Category_LO;
		case 0x2F8F9: return Unicode_Category_LO;
		case 0x2F8FA: return Unicode_Category_LO;
		case 0x2F8FB: return Unicode_Category_LO;
		case 0x2F8FC: return Unicode_Category_LO;
		case 0x2F8FD: return Unicode_Category_LO;
		case 0x2F8FE: return Unicode_Category_LO;
		case 0x2F8FF: return Unicode_Category_LO;
		case 0x2F900: return Unicode_Category_LO;
		case 0x2F901: return Unicode_Category_LO;
		case 0x2F902: return Unicode_Category_LO;
		case 0x2F903: return Unicode_Category_LO;
		case 0x2F904: return Unicode_Category_LO;
		case 0x2F905: return Unicode_Category_LO;
		case 0x2F906: return Unicode_Category_LO;
		case 0x2F907: return Unicode_Category_LO;
		case 0x2F908: return Unicode_Category_LO;
		case 0x2F909: return Unicode_Category_LO;
		case 0x2F90A: return Unicode_Category_LO;
		case 0x2F90B: return Unicode_Category_LO;
		case 0x2F90C: return Unicode_Category_LO;
		case 0x2F90D: return Unicode_Category_LO;
		case 0x2F90E: return Unicode_Category_LO;
		case 0x2F90F: return Unicode_Category_LO;
		case 0x2F910: return Unicode_Category_LO;
		case 0x2F911: return Unicode_Category_LO;
		case 0x2F912: return Unicode_Category_LO;
		case 0x2F913: return Unicode_Category_LO;
		case 0x2F914: return Unicode_Category_LO;
		case 0x2F915: return Unicode_Category_LO;
		case 0x2F916: return Unicode_Category_LO;
		case 0x2F917: return Unicode_Category_LO;
		case 0x2F918: return Unicode_Category_LO;
		case 0x2F919: return Unicode_Category_LO;
		case 0x2F91A: return Unicode_Category_LO;
		case 0x2F91B: return Unicode_Category_LO;
		case 0x2F91C: return Unicode_Category_LO;
		case 0x2F91D: return Unicode_Category_LO;
		case 0x2F91E: return Unicode_Category_LO;
		case 0x2F91F: return Unicode_Category_LO;
		case 0x2F920: return Unicode_Category_LO;
		case 0x2F921: return Unicode_Category_LO;
		case 0x2F922: return Unicode_Category_LO;
		case 0x2F923: return Unicode_Category_LO;
		case 0x2F924: return Unicode_Category_LO;
		case 0x2F925: return Unicode_Category_LO;
		case 0x2F926: return Unicode_Category_LO;
		case 0x2F927: return Unicode_Category_LO;
		case 0x2F928: return Unicode_Category_LO;
		case 0x2F929: return Unicode_Category_LO;
		case 0x2F92A: return Unicode_Category_LO;
		case 0x2F92B: return Unicode_Category_LO;
		case 0x2F92C: return Unicode_Category_LO;
		case 0x2F92D: return Unicode_Category_LO;
		case 0x2F92E: return Unicode_Category_LO;
		case 0x2F92F: return Unicode_Category_LO;
		case 0x2F930: return Unicode_Category_LO;
		case 0x2F931: return Unicode_Category_LO;
		case 0x2F932: return Unicode_Category_LO;
		case 0x2F933: return Unicode_Category_LO;
		case 0x2F934: return Unicode_Category_LO;
		case 0x2F935: return Unicode_Category_LO;
		case 0x2F936: return Unicode_Category_LO;
		case 0x2F937: return Unicode_Category_LO;
		case 0x2F938: return Unicode_Category_LO;
		case 0x2F939: return Unicode_Category_LO;
		case 0x2F93A: return Unicode_Category_LO;
		case 0x2F93B: return Unicode_Category_LO;
		case 0x2F93C: return Unicode_Category_LO;
		case 0x2F93D: return Unicode_Category_LO;
		case 0x2F93E: return Unicode_Category_LO;
		case 0x2F93F: return Unicode_Category_LO;
		case 0x2F940: return Unicode_Category_LO;
		case 0x2F941: return Unicode_Category_LO;
		case 0x2F942: return Unicode_Category_LO;
		case 0x2F943: return Unicode_Category_LO;
		case 0x2F944: return Unicode_Category_LO;
		case 0x2F945: return Unicode_Category_LO;
		case 0x2F946: return Unicode_Category_LO;
		case 0x2F947: return Unicode_Category_LO;
		case 0x2F948: return Unicode_Category_LO;
		case 0x2F949: return Unicode_Category_LO;
		case 0x2F94A: return Unicode_Category_LO;
		case 0x2F94B: return Unicode_Category_LO;
		case 0x2F94C: return Unicode_Category_LO;
		case 0x2F94D: return Unicode_Category_LO;
		case 0x2F94E: return Unicode_Category_LO;
		case 0x2F94F: return Unicode_Category_LO;
		case 0x2F950: return Unicode_Category_LO;
		case 0x2F951: return Unicode_Category_LO;
		case 0x2F952: return Unicode_Category_LO;
		case 0x2F953: return Unicode_Category_LO;
		case 0x2F954: return Unicode_Category_LO;
		case 0x2F955: return Unicode_Category_LO;
		case 0x2F956: return Unicode_Category_LO;
		case 0x2F957: return Unicode_Category_LO;
		case 0x2F958: return Unicode_Category_LO;
		case 0x2F959: return Unicode_Category_LO;
		case 0x2F95A: return Unicode_Category_LO;
		case 0x2F95B: return Unicode_Category_LO;
		case 0x2F95C: return Unicode_Category_LO;
		case 0x2F95D: return Unicode_Category_LO;
		case 0x2F95E: return Unicode_Category_LO;
		case 0x2F95F: return Unicode_Category_LO;
		case 0x2F960: return Unicode_Category_LO;
		case 0x2F961: return Unicode_Category_LO;
		case 0x2F962: return Unicode_Category_LO;
		case 0x2F963: return Unicode_Category_LO;
		case 0x2F964: return Unicode_Category_LO;
		case 0x2F965: return Unicode_Category_LO;
		case 0x2F966: return Unicode_Category_LO;
		case 0x2F967: return Unicode_Category_LO;
		case 0x2F968: return Unicode_Category_LO;
		case 0x2F969: return Unicode_Category_LO;
		case 0x2F96A: return Unicode_Category_LO;
		case 0x2F96B: return Unicode_Category_LO;
		case 0x2F96C: return Unicode_Category_LO;
		case 0x2F96D: return Unicode_Category_LO;
		case 0x2F96E: return Unicode_Category_LO;
		case 0x2F96F: return Unicode_Category_LO;
		case 0x2F970: return Unicode_Category_LO;
		case 0x2F971: return Unicode_Category_LO;
		case 0x2F972: return Unicode_Category_LO;
		case 0x2F973: return Unicode_Category_LO;
		case 0x2F974: return Unicode_Category_LO;
		case 0x2F975: return Unicode_Category_LO;
		case 0x2F976: return Unicode_Category_LO;
		case 0x2F977: return Unicode_Category_LO;
		case 0x2F978: return Unicode_Category_LO;
		case 0x2F979: return Unicode_Category_LO;
		case 0x2F97A: return Unicode_Category_LO;
		case 0x2F97B: return Unicode_Category_LO;
		case 0x2F97C: return Unicode_Category_LO;
		case 0x2F97D: return Unicode_Category_LO;
		case 0x2F97E: return Unicode_Category_LO;
		case 0x2F97F: return Unicode_Category_LO;
		case 0x2F980: return Unicode_Category_LO;
		case 0x2F981: return Unicode_Category_LO;
		case 0x2F982: return Unicode_Category_LO;
		case 0x2F983: return Unicode_Category_LO;
		case 0x2F984: return Unicode_Category_LO;
		case 0x2F985: return Unicode_Category_LO;
		case 0x2F986: return Unicode_Category_LO;
		case 0x2F987: return Unicode_Category_LO;
		case 0x2F988: return Unicode_Category_LO;
		case 0x2F989: return Unicode_Category_LO;
		case 0x2F98A: return Unicode_Category_LO;
		case 0x2F98B: return Unicode_Category_LO;
		case 0x2F98C: return Unicode_Category_LO;
		case 0x2F98D: return Unicode_Category_LO;
		case 0x2F98E: return Unicode_Category_LO;
		case 0x2F98F: return Unicode_Category_LO;
		case 0x2F990: return Unicode_Category_LO;
		case 0x2F991: return Unicode_Category_LO;
		case 0x2F992: return Unicode_Category_LO;
		case 0x2F993: return Unicode_Category_LO;
		case 0x2F994: return Unicode_Category_LO;
		case 0x2F995: return Unicode_Category_LO;
		case 0x2F996: return Unicode_Category_LO;
		case 0x2F997: return Unicode_Category_LO;
		case 0x2F998: return Unicode_Category_LO;
		case 0x2F999: return Unicode_Category_LO;
		case 0x2F99A: return Unicode_Category_LO;
		case 0x2F99B: return Unicode_Category_LO;
		case 0x2F99C: return Unicode_Category_LO;
		case 0x2F99D: return Unicode_Category_LO;
		case 0x2F99E: return Unicode_Category_LO;
		case 0x2F99F: return Unicode_Category_LO;
		case 0x2F9A0: return Unicode_Category_LO;
		case 0x2F9A1: return Unicode_Category_LO;
		case 0x2F9A2: return Unicode_Category_LO;
		case 0x2F9A3: return Unicode_Category_LO;
		case 0x2F9A4: return Unicode_Category_LO;
		case 0x2F9A5: return Unicode_Category_LO;
		case 0x2F9A6: return Unicode_Category_LO;
		case 0x2F9A7: return Unicode_Category_LO;
		case 0x2F9A8: return Unicode_Category_LO;
		case 0x2F9A9: return Unicode_Category_LO;
		case 0x2F9AA: return Unicode_Category_LO;
		case 0x2F9AB: return Unicode_Category_LO;
		case 0x2F9AC: return Unicode_Category_LO;
		case 0x2F9AD: return Unicode_Category_LO;
		case 0x2F9AE: return Unicode_Category_LO;
		case 0x2F9AF: return Unicode_Category_LO;
		case 0x2F9B0: return Unicode_Category_LO;
		case 0x2F9B1: return Unicode_Category_LO;
		case 0x2F9B2: return Unicode_Category_LO;
		case 0x2F9B3: return Unicode_Category_LO;
		case 0x2F9B4: return Unicode_Category_LO;
		case 0x2F9B5: return Unicode_Category_LO;
		case 0x2F9B6: return Unicode_Category_LO;
		case 0x2F9B7: return Unicode_Category_LO;
		case 0x2F9B8: return Unicode_Category_LO;
		case 0x2F9B9: return Unicode_Category_LO;
		case 0x2F9BA: return Unicode_Category_LO;
		case 0x2F9BB: return Unicode_Category_LO;
		case 0x2F9BC: return Unicode_Category_LO;
		case 0x2F9BD: return Unicode_Category_LO;
		case 0x2F9BE: return Unicode_Category_LO;
		case 0x2F9BF: return Unicode_Category_LO;
		case 0x2F9C0: return Unicode_Category_LO;
		case 0x2F9C1: return Unicode_Category_LO;
		case 0x2F9C2: return Unicode_Category_LO;
		case 0x2F9C3: return Unicode_Category_LO;
		case 0x2F9C4: return Unicode_Category_LO;
		case 0x2F9C5: return Unicode_Category_LO;
		case 0x2F9C6: return Unicode_Category_LO;
		case 0x2F9C7: return Unicode_Category_LO;
		case 0x2F9C8: return Unicode_Category_LO;
		case 0x2F9C9: return Unicode_Category_LO;
		case 0x2F9CA: return Unicode_Category_LO;
		case 0x2F9CB: return Unicode_Category_LO;
		case 0x2F9CC: return Unicode_Category_LO;
		case 0x2F9CD: return Unicode_Category_LO;
		case 0x2F9CE: return Unicode_Category_LO;
		case 0x2F9CF: return Unicode_Category_LO;
		case 0x2F9D0: return Unicode_Category_LO;
		case 0x2F9D1: return Unicode_Category_LO;
		case 0x2F9D2: return Unicode_Category_LO;
		case 0x2F9D3: return Unicode_Category_LO;
		case 0x2F9D4: return Unicode_Category_LO;
		case 0x2F9D5: return Unicode_Category_LO;
		case 0x2F9D6: return Unicode_Category_LO;
		case 0x2F9D7: return Unicode_Category_LO;
		case 0x2F9D8: return Unicode_Category_LO;
		case 0x2F9D9: return Unicode_Category_LO;
		case 0x2F9DA: return Unicode_Category_LO;
		case 0x2F9DB: return Unicode_Category_LO;
		case 0x2F9DC: return Unicode_Category_LO;
		case 0x2F9DD: return Unicode_Category_LO;
		case 0x2F9DE: return Unicode_Category_LO;
		case 0x2F9DF: return Unicode_Category_LO;
		case 0x2F9E0: return Unicode_Category_LO;
		case 0x2F9E1: return Unicode_Category_LO;
		case 0x2F9E2: return Unicode_Category_LO;
		case 0x2F9E3: return Unicode_Category_LO;
		case 0x2F9E4: return Unicode_Category_LO;
		case 0x2F9E5: return Unicode_Category_LO;
		case 0x2F9E6: return Unicode_Category_LO;
		case 0x2F9E7: return Unicode_Category_LO;
		case 0x2F9E8: return Unicode_Category_LO;
		case 0x2F9E9: return Unicode_Category_LO;
		case 0x2F9EA: return Unicode_Category_LO;
		case 0x2F9EB: return Unicode_Category_LO;
		case 0x2F9EC: return Unicode_Category_LO;
		case 0x2F9ED: return Unicode_Category_LO;
		case 0x2F9EE: return Unicode_Category_LO;
		case 0x2F9EF: return Unicode_Category_LO;
		case 0x2F9F0: return Unicode_Category_LO;
		case 0x2F9F1: return Unicode_Category_LO;
		case 0x2F9F2: return Unicode_Category_LO;
		case 0x2F9F3: return Unicode_Category_LO;
		case 0x2F9F4: return Unicode_Category_LO;
		case 0x2F9F5: return Unicode_Category_LO;
		case 0x2F9F6: return Unicode_Category_LO;
		case 0x2F9F7: return Unicode_Category_LO;
		case 0x2F9F8: return Unicode_Category_LO;
		case 0x2F9F9: return Unicode_Category_LO;
		case 0x2F9FA: return Unicode_Category_LO;
		case 0x2F9FB: return Unicode_Category_LO;
		case 0x2F9FC: return Unicode_Category_LO;
		case 0x2F9FD: return Unicode_Category_LO;
		case 0x2F9FE: return Unicode_Category_LO;
		case 0x2F9FF: return Unicode_Category_LO;
		case 0x2FA00: return Unicode_Category_LO;
		case 0x2FA01: return Unicode_Category_LO;
		case 0x2FA02: return Unicode_Category_LO;
		case 0x2FA03: return Unicode_Category_LO;
		case 0x2FA04: return Unicode_Category_LO;
		case 0x2FA05: return Unicode_Category_LO;
		case 0x2FA06: return Unicode_Category_LO;
		case 0x2FA07: return Unicode_Category_LO;
		case 0x2FA08: return Unicode_Category_LO;
		case 0x2FA09: return Unicode_Category_LO;
		case 0x2FA0A: return Unicode_Category_LO;
		case 0x2FA0B: return Unicode_Category_LO;
		case 0x2FA0C: return Unicode_Category_LO;
		case 0x2FA0D: return Unicode_Category_LO;
		case 0x2FA0E: return Unicode_Category_LO;
		case 0x2FA0F: return Unicode_Category_LO;
		case 0x2FA10: return Unicode_Category_LO;
		case 0x2FA11: return Unicode_Category_LO;
		case 0x2FA12: return Unicode_Category_LO;
		case 0x2FA13: return Unicode_Category_LO;
		case 0x2FA14: return Unicode_Category_LO;
		case 0x2FA15: return Unicode_Category_LO;
		case 0x2FA16: return Unicode_Category_LO;
		case 0x2FA17: return Unicode_Category_LO;
		case 0x2FA18: return Unicode_Category_LO;
		case 0x2FA19: return Unicode_Category_LO;
		case 0x2FA1A: return Unicode_Category_LO;
		case 0x2FA1B: return Unicode_Category_LO;
		case 0x2FA1C: return Unicode_Category_LO;
		case 0x2FA1D: return Unicode_Category_LO;
		case 0x30000: return Unicode_Category_LO;
		case 0x3134A: return Unicode_Category_LO;
		case 0xE0001: return Unicode_Category_CF;
		case 0xE0020: return Unicode_Category_CF;
		case 0xE0021: return Unicode_Category_CF;
		case 0xE0022: return Unicode_Category_CF;
		case 0xE0023: return Unicode_Category_CF;
		case 0xE0024: return Unicode_Category_CF;
		case 0xE0025: return Unicode_Category_CF;
		case 0xE0026: return Unicode_Category_CF;
		case 0xE0027: return Unicode_Category_CF;
		case 0xE0028: return Unicode_Category_CF;
		case 0xE0029: return Unicode_Category_CF;
		case 0xE002A: return Unicode_Category_CF;
		case 0xE002B: return Unicode_Category_CF;
		case 0xE002C: return Unicode_Category_CF;
		case 0xE002D: return Unicode_Category_CF;
		case 0xE002E: return Unicode_Category_CF;
		case 0xE002F: return Unicode_Category_CF;
		case 0xE0030: return Unicode_Category_CF;
		case 0xE0031: return Unicode_Category_CF;
		case 0xE0032: return Unicode_Category_CF;
		case 0xE0033: return Unicode_Category_CF;
		case 0xE0034: return Unicode_Category_CF;
		case 0xE0035: return Unicode_Category_CF;
		case 0xE0036: return Unicode_Category_CF;
		case 0xE0037: return Unicode_Category_CF;
		case 0xE0038: return Unicode_Category_CF;
		case 0xE0039: return Unicode_Category_CF;
		case 0xE003A: return Unicode_Category_CF;
		case 0xE003B: return Unicode_Category_CF;
		case 0xE003C: return Unicode_Category_CF;
		case 0xE003D: return Unicode_Category_CF;
		case 0xE003E: return Unicode_Category_CF;
		case 0xE003F: return Unicode_Category_CF;
		case 0xE0040: return Unicode_Category_CF;
		case 0xE0041: return Unicode_Category_CF;
		case 0xE0042: return Unicode_Category_CF;
		case 0xE0043: return Unicode_Category_CF;
		case 0xE0044: return Unicode_Category_CF;
		case 0xE0045: return Unicode_Category_CF;
		case 0xE0046: return Unicode_Category_CF;
		case 0xE0047: return Unicode_Category_CF;
		case 0xE0048: return Unicode_Category_CF;
		case 0xE0049: return Unicode_Category_CF;
		case 0xE004A: return Unicode_Category_CF;
		case 0xE004B: return Unicode_Category_CF;
		case 0xE004C: return Unicode_Category_CF;
		case 0xE004D: return Unicode_Category_CF;
		case 0xE004E: return Unicode_Category_CF;
		case 0xE004F: return Unicode_Category_CF;
		case 0xE0050: return Unicode_Category_CF;
		case 0xE0051: return Unicode_Category_CF;
		case 0xE0052: return Unicode_Category_CF;
		case 0xE0053: return Unicode_Category_CF;
		case 0xE0054: return Unicode_Category_CF;
		case 0xE0055: return Unicode_Category_CF;
		case 0xE0056: return Unicode_Category_CF;
		case 0xE0057: return Unicode_Category_CF;
		case 0xE0058: return Unicode_Category_CF;
		case 0xE0059: return Unicode_Category_CF;
		case 0xE005A: return Unicode_Category_CF;
		case 0xE005B: return Unicode_Category_CF;
		case 0xE005C: return Unicode_Category_CF;
		case 0xE005D: return Unicode_Category_CF;
		case 0xE005E: return Unicode_Category_CF;
		case 0xE005F: return Unicode_Category_CF;
		case 0xE0060: return Unicode_Category_CF;
		case 0xE0061: return Unicode_Category_CF;
		case 0xE0062: return Unicode_Category_CF;
		case 0xE0063: return Unicode_Category_CF;
		case 0xE0064: return Unicode_Category_CF;
		case 0xE0065: return Unicode_Category_CF;
		case 0xE0066: return Unicode_Category_CF;
		case 0xE0067: return Unicode_Category_CF;
		case 0xE0068: return Unicode_Category_CF;
		case 0xE0069: return Unicode_Category_CF;
		case 0xE006A: return Unicode_Category_CF;
		case 0xE006B: return Unicode_Category_CF;
		case 0xE006C: return Unicode_Category_CF;
		case 0xE006D: return Unicode_Category_CF;
		case 0xE006E: return Unicode_Category_CF;
		case 0xE006F: return Unicode_Category_CF;
		case 0xE0070: return Unicode_Category_CF;
		case 0xE0071: return Unicode_Category_CF;
		case 0xE0072: return Unicode_Category_CF;
		case 0xE0073: return Unicode_Category_CF;
		case 0xE0074: return Unicode_Category_CF;
		case 0xE0075: return Unicode_Category_CF;
		case 0xE0076: return Unicode_Category_CF;
		case 0xE0077: return Unicode_Category_CF;
		case 0xE0078: return Unicode_Category_CF;
		case 0xE0079: return Unicode_Category_CF;
		case 0xE007A: return Unicode_Category_CF;
		case 0xE007B: return Unicode_Category_CF;
		case 0xE007C: return Unicode_Category_CF;
		case 0xE007D: return Unicode_Category_CF;
		case 0xE007E: return Unicode_Category_CF;
		case 0xE007F: return Unicode_Category_CF;
		case 0xE0100: return Unicode_Category_MN;
		case 0xE0101: return Unicode_Category_MN;
		case 0xE0102: return Unicode_Category_MN;
		case 0xE0103: return Unicode_Category_MN;
		case 0xE0104: return Unicode_Category_MN;
		case 0xE0105: return Unicode_Category_MN;
		case 0xE0106: return Unicode_Category_MN;
		case 0xE0107: return Unicode_Category_MN;
		case 0xE0108: return Unicode_Category_MN;
		case 0xE0109: return Unicode_Category_MN;
		case 0xE010A: return Unicode_Category_MN;
		case 0xE010B: return Unicode_Category_MN;
		case 0xE010C: return Unicode_Category_MN;
		case 0xE010D: return Unicode_Category_MN;
		case 0xE010E: return Unicode_Category_MN;
		case 0xE010F: return Unicode_Category_MN;
		case 0xE0110: return Unicode_Category_MN;
		case 0xE0111: return Unicode_Category_MN;
		case 0xE0112: return Unicode_Category_MN;
		case 0xE0113: return Unicode_Category_MN;
		case 0xE0114: return Unicode_Category_MN;
		case 0xE0115: return Unicode_Category_MN;
		case 0xE0116: return Unicode_Category_MN;
		case 0xE0117: return Unicode_Category_MN;
		case 0xE0118: return Unicode_Category_MN;
		case 0xE0119: return Unicode_Category_MN;
		case 0xE011A: return Unicode_Category_MN;
		case 0xE011B: return Unicode_Category_MN;
		case 0xE011C: return Unicode_Category_MN;
		case 0xE011D: return Unicode_Category_MN;
		case 0xE011E: return Unicode_Category_MN;
		case 0xE011F: return Unicode_Category_MN;
		case 0xE0120: return Unicode_Category_MN;
		case 0xE0121: return Unicode_Category_MN;
		case 0xE0122: return Unicode_Category_MN;
		case 0xE0123: return Unicode_Category_MN;
		case 0xE0124: return Unicode_Category_MN;
		case 0xE0125: return Unicode_Category_MN;
		case 0xE0126: return Unicode_Category_MN;
		case 0xE0127: return Unicode_Category_MN;
		case 0xE0128: return Unicode_Category_MN;
		case 0xE0129: return Unicode_Category_MN;
		case 0xE012A: return Unicode_Category_MN;
		case 0xE012B: return Unicode_Category_MN;
		case 0xE012C: return Unicode_Category_MN;
		case 0xE012D: return Unicode_Category_MN;
		case 0xE012E: return Unicode_Category_MN;
		case 0xE012F: return Unicode_Category_MN;
		case 0xE0130: return Unicode_Category_MN;
		case 0xE0131: return Unicode_Category_MN;
		case 0xE0132: return Unicode_Category_MN;
		case 0xE0133: return Unicode_Category_MN;
		case 0xE0134: return Unicode_Category_MN;
		case 0xE0135: return Unicode_Category_MN;
		case 0xE0136: return Unicode_Category_MN;
		case 0xE0137: return Unicode_Category_MN;
		case 0xE0138: return Unicode_Category_MN;
		case 0xE0139: return Unicode_Category_MN;
		case 0xE013A: return Unicode_Category_MN;
		case 0xE013B: return Unicode_Category_MN;
		case 0xE013C: return Unicode_Category_MN;
		case 0xE013D: return Unicode_Category_MN;
		case 0xE013E: return Unicode_Category_MN;
		case 0xE013F: return Unicode_Category_MN;
		case 0xE0140: return Unicode_Category_MN;
		case 0xE0141: return Unicode_Category_MN;
		case 0xE0142: return Unicode_Category_MN;
		case 0xE0143: return Unicode_Category_MN;
		case 0xE0144: return Unicode_Category_MN;
		case 0xE0145: return Unicode_Category_MN;
		case 0xE0146: return Unicode_Category_MN;
		case 0xE0147: return Unicode_Category_MN;
		case 0xE0148: return Unicode_Category_MN;
		case 0xE0149: return Unicode_Category_MN;
		case 0xE014A: return Unicode_Category_MN;
		case 0xE014B: return Unicode_Category_MN;
		case 0xE014C: return Unicode_Category_MN;
		case 0xE014D: return Unicode_Category_MN;
		case 0xE014E: return Unicode_Category_MN;
		case 0xE014F: return Unicode_Category_MN;
		case 0xE0150: return Unicode_Category_MN;
		case 0xE0151: return Unicode_Category_MN;
		case 0xE0152: return Unicode_Category_MN;
		case 0xE0153: return Unicode_Category_MN;
		case 0xE0154: return Unicode_Category_MN;
		case 0xE0155: return Unicode_Category_MN;
		case 0xE0156: return Unicode_Category_MN;
		case 0xE0157: return Unicode_Category_MN;
		case 0xE0158: return Unicode_Category_MN;
		case 0xE0159: return Unicode_Category_MN;
		case 0xE015A: return Unicode_Category_MN;
		case 0xE015B: return Unicode_Category_MN;
		case 0xE015C: return Unicode_Category_MN;
		case 0xE015D: return Unicode_Category_MN;
		case 0xE015E: return Unicode_Category_MN;
		case 0xE015F: return Unicode_Category_MN;
		case 0xE0160: return Unicode_Category_MN;
		case 0xE0161: return Unicode_Category_MN;
		case 0xE0162: return Unicode_Category_MN;
		case 0xE0163: return Unicode_Category_MN;
		case 0xE0164: return Unicode_Category_MN;
		case 0xE0165: return Unicode_Category_MN;
		case 0xE0166: return Unicode_Category_MN;
		case 0xE0167: return Unicode_Category_MN;
		case 0xE0168: return Unicode_Category_MN;
		case 0xE0169: return Unicode_Category_MN;
		case 0xE016A: return Unicode_Category_MN;
		case 0xE016B: return Unicode_Category_MN;
		case 0xE016C: return Unicode_Category_MN;
		case 0xE016D: return Unicode_Category_MN;
		case 0xE016E: return Unicode_Category_MN;
		case 0xE016F: return Unicode_Category_MN;
		case 0xE0170: return Unicode_Category_MN;
		case 0xE0171: return Unicode_Category_MN;
		case 0xE0172: return Unicode_Category_MN;
		case 0xE0173: return Unicode_Category_MN;
		case 0xE0174: return Unicode_Category_MN;
		case 0xE0175: return Unicode_Category_MN;
		case 0xE0176: return Unicode_Category_MN;
		case 0xE0177: return Unicode_Category_MN;
		case 0xE0178: return Unicode_Category_MN;
		case 0xE0179: return Unicode_Category_MN;
		case 0xE017A: return Unicode_Category_MN;
		case 0xE017B: return Unicode_Category_MN;
		case 0xE017C: return Unicode_Category_MN;
		case 0xE017D: return Unicode_Category_MN;
		case 0xE017E: return Unicode_Category_MN;
		case 0xE017F: return Unicode_Category_MN;
		case 0xE0180: return Unicode_Category_MN;
		case 0xE0181: return Unicode_Category_MN;
		case 0xE0182: return Unicode_Category_MN;
		case 0xE0183: return Unicode_Category_MN;
		case 0xE0184: return Unicode_Category_MN;
		case 0xE0185: return Unicode_Category_MN;
		case 0xE0186: return Unicode_Category_MN;
		case 0xE0187: return Unicode_Category_MN;
		case 0xE0188: return Unicode_Category_MN;
		case 0xE0189: return Unicode_Category_MN;
		case 0xE018A: return Unicode_Category_MN;
		case 0xE018B: return Unicode_Category_MN;
		case 0xE018C: return Unicode_Category_MN;
		case 0xE018D: return Unicode_Category_MN;
		case 0xE018E: return Unicode_Category_MN;
		case 0xE018F: return Unicode_Category_MN;
		case 0xE0190: return Unicode_Category_MN;
		case 0xE0191: return Unicode_Category_MN;
		case 0xE0192: return Unicode_Category_MN;
		case 0xE0193: return Unicode_Category_MN;
		case 0xE0194: return Unicode_Category_MN;
		case 0xE0195: return Unicode_Category_MN;
		case 0xE0196: return Unicode_Category_MN;
		case 0xE0197: return Unicode_Category_MN;
		case 0xE0198: return Unicode_Category_MN;
		case 0xE0199: return Unicode_Category_MN;
		case 0xE019A: return Unicode_Category_MN;
		case 0xE019B: return Unicode_Category_MN;
		case 0xE019C: return Unicode_Category_MN;
		case 0xE019D: return Unicode_Category_MN;
		case 0xE019E: return Unicode_Category_MN;
		case 0xE019F: return Unicode_Category_MN;
		case 0xE01A0: return Unicode_Category_MN;
		case 0xE01A1: return Unicode_Category_MN;
		case 0xE01A2: return Unicode_Category_MN;
		case 0xE01A3: return Unicode_Category_MN;
		case 0xE01A4: return Unicode_Category_MN;
		case 0xE01A5: return Unicode_Category_MN;
		case 0xE01A6: return Unicode_Category_MN;
		case 0xE01A7: return Unicode_Category_MN;
		case 0xE01A8: return Unicode_Category_MN;
		case 0xE01A9: return Unicode_Category_MN;
		case 0xE01AA: return Unicode_Category_MN;
		case 0xE01AB: return Unicode_Category_MN;
		case 0xE01AC: return Unicode_Category_MN;
		case 0xE01AD: return Unicode_Category_MN;
		case 0xE01AE: return Unicode_Category_MN;
		case 0xE01AF: return Unicode_Category_MN;
		case 0xE01B0: return Unicode_Category_MN;
		case 0xE01B1: return Unicode_Category_MN;
		case 0xE01B2: return Unicode_Category_MN;
		case 0xE01B3: return Unicode_Category_MN;
		case 0xE01B4: return Unicode_Category_MN;
		case 0xE01B5: return Unicode_Category_MN;
		case 0xE01B6: return Unicode_Category_MN;
		case 0xE01B7: return Unicode_Category_MN;
		case 0xE01B8: return Unicode_Category_MN;
		case 0xE01B9: return Unicode_Category_MN;
		case 0xE01BA: return Unicode_Category_MN;
		case 0xE01BB: return Unicode_Category_MN;
		case 0xE01BC: return Unicode_Category_MN;
		case 0xE01BD: return Unicode_Category_MN;
		case 0xE01BE: return Unicode_Category_MN;
		case 0xE01BF: return Unicode_Category_MN;
		case 0xE01C0: return Unicode_Category_MN;
		case 0xE01C1: return Unicode_Category_MN;
		case 0xE01C2: return Unicode_Category_MN;
		case 0xE01C3: return Unicode_Category_MN;
		case 0xE01C4: return Unicode_Category_MN;
		case 0xE01C5: return Unicode_Category_MN;
		case 0xE01C6: return Unicode_Category_MN;
		case 0xE01C7: return Unicode_Category_MN;
		case 0xE01C8: return Unicode_Category_MN;
		case 0xE01C9: return Unicode_Category_MN;
		case 0xE01CA: return Unicode_Category_MN;
		case 0xE01CB: return Unicode_Category_MN;
		case 0xE01CC: return Unicode_Category_MN;
		case 0xE01CD: return Unicode_Category_MN;
		case 0xE01CE: return Unicode_Category_MN;
		case 0xE01CF: return Unicode_Category_MN;
		case 0xE01D0: return Unicode_Category_MN;
		case 0xE01D1: return Unicode_Category_MN;
		case 0xE01D2: return Unicode_Category_MN;
		case 0xE01D3: return Unicode_Category_MN;
		case 0xE01D4: return Unicode_Category_MN;
		case 0xE01D5: return Unicode_Category_MN;
		case 0xE01D6: return Unicode_Category_MN;
		case 0xE01D7: return Unicode_Category_MN;
		case 0xE01D8: return Unicode_Category_MN;
		case 0xE01D9: return Unicode_Category_MN;
		case 0xE01DA: return Unicode_Category_MN;
		case 0xE01DB: return Unicode_Category_MN;
		case 0xE01DC: return Unicode_Category_MN;
		case 0xE01DD: return Unicode_Category_MN;
		case 0xE01DE: return Unicode_Category_MN;
		case 0xE01DF: return Unicode_Category_MN;
		case 0xE01E0: return Unicode_Category_MN;
		case 0xE01E1: return Unicode_Category_MN;
		case 0xE01E2: return Unicode_Category_MN;
		case 0xE01E3: return Unicode_Category_MN;
		case 0xE01E4: return Unicode_Category_MN;
		case 0xE01E5: return Unicode_Category_MN;
		case 0xE01E6: return Unicode_Category_MN;
		case 0xE01E7: return Unicode_Category_MN;
		case 0xE01E8: return Unicode_Category_MN;
		case 0xE01E9: return Unicode_Category_MN;
		case 0xE01EA: return Unicode_Category_MN;
		case 0xE01EB: return Unicode_Category_MN;
		case 0xE01EC: return Unicode_Category_MN;
		case 0xE01ED: return Unicode_Category_MN;
		case 0xE01EE: return Unicode_Category_MN;
		case 0xE01EF: return Unicode_Category_MN;
		case 0xF0000: return Unicode_Category_CO;
		case 0xFFFFD: return Unicode_Category_CO;
		case 0x100000: return Unicode_Category_CO;
		case 0x10FFFD: return Unicode_Category_CO;
	}
	return Unicode_Category_UNKNOWN;
}

