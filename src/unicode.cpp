#include "unicode.h"

Unicode_Script unicode_script(uint32_t codepoint) {
	if (codepoint >= 0x0000 && codepoint <= 0x001F) return Unicode_Script_COMMON;
	if (codepoint == 0x0020) return Unicode_Script_COMMON;
	if (codepoint >= 0x0021 && codepoint <= 0x0023) return Unicode_Script_COMMON;
	if (codepoint == 0x0024) return Unicode_Script_COMMON;
	if (codepoint >= 0x0025 && codepoint <= 0x0027) return Unicode_Script_COMMON;
	if (codepoint == 0x0028) return Unicode_Script_COMMON;
	if (codepoint == 0x0029) return Unicode_Script_COMMON;
	if (codepoint == 0x002A) return Unicode_Script_COMMON;
	if (codepoint == 0x002B) return Unicode_Script_COMMON;
	if (codepoint == 0x002C) return Unicode_Script_COMMON;
	if (codepoint == 0x002D) return Unicode_Script_COMMON;
	if (codepoint >= 0x002E && codepoint <= 0x002F) return Unicode_Script_COMMON;
	if (codepoint >= 0x0030 && codepoint <= 0x0039) return Unicode_Script_COMMON;
	if (codepoint >= 0x003A && codepoint <= 0x003B) return Unicode_Script_COMMON;
	if (codepoint >= 0x003C && codepoint <= 0x003E) return Unicode_Script_COMMON;
	if (codepoint >= 0x003F && codepoint <= 0x0040) return Unicode_Script_COMMON;
	if (codepoint == 0x005B) return Unicode_Script_COMMON;
	if (codepoint == 0x005C) return Unicode_Script_COMMON;
	if (codepoint == 0x005D) return Unicode_Script_COMMON;
	if (codepoint == 0x005E) return Unicode_Script_COMMON;
	if (codepoint == 0x005F) return Unicode_Script_COMMON;
	if (codepoint == 0x0060) return Unicode_Script_COMMON;
	if (codepoint == 0x007B) return Unicode_Script_COMMON;
	if (codepoint == 0x007C) return Unicode_Script_COMMON;
	if (codepoint == 0x007D) return Unicode_Script_COMMON;
	if (codepoint == 0x007E) return Unicode_Script_COMMON;
	if (codepoint >= 0x007F && codepoint <= 0x009F) return Unicode_Script_COMMON;
	if (codepoint == 0x00A0) return Unicode_Script_COMMON;
	if (codepoint == 0x00A1) return Unicode_Script_COMMON;
	if (codepoint >= 0x00A2 && codepoint <= 0x00A5) return Unicode_Script_COMMON;
	if (codepoint == 0x00A6) return Unicode_Script_COMMON;
	if (codepoint == 0x00A7) return Unicode_Script_COMMON;
	if (codepoint == 0x00A8) return Unicode_Script_COMMON;
	if (codepoint == 0x00A9) return Unicode_Script_COMMON;
	if (codepoint == 0x00AB) return Unicode_Script_COMMON;
	if (codepoint == 0x00AC) return Unicode_Script_COMMON;
	if (codepoint == 0x00AD) return Unicode_Script_COMMON;
	if (codepoint == 0x00AE) return Unicode_Script_COMMON;
	if (codepoint == 0x00AF) return Unicode_Script_COMMON;
	if (codepoint == 0x00B0) return Unicode_Script_COMMON;
	if (codepoint == 0x00B1) return Unicode_Script_COMMON;
	if (codepoint >= 0x00B2 && codepoint <= 0x00B3) return Unicode_Script_COMMON;
	if (codepoint == 0x00B4) return Unicode_Script_COMMON;
	if (codepoint == 0x00B5) return Unicode_Script_COMMON;
	if (codepoint >= 0x00B6 && codepoint <= 0x00B7) return Unicode_Script_COMMON;
	if (codepoint == 0x00B8) return Unicode_Script_COMMON;
	if (codepoint == 0x00B9) return Unicode_Script_COMMON;
	if (codepoint == 0x00BB) return Unicode_Script_COMMON;
	if (codepoint >= 0x00BC && codepoint <= 0x00BE) return Unicode_Script_COMMON;
	if (codepoint == 0x00BF) return Unicode_Script_COMMON;
	if (codepoint == 0x00D7) return Unicode_Script_COMMON;
	if (codepoint == 0x00F7) return Unicode_Script_COMMON;
	if (codepoint >= 0x02B9 && codepoint <= 0x02C1) return Unicode_Script_COMMON;
	if (codepoint >= 0x02C2 && codepoint <= 0x02C5) return Unicode_Script_COMMON;
	if (codepoint >= 0x02C6 && codepoint <= 0x02D1) return Unicode_Script_COMMON;
	if (codepoint >= 0x02D2 && codepoint <= 0x02DF) return Unicode_Script_COMMON;
	if (codepoint >= 0x02E5 && codepoint <= 0x02E9) return Unicode_Script_COMMON;
	if (codepoint == 0x02EC) return Unicode_Script_COMMON;
	if (codepoint == 0x02ED) return Unicode_Script_COMMON;
	if (codepoint == 0x02EE) return Unicode_Script_COMMON;
	if (codepoint >= 0x02EF && codepoint <= 0x02FF) return Unicode_Script_COMMON;
	if (codepoint == 0x0374) return Unicode_Script_COMMON;
	if (codepoint == 0x037E) return Unicode_Script_COMMON;
	if (codepoint == 0x0385) return Unicode_Script_COMMON;
	if (codepoint == 0x0387) return Unicode_Script_COMMON;
	if (codepoint == 0x0605) return Unicode_Script_COMMON;
	if (codepoint == 0x060C) return Unicode_Script_COMMON;
	if (codepoint == 0x061B) return Unicode_Script_COMMON;
	if (codepoint == 0x061F) return Unicode_Script_COMMON;
	if (codepoint == 0x0640) return Unicode_Script_COMMON;
	if (codepoint == 0x06DD) return Unicode_Script_COMMON;
	if (codepoint == 0x08E2) return Unicode_Script_COMMON;
	if (codepoint >= 0x0964 && codepoint <= 0x0965) return Unicode_Script_COMMON;
	if (codepoint == 0x0E3F) return Unicode_Script_COMMON;
	if (codepoint >= 0x0FD5 && codepoint <= 0x0FD8) return Unicode_Script_COMMON;
	if (codepoint == 0x10FB) return Unicode_Script_COMMON;
	if (codepoint >= 0x16EB && codepoint <= 0x16ED) return Unicode_Script_COMMON;
	if (codepoint >= 0x1735 && codepoint <= 0x1736) return Unicode_Script_COMMON;
	if (codepoint >= 0x1802 && codepoint <= 0x1803) return Unicode_Script_COMMON;
	if (codepoint == 0x1805) return Unicode_Script_COMMON;
	if (codepoint == 0x1CD3) return Unicode_Script_COMMON;
	if (codepoint == 0x1CE1) return Unicode_Script_COMMON;
	if (codepoint >= 0x1CE9 && codepoint <= 0x1CEC) return Unicode_Script_COMMON;
	if (codepoint >= 0x1CEE && codepoint <= 0x1CF3) return Unicode_Script_COMMON;
	if (codepoint >= 0x1CF5 && codepoint <= 0x1CF6) return Unicode_Script_COMMON;
	if (codepoint == 0x1CF7) return Unicode_Script_COMMON;
	if (codepoint == 0x1CFA) return Unicode_Script_COMMON;
	if (codepoint >= 0x2000 && codepoint <= 0x200A) return Unicode_Script_COMMON;
	if (codepoint == 0x200B) return Unicode_Script_COMMON;
	if (codepoint >= 0x200E && codepoint <= 0x200F) return Unicode_Script_COMMON;
	if (codepoint >= 0x2010 && codepoint <= 0x2015) return Unicode_Script_COMMON;
	if (codepoint >= 0x2016 && codepoint <= 0x2017) return Unicode_Script_COMMON;
	if (codepoint == 0x2018) return Unicode_Script_COMMON;
	if (codepoint == 0x2019) return Unicode_Script_COMMON;
	if (codepoint == 0x201A) return Unicode_Script_COMMON;
	if (codepoint >= 0x201B && codepoint <= 0x201C) return Unicode_Script_COMMON;
	if (codepoint == 0x201D) return Unicode_Script_COMMON;
	if (codepoint == 0x201E) return Unicode_Script_COMMON;
	if (codepoint == 0x201F) return Unicode_Script_COMMON;
	if (codepoint >= 0x2020 && codepoint <= 0x2027) return Unicode_Script_COMMON;
	if (codepoint == 0x2028) return Unicode_Script_COMMON;
	if (codepoint == 0x2029) return Unicode_Script_COMMON;
	if (codepoint >= 0x202A && codepoint <= 0x202E) return Unicode_Script_COMMON;
	if (codepoint == 0x202F) return Unicode_Script_COMMON;
	if (codepoint >= 0x2030 && codepoint <= 0x2038) return Unicode_Script_COMMON;
	if (codepoint == 0x2039) return Unicode_Script_COMMON;
	if (codepoint == 0x203A) return Unicode_Script_COMMON;
	if (codepoint >= 0x203B && codepoint <= 0x203E) return Unicode_Script_COMMON;
	if (codepoint >= 0x203F && codepoint <= 0x2040) return Unicode_Script_COMMON;
	if (codepoint >= 0x2041 && codepoint <= 0x2043) return Unicode_Script_COMMON;
	if (codepoint == 0x2044) return Unicode_Script_COMMON;
	if (codepoint == 0x2045) return Unicode_Script_COMMON;
	if (codepoint == 0x2046) return Unicode_Script_COMMON;
	if (codepoint >= 0x2047 && codepoint <= 0x2051) return Unicode_Script_COMMON;
	if (codepoint == 0x2052) return Unicode_Script_COMMON;
	if (codepoint == 0x2053) return Unicode_Script_COMMON;
	if (codepoint == 0x2054) return Unicode_Script_COMMON;
	if (codepoint >= 0x2055 && codepoint <= 0x205E) return Unicode_Script_COMMON;
	if (codepoint == 0x205F) return Unicode_Script_COMMON;
	if (codepoint >= 0x2060 && codepoint <= 0x2064) return Unicode_Script_COMMON;
	if (codepoint >= 0x2066 && codepoint <= 0x206F) return Unicode_Script_COMMON;
	if (codepoint == 0x2070) return Unicode_Script_COMMON;
	if (codepoint >= 0x2074 && codepoint <= 0x2079) return Unicode_Script_COMMON;
	if (codepoint >= 0x207A && codepoint <= 0x207C) return Unicode_Script_COMMON;
	if (codepoint == 0x207D) return Unicode_Script_COMMON;
	if (codepoint == 0x207E) return Unicode_Script_COMMON;
	if (codepoint >= 0x2080 && codepoint <= 0x2089) return Unicode_Script_COMMON;
	if (codepoint >= 0x208A && codepoint <= 0x208C) return Unicode_Script_COMMON;
	if (codepoint == 0x208D) return Unicode_Script_COMMON;
	if (codepoint == 0x208E) return Unicode_Script_COMMON;
	if (codepoint >= 0x20A0 && codepoint <= 0x20BF) return Unicode_Script_COMMON;
	if (codepoint >= 0x2100 && codepoint <= 0x2101) return Unicode_Script_COMMON;
	if (codepoint == 0x2102) return Unicode_Script_COMMON;
	if (codepoint >= 0x2103 && codepoint <= 0x2106) return Unicode_Script_COMMON;
	if (codepoint == 0x2107) return Unicode_Script_COMMON;
	if (codepoint >= 0x2108 && codepoint <= 0x2109) return Unicode_Script_COMMON;
	if (codepoint >= 0x210A && codepoint <= 0x2113) return Unicode_Script_COMMON;
	if (codepoint == 0x2114) return Unicode_Script_COMMON;
	if (codepoint == 0x2115) return Unicode_Script_COMMON;
	if (codepoint >= 0x2116 && codepoint <= 0x2117) return Unicode_Script_COMMON;
	if (codepoint == 0x2118) return Unicode_Script_COMMON;
	if (codepoint >= 0x2119 && codepoint <= 0x211D) return Unicode_Script_COMMON;
	if (codepoint >= 0x211E && codepoint <= 0x2123) return Unicode_Script_COMMON;
	if (codepoint == 0x2124) return Unicode_Script_COMMON;
	if (codepoint == 0x2125) return Unicode_Script_COMMON;
	if (codepoint == 0x2127) return Unicode_Script_COMMON;
	if (codepoint == 0x2128) return Unicode_Script_COMMON;
	if (codepoint == 0x2129) return Unicode_Script_COMMON;
	if (codepoint >= 0x212C && codepoint <= 0x212D) return Unicode_Script_COMMON;
	if (codepoint == 0x212E) return Unicode_Script_COMMON;
	if (codepoint >= 0x212F && codepoint <= 0x2131) return Unicode_Script_COMMON;
	if (codepoint >= 0x2133 && codepoint <= 0x2134) return Unicode_Script_COMMON;
	if (codepoint >= 0x2135 && codepoint <= 0x2138) return Unicode_Script_COMMON;
	if (codepoint == 0x2139) return Unicode_Script_COMMON;
	if (codepoint >= 0x213A && codepoint <= 0x213B) return Unicode_Script_COMMON;
	if (codepoint >= 0x213C && codepoint <= 0x213F) return Unicode_Script_COMMON;
	if (codepoint >= 0x2140 && codepoint <= 0x2144) return Unicode_Script_COMMON;
	if (codepoint >= 0x2145 && codepoint <= 0x2149) return Unicode_Script_COMMON;
	if (codepoint == 0x214A) return Unicode_Script_COMMON;
	if (codepoint == 0x214B) return Unicode_Script_COMMON;
	if (codepoint >= 0x214C && codepoint <= 0x214D) return Unicode_Script_COMMON;
	if (codepoint == 0x214F) return Unicode_Script_COMMON;
	if (codepoint >= 0x2150 && codepoint <= 0x215F) return Unicode_Script_COMMON;
	if (codepoint == 0x2189) return Unicode_Script_COMMON;
	if (codepoint >= 0x218A && codepoint <= 0x218B) return Unicode_Script_COMMON;
	if (codepoint >= 0x2190 && codepoint <= 0x2194) return Unicode_Script_COMMON;
	if (codepoint >= 0x2195 && codepoint <= 0x2199) return Unicode_Script_COMMON;
	if (codepoint >= 0x219A && codepoint <= 0x219B) return Unicode_Script_COMMON;
	if (codepoint >= 0x219C && codepoint <= 0x219F) return Unicode_Script_COMMON;
	if (codepoint == 0x21A0) return Unicode_Script_COMMON;
	if (codepoint >= 0x21A1 && codepoint <= 0x21A2) return Unicode_Script_COMMON;
	if (codepoint == 0x21A3) return Unicode_Script_COMMON;
	if (codepoint >= 0x21A4 && codepoint <= 0x21A5) return Unicode_Script_COMMON;
	if (codepoint == 0x21A6) return Unicode_Script_COMMON;
	if (codepoint >= 0x21A7 && codepoint <= 0x21AD) return Unicode_Script_COMMON;
	if (codepoint == 0x21AE) return Unicode_Script_COMMON;
	if (codepoint >= 0x21AF && codepoint <= 0x21CD) return Unicode_Script_COMMON;
	if (codepoint >= 0x21CE && codepoint <= 0x21CF) return Unicode_Script_COMMON;
	if (codepoint >= 0x21D0 && codepoint <= 0x21D1) return Unicode_Script_COMMON;
	if (codepoint == 0x21D2) return Unicode_Script_COMMON;
	if (codepoint == 0x21D3) return Unicode_Script_COMMON;
	if (codepoint == 0x21D4) return Unicode_Script_COMMON;
	if (codepoint >= 0x21D5 && codepoint <= 0x21F3) return Unicode_Script_COMMON;
	if (codepoint >= 0x21F4 && codepoint <= 0x22FF) return Unicode_Script_COMMON;
	if (codepoint >= 0x2300 && codepoint <= 0x2307) return Unicode_Script_COMMON;
	if (codepoint == 0x2308) return Unicode_Script_COMMON;
	if (codepoint == 0x2309) return Unicode_Script_COMMON;
	if (codepoint == 0x230A) return Unicode_Script_COMMON;
	if (codepoint == 0x230B) return Unicode_Script_COMMON;
	if (codepoint >= 0x230C && codepoint <= 0x231F) return Unicode_Script_COMMON;
	if (codepoint >= 0x2320 && codepoint <= 0x2321) return Unicode_Script_COMMON;
	if (codepoint >= 0x2322 && codepoint <= 0x2328) return Unicode_Script_COMMON;
	if (codepoint == 0x2329) return Unicode_Script_COMMON;
	if (codepoint == 0x232A) return Unicode_Script_COMMON;
	if (codepoint >= 0x232B && codepoint <= 0x237B) return Unicode_Script_COMMON;
	if (codepoint == 0x237C) return Unicode_Script_COMMON;
	if (codepoint >= 0x237D && codepoint <= 0x239A) return Unicode_Script_COMMON;
	if (codepoint >= 0x239B && codepoint <= 0x23B3) return Unicode_Script_COMMON;
	if (codepoint >= 0x23B4 && codepoint <= 0x23DB) return Unicode_Script_COMMON;
	if (codepoint >= 0x23DC && codepoint <= 0x23E1) return Unicode_Script_COMMON;
	if (codepoint >= 0x23E2 && codepoint <= 0x2426) return Unicode_Script_COMMON;
	if (codepoint >= 0x2440 && codepoint <= 0x244A) return Unicode_Script_COMMON;
	if (codepoint >= 0x2460 && codepoint <= 0x249B) return Unicode_Script_COMMON;
	if (codepoint >= 0x249C && codepoint <= 0x24E9) return Unicode_Script_COMMON;
	if (codepoint >= 0x24EA && codepoint <= 0x24FF) return Unicode_Script_COMMON;
	if (codepoint >= 0x2500 && codepoint <= 0x25B6) return Unicode_Script_COMMON;
	if (codepoint == 0x25B7) return Unicode_Script_COMMON;
	if (codepoint >= 0x25B8 && codepoint <= 0x25C0) return Unicode_Script_COMMON;
	if (codepoint == 0x25C1) return Unicode_Script_COMMON;
	if (codepoint >= 0x25C2 && codepoint <= 0x25F7) return Unicode_Script_COMMON;
	if (codepoint >= 0x25F8 && codepoint <= 0x25FF) return Unicode_Script_COMMON;
	if (codepoint >= 0x2600 && codepoint <= 0x266E) return Unicode_Script_COMMON;
	if (codepoint == 0x266F) return Unicode_Script_COMMON;
	if (codepoint >= 0x2670 && codepoint <= 0x2767) return Unicode_Script_COMMON;
	if (codepoint == 0x2768) return Unicode_Script_COMMON;
	if (codepoint == 0x2769) return Unicode_Script_COMMON;
	if (codepoint == 0x276A) return Unicode_Script_COMMON;
	if (codepoint == 0x276B) return Unicode_Script_COMMON;
	if (codepoint == 0x276C) return Unicode_Script_COMMON;
	if (codepoint == 0x276D) return Unicode_Script_COMMON;
	if (codepoint == 0x276E) return Unicode_Script_COMMON;
	if (codepoint == 0x276F) return Unicode_Script_COMMON;
	if (codepoint == 0x2770) return Unicode_Script_COMMON;
	if (codepoint == 0x2771) return Unicode_Script_COMMON;
	if (codepoint == 0x2772) return Unicode_Script_COMMON;
	if (codepoint == 0x2773) return Unicode_Script_COMMON;
	if (codepoint == 0x2774) return Unicode_Script_COMMON;
	if (codepoint == 0x2775) return Unicode_Script_COMMON;
	if (codepoint >= 0x2776 && codepoint <= 0x2793) return Unicode_Script_COMMON;
	if (codepoint >= 0x2794 && codepoint <= 0x27BF) return Unicode_Script_COMMON;
	if (codepoint >= 0x27C0 && codepoint <= 0x27C4) return Unicode_Script_COMMON;
	if (codepoint == 0x27C5) return Unicode_Script_COMMON;
	if (codepoint == 0x27C6) return Unicode_Script_COMMON;
	if (codepoint >= 0x27C7 && codepoint <= 0x27E5) return Unicode_Script_COMMON;
	if (codepoint == 0x27E6) return Unicode_Script_COMMON;
	if (codepoint == 0x27E7) return Unicode_Script_COMMON;
	if (codepoint == 0x27E8) return Unicode_Script_COMMON;
	if (codepoint == 0x27E9) return Unicode_Script_COMMON;
	if (codepoint == 0x27EA) return Unicode_Script_COMMON;
	if (codepoint == 0x27EB) return Unicode_Script_COMMON;
	if (codepoint == 0x27EC) return Unicode_Script_COMMON;
	if (codepoint == 0x27ED) return Unicode_Script_COMMON;
	if (codepoint == 0x27EE) return Unicode_Script_COMMON;
	if (codepoint == 0x27EF) return Unicode_Script_COMMON;
	if (codepoint >= 0x27F0 && codepoint <= 0x27FF) return Unicode_Script_COMMON;
	if (codepoint >= 0x2900 && codepoint <= 0x2982) return Unicode_Script_COMMON;
	if (codepoint == 0x2983) return Unicode_Script_COMMON;
	if (codepoint == 0x2984) return Unicode_Script_COMMON;
	if (codepoint == 0x2985) return Unicode_Script_COMMON;
	if (codepoint == 0x2986) return Unicode_Script_COMMON;
	if (codepoint == 0x2987) return Unicode_Script_COMMON;
	if (codepoint == 0x2988) return Unicode_Script_COMMON;
	if (codepoint == 0x2989) return Unicode_Script_COMMON;
	if (codepoint == 0x298A) return Unicode_Script_COMMON;
	if (codepoint == 0x298B) return Unicode_Script_COMMON;
	if (codepoint == 0x298C) return Unicode_Script_COMMON;
	if (codepoint == 0x298D) return Unicode_Script_COMMON;
	if (codepoint == 0x298E) return Unicode_Script_COMMON;
	if (codepoint == 0x298F) return Unicode_Script_COMMON;
	if (codepoint == 0x2990) return Unicode_Script_COMMON;
	if (codepoint == 0x2991) return Unicode_Script_COMMON;
	if (codepoint == 0x2992) return Unicode_Script_COMMON;
	if (codepoint == 0x2993) return Unicode_Script_COMMON;
	if (codepoint == 0x2994) return Unicode_Script_COMMON;
	if (codepoint == 0x2995) return Unicode_Script_COMMON;
	if (codepoint == 0x2996) return Unicode_Script_COMMON;
	if (codepoint == 0x2997) return Unicode_Script_COMMON;
	if (codepoint == 0x2998) return Unicode_Script_COMMON;
	if (codepoint >= 0x2999 && codepoint <= 0x29D7) return Unicode_Script_COMMON;
	if (codepoint == 0x29D8) return Unicode_Script_COMMON;
	if (codepoint == 0x29D9) return Unicode_Script_COMMON;
	if (codepoint == 0x29DA) return Unicode_Script_COMMON;
	if (codepoint == 0x29DB) return Unicode_Script_COMMON;
	if (codepoint >= 0x29DC && codepoint <= 0x29FB) return Unicode_Script_COMMON;
	if (codepoint == 0x29FC) return Unicode_Script_COMMON;
	if (codepoint == 0x29FD) return Unicode_Script_COMMON;
	if (codepoint >= 0x29FE && codepoint <= 0x2AFF) return Unicode_Script_COMMON;
	if (codepoint >= 0x2B00 && codepoint <= 0x2B2F) return Unicode_Script_COMMON;
	if (codepoint >= 0x2B30 && codepoint <= 0x2B44) return Unicode_Script_COMMON;
	if (codepoint >= 0x2B45 && codepoint <= 0x2B46) return Unicode_Script_COMMON;
	if (codepoint >= 0x2B47 && codepoint <= 0x2B4C) return Unicode_Script_COMMON;
	if (codepoint >= 0x2B4D && codepoint <= 0x2B73) return Unicode_Script_COMMON;
	if (codepoint >= 0x2B76 && codepoint <= 0x2B95) return Unicode_Script_COMMON;
	if (codepoint >= 0x2B97 && codepoint <= 0x2BFF) return Unicode_Script_COMMON;
	if (codepoint >= 0x2E00 && codepoint <= 0x2E01) return Unicode_Script_COMMON;
	if (codepoint == 0x2E02) return Unicode_Script_COMMON;
	if (codepoint == 0x2E03) return Unicode_Script_COMMON;
	if (codepoint == 0x2E04) return Unicode_Script_COMMON;
	if (codepoint == 0x2E05) return Unicode_Script_COMMON;
	if (codepoint >= 0x2E06 && codepoint <= 0x2E08) return Unicode_Script_COMMON;
	if (codepoint == 0x2E09) return Unicode_Script_COMMON;
	if (codepoint == 0x2E0A) return Unicode_Script_COMMON;
	if (codepoint == 0x2E0B) return Unicode_Script_COMMON;
	if (codepoint == 0x2E0C) return Unicode_Script_COMMON;
	if (codepoint == 0x2E0D) return Unicode_Script_COMMON;
	if (codepoint >= 0x2E0E && codepoint <= 0x2E16) return Unicode_Script_COMMON;
	if (codepoint == 0x2E17) return Unicode_Script_COMMON;
	if (codepoint >= 0x2E18 && codepoint <= 0x2E19) return Unicode_Script_COMMON;
	if (codepoint == 0x2E1A) return Unicode_Script_COMMON;
	if (codepoint == 0x2E1B) return Unicode_Script_COMMON;
	if (codepoint == 0x2E1C) return Unicode_Script_COMMON;
	if (codepoint == 0x2E1D) return Unicode_Script_COMMON;
	if (codepoint >= 0x2E1E && codepoint <= 0x2E1F) return Unicode_Script_COMMON;
	if (codepoint == 0x2E20) return Unicode_Script_COMMON;
	if (codepoint == 0x2E21) return Unicode_Script_COMMON;
	if (codepoint == 0x2E22) return Unicode_Script_COMMON;
	if (codepoint == 0x2E23) return Unicode_Script_COMMON;
	if (codepoint == 0x2E24) return Unicode_Script_COMMON;
	if (codepoint == 0x2E25) return Unicode_Script_COMMON;
	if (codepoint == 0x2E26) return Unicode_Script_COMMON;
	if (codepoint == 0x2E27) return Unicode_Script_COMMON;
	if (codepoint == 0x2E28) return Unicode_Script_COMMON;
	if (codepoint == 0x2E29) return Unicode_Script_COMMON;
	if (codepoint >= 0x2E2A && codepoint <= 0x2E2E) return Unicode_Script_COMMON;
	if (codepoint == 0x2E2F) return Unicode_Script_COMMON;
	if (codepoint >= 0x2E30 && codepoint <= 0x2E39) return Unicode_Script_COMMON;
	if (codepoint >= 0x2E3A && codepoint <= 0x2E3B) return Unicode_Script_COMMON;
	if (codepoint >= 0x2E3C && codepoint <= 0x2E3F) return Unicode_Script_COMMON;
	if (codepoint == 0x2E40) return Unicode_Script_COMMON;
	if (codepoint == 0x2E41) return Unicode_Script_COMMON;
	if (codepoint == 0x2E42) return Unicode_Script_COMMON;
	if (codepoint >= 0x2E43 && codepoint <= 0x2E4F) return Unicode_Script_COMMON;
	if (codepoint >= 0x2E50 && codepoint <= 0x2E51) return Unicode_Script_COMMON;
	if (codepoint == 0x2E52) return Unicode_Script_COMMON;
	if (codepoint >= 0x2FF0 && codepoint <= 0x2FFB) return Unicode_Script_COMMON;
	if (codepoint == 0x3000) return Unicode_Script_COMMON;
	if (codepoint >= 0x3001 && codepoint <= 0x3003) return Unicode_Script_COMMON;
	if (codepoint == 0x3004) return Unicode_Script_COMMON;
	if (codepoint == 0x3006) return Unicode_Script_COMMON;
	if (codepoint == 0x3008) return Unicode_Script_COMMON;
	if (codepoint == 0x3009) return Unicode_Script_COMMON;
	if (codepoint == 0x300A) return Unicode_Script_COMMON;
	if (codepoint == 0x300B) return Unicode_Script_COMMON;
	if (codepoint == 0x300C) return Unicode_Script_COMMON;
	if (codepoint == 0x300D) return Unicode_Script_COMMON;
	if (codepoint == 0x300E) return Unicode_Script_COMMON;
	if (codepoint == 0x300F) return Unicode_Script_COMMON;
	if (codepoint == 0x3010) return Unicode_Script_COMMON;
	if (codepoint == 0x3011) return Unicode_Script_COMMON;
	if (codepoint >= 0x3012 && codepoint <= 0x3013) return Unicode_Script_COMMON;
	if (codepoint == 0x3014) return Unicode_Script_COMMON;
	if (codepoint == 0x3015) return Unicode_Script_COMMON;
	if (codepoint == 0x3016) return Unicode_Script_COMMON;
	if (codepoint == 0x3017) return Unicode_Script_COMMON;
	if (codepoint == 0x3018) return Unicode_Script_COMMON;
	if (codepoint == 0x3019) return Unicode_Script_COMMON;
	if (codepoint == 0x301A) return Unicode_Script_COMMON;
	if (codepoint == 0x301B) return Unicode_Script_COMMON;
	if (codepoint == 0x301C) return Unicode_Script_COMMON;
	if (codepoint == 0x301D) return Unicode_Script_COMMON;
	if (codepoint >= 0x301E && codepoint <= 0x301F) return Unicode_Script_COMMON;
	if (codepoint == 0x3020) return Unicode_Script_COMMON;
	if (codepoint == 0x3030) return Unicode_Script_COMMON;
	if (codepoint >= 0x3031 && codepoint <= 0x3035) return Unicode_Script_COMMON;
	if (codepoint >= 0x3036 && codepoint <= 0x3037) return Unicode_Script_COMMON;
	if (codepoint == 0x303C) return Unicode_Script_COMMON;
	if (codepoint == 0x303D) return Unicode_Script_COMMON;
	if (codepoint >= 0x303E && codepoint <= 0x303F) return Unicode_Script_COMMON;
	if (codepoint >= 0x309B && codepoint <= 0x309C) return Unicode_Script_COMMON;
	if (codepoint == 0x30A0) return Unicode_Script_COMMON;
	if (codepoint == 0x30FB) return Unicode_Script_COMMON;
	if (codepoint == 0x30FC) return Unicode_Script_COMMON;
	if (codepoint >= 0x3190 && codepoint <= 0x3191) return Unicode_Script_COMMON;
	if (codepoint >= 0x3192 && codepoint <= 0x3195) return Unicode_Script_COMMON;
	if (codepoint >= 0x3196 && codepoint <= 0x319F) return Unicode_Script_COMMON;
	if (codepoint >= 0x31C0 && codepoint <= 0x31E3) return Unicode_Script_COMMON;
	if (codepoint >= 0x3220 && codepoint <= 0x3229) return Unicode_Script_COMMON;
	if (codepoint >= 0x322A && codepoint <= 0x3247) return Unicode_Script_COMMON;
	if (codepoint >= 0x3248 && codepoint <= 0x324F) return Unicode_Script_COMMON;
	if (codepoint == 0x3250) return Unicode_Script_COMMON;
	if (codepoint >= 0x3251 && codepoint <= 0x325F) return Unicode_Script_COMMON;
	if (codepoint == 0x327F) return Unicode_Script_COMMON;
	if (codepoint >= 0x3280 && codepoint <= 0x3289) return Unicode_Script_COMMON;
	if (codepoint >= 0x328A && codepoint <= 0x32B0) return Unicode_Script_COMMON;
	if (codepoint >= 0x32B1 && codepoint <= 0x32BF) return Unicode_Script_COMMON;
	if (codepoint >= 0x32C0 && codepoint <= 0x32CF) return Unicode_Script_COMMON;
	if (codepoint == 0x32FF) return Unicode_Script_COMMON;
	if (codepoint >= 0x3358 && codepoint <= 0x33FF) return Unicode_Script_COMMON;
	if (codepoint >= 0x4DC0 && codepoint <= 0x4DFF) return Unicode_Script_COMMON;
	if (codepoint >= 0xA700 && codepoint <= 0xA716) return Unicode_Script_COMMON;
	if (codepoint >= 0xA717 && codepoint <= 0xA71F) return Unicode_Script_COMMON;
	if (codepoint >= 0xA720 && codepoint <= 0xA721) return Unicode_Script_COMMON;
	if (codepoint == 0xA788) return Unicode_Script_COMMON;
	if (codepoint >= 0xA789 && codepoint <= 0xA78A) return Unicode_Script_COMMON;
	if (codepoint >= 0xA830 && codepoint <= 0xA835) return Unicode_Script_COMMON;
	if (codepoint >= 0xA836 && codepoint <= 0xA837) return Unicode_Script_COMMON;
	if (codepoint == 0xA838) return Unicode_Script_COMMON;
	if (codepoint == 0xA839) return Unicode_Script_COMMON;
	if (codepoint == 0xA92E) return Unicode_Script_COMMON;
	if (codepoint == 0xA9CF) return Unicode_Script_COMMON;
	if (codepoint == 0xAB5B) return Unicode_Script_COMMON;
	if (codepoint >= 0xAB6A && codepoint <= 0xAB6B) return Unicode_Script_COMMON;
	if (codepoint == 0xFD3E) return Unicode_Script_COMMON;
	if (codepoint == 0xFD3F) return Unicode_Script_COMMON;
	if (codepoint >= 0xFE10 && codepoint <= 0xFE16) return Unicode_Script_COMMON;
	if (codepoint == 0xFE17) return Unicode_Script_COMMON;
	if (codepoint == 0xFE18) return Unicode_Script_COMMON;
	if (codepoint == 0xFE19) return Unicode_Script_COMMON;
	if (codepoint == 0xFE30) return Unicode_Script_COMMON;
	if (codepoint >= 0xFE31 && codepoint <= 0xFE32) return Unicode_Script_COMMON;
	if (codepoint >= 0xFE33 && codepoint <= 0xFE34) return Unicode_Script_COMMON;
	if (codepoint == 0xFE35) return Unicode_Script_COMMON;
	if (codepoint == 0xFE36) return Unicode_Script_COMMON;
	if (codepoint == 0xFE37) return Unicode_Script_COMMON;
	if (codepoint == 0xFE38) return Unicode_Script_COMMON;
	if (codepoint == 0xFE39) return Unicode_Script_COMMON;
	if (codepoint == 0xFE3A) return Unicode_Script_COMMON;
	if (codepoint == 0xFE3B) return Unicode_Script_COMMON;
	if (codepoint == 0xFE3C) return Unicode_Script_COMMON;
	if (codepoint == 0xFE3D) return Unicode_Script_COMMON;
	if (codepoint == 0xFE3E) return Unicode_Script_COMMON;
	if (codepoint == 0xFE3F) return Unicode_Script_COMMON;
	if (codepoint == 0xFE40) return Unicode_Script_COMMON;
	if (codepoint == 0xFE41) return Unicode_Script_COMMON;
	if (codepoint == 0xFE42) return Unicode_Script_COMMON;
	if (codepoint == 0xFE43) return Unicode_Script_COMMON;
	if (codepoint == 0xFE44) return Unicode_Script_COMMON;
	if (codepoint >= 0xFE45 && codepoint <= 0xFE46) return Unicode_Script_COMMON;
	if (codepoint == 0xFE47) return Unicode_Script_COMMON;
	if (codepoint == 0xFE48) return Unicode_Script_COMMON;
	if (codepoint >= 0xFE49 && codepoint <= 0xFE4C) return Unicode_Script_COMMON;
	if (codepoint >= 0xFE4D && codepoint <= 0xFE4F) return Unicode_Script_COMMON;
	if (codepoint >= 0xFE50 && codepoint <= 0xFE52) return Unicode_Script_COMMON;
	if (codepoint >= 0xFE54 && codepoint <= 0xFE57) return Unicode_Script_COMMON;
	if (codepoint == 0xFE58) return Unicode_Script_COMMON;
	if (codepoint == 0xFE59) return Unicode_Script_COMMON;
	if (codepoint == 0xFE5A) return Unicode_Script_COMMON;
	if (codepoint == 0xFE5B) return Unicode_Script_COMMON;
	if (codepoint == 0xFE5C) return Unicode_Script_COMMON;
	if (codepoint == 0xFE5D) return Unicode_Script_COMMON;
	if (codepoint == 0xFE5E) return Unicode_Script_COMMON;
	if (codepoint >= 0xFE5F && codepoint <= 0xFE61) return Unicode_Script_COMMON;
	if (codepoint == 0xFE62) return Unicode_Script_COMMON;
	if (codepoint == 0xFE63) return Unicode_Script_COMMON;
	if (codepoint >= 0xFE64 && codepoint <= 0xFE66) return Unicode_Script_COMMON;
	if (codepoint == 0xFE68) return Unicode_Script_COMMON;
	if (codepoint == 0xFE69) return Unicode_Script_COMMON;
	if (codepoint >= 0xFE6A && codepoint <= 0xFE6B) return Unicode_Script_COMMON;
	if (codepoint == 0xFEFF) return Unicode_Script_COMMON;
	if (codepoint >= 0xFF01 && codepoint <= 0xFF03) return Unicode_Script_COMMON;
	if (codepoint == 0xFF04) return Unicode_Script_COMMON;
	if (codepoint >= 0xFF05 && codepoint <= 0xFF07) return Unicode_Script_COMMON;
	if (codepoint == 0xFF08) return Unicode_Script_COMMON;
	if (codepoint == 0xFF09) return Unicode_Script_COMMON;
	if (codepoint == 0xFF0A) return Unicode_Script_COMMON;
	if (codepoint == 0xFF0B) return Unicode_Script_COMMON;
	if (codepoint == 0xFF0C) return Unicode_Script_COMMON;
	if (codepoint == 0xFF0D) return Unicode_Script_COMMON;
	if (codepoint >= 0xFF0E && codepoint <= 0xFF0F) return Unicode_Script_COMMON;
	if (codepoint >= 0xFF10 && codepoint <= 0xFF19) return Unicode_Script_COMMON;
	if (codepoint >= 0xFF1A && codepoint <= 0xFF1B) return Unicode_Script_COMMON;
	if (codepoint >= 0xFF1C && codepoint <= 0xFF1E) return Unicode_Script_COMMON;
	if (codepoint >= 0xFF1F && codepoint <= 0xFF20) return Unicode_Script_COMMON;
	if (codepoint == 0xFF3B) return Unicode_Script_COMMON;
	if (codepoint == 0xFF3C) return Unicode_Script_COMMON;
	if (codepoint == 0xFF3D) return Unicode_Script_COMMON;
	if (codepoint == 0xFF3E) return Unicode_Script_COMMON;
	if (codepoint == 0xFF3F) return Unicode_Script_COMMON;
	if (codepoint == 0xFF40) return Unicode_Script_COMMON;
	if (codepoint == 0xFF5B) return Unicode_Script_COMMON;
	if (codepoint == 0xFF5C) return Unicode_Script_COMMON;
	if (codepoint == 0xFF5D) return Unicode_Script_COMMON;
	if (codepoint == 0xFF5E) return Unicode_Script_COMMON;
	if (codepoint == 0xFF5F) return Unicode_Script_COMMON;
	if (codepoint == 0xFF60) return Unicode_Script_COMMON;
	if (codepoint == 0xFF61) return Unicode_Script_COMMON;
	if (codepoint == 0xFF62) return Unicode_Script_COMMON;
	if (codepoint == 0xFF63) return Unicode_Script_COMMON;
	if (codepoint >= 0xFF64 && codepoint <= 0xFF65) return Unicode_Script_COMMON;
	if (codepoint == 0xFF70) return Unicode_Script_COMMON;
	if (codepoint >= 0xFF9E && codepoint <= 0xFF9F) return Unicode_Script_COMMON;
	if (codepoint >= 0xFFE0 && codepoint <= 0xFFE1) return Unicode_Script_COMMON;
	if (codepoint == 0xFFE2) return Unicode_Script_COMMON;
	if (codepoint == 0xFFE3) return Unicode_Script_COMMON;
	if (codepoint == 0xFFE4) return Unicode_Script_COMMON;
	if (codepoint >= 0xFFE5 && codepoint <= 0xFFE6) return Unicode_Script_COMMON;
	if (codepoint == 0xFFE8) return Unicode_Script_COMMON;
	if (codepoint >= 0xFFE9 && codepoint <= 0xFFEC) return Unicode_Script_COMMON;
	if (codepoint >= 0xFFED && codepoint <= 0xFFEE) return Unicode_Script_COMMON;
	if (codepoint >= 0xFFF9 && codepoint <= 0xFFFB) return Unicode_Script_COMMON;
	if (codepoint >= 0xFFFC && codepoint <= 0xFFFD) return Unicode_Script_COMMON;
	if (codepoint >= 0x10100 && codepoint <= 0x10102) return Unicode_Script_COMMON;
	if (codepoint >= 0x10107 && codepoint <= 0x10133) return Unicode_Script_COMMON;
	if (codepoint >= 0x10137 && codepoint <= 0x1013F) return Unicode_Script_COMMON;
	if (codepoint >= 0x10190 && codepoint <= 0x1019C) return Unicode_Script_COMMON;
	if (codepoint >= 0x101D0 && codepoint <= 0x101FC) return Unicode_Script_COMMON;
	if (codepoint >= 0x102E1 && codepoint <= 0x102FB) return Unicode_Script_COMMON;
	if (codepoint == 0x16FE2) return Unicode_Script_COMMON;
	if (codepoint == 0x16FE3) return Unicode_Script_COMMON;
	if (codepoint >= 0x1BCA0 && codepoint <= 0x1BCA3) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D000 && codepoint <= 0x1D0F5) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D100 && codepoint <= 0x1D126) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D129 && codepoint <= 0x1D164) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D165 && codepoint <= 0x1D166) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D16A && codepoint <= 0x1D16C) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D16D && codepoint <= 0x1D172) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D173 && codepoint <= 0x1D17A) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D183 && codepoint <= 0x1D184) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D18C && codepoint <= 0x1D1A9) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D1AE && codepoint <= 0x1D1E8) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D2E0 && codepoint <= 0x1D2F3) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D300 && codepoint <= 0x1D356) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D360 && codepoint <= 0x1D378) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D400 && codepoint <= 0x1D454) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D456 && codepoint <= 0x1D49C) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D49E && codepoint <= 0x1D49F) return Unicode_Script_COMMON;
	if (codepoint == 0x1D4A2) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D4A5 && codepoint <= 0x1D4A6) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D4A9 && codepoint <= 0x1D4AC) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D4AE && codepoint <= 0x1D4B9) return Unicode_Script_COMMON;
	if (codepoint == 0x1D4BB) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D4BD && codepoint <= 0x1D4C3) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D4C5 && codepoint <= 0x1D505) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D507 && codepoint <= 0x1D50A) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D50D && codepoint <= 0x1D514) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D516 && codepoint <= 0x1D51C) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D51E && codepoint <= 0x1D539) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D53B && codepoint <= 0x1D53E) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D540 && codepoint <= 0x1D544) return Unicode_Script_COMMON;
	if (codepoint == 0x1D546) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D54A && codepoint <= 0x1D550) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D552 && codepoint <= 0x1D6A5) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D6A8 && codepoint <= 0x1D6C0) return Unicode_Script_COMMON;
	if (codepoint == 0x1D6C1) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D6C2 && codepoint <= 0x1D6DA) return Unicode_Script_COMMON;
	if (codepoint == 0x1D6DB) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D6DC && codepoint <= 0x1D6FA) return Unicode_Script_COMMON;
	if (codepoint == 0x1D6FB) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D6FC && codepoint <= 0x1D714) return Unicode_Script_COMMON;
	if (codepoint == 0x1D715) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D716 && codepoint <= 0x1D734) return Unicode_Script_COMMON;
	if (codepoint == 0x1D735) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D736 && codepoint <= 0x1D74E) return Unicode_Script_COMMON;
	if (codepoint == 0x1D74F) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D750 && codepoint <= 0x1D76E) return Unicode_Script_COMMON;
	if (codepoint == 0x1D76F) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D770 && codepoint <= 0x1D788) return Unicode_Script_COMMON;
	if (codepoint == 0x1D789) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D78A && codepoint <= 0x1D7A8) return Unicode_Script_COMMON;
	if (codepoint == 0x1D7A9) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D7AA && codepoint <= 0x1D7C2) return Unicode_Script_COMMON;
	if (codepoint == 0x1D7C3) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D7C4 && codepoint <= 0x1D7CB) return Unicode_Script_COMMON;
	if (codepoint >= 0x1D7CE && codepoint <= 0x1D7FF) return Unicode_Script_COMMON;
	if (codepoint >= 0x1EC71 && codepoint <= 0x1ECAB) return Unicode_Script_COMMON;
	if (codepoint == 0x1ECAC) return Unicode_Script_COMMON;
	if (codepoint >= 0x1ECAD && codepoint <= 0x1ECAF) return Unicode_Script_COMMON;
	if (codepoint == 0x1ECB0) return Unicode_Script_COMMON;
	if (codepoint >= 0x1ECB1 && codepoint <= 0x1ECB4) return Unicode_Script_COMMON;
	if (codepoint >= 0x1ED01 && codepoint <= 0x1ED2D) return Unicode_Script_COMMON;
	if (codepoint == 0x1ED2E) return Unicode_Script_COMMON;
	if (codepoint >= 0x1ED2F && codepoint <= 0x1ED3D) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F000 && codepoint <= 0x1F02B) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F030 && codepoint <= 0x1F093) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F0A0 && codepoint <= 0x1F0AE) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F0B1 && codepoint <= 0x1F0BF) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F0C1 && codepoint <= 0x1F0CF) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F0D1 && codepoint <= 0x1F0F5) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F100 && codepoint <= 0x1F10C) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F10D && codepoint <= 0x1F1AD) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F1E6 && codepoint <= 0x1F1FF) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F201 && codepoint <= 0x1F202) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F210 && codepoint <= 0x1F23B) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F240 && codepoint <= 0x1F248) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F250 && codepoint <= 0x1F251) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F260 && codepoint <= 0x1F265) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F300 && codepoint <= 0x1F3FA) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F3FB && codepoint <= 0x1F3FF) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F400 && codepoint <= 0x1F6D7) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F6E0 && codepoint <= 0x1F6EC) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F6F0 && codepoint <= 0x1F6FC) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F700 && codepoint <= 0x1F773) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F780 && codepoint <= 0x1F7D8) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F7E0 && codepoint <= 0x1F7EB) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F800 && codepoint <= 0x1F80B) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F810 && codepoint <= 0x1F847) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F850 && codepoint <= 0x1F859) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F860 && codepoint <= 0x1F887) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F890 && codepoint <= 0x1F8AD) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F8B0 && codepoint <= 0x1F8B1) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F900 && codepoint <= 0x1F978) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F97A && codepoint <= 0x1F9CB) return Unicode_Script_COMMON;
	if (codepoint >= 0x1F9CD && codepoint <= 0x1FA53) return Unicode_Script_COMMON;
	if (codepoint >= 0x1FA60 && codepoint <= 0x1FA6D) return Unicode_Script_COMMON;
	if (codepoint >= 0x1FA70 && codepoint <= 0x1FA74) return Unicode_Script_COMMON;
	if (codepoint >= 0x1FA78 && codepoint <= 0x1FA7A) return Unicode_Script_COMMON;
	if (codepoint >= 0x1FA80 && codepoint <= 0x1FA86) return Unicode_Script_COMMON;
	if (codepoint >= 0x1FA90 && codepoint <= 0x1FAA8) return Unicode_Script_COMMON;
	if (codepoint >= 0x1FAB0 && codepoint <= 0x1FAB6) return Unicode_Script_COMMON;
	if (codepoint >= 0x1FAC0 && codepoint <= 0x1FAC2) return Unicode_Script_COMMON;
	if (codepoint >= 0x1FAD0 && codepoint <= 0x1FAD6) return Unicode_Script_COMMON;
	if (codepoint >= 0x1FB00 && codepoint <= 0x1FB92) return Unicode_Script_COMMON;
	if (codepoint >= 0x1FB94 && codepoint <= 0x1FBCA) return Unicode_Script_COMMON;
	if (codepoint >= 0x1FBF0 && codepoint <= 0x1FBF9) return Unicode_Script_COMMON;
	if (codepoint == 0xE0001) return Unicode_Script_COMMON;
	if (codepoint >= 0xE0020 && codepoint <= 0xE007F) return Unicode_Script_COMMON;
	if (codepoint >= 0x0041 && codepoint <= 0x005A) return Unicode_Script_LATIN;
	if (codepoint >= 0x0061 && codepoint <= 0x007A) return Unicode_Script_LATIN;
	if (codepoint == 0x00AA) return Unicode_Script_LATIN;
	if (codepoint == 0x00BA) return Unicode_Script_LATIN;
	if (codepoint >= 0x00C0 && codepoint <= 0x00D6) return Unicode_Script_LATIN;
	if (codepoint >= 0x00D8 && codepoint <= 0x00F6) return Unicode_Script_LATIN;
	if (codepoint >= 0x00F8 && codepoint <= 0x01BA) return Unicode_Script_LATIN;
	if (codepoint == 0x01BB) return Unicode_Script_LATIN;
	if (codepoint >= 0x01BC && codepoint <= 0x01BF) return Unicode_Script_LATIN;
	if (codepoint >= 0x01C0 && codepoint <= 0x01C3) return Unicode_Script_LATIN;
	if (codepoint >= 0x01C4 && codepoint <= 0x0293) return Unicode_Script_LATIN;
	if (codepoint == 0x0294) return Unicode_Script_LATIN;
	if (codepoint >= 0x0295 && codepoint <= 0x02AF) return Unicode_Script_LATIN;
	if (codepoint >= 0x02B0 && codepoint <= 0x02B8) return Unicode_Script_LATIN;
	if (codepoint >= 0x02E0 && codepoint <= 0x02E4) return Unicode_Script_LATIN;
	if (codepoint >= 0x1D00 && codepoint <= 0x1D25) return Unicode_Script_LATIN;
	if (codepoint >= 0x1D2C && codepoint <= 0x1D5C) return Unicode_Script_LATIN;
	if (codepoint >= 0x1D62 && codepoint <= 0x1D65) return Unicode_Script_LATIN;
	if (codepoint >= 0x1D6B && codepoint <= 0x1D77) return Unicode_Script_LATIN;
	if (codepoint >= 0x1D79 && codepoint <= 0x1D9A) return Unicode_Script_LATIN;
	if (codepoint >= 0x1D9B && codepoint <= 0x1DBE) return Unicode_Script_LATIN;
	if (codepoint >= 0x1E00 && codepoint <= 0x1EFF) return Unicode_Script_LATIN;
	if (codepoint == 0x2071) return Unicode_Script_LATIN;
	if (codepoint == 0x207F) return Unicode_Script_LATIN;
	if (codepoint >= 0x2090 && codepoint <= 0x209C) return Unicode_Script_LATIN;
	if (codepoint >= 0x212A && codepoint <= 0x212B) return Unicode_Script_LATIN;
	if (codepoint == 0x2132) return Unicode_Script_LATIN;
	if (codepoint == 0x214E) return Unicode_Script_LATIN;
	if (codepoint >= 0x2160 && codepoint <= 0x2182) return Unicode_Script_LATIN;
	if (codepoint >= 0x2183 && codepoint <= 0x2184) return Unicode_Script_LATIN;
	if (codepoint >= 0x2185 && codepoint <= 0x2188) return Unicode_Script_LATIN;
	if (codepoint >= 0x2C60 && codepoint <= 0x2C7B) return Unicode_Script_LATIN;
	if (codepoint >= 0x2C7C && codepoint <= 0x2C7D) return Unicode_Script_LATIN;
	if (codepoint >= 0x2C7E && codepoint <= 0x2C7F) return Unicode_Script_LATIN;
	if (codepoint >= 0xA722 && codepoint <= 0xA76F) return Unicode_Script_LATIN;
	if (codepoint == 0xA770) return Unicode_Script_LATIN;
	if (codepoint >= 0xA771 && codepoint <= 0xA787) return Unicode_Script_LATIN;
	if (codepoint >= 0xA78B && codepoint <= 0xA78E) return Unicode_Script_LATIN;
	if (codepoint == 0xA78F) return Unicode_Script_LATIN;
	if (codepoint >= 0xA790 && codepoint <= 0xA7BF) return Unicode_Script_LATIN;
	if (codepoint >= 0xA7C2 && codepoint <= 0xA7CA) return Unicode_Script_LATIN;
	if (codepoint >= 0xA7F5 && codepoint <= 0xA7F6) return Unicode_Script_LATIN;
	if (codepoint == 0xA7F7) return Unicode_Script_LATIN;
	if (codepoint >= 0xA7F8 && codepoint <= 0xA7F9) return Unicode_Script_LATIN;
	if (codepoint == 0xA7FA) return Unicode_Script_LATIN;
	if (codepoint >= 0xA7FB && codepoint <= 0xA7FF) return Unicode_Script_LATIN;
	if (codepoint >= 0xAB30 && codepoint <= 0xAB5A) return Unicode_Script_LATIN;
	if (codepoint >= 0xAB5C && codepoint <= 0xAB5F) return Unicode_Script_LATIN;
	if (codepoint >= 0xAB60 && codepoint <= 0xAB64) return Unicode_Script_LATIN;
	if (codepoint >= 0xAB66 && codepoint <= 0xAB68) return Unicode_Script_LATIN;
	if (codepoint == 0xAB69) return Unicode_Script_LATIN;
	if (codepoint >= 0xFB00 && codepoint <= 0xFB06) return Unicode_Script_LATIN;
	if (codepoint >= 0xFF21 && codepoint <= 0xFF3A) return Unicode_Script_LATIN;
	if (codepoint >= 0xFF41 && codepoint <= 0xFF5A) return Unicode_Script_LATIN;
	if (codepoint >= 0x0370 && codepoint <= 0x0373) return Unicode_Script_GREEK;
	if (codepoint == 0x0375) return Unicode_Script_GREEK;
	if (codepoint >= 0x0376 && codepoint <= 0x0377) return Unicode_Script_GREEK;
	if (codepoint == 0x037A) return Unicode_Script_GREEK;
	if (codepoint >= 0x037B && codepoint <= 0x037D) return Unicode_Script_GREEK;
	if (codepoint == 0x037F) return Unicode_Script_GREEK;
	if (codepoint == 0x0384) return Unicode_Script_GREEK;
	if (codepoint == 0x0386) return Unicode_Script_GREEK;
	if (codepoint >= 0x0388 && codepoint <= 0x038A) return Unicode_Script_GREEK;
	if (codepoint == 0x038C) return Unicode_Script_GREEK;
	if (codepoint >= 0x038E && codepoint <= 0x03A1) return Unicode_Script_GREEK;
	if (codepoint >= 0x03A3 && codepoint <= 0x03E1) return Unicode_Script_GREEK;
	if (codepoint >= 0x03F0 && codepoint <= 0x03F5) return Unicode_Script_GREEK;
	if (codepoint == 0x03F6) return Unicode_Script_GREEK;
	if (codepoint >= 0x03F7 && codepoint <= 0x03FF) return Unicode_Script_GREEK;
	if (codepoint >= 0x1D26 && codepoint <= 0x1D2A) return Unicode_Script_GREEK;
	if (codepoint >= 0x1D5D && codepoint <= 0x1D61) return Unicode_Script_GREEK;
	if (codepoint >= 0x1D66 && codepoint <= 0x1D6A) return Unicode_Script_GREEK;
	if (codepoint == 0x1DBF) return Unicode_Script_GREEK;
	if (codepoint >= 0x1F00 && codepoint <= 0x1F15) return Unicode_Script_GREEK;
	if (codepoint >= 0x1F18 && codepoint <= 0x1F1D) return Unicode_Script_GREEK;
	if (codepoint >= 0x1F20 && codepoint <= 0x1F45) return Unicode_Script_GREEK;
	if (codepoint >= 0x1F48 && codepoint <= 0x1F4D) return Unicode_Script_GREEK;
	if (codepoint >= 0x1F50 && codepoint <= 0x1F57) return Unicode_Script_GREEK;
	if (codepoint == 0x1F59) return Unicode_Script_GREEK;
	if (codepoint == 0x1F5B) return Unicode_Script_GREEK;
	if (codepoint == 0x1F5D) return Unicode_Script_GREEK;
	if (codepoint >= 0x1F5F && codepoint <= 0x1F7D) return Unicode_Script_GREEK;
	if (codepoint >= 0x1F80 && codepoint <= 0x1FB4) return Unicode_Script_GREEK;
	if (codepoint >= 0x1FB6 && codepoint <= 0x1FBC) return Unicode_Script_GREEK;
	if (codepoint == 0x1FBD) return Unicode_Script_GREEK;
	if (codepoint == 0x1FBE) return Unicode_Script_GREEK;
	if (codepoint >= 0x1FBF && codepoint <= 0x1FC1) return Unicode_Script_GREEK;
	if (codepoint >= 0x1FC2 && codepoint <= 0x1FC4) return Unicode_Script_GREEK;
	if (codepoint >= 0x1FC6 && codepoint <= 0x1FCC) return Unicode_Script_GREEK;
	if (codepoint >= 0x1FCD && codepoint <= 0x1FCF) return Unicode_Script_GREEK;
	if (codepoint >= 0x1FD0 && codepoint <= 0x1FD3) return Unicode_Script_GREEK;
	if (codepoint >= 0x1FD6 && codepoint <= 0x1FDB) return Unicode_Script_GREEK;
	if (codepoint >= 0x1FDD && codepoint <= 0x1FDF) return Unicode_Script_GREEK;
	if (codepoint >= 0x1FE0 && codepoint <= 0x1FEC) return Unicode_Script_GREEK;
	if (codepoint >= 0x1FED && codepoint <= 0x1FEF) return Unicode_Script_GREEK;
	if (codepoint >= 0x1FF2 && codepoint <= 0x1FF4) return Unicode_Script_GREEK;
	if (codepoint >= 0x1FF6 && codepoint <= 0x1FFC) return Unicode_Script_GREEK;
	if (codepoint >= 0x1FFD && codepoint <= 0x1FFE) return Unicode_Script_GREEK;
	if (codepoint == 0x2126) return Unicode_Script_GREEK;
	if (codepoint == 0xAB65) return Unicode_Script_GREEK;
	if (codepoint >= 0x10140 && codepoint <= 0x10174) return Unicode_Script_GREEK;
	if (codepoint >= 0x10175 && codepoint <= 0x10178) return Unicode_Script_GREEK;
	if (codepoint >= 0x10179 && codepoint <= 0x10189) return Unicode_Script_GREEK;
	if (codepoint >= 0x1018A && codepoint <= 0x1018B) return Unicode_Script_GREEK;
	if (codepoint >= 0x1018C && codepoint <= 0x1018E) return Unicode_Script_GREEK;
	if (codepoint == 0x101A0) return Unicode_Script_GREEK;
	if (codepoint >= 0x1D200 && codepoint <= 0x1D241) return Unicode_Script_GREEK;
	if (codepoint >= 0x1D242 && codepoint <= 0x1D244) return Unicode_Script_GREEK;
	if (codepoint == 0x1D245) return Unicode_Script_GREEK;
	if (codepoint >= 0x0400 && codepoint <= 0x0481) return Unicode_Script_CYRILLIC;
	if (codepoint == 0x0482) return Unicode_Script_CYRILLIC;
	if (codepoint >= 0x0483 && codepoint <= 0x0484) return Unicode_Script_CYRILLIC;
	if (codepoint == 0x0487) return Unicode_Script_CYRILLIC;
	if (codepoint >= 0x0488 && codepoint <= 0x0489) return Unicode_Script_CYRILLIC;
	if (codepoint >= 0x048A && codepoint <= 0x052F) return Unicode_Script_CYRILLIC;
	if (codepoint >= 0x1C80 && codepoint <= 0x1C88) return Unicode_Script_CYRILLIC;
	if (codepoint == 0x1D2B) return Unicode_Script_CYRILLIC;
	if (codepoint == 0x1D78) return Unicode_Script_CYRILLIC;
	if (codepoint >= 0x2DE0 && codepoint <= 0x2DFF) return Unicode_Script_CYRILLIC;
	if (codepoint >= 0xA640 && codepoint <= 0xA66D) return Unicode_Script_CYRILLIC;
	if (codepoint == 0xA66E) return Unicode_Script_CYRILLIC;
	if (codepoint == 0xA66F) return Unicode_Script_CYRILLIC;
	if (codepoint >= 0xA670 && codepoint <= 0xA672) return Unicode_Script_CYRILLIC;
	if (codepoint == 0xA673) return Unicode_Script_CYRILLIC;
	if (codepoint >= 0xA674 && codepoint <= 0xA67D) return Unicode_Script_CYRILLIC;
	if (codepoint == 0xA67E) return Unicode_Script_CYRILLIC;
	if (codepoint == 0xA67F) return Unicode_Script_CYRILLIC;
	if (codepoint >= 0xA680 && codepoint <= 0xA69B) return Unicode_Script_CYRILLIC;
	if (codepoint >= 0xA69C && codepoint <= 0xA69D) return Unicode_Script_CYRILLIC;
	if (codepoint >= 0xA69E && codepoint <= 0xA69F) return Unicode_Script_CYRILLIC;
	if (codepoint >= 0xFE2E && codepoint <= 0xFE2F) return Unicode_Script_CYRILLIC;
	if (codepoint >= 0x0531 && codepoint <= 0x0556) return Unicode_Script_ARMENIAN;
	if (codepoint == 0x0559) return Unicode_Script_ARMENIAN;
	if (codepoint >= 0x055A && codepoint <= 0x055F) return Unicode_Script_ARMENIAN;
	if (codepoint >= 0x0560 && codepoint <= 0x0588) return Unicode_Script_ARMENIAN;
	if (codepoint == 0x0589) return Unicode_Script_ARMENIAN;
	if (codepoint == 0x058A) return Unicode_Script_ARMENIAN;
	if (codepoint >= 0x058D && codepoint <= 0x058E) return Unicode_Script_ARMENIAN;
	if (codepoint == 0x058F) return Unicode_Script_ARMENIAN;
	if (codepoint >= 0xFB13 && codepoint <= 0xFB17) return Unicode_Script_ARMENIAN;
	if (codepoint >= 0x0591 && codepoint <= 0x05BD) return Unicode_Script_HEBREW;
	if (codepoint == 0x05BE) return Unicode_Script_HEBREW;
	if (codepoint == 0x05BF) return Unicode_Script_HEBREW;
	if (codepoint == 0x05C0) return Unicode_Script_HEBREW;
	if (codepoint >= 0x05C1 && codepoint <= 0x05C2) return Unicode_Script_HEBREW;
	if (codepoint == 0x05C3) return Unicode_Script_HEBREW;
	if (codepoint >= 0x05C4 && codepoint <= 0x05C5) return Unicode_Script_HEBREW;
	if (codepoint == 0x05C6) return Unicode_Script_HEBREW;
	if (codepoint == 0x05C7) return Unicode_Script_HEBREW;
	if (codepoint >= 0x05D0 && codepoint <= 0x05EA) return Unicode_Script_HEBREW;
	if (codepoint >= 0x05EF && codepoint <= 0x05F2) return Unicode_Script_HEBREW;
	if (codepoint >= 0x05F3 && codepoint <= 0x05F4) return Unicode_Script_HEBREW;
	if (codepoint == 0xFB1D) return Unicode_Script_HEBREW;
	if (codepoint == 0xFB1E) return Unicode_Script_HEBREW;
	if (codepoint >= 0xFB1F && codepoint <= 0xFB28) return Unicode_Script_HEBREW;
	if (codepoint == 0xFB29) return Unicode_Script_HEBREW;
	if (codepoint >= 0xFB2A && codepoint <= 0xFB36) return Unicode_Script_HEBREW;
	if (codepoint >= 0xFB38 && codepoint <= 0xFB3C) return Unicode_Script_HEBREW;
	if (codepoint == 0xFB3E) return Unicode_Script_HEBREW;
	if (codepoint >= 0xFB40 && codepoint <= 0xFB41) return Unicode_Script_HEBREW;
	if (codepoint >= 0xFB43 && codepoint <= 0xFB44) return Unicode_Script_HEBREW;
	if (codepoint >= 0xFB46 && codepoint <= 0xFB4F) return Unicode_Script_HEBREW;
	if (codepoint >= 0x0600 && codepoint <= 0x0604) return Unicode_Script_ARABIC;
	if (codepoint >= 0x0606 && codepoint <= 0x0608) return Unicode_Script_ARABIC;
	if (codepoint >= 0x0609 && codepoint <= 0x060A) return Unicode_Script_ARABIC;
	if (codepoint == 0x060B) return Unicode_Script_ARABIC;
	if (codepoint == 0x060D) return Unicode_Script_ARABIC;
	if (codepoint >= 0x060E && codepoint <= 0x060F) return Unicode_Script_ARABIC;
	if (codepoint >= 0x0610 && codepoint <= 0x061A) return Unicode_Script_ARABIC;
	if (codepoint == 0x061C) return Unicode_Script_ARABIC;
	if (codepoint == 0x061E) return Unicode_Script_ARABIC;
	if (codepoint >= 0x0620 && codepoint <= 0x063F) return Unicode_Script_ARABIC;
	if (codepoint >= 0x0641 && codepoint <= 0x064A) return Unicode_Script_ARABIC;
	if (codepoint >= 0x0656 && codepoint <= 0x065F) return Unicode_Script_ARABIC;
	if (codepoint >= 0x0660 && codepoint <= 0x0669) return Unicode_Script_ARABIC;
	if (codepoint >= 0x066A && codepoint <= 0x066D) return Unicode_Script_ARABIC;
	if (codepoint >= 0x066E && codepoint <= 0x066F) return Unicode_Script_ARABIC;
	if (codepoint >= 0x0671 && codepoint <= 0x06D3) return Unicode_Script_ARABIC;
	if (codepoint == 0x06D4) return Unicode_Script_ARABIC;
	if (codepoint == 0x06D5) return Unicode_Script_ARABIC;
	if (codepoint >= 0x06D6 && codepoint <= 0x06DC) return Unicode_Script_ARABIC;
	if (codepoint == 0x06DE) return Unicode_Script_ARABIC;
	if (codepoint >= 0x06DF && codepoint <= 0x06E4) return Unicode_Script_ARABIC;
	if (codepoint >= 0x06E5 && codepoint <= 0x06E6) return Unicode_Script_ARABIC;
	if (codepoint >= 0x06E7 && codepoint <= 0x06E8) return Unicode_Script_ARABIC;
	if (codepoint == 0x06E9) return Unicode_Script_ARABIC;
	if (codepoint >= 0x06EA && codepoint <= 0x06ED) return Unicode_Script_ARABIC;
	if (codepoint >= 0x06EE && codepoint <= 0x06EF) return Unicode_Script_ARABIC;
	if (codepoint >= 0x06F0 && codepoint <= 0x06F9) return Unicode_Script_ARABIC;
	if (codepoint >= 0x06FA && codepoint <= 0x06FC) return Unicode_Script_ARABIC;
	if (codepoint >= 0x06FD && codepoint <= 0x06FE) return Unicode_Script_ARABIC;
	if (codepoint == 0x06FF) return Unicode_Script_ARABIC;
	if (codepoint >= 0x0750 && codepoint <= 0x077F) return Unicode_Script_ARABIC;
	if (codepoint >= 0x08A0 && codepoint <= 0x08B4) return Unicode_Script_ARABIC;
	if (codepoint >= 0x08B6 && codepoint <= 0x08C7) return Unicode_Script_ARABIC;
	if (codepoint >= 0x08D3 && codepoint <= 0x08E1) return Unicode_Script_ARABIC;
	if (codepoint >= 0x08E3 && codepoint <= 0x08FF) return Unicode_Script_ARABIC;
	if (codepoint >= 0xFB50 && codepoint <= 0xFBB1) return Unicode_Script_ARABIC;
	if (codepoint >= 0xFBB2 && codepoint <= 0xFBC1) return Unicode_Script_ARABIC;
	if (codepoint >= 0xFBD3 && codepoint <= 0xFD3D) return Unicode_Script_ARABIC;
	if (codepoint >= 0xFD50 && codepoint <= 0xFD8F) return Unicode_Script_ARABIC;
	if (codepoint >= 0xFD92 && codepoint <= 0xFDC7) return Unicode_Script_ARABIC;
	if (codepoint >= 0xFDF0 && codepoint <= 0xFDFB) return Unicode_Script_ARABIC;
	if (codepoint == 0xFDFC) return Unicode_Script_ARABIC;
	if (codepoint == 0xFDFD) return Unicode_Script_ARABIC;
	if (codepoint >= 0xFE70 && codepoint <= 0xFE74) return Unicode_Script_ARABIC;
	if (codepoint >= 0xFE76 && codepoint <= 0xFEFC) return Unicode_Script_ARABIC;
	if (codepoint >= 0x10E60 && codepoint <= 0x10E7E) return Unicode_Script_ARABIC;
	if (codepoint >= 0x1EE00 && codepoint <= 0x1EE03) return Unicode_Script_ARABIC;
	if (codepoint >= 0x1EE05 && codepoint <= 0x1EE1F) return Unicode_Script_ARABIC;
	if (codepoint >= 0x1EE21 && codepoint <= 0x1EE22) return Unicode_Script_ARABIC;
	if (codepoint == 0x1EE24) return Unicode_Script_ARABIC;
	if (codepoint == 0x1EE27) return Unicode_Script_ARABIC;
	if (codepoint >= 0x1EE29 && codepoint <= 0x1EE32) return Unicode_Script_ARABIC;
	if (codepoint >= 0x1EE34 && codepoint <= 0x1EE37) return Unicode_Script_ARABIC;
	if (codepoint == 0x1EE39) return Unicode_Script_ARABIC;
	if (codepoint == 0x1EE3B) return Unicode_Script_ARABIC;
	if (codepoint == 0x1EE42) return Unicode_Script_ARABIC;
	if (codepoint == 0x1EE47) return Unicode_Script_ARABIC;
	if (codepoint == 0x1EE49) return Unicode_Script_ARABIC;
	if (codepoint == 0x1EE4B) return Unicode_Script_ARABIC;
	if (codepoint >= 0x1EE4D && codepoint <= 0x1EE4F) return Unicode_Script_ARABIC;
	if (codepoint >= 0x1EE51 && codepoint <= 0x1EE52) return Unicode_Script_ARABIC;
	if (codepoint == 0x1EE54) return Unicode_Script_ARABIC;
	if (codepoint == 0x1EE57) return Unicode_Script_ARABIC;
	if (codepoint == 0x1EE59) return Unicode_Script_ARABIC;
	if (codepoint == 0x1EE5B) return Unicode_Script_ARABIC;
	if (codepoint == 0x1EE5D) return Unicode_Script_ARABIC;
	if (codepoint == 0x1EE5F) return Unicode_Script_ARABIC;
	if (codepoint >= 0x1EE61 && codepoint <= 0x1EE62) return Unicode_Script_ARABIC;
	if (codepoint == 0x1EE64) return Unicode_Script_ARABIC;
	if (codepoint >= 0x1EE67 && codepoint <= 0x1EE6A) return Unicode_Script_ARABIC;
	if (codepoint >= 0x1EE6C && codepoint <= 0x1EE72) return Unicode_Script_ARABIC;
	if (codepoint >= 0x1EE74 && codepoint <= 0x1EE77) return Unicode_Script_ARABIC;
	if (codepoint >= 0x1EE79 && codepoint <= 0x1EE7C) return Unicode_Script_ARABIC;
	if (codepoint == 0x1EE7E) return Unicode_Script_ARABIC;
	if (codepoint >= 0x1EE80 && codepoint <= 0x1EE89) return Unicode_Script_ARABIC;
	if (codepoint >= 0x1EE8B && codepoint <= 0x1EE9B) return Unicode_Script_ARABIC;
	if (codepoint >= 0x1EEA1 && codepoint <= 0x1EEA3) return Unicode_Script_ARABIC;
	if (codepoint >= 0x1EEA5 && codepoint <= 0x1EEA9) return Unicode_Script_ARABIC;
	if (codepoint >= 0x1EEAB && codepoint <= 0x1EEBB) return Unicode_Script_ARABIC;
	if (codepoint >= 0x1EEF0 && codepoint <= 0x1EEF1) return Unicode_Script_ARABIC;
	if (codepoint >= 0x0700 && codepoint <= 0x070D) return Unicode_Script_SYRIAC;
	if (codepoint == 0x070F) return Unicode_Script_SYRIAC;
	if (codepoint == 0x0710) return Unicode_Script_SYRIAC;
	if (codepoint == 0x0711) return Unicode_Script_SYRIAC;
	if (codepoint >= 0x0712 && codepoint <= 0x072F) return Unicode_Script_SYRIAC;
	if (codepoint >= 0x0730 && codepoint <= 0x074A) return Unicode_Script_SYRIAC;
	if (codepoint >= 0x074D && codepoint <= 0x074F) return Unicode_Script_SYRIAC;
	if (codepoint >= 0x0860 && codepoint <= 0x086A) return Unicode_Script_SYRIAC;
	if (codepoint >= 0x0780 && codepoint <= 0x07A5) return Unicode_Script_THAANA;
	if (codepoint >= 0x07A6 && codepoint <= 0x07B0) return Unicode_Script_THAANA;
	if (codepoint == 0x07B1) return Unicode_Script_THAANA;
	if (codepoint >= 0x0900 && codepoint <= 0x0902) return Unicode_Script_DEVANAGARI;
	if (codepoint == 0x0903) return Unicode_Script_DEVANAGARI;
	if (codepoint >= 0x0904 && codepoint <= 0x0939) return Unicode_Script_DEVANAGARI;
	if (codepoint == 0x093A) return Unicode_Script_DEVANAGARI;
	if (codepoint == 0x093B) return Unicode_Script_DEVANAGARI;
	if (codepoint == 0x093C) return Unicode_Script_DEVANAGARI;
	if (codepoint == 0x093D) return Unicode_Script_DEVANAGARI;
	if (codepoint >= 0x093E && codepoint <= 0x0940) return Unicode_Script_DEVANAGARI;
	if (codepoint >= 0x0941 && codepoint <= 0x0948) return Unicode_Script_DEVANAGARI;
	if (codepoint >= 0x0949 && codepoint <= 0x094C) return Unicode_Script_DEVANAGARI;
	if (codepoint == 0x094D) return Unicode_Script_DEVANAGARI;
	if (codepoint >= 0x094E && codepoint <= 0x094F) return Unicode_Script_DEVANAGARI;
	if (codepoint == 0x0950) return Unicode_Script_DEVANAGARI;
	if (codepoint >= 0x0955 && codepoint <= 0x0957) return Unicode_Script_DEVANAGARI;
	if (codepoint >= 0x0958 && codepoint <= 0x0961) return Unicode_Script_DEVANAGARI;
	if (codepoint >= 0x0962 && codepoint <= 0x0963) return Unicode_Script_DEVANAGARI;
	if (codepoint >= 0x0966 && codepoint <= 0x096F) return Unicode_Script_DEVANAGARI;
	if (codepoint == 0x0970) return Unicode_Script_DEVANAGARI;
	if (codepoint == 0x0971) return Unicode_Script_DEVANAGARI;
	if (codepoint >= 0x0972 && codepoint <= 0x097F) return Unicode_Script_DEVANAGARI;
	if (codepoint >= 0xA8E0 && codepoint <= 0xA8F1) return Unicode_Script_DEVANAGARI;
	if (codepoint >= 0xA8F2 && codepoint <= 0xA8F7) return Unicode_Script_DEVANAGARI;
	if (codepoint >= 0xA8F8 && codepoint <= 0xA8FA) return Unicode_Script_DEVANAGARI;
	if (codepoint == 0xA8FB) return Unicode_Script_DEVANAGARI;
	if (codepoint == 0xA8FC) return Unicode_Script_DEVANAGARI;
	if (codepoint >= 0xA8FD && codepoint <= 0xA8FE) return Unicode_Script_DEVANAGARI;
	if (codepoint == 0xA8FF) return Unicode_Script_DEVANAGARI;
	if (codepoint == 0x0980) return Unicode_Script_BENGALI;
	if (codepoint == 0x0981) return Unicode_Script_BENGALI;
	if (codepoint >= 0x0982 && codepoint <= 0x0983) return Unicode_Script_BENGALI;
	if (codepoint >= 0x0985 && codepoint <= 0x098C) return Unicode_Script_BENGALI;
	if (codepoint >= 0x098F && codepoint <= 0x0990) return Unicode_Script_BENGALI;
	if (codepoint >= 0x0993 && codepoint <= 0x09A8) return Unicode_Script_BENGALI;
	if (codepoint >= 0x09AA && codepoint <= 0x09B0) return Unicode_Script_BENGALI;
	if (codepoint == 0x09B2) return Unicode_Script_BENGALI;
	if (codepoint >= 0x09B6 && codepoint <= 0x09B9) return Unicode_Script_BENGALI;
	if (codepoint == 0x09BC) return Unicode_Script_BENGALI;
	if (codepoint == 0x09BD) return Unicode_Script_BENGALI;
	if (codepoint >= 0x09BE && codepoint <= 0x09C0) return Unicode_Script_BENGALI;
	if (codepoint >= 0x09C1 && codepoint <= 0x09C4) return Unicode_Script_BENGALI;
	if (codepoint >= 0x09C7 && codepoint <= 0x09C8) return Unicode_Script_BENGALI;
	if (codepoint >= 0x09CB && codepoint <= 0x09CC) return Unicode_Script_BENGALI;
	if (codepoint == 0x09CD) return Unicode_Script_BENGALI;
	if (codepoint == 0x09CE) return Unicode_Script_BENGALI;
	if (codepoint == 0x09D7) return Unicode_Script_BENGALI;
	if (codepoint >= 0x09DC && codepoint <= 0x09DD) return Unicode_Script_BENGALI;
	if (codepoint >= 0x09DF && codepoint <= 0x09E1) return Unicode_Script_BENGALI;
	if (codepoint >= 0x09E2 && codepoint <= 0x09E3) return Unicode_Script_BENGALI;
	if (codepoint >= 0x09E6 && codepoint <= 0x09EF) return Unicode_Script_BENGALI;
	if (codepoint >= 0x09F0 && codepoint <= 0x09F1) return Unicode_Script_BENGALI;
	if (codepoint >= 0x09F2 && codepoint <= 0x09F3) return Unicode_Script_BENGALI;
	if (codepoint >= 0x09F4 && codepoint <= 0x09F9) return Unicode_Script_BENGALI;
	if (codepoint == 0x09FA) return Unicode_Script_BENGALI;
	if (codepoint == 0x09FB) return Unicode_Script_BENGALI;
	if (codepoint == 0x09FC) return Unicode_Script_BENGALI;
	if (codepoint == 0x09FD) return Unicode_Script_BENGALI;
	if (codepoint == 0x09FE) return Unicode_Script_BENGALI;
	if (codepoint >= 0x0A01 && codepoint <= 0x0A02) return Unicode_Script_GURMUKHI;
	if (codepoint == 0x0A03) return Unicode_Script_GURMUKHI;
	if (codepoint >= 0x0A05 && codepoint <= 0x0A0A) return Unicode_Script_GURMUKHI;
	if (codepoint >= 0x0A0F && codepoint <= 0x0A10) return Unicode_Script_GURMUKHI;
	if (codepoint >= 0x0A13 && codepoint <= 0x0A28) return Unicode_Script_GURMUKHI;
	if (codepoint >= 0x0A2A && codepoint <= 0x0A30) return Unicode_Script_GURMUKHI;
	if (codepoint >= 0x0A32 && codepoint <= 0x0A33) return Unicode_Script_GURMUKHI;
	if (codepoint >= 0x0A35 && codepoint <= 0x0A36) return Unicode_Script_GURMUKHI;
	if (codepoint >= 0x0A38 && codepoint <= 0x0A39) return Unicode_Script_GURMUKHI;
	if (codepoint == 0x0A3C) return Unicode_Script_GURMUKHI;
	if (codepoint >= 0x0A3E && codepoint <= 0x0A40) return Unicode_Script_GURMUKHI;
	if (codepoint >= 0x0A41 && codepoint <= 0x0A42) return Unicode_Script_GURMUKHI;
	if (codepoint >= 0x0A47 && codepoint <= 0x0A48) return Unicode_Script_GURMUKHI;
	if (codepoint >= 0x0A4B && codepoint <= 0x0A4D) return Unicode_Script_GURMUKHI;
	if (codepoint == 0x0A51) return Unicode_Script_GURMUKHI;
	if (codepoint >= 0x0A59 && codepoint <= 0x0A5C) return Unicode_Script_GURMUKHI;
	if (codepoint == 0x0A5E) return Unicode_Script_GURMUKHI;
	if (codepoint >= 0x0A66 && codepoint <= 0x0A6F) return Unicode_Script_GURMUKHI;
	if (codepoint >= 0x0A70 && codepoint <= 0x0A71) return Unicode_Script_GURMUKHI;
	if (codepoint >= 0x0A72 && codepoint <= 0x0A74) return Unicode_Script_GURMUKHI;
	if (codepoint == 0x0A75) return Unicode_Script_GURMUKHI;
	if (codepoint == 0x0A76) return Unicode_Script_GURMUKHI;
	if (codepoint >= 0x0A81 && codepoint <= 0x0A82) return Unicode_Script_GUJARATI;
	if (codepoint == 0x0A83) return Unicode_Script_GUJARATI;
	if (codepoint >= 0x0A85 && codepoint <= 0x0A8D) return Unicode_Script_GUJARATI;
	if (codepoint >= 0x0A8F && codepoint <= 0x0A91) return Unicode_Script_GUJARATI;
	if (codepoint >= 0x0A93 && codepoint <= 0x0AA8) return Unicode_Script_GUJARATI;
	if (codepoint >= 0x0AAA && codepoint <= 0x0AB0) return Unicode_Script_GUJARATI;
	if (codepoint >= 0x0AB2 && codepoint <= 0x0AB3) return Unicode_Script_GUJARATI;
	if (codepoint >= 0x0AB5 && codepoint <= 0x0AB9) return Unicode_Script_GUJARATI;
	if (codepoint == 0x0ABC) return Unicode_Script_GUJARATI;
	if (codepoint == 0x0ABD) return Unicode_Script_GUJARATI;
	if (codepoint >= 0x0ABE && codepoint <= 0x0AC0) return Unicode_Script_GUJARATI;
	if (codepoint >= 0x0AC1 && codepoint <= 0x0AC5) return Unicode_Script_GUJARATI;
	if (codepoint >= 0x0AC7 && codepoint <= 0x0AC8) return Unicode_Script_GUJARATI;
	if (codepoint == 0x0AC9) return Unicode_Script_GUJARATI;
	if (codepoint >= 0x0ACB && codepoint <= 0x0ACC) return Unicode_Script_GUJARATI;
	if (codepoint == 0x0ACD) return Unicode_Script_GUJARATI;
	if (codepoint == 0x0AD0) return Unicode_Script_GUJARATI;
	if (codepoint >= 0x0AE0 && codepoint <= 0x0AE1) return Unicode_Script_GUJARATI;
	if (codepoint >= 0x0AE2 && codepoint <= 0x0AE3) return Unicode_Script_GUJARATI;
	if (codepoint >= 0x0AE6 && codepoint <= 0x0AEF) return Unicode_Script_GUJARATI;
	if (codepoint == 0x0AF0) return Unicode_Script_GUJARATI;
	if (codepoint == 0x0AF1) return Unicode_Script_GUJARATI;
	if (codepoint == 0x0AF9) return Unicode_Script_GUJARATI;
	if (codepoint >= 0x0AFA && codepoint <= 0x0AFF) return Unicode_Script_GUJARATI;
	if (codepoint == 0x0B01) return Unicode_Script_ORIYA;
	if (codepoint >= 0x0B02 && codepoint <= 0x0B03) return Unicode_Script_ORIYA;
	if (codepoint >= 0x0B05 && codepoint <= 0x0B0C) return Unicode_Script_ORIYA;
	if (codepoint >= 0x0B0F && codepoint <= 0x0B10) return Unicode_Script_ORIYA;
	if (codepoint >= 0x0B13 && codepoint <= 0x0B28) return Unicode_Script_ORIYA;
	if (codepoint >= 0x0B2A && codepoint <= 0x0B30) return Unicode_Script_ORIYA;
	if (codepoint >= 0x0B32 && codepoint <= 0x0B33) return Unicode_Script_ORIYA;
	if (codepoint >= 0x0B35 && codepoint <= 0x0B39) return Unicode_Script_ORIYA;
	if (codepoint == 0x0B3C) return Unicode_Script_ORIYA;
	if (codepoint == 0x0B3D) return Unicode_Script_ORIYA;
	if (codepoint == 0x0B3E) return Unicode_Script_ORIYA;
	if (codepoint == 0x0B3F) return Unicode_Script_ORIYA;
	if (codepoint == 0x0B40) return Unicode_Script_ORIYA;
	if (codepoint >= 0x0B41 && codepoint <= 0x0B44) return Unicode_Script_ORIYA;
	if (codepoint >= 0x0B47 && codepoint <= 0x0B48) return Unicode_Script_ORIYA;
	if (codepoint >= 0x0B4B && codepoint <= 0x0B4C) return Unicode_Script_ORIYA;
	if (codepoint == 0x0B4D) return Unicode_Script_ORIYA;
	if (codepoint >= 0x0B55 && codepoint <= 0x0B56) return Unicode_Script_ORIYA;
	if (codepoint == 0x0B57) return Unicode_Script_ORIYA;
	if (codepoint >= 0x0B5C && codepoint <= 0x0B5D) return Unicode_Script_ORIYA;
	if (codepoint >= 0x0B5F && codepoint <= 0x0B61) return Unicode_Script_ORIYA;
	if (codepoint >= 0x0B62 && codepoint <= 0x0B63) return Unicode_Script_ORIYA;
	if (codepoint >= 0x0B66 && codepoint <= 0x0B6F) return Unicode_Script_ORIYA;
	if (codepoint == 0x0B70) return Unicode_Script_ORIYA;
	if (codepoint == 0x0B71) return Unicode_Script_ORIYA;
	if (codepoint >= 0x0B72 && codepoint <= 0x0B77) return Unicode_Script_ORIYA;
	if (codepoint == 0x0B82) return Unicode_Script_TAMIL;
	if (codepoint == 0x0B83) return Unicode_Script_TAMIL;
	if (codepoint >= 0x0B85 && codepoint <= 0x0B8A) return Unicode_Script_TAMIL;
	if (codepoint >= 0x0B8E && codepoint <= 0x0B90) return Unicode_Script_TAMIL;
	if (codepoint >= 0x0B92 && codepoint <= 0x0B95) return Unicode_Script_TAMIL;
	if (codepoint >= 0x0B99 && codepoint <= 0x0B9A) return Unicode_Script_TAMIL;
	if (codepoint == 0x0B9C) return Unicode_Script_TAMIL;
	if (codepoint >= 0x0B9E && codepoint <= 0x0B9F) return Unicode_Script_TAMIL;
	if (codepoint >= 0x0BA3 && codepoint <= 0x0BA4) return Unicode_Script_TAMIL;
	if (codepoint >= 0x0BA8 && codepoint <= 0x0BAA) return Unicode_Script_TAMIL;
	if (codepoint >= 0x0BAE && codepoint <= 0x0BB9) return Unicode_Script_TAMIL;
	if (codepoint >= 0x0BBE && codepoint <= 0x0BBF) return Unicode_Script_TAMIL;
	if (codepoint == 0x0BC0) return Unicode_Script_TAMIL;
	if (codepoint >= 0x0BC1 && codepoint <= 0x0BC2) return Unicode_Script_TAMIL;
	if (codepoint >= 0x0BC6 && codepoint <= 0x0BC8) return Unicode_Script_TAMIL;
	if (codepoint >= 0x0BCA && codepoint <= 0x0BCC) return Unicode_Script_TAMIL;
	if (codepoint == 0x0BCD) return Unicode_Script_TAMIL;
	if (codepoint == 0x0BD0) return Unicode_Script_TAMIL;
	if (codepoint == 0x0BD7) return Unicode_Script_TAMIL;
	if (codepoint >= 0x0BE6 && codepoint <= 0x0BEF) return Unicode_Script_TAMIL;
	if (codepoint >= 0x0BF0 && codepoint <= 0x0BF2) return Unicode_Script_TAMIL;
	if (codepoint >= 0x0BF3 && codepoint <= 0x0BF8) return Unicode_Script_TAMIL;
	if (codepoint == 0x0BF9) return Unicode_Script_TAMIL;
	if (codepoint == 0x0BFA) return Unicode_Script_TAMIL;
	if (codepoint >= 0x11FC0 && codepoint <= 0x11FD4) return Unicode_Script_TAMIL;
	if (codepoint >= 0x11FD5 && codepoint <= 0x11FDC) return Unicode_Script_TAMIL;
	if (codepoint >= 0x11FDD && codepoint <= 0x11FE0) return Unicode_Script_TAMIL;
	if (codepoint >= 0x11FE1 && codepoint <= 0x11FF1) return Unicode_Script_TAMIL;
	if (codepoint == 0x11FFF) return Unicode_Script_TAMIL;
	if (codepoint == 0x0C00) return Unicode_Script_TELUGU;
	if (codepoint >= 0x0C01 && codepoint <= 0x0C03) return Unicode_Script_TELUGU;
	if (codepoint == 0x0C04) return Unicode_Script_TELUGU;
	if (codepoint >= 0x0C05 && codepoint <= 0x0C0C) return Unicode_Script_TELUGU;
	if (codepoint >= 0x0C0E && codepoint <= 0x0C10) return Unicode_Script_TELUGU;
	if (codepoint >= 0x0C12 && codepoint <= 0x0C28) return Unicode_Script_TELUGU;
	if (codepoint >= 0x0C2A && codepoint <= 0x0C39) return Unicode_Script_TELUGU;
	if (codepoint == 0x0C3D) return Unicode_Script_TELUGU;
	if (codepoint >= 0x0C3E && codepoint <= 0x0C40) return Unicode_Script_TELUGU;
	if (codepoint >= 0x0C41 && codepoint <= 0x0C44) return Unicode_Script_TELUGU;
	if (codepoint >= 0x0C46 && codepoint <= 0x0C48) return Unicode_Script_TELUGU;
	if (codepoint >= 0x0C4A && codepoint <= 0x0C4D) return Unicode_Script_TELUGU;
	if (codepoint >= 0x0C55 && codepoint <= 0x0C56) return Unicode_Script_TELUGU;
	if (codepoint >= 0x0C58 && codepoint <= 0x0C5A) return Unicode_Script_TELUGU;
	if (codepoint >= 0x0C60 && codepoint <= 0x0C61) return Unicode_Script_TELUGU;
	if (codepoint >= 0x0C62 && codepoint <= 0x0C63) return Unicode_Script_TELUGU;
	if (codepoint >= 0x0C66 && codepoint <= 0x0C6F) return Unicode_Script_TELUGU;
	if (codepoint == 0x0C77) return Unicode_Script_TELUGU;
	if (codepoint >= 0x0C78 && codepoint <= 0x0C7E) return Unicode_Script_TELUGU;
	if (codepoint == 0x0C7F) return Unicode_Script_TELUGU;
	if (codepoint == 0x0C80) return Unicode_Script_KANNADA;
	if (codepoint == 0x0C81) return Unicode_Script_KANNADA;
	if (codepoint >= 0x0C82 && codepoint <= 0x0C83) return Unicode_Script_KANNADA;
	if (codepoint == 0x0C84) return Unicode_Script_KANNADA;
	if (codepoint >= 0x0C85 && codepoint <= 0x0C8C) return Unicode_Script_KANNADA;
	if (codepoint >= 0x0C8E && codepoint <= 0x0C90) return Unicode_Script_KANNADA;
	if (codepoint >= 0x0C92 && codepoint <= 0x0CA8) return Unicode_Script_KANNADA;
	if (codepoint >= 0x0CAA && codepoint <= 0x0CB3) return Unicode_Script_KANNADA;
	if (codepoint >= 0x0CB5 && codepoint <= 0x0CB9) return Unicode_Script_KANNADA;
	if (codepoint == 0x0CBC) return Unicode_Script_KANNADA;
	if (codepoint == 0x0CBD) return Unicode_Script_KANNADA;
	if (codepoint == 0x0CBE) return Unicode_Script_KANNADA;
	if (codepoint == 0x0CBF) return Unicode_Script_KANNADA;
	if (codepoint >= 0x0CC0 && codepoint <= 0x0CC4) return Unicode_Script_KANNADA;
	if (codepoint == 0x0CC6) return Unicode_Script_KANNADA;
	if (codepoint >= 0x0CC7 && codepoint <= 0x0CC8) return Unicode_Script_KANNADA;
	if (codepoint >= 0x0CCA && codepoint <= 0x0CCB) return Unicode_Script_KANNADA;
	if (codepoint >= 0x0CCC && codepoint <= 0x0CCD) return Unicode_Script_KANNADA;
	if (codepoint >= 0x0CD5 && codepoint <= 0x0CD6) return Unicode_Script_KANNADA;
	if (codepoint == 0x0CDE) return Unicode_Script_KANNADA;
	if (codepoint >= 0x0CE0 && codepoint <= 0x0CE1) return Unicode_Script_KANNADA;
	if (codepoint >= 0x0CE2 && codepoint <= 0x0CE3) return Unicode_Script_KANNADA;
	if (codepoint >= 0x0CE6 && codepoint <= 0x0CEF) return Unicode_Script_KANNADA;
	if (codepoint >= 0x0CF1 && codepoint <= 0x0CF2) return Unicode_Script_KANNADA;
	if (codepoint >= 0x0D00 && codepoint <= 0x0D01) return Unicode_Script_MALAYALAM;
	if (codepoint >= 0x0D02 && codepoint <= 0x0D03) return Unicode_Script_MALAYALAM;
	if (codepoint >= 0x0D04 && codepoint <= 0x0D0C) return Unicode_Script_MALAYALAM;
	if (codepoint >= 0x0D0E && codepoint <= 0x0D10) return Unicode_Script_MALAYALAM;
	if (codepoint >= 0x0D12 && codepoint <= 0x0D3A) return Unicode_Script_MALAYALAM;
	if (codepoint >= 0x0D3B && codepoint <= 0x0D3C) return Unicode_Script_MALAYALAM;
	if (codepoint == 0x0D3D) return Unicode_Script_MALAYALAM;
	if (codepoint >= 0x0D3E && codepoint <= 0x0D40) return Unicode_Script_MALAYALAM;
	if (codepoint >= 0x0D41 && codepoint <= 0x0D44) return Unicode_Script_MALAYALAM;
	if (codepoint >= 0x0D46 && codepoint <= 0x0D48) return Unicode_Script_MALAYALAM;
	if (codepoint >= 0x0D4A && codepoint <= 0x0D4C) return Unicode_Script_MALAYALAM;
	if (codepoint == 0x0D4D) return Unicode_Script_MALAYALAM;
	if (codepoint == 0x0D4E) return Unicode_Script_MALAYALAM;
	if (codepoint == 0x0D4F) return Unicode_Script_MALAYALAM;
	if (codepoint >= 0x0D54 && codepoint <= 0x0D56) return Unicode_Script_MALAYALAM;
	if (codepoint == 0x0D57) return Unicode_Script_MALAYALAM;
	if (codepoint >= 0x0D58 && codepoint <= 0x0D5E) return Unicode_Script_MALAYALAM;
	if (codepoint >= 0x0D5F && codepoint <= 0x0D61) return Unicode_Script_MALAYALAM;
	if (codepoint >= 0x0D62 && codepoint <= 0x0D63) return Unicode_Script_MALAYALAM;
	if (codepoint >= 0x0D66 && codepoint <= 0x0D6F) return Unicode_Script_MALAYALAM;
	if (codepoint >= 0x0D70 && codepoint <= 0x0D78) return Unicode_Script_MALAYALAM;
	if (codepoint == 0x0D79) return Unicode_Script_MALAYALAM;
	if (codepoint >= 0x0D7A && codepoint <= 0x0D7F) return Unicode_Script_MALAYALAM;
	if (codepoint == 0x0D81) return Unicode_Script_SINHALA;
	if (codepoint >= 0x0D82 && codepoint <= 0x0D83) return Unicode_Script_SINHALA;
	if (codepoint >= 0x0D85 && codepoint <= 0x0D96) return Unicode_Script_SINHALA;
	if (codepoint >= 0x0D9A && codepoint <= 0x0DB1) return Unicode_Script_SINHALA;
	if (codepoint >= 0x0DB3 && codepoint <= 0x0DBB) return Unicode_Script_SINHALA;
	if (codepoint == 0x0DBD) return Unicode_Script_SINHALA;
	if (codepoint >= 0x0DC0 && codepoint <= 0x0DC6) return Unicode_Script_SINHALA;
	if (codepoint == 0x0DCA) return Unicode_Script_SINHALA;
	if (codepoint >= 0x0DCF && codepoint <= 0x0DD1) return Unicode_Script_SINHALA;
	if (codepoint >= 0x0DD2 && codepoint <= 0x0DD4) return Unicode_Script_SINHALA;
	if (codepoint == 0x0DD6) return Unicode_Script_SINHALA;
	if (codepoint >= 0x0DD8 && codepoint <= 0x0DDF) return Unicode_Script_SINHALA;
	if (codepoint >= 0x0DE6 && codepoint <= 0x0DEF) return Unicode_Script_SINHALA;
	if (codepoint >= 0x0DF2 && codepoint <= 0x0DF3) return Unicode_Script_SINHALA;
	if (codepoint == 0x0DF4) return Unicode_Script_SINHALA;
	if (codepoint >= 0x111E1 && codepoint <= 0x111F4) return Unicode_Script_SINHALA;
	if (codepoint >= 0x0E01 && codepoint <= 0x0E30) return Unicode_Script_THAI;
	if (codepoint == 0x0E31) return Unicode_Script_THAI;
	if (codepoint >= 0x0E32 && codepoint <= 0x0E33) return Unicode_Script_THAI;
	if (codepoint >= 0x0E34 && codepoint <= 0x0E3A) return Unicode_Script_THAI;
	if (codepoint >= 0x0E40 && codepoint <= 0x0E45) return Unicode_Script_THAI;
	if (codepoint == 0x0E46) return Unicode_Script_THAI;
	if (codepoint >= 0x0E47 && codepoint <= 0x0E4E) return Unicode_Script_THAI;
	if (codepoint == 0x0E4F) return Unicode_Script_THAI;
	if (codepoint >= 0x0E50 && codepoint <= 0x0E59) return Unicode_Script_THAI;
	if (codepoint >= 0x0E5A && codepoint <= 0x0E5B) return Unicode_Script_THAI;
	if (codepoint >= 0x0E81 && codepoint <= 0x0E82) return Unicode_Script_LAO;
	if (codepoint == 0x0E84) return Unicode_Script_LAO;
	if (codepoint >= 0x0E86 && codepoint <= 0x0E8A) return Unicode_Script_LAO;
	if (codepoint >= 0x0E8C && codepoint <= 0x0EA3) return Unicode_Script_LAO;
	if (codepoint == 0x0EA5) return Unicode_Script_LAO;
	if (codepoint >= 0x0EA7 && codepoint <= 0x0EB0) return Unicode_Script_LAO;
	if (codepoint == 0x0EB1) return Unicode_Script_LAO;
	if (codepoint >= 0x0EB2 && codepoint <= 0x0EB3) return Unicode_Script_LAO;
	if (codepoint >= 0x0EB4 && codepoint <= 0x0EBC) return Unicode_Script_LAO;
	if (codepoint == 0x0EBD) return Unicode_Script_LAO;
	if (codepoint >= 0x0EC0 && codepoint <= 0x0EC4) return Unicode_Script_LAO;
	if (codepoint == 0x0EC6) return Unicode_Script_LAO;
	if (codepoint >= 0x0EC8 && codepoint <= 0x0ECD) return Unicode_Script_LAO;
	if (codepoint >= 0x0ED0 && codepoint <= 0x0ED9) return Unicode_Script_LAO;
	if (codepoint >= 0x0EDC && codepoint <= 0x0EDF) return Unicode_Script_LAO;
	if (codepoint == 0x0F00) return Unicode_Script_TIBETAN;
	if (codepoint >= 0x0F01 && codepoint <= 0x0F03) return Unicode_Script_TIBETAN;
	if (codepoint >= 0x0F04 && codepoint <= 0x0F12) return Unicode_Script_TIBETAN;
	if (codepoint == 0x0F13) return Unicode_Script_TIBETAN;
	if (codepoint == 0x0F14) return Unicode_Script_TIBETAN;
	if (codepoint >= 0x0F15 && codepoint <= 0x0F17) return Unicode_Script_TIBETAN;
	if (codepoint >= 0x0F18 && codepoint <= 0x0F19) return Unicode_Script_TIBETAN;
	if (codepoint >= 0x0F1A && codepoint <= 0x0F1F) return Unicode_Script_TIBETAN;
	if (codepoint >= 0x0F20 && codepoint <= 0x0F29) return Unicode_Script_TIBETAN;
	if (codepoint >= 0x0F2A && codepoint <= 0x0F33) return Unicode_Script_TIBETAN;
	if (codepoint == 0x0F34) return Unicode_Script_TIBETAN;
	if (codepoint == 0x0F35) return Unicode_Script_TIBETAN;
	if (codepoint == 0x0F36) return Unicode_Script_TIBETAN;
	if (codepoint == 0x0F37) return Unicode_Script_TIBETAN;
	if (codepoint == 0x0F38) return Unicode_Script_TIBETAN;
	if (codepoint == 0x0F39) return Unicode_Script_TIBETAN;
	if (codepoint == 0x0F3A) return Unicode_Script_TIBETAN;
	if (codepoint == 0x0F3B) return Unicode_Script_TIBETAN;
	if (codepoint == 0x0F3C) return Unicode_Script_TIBETAN;
	if (codepoint == 0x0F3D) return Unicode_Script_TIBETAN;
	if (codepoint >= 0x0F3E && codepoint <= 0x0F3F) return Unicode_Script_TIBETAN;
	if (codepoint >= 0x0F40 && codepoint <= 0x0F47) return Unicode_Script_TIBETAN;
	if (codepoint >= 0x0F49 && codepoint <= 0x0F6C) return Unicode_Script_TIBETAN;
	if (codepoint >= 0x0F71 && codepoint <= 0x0F7E) return Unicode_Script_TIBETAN;
	if (codepoint == 0x0F7F) return Unicode_Script_TIBETAN;
	if (codepoint >= 0x0F80 && codepoint <= 0x0F84) return Unicode_Script_TIBETAN;
	if (codepoint == 0x0F85) return Unicode_Script_TIBETAN;
	if (codepoint >= 0x0F86 && codepoint <= 0x0F87) return Unicode_Script_TIBETAN;
	if (codepoint >= 0x0F88 && codepoint <= 0x0F8C) return Unicode_Script_TIBETAN;
	if (codepoint >= 0x0F8D && codepoint <= 0x0F97) return Unicode_Script_TIBETAN;
	if (codepoint >= 0x0F99 && codepoint <= 0x0FBC) return Unicode_Script_TIBETAN;
	if (codepoint >= 0x0FBE && codepoint <= 0x0FC5) return Unicode_Script_TIBETAN;
	if (codepoint == 0x0FC6) return Unicode_Script_TIBETAN;
	if (codepoint >= 0x0FC7 && codepoint <= 0x0FCC) return Unicode_Script_TIBETAN;
	if (codepoint >= 0x0FCE && codepoint <= 0x0FCF) return Unicode_Script_TIBETAN;
	if (codepoint >= 0x0FD0 && codepoint <= 0x0FD4) return Unicode_Script_TIBETAN;
	if (codepoint >= 0x0FD9 && codepoint <= 0x0FDA) return Unicode_Script_TIBETAN;
	if (codepoint >= 0x1000 && codepoint <= 0x102A) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x102B && codepoint <= 0x102C) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x102D && codepoint <= 0x1030) return Unicode_Script_MYANMAR;
	if (codepoint == 0x1031) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x1032 && codepoint <= 0x1037) return Unicode_Script_MYANMAR;
	if (codepoint == 0x1038) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x1039 && codepoint <= 0x103A) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x103B && codepoint <= 0x103C) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x103D && codepoint <= 0x103E) return Unicode_Script_MYANMAR;
	if (codepoint == 0x103F) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x1040 && codepoint <= 0x1049) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x104A && codepoint <= 0x104F) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x1050 && codepoint <= 0x1055) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x1056 && codepoint <= 0x1057) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x1058 && codepoint <= 0x1059) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x105A && codepoint <= 0x105D) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x105E && codepoint <= 0x1060) return Unicode_Script_MYANMAR;
	if (codepoint == 0x1061) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x1062 && codepoint <= 0x1064) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x1065 && codepoint <= 0x1066) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x1067 && codepoint <= 0x106D) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x106E && codepoint <= 0x1070) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x1071 && codepoint <= 0x1074) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x1075 && codepoint <= 0x1081) return Unicode_Script_MYANMAR;
	if (codepoint == 0x1082) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x1083 && codepoint <= 0x1084) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x1085 && codepoint <= 0x1086) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x1087 && codepoint <= 0x108C) return Unicode_Script_MYANMAR;
	if (codepoint == 0x108D) return Unicode_Script_MYANMAR;
	if (codepoint == 0x108E) return Unicode_Script_MYANMAR;
	if (codepoint == 0x108F) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x1090 && codepoint <= 0x1099) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x109A && codepoint <= 0x109C) return Unicode_Script_MYANMAR;
	if (codepoint == 0x109D) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x109E && codepoint <= 0x109F) return Unicode_Script_MYANMAR;
	if (codepoint >= 0xA9E0 && codepoint <= 0xA9E4) return Unicode_Script_MYANMAR;
	if (codepoint == 0xA9E5) return Unicode_Script_MYANMAR;
	if (codepoint == 0xA9E6) return Unicode_Script_MYANMAR;
	if (codepoint >= 0xA9E7 && codepoint <= 0xA9EF) return Unicode_Script_MYANMAR;
	if (codepoint >= 0xA9F0 && codepoint <= 0xA9F9) return Unicode_Script_MYANMAR;
	if (codepoint >= 0xA9FA && codepoint <= 0xA9FE) return Unicode_Script_MYANMAR;
	if (codepoint >= 0xAA60 && codepoint <= 0xAA6F) return Unicode_Script_MYANMAR;
	if (codepoint == 0xAA70) return Unicode_Script_MYANMAR;
	if (codepoint >= 0xAA71 && codepoint <= 0xAA76) return Unicode_Script_MYANMAR;
	if (codepoint >= 0xAA77 && codepoint <= 0xAA79) return Unicode_Script_MYANMAR;
	if (codepoint == 0xAA7A) return Unicode_Script_MYANMAR;
	if (codepoint == 0xAA7B) return Unicode_Script_MYANMAR;
	if (codepoint == 0xAA7C) return Unicode_Script_MYANMAR;
	if (codepoint == 0xAA7D) return Unicode_Script_MYANMAR;
	if (codepoint >= 0xAA7E && codepoint <= 0xAA7F) return Unicode_Script_MYANMAR;
	if (codepoint >= 0x10A0 && codepoint <= 0x10C5) return Unicode_Script_GEORGIAN;
	if (codepoint == 0x10C7) return Unicode_Script_GEORGIAN;
	if (codepoint == 0x10CD) return Unicode_Script_GEORGIAN;
	if (codepoint >= 0x10D0 && codepoint <= 0x10FA) return Unicode_Script_GEORGIAN;
	if (codepoint == 0x10FC) return Unicode_Script_GEORGIAN;
	if (codepoint >= 0x10FD && codepoint <= 0x10FF) return Unicode_Script_GEORGIAN;
	if (codepoint >= 0x1C90 && codepoint <= 0x1CBA) return Unicode_Script_GEORGIAN;
	if (codepoint >= 0x1CBD && codepoint <= 0x1CBF) return Unicode_Script_GEORGIAN;
	if (codepoint >= 0x2D00 && codepoint <= 0x2D25) return Unicode_Script_GEORGIAN;
	if (codepoint == 0x2D27) return Unicode_Script_GEORGIAN;
	if (codepoint == 0x2D2D) return Unicode_Script_GEORGIAN;
	if (codepoint >= 0x1100 && codepoint <= 0x11FF) return Unicode_Script_HANGUL;
	if (codepoint >= 0x302E && codepoint <= 0x302F) return Unicode_Script_HANGUL;
	if (codepoint >= 0x3131 && codepoint <= 0x318E) return Unicode_Script_HANGUL;
	if (codepoint >= 0x3200 && codepoint <= 0x321E) return Unicode_Script_HANGUL;
	if (codepoint >= 0x3260 && codepoint <= 0x327E) return Unicode_Script_HANGUL;
	if (codepoint >= 0xA960 && codepoint <= 0xA97C) return Unicode_Script_HANGUL;
	if (codepoint >= 0xAC00 && codepoint <= 0xD7A3) return Unicode_Script_HANGUL;
	if (codepoint >= 0xD7B0 && codepoint <= 0xD7C6) return Unicode_Script_HANGUL;
	if (codepoint >= 0xD7CB && codepoint <= 0xD7FB) return Unicode_Script_HANGUL;
	if (codepoint >= 0xFFA0 && codepoint <= 0xFFBE) return Unicode_Script_HANGUL;
	if (codepoint >= 0xFFC2 && codepoint <= 0xFFC7) return Unicode_Script_HANGUL;
	if (codepoint >= 0xFFCA && codepoint <= 0xFFCF) return Unicode_Script_HANGUL;
	if (codepoint >= 0xFFD2 && codepoint <= 0xFFD7) return Unicode_Script_HANGUL;
	if (codepoint >= 0xFFDA && codepoint <= 0xFFDC) return Unicode_Script_HANGUL;
	if (codepoint >= 0x1200 && codepoint <= 0x1248) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x124A && codepoint <= 0x124D) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x1250 && codepoint <= 0x1256) return Unicode_Script_ETHIOPIC;
	if (codepoint == 0x1258) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x125A && codepoint <= 0x125D) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x1260 && codepoint <= 0x1288) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x128A && codepoint <= 0x128D) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x1290 && codepoint <= 0x12B0) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x12B2 && codepoint <= 0x12B5) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x12B8 && codepoint <= 0x12BE) return Unicode_Script_ETHIOPIC;
	if (codepoint == 0x12C0) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x12C2 && codepoint <= 0x12C5) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x12C8 && codepoint <= 0x12D6) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x12D8 && codepoint <= 0x1310) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x1312 && codepoint <= 0x1315) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x1318 && codepoint <= 0x135A) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x135D && codepoint <= 0x135F) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x1360 && codepoint <= 0x1368) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x1369 && codepoint <= 0x137C) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x1380 && codepoint <= 0x138F) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x1390 && codepoint <= 0x1399) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x2D80 && codepoint <= 0x2D96) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x2DA0 && codepoint <= 0x2DA6) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x2DA8 && codepoint <= 0x2DAE) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x2DB0 && codepoint <= 0x2DB6) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x2DB8 && codepoint <= 0x2DBE) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x2DC0 && codepoint <= 0x2DC6) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x2DC8 && codepoint <= 0x2DCE) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x2DD0 && codepoint <= 0x2DD6) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x2DD8 && codepoint <= 0x2DDE) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0xAB01 && codepoint <= 0xAB06) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0xAB09 && codepoint <= 0xAB0E) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0xAB11 && codepoint <= 0xAB16) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0xAB20 && codepoint <= 0xAB26) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0xAB28 && codepoint <= 0xAB2E) return Unicode_Script_ETHIOPIC;
	if (codepoint >= 0x13A0 && codepoint <= 0x13F5) return Unicode_Script_CHEROKEE;
	if (codepoint >= 0x13F8 && codepoint <= 0x13FD) return Unicode_Script_CHEROKEE;
	if (codepoint >= 0xAB70 && codepoint <= 0xABBF) return Unicode_Script_CHEROKEE;
	if (codepoint == 0x1400) return Unicode_Script_CANADIAN_ABORIGINAL;
	if (codepoint >= 0x1401 && codepoint <= 0x166C) return Unicode_Script_CANADIAN_ABORIGINAL;
	if (codepoint == 0x166D) return Unicode_Script_CANADIAN_ABORIGINAL;
	if (codepoint == 0x166E) return Unicode_Script_CANADIAN_ABORIGINAL;
	if (codepoint >= 0x166F && codepoint <= 0x167F) return Unicode_Script_CANADIAN_ABORIGINAL;
	if (codepoint >= 0x18B0 && codepoint <= 0x18F5) return Unicode_Script_CANADIAN_ABORIGINAL;
	if (codepoint == 0x1680) return Unicode_Script_OGHAM;
	if (codepoint >= 0x1681 && codepoint <= 0x169A) return Unicode_Script_OGHAM;
	if (codepoint == 0x169B) return Unicode_Script_OGHAM;
	if (codepoint == 0x169C) return Unicode_Script_OGHAM;
	if (codepoint >= 0x16A0 && codepoint <= 0x16EA) return Unicode_Script_RUNIC;
	if (codepoint >= 0x16EE && codepoint <= 0x16F0) return Unicode_Script_RUNIC;
	if (codepoint >= 0x16F1 && codepoint <= 0x16F8) return Unicode_Script_RUNIC;
	if (codepoint >= 0x1780 && codepoint <= 0x17B3) return Unicode_Script_KHMER;
	if (codepoint >= 0x17B4 && codepoint <= 0x17B5) return Unicode_Script_KHMER;
	if (codepoint == 0x17B6) return Unicode_Script_KHMER;
	if (codepoint >= 0x17B7 && codepoint <= 0x17BD) return Unicode_Script_KHMER;
	if (codepoint >= 0x17BE && codepoint <= 0x17C5) return Unicode_Script_KHMER;
	if (codepoint == 0x17C6) return Unicode_Script_KHMER;
	if (codepoint >= 0x17C7 && codepoint <= 0x17C8) return Unicode_Script_KHMER;
	if (codepoint >= 0x17C9 && codepoint <= 0x17D3) return Unicode_Script_KHMER;
	if (codepoint >= 0x17D4 && codepoint <= 0x17D6) return Unicode_Script_KHMER;
	if (codepoint == 0x17D7) return Unicode_Script_KHMER;
	if (codepoint >= 0x17D8 && codepoint <= 0x17DA) return Unicode_Script_KHMER;
	if (codepoint == 0x17DB) return Unicode_Script_KHMER;
	if (codepoint == 0x17DC) return Unicode_Script_KHMER;
	if (codepoint == 0x17DD) return Unicode_Script_KHMER;
	if (codepoint >= 0x17E0 && codepoint <= 0x17E9) return Unicode_Script_KHMER;
	if (codepoint >= 0x17F0 && codepoint <= 0x17F9) return Unicode_Script_KHMER;
	if (codepoint >= 0x19E0 && codepoint <= 0x19FF) return Unicode_Script_KHMER;
	if (codepoint >= 0x1800 && codepoint <= 0x1801) return Unicode_Script_MONGOLIAN;
	if (codepoint == 0x1804) return Unicode_Script_MONGOLIAN;
	if (codepoint == 0x1806) return Unicode_Script_MONGOLIAN;
	if (codepoint >= 0x1807 && codepoint <= 0x180A) return Unicode_Script_MONGOLIAN;
	if (codepoint >= 0x180B && codepoint <= 0x180D) return Unicode_Script_MONGOLIAN;
	if (codepoint == 0x180E) return Unicode_Script_MONGOLIAN;
	if (codepoint >= 0x1810 && codepoint <= 0x1819) return Unicode_Script_MONGOLIAN;
	if (codepoint >= 0x1820 && codepoint <= 0x1842) return Unicode_Script_MONGOLIAN;
	if (codepoint == 0x1843) return Unicode_Script_MONGOLIAN;
	if (codepoint >= 0x1844 && codepoint <= 0x1878) return Unicode_Script_MONGOLIAN;
	if (codepoint >= 0x1880 && codepoint <= 0x1884) return Unicode_Script_MONGOLIAN;
	if (codepoint >= 0x1885 && codepoint <= 0x1886) return Unicode_Script_MONGOLIAN;
	if (codepoint >= 0x1887 && codepoint <= 0x18A8) return Unicode_Script_MONGOLIAN;
	if (codepoint == 0x18A9) return Unicode_Script_MONGOLIAN;
	if (codepoint == 0x18AA) return Unicode_Script_MONGOLIAN;
	if (codepoint >= 0x11660 && codepoint <= 0x1166C) return Unicode_Script_MONGOLIAN;
	if (codepoint >= 0x3041 && codepoint <= 0x3096) return Unicode_Script_HIRAGANA;
	if (codepoint >= 0x309D && codepoint <= 0x309E) return Unicode_Script_HIRAGANA;
	if (codepoint == 0x309F) return Unicode_Script_HIRAGANA;
	if (codepoint >= 0x1B001 && codepoint <= 0x1B11E) return Unicode_Script_HIRAGANA;
	if (codepoint >= 0x1B150 && codepoint <= 0x1B152) return Unicode_Script_HIRAGANA;
	if (codepoint == 0x1F200) return Unicode_Script_HIRAGANA;
	if (codepoint >= 0x30A1 && codepoint <= 0x30FA) return Unicode_Script_KATAKANA;
	if (codepoint >= 0x30FD && codepoint <= 0x30FE) return Unicode_Script_KATAKANA;
	if (codepoint == 0x30FF) return Unicode_Script_KATAKANA;
	if (codepoint >= 0x31F0 && codepoint <= 0x31FF) return Unicode_Script_KATAKANA;
	if (codepoint >= 0x32D0 && codepoint <= 0x32FE) return Unicode_Script_KATAKANA;
	if (codepoint >= 0x3300 && codepoint <= 0x3357) return Unicode_Script_KATAKANA;
	if (codepoint >= 0xFF66 && codepoint <= 0xFF6F) return Unicode_Script_KATAKANA;
	if (codepoint >= 0xFF71 && codepoint <= 0xFF9D) return Unicode_Script_KATAKANA;
	if (codepoint == 0x1B000) return Unicode_Script_KATAKANA;
	if (codepoint >= 0x1B164 && codepoint <= 0x1B167) return Unicode_Script_KATAKANA;
	if (codepoint >= 0x02EA && codepoint <= 0x02EB) return Unicode_Script_BOPOMOFO;
	if (codepoint >= 0x3105 && codepoint <= 0x312F) return Unicode_Script_BOPOMOFO;
	if (codepoint >= 0x31A0 && codepoint <= 0x31BF) return Unicode_Script_BOPOMOFO;
	if (codepoint >= 0x2E80 && codepoint <= 0x2E99) return Unicode_Script_HAN;
	if (codepoint >= 0x2E9B && codepoint <= 0x2EF3) return Unicode_Script_HAN;
	if (codepoint >= 0x2F00 && codepoint <= 0x2FD5) return Unicode_Script_HAN;
	if (codepoint == 0x3005) return Unicode_Script_HAN;
	if (codepoint == 0x3007) return Unicode_Script_HAN;
	if (codepoint >= 0x3021 && codepoint <= 0x3029) return Unicode_Script_HAN;
	if (codepoint >= 0x3038 && codepoint <= 0x303A) return Unicode_Script_HAN;
	if (codepoint == 0x303B) return Unicode_Script_HAN;
	if (codepoint >= 0x3400 && codepoint <= 0x4DBF) return Unicode_Script_HAN;
	if (codepoint >= 0x4E00 && codepoint <= 0x9FFC) return Unicode_Script_HAN;
	if (codepoint >= 0xF900 && codepoint <= 0xFA6D) return Unicode_Script_HAN;
	if (codepoint >= 0xFA70 && codepoint <= 0xFAD9) return Unicode_Script_HAN;
	if (codepoint >= 0x16FF0 && codepoint <= 0x16FF1) return Unicode_Script_HAN;
	if (codepoint >= 0x20000 && codepoint <= 0x2A6DD) return Unicode_Script_HAN;
	if (codepoint >= 0x2A700 && codepoint <= 0x2B734) return Unicode_Script_HAN;
	if (codepoint >= 0x2B740 && codepoint <= 0x2B81D) return Unicode_Script_HAN;
	if (codepoint >= 0x2B820 && codepoint <= 0x2CEA1) return Unicode_Script_HAN;
	if (codepoint >= 0x2CEB0 && codepoint <= 0x2EBE0) return Unicode_Script_HAN;
	if (codepoint >= 0x2F800 && codepoint <= 0x2FA1D) return Unicode_Script_HAN;
	if (codepoint >= 0x30000 && codepoint <= 0x3134A) return Unicode_Script_HAN;
	if (codepoint >= 0xA000 && codepoint <= 0xA014) return Unicode_Script_YI;
	if (codepoint == 0xA015) return Unicode_Script_YI;
	if (codepoint >= 0xA016 && codepoint <= 0xA48C) return Unicode_Script_YI;
	if (codepoint >= 0xA490 && codepoint <= 0xA4C6) return Unicode_Script_YI;
	if (codepoint >= 0x10300 && codepoint <= 0x1031F) return Unicode_Script_OLD_ITALIC;
	if (codepoint >= 0x10320 && codepoint <= 0x10323) return Unicode_Script_OLD_ITALIC;
	if (codepoint >= 0x1032D && codepoint <= 0x1032F) return Unicode_Script_OLD_ITALIC;
	if (codepoint >= 0x10330 && codepoint <= 0x10340) return Unicode_Script_GOTHIC;
	if (codepoint == 0x10341) return Unicode_Script_GOTHIC;
	if (codepoint >= 0x10342 && codepoint <= 0x10349) return Unicode_Script_GOTHIC;
	if (codepoint == 0x1034A) return Unicode_Script_GOTHIC;
	if (codepoint >= 0x10400 && codepoint <= 0x1044F) return Unicode_Script_DESERET;
	if (codepoint >= 0x0300 && codepoint <= 0x036F) return Unicode_Script_INHERITED;
	if (codepoint >= 0x0485 && codepoint <= 0x0486) return Unicode_Script_INHERITED;
	if (codepoint >= 0x064B && codepoint <= 0x0655) return Unicode_Script_INHERITED;
	if (codepoint == 0x0670) return Unicode_Script_INHERITED;
	if (codepoint >= 0x0951 && codepoint <= 0x0954) return Unicode_Script_INHERITED;
	if (codepoint >= 0x1AB0 && codepoint <= 0x1ABD) return Unicode_Script_INHERITED;
	if (codepoint == 0x1ABE) return Unicode_Script_INHERITED;
	if (codepoint >= 0x1ABF && codepoint <= 0x1AC0) return Unicode_Script_INHERITED;
	if (codepoint >= 0x1CD0 && codepoint <= 0x1CD2) return Unicode_Script_INHERITED;
	if (codepoint >= 0x1CD4 && codepoint <= 0x1CE0) return Unicode_Script_INHERITED;
	if (codepoint >= 0x1CE2 && codepoint <= 0x1CE8) return Unicode_Script_INHERITED;
	if (codepoint == 0x1CED) return Unicode_Script_INHERITED;
	if (codepoint == 0x1CF4) return Unicode_Script_INHERITED;
	if (codepoint >= 0x1CF8 && codepoint <= 0x1CF9) return Unicode_Script_INHERITED;
	if (codepoint >= 0x1DC0 && codepoint <= 0x1DF9) return Unicode_Script_INHERITED;
	if (codepoint >= 0x1DFB && codepoint <= 0x1DFF) return Unicode_Script_INHERITED;
	if (codepoint >= 0x200C && codepoint <= 0x200D) return Unicode_Script_INHERITED;
	if (codepoint >= 0x20D0 && codepoint <= 0x20DC) return Unicode_Script_INHERITED;
	if (codepoint >= 0x20DD && codepoint <= 0x20E0) return Unicode_Script_INHERITED;
	if (codepoint == 0x20E1) return Unicode_Script_INHERITED;
	if (codepoint >= 0x20E2 && codepoint <= 0x20E4) return Unicode_Script_INHERITED;
	if (codepoint >= 0x20E5 && codepoint <= 0x20F0) return Unicode_Script_INHERITED;
	if (codepoint >= 0x302A && codepoint <= 0x302D) return Unicode_Script_INHERITED;
	if (codepoint >= 0x3099 && codepoint <= 0x309A) return Unicode_Script_INHERITED;
	if (codepoint >= 0xFE00 && codepoint <= 0xFE0F) return Unicode_Script_INHERITED;
	if (codepoint >= 0xFE20 && codepoint <= 0xFE2D) return Unicode_Script_INHERITED;
	if (codepoint == 0x101FD) return Unicode_Script_INHERITED;
	if (codepoint == 0x102E0) return Unicode_Script_INHERITED;
	if (codepoint == 0x1133B) return Unicode_Script_INHERITED;
	if (codepoint >= 0x1D167 && codepoint <= 0x1D169) return Unicode_Script_INHERITED;
	if (codepoint >= 0x1D17B && codepoint <= 0x1D182) return Unicode_Script_INHERITED;
	if (codepoint >= 0x1D185 && codepoint <= 0x1D18B) return Unicode_Script_INHERITED;
	if (codepoint >= 0x1D1AA && codepoint <= 0x1D1AD) return Unicode_Script_INHERITED;
	if (codepoint >= 0xE0100 && codepoint <= 0xE01EF) return Unicode_Script_INHERITED;
	if (codepoint >= 0x1700 && codepoint <= 0x170C) return Unicode_Script_TAGALOG;
	if (codepoint >= 0x170E && codepoint <= 0x1711) return Unicode_Script_TAGALOG;
	if (codepoint >= 0x1712 && codepoint <= 0x1714) return Unicode_Script_TAGALOG;
	if (codepoint >= 0x1720 && codepoint <= 0x1731) return Unicode_Script_HANUNOO;
	if (codepoint >= 0x1732 && codepoint <= 0x1734) return Unicode_Script_HANUNOO;
	if (codepoint >= 0x1740 && codepoint <= 0x1751) return Unicode_Script_BUHID;
	if (codepoint >= 0x1752 && codepoint <= 0x1753) return Unicode_Script_BUHID;
	if (codepoint >= 0x1760 && codepoint <= 0x176C) return Unicode_Script_TAGBANWA;
	if (codepoint >= 0x176E && codepoint <= 0x1770) return Unicode_Script_TAGBANWA;
	if (codepoint >= 0x1772 && codepoint <= 0x1773) return Unicode_Script_TAGBANWA;
	if (codepoint >= 0x1900 && codepoint <= 0x191E) return Unicode_Script_LIMBU;
	if (codepoint >= 0x1920 && codepoint <= 0x1922) return Unicode_Script_LIMBU;
	if (codepoint >= 0x1923 && codepoint <= 0x1926) return Unicode_Script_LIMBU;
	if (codepoint >= 0x1927 && codepoint <= 0x1928) return Unicode_Script_LIMBU;
	if (codepoint >= 0x1929 && codepoint <= 0x192B) return Unicode_Script_LIMBU;
	if (codepoint >= 0x1930 && codepoint <= 0x1931) return Unicode_Script_LIMBU;
	if (codepoint == 0x1932) return Unicode_Script_LIMBU;
	if (codepoint >= 0x1933 && codepoint <= 0x1938) return Unicode_Script_LIMBU;
	if (codepoint >= 0x1939 && codepoint <= 0x193B) return Unicode_Script_LIMBU;
	if (codepoint == 0x1940) return Unicode_Script_LIMBU;
	if (codepoint >= 0x1944 && codepoint <= 0x1945) return Unicode_Script_LIMBU;
	if (codepoint >= 0x1946 && codepoint <= 0x194F) return Unicode_Script_LIMBU;
	if (codepoint >= 0x1950 && codepoint <= 0x196D) return Unicode_Script_TAI_LE;
	if (codepoint >= 0x1970 && codepoint <= 0x1974) return Unicode_Script_TAI_LE;
	if (codepoint >= 0x10000 && codepoint <= 0x1000B) return Unicode_Script_LINEAR_B;
	if (codepoint >= 0x1000D && codepoint <= 0x10026) return Unicode_Script_LINEAR_B;
	if (codepoint >= 0x10028 && codepoint <= 0x1003A) return Unicode_Script_LINEAR_B;
	if (codepoint >= 0x1003C && codepoint <= 0x1003D) return Unicode_Script_LINEAR_B;
	if (codepoint >= 0x1003F && codepoint <= 0x1004D) return Unicode_Script_LINEAR_B;
	if (codepoint >= 0x10050 && codepoint <= 0x1005D) return Unicode_Script_LINEAR_B;
	if (codepoint >= 0x10080 && codepoint <= 0x100FA) return Unicode_Script_LINEAR_B;
	if (codepoint >= 0x10380 && codepoint <= 0x1039D) return Unicode_Script_UGARITIC;
	if (codepoint == 0x1039F) return Unicode_Script_UGARITIC;
	if (codepoint >= 0x10450 && codepoint <= 0x1047F) return Unicode_Script_SHAVIAN;
	if (codepoint >= 0x10480 && codepoint <= 0x1049D) return Unicode_Script_OSMANYA;
	if (codepoint >= 0x104A0 && codepoint <= 0x104A9) return Unicode_Script_OSMANYA;
	if (codepoint >= 0x10800 && codepoint <= 0x10805) return Unicode_Script_CYPRIOT;
	if (codepoint == 0x10808) return Unicode_Script_CYPRIOT;
	if (codepoint >= 0x1080A && codepoint <= 0x10835) return Unicode_Script_CYPRIOT;
	if (codepoint >= 0x10837 && codepoint <= 0x10838) return Unicode_Script_CYPRIOT;
	if (codepoint == 0x1083C) return Unicode_Script_CYPRIOT;
	if (codepoint == 0x1083F) return Unicode_Script_CYPRIOT;
	if (codepoint >= 0x2800 && codepoint <= 0x28FF) return Unicode_Script_BRAILLE;
	if (codepoint >= 0x1A00 && codepoint <= 0x1A16) return Unicode_Script_BUGINESE;
	if (codepoint >= 0x1A17 && codepoint <= 0x1A18) return Unicode_Script_BUGINESE;
	if (codepoint >= 0x1A19 && codepoint <= 0x1A1A) return Unicode_Script_BUGINESE;
	if (codepoint == 0x1A1B) return Unicode_Script_BUGINESE;
	if (codepoint >= 0x1A1E && codepoint <= 0x1A1F) return Unicode_Script_BUGINESE;
	if (codepoint >= 0x03E2 && codepoint <= 0x03EF) return Unicode_Script_COPTIC;
	if (codepoint >= 0x2C80 && codepoint <= 0x2CE4) return Unicode_Script_COPTIC;
	if (codepoint >= 0x2CE5 && codepoint <= 0x2CEA) return Unicode_Script_COPTIC;
	if (codepoint >= 0x2CEB && codepoint <= 0x2CEE) return Unicode_Script_COPTIC;
	if (codepoint >= 0x2CEF && codepoint <= 0x2CF1) return Unicode_Script_COPTIC;
	if (codepoint >= 0x2CF2 && codepoint <= 0x2CF3) return Unicode_Script_COPTIC;
	if (codepoint >= 0x2CF9 && codepoint <= 0x2CFC) return Unicode_Script_COPTIC;
	if (codepoint == 0x2CFD) return Unicode_Script_COPTIC;
	if (codepoint >= 0x2CFE && codepoint <= 0x2CFF) return Unicode_Script_COPTIC;
	if (codepoint >= 0x1980 && codepoint <= 0x19AB) return Unicode_Script_NEW_TAI_LUE;
	if (codepoint >= 0x19B0 && codepoint <= 0x19C9) return Unicode_Script_NEW_TAI_LUE;
	if (codepoint >= 0x19D0 && codepoint <= 0x19D9) return Unicode_Script_NEW_TAI_LUE;
	if (codepoint == 0x19DA) return Unicode_Script_NEW_TAI_LUE;
	if (codepoint >= 0x19DE && codepoint <= 0x19DF) return Unicode_Script_NEW_TAI_LUE;
	if (codepoint >= 0x2C00 && codepoint <= 0x2C2E) return Unicode_Script_GLAGOLITIC;
	if (codepoint >= 0x2C30 && codepoint <= 0x2C5E) return Unicode_Script_GLAGOLITIC;
	if (codepoint >= 0x1E000 && codepoint <= 0x1E006) return Unicode_Script_GLAGOLITIC;
	if (codepoint >= 0x1E008 && codepoint <= 0x1E018) return Unicode_Script_GLAGOLITIC;
	if (codepoint >= 0x1E01B && codepoint <= 0x1E021) return Unicode_Script_GLAGOLITIC;
	if (codepoint >= 0x1E023 && codepoint <= 0x1E024) return Unicode_Script_GLAGOLITIC;
	if (codepoint >= 0x1E026 && codepoint <= 0x1E02A) return Unicode_Script_GLAGOLITIC;
	if (codepoint >= 0x2D30 && codepoint <= 0x2D67) return Unicode_Script_TIFINAGH;
	if (codepoint == 0x2D6F) return Unicode_Script_TIFINAGH;
	if (codepoint == 0x2D70) return Unicode_Script_TIFINAGH;
	if (codepoint == 0x2D7F) return Unicode_Script_TIFINAGH;
	if (codepoint >= 0xA800 && codepoint <= 0xA801) return Unicode_Script_SYLOTI_NAGRI;
	if (codepoint == 0xA802) return Unicode_Script_SYLOTI_NAGRI;
	if (codepoint >= 0xA803 && codepoint <= 0xA805) return Unicode_Script_SYLOTI_NAGRI;
	if (codepoint == 0xA806) return Unicode_Script_SYLOTI_NAGRI;
	if (codepoint >= 0xA807 && codepoint <= 0xA80A) return Unicode_Script_SYLOTI_NAGRI;
	if (codepoint == 0xA80B) return Unicode_Script_SYLOTI_NAGRI;
	if (codepoint >= 0xA80C && codepoint <= 0xA822) return Unicode_Script_SYLOTI_NAGRI;
	if (codepoint >= 0xA823 && codepoint <= 0xA824) return Unicode_Script_SYLOTI_NAGRI;
	if (codepoint >= 0xA825 && codepoint <= 0xA826) return Unicode_Script_SYLOTI_NAGRI;
	if (codepoint == 0xA827) return Unicode_Script_SYLOTI_NAGRI;
	if (codepoint >= 0xA828 && codepoint <= 0xA82B) return Unicode_Script_SYLOTI_NAGRI;
	if (codepoint == 0xA82C) return Unicode_Script_SYLOTI_NAGRI;
	if (codepoint >= 0x103A0 && codepoint <= 0x103C3) return Unicode_Script_OLD_PERSIAN;
	if (codepoint >= 0x103C8 && codepoint <= 0x103CF) return Unicode_Script_OLD_PERSIAN;
	if (codepoint == 0x103D0) return Unicode_Script_OLD_PERSIAN;
	if (codepoint >= 0x103D1 && codepoint <= 0x103D5) return Unicode_Script_OLD_PERSIAN;
	if (codepoint == 0x10A00) return Unicode_Script_KHAROSHTHI;
	if (codepoint >= 0x10A01 && codepoint <= 0x10A03) return Unicode_Script_KHAROSHTHI;
	if (codepoint >= 0x10A05 && codepoint <= 0x10A06) return Unicode_Script_KHAROSHTHI;
	if (codepoint >= 0x10A0C && codepoint <= 0x10A0F) return Unicode_Script_KHAROSHTHI;
	if (codepoint >= 0x10A10 && codepoint <= 0x10A13) return Unicode_Script_KHAROSHTHI;
	if (codepoint >= 0x10A15 && codepoint <= 0x10A17) return Unicode_Script_KHAROSHTHI;
	if (codepoint >= 0x10A19 && codepoint <= 0x10A35) return Unicode_Script_KHAROSHTHI;
	if (codepoint >= 0x10A38 && codepoint <= 0x10A3A) return Unicode_Script_KHAROSHTHI;
	if (codepoint == 0x10A3F) return Unicode_Script_KHAROSHTHI;
	if (codepoint >= 0x10A40 && codepoint <= 0x10A48) return Unicode_Script_KHAROSHTHI;
	if (codepoint >= 0x10A50 && codepoint <= 0x10A58) return Unicode_Script_KHAROSHTHI;
	if (codepoint >= 0x1B00 && codepoint <= 0x1B03) return Unicode_Script_BALINESE;
	if (codepoint == 0x1B04) return Unicode_Script_BALINESE;
	if (codepoint >= 0x1B05 && codepoint <= 0x1B33) return Unicode_Script_BALINESE;
	if (codepoint == 0x1B34) return Unicode_Script_BALINESE;
	if (codepoint == 0x1B35) return Unicode_Script_BALINESE;
	if (codepoint >= 0x1B36 && codepoint <= 0x1B3A) return Unicode_Script_BALINESE;
	if (codepoint == 0x1B3B) return Unicode_Script_BALINESE;
	if (codepoint == 0x1B3C) return Unicode_Script_BALINESE;
	if (codepoint >= 0x1B3D && codepoint <= 0x1B41) return Unicode_Script_BALINESE;
	if (codepoint == 0x1B42) return Unicode_Script_BALINESE;
	if (codepoint >= 0x1B43 && codepoint <= 0x1B44) return Unicode_Script_BALINESE;
	if (codepoint >= 0x1B45 && codepoint <= 0x1B4B) return Unicode_Script_BALINESE;
	if (codepoint >= 0x1B50 && codepoint <= 0x1B59) return Unicode_Script_BALINESE;
	if (codepoint >= 0x1B5A && codepoint <= 0x1B60) return Unicode_Script_BALINESE;
	if (codepoint >= 0x1B61 && codepoint <= 0x1B6A) return Unicode_Script_BALINESE;
	if (codepoint >= 0x1B6B && codepoint <= 0x1B73) return Unicode_Script_BALINESE;
	if (codepoint >= 0x1B74 && codepoint <= 0x1B7C) return Unicode_Script_BALINESE;
	if (codepoint >= 0x12000 && codepoint <= 0x12399) return Unicode_Script_CUNEIFORM;
	if (codepoint >= 0x12400 && codepoint <= 0x1246E) return Unicode_Script_CUNEIFORM;
	if (codepoint >= 0x12470 && codepoint <= 0x12474) return Unicode_Script_CUNEIFORM;
	if (codepoint >= 0x12480 && codepoint <= 0x12543) return Unicode_Script_CUNEIFORM;
	if (codepoint >= 0x10900 && codepoint <= 0x10915) return Unicode_Script_PHOENICIAN;
	if (codepoint >= 0x10916 && codepoint <= 0x1091B) return Unicode_Script_PHOENICIAN;
	if (codepoint == 0x1091F) return Unicode_Script_PHOENICIAN;
	if (codepoint >= 0xA840 && codepoint <= 0xA873) return Unicode_Script_PHAGS_PA;
	if (codepoint >= 0xA874 && codepoint <= 0xA877) return Unicode_Script_PHAGS_PA;
	if (codepoint >= 0x07C0 && codepoint <= 0x07C9) return Unicode_Script_NKO;
	if (codepoint >= 0x07CA && codepoint <= 0x07EA) return Unicode_Script_NKO;
	if (codepoint >= 0x07EB && codepoint <= 0x07F3) return Unicode_Script_NKO;
	if (codepoint >= 0x07F4 && codepoint <= 0x07F5) return Unicode_Script_NKO;
	if (codepoint == 0x07F6) return Unicode_Script_NKO;
	if (codepoint >= 0x07F7 && codepoint <= 0x07F9) return Unicode_Script_NKO;
	if (codepoint == 0x07FA) return Unicode_Script_NKO;
	if (codepoint == 0x07FD) return Unicode_Script_NKO;
	if (codepoint >= 0x07FE && codepoint <= 0x07FF) return Unicode_Script_NKO;
	if (codepoint >= 0x1B80 && codepoint <= 0x1B81) return Unicode_Script_SUNDANESE;
	if (codepoint == 0x1B82) return Unicode_Script_SUNDANESE;
	if (codepoint >= 0x1B83 && codepoint <= 0x1BA0) return Unicode_Script_SUNDANESE;
	if (codepoint == 0x1BA1) return Unicode_Script_SUNDANESE;
	if (codepoint >= 0x1BA2 && codepoint <= 0x1BA5) return Unicode_Script_SUNDANESE;
	if (codepoint >= 0x1BA6 && codepoint <= 0x1BA7) return Unicode_Script_SUNDANESE;
	if (codepoint >= 0x1BA8 && codepoint <= 0x1BA9) return Unicode_Script_SUNDANESE;
	if (codepoint == 0x1BAA) return Unicode_Script_SUNDANESE;
	if (codepoint >= 0x1BAB && codepoint <= 0x1BAD) return Unicode_Script_SUNDANESE;
	if (codepoint >= 0x1BAE && codepoint <= 0x1BAF) return Unicode_Script_SUNDANESE;
	if (codepoint >= 0x1BB0 && codepoint <= 0x1BB9) return Unicode_Script_SUNDANESE;
	if (codepoint >= 0x1BBA && codepoint <= 0x1BBF) return Unicode_Script_SUNDANESE;
	if (codepoint >= 0x1CC0 && codepoint <= 0x1CC7) return Unicode_Script_SUNDANESE;
	if (codepoint >= 0x1C00 && codepoint <= 0x1C23) return Unicode_Script_LEPCHA;
	if (codepoint >= 0x1C24 && codepoint <= 0x1C2B) return Unicode_Script_LEPCHA;
	if (codepoint >= 0x1C2C && codepoint <= 0x1C33) return Unicode_Script_LEPCHA;
	if (codepoint >= 0x1C34 && codepoint <= 0x1C35) return Unicode_Script_LEPCHA;
	if (codepoint >= 0x1C36 && codepoint <= 0x1C37) return Unicode_Script_LEPCHA;
	if (codepoint >= 0x1C3B && codepoint <= 0x1C3F) return Unicode_Script_LEPCHA;
	if (codepoint >= 0x1C40 && codepoint <= 0x1C49) return Unicode_Script_LEPCHA;
	if (codepoint >= 0x1C4D && codepoint <= 0x1C4F) return Unicode_Script_LEPCHA;
	if (codepoint >= 0x1C50 && codepoint <= 0x1C59) return Unicode_Script_OL_CHIKI;
	if (codepoint >= 0x1C5A && codepoint <= 0x1C77) return Unicode_Script_OL_CHIKI;
	if (codepoint >= 0x1C78 && codepoint <= 0x1C7D) return Unicode_Script_OL_CHIKI;
	if (codepoint >= 0x1C7E && codepoint <= 0x1C7F) return Unicode_Script_OL_CHIKI;
	if (codepoint >= 0xA500 && codepoint <= 0xA60B) return Unicode_Script_VAI;
	if (codepoint == 0xA60C) return Unicode_Script_VAI;
	if (codepoint >= 0xA60D && codepoint <= 0xA60F) return Unicode_Script_VAI;
	if (codepoint >= 0xA610 && codepoint <= 0xA61F) return Unicode_Script_VAI;
	if (codepoint >= 0xA620 && codepoint <= 0xA629) return Unicode_Script_VAI;
	if (codepoint >= 0xA62A && codepoint <= 0xA62B) return Unicode_Script_VAI;
	if (codepoint >= 0xA880 && codepoint <= 0xA881) return Unicode_Script_SAURASHTRA;
	if (codepoint >= 0xA882 && codepoint <= 0xA8B3) return Unicode_Script_SAURASHTRA;
	if (codepoint >= 0xA8B4 && codepoint <= 0xA8C3) return Unicode_Script_SAURASHTRA;
	if (codepoint >= 0xA8C4 && codepoint <= 0xA8C5) return Unicode_Script_SAURASHTRA;
	if (codepoint >= 0xA8CE && codepoint <= 0xA8CF) return Unicode_Script_SAURASHTRA;
	if (codepoint >= 0xA8D0 && codepoint <= 0xA8D9) return Unicode_Script_SAURASHTRA;
	if (codepoint >= 0xA900 && codepoint <= 0xA909) return Unicode_Script_KAYAH_LI;
	if (codepoint >= 0xA90A && codepoint <= 0xA925) return Unicode_Script_KAYAH_LI;
	if (codepoint >= 0xA926 && codepoint <= 0xA92D) return Unicode_Script_KAYAH_LI;
	if (codepoint == 0xA92F) return Unicode_Script_KAYAH_LI;
	if (codepoint >= 0xA930 && codepoint <= 0xA946) return Unicode_Script_REJANG;
	if (codepoint >= 0xA947 && codepoint <= 0xA951) return Unicode_Script_REJANG;
	if (codepoint >= 0xA952 && codepoint <= 0xA953) return Unicode_Script_REJANG;
	if (codepoint == 0xA95F) return Unicode_Script_REJANG;
	if (codepoint >= 0x10280 && codepoint <= 0x1029C) return Unicode_Script_LYCIAN;
	if (codepoint >= 0x102A0 && codepoint <= 0x102D0) return Unicode_Script_CARIAN;
	if (codepoint >= 0x10920 && codepoint <= 0x10939) return Unicode_Script_LYDIAN;
	if (codepoint == 0x1093F) return Unicode_Script_LYDIAN;
	if (codepoint >= 0xAA00 && codepoint <= 0xAA28) return Unicode_Script_CHAM;
	if (codepoint >= 0xAA29 && codepoint <= 0xAA2E) return Unicode_Script_CHAM;
	if (codepoint >= 0xAA2F && codepoint <= 0xAA30) return Unicode_Script_CHAM;
	if (codepoint >= 0xAA31 && codepoint <= 0xAA32) return Unicode_Script_CHAM;
	if (codepoint >= 0xAA33 && codepoint <= 0xAA34) return Unicode_Script_CHAM;
	if (codepoint >= 0xAA35 && codepoint <= 0xAA36) return Unicode_Script_CHAM;
	if (codepoint >= 0xAA40 && codepoint <= 0xAA42) return Unicode_Script_CHAM;
	if (codepoint == 0xAA43) return Unicode_Script_CHAM;
	if (codepoint >= 0xAA44 && codepoint <= 0xAA4B) return Unicode_Script_CHAM;
	if (codepoint == 0xAA4C) return Unicode_Script_CHAM;
	if (codepoint == 0xAA4D) return Unicode_Script_CHAM;
	if (codepoint >= 0xAA50 && codepoint <= 0xAA59) return Unicode_Script_CHAM;
	if (codepoint >= 0xAA5C && codepoint <= 0xAA5F) return Unicode_Script_CHAM;
	if (codepoint >= 0x1A20 && codepoint <= 0x1A54) return Unicode_Script_TAI_THAM;
	if (codepoint == 0x1A55) return Unicode_Script_TAI_THAM;
	if (codepoint == 0x1A56) return Unicode_Script_TAI_THAM;
	if (codepoint == 0x1A57) return Unicode_Script_TAI_THAM;
	if (codepoint >= 0x1A58 && codepoint <= 0x1A5E) return Unicode_Script_TAI_THAM;
	if (codepoint == 0x1A60) return Unicode_Script_TAI_THAM;
	if (codepoint == 0x1A61) return Unicode_Script_TAI_THAM;
	if (codepoint == 0x1A62) return Unicode_Script_TAI_THAM;
	if (codepoint >= 0x1A63 && codepoint <= 0x1A64) return Unicode_Script_TAI_THAM;
	if (codepoint >= 0x1A65 && codepoint <= 0x1A6C) return Unicode_Script_TAI_THAM;
	if (codepoint >= 0x1A6D && codepoint <= 0x1A72) return Unicode_Script_TAI_THAM;
	if (codepoint >= 0x1A73 && codepoint <= 0x1A7C) return Unicode_Script_TAI_THAM;
	if (codepoint == 0x1A7F) return Unicode_Script_TAI_THAM;
	if (codepoint >= 0x1A80 && codepoint <= 0x1A89) return Unicode_Script_TAI_THAM;
	if (codepoint >= 0x1A90 && codepoint <= 0x1A99) return Unicode_Script_TAI_THAM;
	if (codepoint >= 0x1AA0 && codepoint <= 0x1AA6) return Unicode_Script_TAI_THAM;
	if (codepoint == 0x1AA7) return Unicode_Script_TAI_THAM;
	if (codepoint >= 0x1AA8 && codepoint <= 0x1AAD) return Unicode_Script_TAI_THAM;
	if (codepoint >= 0xAA80 && codepoint <= 0xAAAF) return Unicode_Script_TAI_VIET;
	if (codepoint == 0xAAB0) return Unicode_Script_TAI_VIET;
	if (codepoint == 0xAAB1) return Unicode_Script_TAI_VIET;
	if (codepoint >= 0xAAB2 && codepoint <= 0xAAB4) return Unicode_Script_TAI_VIET;
	if (codepoint >= 0xAAB5 && codepoint <= 0xAAB6) return Unicode_Script_TAI_VIET;
	if (codepoint >= 0xAAB7 && codepoint <= 0xAAB8) return Unicode_Script_TAI_VIET;
	if (codepoint >= 0xAAB9 && codepoint <= 0xAABD) return Unicode_Script_TAI_VIET;
	if (codepoint >= 0xAABE && codepoint <= 0xAABF) return Unicode_Script_TAI_VIET;
	if (codepoint == 0xAAC0) return Unicode_Script_TAI_VIET;
	if (codepoint == 0xAAC1) return Unicode_Script_TAI_VIET;
	if (codepoint == 0xAAC2) return Unicode_Script_TAI_VIET;
	if (codepoint >= 0xAADB && codepoint <= 0xAADC) return Unicode_Script_TAI_VIET;
	if (codepoint == 0xAADD) return Unicode_Script_TAI_VIET;
	if (codepoint >= 0xAADE && codepoint <= 0xAADF) return Unicode_Script_TAI_VIET;
	if (codepoint >= 0x10B00 && codepoint <= 0x10B35) return Unicode_Script_AVESTAN;
	if (codepoint >= 0x10B39 && codepoint <= 0x10B3F) return Unicode_Script_AVESTAN;
	if (codepoint >= 0x13000 && codepoint <= 0x1342E) return Unicode_Script_EGYPTIAN_HIEROGLYPHS;
	if (codepoint >= 0x13430 && codepoint <= 0x13438) return Unicode_Script_EGYPTIAN_HIEROGLYPHS;
	if (codepoint >= 0x0800 && codepoint <= 0x0815) return Unicode_Script_SAMARITAN;
	if (codepoint >= 0x0816 && codepoint <= 0x0819) return Unicode_Script_SAMARITAN;
	if (codepoint == 0x081A) return Unicode_Script_SAMARITAN;
	if (codepoint >= 0x081B && codepoint <= 0x0823) return Unicode_Script_SAMARITAN;
	if (codepoint == 0x0824) return Unicode_Script_SAMARITAN;
	if (codepoint >= 0x0825 && codepoint <= 0x0827) return Unicode_Script_SAMARITAN;
	if (codepoint == 0x0828) return Unicode_Script_SAMARITAN;
	if (codepoint >= 0x0829 && codepoint <= 0x082D) return Unicode_Script_SAMARITAN;
	if (codepoint >= 0x0830 && codepoint <= 0x083E) return Unicode_Script_SAMARITAN;
	if (codepoint >= 0xA4D0 && codepoint <= 0xA4F7) return Unicode_Script_LISU;
	if (codepoint >= 0xA4F8 && codepoint <= 0xA4FD) return Unicode_Script_LISU;
	if (codepoint >= 0xA4FE && codepoint <= 0xA4FF) return Unicode_Script_LISU;
	if (codepoint == 0x11FB0) return Unicode_Script_LISU;
	if (codepoint >= 0xA6A0 && codepoint <= 0xA6E5) return Unicode_Script_BAMUM;
	if (codepoint >= 0xA6E6 && codepoint <= 0xA6EF) return Unicode_Script_BAMUM;
	if (codepoint >= 0xA6F0 && codepoint <= 0xA6F1) return Unicode_Script_BAMUM;
	if (codepoint >= 0xA6F2 && codepoint <= 0xA6F7) return Unicode_Script_BAMUM;
	if (codepoint >= 0x16800 && codepoint <= 0x16A38) return Unicode_Script_BAMUM;
	if (codepoint >= 0xA980 && codepoint <= 0xA982) return Unicode_Script_JAVANESE;
	if (codepoint == 0xA983) return Unicode_Script_JAVANESE;
	if (codepoint >= 0xA984 && codepoint <= 0xA9B2) return Unicode_Script_JAVANESE;
	if (codepoint == 0xA9B3) return Unicode_Script_JAVANESE;
	if (codepoint >= 0xA9B4 && codepoint <= 0xA9B5) return Unicode_Script_JAVANESE;
	if (codepoint >= 0xA9B6 && codepoint <= 0xA9B9) return Unicode_Script_JAVANESE;
	if (codepoint >= 0xA9BA && codepoint <= 0xA9BB) return Unicode_Script_JAVANESE;
	if (codepoint >= 0xA9BC && codepoint <= 0xA9BD) return Unicode_Script_JAVANESE;
	if (codepoint >= 0xA9BE && codepoint <= 0xA9C0) return Unicode_Script_JAVANESE;
	if (codepoint >= 0xA9C1 && codepoint <= 0xA9CD) return Unicode_Script_JAVANESE;
	if (codepoint >= 0xA9D0 && codepoint <= 0xA9D9) return Unicode_Script_JAVANESE;
	if (codepoint >= 0xA9DE && codepoint <= 0xA9DF) return Unicode_Script_JAVANESE;
	if (codepoint >= 0xAAE0 && codepoint <= 0xAAEA) return Unicode_Script_MEETEI_MAYEK;
	if (codepoint == 0xAAEB) return Unicode_Script_MEETEI_MAYEK;
	if (codepoint >= 0xAAEC && codepoint <= 0xAAED) return Unicode_Script_MEETEI_MAYEK;
	if (codepoint >= 0xAAEE && codepoint <= 0xAAEF) return Unicode_Script_MEETEI_MAYEK;
	if (codepoint >= 0xAAF0 && codepoint <= 0xAAF1) return Unicode_Script_MEETEI_MAYEK;
	if (codepoint == 0xAAF2) return Unicode_Script_MEETEI_MAYEK;
	if (codepoint >= 0xAAF3 && codepoint <= 0xAAF4) return Unicode_Script_MEETEI_MAYEK;
	if (codepoint == 0xAAF5) return Unicode_Script_MEETEI_MAYEK;
	if (codepoint == 0xAAF6) return Unicode_Script_MEETEI_MAYEK;
	if (codepoint >= 0xABC0 && codepoint <= 0xABE2) return Unicode_Script_MEETEI_MAYEK;
	if (codepoint >= 0xABE3 && codepoint <= 0xABE4) return Unicode_Script_MEETEI_MAYEK;
	if (codepoint == 0xABE5) return Unicode_Script_MEETEI_MAYEK;
	if (codepoint >= 0xABE6 && codepoint <= 0xABE7) return Unicode_Script_MEETEI_MAYEK;
	if (codepoint == 0xABE8) return Unicode_Script_MEETEI_MAYEK;
	if (codepoint >= 0xABE9 && codepoint <= 0xABEA) return Unicode_Script_MEETEI_MAYEK;
	if (codepoint == 0xABEB) return Unicode_Script_MEETEI_MAYEK;
	if (codepoint == 0xABEC) return Unicode_Script_MEETEI_MAYEK;
	if (codepoint == 0xABED) return Unicode_Script_MEETEI_MAYEK;
	if (codepoint >= 0xABF0 && codepoint <= 0xABF9) return Unicode_Script_MEETEI_MAYEK;
	if (codepoint >= 0x10840 && codepoint <= 0x10855) return Unicode_Script_IMPERIAL_ARAMAIC;
	if (codepoint == 0x10857) return Unicode_Script_IMPERIAL_ARAMAIC;
	if (codepoint >= 0x10858 && codepoint <= 0x1085F) return Unicode_Script_IMPERIAL_ARAMAIC;
	if (codepoint >= 0x10A60 && codepoint <= 0x10A7C) return Unicode_Script_OLD_SOUTH_ARABIAN;
	if (codepoint >= 0x10A7D && codepoint <= 0x10A7E) return Unicode_Script_OLD_SOUTH_ARABIAN;
	if (codepoint == 0x10A7F) return Unicode_Script_OLD_SOUTH_ARABIAN;
	if (codepoint >= 0x10B40 && codepoint <= 0x10B55) return Unicode_Script_INSCRIPTIONAL_PARTHIAN;
	if (codepoint >= 0x10B58 && codepoint <= 0x10B5F) return Unicode_Script_INSCRIPTIONAL_PARTHIAN;
	if (codepoint >= 0x10B60 && codepoint <= 0x10B72) return Unicode_Script_INSCRIPTIONAL_PAHLAVI;
	if (codepoint >= 0x10B78 && codepoint <= 0x10B7F) return Unicode_Script_INSCRIPTIONAL_PAHLAVI;
	if (codepoint >= 0x10C00 && codepoint <= 0x10C48) return Unicode_Script_OLD_TURKIC;
	if (codepoint >= 0x11080 && codepoint <= 0x11081) return Unicode_Script_KAITHI;
	if (codepoint == 0x11082) return Unicode_Script_KAITHI;
	if (codepoint >= 0x11083 && codepoint <= 0x110AF) return Unicode_Script_KAITHI;
	if (codepoint >= 0x110B0 && codepoint <= 0x110B2) return Unicode_Script_KAITHI;
	if (codepoint >= 0x110B3 && codepoint <= 0x110B6) return Unicode_Script_KAITHI;
	if (codepoint >= 0x110B7 && codepoint <= 0x110B8) return Unicode_Script_KAITHI;
	if (codepoint >= 0x110B9 && codepoint <= 0x110BA) return Unicode_Script_KAITHI;
	if (codepoint >= 0x110BB && codepoint <= 0x110BC) return Unicode_Script_KAITHI;
	if (codepoint == 0x110BD) return Unicode_Script_KAITHI;
	if (codepoint >= 0x110BE && codepoint <= 0x110C1) return Unicode_Script_KAITHI;
	if (codepoint == 0x110CD) return Unicode_Script_KAITHI;
	if (codepoint >= 0x1BC0 && codepoint <= 0x1BE5) return Unicode_Script_BATAK;
	if (codepoint == 0x1BE6) return Unicode_Script_BATAK;
	if (codepoint == 0x1BE7) return Unicode_Script_BATAK;
	if (codepoint >= 0x1BE8 && codepoint <= 0x1BE9) return Unicode_Script_BATAK;
	if (codepoint >= 0x1BEA && codepoint <= 0x1BEC) return Unicode_Script_BATAK;
	if (codepoint == 0x1BED) return Unicode_Script_BATAK;
	if (codepoint == 0x1BEE) return Unicode_Script_BATAK;
	if (codepoint >= 0x1BEF && codepoint <= 0x1BF1) return Unicode_Script_BATAK;
	if (codepoint >= 0x1BF2 && codepoint <= 0x1BF3) return Unicode_Script_BATAK;
	if (codepoint >= 0x1BFC && codepoint <= 0x1BFF) return Unicode_Script_BATAK;
	if (codepoint == 0x11000) return Unicode_Script_BRAHMI;
	if (codepoint == 0x11001) return Unicode_Script_BRAHMI;
	if (codepoint == 0x11002) return Unicode_Script_BRAHMI;
	if (codepoint >= 0x11003 && codepoint <= 0x11037) return Unicode_Script_BRAHMI;
	if (codepoint >= 0x11038 && codepoint <= 0x11046) return Unicode_Script_BRAHMI;
	if (codepoint >= 0x11047 && codepoint <= 0x1104D) return Unicode_Script_BRAHMI;
	if (codepoint >= 0x11052 && codepoint <= 0x11065) return Unicode_Script_BRAHMI;
	if (codepoint >= 0x11066 && codepoint <= 0x1106F) return Unicode_Script_BRAHMI;
	if (codepoint == 0x1107F) return Unicode_Script_BRAHMI;
	if (codepoint >= 0x0840 && codepoint <= 0x0858) return Unicode_Script_MANDAIC;
	if (codepoint >= 0x0859 && codepoint <= 0x085B) return Unicode_Script_MANDAIC;
	if (codepoint == 0x085E) return Unicode_Script_MANDAIC;
	if (codepoint >= 0x11100 && codepoint <= 0x11102) return Unicode_Script_CHAKMA;
	if (codepoint >= 0x11103 && codepoint <= 0x11126) return Unicode_Script_CHAKMA;
	if (codepoint >= 0x11127 && codepoint <= 0x1112B) return Unicode_Script_CHAKMA;
	if (codepoint == 0x1112C) return Unicode_Script_CHAKMA;
	if (codepoint >= 0x1112D && codepoint <= 0x11134) return Unicode_Script_CHAKMA;
	if (codepoint >= 0x11136 && codepoint <= 0x1113F) return Unicode_Script_CHAKMA;
	if (codepoint >= 0x11140 && codepoint <= 0x11143) return Unicode_Script_CHAKMA;
	if (codepoint == 0x11144) return Unicode_Script_CHAKMA;
	if (codepoint >= 0x11145 && codepoint <= 0x11146) return Unicode_Script_CHAKMA;
	if (codepoint == 0x11147) return Unicode_Script_CHAKMA;
	if (codepoint >= 0x109A0 && codepoint <= 0x109B7) return Unicode_Script_MEROITIC_CURSIVE;
	if (codepoint >= 0x109BC && codepoint <= 0x109BD) return Unicode_Script_MEROITIC_CURSIVE;
	if (codepoint >= 0x109BE && codepoint <= 0x109BF) return Unicode_Script_MEROITIC_CURSIVE;
	if (codepoint >= 0x109C0 && codepoint <= 0x109CF) return Unicode_Script_MEROITIC_CURSIVE;
	if (codepoint >= 0x109D2 && codepoint <= 0x109FF) return Unicode_Script_MEROITIC_CURSIVE;
	if (codepoint >= 0x10980 && codepoint <= 0x1099F) return Unicode_Script_MEROITIC_HIEROGLYPHS;
	if (codepoint >= 0x16F00 && codepoint <= 0x16F4A) return Unicode_Script_MIAO;
	if (codepoint == 0x16F4F) return Unicode_Script_MIAO;
	if (codepoint == 0x16F50) return Unicode_Script_MIAO;
	if (codepoint >= 0x16F51 && codepoint <= 0x16F87) return Unicode_Script_MIAO;
	if (codepoint >= 0x16F8F && codepoint <= 0x16F92) return Unicode_Script_MIAO;
	if (codepoint >= 0x16F93 && codepoint <= 0x16F9F) return Unicode_Script_MIAO;
	if (codepoint >= 0x11180 && codepoint <= 0x11181) return Unicode_Script_SHARADA;
	if (codepoint == 0x11182) return Unicode_Script_SHARADA;
	if (codepoint >= 0x11183 && codepoint <= 0x111B2) return Unicode_Script_SHARADA;
	if (codepoint >= 0x111B3 && codepoint <= 0x111B5) return Unicode_Script_SHARADA;
	if (codepoint >= 0x111B6 && codepoint <= 0x111BE) return Unicode_Script_SHARADA;
	if (codepoint >= 0x111BF && codepoint <= 0x111C0) return Unicode_Script_SHARADA;
	if (codepoint >= 0x111C1 && codepoint <= 0x111C4) return Unicode_Script_SHARADA;
	if (codepoint >= 0x111C5 && codepoint <= 0x111C8) return Unicode_Script_SHARADA;
	if (codepoint >= 0x111C9 && codepoint <= 0x111CC) return Unicode_Script_SHARADA;
	if (codepoint == 0x111CD) return Unicode_Script_SHARADA;
	if (codepoint == 0x111CE) return Unicode_Script_SHARADA;
	if (codepoint == 0x111CF) return Unicode_Script_SHARADA;
	if (codepoint >= 0x111D0 && codepoint <= 0x111D9) return Unicode_Script_SHARADA;
	if (codepoint == 0x111DA) return Unicode_Script_SHARADA;
	if (codepoint == 0x111DB) return Unicode_Script_SHARADA;
	if (codepoint == 0x111DC) return Unicode_Script_SHARADA;
	if (codepoint >= 0x111DD && codepoint <= 0x111DF) return Unicode_Script_SHARADA;
	if (codepoint >= 0x110D0 && codepoint <= 0x110E8) return Unicode_Script_SORA_SOMPENG;
	if (codepoint >= 0x110F0 && codepoint <= 0x110F9) return Unicode_Script_SORA_SOMPENG;
	if (codepoint >= 0x11680 && codepoint <= 0x116AA) return Unicode_Script_TAKRI;
	if (codepoint == 0x116AB) return Unicode_Script_TAKRI;
	if (codepoint == 0x116AC) return Unicode_Script_TAKRI;
	if (codepoint == 0x116AD) return Unicode_Script_TAKRI;
	if (codepoint >= 0x116AE && codepoint <= 0x116AF) return Unicode_Script_TAKRI;
	if (codepoint >= 0x116B0 && codepoint <= 0x116B5) return Unicode_Script_TAKRI;
	if (codepoint == 0x116B6) return Unicode_Script_TAKRI;
	if (codepoint == 0x116B7) return Unicode_Script_TAKRI;
	if (codepoint == 0x116B8) return Unicode_Script_TAKRI;
	if (codepoint >= 0x116C0 && codepoint <= 0x116C9) return Unicode_Script_TAKRI;
	if (codepoint >= 0x10530 && codepoint <= 0x10563) return Unicode_Script_CAUCASIAN_ALBANIAN;
	if (codepoint == 0x1056F) return Unicode_Script_CAUCASIAN_ALBANIAN;
	if (codepoint >= 0x16AD0 && codepoint <= 0x16AED) return Unicode_Script_BASSA_VAH;
	if (codepoint >= 0x16AF0 && codepoint <= 0x16AF4) return Unicode_Script_BASSA_VAH;
	if (codepoint == 0x16AF5) return Unicode_Script_BASSA_VAH;
	if (codepoint >= 0x1BC00 && codepoint <= 0x1BC6A) return Unicode_Script_DUPLOYAN;
	if (codepoint >= 0x1BC70 && codepoint <= 0x1BC7C) return Unicode_Script_DUPLOYAN;
	if (codepoint >= 0x1BC80 && codepoint <= 0x1BC88) return Unicode_Script_DUPLOYAN;
	if (codepoint >= 0x1BC90 && codepoint <= 0x1BC99) return Unicode_Script_DUPLOYAN;
	if (codepoint == 0x1BC9C) return Unicode_Script_DUPLOYAN;
	if (codepoint >= 0x1BC9D && codepoint <= 0x1BC9E) return Unicode_Script_DUPLOYAN;
	if (codepoint == 0x1BC9F) return Unicode_Script_DUPLOYAN;
	if (codepoint >= 0x10500 && codepoint <= 0x10527) return Unicode_Script_ELBASAN;
	if (codepoint >= 0x11300 && codepoint <= 0x11301) return Unicode_Script_GRANTHA;
	if (codepoint >= 0x11302 && codepoint <= 0x11303) return Unicode_Script_GRANTHA;
	if (codepoint >= 0x11305 && codepoint <= 0x1130C) return Unicode_Script_GRANTHA;
	if (codepoint >= 0x1130F && codepoint <= 0x11310) return Unicode_Script_GRANTHA;
	if (codepoint >= 0x11313 && codepoint <= 0x11328) return Unicode_Script_GRANTHA;
	if (codepoint >= 0x1132A && codepoint <= 0x11330) return Unicode_Script_GRANTHA;
	if (codepoint >= 0x11332 && codepoint <= 0x11333) return Unicode_Script_GRANTHA;
	if (codepoint >= 0x11335 && codepoint <= 0x11339) return Unicode_Script_GRANTHA;
	if (codepoint == 0x1133C) return Unicode_Script_GRANTHA;
	if (codepoint == 0x1133D) return Unicode_Script_GRANTHA;
	if (codepoint >= 0x1133E && codepoint <= 0x1133F) return Unicode_Script_GRANTHA;
	if (codepoint == 0x11340) return Unicode_Script_GRANTHA;
	if (codepoint >= 0x11341 && codepoint <= 0x11344) return Unicode_Script_GRANTHA;
	if (codepoint >= 0x11347 && codepoint <= 0x11348) return Unicode_Script_GRANTHA;
	if (codepoint >= 0x1134B && codepoint <= 0x1134D) return Unicode_Script_GRANTHA;
	if (codepoint == 0x11350) return Unicode_Script_GRANTHA;
	if (codepoint == 0x11357) return Unicode_Script_GRANTHA;
	if (codepoint >= 0x1135D && codepoint <= 0x11361) return Unicode_Script_GRANTHA;
	if (codepoint >= 0x11362 && codepoint <= 0x11363) return Unicode_Script_GRANTHA;
	if (codepoint >= 0x11366 && codepoint <= 0x1136C) return Unicode_Script_GRANTHA;
	if (codepoint >= 0x11370 && codepoint <= 0x11374) return Unicode_Script_GRANTHA;
	if (codepoint >= 0x16B00 && codepoint <= 0x16B2F) return Unicode_Script_PAHAWH_HMONG;
	if (codepoint >= 0x16B30 && codepoint <= 0x16B36) return Unicode_Script_PAHAWH_HMONG;
	if (codepoint >= 0x16B37 && codepoint <= 0x16B3B) return Unicode_Script_PAHAWH_HMONG;
	if (codepoint >= 0x16B3C && codepoint <= 0x16B3F) return Unicode_Script_PAHAWH_HMONG;
	if (codepoint >= 0x16B40 && codepoint <= 0x16B43) return Unicode_Script_PAHAWH_HMONG;
	if (codepoint == 0x16B44) return Unicode_Script_PAHAWH_HMONG;
	if (codepoint == 0x16B45) return Unicode_Script_PAHAWH_HMONG;
	if (codepoint >= 0x16B50 && codepoint <= 0x16B59) return Unicode_Script_PAHAWH_HMONG;
	if (codepoint >= 0x16B5B && codepoint <= 0x16B61) return Unicode_Script_PAHAWH_HMONG;
	if (codepoint >= 0x16B63 && codepoint <= 0x16B77) return Unicode_Script_PAHAWH_HMONG;
	if (codepoint >= 0x16B7D && codepoint <= 0x16B8F) return Unicode_Script_PAHAWH_HMONG;
	if (codepoint >= 0x11200 && codepoint <= 0x11211) return Unicode_Script_KHOJKI;
	if (codepoint >= 0x11213 && codepoint <= 0x1122B) return Unicode_Script_KHOJKI;
	if (codepoint >= 0x1122C && codepoint <= 0x1122E) return Unicode_Script_KHOJKI;
	if (codepoint >= 0x1122F && codepoint <= 0x11231) return Unicode_Script_KHOJKI;
	if (codepoint >= 0x11232 && codepoint <= 0x11233) return Unicode_Script_KHOJKI;
	if (codepoint == 0x11234) return Unicode_Script_KHOJKI;
	if (codepoint == 0x11235) return Unicode_Script_KHOJKI;
	if (codepoint >= 0x11236 && codepoint <= 0x11237) return Unicode_Script_KHOJKI;
	if (codepoint >= 0x11238 && codepoint <= 0x1123D) return Unicode_Script_KHOJKI;
	if (codepoint == 0x1123E) return Unicode_Script_KHOJKI;
	if (codepoint >= 0x10600 && codepoint <= 0x10736) return Unicode_Script_LINEAR_A;
	if (codepoint >= 0x10740 && codepoint <= 0x10755) return Unicode_Script_LINEAR_A;
	if (codepoint >= 0x10760 && codepoint <= 0x10767) return Unicode_Script_LINEAR_A;
	if (codepoint >= 0x11150 && codepoint <= 0x11172) return Unicode_Script_MAHAJANI;
	if (codepoint == 0x11173) return Unicode_Script_MAHAJANI;
	if (codepoint >= 0x11174 && codepoint <= 0x11175) return Unicode_Script_MAHAJANI;
	if (codepoint == 0x11176) return Unicode_Script_MAHAJANI;
	if (codepoint >= 0x10AC0 && codepoint <= 0x10AC7) return Unicode_Script_MANICHAEAN;
	if (codepoint == 0x10AC8) return Unicode_Script_MANICHAEAN;
	if (codepoint >= 0x10AC9 && codepoint <= 0x10AE4) return Unicode_Script_MANICHAEAN;
	if (codepoint >= 0x10AE5 && codepoint <= 0x10AE6) return Unicode_Script_MANICHAEAN;
	if (codepoint >= 0x10AEB && codepoint <= 0x10AEF) return Unicode_Script_MANICHAEAN;
	if (codepoint >= 0x10AF0 && codepoint <= 0x10AF6) return Unicode_Script_MANICHAEAN;
	if (codepoint >= 0x1E800 && codepoint <= 0x1E8C4) return Unicode_Script_MENDE_KIKAKUI;
	if (codepoint >= 0x1E8C7 && codepoint <= 0x1E8CF) return Unicode_Script_MENDE_KIKAKUI;
	if (codepoint >= 0x1E8D0 && codepoint <= 0x1E8D6) return Unicode_Script_MENDE_KIKAKUI;
	if (codepoint >= 0x11600 && codepoint <= 0x1162F) return Unicode_Script_MODI;
	if (codepoint >= 0x11630 && codepoint <= 0x11632) return Unicode_Script_MODI;
	if (codepoint >= 0x11633 && codepoint <= 0x1163A) return Unicode_Script_MODI;
	if (codepoint >= 0x1163B && codepoint <= 0x1163C) return Unicode_Script_MODI;
	if (codepoint == 0x1163D) return Unicode_Script_MODI;
	if (codepoint == 0x1163E) return Unicode_Script_MODI;
	if (codepoint >= 0x1163F && codepoint <= 0x11640) return Unicode_Script_MODI;
	if (codepoint >= 0x11641 && codepoint <= 0x11643) return Unicode_Script_MODI;
	if (codepoint == 0x11644) return Unicode_Script_MODI;
	if (codepoint >= 0x11650 && codepoint <= 0x11659) return Unicode_Script_MODI;
	if (codepoint >= 0x16A40 && codepoint <= 0x16A5E) return Unicode_Script_MRO;
	if (codepoint >= 0x16A60 && codepoint <= 0x16A69) return Unicode_Script_MRO;
	if (codepoint >= 0x16A6E && codepoint <= 0x16A6F) return Unicode_Script_MRO;
	if (codepoint >= 0x10A80 && codepoint <= 0x10A9C) return Unicode_Script_OLD_NORTH_ARABIAN;
	if (codepoint >= 0x10A9D && codepoint <= 0x10A9F) return Unicode_Script_OLD_NORTH_ARABIAN;
	if (codepoint >= 0x10880 && codepoint <= 0x1089E) return Unicode_Script_NABATAEAN;
	if (codepoint >= 0x108A7 && codepoint <= 0x108AF) return Unicode_Script_NABATAEAN;
	if (codepoint >= 0x10860 && codepoint <= 0x10876) return Unicode_Script_PALMYRENE;
	if (codepoint >= 0x10877 && codepoint <= 0x10878) return Unicode_Script_PALMYRENE;
	if (codepoint >= 0x10879 && codepoint <= 0x1087F) return Unicode_Script_PALMYRENE;
	if (codepoint >= 0x11AC0 && codepoint <= 0x11AF8) return Unicode_Script_PAU_CIN_HAU;
	if (codepoint >= 0x10350 && codepoint <= 0x10375) return Unicode_Script_OLD_PERMIC;
	if (codepoint >= 0x10376 && codepoint <= 0x1037A) return Unicode_Script_OLD_PERMIC;
	if (codepoint >= 0x10B80 && codepoint <= 0x10B91) return Unicode_Script_PSALTER_PAHLAVI;
	if (codepoint >= 0x10B99 && codepoint <= 0x10B9C) return Unicode_Script_PSALTER_PAHLAVI;
	if (codepoint >= 0x10BA9 && codepoint <= 0x10BAF) return Unicode_Script_PSALTER_PAHLAVI;
	if (codepoint >= 0x11580 && codepoint <= 0x115AE) return Unicode_Script_SIDDHAM;
	if (codepoint >= 0x115AF && codepoint <= 0x115B1) return Unicode_Script_SIDDHAM;
	if (codepoint >= 0x115B2 && codepoint <= 0x115B5) return Unicode_Script_SIDDHAM;
	if (codepoint >= 0x115B8 && codepoint <= 0x115BB) return Unicode_Script_SIDDHAM;
	if (codepoint >= 0x115BC && codepoint <= 0x115BD) return Unicode_Script_SIDDHAM;
	if (codepoint == 0x115BE) return Unicode_Script_SIDDHAM;
	if (codepoint >= 0x115BF && codepoint <= 0x115C0) return Unicode_Script_SIDDHAM;
	if (codepoint >= 0x115C1 && codepoint <= 0x115D7) return Unicode_Script_SIDDHAM;
	if (codepoint >= 0x115D8 && codepoint <= 0x115DB) return Unicode_Script_SIDDHAM;
	if (codepoint >= 0x115DC && codepoint <= 0x115DD) return Unicode_Script_SIDDHAM;
	if (codepoint >= 0x112B0 && codepoint <= 0x112DE) return Unicode_Script_KHUDAWADI;
	if (codepoint == 0x112DF) return Unicode_Script_KHUDAWADI;
	if (codepoint >= 0x112E0 && codepoint <= 0x112E2) return Unicode_Script_KHUDAWADI;
	if (codepoint >= 0x112E3 && codepoint <= 0x112EA) return Unicode_Script_KHUDAWADI;
	if (codepoint >= 0x112F0 && codepoint <= 0x112F9) return Unicode_Script_KHUDAWADI;
	if (codepoint >= 0x11480 && codepoint <= 0x114AF) return Unicode_Script_TIRHUTA;
	if (codepoint >= 0x114B0 && codepoint <= 0x114B2) return Unicode_Script_TIRHUTA;
	if (codepoint >= 0x114B3 && codepoint <= 0x114B8) return Unicode_Script_TIRHUTA;
	if (codepoint == 0x114B9) return Unicode_Script_TIRHUTA;
	if (codepoint == 0x114BA) return Unicode_Script_TIRHUTA;
	if (codepoint >= 0x114BB && codepoint <= 0x114BE) return Unicode_Script_TIRHUTA;
	if (codepoint >= 0x114BF && codepoint <= 0x114C0) return Unicode_Script_TIRHUTA;
	if (codepoint == 0x114C1) return Unicode_Script_TIRHUTA;
	if (codepoint >= 0x114C2 && codepoint <= 0x114C3) return Unicode_Script_TIRHUTA;
	if (codepoint >= 0x114C4 && codepoint <= 0x114C5) return Unicode_Script_TIRHUTA;
	if (codepoint == 0x114C6) return Unicode_Script_TIRHUTA;
	if (codepoint == 0x114C7) return Unicode_Script_TIRHUTA;
	if (codepoint >= 0x114D0 && codepoint <= 0x114D9) return Unicode_Script_TIRHUTA;
	if (codepoint >= 0x118A0 && codepoint <= 0x118DF) return Unicode_Script_WARANG_CITI;
	if (codepoint >= 0x118E0 && codepoint <= 0x118E9) return Unicode_Script_WARANG_CITI;
	if (codepoint >= 0x118EA && codepoint <= 0x118F2) return Unicode_Script_WARANG_CITI;
	if (codepoint == 0x118FF) return Unicode_Script_WARANG_CITI;
	if (codepoint >= 0x11700 && codepoint <= 0x1171A) return Unicode_Script_AHOM;
	if (codepoint >= 0x1171D && codepoint <= 0x1171F) return Unicode_Script_AHOM;
	if (codepoint >= 0x11720 && codepoint <= 0x11721) return Unicode_Script_AHOM;
	if (codepoint >= 0x11722 && codepoint <= 0x11725) return Unicode_Script_AHOM;
	if (codepoint == 0x11726) return Unicode_Script_AHOM;
	if (codepoint >= 0x11727 && codepoint <= 0x1172B) return Unicode_Script_AHOM;
	if (codepoint >= 0x11730 && codepoint <= 0x11739) return Unicode_Script_AHOM;
	if (codepoint >= 0x1173A && codepoint <= 0x1173B) return Unicode_Script_AHOM;
	if (codepoint >= 0x1173C && codepoint <= 0x1173E) return Unicode_Script_AHOM;
	if (codepoint == 0x1173F) return Unicode_Script_AHOM;
	if (codepoint >= 0x14400 && codepoint <= 0x14646) return Unicode_Script_ANATOLIAN_HIEROGLYPHS;
	if (codepoint >= 0x108E0 && codepoint <= 0x108F2) return Unicode_Script_HATRAN;
	if (codepoint >= 0x108F4 && codepoint <= 0x108F5) return Unicode_Script_HATRAN;
	if (codepoint >= 0x108FB && codepoint <= 0x108FF) return Unicode_Script_HATRAN;
	if (codepoint >= 0x11280 && codepoint <= 0x11286) return Unicode_Script_MULTANI;
	if (codepoint == 0x11288) return Unicode_Script_MULTANI;
	if (codepoint >= 0x1128A && codepoint <= 0x1128D) return Unicode_Script_MULTANI;
	if (codepoint >= 0x1128F && codepoint <= 0x1129D) return Unicode_Script_MULTANI;
	if (codepoint >= 0x1129F && codepoint <= 0x112A8) return Unicode_Script_MULTANI;
	if (codepoint == 0x112A9) return Unicode_Script_MULTANI;
	if (codepoint >= 0x10C80 && codepoint <= 0x10CB2) return Unicode_Script_OLD_HUNGARIAN;
	if (codepoint >= 0x10CC0 && codepoint <= 0x10CF2) return Unicode_Script_OLD_HUNGARIAN;
	if (codepoint >= 0x10CFA && codepoint <= 0x10CFF) return Unicode_Script_OLD_HUNGARIAN;
	if (codepoint >= 0x1D800 && codepoint <= 0x1D9FF) return Unicode_Script_SIGNWRITING;
	if (codepoint >= 0x1DA00 && codepoint <= 0x1DA36) return Unicode_Script_SIGNWRITING;
	if (codepoint >= 0x1DA37 && codepoint <= 0x1DA3A) return Unicode_Script_SIGNWRITING;
	if (codepoint >= 0x1DA3B && codepoint <= 0x1DA6C) return Unicode_Script_SIGNWRITING;
	if (codepoint >= 0x1DA6D && codepoint <= 0x1DA74) return Unicode_Script_SIGNWRITING;
	if (codepoint == 0x1DA75) return Unicode_Script_SIGNWRITING;
	if (codepoint >= 0x1DA76 && codepoint <= 0x1DA83) return Unicode_Script_SIGNWRITING;
	if (codepoint == 0x1DA84) return Unicode_Script_SIGNWRITING;
	if (codepoint >= 0x1DA85 && codepoint <= 0x1DA86) return Unicode_Script_SIGNWRITING;
	if (codepoint >= 0x1DA87 && codepoint <= 0x1DA8B) return Unicode_Script_SIGNWRITING;
	if (codepoint >= 0x1DA9B && codepoint <= 0x1DA9F) return Unicode_Script_SIGNWRITING;
	if (codepoint >= 0x1DAA1 && codepoint <= 0x1DAAF) return Unicode_Script_SIGNWRITING;
	if (codepoint >= 0x1E900 && codepoint <= 0x1E943) return Unicode_Script_ADLAM;
	if (codepoint >= 0x1E944 && codepoint <= 0x1E94A) return Unicode_Script_ADLAM;
	if (codepoint == 0x1E94B) return Unicode_Script_ADLAM;
	if (codepoint >= 0x1E950 && codepoint <= 0x1E959) return Unicode_Script_ADLAM;
	if (codepoint >= 0x1E95E && codepoint <= 0x1E95F) return Unicode_Script_ADLAM;
	if (codepoint >= 0x11C00 && codepoint <= 0x11C08) return Unicode_Script_BHAIKSUKI;
	if (codepoint >= 0x11C0A && codepoint <= 0x11C2E) return Unicode_Script_BHAIKSUKI;
	if (codepoint == 0x11C2F) return Unicode_Script_BHAIKSUKI;
	if (codepoint >= 0x11C30 && codepoint <= 0x11C36) return Unicode_Script_BHAIKSUKI;
	if (codepoint >= 0x11C38 && codepoint <= 0x11C3D) return Unicode_Script_BHAIKSUKI;
	if (codepoint == 0x11C3E) return Unicode_Script_BHAIKSUKI;
	if (codepoint == 0x11C3F) return Unicode_Script_BHAIKSUKI;
	if (codepoint == 0x11C40) return Unicode_Script_BHAIKSUKI;
	if (codepoint >= 0x11C41 && codepoint <= 0x11C45) return Unicode_Script_BHAIKSUKI;
	if (codepoint >= 0x11C50 && codepoint <= 0x11C59) return Unicode_Script_BHAIKSUKI;
	if (codepoint >= 0x11C5A && codepoint <= 0x11C6C) return Unicode_Script_BHAIKSUKI;
	if (codepoint >= 0x11C70 && codepoint <= 0x11C71) return Unicode_Script_MARCHEN;
	if (codepoint >= 0x11C72 && codepoint <= 0x11C8F) return Unicode_Script_MARCHEN;
	if (codepoint >= 0x11C92 && codepoint <= 0x11CA7) return Unicode_Script_MARCHEN;
	if (codepoint == 0x11CA9) return Unicode_Script_MARCHEN;
	if (codepoint >= 0x11CAA && codepoint <= 0x11CB0) return Unicode_Script_MARCHEN;
	if (codepoint == 0x11CB1) return Unicode_Script_MARCHEN;
	if (codepoint >= 0x11CB2 && codepoint <= 0x11CB3) return Unicode_Script_MARCHEN;
	if (codepoint == 0x11CB4) return Unicode_Script_MARCHEN;
	if (codepoint >= 0x11CB5 && codepoint <= 0x11CB6) return Unicode_Script_MARCHEN;
	if (codepoint >= 0x11400 && codepoint <= 0x11434) return Unicode_Script_NEWA;
	if (codepoint >= 0x11435 && codepoint <= 0x11437) return Unicode_Script_NEWA;
	if (codepoint >= 0x11438 && codepoint <= 0x1143F) return Unicode_Script_NEWA;
	if (codepoint >= 0x11440 && codepoint <= 0x11441) return Unicode_Script_NEWA;
	if (codepoint >= 0x11442 && codepoint <= 0x11444) return Unicode_Script_NEWA;
	if (codepoint == 0x11445) return Unicode_Script_NEWA;
	if (codepoint == 0x11446) return Unicode_Script_NEWA;
	if (codepoint >= 0x11447 && codepoint <= 0x1144A) return Unicode_Script_NEWA;
	if (codepoint >= 0x1144B && codepoint <= 0x1144F) return Unicode_Script_NEWA;
	if (codepoint >= 0x11450 && codepoint <= 0x11459) return Unicode_Script_NEWA;
	if (codepoint >= 0x1145A && codepoint <= 0x1145B) return Unicode_Script_NEWA;
	if (codepoint == 0x1145D) return Unicode_Script_NEWA;
	if (codepoint == 0x1145E) return Unicode_Script_NEWA;
	if (codepoint >= 0x1145F && codepoint <= 0x11461) return Unicode_Script_NEWA;
	if (codepoint >= 0x104B0 && codepoint <= 0x104D3) return Unicode_Script_OSAGE;
	if (codepoint >= 0x104D8 && codepoint <= 0x104FB) return Unicode_Script_OSAGE;
	if (codepoint == 0x16FE0) return Unicode_Script_TANGUT;
	if (codepoint >= 0x17000 && codepoint <= 0x187F7) return Unicode_Script_TANGUT;
	if (codepoint >= 0x18800 && codepoint <= 0x18AFF) return Unicode_Script_TANGUT;
	if (codepoint >= 0x18D00 && codepoint <= 0x18D08) return Unicode_Script_TANGUT;
	if (codepoint >= 0x11D00 && codepoint <= 0x11D06) return Unicode_Script_MASARAM_GONDI;
	if (codepoint >= 0x11D08 && codepoint <= 0x11D09) return Unicode_Script_MASARAM_GONDI;
	if (codepoint >= 0x11D0B && codepoint <= 0x11D30) return Unicode_Script_MASARAM_GONDI;
	if (codepoint >= 0x11D31 && codepoint <= 0x11D36) return Unicode_Script_MASARAM_GONDI;
	if (codepoint == 0x11D3A) return Unicode_Script_MASARAM_GONDI;
	if (codepoint >= 0x11D3C && codepoint <= 0x11D3D) return Unicode_Script_MASARAM_GONDI;
	if (codepoint >= 0x11D3F && codepoint <= 0x11D45) return Unicode_Script_MASARAM_GONDI;
	if (codepoint == 0x11D46) return Unicode_Script_MASARAM_GONDI;
	if (codepoint == 0x11D47) return Unicode_Script_MASARAM_GONDI;
	if (codepoint >= 0x11D50 && codepoint <= 0x11D59) return Unicode_Script_MASARAM_GONDI;
	if (codepoint == 0x16FE1) return Unicode_Script_NUSHU;
	if (codepoint >= 0x1B170 && codepoint <= 0x1B2FB) return Unicode_Script_NUSHU;
	if (codepoint == 0x11A50) return Unicode_Script_SOYOMBO;
	if (codepoint >= 0x11A51 && codepoint <= 0x11A56) return Unicode_Script_SOYOMBO;
	if (codepoint >= 0x11A57 && codepoint <= 0x11A58) return Unicode_Script_SOYOMBO;
	if (codepoint >= 0x11A59 && codepoint <= 0x11A5B) return Unicode_Script_SOYOMBO;
	if (codepoint >= 0x11A5C && codepoint <= 0x11A89) return Unicode_Script_SOYOMBO;
	if (codepoint >= 0x11A8A && codepoint <= 0x11A96) return Unicode_Script_SOYOMBO;
	if (codepoint == 0x11A97) return Unicode_Script_SOYOMBO;
	if (codepoint >= 0x11A98 && codepoint <= 0x11A99) return Unicode_Script_SOYOMBO;
	if (codepoint >= 0x11A9A && codepoint <= 0x11A9C) return Unicode_Script_SOYOMBO;
	if (codepoint == 0x11A9D) return Unicode_Script_SOYOMBO;
	if (codepoint >= 0x11A9E && codepoint <= 0x11AA2) return Unicode_Script_SOYOMBO;
	if (codepoint == 0x11A00) return Unicode_Script_ZANABAZAR_SQUARE;
	if (codepoint >= 0x11A01 && codepoint <= 0x11A0A) return Unicode_Script_ZANABAZAR_SQUARE;
	if (codepoint >= 0x11A0B && codepoint <= 0x11A32) return Unicode_Script_ZANABAZAR_SQUARE;
	if (codepoint >= 0x11A33 && codepoint <= 0x11A38) return Unicode_Script_ZANABAZAR_SQUARE;
	if (codepoint == 0x11A39) return Unicode_Script_ZANABAZAR_SQUARE;
	if (codepoint == 0x11A3A) return Unicode_Script_ZANABAZAR_SQUARE;
	if (codepoint >= 0x11A3B && codepoint <= 0x11A3E) return Unicode_Script_ZANABAZAR_SQUARE;
	if (codepoint >= 0x11A3F && codepoint <= 0x11A46) return Unicode_Script_ZANABAZAR_SQUARE;
	if (codepoint == 0x11A47) return Unicode_Script_ZANABAZAR_SQUARE;
	if (codepoint >= 0x11800 && codepoint <= 0x1182B) return Unicode_Script_DOGRA;
	if (codepoint >= 0x1182C && codepoint <= 0x1182E) return Unicode_Script_DOGRA;
	if (codepoint >= 0x1182F && codepoint <= 0x11837) return Unicode_Script_DOGRA;
	if (codepoint == 0x11838) return Unicode_Script_DOGRA;
	if (codepoint >= 0x11839 && codepoint <= 0x1183A) return Unicode_Script_DOGRA;
	if (codepoint == 0x1183B) return Unicode_Script_DOGRA;
	if (codepoint >= 0x11D60 && codepoint <= 0x11D65) return Unicode_Script_GUNJALA_GONDI;
	if (codepoint >= 0x11D67 && codepoint <= 0x11D68) return Unicode_Script_GUNJALA_GONDI;
	if (codepoint >= 0x11D6A && codepoint <= 0x11D89) return Unicode_Script_GUNJALA_GONDI;
	if (codepoint >= 0x11D8A && codepoint <= 0x11D8E) return Unicode_Script_GUNJALA_GONDI;
	if (codepoint >= 0x11D90 && codepoint <= 0x11D91) return Unicode_Script_GUNJALA_GONDI;
	if (codepoint >= 0x11D93 && codepoint <= 0x11D94) return Unicode_Script_GUNJALA_GONDI;
	if (codepoint == 0x11D95) return Unicode_Script_GUNJALA_GONDI;
	if (codepoint == 0x11D96) return Unicode_Script_GUNJALA_GONDI;
	if (codepoint == 0x11D97) return Unicode_Script_GUNJALA_GONDI;
	if (codepoint == 0x11D98) return Unicode_Script_GUNJALA_GONDI;
	if (codepoint >= 0x11DA0 && codepoint <= 0x11DA9) return Unicode_Script_GUNJALA_GONDI;
	if (codepoint >= 0x11EE0 && codepoint <= 0x11EF2) return Unicode_Script_MAKASAR;
	if (codepoint >= 0x11EF3 && codepoint <= 0x11EF4) return Unicode_Script_MAKASAR;
	if (codepoint >= 0x11EF5 && codepoint <= 0x11EF6) return Unicode_Script_MAKASAR;
	if (codepoint >= 0x11EF7 && codepoint <= 0x11EF8) return Unicode_Script_MAKASAR;
	if (codepoint >= 0x16E40 && codepoint <= 0x16E7F) return Unicode_Script_MEDEFAIDRIN;
	if (codepoint >= 0x16E80 && codepoint <= 0x16E96) return Unicode_Script_MEDEFAIDRIN;
	if (codepoint >= 0x16E97 && codepoint <= 0x16E9A) return Unicode_Script_MEDEFAIDRIN;
	if (codepoint >= 0x10D00 && codepoint <= 0x10D23) return Unicode_Script_HANIFI_ROHINGYA;
	if (codepoint >= 0x10D24 && codepoint <= 0x10D27) return Unicode_Script_HANIFI_ROHINGYA;
	if (codepoint >= 0x10D30 && codepoint <= 0x10D39) return Unicode_Script_HANIFI_ROHINGYA;
	if (codepoint >= 0x10F30 && codepoint <= 0x10F45) return Unicode_Script_SOGDIAN;
	if (codepoint >= 0x10F46 && codepoint <= 0x10F50) return Unicode_Script_SOGDIAN;
	if (codepoint >= 0x10F51 && codepoint <= 0x10F54) return Unicode_Script_SOGDIAN;
	if (codepoint >= 0x10F55 && codepoint <= 0x10F59) return Unicode_Script_SOGDIAN;
	if (codepoint >= 0x10F00 && codepoint <= 0x10F1C) return Unicode_Script_OLD_SOGDIAN;
	if (codepoint >= 0x10F1D && codepoint <= 0x10F26) return Unicode_Script_OLD_SOGDIAN;
	if (codepoint == 0x10F27) return Unicode_Script_OLD_SOGDIAN;
	if (codepoint >= 0x10FE0 && codepoint <= 0x10FF6) return Unicode_Script_ELYMAIC;
	if (codepoint >= 0x119A0 && codepoint <= 0x119A7) return Unicode_Script_NANDINAGARI;
	if (codepoint >= 0x119AA && codepoint <= 0x119D0) return Unicode_Script_NANDINAGARI;
	if (codepoint >= 0x119D1 && codepoint <= 0x119D3) return Unicode_Script_NANDINAGARI;
	if (codepoint >= 0x119D4 && codepoint <= 0x119D7) return Unicode_Script_NANDINAGARI;
	if (codepoint >= 0x119DA && codepoint <= 0x119DB) return Unicode_Script_NANDINAGARI;
	if (codepoint >= 0x119DC && codepoint <= 0x119DF) return Unicode_Script_NANDINAGARI;
	if (codepoint == 0x119E0) return Unicode_Script_NANDINAGARI;
	if (codepoint == 0x119E1) return Unicode_Script_NANDINAGARI;
	if (codepoint == 0x119E2) return Unicode_Script_NANDINAGARI;
	if (codepoint == 0x119E3) return Unicode_Script_NANDINAGARI;
	if (codepoint == 0x119E4) return Unicode_Script_NANDINAGARI;
	if (codepoint >= 0x1E100 && codepoint <= 0x1E12C) return Unicode_Script_NYIAKENG_PUACHUE_HMONG;
	if (codepoint >= 0x1E130 && codepoint <= 0x1E136) return Unicode_Script_NYIAKENG_PUACHUE_HMONG;
	if (codepoint >= 0x1E137 && codepoint <= 0x1E13D) return Unicode_Script_NYIAKENG_PUACHUE_HMONG;
	if (codepoint >= 0x1E140 && codepoint <= 0x1E149) return Unicode_Script_NYIAKENG_PUACHUE_HMONG;
	if (codepoint == 0x1E14E) return Unicode_Script_NYIAKENG_PUACHUE_HMONG;
	if (codepoint == 0x1E14F) return Unicode_Script_NYIAKENG_PUACHUE_HMONG;
	if (codepoint >= 0x1E2C0 && codepoint <= 0x1E2EB) return Unicode_Script_WANCHO;
	if (codepoint >= 0x1E2EC && codepoint <= 0x1E2EF) return Unicode_Script_WANCHO;
	if (codepoint >= 0x1E2F0 && codepoint <= 0x1E2F9) return Unicode_Script_WANCHO;
	if (codepoint == 0x1E2FF) return Unicode_Script_WANCHO;
	if (codepoint >= 0x10FB0 && codepoint <= 0x10FC4) return Unicode_Script_CHORASMIAN;
	if (codepoint >= 0x10FC5 && codepoint <= 0x10FCB) return Unicode_Script_CHORASMIAN;
	if (codepoint >= 0x11900 && codepoint <= 0x11906) return Unicode_Script_DIVES_AKURU;
	if (codepoint == 0x11909) return Unicode_Script_DIVES_AKURU;
	if (codepoint >= 0x1190C && codepoint <= 0x11913) return Unicode_Script_DIVES_AKURU;
	if (codepoint >= 0x11915 && codepoint <= 0x11916) return Unicode_Script_DIVES_AKURU;
	if (codepoint >= 0x11918 && codepoint <= 0x1192F) return Unicode_Script_DIVES_AKURU;
	if (codepoint >= 0x11930 && codepoint <= 0x11935) return Unicode_Script_DIVES_AKURU;
	if (codepoint >= 0x11937 && codepoint <= 0x11938) return Unicode_Script_DIVES_AKURU;
	if (codepoint >= 0x1193B && codepoint <= 0x1193C) return Unicode_Script_DIVES_AKURU;
	if (codepoint == 0x1193D) return Unicode_Script_DIVES_AKURU;
	if (codepoint == 0x1193E) return Unicode_Script_DIVES_AKURU;
	if (codepoint == 0x1193F) return Unicode_Script_DIVES_AKURU;
	if (codepoint == 0x11940) return Unicode_Script_DIVES_AKURU;
	if (codepoint == 0x11941) return Unicode_Script_DIVES_AKURU;
	if (codepoint == 0x11942) return Unicode_Script_DIVES_AKURU;
	if (codepoint == 0x11943) return Unicode_Script_DIVES_AKURU;
	if (codepoint >= 0x11944 && codepoint <= 0x11946) return Unicode_Script_DIVES_AKURU;
	if (codepoint >= 0x11950 && codepoint <= 0x11959) return Unicode_Script_DIVES_AKURU;
	if (codepoint == 0x16FE4) return Unicode_Script_KHITAN_SMALL_SCRIPT;
	if (codepoint >= 0x18B00 && codepoint <= 0x18CD5) return Unicode_Script_KHITAN_SMALL_SCRIPT;
	if (codepoint >= 0x10E80 && codepoint <= 0x10EA9) return Unicode_Script_YEZIDI;
	if (codepoint >= 0x10EAB && codepoint <= 0x10EAC) return Unicode_Script_YEZIDI;
	if (codepoint == 0x10EAD) return Unicode_Script_YEZIDI;
	if (codepoint >= 0x10EB0 && codepoint <= 0x10EB1) return Unicode_Script_YEZIDI;

	return Unicode_Script_UNKNOWN;
}

Unicode_Script_Ext unicode_script_ext(uint32_t codepoint) {
	if (codepoint == 0x1CF7) return Unicode_Script_Ext_BENG;
	if (codepoint == 0x1CD1) return Unicode_Script_Ext_DEVA;
	if (codepoint == 0x1CD4) return Unicode_Script_Ext_DEVA;
	if (codepoint == 0x1CDB) return Unicode_Script_Ext_DEVA;
	if (codepoint >= 0x1CDE && codepoint <= 0x1CDF) return Unicode_Script_Ext_DEVA;
	if (codepoint >= 0x1CE2 && codepoint <= 0x1CE8) return Unicode_Script_Ext_DEVA;
	if (codepoint >= 0x1CEB && codepoint <= 0x1CEC) return Unicode_Script_Ext_DEVA;
	if (codepoint >= 0x1CEE && codepoint <= 0x1CF1) return Unicode_Script_Ext_DEVA;
	if (codepoint >= 0x1BCA0 && codepoint <= 0x1BCA3) return Unicode_Script_Ext_DUPL;
	if (codepoint == 0x0342) return Unicode_Script_Ext_GREK;
	if (codepoint == 0x0345) return Unicode_Script_Ext_GREK;
	if (codepoint >= 0x1DC0 && codepoint <= 0x1DC1) return Unicode_Script_Ext_GREK;
	if (codepoint == 0x3006) return Unicode_Script_Ext_HANI;
	if (codepoint >= 0x303E && codepoint <= 0x303F) return Unicode_Script_Ext_HANI;
	if (codepoint >= 0x3190 && codepoint <= 0x3191) return Unicode_Script_Ext_HANI;
	if (codepoint >= 0x3192 && codepoint <= 0x3195) return Unicode_Script_Ext_HANI;
	if (codepoint >= 0x3196 && codepoint <= 0x319F) return Unicode_Script_Ext_HANI;
	if (codepoint >= 0x31C0 && codepoint <= 0x31E3) return Unicode_Script_Ext_HANI;
	if (codepoint >= 0x3220 && codepoint <= 0x3229) return Unicode_Script_Ext_HANI;
	if (codepoint >= 0x322A && codepoint <= 0x3247) return Unicode_Script_Ext_HANI;
	if (codepoint >= 0x3280 && codepoint <= 0x3289) return Unicode_Script_Ext_HANI;
	if (codepoint >= 0x328A && codepoint <= 0x32B0) return Unicode_Script_Ext_HANI;
	if (codepoint >= 0x32C0 && codepoint <= 0x32CB) return Unicode_Script_Ext_HANI;
	if (codepoint == 0x32FF) return Unicode_Script_Ext_HANI;
	if (codepoint >= 0x3358 && codepoint <= 0x3370) return Unicode_Script_Ext_HANI;
	if (codepoint >= 0x337B && codepoint <= 0x337F) return Unicode_Script_Ext_HANI;
	if (codepoint >= 0x33E0 && codepoint <= 0x33FE) return Unicode_Script_Ext_HANI;
	if (codepoint >= 0x1D360 && codepoint <= 0x1D371) return Unicode_Script_Ext_HANI;
	if (codepoint >= 0x1F250 && codepoint <= 0x1F251) return Unicode_Script_Ext_HANI;
	if (codepoint >= 0x0363 && codepoint <= 0x036F) return Unicode_Script_Ext_LATN;
	if (codepoint == 0x1CFA) return Unicode_Script_Ext_NAND;
	if (codepoint == 0x102E0) return Unicode_Script_Ext_ARAB_COPT;
	if (codepoint >= 0x102E1 && codepoint <= 0x102FB) return Unicode_Script_Ext_ARAB_COPT;
	if (codepoint == 0x06D4) return Unicode_Script_Ext_ARAB_ROHG;
	if (codepoint >= 0x064B && codepoint <= 0x0655) return Unicode_Script_Ext_ARAB_SYRC;
	if (codepoint == 0x0670) return Unicode_Script_Ext_ARAB_SYRC;
	if (codepoint == 0xFDF2) return Unicode_Script_Ext_ARAB_THAA;
	if (codepoint == 0xFDFD) return Unicode_Script_Ext_ARAB_THAA;
	if (codepoint >= 0x1CD5 && codepoint <= 0x1CD6) return Unicode_Script_Ext_BENG_DEVA;
	if (codepoint == 0x1CD8) return Unicode_Script_Ext_BENG_DEVA;
	if (codepoint == 0x1CE1) return Unicode_Script_Ext_BENG_DEVA;
	if (codepoint == 0x1CEA) return Unicode_Script_Ext_BENG_DEVA;
	if (codepoint == 0x1CED) return Unicode_Script_Ext_BENG_DEVA;
	if (codepoint >= 0x1CF5 && codepoint <= 0x1CF6) return Unicode_Script_Ext_BENG_DEVA;
	if (codepoint == 0xA8F1) return Unicode_Script_Ext_BENG_DEVA;
	if (codepoint >= 0x302A && codepoint <= 0x302D) return Unicode_Script_Ext_BOPO_HANI;
	if (codepoint == 0xA9CF) return Unicode_Script_Ext_BUGI_JAVA;
	if (codepoint >= 0x10100 && codepoint <= 0x10102) return Unicode_Script_Ext_CPRT_LINB;
	if (codepoint >= 0x10137 && codepoint <= 0x1013F) return Unicode_Script_Ext_CPRT_LINB;
	if (codepoint == 0x0484) return Unicode_Script_Ext_CYRL_GLAG;
	if (codepoint == 0x0487) return Unicode_Script_Ext_CYRL_GLAG;
	if (codepoint == 0x2E43) return Unicode_Script_Ext_CYRL_GLAG;
	if (codepoint == 0xA66F) return Unicode_Script_Ext_CYRL_GLAG;
	if (codepoint >= 0x0485 && codepoint <= 0x0486) return Unicode_Script_Ext_CYRL_LATN;
	if (codepoint == 0x0483) return Unicode_Script_Ext_CYRL_PERM;
	if (codepoint == 0x1DF8) return Unicode_Script_Ext_CYRL_SYRC;
	if (codepoint == 0x1CD3) return Unicode_Script_Ext_DEVA_GRAN;
	if (codepoint == 0x1CF3) return Unicode_Script_Ext_DEVA_GRAN;
	if (codepoint >= 0x1CF8 && codepoint <= 0x1CF9) return Unicode_Script_Ext_DEVA_GRAN;
	if (codepoint == 0x1CE9) return Unicode_Script_Ext_DEVA_NAND;
	if (codepoint == 0x1CD7) return Unicode_Script_Ext_DEVA_SHRD;
	if (codepoint == 0x1CD9) return Unicode_Script_Ext_DEVA_SHRD;
	if (codepoint >= 0x1CDC && codepoint <= 0x1CDD) return Unicode_Script_Ext_DEVA_SHRD;
	if (codepoint == 0x1CE0) return Unicode_Script_Ext_DEVA_SHRD;
	if (codepoint == 0xA8F3) return Unicode_Script_Ext_DEVA_TAML;
	if (codepoint == 0x10FB) return Unicode_Script_Ext_GEOR_LATN;
	if (codepoint >= 0x0BE6 && codepoint <= 0x0BEF) return Unicode_Script_Ext_GRAN_TAML;
	if (codepoint >= 0x0BF0 && codepoint <= 0x0BF2) return Unicode_Script_Ext_GRAN_TAML;
	if (codepoint == 0x0BF3) return Unicode_Script_Ext_GRAN_TAML;
	if (codepoint == 0x11301) return Unicode_Script_Ext_GRAN_TAML;
	if (codepoint == 0x11303) return Unicode_Script_Ext_GRAN_TAML;
	if (codepoint >= 0x1133B && codepoint <= 0x1133C) return Unicode_Script_Ext_GRAN_TAML;
	if (codepoint >= 0x11FD0 && codepoint <= 0x11FD1) return Unicode_Script_Ext_GRAN_TAML;
	if (codepoint == 0x11FD3) return Unicode_Script_Ext_GRAN_TAML;
	if (codepoint >= 0x0AE6 && codepoint <= 0x0AEF) return Unicode_Script_Ext_GUJR_KHOJ;
	if (codepoint >= 0x0A66 && codepoint <= 0x0A6F) return Unicode_Script_Ext_GURU_MULT;
	if (codepoint >= 0xA700 && codepoint <= 0xA707) return Unicode_Script_Ext_HANI_LATN;
	if (codepoint >= 0x3031 && codepoint <= 0x3035) return Unicode_Script_Ext_HIRA_KANA;
	if (codepoint >= 0x3099 && codepoint <= 0x309A) return Unicode_Script_Ext_HIRA_KANA;
	if (codepoint >= 0x309B && codepoint <= 0x309C) return Unicode_Script_Ext_HIRA_KANA;
	if (codepoint == 0x30A0) return Unicode_Script_Ext_HIRA_KANA;
	if (codepoint == 0x30FC) return Unicode_Script_Ext_HIRA_KANA;
	if (codepoint == 0xFF70) return Unicode_Script_Ext_HIRA_KANA;
	if (codepoint >= 0xFF9E && codepoint <= 0xFF9F) return Unicode_Script_Ext_HIRA_KANA;
	if (codepoint >= 0x0CE6 && codepoint <= 0x0CEF) return Unicode_Script_Ext_KNDA_NAND;
	if (codepoint == 0x202F) return Unicode_Script_Ext_LATN_MONG;
	if (codepoint >= 0x1802 && codepoint <= 0x1803) return Unicode_Script_Ext_MONG_PHAG;
	if (codepoint == 0x1805) return Unicode_Script_Ext_MONG_PHAG;
	if (codepoint == 0x061C) return Unicode_Script_Ext_ARAB_SYRC_THAA;
	if (codepoint >= 0x0660 && codepoint <= 0x0669) return Unicode_Script_Ext_ARAB_THAA_YEZI;
	if (codepoint >= 0x09E6 && codepoint <= 0x09EF) return Unicode_Script_Ext_BENG_CAKM_SYLO;
	if (codepoint >= 0x1040 && codepoint <= 0x1049) return Unicode_Script_Ext_CAKM_MYMR_TALE;
	if (codepoint >= 0x10107 && codepoint <= 0x10133) return Unicode_Script_Ext_CPRT_LINA_LINB;
	if (codepoint == 0x1CF4) return Unicode_Script_Ext_DEVA_GRAN_KNDA;
	if (codepoint == 0x20F0) return Unicode_Script_Ext_DEVA_GRAN_LATN;
	if (codepoint == 0x303C) return Unicode_Script_Ext_HANI_HIRA_KANA;
	if (codepoint == 0x303D) return Unicode_Script_Ext_HANI_HIRA_KANA;
	if (codepoint == 0xA92E) return Unicode_Script_Ext_KALI_LATN_MYMR;
	if (codepoint == 0x1CD0) return Unicode_Script_Ext_BENG_DEVA_GRAN_KNDA;
	if (codepoint == 0x1CD2) return Unicode_Script_Ext_BENG_DEVA_GRAN_KNDA;
	if (codepoint >= 0x1735 && codepoint <= 0x1736) return Unicode_Script_Ext_BUHD_HANO_TAGB_TGLG;
	if (codepoint >= 0x0966 && codepoint <= 0x096F) return Unicode_Script_Ext_DEVA_DOGR_KTHI_MAHJ;
	if (codepoint == 0x060C) return Unicode_Script_Ext_ARAB_ROHG_SYRC_THAA_YEZI;
	if (codepoint == 0x061B) return Unicode_Script_Ext_ARAB_ROHG_SYRC_THAA_YEZI;
	if (codepoint == 0x061F) return Unicode_Script_Ext_ARAB_ROHG_SYRC_THAA_YEZI;
	if (codepoint == 0x3003) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA;
	if (codepoint == 0x3013) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA;
	if (codepoint == 0x301C) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA;
	if (codepoint == 0x301D) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA;
	if (codepoint >= 0x301E && codepoint <= 0x301F) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA;
	if (codepoint == 0x3030) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA;
	if (codepoint == 0x3037) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA;
	if (codepoint >= 0xFE45 && codepoint <= 0xFE46) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA;
	if (codepoint >= 0x3001 && codepoint <= 0x3002) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint == 0x3008) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint == 0x3009) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint == 0x300A) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint == 0x300B) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint == 0x300C) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint == 0x300D) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint == 0x300E) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint == 0x300F) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint == 0x3010) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint == 0x3011) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint == 0x3014) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint == 0x3015) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint == 0x3016) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint == 0x3017) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint == 0x3018) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint == 0x3019) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint == 0x301A) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint == 0x301B) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint == 0x30FB) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint == 0xFF61) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint == 0xFF62) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint == 0xFF63) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint >= 0xFF64 && codepoint <= 0xFF65) return Unicode_Script_Ext_BOPO_HANG_HANI_HIRA_KANA_YIII;
	if (codepoint == 0x1CDA) return Unicode_Script_Ext_DEVA_KNDA_MLYM_ORYA_TAML_TELU;
	if (codepoint == 0x0640) return Unicode_Script_Ext_ADLM_ARAB_MAND_MANI_PHLP_ROHG_SOGD_SYRC;
	if (codepoint == 0x1CF2) return Unicode_Script_Ext_BENG_DEVA_GRAN_KNDA_NAND_ORYA_TELU_TIRH;
	if (codepoint >= 0xA836 && codepoint <= 0xA837) return Unicode_Script_Ext_DEVA_DOGR_GUJR_GURU_KHOJ_KTHI_MAHJ_MODI_SIND_TAKR_TIRH;
	if (codepoint == 0xA838) return Unicode_Script_Ext_DEVA_DOGR_GUJR_GURU_KHOJ_KTHI_MAHJ_MODI_SIND_TAKR_TIRH;
	if (codepoint == 0xA839) return Unicode_Script_Ext_DEVA_DOGR_GUJR_GURU_KHOJ_KTHI_MAHJ_MODI_SIND_TAKR_TIRH;
	if (codepoint == 0x0952) return Unicode_Script_Ext_BENG_DEVA_GRAN_GUJR_GURU_KNDA_LATN_MLYM_ORYA_TAML_TELU_TIRH;
	if (codepoint == 0x0951) return Unicode_Script_Ext_BENG_DEVA_GRAN_GUJR_GURU_KNDA_LATN_MLYM_ORYA_SHRD_TAML_TELU_TIRH;
	if (codepoint >= 0xA833 && codepoint <= 0xA835) return Unicode_Script_Ext_DEVA_DOGR_GUJR_GURU_KHOJ_KNDA_KTHI_MAHJ_MODI_NAND_SIND_TAKR_TIRH;
	if (codepoint >= 0xA830 && codepoint <= 0xA832) return Unicode_Script_Ext_DEVA_DOGR_GUJR_GURU_KHOJ_KNDA_KTHI_MAHJ_MLYM_MODI_NAND_SIND_TAKR_TIRH;
	if (codepoint == 0x0964) return Unicode_Script_Ext_BENG_DEVA_DOGR_GONG_GONM_GRAN_GUJR_GURU_KNDA_MAHJ_MLYM_NAND_ORYA_SIND_SINH_SYLO_TAKR_TAML_TELU_TIRH;
	if (codepoint == 0x0965) return Unicode_Script_Ext_BENG_DEVA_DOGR_GONG_GONM_GRAN_GUJR_GURU_KNDA_LIMB_MAHJ_MLYM_NAND_ORYA_SIND_SINH_SYLO_TAKR_TAML_TELU_TIRH;

	return Unicode_Script_Ext_UNKNOWN;
}

Unicode_Block unicode_block(uint32_t codepoint) {
	if (codepoint >= 0x0000 && codepoint <= 0x007F) return Unicode_Block_BASIC_LATIN;
	if (codepoint >= 0x0080 && codepoint <= 0x00FF) return Unicode_Block_LATIN_1_SUPPLEMENT;
	if (codepoint >= 0x0100 && codepoint <= 0x017F) return Unicode_Block_LATIN_EXTENDED_A;
	if (codepoint >= 0x0180 && codepoint <= 0x024F) return Unicode_Block_LATIN_EXTENDED_B;
	if (codepoint >= 0x0250 && codepoint <= 0x02AF) return Unicode_Block_IPA_EXTENSIONS;
	if (codepoint >= 0x02B0 && codepoint <= 0x02FF) return Unicode_Block_SPACING_MODIFIER_LETTERS;
	if (codepoint >= 0x0300 && codepoint <= 0x036F) return Unicode_Block_COMBINING_DIACRITICAL_MARKS;
	if (codepoint >= 0x0370 && codepoint <= 0x03FF) return Unicode_Block_GREEK_AND_COPTIC;
	if (codepoint >= 0x0400 && codepoint <= 0x04FF) return Unicode_Block_CYRILLIC;
	if (codepoint >= 0x0500 && codepoint <= 0x052F) return Unicode_Block_CYRILLIC_SUPPLEMENT;
	if (codepoint >= 0x0530 && codepoint <= 0x058F) return Unicode_Block_ARMENIAN;
	if (codepoint >= 0x0590 && codepoint <= 0x05FF) return Unicode_Block_HEBREW;
	if (codepoint >= 0x0600 && codepoint <= 0x06FF) return Unicode_Block_ARABIC;
	if (codepoint >= 0x0700 && codepoint <= 0x074F) return Unicode_Block_SYRIAC;
	if (codepoint >= 0x0750 && codepoint <= 0x077F) return Unicode_Block_ARABIC_SUPPLEMENT;
	if (codepoint >= 0x0780 && codepoint <= 0x07BF) return Unicode_Block_THAANA;
	if (codepoint >= 0x07C0 && codepoint <= 0x07FF) return Unicode_Block_NKO;
	if (codepoint >= 0x0800 && codepoint <= 0x083F) return Unicode_Block_SAMARITAN;
	if (codepoint >= 0x0840 && codepoint <= 0x085F) return Unicode_Block_MANDAIC;
	if (codepoint >= 0x0860 && codepoint <= 0x086F) return Unicode_Block_SYRIAC_SUPPLEMENT;
	if (codepoint >= 0x08A0 && codepoint <= 0x08FF) return Unicode_Block_ARABIC_EXTENDED_A;
	if (codepoint >= 0x0900 && codepoint <= 0x097F) return Unicode_Block_DEVANAGARI;
	if (codepoint >= 0x0980 && codepoint <= 0x09FF) return Unicode_Block_BENGALI;
	if (codepoint >= 0x0A00 && codepoint <= 0x0A7F) return Unicode_Block_GURMUKHI;
	if (codepoint >= 0x0A80 && codepoint <= 0x0AFF) return Unicode_Block_GUJARATI;
	if (codepoint >= 0x0B00 && codepoint <= 0x0B7F) return Unicode_Block_ORIYA;
	if (codepoint >= 0x0B80 && codepoint <= 0x0BFF) return Unicode_Block_TAMIL;
	if (codepoint >= 0x0C00 && codepoint <= 0x0C7F) return Unicode_Block_TELUGU;
	if (codepoint >= 0x0C80 && codepoint <= 0x0CFF) return Unicode_Block_KANNADA;
	if (codepoint >= 0x0D00 && codepoint <= 0x0D7F) return Unicode_Block_MALAYALAM;
	if (codepoint >= 0x0D80 && codepoint <= 0x0DFF) return Unicode_Block_SINHALA;
	if (codepoint >= 0x0E00 && codepoint <= 0x0E7F) return Unicode_Block_THAI;
	if (codepoint >= 0x0E80 && codepoint <= 0x0EFF) return Unicode_Block_LAO;
	if (codepoint >= 0x0F00 && codepoint <= 0x0FFF) return Unicode_Block_TIBETAN;
	if (codepoint >= 0x1000 && codepoint <= 0x109F) return Unicode_Block_MYANMAR;
	if (codepoint >= 0x10A0 && codepoint <= 0x10FF) return Unicode_Block_GEORGIAN;
	if (codepoint >= 0x1100 && codepoint <= 0x11FF) return Unicode_Block_HANGUL_JAMO;
	if (codepoint >= 0x1200 && codepoint <= 0x137F) return Unicode_Block_ETHIOPIC;
	if (codepoint >= 0x1380 && codepoint <= 0x139F) return Unicode_Block_ETHIOPIC_SUPPLEMENT;
	if (codepoint >= 0x13A0 && codepoint <= 0x13FF) return Unicode_Block_CHEROKEE;
	if (codepoint >= 0x1400 && codepoint <= 0x167F) return Unicode_Block_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS;
	if (codepoint >= 0x1680 && codepoint <= 0x169F) return Unicode_Block_OGHAM;
	if (codepoint >= 0x16A0 && codepoint <= 0x16FF) return Unicode_Block_RUNIC;
	if (codepoint >= 0x1700 && codepoint <= 0x171F) return Unicode_Block_TAGALOG;
	if (codepoint >= 0x1720 && codepoint <= 0x173F) return Unicode_Block_HANUNOO;
	if (codepoint >= 0x1740 && codepoint <= 0x175F) return Unicode_Block_BUHID;
	if (codepoint >= 0x1760 && codepoint <= 0x177F) return Unicode_Block_TAGBANWA;
	if (codepoint >= 0x1780 && codepoint <= 0x17FF) return Unicode_Block_KHMER;
	if (codepoint >= 0x1800 && codepoint <= 0x18AF) return Unicode_Block_MONGOLIAN;
	if (codepoint >= 0x18B0 && codepoint <= 0x18FF) return Unicode_Block_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED;
	if (codepoint >= 0x1900 && codepoint <= 0x194F) return Unicode_Block_LIMBU;
	if (codepoint >= 0x1950 && codepoint <= 0x197F) return Unicode_Block_TAI_LE;
	if (codepoint >= 0x1980 && codepoint <= 0x19DF) return Unicode_Block_NEW_TAI_LUE;
	if (codepoint >= 0x19E0 && codepoint <= 0x19FF) return Unicode_Block_KHMER_SYMBOLS;
	if (codepoint >= 0x1A00 && codepoint <= 0x1A1F) return Unicode_Block_BUGINESE;
	if (codepoint >= 0x1A20 && codepoint <= 0x1AAF) return Unicode_Block_TAI_THAM;
	if (codepoint >= 0x1AB0 && codepoint <= 0x1AFF) return Unicode_Block_COMBINING_DIACRITICAL_MARKS_EXTENDED;
	if (codepoint >= 0x1B00 && codepoint <= 0x1B7F) return Unicode_Block_BALINESE;
	if (codepoint >= 0x1B80 && codepoint <= 0x1BBF) return Unicode_Block_SUNDANESE;
	if (codepoint >= 0x1BC0 && codepoint <= 0x1BFF) return Unicode_Block_BATAK;
	if (codepoint >= 0x1C00 && codepoint <= 0x1C4F) return Unicode_Block_LEPCHA;
	if (codepoint >= 0x1C50 && codepoint <= 0x1C7F) return Unicode_Block_OL_CHIKI;
	if (codepoint >= 0x1C80 && codepoint <= 0x1C8F) return Unicode_Block_CYRILLIC_EXTENDED_C;
	if (codepoint >= 0x1C90 && codepoint <= 0x1CBF) return Unicode_Block_GEORGIAN_EXTENDED;
	if (codepoint >= 0x1CC0 && codepoint <= 0x1CCF) return Unicode_Block_SUNDANESE_SUPPLEMENT;
	if (codepoint >= 0x1CD0 && codepoint <= 0x1CFF) return Unicode_Block_VEDIC_EXTENSIONS;
	if (codepoint >= 0x1D00 && codepoint <= 0x1D7F) return Unicode_Block_PHONETIC_EXTENSIONS;
	if (codepoint >= 0x1D80 && codepoint <= 0x1DBF) return Unicode_Block_PHONETIC_EXTENSIONS_SUPPLEMENT;
	if (codepoint >= 0x1DC0 && codepoint <= 0x1DFF) return Unicode_Block_COMBINING_DIACRITICAL_MARKS_SUPPLEMENT;
	if (codepoint >= 0x1E00 && codepoint <= 0x1EFF) return Unicode_Block_LATIN_EXTENDED_ADDITIONAL;
	if (codepoint >= 0x1F00 && codepoint <= 0x1FFF) return Unicode_Block_GREEK_EXTENDED;
	if (codepoint >= 0x2000 && codepoint <= 0x206F) return Unicode_Block_GENERAL_PUNCTUATION;
	if (codepoint >= 0x2070 && codepoint <= 0x209F) return Unicode_Block_SUPERSCRIPTS_AND_SUBSCRIPTS;
	if (codepoint >= 0x20A0 && codepoint <= 0x20CF) return Unicode_Block_CURRENCY_SYMBOLS;
	if (codepoint >= 0x20D0 && codepoint <= 0x20FF) return Unicode_Block_COMBINING_DIACRITICAL_MARKS_FOR_SYMBOLS;
	if (codepoint >= 0x2100 && codepoint <= 0x214F) return Unicode_Block_LETTERLIKE_SYMBOLS;
	if (codepoint >= 0x2150 && codepoint <= 0x218F) return Unicode_Block_NUMBER_FORMS;
	if (codepoint >= 0x2190 && codepoint <= 0x21FF) return Unicode_Block_ARROWS;
	if (codepoint >= 0x2200 && codepoint <= 0x22FF) return Unicode_Block_MATHEMATICAL_OPERATORS;
	if (codepoint >= 0x2300 && codepoint <= 0x23FF) return Unicode_Block_MISCELLANEOUS_TECHNICAL;
	if (codepoint >= 0x2400 && codepoint <= 0x243F) return Unicode_Block_CONTROL_PICTURES;
	if (codepoint >= 0x2440 && codepoint <= 0x245F) return Unicode_Block_OPTICAL_CHARACTER_RECOGNITION;
	if (codepoint >= 0x2460 && codepoint <= 0x24FF) return Unicode_Block_ENCLOSED_ALPHANUMERICS;
	if (codepoint >= 0x2500 && codepoint <= 0x257F) return Unicode_Block_BOX_DRAWING;
	if (codepoint >= 0x2580 && codepoint <= 0x259F) return Unicode_Block_BLOCK_ELEMENTS;
	if (codepoint >= 0x25A0 && codepoint <= 0x25FF) return Unicode_Block_GEOMETRIC_SHAPES;
	if (codepoint >= 0x2600 && codepoint <= 0x26FF) return Unicode_Block_MISCELLANEOUS_SYMBOLS;
	if (codepoint >= 0x2700 && codepoint <= 0x27BF) return Unicode_Block_DINGBATS;
	if (codepoint >= 0x27C0 && codepoint <= 0x27EF) return Unicode_Block_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A;
	if (codepoint >= 0x27F0 && codepoint <= 0x27FF) return Unicode_Block_SUPPLEMENTAL_ARROWS_A;
	if (codepoint >= 0x2800 && codepoint <= 0x28FF) return Unicode_Block_BRAILLE_PATTERNS;
	if (codepoint >= 0x2900 && codepoint <= 0x297F) return Unicode_Block_SUPPLEMENTAL_ARROWS_B;
	if (codepoint >= 0x2980 && codepoint <= 0x29FF) return Unicode_Block_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B;
	if (codepoint >= 0x2A00 && codepoint <= 0x2AFF) return Unicode_Block_SUPPLEMENTAL_MATHEMATICAL_OPERATORS;
	if (codepoint >= 0x2B00 && codepoint <= 0x2BFF) return Unicode_Block_MISCELLANEOUS_SYMBOLS_AND_ARROWS;
	if (codepoint >= 0x2C00 && codepoint <= 0x2C5F) return Unicode_Block_GLAGOLITIC;
	if (codepoint >= 0x2C60 && codepoint <= 0x2C7F) return Unicode_Block_LATIN_EXTENDED_C;
	if (codepoint >= 0x2C80 && codepoint <= 0x2CFF) return Unicode_Block_COPTIC;
	if (codepoint >= 0x2D00 && codepoint <= 0x2D2F) return Unicode_Block_GEORGIAN_SUPPLEMENT;
	if (codepoint >= 0x2D30 && codepoint <= 0x2D7F) return Unicode_Block_TIFINAGH;
	if (codepoint >= 0x2D80 && codepoint <= 0x2DDF) return Unicode_Block_ETHIOPIC_EXTENDED;
	if (codepoint >= 0x2DE0 && codepoint <= 0x2DFF) return Unicode_Block_CYRILLIC_EXTENDED_A;
	if (codepoint >= 0x2E00 && codepoint <= 0x2E7F) return Unicode_Block_SUPPLEMENTAL_PUNCTUATION;
	if (codepoint >= 0x2E80 && codepoint <= 0x2EFF) return Unicode_Block_CJK_RADICALS_SUPPLEMENT;
	if (codepoint >= 0x2F00 && codepoint <= 0x2FDF) return Unicode_Block_KANGXI_RADICALS;
	if (codepoint >= 0x2FF0 && codepoint <= 0x2FFF) return Unicode_Block_IDEOGRAPHIC_DESCRIPTION_CHARACTERS;
	if (codepoint >= 0x3000 && codepoint <= 0x303F) return Unicode_Block_CJK_SYMBOLS_AND_PUNCTUATION;
	if (codepoint >= 0x3040 && codepoint <= 0x309F) return Unicode_Block_HIRAGANA;
	if (codepoint >= 0x30A0 && codepoint <= 0x30FF) return Unicode_Block_KATAKANA;
	if (codepoint >= 0x3100 && codepoint <= 0x312F) return Unicode_Block_BOPOMOFO;
	if (codepoint >= 0x3130 && codepoint <= 0x318F) return Unicode_Block_HANGUL_COMPATIBILITY_JAMO;
	if (codepoint >= 0x3190 && codepoint <= 0x319F) return Unicode_Block_KANBUN;
	if (codepoint >= 0x31A0 && codepoint <= 0x31BF) return Unicode_Block_BOPOMOFO_EXTENDED;
	if (codepoint >= 0x31C0 && codepoint <= 0x31EF) return Unicode_Block_CJK_STROKES;
	if (codepoint >= 0x31F0 && codepoint <= 0x31FF) return Unicode_Block_KATAKANA_PHONETIC_EXTENSIONS;
	if (codepoint >= 0x3200 && codepoint <= 0x32FF) return Unicode_Block_ENCLOSED_CJK_LETTERS_AND_MONTHS;
	if (codepoint >= 0x3300 && codepoint <= 0x33FF) return Unicode_Block_CJK_COMPATIBILITY;
	if (codepoint >= 0x3400 && codepoint <= 0x4DBF) return Unicode_Block_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A;
	if (codepoint >= 0x4DC0 && codepoint <= 0x4DFF) return Unicode_Block_YIJING_HEXAGRAM_SYMBOLS;
	if (codepoint >= 0x4E00 && codepoint <= 0x9FFF) return Unicode_Block_CJK_UNIFIED_IDEOGRAPHS;
	if (codepoint >= 0xA000 && codepoint <= 0xA48F) return Unicode_Block_YI_SYLLABLES;
	if (codepoint >= 0xA490 && codepoint <= 0xA4CF) return Unicode_Block_YI_RADICALS;
	if (codepoint >= 0xA4D0 && codepoint <= 0xA4FF) return Unicode_Block_LISU;
	if (codepoint >= 0xA500 && codepoint <= 0xA63F) return Unicode_Block_VAI;
	if (codepoint >= 0xA640 && codepoint <= 0xA69F) return Unicode_Block_CYRILLIC_EXTENDED_B;
	if (codepoint >= 0xA6A0 && codepoint <= 0xA6FF) return Unicode_Block_BAMUM;
	if (codepoint >= 0xA700 && codepoint <= 0xA71F) return Unicode_Block_MODIFIER_TONE_LETTERS;
	if (codepoint >= 0xA720 && codepoint <= 0xA7FF) return Unicode_Block_LATIN_EXTENDED_D;
	if (codepoint >= 0xA800 && codepoint <= 0xA82F) return Unicode_Block_SYLOTI_NAGRI;
	if (codepoint >= 0xA830 && codepoint <= 0xA83F) return Unicode_Block_COMMON_INDIC_NUMBER_FORMS;
	if (codepoint >= 0xA840 && codepoint <= 0xA87F) return Unicode_Block_PHAGS_PA;
	if (codepoint >= 0xA880 && codepoint <= 0xA8DF) return Unicode_Block_SAURASHTRA;
	if (codepoint >= 0xA8E0 && codepoint <= 0xA8FF) return Unicode_Block_DEVANAGARI_EXTENDED;
	if (codepoint >= 0xA900 && codepoint <= 0xA92F) return Unicode_Block_KAYAH_LI;
	if (codepoint >= 0xA930 && codepoint <= 0xA95F) return Unicode_Block_REJANG;
	if (codepoint >= 0xA960 && codepoint <= 0xA97F) return Unicode_Block_HANGUL_JAMO_EXTENDED_A;
	if (codepoint >= 0xA980 && codepoint <= 0xA9DF) return Unicode_Block_JAVANESE;
	if (codepoint >= 0xA9E0 && codepoint <= 0xA9FF) return Unicode_Block_MYANMAR_EXTENDED_B;
	if (codepoint >= 0xAA00 && codepoint <= 0xAA5F) return Unicode_Block_CHAM;
	if (codepoint >= 0xAA60 && codepoint <= 0xAA7F) return Unicode_Block_MYANMAR_EXTENDED_A;
	if (codepoint >= 0xAA80 && codepoint <= 0xAADF) return Unicode_Block_TAI_VIET;
	if (codepoint >= 0xAAE0 && codepoint <= 0xAAFF) return Unicode_Block_MEETEI_MAYEK_EXTENSIONS;
	if (codepoint >= 0xAB00 && codepoint <= 0xAB2F) return Unicode_Block_ETHIOPIC_EXTENDED_A;
	if (codepoint >= 0xAB30 && codepoint <= 0xAB6F) return Unicode_Block_LATIN_EXTENDED_E;
	if (codepoint >= 0xAB70 && codepoint <= 0xABBF) return Unicode_Block_CHEROKEE_SUPPLEMENT;
	if (codepoint >= 0xABC0 && codepoint <= 0xABFF) return Unicode_Block_MEETEI_MAYEK;
	if (codepoint >= 0xAC00 && codepoint <= 0xD7AF) return Unicode_Block_HANGUL_SYLLABLES;
	if (codepoint >= 0xD7B0 && codepoint <= 0xD7FF) return Unicode_Block_HANGUL_JAMO_EXTENDED_B;
	if (codepoint >= 0xD800 && codepoint <= 0xDB7F) return Unicode_Block_HIGH_SURROGATES;
	if (codepoint >= 0xDB80 && codepoint <= 0xDBFF) return Unicode_Block_HIGH_PRIVATE_USE_SURROGATES;
	if (codepoint >= 0xDC00 && codepoint <= 0xDFFF) return Unicode_Block_LOW_SURROGATES;
	if (codepoint >= 0xE000 && codepoint <= 0xF8FF) return Unicode_Block_PRIVATE_USE_AREA;
	if (codepoint >= 0xF900 && codepoint <= 0xFAFF) return Unicode_Block_CJK_COMPATIBILITY_IDEOGRAPHS;
	if (codepoint >= 0xFB00 && codepoint <= 0xFB4F) return Unicode_Block_ALPHABETIC_PRESENTATION_FORMS;
	if (codepoint >= 0xFB50 && codepoint <= 0xFDFF) return Unicode_Block_ARABIC_PRESENTATION_FORMS_A;
	if (codepoint >= 0xFE00 && codepoint <= 0xFE0F) return Unicode_Block_VARIATION_SELECTORS;
	if (codepoint >= 0xFE10 && codepoint <= 0xFE1F) return Unicode_Block_VERTICAL_FORMS;
	if (codepoint >= 0xFE20 && codepoint <= 0xFE2F) return Unicode_Block_COMBINING_HALF_MARKS;
	if (codepoint >= 0xFE30 && codepoint <= 0xFE4F) return Unicode_Block_CJK_COMPATIBILITY_FORMS;
	if (codepoint >= 0xFE50 && codepoint <= 0xFE6F) return Unicode_Block_SMALL_FORM_VARIANTS;
	if (codepoint >= 0xFE70 && codepoint <= 0xFEFF) return Unicode_Block_ARABIC_PRESENTATION_FORMS_B;
	if (codepoint >= 0xFF00 && codepoint <= 0xFFEF) return Unicode_Block_HALFWIDTH_AND_FULLWIDTH_FORMS;
	if (codepoint >= 0xFFF0 && codepoint <= 0xFFFF) return Unicode_Block_SPECIALS;
	if (codepoint >= 0x10000 && codepoint <= 0x1007F) return Unicode_Block_LINEAR_B_SYLLABARY;
	if (codepoint >= 0x10080 && codepoint <= 0x100FF) return Unicode_Block_LINEAR_B_IDEOGRAMS;
	if (codepoint >= 0x10100 && codepoint <= 0x1013F) return Unicode_Block_AEGEAN_NUMBERS;
	if (codepoint >= 0x10140 && codepoint <= 0x1018F) return Unicode_Block_ANCIENT_GREEK_NUMBERS;
	if (codepoint >= 0x10190 && codepoint <= 0x101CF) return Unicode_Block_ANCIENT_SYMBOLS;
	if (codepoint >= 0x101D0 && codepoint <= 0x101FF) return Unicode_Block_PHAISTOS_DISC;
	if (codepoint >= 0x10280 && codepoint <= 0x1029F) return Unicode_Block_LYCIAN;
	if (codepoint >= 0x102A0 && codepoint <= 0x102DF) return Unicode_Block_CARIAN;
	if (codepoint >= 0x102E0 && codepoint <= 0x102FF) return Unicode_Block_COPTIC_EPACT_NUMBERS;
	if (codepoint >= 0x10300 && codepoint <= 0x1032F) return Unicode_Block_OLD_ITALIC;
	if (codepoint >= 0x10330 && codepoint <= 0x1034F) return Unicode_Block_GOTHIC;
	if (codepoint >= 0x10350 && codepoint <= 0x1037F) return Unicode_Block_OLD_PERMIC;
	if (codepoint >= 0x10380 && codepoint <= 0x1039F) return Unicode_Block_UGARITIC;
	if (codepoint >= 0x103A0 && codepoint <= 0x103DF) return Unicode_Block_OLD_PERSIAN;
	if (codepoint >= 0x10400 && codepoint <= 0x1044F) return Unicode_Block_DESERET;
	if (codepoint >= 0x10450 && codepoint <= 0x1047F) return Unicode_Block_SHAVIAN;
	if (codepoint >= 0x10480 && codepoint <= 0x104AF) return Unicode_Block_OSMANYA;
	if (codepoint >= 0x104B0 && codepoint <= 0x104FF) return Unicode_Block_OSAGE;
	if (codepoint >= 0x10500 && codepoint <= 0x1052F) return Unicode_Block_ELBASAN;
	if (codepoint >= 0x10530 && codepoint <= 0x1056F) return Unicode_Block_CAUCASIAN_ALBANIAN;
	if (codepoint >= 0x10600 && codepoint <= 0x1077F) return Unicode_Block_LINEAR_A;
	if (codepoint >= 0x10800 && codepoint <= 0x1083F) return Unicode_Block_CYPRIOT_SYLLABARY;
	if (codepoint >= 0x10840 && codepoint <= 0x1085F) return Unicode_Block_IMPERIAL_ARAMAIC;
	if (codepoint >= 0x10860 && codepoint <= 0x1087F) return Unicode_Block_PALMYRENE;
	if (codepoint >= 0x10880 && codepoint <= 0x108AF) return Unicode_Block_NABATAEAN;
	if (codepoint >= 0x108E0 && codepoint <= 0x108FF) return Unicode_Block_HATRAN;
	if (codepoint >= 0x10900 && codepoint <= 0x1091F) return Unicode_Block_PHOENICIAN;
	if (codepoint >= 0x10920 && codepoint <= 0x1093F) return Unicode_Block_LYDIAN;
	if (codepoint >= 0x10980 && codepoint <= 0x1099F) return Unicode_Block_MEROITIC_HIEROGLYPHS;
	if (codepoint >= 0x109A0 && codepoint <= 0x109FF) return Unicode_Block_MEROITIC_CURSIVE;
	if (codepoint >= 0x10A00 && codepoint <= 0x10A5F) return Unicode_Block_KHAROSHTHI;
	if (codepoint >= 0x10A60 && codepoint <= 0x10A7F) return Unicode_Block_OLD_SOUTH_ARABIAN;
	if (codepoint >= 0x10A80 && codepoint <= 0x10A9F) return Unicode_Block_OLD_NORTH_ARABIAN;
	if (codepoint >= 0x10AC0 && codepoint <= 0x10AFF) return Unicode_Block_MANICHAEAN;
	if (codepoint >= 0x10B00 && codepoint <= 0x10B3F) return Unicode_Block_AVESTAN;
	if (codepoint >= 0x10B40 && codepoint <= 0x10B5F) return Unicode_Block_INSCRIPTIONAL_PARTHIAN;
	if (codepoint >= 0x10B60 && codepoint <= 0x10B7F) return Unicode_Block_INSCRIPTIONAL_PAHLAVI;
	if (codepoint >= 0x10B80 && codepoint <= 0x10BAF) return Unicode_Block_PSALTER_PAHLAVI;
	if (codepoint >= 0x10C00 && codepoint <= 0x10C4F) return Unicode_Block_OLD_TURKIC;
	if (codepoint >= 0x10C80 && codepoint <= 0x10CFF) return Unicode_Block_OLD_HUNGARIAN;
	if (codepoint >= 0x10D00 && codepoint <= 0x10D3F) return Unicode_Block_HANIFI_ROHINGYA;
	if (codepoint >= 0x10E60 && codepoint <= 0x10E7F) return Unicode_Block_RUMI_NUMERAL_SYMBOLS;
	if (codepoint >= 0x10E80 && codepoint <= 0x10EBF) return Unicode_Block_YEZIDI;
	if (codepoint >= 0x10F00 && codepoint <= 0x10F2F) return Unicode_Block_OLD_SOGDIAN;
	if (codepoint >= 0x10F30 && codepoint <= 0x10F6F) return Unicode_Block_SOGDIAN;
	if (codepoint >= 0x10FB0 && codepoint <= 0x10FDF) return Unicode_Block_CHORASMIAN;
	if (codepoint >= 0x10FE0 && codepoint <= 0x10FFF) return Unicode_Block_ELYMAIC;
	if (codepoint >= 0x11000 && codepoint <= 0x1107F) return Unicode_Block_BRAHMI;
	if (codepoint >= 0x11080 && codepoint <= 0x110CF) return Unicode_Block_KAITHI;
	if (codepoint >= 0x110D0 && codepoint <= 0x110FF) return Unicode_Block_SORA_SOMPENG;
	if (codepoint >= 0x11100 && codepoint <= 0x1114F) return Unicode_Block_CHAKMA;
	if (codepoint >= 0x11150 && codepoint <= 0x1117F) return Unicode_Block_MAHAJANI;
	if (codepoint >= 0x11180 && codepoint <= 0x111DF) return Unicode_Block_SHARADA;
	if (codepoint >= 0x111E0 && codepoint <= 0x111FF) return Unicode_Block_SINHALA_ARCHAIC_NUMBERS;
	if (codepoint >= 0x11200 && codepoint <= 0x1124F) return Unicode_Block_KHOJKI;
	if (codepoint >= 0x11280 && codepoint <= 0x112AF) return Unicode_Block_MULTANI;
	if (codepoint >= 0x112B0 && codepoint <= 0x112FF) return Unicode_Block_KHUDAWADI;
	if (codepoint >= 0x11300 && codepoint <= 0x1137F) return Unicode_Block_GRANTHA;
	if (codepoint >= 0x11400 && codepoint <= 0x1147F) return Unicode_Block_NEWA;
	if (codepoint >= 0x11480 && codepoint <= 0x114DF) return Unicode_Block_TIRHUTA;
	if (codepoint >= 0x11580 && codepoint <= 0x115FF) return Unicode_Block_SIDDHAM;
	if (codepoint >= 0x11600 && codepoint <= 0x1165F) return Unicode_Block_MODI;
	if (codepoint >= 0x11660 && codepoint <= 0x1167F) return Unicode_Block_MONGOLIAN_SUPPLEMENT;
	if (codepoint >= 0x11680 && codepoint <= 0x116CF) return Unicode_Block_TAKRI;
	if (codepoint >= 0x11700 && codepoint <= 0x1173F) return Unicode_Block_AHOM;
	if (codepoint >= 0x11800 && codepoint <= 0x1184F) return Unicode_Block_DOGRA;
	if (codepoint >= 0x118A0 && codepoint <= 0x118FF) return Unicode_Block_WARANG_CITI;
	if (codepoint >= 0x11900 && codepoint <= 0x1195F) return Unicode_Block_DIVES_AKURU;
	if (codepoint >= 0x119A0 && codepoint <= 0x119FF) return Unicode_Block_NANDINAGARI;
	if (codepoint >= 0x11A00 && codepoint <= 0x11A4F) return Unicode_Block_ZANABAZAR_SQUARE;
	if (codepoint >= 0x11A50 && codepoint <= 0x11AAF) return Unicode_Block_SOYOMBO;
	if (codepoint >= 0x11AC0 && codepoint <= 0x11AFF) return Unicode_Block_PAU_CIN_HAU;
	if (codepoint >= 0x11C00 && codepoint <= 0x11C6F) return Unicode_Block_BHAIKSUKI;
	if (codepoint >= 0x11C70 && codepoint <= 0x11CBF) return Unicode_Block_MARCHEN;
	if (codepoint >= 0x11D00 && codepoint <= 0x11D5F) return Unicode_Block_MASARAM_GONDI;
	if (codepoint >= 0x11D60 && codepoint <= 0x11DAF) return Unicode_Block_GUNJALA_GONDI;
	if (codepoint >= 0x11EE0 && codepoint <= 0x11EFF) return Unicode_Block_MAKASAR;
	if (codepoint >= 0x11FB0 && codepoint <= 0x11FBF) return Unicode_Block_LISU_SUPPLEMENT;
	if (codepoint >= 0x11FC0 && codepoint <= 0x11FFF) return Unicode_Block_TAMIL_SUPPLEMENT;
	if (codepoint >= 0x12000 && codepoint <= 0x123FF) return Unicode_Block_CUNEIFORM;
	if (codepoint >= 0x12400 && codepoint <= 0x1247F) return Unicode_Block_CUNEIFORM_NUMBERS_AND_PUNCTUATION;
	if (codepoint >= 0x12480 && codepoint <= 0x1254F) return Unicode_Block_EARLY_DYNASTIC_CUNEIFORM;
	if (codepoint >= 0x13000 && codepoint <= 0x1342F) return Unicode_Block_EGYPTIAN_HIEROGLYPHS;
	if (codepoint >= 0x13430 && codepoint <= 0x1343F) return Unicode_Block_EGYPTIAN_HIEROGLYPH_FORMAT_CONTROLS;
	if (codepoint >= 0x14400 && codepoint <= 0x1467F) return Unicode_Block_ANATOLIAN_HIEROGLYPHS;
	if (codepoint >= 0x16800 && codepoint <= 0x16A3F) return Unicode_Block_BAMUM_SUPPLEMENT;
	if (codepoint >= 0x16A40 && codepoint <= 0x16A6F) return Unicode_Block_MRO;
	if (codepoint >= 0x16AD0 && codepoint <= 0x16AFF) return Unicode_Block_BASSA_VAH;
	if (codepoint >= 0x16B00 && codepoint <= 0x16B8F) return Unicode_Block_PAHAWH_HMONG;
	if (codepoint >= 0x16E40 && codepoint <= 0x16E9F) return Unicode_Block_MEDEFAIDRIN;
	if (codepoint >= 0x16F00 && codepoint <= 0x16F9F) return Unicode_Block_MIAO;
	if (codepoint >= 0x16FE0 && codepoint <= 0x16FFF) return Unicode_Block_IDEOGRAPHIC_SYMBOLS_AND_PUNCTUATION;
	if (codepoint >= 0x17000 && codepoint <= 0x187FF) return Unicode_Block_TANGUT;
	if (codepoint >= 0x18800 && codepoint <= 0x18AFF) return Unicode_Block_TANGUT_COMPONENTS;
	if (codepoint >= 0x18B00 && codepoint <= 0x18CFF) return Unicode_Block_KHITAN_SMALL_SCRIPT;
	if (codepoint >= 0x18D00 && codepoint <= 0x18D8F) return Unicode_Block_TANGUT_SUPPLEMENT;
	if (codepoint >= 0x1B000 && codepoint <= 0x1B0FF) return Unicode_Block_KANA_SUPPLEMENT;
	if (codepoint >= 0x1B100 && codepoint <= 0x1B12F) return Unicode_Block_KANA_EXTENDED_A;
	if (codepoint >= 0x1B130 && codepoint <= 0x1B16F) return Unicode_Block_SMALL_KANA_EXTENSION;
	if (codepoint >= 0x1B170 && codepoint <= 0x1B2FF) return Unicode_Block_NUSHU;
	if (codepoint >= 0x1BC00 && codepoint <= 0x1BC9F) return Unicode_Block_DUPLOYAN;
	if (codepoint >= 0x1BCA0 && codepoint <= 0x1BCAF) return Unicode_Block_SHORTHAND_FORMAT_CONTROLS;
	if (codepoint >= 0x1D000 && codepoint <= 0x1D0FF) return Unicode_Block_BYZANTINE_MUSICAL_SYMBOLS;
	if (codepoint >= 0x1D100 && codepoint <= 0x1D1FF) return Unicode_Block_MUSICAL_SYMBOLS;
	if (codepoint >= 0x1D200 && codepoint <= 0x1D24F) return Unicode_Block_ANCIENT_GREEK_MUSICAL_NOTATION;
	if (codepoint >= 0x1D2E0 && codepoint <= 0x1D2FF) return Unicode_Block_MAYAN_NUMERALS;
	if (codepoint >= 0x1D300 && codepoint <= 0x1D35F) return Unicode_Block_TAI_XUAN_JING_SYMBOLS;
	if (codepoint >= 0x1D360 && codepoint <= 0x1D37F) return Unicode_Block_COUNTING_ROD_NUMERALS;
	if (codepoint >= 0x1D400 && codepoint <= 0x1D7FF) return Unicode_Block_MATHEMATICAL_ALPHANUMERIC_SYMBOLS;
	if (codepoint >= 0x1D800 && codepoint <= 0x1DAAF) return Unicode_Block_SUTTON_SIGNWRITING;
	if (codepoint >= 0x1E000 && codepoint <= 0x1E02F) return Unicode_Block_GLAGOLITIC_SUPPLEMENT;
	if (codepoint >= 0x1E100 && codepoint <= 0x1E14F) return Unicode_Block_NYIAKENG_PUACHUE_HMONG;
	if (codepoint >= 0x1E2C0 && codepoint <= 0x1E2FF) return Unicode_Block_WANCHO;
	if (codepoint >= 0x1E800 && codepoint <= 0x1E8DF) return Unicode_Block_MENDE_KIKAKUI;
	if (codepoint >= 0x1E900 && codepoint <= 0x1E95F) return Unicode_Block_ADLAM;
	if (codepoint >= 0x1EC70 && codepoint <= 0x1ECBF) return Unicode_Block_INDIC_SIYAQ_NUMBERS;
	if (codepoint >= 0x1ED00 && codepoint <= 0x1ED4F) return Unicode_Block_OTTOMAN_SIYAQ_NUMBERS;
	if (codepoint >= 0x1EE00 && codepoint <= 0x1EEFF) return Unicode_Block_ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS;
	if (codepoint >= 0x1F000 && codepoint <= 0x1F02F) return Unicode_Block_MAHJONG_TILES;
	if (codepoint >= 0x1F030 && codepoint <= 0x1F09F) return Unicode_Block_DOMINO_TILES;
	if (codepoint >= 0x1F0A0 && codepoint <= 0x1F0FF) return Unicode_Block_PLAYING_CARDS;
	if (codepoint >= 0x1F100 && codepoint <= 0x1F1FF) return Unicode_Block_ENCLOSED_ALPHANUMERIC_SUPPLEMENT;
	if (codepoint >= 0x1F200 && codepoint <= 0x1F2FF) return Unicode_Block_ENCLOSED_IDEOGRAPHIC_SUPPLEMENT;
	if (codepoint >= 0x1F300 && codepoint <= 0x1F5FF) return Unicode_Block_MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS;
	if (codepoint >= 0x1F600 && codepoint <= 0x1F64F) return Unicode_Block_EMOTICONS;
	if (codepoint >= 0x1F650 && codepoint <= 0x1F67F) return Unicode_Block_ORNAMENTAL_DINGBATS;
	if (codepoint >= 0x1F680 && codepoint <= 0x1F6FF) return Unicode_Block_TRANSPORT_AND_MAP_SYMBOLS;
	if (codepoint >= 0x1F700 && codepoint <= 0x1F77F) return Unicode_Block_ALCHEMICAL_SYMBOLS;
	if (codepoint >= 0x1F780 && codepoint <= 0x1F7FF) return Unicode_Block_GEOMETRIC_SHAPES_EXTENDED;
	if (codepoint >= 0x1F800 && codepoint <= 0x1F8FF) return Unicode_Block_SUPPLEMENTAL_ARROWS_C;
	if (codepoint >= 0x1F900 && codepoint <= 0x1F9FF) return Unicode_Block_SUPPLEMENTAL_SYMBOLS_AND_PICTOGRAPHS;
	if (codepoint >= 0x1FA00 && codepoint <= 0x1FA6F) return Unicode_Block_CHESS_SYMBOLS;
	if (codepoint >= 0x1FA70 && codepoint <= 0x1FAFF) return Unicode_Block_SYMBOLS_AND_PICTOGRAPHS_EXTENDED_A;
	if (codepoint >= 0x1FB00 && codepoint <= 0x1FBFF) return Unicode_Block_SYMBOLS_FOR_LEGACY_COMPUTING;
	if (codepoint >= 0x20000 && codepoint <= 0x2A6DF) return Unicode_Block_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B;
	if (codepoint >= 0x2A700 && codepoint <= 0x2B73F) return Unicode_Block_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C;
	if (codepoint >= 0x2B740 && codepoint <= 0x2B81F) return Unicode_Block_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D;
	if (codepoint >= 0x2B820 && codepoint <= 0x2CEAF) return Unicode_Block_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_E;
	if (codepoint >= 0x2CEB0 && codepoint <= 0x2EBEF) return Unicode_Block_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_F;
	if (codepoint >= 0x2F800 && codepoint <= 0x2FA1F) return Unicode_Block_CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT;
	if (codepoint >= 0x30000 && codepoint <= 0x3134F) return Unicode_Block_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_G;
	if (codepoint >= 0xE0000 && codepoint <= 0xE007F) return Unicode_Block_TAGS;
	if (codepoint >= 0xE0100 && codepoint <= 0xE01EF) return Unicode_Block_VARIATION_SELECTORS_SUPPLEMENT;
	if (codepoint >= 0xF0000 && codepoint <= 0xFFFFF) return Unicode_Block_SUPPLEMENTARY_PRIVATE_USE_AREA_A;
	if (codepoint >= 0x100000 && codepoint <= 0x10FFFF) return Unicode_Block_SUPPLEMENTARY_PRIVATE_USE_AREA_B;

	return Unicode_Block_UNKNOWN;
}

Unicode_Prop unicode_prop(uint32_t codepoint) {
	if (codepoint >= 0x0009 && codepoint <= 0x000D) return Unicode_Prop_WHITE_SPACE;
	if (codepoint == 0x0020) return Unicode_Prop_WHITE_SPACE;
	if (codepoint == 0x0085) return Unicode_Prop_WHITE_SPACE;
	if (codepoint == 0x00A0) return Unicode_Prop_WHITE_SPACE;
	if (codepoint == 0x1680) return Unicode_Prop_WHITE_SPACE;
	if (codepoint >= 0x2000 && codepoint <= 0x200A) return Unicode_Prop_WHITE_SPACE;
	if (codepoint == 0x2028) return Unicode_Prop_WHITE_SPACE;
	if (codepoint == 0x2029) return Unicode_Prop_WHITE_SPACE;
	if (codepoint == 0x202F) return Unicode_Prop_WHITE_SPACE;
	if (codepoint == 0x205F) return Unicode_Prop_WHITE_SPACE;
	if (codepoint == 0x3000) return Unicode_Prop_WHITE_SPACE;
	if (codepoint == 0x061C) return Unicode_Prop_BIDI_CONTROL;
	if (codepoint >= 0x200E && codepoint <= 0x200F) return Unicode_Prop_BIDI_CONTROL;
	if (codepoint >= 0x202A && codepoint <= 0x202E) return Unicode_Prop_BIDI_CONTROL;
	if (codepoint >= 0x2066 && codepoint <= 0x2069) return Unicode_Prop_BIDI_CONTROL;
	if (codepoint >= 0x200C && codepoint <= 0x200D) return Unicode_Prop_JOIN_CONTROL;
	if (codepoint == 0x002D) return Unicode_Prop_DASH;
	if (codepoint == 0x058A) return Unicode_Prop_DASH;
	if (codepoint == 0x05BE) return Unicode_Prop_DASH;
	if (codepoint == 0x1400) return Unicode_Prop_DASH;
	if (codepoint == 0x1806) return Unicode_Prop_DASH;
	if (codepoint >= 0x2010 && codepoint <= 0x2015) return Unicode_Prop_DASH;
	if (codepoint == 0x2053) return Unicode_Prop_DASH;
	if (codepoint == 0x207B) return Unicode_Prop_DASH;
	if (codepoint == 0x208B) return Unicode_Prop_DASH;
	if (codepoint == 0x2212) return Unicode_Prop_DASH;
	if (codepoint == 0x2E17) return Unicode_Prop_DASH;
	if (codepoint == 0x2E1A) return Unicode_Prop_DASH;
	if (codepoint >= 0x2E3A && codepoint <= 0x2E3B) return Unicode_Prop_DASH;
	if (codepoint == 0x2E40) return Unicode_Prop_DASH;
	if (codepoint == 0x301C) return Unicode_Prop_DASH;
	if (codepoint == 0x3030) return Unicode_Prop_DASH;
	if (codepoint == 0x30A0) return Unicode_Prop_DASH;
	if (codepoint >= 0xFE31 && codepoint <= 0xFE32) return Unicode_Prop_DASH;
	if (codepoint == 0xFE58) return Unicode_Prop_DASH;
	if (codepoint == 0xFE63) return Unicode_Prop_DASH;
	if (codepoint == 0xFF0D) return Unicode_Prop_DASH;
	if (codepoint == 0x10EAD) return Unicode_Prop_DASH;
	if (codepoint == 0x002D) return Unicode_Prop_HYPHEN;
	if (codepoint == 0x00AD) return Unicode_Prop_HYPHEN;
	if (codepoint == 0x058A) return Unicode_Prop_HYPHEN;
	if (codepoint == 0x1806) return Unicode_Prop_HYPHEN;
	if (codepoint >= 0x2010 && codepoint <= 0x2011) return Unicode_Prop_HYPHEN;
	if (codepoint == 0x2E17) return Unicode_Prop_HYPHEN;
	if (codepoint == 0x30FB) return Unicode_Prop_HYPHEN;
	if (codepoint == 0xFE63) return Unicode_Prop_HYPHEN;
	if (codepoint == 0xFF0D) return Unicode_Prop_HYPHEN;
	if (codepoint == 0xFF65) return Unicode_Prop_HYPHEN;
	if (codepoint == 0x0022) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0x0027) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0x00AB) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0x00BB) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0x2018) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0x2019) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0x201A) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint >= 0x201B && codepoint <= 0x201C) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0x201D) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0x201E) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0x201F) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0x2039) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0x203A) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0x2E42) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0x300C) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0x300D) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0x300E) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0x300F) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0x301D) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint >= 0x301E && codepoint <= 0x301F) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0xFE41) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0xFE42) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0xFE43) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0xFE44) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0xFF02) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0xFF07) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0xFF62) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0xFF63) return Unicode_Prop_QUOTATION_MARK;
	if (codepoint == 0x0021) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x002C) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x002E) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x003A && codepoint <= 0x003B) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x003F) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x037E) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x0387) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x0589) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x05C3) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x060C) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x061B) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x061E && codepoint <= 0x061F) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x06D4) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x0700 && codepoint <= 0x070A) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x070C) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x07F8 && codepoint <= 0x07F9) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x0830 && codepoint <= 0x083E) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x085E) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x0964 && codepoint <= 0x0965) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x0E5A && codepoint <= 0x0E5B) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x0F08) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x0F0D && codepoint <= 0x0F12) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x104A && codepoint <= 0x104B) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x1361 && codepoint <= 0x1368) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x166E) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x16EB && codepoint <= 0x16ED) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x1735 && codepoint <= 0x1736) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x17D4 && codepoint <= 0x17D6) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x17DA) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x1802 && codepoint <= 0x1805) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x1808 && codepoint <= 0x1809) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x1944 && codepoint <= 0x1945) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x1AA8 && codepoint <= 0x1AAB) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x1B5A && codepoint <= 0x1B5B) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x1B5D && codepoint <= 0x1B5F) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x1C3B && codepoint <= 0x1C3F) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x1C7E && codepoint <= 0x1C7F) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x203C && codepoint <= 0x203D) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x2047 && codepoint <= 0x2049) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x2E2E) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x2E3C) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x2E41) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x2E4C) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x2E4E && codepoint <= 0x2E4F) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x3001 && codepoint <= 0x3002) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0xA4FE && codepoint <= 0xA4FF) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0xA60D && codepoint <= 0xA60F) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0xA6F3 && codepoint <= 0xA6F7) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0xA876 && codepoint <= 0xA877) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0xA8CE && codepoint <= 0xA8CF) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0xA92F) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0xA9C7 && codepoint <= 0xA9C9) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0xAA5D && codepoint <= 0xAA5F) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0xAADF) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0xAAF0 && codepoint <= 0xAAF1) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0xABEB) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0xFE50 && codepoint <= 0xFE52) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0xFE54 && codepoint <= 0xFE57) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0xFF01) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0xFF0C) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0xFF0E) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0xFF1A && codepoint <= 0xFF1B) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0xFF1F) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0xFF61) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0xFF64) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x1039F) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x103D0) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x10857) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x1091F) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x10A56 && codepoint <= 0x10A57) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x10AF0 && codepoint <= 0x10AF5) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x10B3A && codepoint <= 0x10B3F) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x10B99 && codepoint <= 0x10B9C) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x10F55 && codepoint <= 0x10F59) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x11047 && codepoint <= 0x1104D) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x110BE && codepoint <= 0x110C1) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x11141 && codepoint <= 0x11143) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x111C5 && codepoint <= 0x111C6) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x111CD) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x111DE && codepoint <= 0x111DF) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x11238 && codepoint <= 0x1123C) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x112A9) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x1144B && codepoint <= 0x1144D) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x1145A && codepoint <= 0x1145B) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x115C2 && codepoint <= 0x115C5) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x115C9 && codepoint <= 0x115D7) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x11641 && codepoint <= 0x11642) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x1173C && codepoint <= 0x1173E) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x11944) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x11946) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x11A42 && codepoint <= 0x11A43) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x11A9B && codepoint <= 0x11A9C) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x11AA1 && codepoint <= 0x11AA2) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x11C41 && codepoint <= 0x11C43) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x11C71) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x11EF7 && codepoint <= 0x11EF8) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x12470 && codepoint <= 0x12474) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x16A6E && codepoint <= 0x16A6F) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x16AF5) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x16B37 && codepoint <= 0x16B39) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x16B44) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x16E97 && codepoint <= 0x16E98) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x1BC9F) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint >= 0x1DA87 && codepoint <= 0x1DA8A) return Unicode_Prop_TERMINAL_PUNCTUATION;
	if (codepoint == 0x005E) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x03D0 && codepoint <= 0x03D2) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x03D5) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x03F0 && codepoint <= 0x03F1) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x03F4 && codepoint <= 0x03F5) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2016) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x2032 && codepoint <= 0x2034) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2040) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x2061 && codepoint <= 0x2064) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x207D) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x207E) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x208D) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x208E) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x20D0 && codepoint <= 0x20DC) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x20E1) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x20E5 && codepoint <= 0x20E6) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x20EB && codepoint <= 0x20EF) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2102) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2107) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x210A && codepoint <= 0x2113) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2115) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x2119 && codepoint <= 0x211D) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2124) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2128) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2129) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x212C && codepoint <= 0x212D) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x212F && codepoint <= 0x2131) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x2133 && codepoint <= 0x2134) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x2135 && codepoint <= 0x2138) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x213C && codepoint <= 0x213F) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x2145 && codepoint <= 0x2149) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x2195 && codepoint <= 0x2199) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x219C && codepoint <= 0x219F) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x21A1 && codepoint <= 0x21A2) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x21A4 && codepoint <= 0x21A5) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x21A7) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x21A9 && codepoint <= 0x21AD) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x21B0 && codepoint <= 0x21B1) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x21B6 && codepoint <= 0x21B7) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x21BC && codepoint <= 0x21CD) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x21D0 && codepoint <= 0x21D1) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x21D3) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x21D5 && codepoint <= 0x21DB) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x21DD) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x21E4 && codepoint <= 0x21E5) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2308) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2309) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x230A) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x230B) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x23B4 && codepoint <= 0x23B5) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x23B7) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x23D0) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x23E2) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x25A0 && codepoint <= 0x25A1) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x25AE && codepoint <= 0x25B6) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x25BC && codepoint <= 0x25C0) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x25C6 && codepoint <= 0x25C7) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x25CA && codepoint <= 0x25CB) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x25CF && codepoint <= 0x25D3) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x25E2) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x25E4) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x25E7 && codepoint <= 0x25EC) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x2605 && codepoint <= 0x2606) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2640) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2642) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x2660 && codepoint <= 0x2663) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x266D && codepoint <= 0x266E) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x27C5) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x27C6) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x27E6) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x27E7) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x27E8) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x27E9) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x27EA) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x27EB) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x27EC) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x27ED) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x27EE) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x27EF) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2983) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2984) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2985) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2986) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2987) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2988) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2989) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x298A) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x298B) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x298C) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x298D) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x298E) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x298F) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2990) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2991) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2992) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2993) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2994) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2995) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2996) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2997) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x2998) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x29D8) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x29D9) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x29DA) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x29DB) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x29FC) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x29FD) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0xFE61) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0xFE63) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0xFE68) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0xFF3C) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0xFF3E) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D400 && codepoint <= 0x1D454) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D456 && codepoint <= 0x1D49C) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D49E && codepoint <= 0x1D49F) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x1D4A2) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D4A5 && codepoint <= 0x1D4A6) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D4A9 && codepoint <= 0x1D4AC) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D4AE && codepoint <= 0x1D4B9) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x1D4BB) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D4BD && codepoint <= 0x1D4C3) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D4C5 && codepoint <= 0x1D505) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D507 && codepoint <= 0x1D50A) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D50D && codepoint <= 0x1D514) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D516 && codepoint <= 0x1D51C) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D51E && codepoint <= 0x1D539) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D53B && codepoint <= 0x1D53E) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D540 && codepoint <= 0x1D544) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x1D546) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D54A && codepoint <= 0x1D550) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D552 && codepoint <= 0x1D6A5) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D6A8 && codepoint <= 0x1D6C0) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D6C2 && codepoint <= 0x1D6DA) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D6DC && codepoint <= 0x1D6FA) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D6FC && codepoint <= 0x1D714) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D716 && codepoint <= 0x1D734) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D736 && codepoint <= 0x1D74E) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D750 && codepoint <= 0x1D76E) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D770 && codepoint <= 0x1D788) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D78A && codepoint <= 0x1D7A8) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D7AA && codepoint <= 0x1D7C2) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D7C4 && codepoint <= 0x1D7CB) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1D7CE && codepoint <= 0x1D7FF) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1EE00 && codepoint <= 0x1EE03) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1EE05 && codepoint <= 0x1EE1F) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1EE21 && codepoint <= 0x1EE22) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x1EE24) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x1EE27) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1EE29 && codepoint <= 0x1EE32) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1EE34 && codepoint <= 0x1EE37) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x1EE39) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x1EE3B) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x1EE42) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x1EE47) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x1EE49) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x1EE4B) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1EE4D && codepoint <= 0x1EE4F) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1EE51 && codepoint <= 0x1EE52) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x1EE54) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x1EE57) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x1EE59) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x1EE5B) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x1EE5D) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x1EE5F) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1EE61 && codepoint <= 0x1EE62) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x1EE64) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1EE67 && codepoint <= 0x1EE6A) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1EE6C && codepoint <= 0x1EE72) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1EE74 && codepoint <= 0x1EE77) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1EE79 && codepoint <= 0x1EE7C) return Unicode_Prop_OTHER_MATH;
	if (codepoint == 0x1EE7E) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1EE80 && codepoint <= 0x1EE89) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1EE8B && codepoint <= 0x1EE9B) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1EEA1 && codepoint <= 0x1EEA3) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1EEA5 && codepoint <= 0x1EEA9) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x1EEAB && codepoint <= 0x1EEBB) return Unicode_Prop_OTHER_MATH;
	if (codepoint >= 0x0030 && codepoint <= 0x0039) return Unicode_Prop_HEX_DIGIT;
	if (codepoint >= 0x0041 && codepoint <= 0x0046) return Unicode_Prop_HEX_DIGIT;
	if (codepoint >= 0x0061 && codepoint <= 0x0066) return Unicode_Prop_HEX_DIGIT;
	if (codepoint >= 0xFF10 && codepoint <= 0xFF19) return Unicode_Prop_HEX_DIGIT;
	if (codepoint >= 0xFF21 && codepoint <= 0xFF26) return Unicode_Prop_HEX_DIGIT;
	if (codepoint >= 0xFF41 && codepoint <= 0xFF46) return Unicode_Prop_HEX_DIGIT;
	if (codepoint >= 0x0030 && codepoint <= 0x0039) return Unicode_Prop_ASCII_HEX_DIGIT;
	if (codepoint >= 0x0041 && codepoint <= 0x0046) return Unicode_Prop_ASCII_HEX_DIGIT;
	if (codepoint >= 0x0061 && codepoint <= 0x0066) return Unicode_Prop_ASCII_HEX_DIGIT;
	if (codepoint == 0x0345) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x05B0 && codepoint <= 0x05BD) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x05BF) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x05C1 && codepoint <= 0x05C2) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x05C4 && codepoint <= 0x05C5) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x05C7) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0610 && codepoint <= 0x061A) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x064B && codepoint <= 0x0657) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0659 && codepoint <= 0x065F) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0670) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x06D6 && codepoint <= 0x06DC) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x06E1 && codepoint <= 0x06E4) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x06E7 && codepoint <= 0x06E8) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x06ED) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0711) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0730 && codepoint <= 0x073F) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x07A6 && codepoint <= 0x07B0) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0816 && codepoint <= 0x0817) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x081B && codepoint <= 0x0823) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0825 && codepoint <= 0x0827) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0829 && codepoint <= 0x082C) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x08D4 && codepoint <= 0x08DF) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x08E3 && codepoint <= 0x08E9) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x08F0 && codepoint <= 0x0902) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0903) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x093A) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x093B) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x093E && codepoint <= 0x0940) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0941 && codepoint <= 0x0948) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0949 && codepoint <= 0x094C) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x094E && codepoint <= 0x094F) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0955 && codepoint <= 0x0957) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0962 && codepoint <= 0x0963) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0981) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0982 && codepoint <= 0x0983) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x09BE && codepoint <= 0x09C0) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x09C1 && codepoint <= 0x09C4) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x09C7 && codepoint <= 0x09C8) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x09CB && codepoint <= 0x09CC) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x09D7) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x09E2 && codepoint <= 0x09E3) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0A01 && codepoint <= 0x0A02) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0A03) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0A3E && codepoint <= 0x0A40) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0A41 && codepoint <= 0x0A42) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0A47 && codepoint <= 0x0A48) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0A4B && codepoint <= 0x0A4C) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0A51) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0A70 && codepoint <= 0x0A71) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0A75) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0A81 && codepoint <= 0x0A82) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0A83) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0ABE && codepoint <= 0x0AC0) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0AC1 && codepoint <= 0x0AC5) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0AC7 && codepoint <= 0x0AC8) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0AC9) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0ACB && codepoint <= 0x0ACC) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0AE2 && codepoint <= 0x0AE3) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0AFA && codepoint <= 0x0AFC) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0B01) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0B02 && codepoint <= 0x0B03) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0B3E) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0B3F) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0B40) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0B41 && codepoint <= 0x0B44) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0B47 && codepoint <= 0x0B48) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0B4B && codepoint <= 0x0B4C) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0B56) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0B57) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0B62 && codepoint <= 0x0B63) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0B82) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0BBE && codepoint <= 0x0BBF) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0BC0) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0BC1 && codepoint <= 0x0BC2) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0BC6 && codepoint <= 0x0BC8) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0BCA && codepoint <= 0x0BCC) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0BD7) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0C00) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0C01 && codepoint <= 0x0C03) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0C3E && codepoint <= 0x0C40) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0C41 && codepoint <= 0x0C44) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0C46 && codepoint <= 0x0C48) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0C4A && codepoint <= 0x0C4C) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0C55 && codepoint <= 0x0C56) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0C62 && codepoint <= 0x0C63) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0C81) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0C82 && codepoint <= 0x0C83) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0CBE) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0CBF) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0CC0 && codepoint <= 0x0CC4) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0CC6) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0CC7 && codepoint <= 0x0CC8) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0CCA && codepoint <= 0x0CCB) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0CCC) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0CD5 && codepoint <= 0x0CD6) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0CE2 && codepoint <= 0x0CE3) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0D00 && codepoint <= 0x0D01) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0D02 && codepoint <= 0x0D03) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0D3E && codepoint <= 0x0D40) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0D41 && codepoint <= 0x0D44) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0D46 && codepoint <= 0x0D48) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0D4A && codepoint <= 0x0D4C) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0D57) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0D62 && codepoint <= 0x0D63) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0D81) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0D82 && codepoint <= 0x0D83) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0DCF && codepoint <= 0x0DD1) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0DD2 && codepoint <= 0x0DD4) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0DD6) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0DD8 && codepoint <= 0x0DDF) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0DF2 && codepoint <= 0x0DF3) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0E31) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0E34 && codepoint <= 0x0E3A) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0E4D) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0EB1) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0EB4 && codepoint <= 0x0EB9) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0EBB && codepoint <= 0x0EBC) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0ECD) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0F71 && codepoint <= 0x0F7E) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x0F7F) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0F80 && codepoint <= 0x0F81) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0F8D && codepoint <= 0x0F97) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x0F99 && codepoint <= 0x0FBC) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x102B && codepoint <= 0x102C) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x102D && codepoint <= 0x1030) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1031) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1032 && codepoint <= 0x1036) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1038) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x103B && codepoint <= 0x103C) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x103D && codepoint <= 0x103E) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1056 && codepoint <= 0x1057) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1058 && codepoint <= 0x1059) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x105E && codepoint <= 0x1060) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1062 && codepoint <= 0x1064) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1067 && codepoint <= 0x106D) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1071 && codepoint <= 0x1074) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1082) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1083 && codepoint <= 0x1084) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1085 && codepoint <= 0x1086) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1087 && codepoint <= 0x108C) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x108D) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x108F) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x109A && codepoint <= 0x109C) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x109D) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1712 && codepoint <= 0x1713) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1732 && codepoint <= 0x1733) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1752 && codepoint <= 0x1753) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1772 && codepoint <= 0x1773) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x17B6) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x17B7 && codepoint <= 0x17BD) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x17BE && codepoint <= 0x17C5) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x17C6) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x17C7 && codepoint <= 0x17C8) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1885 && codepoint <= 0x1886) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x18A9) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1920 && codepoint <= 0x1922) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1923 && codepoint <= 0x1926) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1927 && codepoint <= 0x1928) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1929 && codepoint <= 0x192B) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1930 && codepoint <= 0x1931) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1932) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1933 && codepoint <= 0x1938) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1A17 && codepoint <= 0x1A18) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1A19 && codepoint <= 0x1A1A) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1A1B) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1A55) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1A56) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1A57) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1A58 && codepoint <= 0x1A5E) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1A61) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1A62) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1A63 && codepoint <= 0x1A64) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1A65 && codepoint <= 0x1A6C) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1A6D && codepoint <= 0x1A72) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1A73 && codepoint <= 0x1A74) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1ABF && codepoint <= 0x1AC0) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1B00 && codepoint <= 0x1B03) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1B04) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1B35) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1B36 && codepoint <= 0x1B3A) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1B3B) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1B3C) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1B3D && codepoint <= 0x1B41) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1B42) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1B43) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1B80 && codepoint <= 0x1B81) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1B82) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1BA1) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1BA2 && codepoint <= 0x1BA5) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1BA6 && codepoint <= 0x1BA7) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1BA8 && codepoint <= 0x1BA9) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1BAC && codepoint <= 0x1BAD) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1BE7) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1BE8 && codepoint <= 0x1BE9) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1BEA && codepoint <= 0x1BEC) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1BED) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1BEE) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1BEF && codepoint <= 0x1BF1) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1C24 && codepoint <= 0x1C2B) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1C2C && codepoint <= 0x1C33) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1C34 && codepoint <= 0x1C35) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1C36) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1DE7 && codepoint <= 0x1DF4) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x24B6 && codepoint <= 0x24E9) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x2DE0 && codepoint <= 0x2DFF) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xA674 && codepoint <= 0xA67B) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xA69E && codepoint <= 0xA69F) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0xA802) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0xA80B) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xA823 && codepoint <= 0xA824) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xA825 && codepoint <= 0xA826) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0xA827) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xA880 && codepoint <= 0xA881) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xA8B4 && codepoint <= 0xA8C3) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0xA8C5) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0xA8FF) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xA926 && codepoint <= 0xA92A) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xA947 && codepoint <= 0xA951) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0xA952) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xA980 && codepoint <= 0xA982) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0xA983) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xA9B4 && codepoint <= 0xA9B5) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xA9B6 && codepoint <= 0xA9B9) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xA9BA && codepoint <= 0xA9BB) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xA9BC && codepoint <= 0xA9BD) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xA9BE && codepoint <= 0xA9BF) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0xA9E5) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xAA29 && codepoint <= 0xAA2E) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xAA2F && codepoint <= 0xAA30) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xAA31 && codepoint <= 0xAA32) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xAA33 && codepoint <= 0xAA34) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xAA35 && codepoint <= 0xAA36) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0xAA43) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0xAA4C) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0xAA4D) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0xAA7B) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0xAA7C) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0xAA7D) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0xAAB0) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xAAB2 && codepoint <= 0xAAB4) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xAAB7 && codepoint <= 0xAAB8) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0xAABE) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0xAAEB) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xAAEC && codepoint <= 0xAAED) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xAAEE && codepoint <= 0xAAEF) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0xAAF5) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xABE3 && codepoint <= 0xABE4) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0xABE5) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xABE6 && codepoint <= 0xABE7) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0xABE8) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0xABE9 && codepoint <= 0xABEA) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0xFB1E) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x10376 && codepoint <= 0x1037A) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x10A01 && codepoint <= 0x10A03) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x10A05 && codepoint <= 0x10A06) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x10A0C && codepoint <= 0x10A0F) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x10D24 && codepoint <= 0x10D27) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x10EAB && codepoint <= 0x10EAC) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11000) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11001) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11002) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11038 && codepoint <= 0x11045) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11082) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x110B0 && codepoint <= 0x110B2) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x110B3 && codepoint <= 0x110B6) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x110B7 && codepoint <= 0x110B8) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11100 && codepoint <= 0x11102) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11127 && codepoint <= 0x1112B) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1112C) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1112D && codepoint <= 0x11132) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11145 && codepoint <= 0x11146) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11180 && codepoint <= 0x11181) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11182) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x111B3 && codepoint <= 0x111B5) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x111B6 && codepoint <= 0x111BE) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x111BF) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x111CE) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x111CF) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1122C && codepoint <= 0x1122E) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1122F && codepoint <= 0x11231) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11232 && codepoint <= 0x11233) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11234) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11237) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1123E) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x112DF) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x112E0 && codepoint <= 0x112E2) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x112E3 && codepoint <= 0x112E8) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11300 && codepoint <= 0x11301) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11302 && codepoint <= 0x11303) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1133E && codepoint <= 0x1133F) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11340) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11341 && codepoint <= 0x11344) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11347 && codepoint <= 0x11348) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1134B && codepoint <= 0x1134C) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11357) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11362 && codepoint <= 0x11363) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11435 && codepoint <= 0x11437) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11438 && codepoint <= 0x1143F) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11440 && codepoint <= 0x11441) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11443 && codepoint <= 0x11444) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11445) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x114B0 && codepoint <= 0x114B2) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x114B3 && codepoint <= 0x114B8) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x114B9) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x114BA) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x114BB && codepoint <= 0x114BE) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x114BF && codepoint <= 0x114C0) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x114C1) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x115AF && codepoint <= 0x115B1) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x115B2 && codepoint <= 0x115B5) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x115B8 && codepoint <= 0x115BB) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x115BC && codepoint <= 0x115BD) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x115BE) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x115DC && codepoint <= 0x115DD) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11630 && codepoint <= 0x11632) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11633 && codepoint <= 0x1163A) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1163B && codepoint <= 0x1163C) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1163D) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1163E) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11640) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x116AB) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x116AC) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x116AD) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x116AE && codepoint <= 0x116AF) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x116B0 && codepoint <= 0x116B5) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1171D && codepoint <= 0x1171F) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11720 && codepoint <= 0x11721) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11722 && codepoint <= 0x11725) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11726) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11727 && codepoint <= 0x1172A) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1182C && codepoint <= 0x1182E) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1182F && codepoint <= 0x11837) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11838) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11930 && codepoint <= 0x11935) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11937 && codepoint <= 0x11938) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1193B && codepoint <= 0x1193C) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11940) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11942) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x119D1 && codepoint <= 0x119D3) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x119D4 && codepoint <= 0x119D7) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x119DA && codepoint <= 0x119DB) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x119DC && codepoint <= 0x119DF) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x119E4) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11A01 && codepoint <= 0x11A0A) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11A35 && codepoint <= 0x11A38) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11A39) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11A3B && codepoint <= 0x11A3E) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11A51 && codepoint <= 0x11A56) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11A57 && codepoint <= 0x11A58) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11A59 && codepoint <= 0x11A5B) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11A8A && codepoint <= 0x11A96) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11A97) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11C2F) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11C30 && codepoint <= 0x11C36) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11C38 && codepoint <= 0x11C3D) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11C3E) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11C92 && codepoint <= 0x11CA7) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11CA9) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11CAA && codepoint <= 0x11CB0) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11CB1) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11CB2 && codepoint <= 0x11CB3) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11CB4) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11CB5 && codepoint <= 0x11CB6) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11D31 && codepoint <= 0x11D36) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11D3A) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11D3C && codepoint <= 0x11D3D) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11D3F && codepoint <= 0x11D41) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11D43) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11D47) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11D8A && codepoint <= 0x11D8E) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11D90 && codepoint <= 0x11D91) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11D93 && codepoint <= 0x11D94) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11D95) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x11D96) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11EF3 && codepoint <= 0x11EF4) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x11EF5 && codepoint <= 0x11EF6) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x16F4F) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x16F51 && codepoint <= 0x16F87) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x16F8F && codepoint <= 0x16F92) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x16FF0 && codepoint <= 0x16FF1) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1BC9E) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1E000 && codepoint <= 0x1E006) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1E008 && codepoint <= 0x1E018) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1E01B && codepoint <= 0x1E021) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1E023 && codepoint <= 0x1E024) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1E026 && codepoint <= 0x1E02A) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x1E947) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1F130 && codepoint <= 0x1F149) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1F150 && codepoint <= 0x1F169) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint >= 0x1F170 && codepoint <= 0x1F189) return Unicode_Prop_OTHER_ALPHABETIC;
	if (codepoint == 0x3006) return Unicode_Prop_IDEOGRAPHIC;
	if (codepoint == 0x3007) return Unicode_Prop_IDEOGRAPHIC;
	if (codepoint >= 0x3021 && codepoint <= 0x3029) return Unicode_Prop_IDEOGRAPHIC;
	if (codepoint >= 0x3038 && codepoint <= 0x303A) return Unicode_Prop_IDEOGRAPHIC;
	if (codepoint >= 0x3400 && codepoint <= 0x4DBF) return Unicode_Prop_IDEOGRAPHIC;
	if (codepoint >= 0x4E00 && codepoint <= 0x9FFC) return Unicode_Prop_IDEOGRAPHIC;
	if (codepoint >= 0xF900 && codepoint <= 0xFA6D) return Unicode_Prop_IDEOGRAPHIC;
	if (codepoint >= 0xFA70 && codepoint <= 0xFAD9) return Unicode_Prop_IDEOGRAPHIC;
	if (codepoint == 0x16FE4) return Unicode_Prop_IDEOGRAPHIC;
	if (codepoint >= 0x17000 && codepoint <= 0x187F7) return Unicode_Prop_IDEOGRAPHIC;
	if (codepoint >= 0x18800 && codepoint <= 0x18CD5) return Unicode_Prop_IDEOGRAPHIC;
	if (codepoint >= 0x18D00 && codepoint <= 0x18D08) return Unicode_Prop_IDEOGRAPHIC;
	if (codepoint >= 0x1B170 && codepoint <= 0x1B2FB) return Unicode_Prop_IDEOGRAPHIC;
	if (codepoint >= 0x20000 && codepoint <= 0x2A6DD) return Unicode_Prop_IDEOGRAPHIC;
	if (codepoint >= 0x2A700 && codepoint <= 0x2B734) return Unicode_Prop_IDEOGRAPHIC;
	if (codepoint >= 0x2B740 && codepoint <= 0x2B81D) return Unicode_Prop_IDEOGRAPHIC;
	if (codepoint >= 0x2B820 && codepoint <= 0x2CEA1) return Unicode_Prop_IDEOGRAPHIC;
	if (codepoint >= 0x2CEB0 && codepoint <= 0x2EBE0) return Unicode_Prop_IDEOGRAPHIC;
	if (codepoint >= 0x2F800 && codepoint <= 0x2FA1D) return Unicode_Prop_IDEOGRAPHIC;
	if (codepoint >= 0x30000 && codepoint <= 0x3134A) return Unicode_Prop_IDEOGRAPHIC;
	if (codepoint == 0x005E) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0060) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x00A8) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x00AF) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x00B4) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x00B7) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x00B8) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x02B0 && codepoint <= 0x02C1) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x02C2 && codepoint <= 0x02C5) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x02C6 && codepoint <= 0x02D1) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x02D2 && codepoint <= 0x02DF) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x02E0 && codepoint <= 0x02E4) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x02E5 && codepoint <= 0x02EB) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x02EC) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x02ED) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x02EE) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x02EF && codepoint <= 0x02FF) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x0300 && codepoint <= 0x034E) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x0350 && codepoint <= 0x0357) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x035D && codepoint <= 0x0362) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0374) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0375) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x037A) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x0384 && codepoint <= 0x0385) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x0483 && codepoint <= 0x0487) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0559) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x0591 && codepoint <= 0x05A1) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x05A3 && codepoint <= 0x05BD) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x05BF) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x05C1 && codepoint <= 0x05C2) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x05C4) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x064B && codepoint <= 0x0652) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x0657 && codepoint <= 0x0658) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x06DF && codepoint <= 0x06E0) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x06E5 && codepoint <= 0x06E6) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x06EA && codepoint <= 0x06EC) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x0730 && codepoint <= 0x074A) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x07A6 && codepoint <= 0x07B0) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x07EB && codepoint <= 0x07F3) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x07F4 && codepoint <= 0x07F5) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x0818 && codepoint <= 0x0819) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x08E3 && codepoint <= 0x08FE) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x093C) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x094D) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x0951 && codepoint <= 0x0954) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0971) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x09BC) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x09CD) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0A3C) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0A4D) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0ABC) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0ACD) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x0AFD && codepoint <= 0x0AFF) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0B3C) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0B4D) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0B55) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0BCD) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0C4D) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0CBC) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0CCD) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x0D3B && codepoint <= 0x0D3C) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0D4D) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0DCA) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x0E47 && codepoint <= 0x0E4C) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0E4E) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0EBA) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x0EC8 && codepoint <= 0x0ECC) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x0F18 && codepoint <= 0x0F19) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0F35) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0F37) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0F39) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x0F3E && codepoint <= 0x0F3F) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x0F82 && codepoint <= 0x0F84) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x0F86 && codepoint <= 0x0F87) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x0FC6) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x1037) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1039 && codepoint <= 0x103A) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1063 && codepoint <= 0x1064) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1069 && codepoint <= 0x106D) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1087 && codepoint <= 0x108C) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x108D) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x108F) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x109A && codepoint <= 0x109B) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x135D && codepoint <= 0x135F) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x17C9 && codepoint <= 0x17D3) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x17DD) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1939 && codepoint <= 0x193B) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1A75 && codepoint <= 0x1A7C) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x1A7F) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1AB0 && codepoint <= 0x1ABD) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x1B34) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x1B44) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1B6B && codepoint <= 0x1B73) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x1BAA) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x1BAB) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1C36 && codepoint <= 0x1C37) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1C78 && codepoint <= 0x1C7D) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1CD0 && codepoint <= 0x1CD2) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x1CD3) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1CD4 && codepoint <= 0x1CE0) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x1CE1) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1CE2 && codepoint <= 0x1CE8) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x1CED) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x1CF4) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x1CF7) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1CF8 && codepoint <= 0x1CF9) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1D2C && codepoint <= 0x1D6A) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1DC4 && codepoint <= 0x1DCF) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1DF5 && codepoint <= 0x1DF9) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1DFD && codepoint <= 0x1DFF) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x1FBD) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1FBF && codepoint <= 0x1FC1) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1FCD && codepoint <= 0x1FCF) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1FDD && codepoint <= 0x1FDF) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1FED && codepoint <= 0x1FEF) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1FFD && codepoint <= 0x1FFE) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x2CEF && codepoint <= 0x2CF1) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x2E2F) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x302A && codepoint <= 0x302D) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x302E && codepoint <= 0x302F) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x3099 && codepoint <= 0x309A) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x309B && codepoint <= 0x309C) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x30FC) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xA66F) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0xA67C && codepoint <= 0xA67D) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xA67F) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0xA69C && codepoint <= 0xA69D) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0xA6F0 && codepoint <= 0xA6F1) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0xA700 && codepoint <= 0xA716) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0xA717 && codepoint <= 0xA71F) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0xA720 && codepoint <= 0xA721) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xA788) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0xA789 && codepoint <= 0xA78A) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0xA7F8 && codepoint <= 0xA7F9) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xA8C4) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0xA8E0 && codepoint <= 0xA8F1) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0xA92B && codepoint <= 0xA92D) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xA92E) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xA953) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xA9B3) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xA9C0) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xA9E5) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xAA7B) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xAA7C) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xAA7D) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xAABF) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xAAC0) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xAAC1) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xAAC2) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xAAF6) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xAB5B) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0xAB5C && codepoint <= 0xAB5F) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xAB69) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0xAB6A && codepoint <= 0xAB6B) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xABEC) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xABED) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xFB1E) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0xFE20 && codepoint <= 0xFE2F) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xFF3E) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xFF40) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xFF70) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0xFF9E && codepoint <= 0xFF9F) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0xFFE3) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x102E0) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x10AE5 && codepoint <= 0x10AE6) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x10D22 && codepoint <= 0x10D23) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x10D24 && codepoint <= 0x10D27) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x10F46 && codepoint <= 0x10F50) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x110B9 && codepoint <= 0x110BA) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x11133 && codepoint <= 0x11134) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x11173) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x111C0) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x111CA && codepoint <= 0x111CC) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x11235) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x11236) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x112E9 && codepoint <= 0x112EA) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x1133C) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x1134D) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x11366 && codepoint <= 0x1136C) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x11370 && codepoint <= 0x11374) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x11442) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x11446) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x114C2 && codepoint <= 0x114C3) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x115BF && codepoint <= 0x115C0) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x1163F) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x116B6) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x116B7) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x1172B) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x11839 && codepoint <= 0x1183A) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x1193D) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x1193E) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x11943) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x119E0) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x11A34) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x11A47) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x11A99) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x11C3F) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x11D42) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x11D44 && codepoint <= 0x11D45) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x11D97) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x16AF0 && codepoint <= 0x16AF4) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x16B30 && codepoint <= 0x16B36) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x16F8F && codepoint <= 0x16F92) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x16F93 && codepoint <= 0x16F9F) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x16FF0 && codepoint <= 0x16FF1) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1D167 && codepoint <= 0x1D169) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1D16D && codepoint <= 0x1D172) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1D17B && codepoint <= 0x1D182) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1D185 && codepoint <= 0x1D18B) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1D1AA && codepoint <= 0x1D1AD) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1E130 && codepoint <= 0x1E136) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1E2EC && codepoint <= 0x1E2EF) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1E8D0 && codepoint <= 0x1E8D6) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1E944 && codepoint <= 0x1E946) return Unicode_Prop_DIACRITIC;
	if (codepoint >= 0x1E948 && codepoint <= 0x1E94A) return Unicode_Prop_DIACRITIC;
	if (codepoint == 0x00B7) return Unicode_Prop_EXTENDER;
	if (codepoint >= 0x02D0 && codepoint <= 0x02D1) return Unicode_Prop_EXTENDER;
	if (codepoint == 0x0640) return Unicode_Prop_EXTENDER;
	if (codepoint == 0x07FA) return Unicode_Prop_EXTENDER;
	if (codepoint == 0x0B55) return Unicode_Prop_EXTENDER;
	if (codepoint == 0x0E46) return Unicode_Prop_EXTENDER;
	if (codepoint == 0x0EC6) return Unicode_Prop_EXTENDER;
	if (codepoint == 0x180A) return Unicode_Prop_EXTENDER;
	if (codepoint == 0x1843) return Unicode_Prop_EXTENDER;
	if (codepoint == 0x1AA7) return Unicode_Prop_EXTENDER;
	if (codepoint == 0x1C36) return Unicode_Prop_EXTENDER;
	if (codepoint == 0x1C7B) return Unicode_Prop_EXTENDER;
	if (codepoint == 0x3005) return Unicode_Prop_EXTENDER;
	if (codepoint >= 0x3031 && codepoint <= 0x3035) return Unicode_Prop_EXTENDER;
	if (codepoint >= 0x309D && codepoint <= 0x309E) return Unicode_Prop_EXTENDER;
	if (codepoint >= 0x30FC && codepoint <= 0x30FE) return Unicode_Prop_EXTENDER;
	if (codepoint == 0xA015) return Unicode_Prop_EXTENDER;
	if (codepoint == 0xA60C) return Unicode_Prop_EXTENDER;
	if (codepoint == 0xA9CF) return Unicode_Prop_EXTENDER;
	if (codepoint == 0xA9E6) return Unicode_Prop_EXTENDER;
	if (codepoint == 0xAA70) return Unicode_Prop_EXTENDER;
	if (codepoint == 0xAADD) return Unicode_Prop_EXTENDER;
	if (codepoint >= 0xAAF3 && codepoint <= 0xAAF4) return Unicode_Prop_EXTENDER;
	if (codepoint == 0xFF70) return Unicode_Prop_EXTENDER;
	if (codepoint == 0x1135D) return Unicode_Prop_EXTENDER;
	if (codepoint >= 0x115C6 && codepoint <= 0x115C8) return Unicode_Prop_EXTENDER;
	if (codepoint == 0x11A98) return Unicode_Prop_EXTENDER;
	if (codepoint >= 0x16B42 && codepoint <= 0x16B43) return Unicode_Prop_EXTENDER;
	if (codepoint >= 0x16FE0 && codepoint <= 0x16FE1) return Unicode_Prop_EXTENDER;
	if (codepoint == 0x16FE3) return Unicode_Prop_EXTENDER;
	if (codepoint >= 0x1E13C && codepoint <= 0x1E13D) return Unicode_Prop_EXTENDER;
	if (codepoint >= 0x1E944 && codepoint <= 0x1E946) return Unicode_Prop_EXTENDER;
	if (codepoint == 0x00AA) return Unicode_Prop_OTHER_LOWERCASE;
	if (codepoint == 0x00BA) return Unicode_Prop_OTHER_LOWERCASE;
	if (codepoint >= 0x02B0 && codepoint <= 0x02B8) return Unicode_Prop_OTHER_LOWERCASE;
	if (codepoint >= 0x02C0 && codepoint <= 0x02C1) return Unicode_Prop_OTHER_LOWERCASE;
	if (codepoint >= 0x02E0 && codepoint <= 0x02E4) return Unicode_Prop_OTHER_LOWERCASE;
	if (codepoint == 0x0345) return Unicode_Prop_OTHER_LOWERCASE;
	if (codepoint == 0x037A) return Unicode_Prop_OTHER_LOWERCASE;
	if (codepoint >= 0x1D2C && codepoint <= 0x1D6A) return Unicode_Prop_OTHER_LOWERCASE;
	if (codepoint == 0x1D78) return Unicode_Prop_OTHER_LOWERCASE;
	if (codepoint >= 0x1D9B && codepoint <= 0x1DBF) return Unicode_Prop_OTHER_LOWERCASE;
	if (codepoint == 0x2071) return Unicode_Prop_OTHER_LOWERCASE;
	if (codepoint == 0x207F) return Unicode_Prop_OTHER_LOWERCASE;
	if (codepoint >= 0x2090 && codepoint <= 0x209C) return Unicode_Prop_OTHER_LOWERCASE;
	if (codepoint >= 0x2170 && codepoint <= 0x217F) return Unicode_Prop_OTHER_LOWERCASE;
	if (codepoint >= 0x24D0 && codepoint <= 0x24E9) return Unicode_Prop_OTHER_LOWERCASE;
	if (codepoint >= 0x2C7C && codepoint <= 0x2C7D) return Unicode_Prop_OTHER_LOWERCASE;
	if (codepoint >= 0xA69C && codepoint <= 0xA69D) return Unicode_Prop_OTHER_LOWERCASE;
	if (codepoint == 0xA770) return Unicode_Prop_OTHER_LOWERCASE;
	if (codepoint >= 0xA7F8 && codepoint <= 0xA7F9) return Unicode_Prop_OTHER_LOWERCASE;
	if (codepoint >= 0xAB5C && codepoint <= 0xAB5F) return Unicode_Prop_OTHER_LOWERCASE;
	if (codepoint >= 0x2160 && codepoint <= 0x216F) return Unicode_Prop_OTHER_UPPERCASE;
	if (codepoint >= 0x24B6 && codepoint <= 0x24CF) return Unicode_Prop_OTHER_UPPERCASE;
	if (codepoint >= 0x1F130 && codepoint <= 0x1F149) return Unicode_Prop_OTHER_UPPERCASE;
	if (codepoint >= 0x1F150 && codepoint <= 0x1F169) return Unicode_Prop_OTHER_UPPERCASE;
	if (codepoint >= 0x1F170 && codepoint <= 0x1F189) return Unicode_Prop_OTHER_UPPERCASE;
	if (codepoint >= 0xFDD0 && codepoint <= 0xFDEF) return Unicode_Prop_NONCHARACTER_CODE_POINT;
	if (codepoint >= 0xFFFE && codepoint <= 0xFFFF) return Unicode_Prop_NONCHARACTER_CODE_POINT;
	if (codepoint >= 0x1FFFE && codepoint <= 0x1FFFF) return Unicode_Prop_NONCHARACTER_CODE_POINT;
	if (codepoint >= 0x2FFFE && codepoint <= 0x2FFFF) return Unicode_Prop_NONCHARACTER_CODE_POINT;
	if (codepoint >= 0x3FFFE && codepoint <= 0x3FFFF) return Unicode_Prop_NONCHARACTER_CODE_POINT;
	if (codepoint >= 0x4FFFE && codepoint <= 0x4FFFF) return Unicode_Prop_NONCHARACTER_CODE_POINT;
	if (codepoint >= 0x5FFFE && codepoint <= 0x5FFFF) return Unicode_Prop_NONCHARACTER_CODE_POINT;
	if (codepoint >= 0x6FFFE && codepoint <= 0x6FFFF) return Unicode_Prop_NONCHARACTER_CODE_POINT;
	if (codepoint >= 0x7FFFE && codepoint <= 0x7FFFF) return Unicode_Prop_NONCHARACTER_CODE_POINT;
	if (codepoint >= 0x8FFFE && codepoint <= 0x8FFFF) return Unicode_Prop_NONCHARACTER_CODE_POINT;
	if (codepoint >= 0x9FFFE && codepoint <= 0x9FFFF) return Unicode_Prop_NONCHARACTER_CODE_POINT;
	if (codepoint >= 0xAFFFE && codepoint <= 0xAFFFF) return Unicode_Prop_NONCHARACTER_CODE_POINT;
	if (codepoint >= 0xBFFFE && codepoint <= 0xBFFFF) return Unicode_Prop_NONCHARACTER_CODE_POINT;
	if (codepoint >= 0xCFFFE && codepoint <= 0xCFFFF) return Unicode_Prop_NONCHARACTER_CODE_POINT;
	if (codepoint >= 0xDFFFE && codepoint <= 0xDFFFF) return Unicode_Prop_NONCHARACTER_CODE_POINT;
	if (codepoint >= 0xEFFFE && codepoint <= 0xEFFFF) return Unicode_Prop_NONCHARACTER_CODE_POINT;
	if (codepoint >= 0xFFFFE && codepoint <= 0xFFFFF) return Unicode_Prop_NONCHARACTER_CODE_POINT;
	if (codepoint >= 0x10FFFE && codepoint <= 0x10FFFF) return Unicode_Prop_NONCHARACTER_CODE_POINT;
	if (codepoint == 0x09BE) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint == 0x09D7) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint == 0x0B3E) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint == 0x0B57) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint == 0x0BBE) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint == 0x0BD7) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint == 0x0CC2) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint >= 0x0CD5 && codepoint <= 0x0CD6) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint == 0x0D3E) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint == 0x0D57) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint == 0x0DCF) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint == 0x0DDF) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint == 0x1B35) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint == 0x200C) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint >= 0x302E && codepoint <= 0x302F) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint >= 0xFF9E && codepoint <= 0xFF9F) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint == 0x1133E) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint == 0x11357) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint == 0x114B0) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint == 0x114BD) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint == 0x115AF) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint == 0x11930) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint == 0x1D165) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint >= 0x1D16E && codepoint <= 0x1D172) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint >= 0xE0020 && codepoint <= 0xE007F) return Unicode_Prop_OTHER_GRAPHEME_EXTEND;
	if (codepoint >= 0x2FF0 && codepoint <= 0x2FF1) return Unicode_Prop_IDS_BINARY_OPERATOR;
	if (codepoint >= 0x2FF4 && codepoint <= 0x2FFB) return Unicode_Prop_IDS_BINARY_OPERATOR;
	if (codepoint >= 0x2FF2 && codepoint <= 0x2FF3) return Unicode_Prop_IDS_TRINARY_OPERATOR;
	if (codepoint >= 0x2E80 && codepoint <= 0x2E99) return Unicode_Prop_RADICAL;
	if (codepoint >= 0x2E9B && codepoint <= 0x2EF3) return Unicode_Prop_RADICAL;
	if (codepoint >= 0x2F00 && codepoint <= 0x2FD5) return Unicode_Prop_RADICAL;
	if (codepoint >= 0x3400 && codepoint <= 0x4DBF) return Unicode_Prop_UNIFIED_IDEOGRAPH;
	if (codepoint >= 0x4E00 && codepoint <= 0x9FFC) return Unicode_Prop_UNIFIED_IDEOGRAPH;
	if (codepoint >= 0xFA0E && codepoint <= 0xFA0F) return Unicode_Prop_UNIFIED_IDEOGRAPH;
	if (codepoint == 0xFA11) return Unicode_Prop_UNIFIED_IDEOGRAPH;
	if (codepoint >= 0xFA13 && codepoint <= 0xFA14) return Unicode_Prop_UNIFIED_IDEOGRAPH;
	if (codepoint == 0xFA1F) return Unicode_Prop_UNIFIED_IDEOGRAPH;
	if (codepoint == 0xFA21) return Unicode_Prop_UNIFIED_IDEOGRAPH;
	if (codepoint >= 0xFA23 && codepoint <= 0xFA24) return Unicode_Prop_UNIFIED_IDEOGRAPH;
	if (codepoint >= 0xFA27 && codepoint <= 0xFA29) return Unicode_Prop_UNIFIED_IDEOGRAPH;
	if (codepoint >= 0x20000 && codepoint <= 0x2A6DD) return Unicode_Prop_UNIFIED_IDEOGRAPH;
	if (codepoint >= 0x2A700 && codepoint <= 0x2B734) return Unicode_Prop_UNIFIED_IDEOGRAPH;
	if (codepoint >= 0x2B740 && codepoint <= 0x2B81D) return Unicode_Prop_UNIFIED_IDEOGRAPH;
	if (codepoint >= 0x2B820 && codepoint <= 0x2CEA1) return Unicode_Prop_UNIFIED_IDEOGRAPH;
	if (codepoint >= 0x2CEB0 && codepoint <= 0x2EBE0) return Unicode_Prop_UNIFIED_IDEOGRAPH;
	if (codepoint >= 0x30000 && codepoint <= 0x3134A) return Unicode_Prop_UNIFIED_IDEOGRAPH;
	if (codepoint == 0x034F) return Unicode_Prop_OTHER_DEFAULT_IGNORABLE_CODE_POINT;
	if (codepoint >= 0x115F && codepoint <= 0x1160) return Unicode_Prop_OTHER_DEFAULT_IGNORABLE_CODE_POINT;
	if (codepoint >= 0x17B4 && codepoint <= 0x17B5) return Unicode_Prop_OTHER_DEFAULT_IGNORABLE_CODE_POINT;
	if (codepoint == 0x2065) return Unicode_Prop_OTHER_DEFAULT_IGNORABLE_CODE_POINT;
	if (codepoint == 0x3164) return Unicode_Prop_OTHER_DEFAULT_IGNORABLE_CODE_POINT;
	if (codepoint == 0xFFA0) return Unicode_Prop_OTHER_DEFAULT_IGNORABLE_CODE_POINT;
	if (codepoint >= 0xFFF0 && codepoint <= 0xFFF8) return Unicode_Prop_OTHER_DEFAULT_IGNORABLE_CODE_POINT;
	if (codepoint == 0xE0000) return Unicode_Prop_OTHER_DEFAULT_IGNORABLE_CODE_POINT;
	if (codepoint >= 0xE0002 && codepoint <= 0xE001F) return Unicode_Prop_OTHER_DEFAULT_IGNORABLE_CODE_POINT;
	if (codepoint >= 0xE0080 && codepoint <= 0xE00FF) return Unicode_Prop_OTHER_DEFAULT_IGNORABLE_CODE_POINT;
	if (codepoint >= 0xE01F0 && codepoint <= 0xE0FFF) return Unicode_Prop_OTHER_DEFAULT_IGNORABLE_CODE_POINT;
	if (codepoint == 0x0149) return Unicode_Prop_DEPRECATED;
	if (codepoint == 0x0673) return Unicode_Prop_DEPRECATED;
	if (codepoint == 0x0F77) return Unicode_Prop_DEPRECATED;
	if (codepoint == 0x0F79) return Unicode_Prop_DEPRECATED;
	if (codepoint >= 0x17A3 && codepoint <= 0x17A4) return Unicode_Prop_DEPRECATED;
	if (codepoint >= 0x206A && codepoint <= 0x206F) return Unicode_Prop_DEPRECATED;
	if (codepoint == 0x2329) return Unicode_Prop_DEPRECATED;
	if (codepoint == 0x232A) return Unicode_Prop_DEPRECATED;
	if (codepoint == 0xE0001) return Unicode_Prop_DEPRECATED;
	if (codepoint >= 0x0069 && codepoint <= 0x006A) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint == 0x012F) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint == 0x0249) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint == 0x0268) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint == 0x029D) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint == 0x02B2) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint == 0x03F3) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint == 0x0456) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint == 0x0458) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint == 0x1D62) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint == 0x1D96) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint == 0x1DA4) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint == 0x1DA8) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint == 0x1E2D) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint == 0x1ECB) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint == 0x2071) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint >= 0x2148 && codepoint <= 0x2149) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint == 0x2C7C) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint >= 0x1D422 && codepoint <= 0x1D423) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint >= 0x1D456 && codepoint <= 0x1D457) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint >= 0x1D48A && codepoint <= 0x1D48B) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint >= 0x1D4BE && codepoint <= 0x1D4BF) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint >= 0x1D4F2 && codepoint <= 0x1D4F3) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint >= 0x1D526 && codepoint <= 0x1D527) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint >= 0x1D55A && codepoint <= 0x1D55B) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint >= 0x1D58E && codepoint <= 0x1D58F) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint >= 0x1D5C2 && codepoint <= 0x1D5C3) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint >= 0x1D5F6 && codepoint <= 0x1D5F7) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint >= 0x1D62A && codepoint <= 0x1D62B) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint >= 0x1D65E && codepoint <= 0x1D65F) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint >= 0x1D692 && codepoint <= 0x1D693) return Unicode_Prop_SOFT_DOTTED;
	if (codepoint >= 0x0E40 && codepoint <= 0x0E44) return Unicode_Prop_LOGICAL_ORDER_EXCEPTION;
	if (codepoint >= 0x0EC0 && codepoint <= 0x0EC4) return Unicode_Prop_LOGICAL_ORDER_EXCEPTION;
	if (codepoint >= 0x19B5 && codepoint <= 0x19B7) return Unicode_Prop_LOGICAL_ORDER_EXCEPTION;
	if (codepoint == 0x19BA) return Unicode_Prop_LOGICAL_ORDER_EXCEPTION;
	if (codepoint >= 0xAAB5 && codepoint <= 0xAAB6) return Unicode_Prop_LOGICAL_ORDER_EXCEPTION;
	if (codepoint == 0xAAB9) return Unicode_Prop_LOGICAL_ORDER_EXCEPTION;
	if (codepoint >= 0xAABB && codepoint <= 0xAABC) return Unicode_Prop_LOGICAL_ORDER_EXCEPTION;
	if (codepoint >= 0x1885 && codepoint <= 0x1886) return Unicode_Prop_OTHER_ID_START;
	if (codepoint == 0x2118) return Unicode_Prop_OTHER_ID_START;
	if (codepoint == 0x212E) return Unicode_Prop_OTHER_ID_START;
	if (codepoint >= 0x309B && codepoint <= 0x309C) return Unicode_Prop_OTHER_ID_START;
	if (codepoint == 0x00B7) return Unicode_Prop_OTHER_ID_CONTINUE;
	if (codepoint == 0x0387) return Unicode_Prop_OTHER_ID_CONTINUE;
	if (codepoint >= 0x1369 && codepoint <= 0x1371) return Unicode_Prop_OTHER_ID_CONTINUE;
	if (codepoint == 0x19DA) return Unicode_Prop_OTHER_ID_CONTINUE;
	if (codepoint == 0x0021) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0x002E) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0x003F) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0x0589) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x061E && codepoint <= 0x061F) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0x06D4) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x0700 && codepoint <= 0x0702) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0x07F9) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0x0837) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0x0839) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x083D && codepoint <= 0x083E) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x0964 && codepoint <= 0x0965) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x104A && codepoint <= 0x104B) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0x1362) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x1367 && codepoint <= 0x1368) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0x166E) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x1735 && codepoint <= 0x1736) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0x1803) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0x1809) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x1944 && codepoint <= 0x1945) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x1AA8 && codepoint <= 0x1AAB) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x1B5A && codepoint <= 0x1B5B) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x1B5E && codepoint <= 0x1B5F) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x1C3B && codepoint <= 0x1C3C) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x1C7E && codepoint <= 0x1C7F) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x203C && codepoint <= 0x203D) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x2047 && codepoint <= 0x2049) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0x2E2E) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0x2E3C) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0x3002) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0xA4FF) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0xA60E && codepoint <= 0xA60F) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0xA6F3) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0xA6F7) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0xA876 && codepoint <= 0xA877) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0xA8CE && codepoint <= 0xA8CF) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0xA92F) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0xA9C8 && codepoint <= 0xA9C9) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0xAA5D && codepoint <= 0xAA5F) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0xAAF0 && codepoint <= 0xAAF1) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0xABEB) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0xFE52) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0xFE56 && codepoint <= 0xFE57) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0xFF01) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0xFF0E) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0xFF1F) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0xFF61) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x10A56 && codepoint <= 0x10A57) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x10F55 && codepoint <= 0x10F59) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x11047 && codepoint <= 0x11048) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x110BE && codepoint <= 0x110C1) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x11141 && codepoint <= 0x11143) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x111C5 && codepoint <= 0x111C6) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0x111CD) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x111DE && codepoint <= 0x111DF) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x11238 && codepoint <= 0x11239) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x1123B && codepoint <= 0x1123C) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0x112A9) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x1144B && codepoint <= 0x1144C) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x115C2 && codepoint <= 0x115C3) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x115C9 && codepoint <= 0x115D7) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x11641 && codepoint <= 0x11642) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x1173C && codepoint <= 0x1173E) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0x11944) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0x11946) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x11A42 && codepoint <= 0x11A43) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x11A9B && codepoint <= 0x11A9C) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x11C41 && codepoint <= 0x11C42) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x11EF7 && codepoint <= 0x11EF8) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x16A6E && codepoint <= 0x16A6F) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0x16AF5) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x16B37 && codepoint <= 0x16B38) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0x16B44) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0x16E98) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0x1BC9F) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint == 0x1DA88) return Unicode_Prop_SENTENCE_TERMINAL;
	if (codepoint >= 0x180B && codepoint <= 0x180D) return Unicode_Prop_VARIATION_SELECTOR;
	if (codepoint >= 0xFE00 && codepoint <= 0xFE0F) return Unicode_Prop_VARIATION_SELECTOR;
	if (codepoint >= 0xE0100 && codepoint <= 0xE01EF) return Unicode_Prop_VARIATION_SELECTOR;
	if (codepoint >= 0x0009 && codepoint <= 0x000D) return Unicode_Prop_PATTERN_WHITE_SPACE;
	if (codepoint == 0x0020) return Unicode_Prop_PATTERN_WHITE_SPACE;
	if (codepoint == 0x0085) return Unicode_Prop_PATTERN_WHITE_SPACE;
	if (codepoint >= 0x200E && codepoint <= 0x200F) return Unicode_Prop_PATTERN_WHITE_SPACE;
	if (codepoint == 0x2028) return Unicode_Prop_PATTERN_WHITE_SPACE;
	if (codepoint == 0x2029) return Unicode_Prop_PATTERN_WHITE_SPACE;
	if (codepoint >= 0x0021 && codepoint <= 0x0023) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x0024) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x0025 && codepoint <= 0x0027) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x0028) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x0029) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x002A) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x002B) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x002C) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x002D) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x002E && codepoint <= 0x002F) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x003A && codepoint <= 0x003B) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x003C && codepoint <= 0x003E) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x003F && codepoint <= 0x0040) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x005B) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x005C) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x005D) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x005E) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x0060) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x007B) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x007C) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x007D) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x007E) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x00A1) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x00A2 && codepoint <= 0x00A5) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x00A6) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x00A7) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x00A9) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x00AB) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x00AC) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x00AE) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x00B0) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x00B1) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x00B6) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x00BB) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x00BF) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x00D7) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x00F7) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2010 && codepoint <= 0x2015) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2016 && codepoint <= 0x2017) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2018) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2019) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x201A) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x201B && codepoint <= 0x201C) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x201D) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x201E) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x201F) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2020 && codepoint <= 0x2027) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2030 && codepoint <= 0x2038) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2039) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x203A) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x203B && codepoint <= 0x203E) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2041 && codepoint <= 0x2043) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2044) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2045) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2046) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2047 && codepoint <= 0x2051) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2052) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2053) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2055 && codepoint <= 0x205E) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2190 && codepoint <= 0x2194) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2195 && codepoint <= 0x2199) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x219A && codepoint <= 0x219B) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x219C && codepoint <= 0x219F) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x21A0) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x21A1 && codepoint <= 0x21A2) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x21A3) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x21A4 && codepoint <= 0x21A5) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x21A6) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x21A7 && codepoint <= 0x21AD) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x21AE) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x21AF && codepoint <= 0x21CD) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x21CE && codepoint <= 0x21CF) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x21D0 && codepoint <= 0x21D1) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x21D2) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x21D3) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x21D4) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x21D5 && codepoint <= 0x21F3) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x21F4 && codepoint <= 0x22FF) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2300 && codepoint <= 0x2307) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2308) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2309) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x230A) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x230B) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x230C && codepoint <= 0x231F) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2320 && codepoint <= 0x2321) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2322 && codepoint <= 0x2328) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2329) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x232A) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x232B && codepoint <= 0x237B) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x237C) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x237D && codepoint <= 0x239A) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x239B && codepoint <= 0x23B3) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x23B4 && codepoint <= 0x23DB) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x23DC && codepoint <= 0x23E1) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x23E2 && codepoint <= 0x2426) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2427 && codepoint <= 0x243F) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2440 && codepoint <= 0x244A) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x244B && codepoint <= 0x245F) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2500 && codepoint <= 0x25B6) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x25B7) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x25B8 && codepoint <= 0x25C0) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x25C1) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x25C2 && codepoint <= 0x25F7) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x25F8 && codepoint <= 0x25FF) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2600 && codepoint <= 0x266E) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x266F) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2670 && codepoint <= 0x2767) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2768) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2769) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x276A) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x276B) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x276C) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x276D) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x276E) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x276F) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2770) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2771) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2772) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2773) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2774) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2775) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2794 && codepoint <= 0x27BF) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x27C0 && codepoint <= 0x27C4) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x27C5) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x27C6) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x27C7 && codepoint <= 0x27E5) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x27E6) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x27E7) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x27E8) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x27E9) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x27EA) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x27EB) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x27EC) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x27ED) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x27EE) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x27EF) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x27F0 && codepoint <= 0x27FF) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2800 && codepoint <= 0x28FF) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2900 && codepoint <= 0x2982) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2983) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2984) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2985) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2986) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2987) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2988) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2989) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x298A) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x298B) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x298C) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x298D) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x298E) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x298F) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2990) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2991) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2992) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2993) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2994) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2995) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2996) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2997) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2998) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2999 && codepoint <= 0x29D7) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x29D8) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x29D9) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x29DA) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x29DB) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x29DC && codepoint <= 0x29FB) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x29FC) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x29FD) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x29FE && codepoint <= 0x2AFF) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2B00 && codepoint <= 0x2B2F) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2B30 && codepoint <= 0x2B44) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2B45 && codepoint <= 0x2B46) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2B47 && codepoint <= 0x2B4C) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2B4D && codepoint <= 0x2B73) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2B74 && codepoint <= 0x2B75) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2B76 && codepoint <= 0x2B95) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2B96) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2B97 && codepoint <= 0x2BFF) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2E00 && codepoint <= 0x2E01) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E02) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E03) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E04) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E05) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2E06 && codepoint <= 0x2E08) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E09) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E0A) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E0B) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E0C) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E0D) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2E0E && codepoint <= 0x2E16) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E17) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2E18 && codepoint <= 0x2E19) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E1A) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E1B) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E1C) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E1D) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2E1E && codepoint <= 0x2E1F) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E20) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E21) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E22) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E23) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E24) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E25) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E26) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E27) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E28) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E29) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2E2A && codepoint <= 0x2E2E) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E2F) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2E30 && codepoint <= 0x2E39) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2E3A && codepoint <= 0x2E3B) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2E3C && codepoint <= 0x2E3F) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E40) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E41) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E42) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2E43 && codepoint <= 0x2E4F) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2E50 && codepoint <= 0x2E51) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x2E52) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x2E53 && codepoint <= 0x2E7F) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x3001 && codepoint <= 0x3003) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x3008) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x3009) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x300A) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x300B) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x300C) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x300D) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x300E) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x300F) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x3010) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x3011) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x3012 && codepoint <= 0x3013) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x3014) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x3015) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x3016) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x3017) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x3018) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x3019) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x301A) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x301B) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x301C) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x301D) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x301E && codepoint <= 0x301F) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x3020) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0x3030) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0xFD3E) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint == 0xFD3F) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0xFE45 && codepoint <= 0xFE46) return Unicode_Prop_PATTERN_SYNTAX;
	if (codepoint >= 0x0600 && codepoint <= 0x0605) return Unicode_Prop_PREPENDED_CONCATENATION_MARK;
	if (codepoint == 0x06DD) return Unicode_Prop_PREPENDED_CONCATENATION_MARK;
	if (codepoint == 0x070F) return Unicode_Prop_PREPENDED_CONCATENATION_MARK;
	if (codepoint == 0x08E2) return Unicode_Prop_PREPENDED_CONCATENATION_MARK;
	if (codepoint == 0x110BD) return Unicode_Prop_PREPENDED_CONCATENATION_MARK;
	if (codepoint == 0x110CD) return Unicode_Prop_PREPENDED_CONCATENATION_MARK;
	if (codepoint >= 0x1F1E6 && codepoint <= 0x1F1FF) return Unicode_Prop_REGIONAL_INDICATOR;

	return Unicode_Prop_UNKNOWN;
}

Unicode_Indic_Syllable unicode_indic_syllable(uint32_t codepoint) {
	if (codepoint >= 0x0900 && codepoint <= 0x0902) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x0981) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x0982) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x09FC) return Unicode_Indic_Syllable_BINDU;
	if (codepoint >= 0x0A01 && codepoint <= 0x0A02) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x0A70) return Unicode_Indic_Syllable_BINDU;
	if (codepoint >= 0x0A81 && codepoint <= 0x0A82) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x0B01) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x0B02) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x0B82) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x0C00) return Unicode_Indic_Syllable_BINDU;
	if (codepoint >= 0x0C01 && codepoint <= 0x0C02) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x0C04) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x0C80) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x0C81) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x0C82) return Unicode_Indic_Syllable_BINDU;
	if (codepoint >= 0x0D00 && codepoint <= 0x0D01) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x0D02) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x0D04) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x0D81) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x0D82) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x0E4D) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x0ECD) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x0F7E) return Unicode_Indic_Syllable_BINDU;
	if (codepoint >= 0x0F82 && codepoint <= 0x0F83) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x1036) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x17C6) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x1932) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x1A74) return Unicode_Indic_Syllable_BINDU;
	if (codepoint >= 0x1B00 && codepoint <= 0x1B02) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x1B80) return Unicode_Indic_Syllable_BINDU;
	if (codepoint >= 0x1C34 && codepoint <= 0x1C35) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0xA80B) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0xA873) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0xA880) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0xA8C5) return Unicode_Indic_Syllable_BINDU;
	if (codepoint >= 0xA8F2 && codepoint <= 0xA8F3) return Unicode_Indic_Syllable_BINDU;
	if (codepoint >= 0xA980 && codepoint <= 0xA981) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x10A0E) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x11000) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x11001) return Unicode_Indic_Syllable_BINDU;
	if (codepoint >= 0x11080 && codepoint <= 0x11081) return Unicode_Indic_Syllable_BINDU;
	if (codepoint >= 0x11100 && codepoint <= 0x11101) return Unicode_Indic_Syllable_BINDU;
	if (codepoint >= 0x11180 && codepoint <= 0x11181) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x111CF) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x11234) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x112DF) return Unicode_Indic_Syllable_BINDU;
	if (codepoint >= 0x11300 && codepoint <= 0x11301) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x11302) return Unicode_Indic_Syllable_BINDU;
	if (codepoint >= 0x1135E && codepoint <= 0x1135F) return Unicode_Indic_Syllable_BINDU;
	if (codepoint >= 0x11443 && codepoint <= 0x11444) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x1145F) return Unicode_Indic_Syllable_BINDU;
	if (codepoint >= 0x114BF && codepoint <= 0x114C0) return Unicode_Indic_Syllable_BINDU;
	if (codepoint >= 0x115BC && codepoint <= 0x115BD) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x1163D) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x116AB) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x11837) return Unicode_Indic_Syllable_BINDU;
	if (codepoint >= 0x1193B && codepoint <= 0x1193C) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x119DE) return Unicode_Indic_Syllable_BINDU;
	if (codepoint >= 0x11A35 && codepoint <= 0x11A38) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x11A96) return Unicode_Indic_Syllable_BINDU;
	if (codepoint >= 0x11C3C && codepoint <= 0x11C3D) return Unicode_Indic_Syllable_BINDU;
	if (codepoint >= 0x11CB5 && codepoint <= 0x11CB6) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x11D40) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x11D95) return Unicode_Indic_Syllable_BINDU;
	if (codepoint == 0x0903) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x0983) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x0A03) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x0A83) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x0B03) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x0C03) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x0C83) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x0D03) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x0D83) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x0F7F) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x1038) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x17C7) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x1B04) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x1B82) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0xA881) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0xA983) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0xAAF5) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x10A0F) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x11002) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x11082) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x11102) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x11182) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x11303) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x11445) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x114C1) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x115BE) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x1163E) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x116AC) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x11838) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x119DF) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x11A39) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x11A97) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x11C3E) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x11D41) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x11D96) return Unicode_Indic_Syllable_VISARGA;
	if (codepoint == 0x093D) return Unicode_Indic_Syllable_AVAGRAHA;
	if (codepoint == 0x09BD) return Unicode_Indic_Syllable_AVAGRAHA;
	if (codepoint == 0x0ABD) return Unicode_Indic_Syllable_AVAGRAHA;
	if (codepoint == 0x0B3D) return Unicode_Indic_Syllable_AVAGRAHA;
	if (codepoint == 0x0C3D) return Unicode_Indic_Syllable_AVAGRAHA;
	if (codepoint == 0x0CBD) return Unicode_Indic_Syllable_AVAGRAHA;
	if (codepoint == 0x0D3D) return Unicode_Indic_Syllable_AVAGRAHA;
	if (codepoint == 0x0F85) return Unicode_Indic_Syllable_AVAGRAHA;
	if (codepoint == 0x17DC) return Unicode_Indic_Syllable_AVAGRAHA;
	if (codepoint == 0x1BBA) return Unicode_Indic_Syllable_AVAGRAHA;
	if (codepoint == 0x111C1) return Unicode_Indic_Syllable_AVAGRAHA;
	if (codepoint == 0x1133D) return Unicode_Indic_Syllable_AVAGRAHA;
	if (codepoint == 0x11447) return Unicode_Indic_Syllable_AVAGRAHA;
	if (codepoint == 0x114C4) return Unicode_Indic_Syllable_AVAGRAHA;
	if (codepoint == 0x119E1) return Unicode_Indic_Syllable_AVAGRAHA;
	if (codepoint == 0x11A9D) return Unicode_Indic_Syllable_AVAGRAHA;
	if (codepoint == 0x11C40) return Unicode_Indic_Syllable_AVAGRAHA;
	if (codepoint == 0x093C) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint == 0x09BC) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint == 0x0A3C) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint == 0x0ABC) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint >= 0x0AFD && codepoint <= 0x0AFF) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint == 0x0B3C) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint == 0x0CBC) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint == 0x0F39) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint == 0x1B34) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint == 0x1BE6) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint == 0x1C37) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint == 0xA9B3) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint >= 0x10A38 && codepoint <= 0x10A3A) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint == 0x110BA) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint == 0x11173) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint == 0x111CA) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint == 0x11236) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint == 0x112E9) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint >= 0x1133B && codepoint <= 0x1133C) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint == 0x11446) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint == 0x114C3) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint == 0x115C0) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint == 0x116B7) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint == 0x1183A) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint == 0x11943) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint == 0x11D42) return Unicode_Indic_Syllable_NUKTA;
	if (codepoint == 0x094D) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0x09CD) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0x0A4D) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0x0ACD) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0x0B4D) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0x0BCD) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0x0C4D) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0x0CCD) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0x0D4D) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0x0DCA) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0x1B44) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0xA806) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0xA8C4) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0xA9C0) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0x11046) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0x110B9) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0x111C0) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0x11235) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0x1134D) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0x11442) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0x114C2) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0x115BF) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0x1163F) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0x116B6) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0x11839) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0x119E0) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint == 0x11C3F) return Unicode_Indic_Syllable_VIRAMA;
	if (codepoint >= 0x0D3B && codepoint <= 0x0D3C) return Unicode_Indic_Syllable_PURE_KILLER;
	if (codepoint == 0x0E3A) return Unicode_Indic_Syllable_PURE_KILLER;
	if (codepoint == 0x0E4E) return Unicode_Indic_Syllable_PURE_KILLER;
	if (codepoint == 0x0EBA) return Unicode_Indic_Syllable_PURE_KILLER;
	if (codepoint == 0x0F84) return Unicode_Indic_Syllable_PURE_KILLER;
	if (codepoint == 0x103A) return Unicode_Indic_Syllable_PURE_KILLER;
	if (codepoint == 0x1714) return Unicode_Indic_Syllable_PURE_KILLER;
	if (codepoint == 0x1734) return Unicode_Indic_Syllable_PURE_KILLER;
	if (codepoint == 0x17D1) return Unicode_Indic_Syllable_PURE_KILLER;
	if (codepoint == 0x1A7A) return Unicode_Indic_Syllable_PURE_KILLER;
	if (codepoint == 0x1BAA) return Unicode_Indic_Syllable_PURE_KILLER;
	if (codepoint >= 0x1BF2 && codepoint <= 0x1BF3) return Unicode_Indic_Syllable_PURE_KILLER;
	if (codepoint == 0xA82C) return Unicode_Indic_Syllable_PURE_KILLER;
	if (codepoint == 0xA953) return Unicode_Indic_Syllable_PURE_KILLER;
	if (codepoint == 0xABED) return Unicode_Indic_Syllable_PURE_KILLER;
	if (codepoint == 0x11134) return Unicode_Indic_Syllable_PURE_KILLER;
	if (codepoint == 0x112EA) return Unicode_Indic_Syllable_PURE_KILLER;
	if (codepoint == 0x1172B) return Unicode_Indic_Syllable_PURE_KILLER;
	if (codepoint == 0x1193D) return Unicode_Indic_Syllable_PURE_KILLER;
	if (codepoint == 0x11A34) return Unicode_Indic_Syllable_PURE_KILLER;
	if (codepoint == 0x11D44) return Unicode_Indic_Syllable_PURE_KILLER;
	if (codepoint == 0x1039) return Unicode_Indic_Syllable_INVISIBLE_STACKER;
	if (codepoint == 0x17D2) return Unicode_Indic_Syllable_INVISIBLE_STACKER;
	if (codepoint == 0x1A60) return Unicode_Indic_Syllable_INVISIBLE_STACKER;
	if (codepoint == 0x1BAB) return Unicode_Indic_Syllable_INVISIBLE_STACKER;
	if (codepoint == 0xAAF6) return Unicode_Indic_Syllable_INVISIBLE_STACKER;
	if (codepoint == 0x10A3F) return Unicode_Indic_Syllable_INVISIBLE_STACKER;
	if (codepoint == 0x11133) return Unicode_Indic_Syllable_INVISIBLE_STACKER;
	if (codepoint == 0x1193E) return Unicode_Indic_Syllable_INVISIBLE_STACKER;
	if (codepoint == 0x11A47) return Unicode_Indic_Syllable_INVISIBLE_STACKER;
	if (codepoint == 0x11A99) return Unicode_Indic_Syllable_INVISIBLE_STACKER;
	if (codepoint == 0x11D45) return Unicode_Indic_Syllable_INVISIBLE_STACKER;
	if (codepoint == 0x11D97) return Unicode_Indic_Syllable_INVISIBLE_STACKER;
	if (codepoint >= 0x0904 && codepoint <= 0x0914) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0960 && codepoint <= 0x0961) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0972 && codepoint <= 0x0977) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0985 && codepoint <= 0x098C) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x098F && codepoint <= 0x0990) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0993 && codepoint <= 0x0994) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x09E0 && codepoint <= 0x09E1) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0A05 && codepoint <= 0x0A0A) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0A0F && codepoint <= 0x0A10) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0A13 && codepoint <= 0x0A14) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0A85 && codepoint <= 0x0A8D) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0A8F && codepoint <= 0x0A91) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0A93 && codepoint <= 0x0A94) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0AE0 && codepoint <= 0x0AE1) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0B05 && codepoint <= 0x0B0C) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0B0F && codepoint <= 0x0B10) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0B13 && codepoint <= 0x0B14) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0B60 && codepoint <= 0x0B61) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0B85 && codepoint <= 0x0B8A) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0B8E && codepoint <= 0x0B90) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0B92 && codepoint <= 0x0B94) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0C05 && codepoint <= 0x0C0C) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0C0E && codepoint <= 0x0C10) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0C12 && codepoint <= 0x0C14) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0C60 && codepoint <= 0x0C61) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0C85 && codepoint <= 0x0C8C) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0C8E && codepoint <= 0x0C90) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0C92 && codepoint <= 0x0C94) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0CE0 && codepoint <= 0x0CE1) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0D05 && codepoint <= 0x0D0C) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0D0E && codepoint <= 0x0D10) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0D12 && codepoint <= 0x0D14) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0D5F && codepoint <= 0x0D61) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x0D85 && codepoint <= 0x0D96) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x1021 && codepoint <= 0x102A) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x1052 && codepoint <= 0x1055) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x1700 && codepoint <= 0x1702) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x1720 && codepoint <= 0x1722) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x1740 && codepoint <= 0x1742) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x1760 && codepoint <= 0x1762) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x17A3 && codepoint <= 0x17B3) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x1A4D && codepoint <= 0x1A52) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x1B05 && codepoint <= 0x1B12) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x1B83 && codepoint <= 0x1B89) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x1BE4 && codepoint <= 0x1BE5) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0xA800 && codepoint <= 0xA801) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0xA803 && codepoint <= 0xA805) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0xA882 && codepoint <= 0xA891) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint == 0xA8FE) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0xA984 && codepoint <= 0xA988) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0xA98C && codepoint <= 0xA98E) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0xAA00 && codepoint <= 0xAA05) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0xAAE0 && codepoint <= 0xAAE1) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0xABCE && codepoint <= 0xABCF) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint == 0xABD1) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x11005 && codepoint <= 0x11012) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x11083 && codepoint <= 0x1108C) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x11103 && codepoint <= 0x11106) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x11183 && codepoint <= 0x11190) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x11200 && codepoint <= 0x11207) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x11280 && codepoint <= 0x11283) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x112B0 && codepoint <= 0x112B9) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x11305 && codepoint <= 0x1130C) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x1130F && codepoint <= 0x11310) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x11313 && codepoint <= 0x11314) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x11360 && codepoint <= 0x11361) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x11400 && codepoint <= 0x1140D) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x11481 && codepoint <= 0x1148E) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x11580 && codepoint <= 0x1158D) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x115D8 && codepoint <= 0x115DB) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x11600 && codepoint <= 0x1160D) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x11680 && codepoint <= 0x11689) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x11800 && codepoint <= 0x11809) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x11900 && codepoint <= 0x11906) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint == 0x11909) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x119A0 && codepoint <= 0x119A7) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x119AA && codepoint <= 0x119AD) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint == 0x11A00) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint == 0x11A50) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x11C00 && codepoint <= 0x11C08) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x11C0A && codepoint <= 0x11C0D) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x11D00 && codepoint <= 0x11D06) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x11D08 && codepoint <= 0x11D09) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint == 0x11D0B) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x11D60 && codepoint <= 0x11D65) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x11D67 && codepoint <= 0x11D68) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint >= 0x11D6A && codepoint <= 0x11D6B) return Unicode_Indic_Syllable_VOWEL_INDEPENDENT;
	if (codepoint == 0x093A) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x093B) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x093E && codepoint <= 0x0940) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0941 && codepoint <= 0x0948) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0949 && codepoint <= 0x094C) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x094E && codepoint <= 0x094F) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0955 && codepoint <= 0x0957) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0962 && codepoint <= 0x0963) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x09BE && codepoint <= 0x09C0) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x09C1 && codepoint <= 0x09C4) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x09C7 && codepoint <= 0x09C8) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x09CB && codepoint <= 0x09CC) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x09D7) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x09E2 && codepoint <= 0x09E3) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0A3E && codepoint <= 0x0A40) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0A41 && codepoint <= 0x0A42) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0A47 && codepoint <= 0x0A48) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0A4B && codepoint <= 0x0A4C) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0ABE && codepoint <= 0x0AC0) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0AC1 && codepoint <= 0x0AC5) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0AC7 && codepoint <= 0x0AC8) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x0AC9) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0ACB && codepoint <= 0x0ACC) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0AE2 && codepoint <= 0x0AE3) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x0B3E) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x0B3F) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x0B40) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0B41 && codepoint <= 0x0B44) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0B47 && codepoint <= 0x0B48) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0B4B && codepoint <= 0x0B4C) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0B55 && codepoint <= 0x0B56) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x0B57) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0B62 && codepoint <= 0x0B63) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0BBE && codepoint <= 0x0BBF) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x0BC0) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0BC1 && codepoint <= 0x0BC2) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0BC6 && codepoint <= 0x0BC8) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0BCA && codepoint <= 0x0BCC) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x0BD7) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0C3E && codepoint <= 0x0C40) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0C41 && codepoint <= 0x0C44) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0C46 && codepoint <= 0x0C48) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0C4A && codepoint <= 0x0C4C) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0C55 && codepoint <= 0x0C56) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0C62 && codepoint <= 0x0C63) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x0CBE) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x0CBF) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0CC0 && codepoint <= 0x0CC4) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x0CC6) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0CC7 && codepoint <= 0x0CC8) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0CCA && codepoint <= 0x0CCB) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x0CCC) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0CD5 && codepoint <= 0x0CD6) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0CE2 && codepoint <= 0x0CE3) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0D3E && codepoint <= 0x0D40) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0D41 && codepoint <= 0x0D44) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0D46 && codepoint <= 0x0D48) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0D4A && codepoint <= 0x0D4C) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x0D57) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0D62 && codepoint <= 0x0D63) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0DCF && codepoint <= 0x0DD1) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0DD2 && codepoint <= 0x0DD4) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x0DD6) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0DD8 && codepoint <= 0x0DDF) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0DF2 && codepoint <= 0x0DF3) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x0E30) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x0E31) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0E32 && codepoint <= 0x0E33) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0E34 && codepoint <= 0x0E39) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0E40 && codepoint <= 0x0E45) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x0E47) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x0EB0) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x0EB1) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0EB2 && codepoint <= 0x0EB3) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0EB4 && codepoint <= 0x0EB9) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x0EBB) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0EC0 && codepoint <= 0x0EC4) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0F71 && codepoint <= 0x0F7D) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x0F80 && codepoint <= 0x0F81) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x102B && codepoint <= 0x102C) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x102D && codepoint <= 0x1030) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x1031) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1032 && codepoint <= 0x1035) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1056 && codepoint <= 0x1057) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1058 && codepoint <= 0x1059) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x1062) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1067 && codepoint <= 0x1068) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1071 && codepoint <= 0x1074) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1083 && codepoint <= 0x1084) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1085 && codepoint <= 0x1086) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x109C) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x109D) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1712 && codepoint <= 0x1713) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1732 && codepoint <= 0x1733) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1752 && codepoint <= 0x1753) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1772 && codepoint <= 0x1773) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x17B6) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x17B7 && codepoint <= 0x17BD) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x17BE && codepoint <= 0x17C5) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x17C8) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1920 && codepoint <= 0x1922) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1923 && codepoint <= 0x1926) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1927 && codepoint <= 0x1928) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x193A) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x19B0 && codepoint <= 0x19C0) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1A17 && codepoint <= 0x1A18) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1A19 && codepoint <= 0x1A1A) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x1A1B) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x1A61) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x1A62) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1A63 && codepoint <= 0x1A64) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1A65 && codepoint <= 0x1A6C) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1A6D && codepoint <= 0x1A72) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x1A73) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x1B35) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1B36 && codepoint <= 0x1B3A) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x1B3B) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x1B3C) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1B3D && codepoint <= 0x1B41) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x1B42) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x1B43) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1BA4 && codepoint <= 0x1BA5) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1BA6 && codepoint <= 0x1BA7) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1BA8 && codepoint <= 0x1BA9) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x1BE7) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1BE8 && codepoint <= 0x1BE9) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1BEA && codepoint <= 0x1BEC) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x1BED) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x1BEE) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x1BEF) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1C26 && codepoint <= 0x1C2B) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x1C2C) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0xA802) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0xA823 && codepoint <= 0xA824) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0xA825 && codepoint <= 0xA826) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0xA827) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0xA8B5 && codepoint <= 0xA8C3) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0xA8FF) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0xA947 && codepoint <= 0xA94E) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0xA9B4 && codepoint <= 0xA9B5) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0xA9B6 && codepoint <= 0xA9B9) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0xA9BA && codepoint <= 0xA9BB) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0xA9BC) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0xA9E5) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0xAA29 && codepoint <= 0xAA2E) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0xAA2F && codepoint <= 0xAA30) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0xAA31 && codepoint <= 0xAA32) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0xAAB0) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0xAAB1) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0xAAB2 && codepoint <= 0xAAB4) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0xAAB5 && codepoint <= 0xAAB6) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0xAAB7 && codepoint <= 0xAAB8) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0xAAB9 && codepoint <= 0xAABD) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0xAABE) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0xAAEB) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0xAAEC && codepoint <= 0xAAED) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0xAAEE && codepoint <= 0xAAEF) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0xABE3 && codepoint <= 0xABE4) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0xABE5) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0xABE6 && codepoint <= 0xABE7) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0xABE8) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0xABE9 && codepoint <= 0xABEA) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x10A01 && codepoint <= 0x10A03) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x10A05 && codepoint <= 0x10A06) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x10A0C && codepoint <= 0x10A0D) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11038 && codepoint <= 0x11045) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x110B0 && codepoint <= 0x110B2) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x110B3 && codepoint <= 0x110B6) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x110B7 && codepoint <= 0x110B8) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11127 && codepoint <= 0x1112B) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x1112C) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1112D && codepoint <= 0x11132) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11145 && codepoint <= 0x11146) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x111B3 && codepoint <= 0x111B5) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x111B6 && codepoint <= 0x111BE) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x111BF) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x111CB && codepoint <= 0x111CC) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x111CE) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1122C && codepoint <= 0x1122E) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1122F && codepoint <= 0x11231) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11232 && codepoint <= 0x11233) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x112E0 && codepoint <= 0x112E2) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x112E3 && codepoint <= 0x112E8) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1133E && codepoint <= 0x1133F) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x11340) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11341 && codepoint <= 0x11344) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11347 && codepoint <= 0x11348) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1134B && codepoint <= 0x1134C) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x11357) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11362 && codepoint <= 0x11363) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11435 && codepoint <= 0x11437) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11438 && codepoint <= 0x1143F) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11440 && codepoint <= 0x11441) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x114B0 && codepoint <= 0x114B2) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x114B3 && codepoint <= 0x114B8) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x114B9) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x114BA) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x114BB && codepoint <= 0x114BE) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x115AF && codepoint <= 0x115B1) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x115B2 && codepoint <= 0x115B5) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x115B8 && codepoint <= 0x115BB) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x115DC && codepoint <= 0x115DD) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11630 && codepoint <= 0x11632) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11633 && codepoint <= 0x1163A) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1163B && codepoint <= 0x1163C) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x11640) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x116AD) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x116AE && codepoint <= 0x116AF) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x116B0 && codepoint <= 0x116B5) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11720 && codepoint <= 0x11721) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11722 && codepoint <= 0x11725) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x11726) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11727 && codepoint <= 0x1172A) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1182C && codepoint <= 0x1182E) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1182F && codepoint <= 0x11836) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11930 && codepoint <= 0x11935) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11937 && codepoint <= 0x11938) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x119D1 && codepoint <= 0x119D3) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x119D4 && codepoint <= 0x119D7) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x119DA && codepoint <= 0x119DB) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x119DC && codepoint <= 0x119DD) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x119E4) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11A01 && codepoint <= 0x11A0A) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11A51 && codepoint <= 0x11A56) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11A57 && codepoint <= 0x11A58) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11A59 && codepoint <= 0x11A5B) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x11C2F) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11C30 && codepoint <= 0x11C36) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11C38 && codepoint <= 0x11C3B) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x11CB0) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x11CB1) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11CB2 && codepoint <= 0x11CB3) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x11CB4) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11D31 && codepoint <= 0x11D36) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x11D3A) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11D3C && codepoint <= 0x11D3D) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x11D3F) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint == 0x11D43) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11D8A && codepoint <= 0x11D8E) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11D90 && codepoint <= 0x11D91) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11D93 && codepoint <= 0x11D94) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11EF3 && codepoint <= 0x11EF4) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x11EF5 && codepoint <= 0x11EF6) return Unicode_Indic_Syllable_VOWEL_DEPENDENT;
	if (codepoint >= 0x1963 && codepoint <= 0x196D) return Unicode_Indic_Syllable_VOWEL;
	if (codepoint >= 0xA85E && codepoint <= 0xA861) return Unicode_Indic_Syllable_VOWEL;
	if (codepoint == 0xA866) return Unicode_Indic_Syllable_VOWEL;
	if (codepoint >= 0xA922 && codepoint <= 0xA925) return Unicode_Indic_Syllable_VOWEL;
	if (codepoint >= 0xA926 && codepoint <= 0xA92A) return Unicode_Indic_Syllable_VOWEL;
	if (codepoint >= 0x11150 && codepoint <= 0x11154) return Unicode_Indic_Syllable_VOWEL;
	if (codepoint == 0x002D) return Unicode_Indic_Syllable_CONSONANT_PLACEHOLDER;
	if (codepoint == 0x00A0) return Unicode_Indic_Syllable_CONSONANT_PLACEHOLDER;
	if (codepoint == 0x00D7) return Unicode_Indic_Syllable_CONSONANT_PLACEHOLDER;
	if (codepoint == 0x0980) return Unicode_Indic_Syllable_CONSONANT_PLACEHOLDER;
	if (codepoint >= 0x0A72 && codepoint <= 0x0A73) return Unicode_Indic_Syllable_CONSONANT_PLACEHOLDER;
	if (codepoint == 0x104B) return Unicode_Indic_Syllable_CONSONANT_PLACEHOLDER;
	if (codepoint == 0x104E) return Unicode_Indic_Syllable_CONSONANT_PLACEHOLDER;
	if (codepoint == 0x1900) return Unicode_Indic_Syllable_CONSONANT_PLACEHOLDER;
	if (codepoint == 0x1CFA) return Unicode_Indic_Syllable_CONSONANT_PLACEHOLDER;
	if (codepoint >= 0x2010 && codepoint <= 0x2014) return Unicode_Indic_Syllable_CONSONANT_PLACEHOLDER;
	if (codepoint == 0x25CC) return Unicode_Indic_Syllable_CONSONANT_PLACEHOLDER;
	if (codepoint >= 0xAA74 && codepoint <= 0xAA76) return Unicode_Indic_Syllable_CONSONANT_PLACEHOLDER;
	if (codepoint == 0x11A3F) return Unicode_Indic_Syllable_CONSONANT_PLACEHOLDER;
	if (codepoint == 0x11A45) return Unicode_Indic_Syllable_CONSONANT_PLACEHOLDER;
	if (codepoint == 0x11EF2) return Unicode_Indic_Syllable_CONSONANT_PLACEHOLDER;
	if (codepoint >= 0x0915 && codepoint <= 0x0939) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0958 && codepoint <= 0x095F) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0978 && codepoint <= 0x097F) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0995 && codepoint <= 0x09A8) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x09AA && codepoint <= 0x09B0) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0x09B2) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x09B6 && codepoint <= 0x09B9) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x09DC && codepoint <= 0x09DD) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0x09DF) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x09F0 && codepoint <= 0x09F1) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0A15 && codepoint <= 0x0A28) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0A2A && codepoint <= 0x0A30) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0A32 && codepoint <= 0x0A33) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0A35 && codepoint <= 0x0A36) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0A38 && codepoint <= 0x0A39) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0A59 && codepoint <= 0x0A5C) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0x0A5E) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0A95 && codepoint <= 0x0AA8) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0AAA && codepoint <= 0x0AB0) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0AB2 && codepoint <= 0x0AB3) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0AB5 && codepoint <= 0x0AB9) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0x0AF9) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0B15 && codepoint <= 0x0B28) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0B2A && codepoint <= 0x0B30) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0B32 && codepoint <= 0x0B33) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0B35 && codepoint <= 0x0B39) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0B5C && codepoint <= 0x0B5D) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0x0B5F) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0x0B71) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0x0B95) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0B99 && codepoint <= 0x0B9A) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0x0B9C) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0B9E && codepoint <= 0x0B9F) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0BA3 && codepoint <= 0x0BA4) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0BA8 && codepoint <= 0x0BAA) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0BAE && codepoint <= 0x0BB9) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0C15 && codepoint <= 0x0C28) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0C2A && codepoint <= 0x0C39) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0C58 && codepoint <= 0x0C5A) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0C95 && codepoint <= 0x0CA8) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0CAA && codepoint <= 0x0CB3) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0CB5 && codepoint <= 0x0CB9) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0x0CDE) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0D15 && codepoint <= 0x0D3A) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0D9A && codepoint <= 0x0DB1) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0DB3 && codepoint <= 0x0DBB) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0x0DBD) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0DC0 && codepoint <= 0x0DC6) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0E01 && codepoint <= 0x0E2E) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0E81 && codepoint <= 0x0E82) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0x0E84) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0E86 && codepoint <= 0x0E8A) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0E8C && codepoint <= 0x0EA3) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0x0EA5) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0EA7 && codepoint <= 0x0EAE) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0EDC && codepoint <= 0x0EDF) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0F40 && codepoint <= 0x0F47) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x0F49 && codepoint <= 0x0F6C) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1000 && codepoint <= 0x1020) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0x103F) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1050 && codepoint <= 0x1051) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x105A && codepoint <= 0x105D) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0x1061) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1065 && codepoint <= 0x1066) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x106E && codepoint <= 0x1070) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1075 && codepoint <= 0x1081) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0x108E) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1703 && codepoint <= 0x170C) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x170E && codepoint <= 0x1711) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1723 && codepoint <= 0x1731) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1743 && codepoint <= 0x1751) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1763 && codepoint <= 0x176C) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x176E && codepoint <= 0x1770) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1780 && codepoint <= 0x17A2) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1901 && codepoint <= 0x191E) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1950 && codepoint <= 0x1962) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1980 && codepoint <= 0x19AB) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1A00 && codepoint <= 0x1A16) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1A20 && codepoint <= 0x1A4C) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1A53 && codepoint <= 0x1A54) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1B13 && codepoint <= 0x1B33) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1B45 && codepoint <= 0x1B4B) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1B8A && codepoint <= 0x1BA0) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1BAE && codepoint <= 0x1BAF) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1BBB && codepoint <= 0x1BBD) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1BC0 && codepoint <= 0x1BE3) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1C00 && codepoint <= 0x1C23) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1C4D && codepoint <= 0x1C4F) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0xA807 && codepoint <= 0xA80A) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0xA80C && codepoint <= 0xA822) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0xA840 && codepoint <= 0xA85D) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0xA862 && codepoint <= 0xA865) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0xA869 && codepoint <= 0xA870) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0xA872) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0xA892 && codepoint <= 0xA8B3) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0xA90A && codepoint <= 0xA921) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0xA930 && codepoint <= 0xA946) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0xA989 && codepoint <= 0xA98B) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0xA98F && codepoint <= 0xA9B2) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0xA9E0 && codepoint <= 0xA9E4) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0xA9E7 && codepoint <= 0xA9EF) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0xA9FA && codepoint <= 0xA9FE) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0xAA06 && codepoint <= 0xAA28) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0xAA60 && codepoint <= 0xAA6F) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0xAA71 && codepoint <= 0xAA73) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0xAA7A) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0xAA7E && codepoint <= 0xAA7F) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0xAA80 && codepoint <= 0xAAAF) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0xAAE2 && codepoint <= 0xAAEA) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0xABC0 && codepoint <= 0xABCD) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0xABD0) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0xABD2 && codepoint <= 0xABDA) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0x10A00) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x10A10 && codepoint <= 0x10A13) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x10A15 && codepoint <= 0x10A17) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x10A19 && codepoint <= 0x10A35) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x11013 && codepoint <= 0x11037) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1108D && codepoint <= 0x110AF) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x11107 && codepoint <= 0x11126) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0x11144) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0x11147) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x11155 && codepoint <= 0x11172) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x11191 && codepoint <= 0x111B2) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x11208 && codepoint <= 0x11211) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x11213 && codepoint <= 0x1122B) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x11284 && codepoint <= 0x11286) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0x11288) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1128A && codepoint <= 0x1128D) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1128F && codepoint <= 0x1129D) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1129F && codepoint <= 0x112A8) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x112BA && codepoint <= 0x112DE) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x11315 && codepoint <= 0x11328) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1132A && codepoint <= 0x11330) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x11332 && codepoint <= 0x11333) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x11335 && codepoint <= 0x11339) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1140E && codepoint <= 0x11434) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1148F && codepoint <= 0x114AF) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1158E && codepoint <= 0x115AE) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1160E && codepoint <= 0x1162F) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1168A && codepoint <= 0x116AA) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0x116B8) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x11700 && codepoint <= 0x1171A) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1180A && codepoint <= 0x1182B) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x1190C && codepoint <= 0x11913) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x11915 && codepoint <= 0x11916) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x11918 && codepoint <= 0x1192F) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x119AE && codepoint <= 0x119D0) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x11A0B && codepoint <= 0x11A32) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x11A5C && codepoint <= 0x11A83) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x11C0E && codepoint <= 0x11C2E) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x11C72 && codepoint <= 0x11C8F) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x11D0C && codepoint <= 0x11D30) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x11D6C && codepoint <= 0x11D89) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint >= 0x11EE0 && codepoint <= 0x11EF1) return Unicode_Indic_Syllable_CONSONANT;
	if (codepoint == 0x09CE) return Unicode_Indic_Syllable_CONSONANT_DEAD;
	if (codepoint >= 0x0D54 && codepoint <= 0x0D56) return Unicode_Indic_Syllable_CONSONANT_DEAD;
	if (codepoint >= 0x0D7A && codepoint <= 0x0D7F) return Unicode_Indic_Syllable_CONSONANT_DEAD;
	if (codepoint >= 0x1CF2 && codepoint <= 0x1CF3) return Unicode_Indic_Syllable_CONSONANT_DEAD;
	if (codepoint >= 0x0CF1 && codepoint <= 0x0CF2) return Unicode_Indic_Syllable_CONSONANT_WITH_STACKER;
	if (codepoint >= 0x1CF5 && codepoint <= 0x1CF6) return Unicode_Indic_Syllable_CONSONANT_WITH_STACKER;
	if (codepoint >= 0x11003 && codepoint <= 0x11004) return Unicode_Indic_Syllable_CONSONANT_WITH_STACKER;
	if (codepoint >= 0x11460 && codepoint <= 0x11461) return Unicode_Indic_Syllable_CONSONANT_WITH_STACKER;
	if (codepoint >= 0x111C2 && codepoint <= 0x111C3) return Unicode_Indic_Syllable_CONSONANT_PREFIXED;
	if (codepoint == 0x1193F) return Unicode_Indic_Syllable_CONSONANT_PREFIXED;
	if (codepoint == 0x11A3A) return Unicode_Indic_Syllable_CONSONANT_PREFIXED;
	if (codepoint >= 0x11A84 && codepoint <= 0x11A89) return Unicode_Indic_Syllable_CONSONANT_PREFIXED;
	if (codepoint == 0x0D4E) return Unicode_Indic_Syllable_CONSONANT_PRECEDING_REPHA;
	if (codepoint == 0x11941) return Unicode_Indic_Syllable_CONSONANT_PRECEDING_REPHA;
	if (codepoint == 0x11D46) return Unicode_Indic_Syllable_CONSONANT_PRECEDING_REPHA;
	if (codepoint == 0x1A5A) return Unicode_Indic_Syllable_CONSONANT_INITIAL_POSTFIXED;
	if (codepoint == 0x17CC) return Unicode_Indic_Syllable_CONSONANT_SUCCEEDING_REPHA;
	if (codepoint == 0x1B03) return Unicode_Indic_Syllable_CONSONANT_SUCCEEDING_REPHA;
	if (codepoint == 0x1B81) return Unicode_Indic_Syllable_CONSONANT_SUCCEEDING_REPHA;
	if (codepoint == 0xA982) return Unicode_Indic_Syllable_CONSONANT_SUCCEEDING_REPHA;
	if (codepoint >= 0x0F8D && codepoint <= 0x0F97) return Unicode_Indic_Syllable_CONSONANT_SUBJOINED;
	if (codepoint >= 0x0F99 && codepoint <= 0x0FBC) return Unicode_Indic_Syllable_CONSONANT_SUBJOINED;
	if (codepoint >= 0x1929 && codepoint <= 0x192B) return Unicode_Indic_Syllable_CONSONANT_SUBJOINED;
	if (codepoint == 0x1A57) return Unicode_Indic_Syllable_CONSONANT_SUBJOINED;
	if (codepoint >= 0x1A5B && codepoint <= 0x1A5E) return Unicode_Indic_Syllable_CONSONANT_SUBJOINED;
	if (codepoint == 0x1BA1) return Unicode_Indic_Syllable_CONSONANT_SUBJOINED;
	if (codepoint >= 0x1BA2 && codepoint <= 0x1BA3) return Unicode_Indic_Syllable_CONSONANT_SUBJOINED;
	if (codepoint >= 0x1BAC && codepoint <= 0x1BAD) return Unicode_Indic_Syllable_CONSONANT_SUBJOINED;
	if (codepoint >= 0x1C24 && codepoint <= 0x1C25) return Unicode_Indic_Syllable_CONSONANT_SUBJOINED;
	if (codepoint >= 0xA867 && codepoint <= 0xA868) return Unicode_Indic_Syllable_CONSONANT_SUBJOINED;
	if (codepoint == 0xA871) return Unicode_Indic_Syllable_CONSONANT_SUBJOINED;
	if (codepoint >= 0x11C92 && codepoint <= 0x11CA7) return Unicode_Indic_Syllable_CONSONANT_SUBJOINED;
	if (codepoint == 0x11CA9) return Unicode_Indic_Syllable_CONSONANT_SUBJOINED;
	if (codepoint >= 0x11CAA && codepoint <= 0x11CAF) return Unicode_Indic_Syllable_CONSONANT_SUBJOINED;
	if (codepoint == 0x0A75) return Unicode_Indic_Syllable_CONSONANT_MEDIAL;
	if (codepoint == 0x0EBC) return Unicode_Indic_Syllable_CONSONANT_MEDIAL;
	if (codepoint == 0x0EBD) return Unicode_Indic_Syllable_CONSONANT_MEDIAL;
	if (codepoint >= 0x103B && codepoint <= 0x103C) return Unicode_Indic_Syllable_CONSONANT_MEDIAL;
	if (codepoint >= 0x103D && codepoint <= 0x103E) return Unicode_Indic_Syllable_CONSONANT_MEDIAL;
	if (codepoint >= 0x105E && codepoint <= 0x1060) return Unicode_Indic_Syllable_CONSONANT_MEDIAL;
	if (codepoint == 0x1082) return Unicode_Indic_Syllable_CONSONANT_MEDIAL;
	if (codepoint == 0x1A55) return Unicode_Indic_Syllable_CONSONANT_MEDIAL;
	if (codepoint == 0x1A56) return Unicode_Indic_Syllable_CONSONANT_MEDIAL;
	if (codepoint == 0xA8B4) return Unicode_Indic_Syllable_CONSONANT_MEDIAL;
	if (codepoint == 0xA9BD) return Unicode_Indic_Syllable_CONSONANT_MEDIAL;
	if (codepoint >= 0xA9BE && codepoint <= 0xA9BF) return Unicode_Indic_Syllable_CONSONANT_MEDIAL;
	if (codepoint >= 0xAA33 && codepoint <= 0xAA34) return Unicode_Indic_Syllable_CONSONANT_MEDIAL;
	if (codepoint >= 0xAA35 && codepoint <= 0xAA36) return Unicode_Indic_Syllable_CONSONANT_MEDIAL;
	if (codepoint >= 0x1171D && codepoint <= 0x1171F) return Unicode_Indic_Syllable_CONSONANT_MEDIAL;
	if (codepoint == 0x11940) return Unicode_Indic_Syllable_CONSONANT_MEDIAL;
	if (codepoint == 0x11942) return Unicode_Indic_Syllable_CONSONANT_MEDIAL;
	if (codepoint >= 0x11A3B && codepoint <= 0x11A3E) return Unicode_Indic_Syllable_CONSONANT_MEDIAL;
	if (codepoint == 0x11D47) return Unicode_Indic_Syllable_CONSONANT_MEDIAL;
	if (codepoint >= 0x1930 && codepoint <= 0x1931) return Unicode_Indic_Syllable_CONSONANT_FINAL;
	if (codepoint >= 0x1933 && codepoint <= 0x1938) return Unicode_Indic_Syllable_CONSONANT_FINAL;
	if (codepoint == 0x1939) return Unicode_Indic_Syllable_CONSONANT_FINAL;
	if (codepoint >= 0x19C1 && codepoint <= 0x19C7) return Unicode_Indic_Syllable_CONSONANT_FINAL;
	if (codepoint >= 0x1A58 && codepoint <= 0x1A59) return Unicode_Indic_Syllable_CONSONANT_FINAL;
	if (codepoint >= 0x1BBE && codepoint <= 0x1BBF) return Unicode_Indic_Syllable_CONSONANT_FINAL;
	if (codepoint >= 0x1BF0 && codepoint <= 0x1BF1) return Unicode_Indic_Syllable_CONSONANT_FINAL;
	if (codepoint >= 0x1C2D && codepoint <= 0x1C33) return Unicode_Indic_Syllable_CONSONANT_FINAL;
	if (codepoint >= 0xA94F && codepoint <= 0xA951) return Unicode_Indic_Syllable_CONSONANT_FINAL;
	if (codepoint == 0xA952) return Unicode_Indic_Syllable_CONSONANT_FINAL;
	if (codepoint >= 0xAA40 && codepoint <= 0xAA42) return Unicode_Indic_Syllable_CONSONANT_FINAL;
	if (codepoint == 0xAA43) return Unicode_Indic_Syllable_CONSONANT_FINAL;
	if (codepoint >= 0xAA44 && codepoint <= 0xAA4B) return Unicode_Indic_Syllable_CONSONANT_FINAL;
	if (codepoint == 0xAA4C) return Unicode_Indic_Syllable_CONSONANT_FINAL;
	if (codepoint == 0xAA4D) return Unicode_Indic_Syllable_CONSONANT_FINAL;
	if (codepoint >= 0xABDB && codepoint <= 0xABE2) return Unicode_Indic_Syllable_CONSONANT_FINAL;
	if (codepoint >= 0x11A8A && codepoint <= 0x11A95) return Unicode_Indic_Syllable_CONSONANT_FINAL;
	if (codepoint >= 0x0F88 && codepoint <= 0x0F8C) return Unicode_Indic_Syllable_CONSONANT_HEAD_LETTER;
	if (codepoint == 0x0B83) return Unicode_Indic_Syllable_MODIFYING_LETTER;
	if (codepoint >= 0x1970 && codepoint <= 0x1974) return Unicode_Indic_Syllable_TONE_LETTER;
	if (codepoint == 0xAAC0) return Unicode_Indic_Syllable_TONE_LETTER;
	if (codepoint == 0xAAC2) return Unicode_Indic_Syllable_TONE_LETTER;
	if (codepoint >= 0x0E48 && codepoint <= 0x0E4B) return Unicode_Indic_Syllable_TONE_MARK;
	if (codepoint >= 0x0EC8 && codepoint <= 0x0ECB) return Unicode_Indic_Syllable_TONE_MARK;
	if (codepoint == 0x1037) return Unicode_Indic_Syllable_TONE_MARK;
	if (codepoint >= 0x1063 && codepoint <= 0x1064) return Unicode_Indic_Syllable_TONE_MARK;
	if (codepoint >= 0x1069 && codepoint <= 0x106D) return Unicode_Indic_Syllable_TONE_MARK;
	if (codepoint >= 0x1087 && codepoint <= 0x108C) return Unicode_Indic_Syllable_TONE_MARK;
	if (codepoint == 0x108D) return Unicode_Indic_Syllable_TONE_MARK;
	if (codepoint == 0x108F) return Unicode_Indic_Syllable_TONE_MARK;
	if (codepoint >= 0x109A && codepoint <= 0x109B) return Unicode_Indic_Syllable_TONE_MARK;
	if (codepoint >= 0x19C8 && codepoint <= 0x19C9) return Unicode_Indic_Syllable_TONE_MARK;
	if (codepoint >= 0x1A75 && codepoint <= 0x1A79) return Unicode_Indic_Syllable_TONE_MARK;
	if (codepoint >= 0xA92B && codepoint <= 0xA92D) return Unicode_Indic_Syllable_TONE_MARK;
	if (codepoint == 0xAA7B) return Unicode_Indic_Syllable_TONE_MARK;
	if (codepoint == 0xAA7C) return Unicode_Indic_Syllable_TONE_MARK;
	if (codepoint == 0xAA7D) return Unicode_Indic_Syllable_TONE_MARK;
	if (codepoint == 0xAABF) return Unicode_Indic_Syllable_TONE_MARK;
	if (codepoint == 0xAAC1) return Unicode_Indic_Syllable_TONE_MARK;
	if (codepoint == 0xABEC) return Unicode_Indic_Syllable_TONE_MARK;
	if (codepoint == 0x0A71) return Unicode_Indic_Syllable_GEMINATION_MARK;
	if (codepoint == 0x11237) return Unicode_Indic_Syllable_GEMINATION_MARK;
	if (codepoint == 0x11A98) return Unicode_Indic_Syllable_GEMINATION_MARK;
	if (codepoint >= 0x0951 && codepoint <= 0x0952) return Unicode_Indic_Syllable_CANTILLATION_MARK;
	if (codepoint == 0x0A51) return Unicode_Indic_Syllable_CANTILLATION_MARK;
	if (codepoint >= 0x0AFA && codepoint <= 0x0AFC) return Unicode_Indic_Syllable_CANTILLATION_MARK;
	if (codepoint >= 0x1CD0 && codepoint <= 0x1CD2) return Unicode_Indic_Syllable_CANTILLATION_MARK;
	if (codepoint >= 0x1CD4 && codepoint <= 0x1CE0) return Unicode_Indic_Syllable_CANTILLATION_MARK;
	if (codepoint == 0x1CE1) return Unicode_Indic_Syllable_CANTILLATION_MARK;
	if (codepoint == 0x1CF4) return Unicode_Indic_Syllable_CANTILLATION_MARK;
	if (codepoint == 0x1CF7) return Unicode_Indic_Syllable_CANTILLATION_MARK;
	if (codepoint >= 0x1CF8 && codepoint <= 0x1CF9) return Unicode_Indic_Syllable_CANTILLATION_MARK;
	if (codepoint == 0x20F0) return Unicode_Indic_Syllable_CANTILLATION_MARK;
	if (codepoint >= 0xA8E0 && codepoint <= 0xA8F1) return Unicode_Indic_Syllable_CANTILLATION_MARK;
	if (codepoint == 0x1123E) return Unicode_Indic_Syllable_CANTILLATION_MARK;
	if (codepoint >= 0x11366 && codepoint <= 0x1136C) return Unicode_Indic_Syllable_CANTILLATION_MARK;
	if (codepoint >= 0x11370 && codepoint <= 0x11374) return Unicode_Indic_Syllable_CANTILLATION_MARK;
	if (codepoint >= 0x17C9 && codepoint <= 0x17CA) return Unicode_Indic_Syllable_REGISTER_SHIFTER;
	if (codepoint >= 0x00B2 && codepoint <= 0x00B3) return Unicode_Indic_Syllable_SYLLABLE_MODIFIER;
	if (codepoint == 0x09FE) return Unicode_Indic_Syllable_SYLLABLE_MODIFIER;
	if (codepoint == 0x0F35) return Unicode_Indic_Syllable_SYLLABLE_MODIFIER;
	if (codepoint == 0x0F37) return Unicode_Indic_Syllable_SYLLABLE_MODIFIER;
	if (codepoint == 0x0FC6) return Unicode_Indic_Syllable_SYLLABLE_MODIFIER;
	if (codepoint == 0x17CB) return Unicode_Indic_Syllable_SYLLABLE_MODIFIER;
	if (codepoint >= 0x17CE && codepoint <= 0x17D0) return Unicode_Indic_Syllable_SYLLABLE_MODIFIER;
	if (codepoint == 0x17D3) return Unicode_Indic_Syllable_SYLLABLE_MODIFIER;
	if (codepoint == 0x17DD) return Unicode_Indic_Syllable_SYLLABLE_MODIFIER;
	if (codepoint == 0x193B) return Unicode_Indic_Syllable_SYLLABLE_MODIFIER;
	if (codepoint >= 0x1A7B && codepoint <= 0x1A7C) return Unicode_Indic_Syllable_SYLLABLE_MODIFIER;
	if (codepoint == 0x1A7F) return Unicode_Indic_Syllable_SYLLABLE_MODIFIER;
	if (codepoint == 0x1C36) return Unicode_Indic_Syllable_SYLLABLE_MODIFIER;
	if (codepoint == 0x1DFB) return Unicode_Indic_Syllable_SYLLABLE_MODIFIER;
	if (codepoint == 0x2074) return Unicode_Indic_Syllable_SYLLABLE_MODIFIER;
	if (codepoint >= 0x2082 && codepoint <= 0x2084) return Unicode_Indic_Syllable_SYLLABLE_MODIFIER;
	if (codepoint == 0x111C9) return Unicode_Indic_Syllable_SYLLABLE_MODIFIER;
	if (codepoint == 0x1145E) return Unicode_Indic_Syllable_SYLLABLE_MODIFIER;
	if (codepoint == 0x11A33) return Unicode_Indic_Syllable_SYLLABLE_MODIFIER;
	if (codepoint == 0x0E4C) return Unicode_Indic_Syllable_CONSONANT_KILLER;
	if (codepoint == 0x17CD) return Unicode_Indic_Syllable_CONSONANT_KILLER;
	if (codepoint == 0x200C) return Unicode_Indic_Syllable_NON_JOINER;
	if (codepoint == 0x200D) return Unicode_Indic_Syllable_JOINER;
	if (codepoint == 0x1107F) return Unicode_Indic_Syllable_NUMBER_JOINER;
	if (codepoint >= 0x0030 && codepoint <= 0x0039) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x0966 && codepoint <= 0x096F) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x09E6 && codepoint <= 0x09EF) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x0A66 && codepoint <= 0x0A6F) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x0AE6 && codepoint <= 0x0AEF) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x0B66 && codepoint <= 0x0B6F) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x0BE6 && codepoint <= 0x0BEF) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x0C66 && codepoint <= 0x0C6F) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x0CE6 && codepoint <= 0x0CEF) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x0D66 && codepoint <= 0x0D6F) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x0DE6 && codepoint <= 0x0DEF) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x0E50 && codepoint <= 0x0E59) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x0ED0 && codepoint <= 0x0ED9) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x0F20 && codepoint <= 0x0F29) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x0F2A && codepoint <= 0x0F33) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x1040 && codepoint <= 0x1049) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x1090 && codepoint <= 0x1099) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x17E0 && codepoint <= 0x17E9) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x1946 && codepoint <= 0x194F) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x19D0 && codepoint <= 0x19D9) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint == 0x19DA) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x1A80 && codepoint <= 0x1A89) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x1A90 && codepoint <= 0x1A99) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x1B50 && codepoint <= 0x1B59) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x1BB0 && codepoint <= 0x1BB9) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x1C40 && codepoint <= 0x1C49) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0xA8D0 && codepoint <= 0xA8D9) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0xA900 && codepoint <= 0xA909) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0xA9D0 && codepoint <= 0xA9D9) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0xA9F0 && codepoint <= 0xA9F9) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0xAA50 && codepoint <= 0xAA59) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0xABF0 && codepoint <= 0xABF9) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x10A40 && codepoint <= 0x10A48) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x11066 && codepoint <= 0x1106F) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x11136 && codepoint <= 0x1113F) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x111D0 && codepoint <= 0x111D9) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x111E1 && codepoint <= 0x111F4) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x112F0 && codepoint <= 0x112F9) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x11450 && codepoint <= 0x11459) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x114D0 && codepoint <= 0x114D9) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x11650 && codepoint <= 0x11659) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x116C0 && codepoint <= 0x116C9) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x11730 && codepoint <= 0x11739) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x1173A && codepoint <= 0x1173B) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x11950 && codepoint <= 0x11959) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x11C50 && codepoint <= 0x11C59) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x11C5A && codepoint <= 0x11C6C) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x11D50 && codepoint <= 0x11D59) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x11DA0 && codepoint <= 0x11DA9) return Unicode_Indic_Syllable_NUMBER;
	if (codepoint >= 0x11052 && codepoint <= 0x11065) return Unicode_Indic_Syllable_BRAHMI_JOINING_NUMBER;

	return Unicode_Indic_Syllable_UNKNOWN;
}

Unicode_Indic_Position unicode_indic_position(uint32_t codepoint) {
	if (codepoint == 0x0903) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x093B) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x093E) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x0940) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x0949 && codepoint <= 0x094C) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x094F) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x0982 && codepoint <= 0x0983) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x09BE) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x09C0) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x09D7) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x0A03) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x0A3E) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x0A40) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x0A83) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x0ABE) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x0AC0) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x0ACB && codepoint <= 0x0ACC) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x0B02 && codepoint <= 0x0B03) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x0B3E) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x0B40) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x0BBE && codepoint <= 0x0BBF) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x0BC1 && codepoint <= 0x0BC2) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x0BD7) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x0C01 && codepoint <= 0x0C03) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x0C41 && codepoint <= 0x0C44) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x0C82 && codepoint <= 0x0C83) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x0CBE) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x0CC1 && codepoint <= 0x0CC4) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x0CD5 && codepoint <= 0x0CD6) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x0D02 && codepoint <= 0x0D03) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x0D3E && codepoint <= 0x0D40) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x0D41 && codepoint <= 0x0D42) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x0D57) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x0D82 && codepoint <= 0x0D83) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x0DCF && codepoint <= 0x0DD1) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x0DD8) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x0DDF) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x0DF2 && codepoint <= 0x0DF3) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x0E30) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x0E32 && codepoint <= 0x0E33) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x0E45) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x0EB0) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x0EB2 && codepoint <= 0x0EB3) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x0F3E) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x0F7F) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x102B && codepoint <= 0x102C) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x1038) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x103B) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x1056 && codepoint <= 0x1057) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x1062 && codepoint <= 0x1064) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x1067 && codepoint <= 0x106D) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x1083) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x1087 && codepoint <= 0x108C) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x108F) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x109A && codepoint <= 0x109C) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x17B6) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x17C7 && codepoint <= 0x17C8) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x1923 && codepoint <= 0x1924) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x1929 && codepoint <= 0x192B) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x1930 && codepoint <= 0x1931) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x1933 && codepoint <= 0x1938) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x19B0 && codepoint <= 0x19B4) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x19B8 && codepoint <= 0x19B9) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x19BB && codepoint <= 0x19C0) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x19C8 && codepoint <= 0x19C9) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x1A1A) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x1A57) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x1A61) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x1A63 && codepoint <= 0x1A64) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x1A6D) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x1B04) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x1B35) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x1B44) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x1B82) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x1BA1) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x1BA7) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x1BAA) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x1BE7) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x1BEA && codepoint <= 0x1BEC) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x1BEE) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x1BF2 && codepoint <= 0x1BF3) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x1C24 && codepoint <= 0x1C26) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x1C2A && codepoint <= 0x1C2B) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x1CE1) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x1CF7) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0xA823 && codepoint <= 0xA824) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0xA827) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0xA880 && codepoint <= 0xA881) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0xA8B4 && codepoint <= 0xA8C3) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0xA952 && codepoint <= 0xA953) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0xA983) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0xA9B4 && codepoint <= 0xA9B5) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0xAA33) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0xAA4D) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0xAA7B) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0xAA7D) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0xAAB1) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0xAABA) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0xAABD) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0xAAEF) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0xAAF5) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0xABE3 && codepoint <= 0xABE4) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0xABE6 && codepoint <= 0xABE7) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0xABE9 && codepoint <= 0xABEA) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0xABEC) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x11000) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x11002) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x11082) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x110B0) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x110B2) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x110B7 && codepoint <= 0x110B8) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x11145 && codepoint <= 0x11146) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x11182) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x111B3) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x111B5) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x111C0) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x1122C && codepoint <= 0x1122E) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x11235) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x112E0) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x112E2) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x11302 && codepoint <= 0x11303) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x1133E && codepoint <= 0x1133F) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x11341 && codepoint <= 0x11344) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x1134D) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x11357) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x11362 && codepoint <= 0x11363) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x11435) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x11437) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x11440 && codepoint <= 0x11441) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x11445) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x114B0) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x114B2) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x114BD) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x114C1) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x115AF) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x115B1) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x115BE) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x11630 && codepoint <= 0x11632) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x1163B && codepoint <= 0x1163C) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x1163E) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x116AC) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x116AF) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x116B6) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x11720 && codepoint <= 0x11721) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x1182C) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x1182E) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x11838) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x11930 && codepoint <= 0x11934) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x1193D) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x11940) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x119D1) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x119D3) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x119DC && codepoint <= 0x119DF) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x11A39) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x11A57 && codepoint <= 0x11A58) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x11A97) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x11C2F) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x11C3E) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x11CA9) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x11CB4) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x11D46) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x11D8A && codepoint <= 0x11D8E) return Unicode_Indic_Position_RIGHT;
	if (codepoint >= 0x11D93 && codepoint <= 0x11D94) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x11D96) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x11EF6) return Unicode_Indic_Position_RIGHT;
	if (codepoint == 0x093F) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x094E) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x09BF) return Unicode_Indic_Position_LEFT;
	if (codepoint >= 0x09C7 && codepoint <= 0x09C8) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x0A3F) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x0ABF) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x0B47) return Unicode_Indic_Position_LEFT;
	if (codepoint >= 0x0BC6 && codepoint <= 0x0BC8) return Unicode_Indic_Position_LEFT;
	if (codepoint >= 0x0D46 && codepoint <= 0x0D48) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x0DD9) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x0DDB) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x0F3F) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x1031) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x1084) return Unicode_Indic_Position_LEFT;
	if (codepoint >= 0x17C1 && codepoint <= 0x17C3) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x1A19) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x1A55) return Unicode_Indic_Position_LEFT;
	if (codepoint >= 0x1A6E && codepoint <= 0x1A72) return Unicode_Indic_Position_LEFT;
	if (codepoint >= 0x1B3E && codepoint <= 0x1B3F) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x1BA6) return Unicode_Indic_Position_LEFT;
	if (codepoint >= 0x1C27 && codepoint <= 0x1C28) return Unicode_Indic_Position_LEFT;
	if (codepoint >= 0x1C34 && codepoint <= 0x1C35) return Unicode_Indic_Position_LEFT;
	if (codepoint >= 0xA9BA && codepoint <= 0xA9BB) return Unicode_Indic_Position_LEFT;
	if (codepoint >= 0xAA2F && codepoint <= 0xAA30) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0xAA34) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0xAAEB) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0xAAEE) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x110B1) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x1112C) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x111B4) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x111CE) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x112E1) return Unicode_Indic_Position_LEFT;
	if (codepoint >= 0x11347 && codepoint <= 0x11348) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x11436) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x114B1) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x114B9) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x115B0) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x115B8) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x116AE) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x11726) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x1182D) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x11935) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x11937) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x119D2) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x119E4) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x11CB1) return Unicode_Indic_Position_LEFT;
	if (codepoint == 0x11EF5) return Unicode_Indic_Position_LEFT;
	if (codepoint >= 0x0E40 && codepoint <= 0x0E44) return Unicode_Indic_Position_VISUAL_ORDER_LEFT;
	if (codepoint >= 0x0EC0 && codepoint <= 0x0EC4) return Unicode_Indic_Position_VISUAL_ORDER_LEFT;
	if (codepoint >= 0x19B5 && codepoint <= 0x19B7) return Unicode_Indic_Position_VISUAL_ORDER_LEFT;
	if (codepoint == 0x19BA) return Unicode_Indic_Position_VISUAL_ORDER_LEFT;
	if (codepoint >= 0xAAB5 && codepoint <= 0xAAB6) return Unicode_Indic_Position_VISUAL_ORDER_LEFT;
	if (codepoint == 0xAAB9) return Unicode_Indic_Position_VISUAL_ORDER_LEFT;
	if (codepoint >= 0xAABB && codepoint <= 0xAABC) return Unicode_Indic_Position_VISUAL_ORDER_LEFT;
	if (codepoint >= 0x09CB && codepoint <= 0x09CC) return Unicode_Indic_Position_LEFT_AND_RIGHT;
	if (codepoint == 0x0B4B) return Unicode_Indic_Position_LEFT_AND_RIGHT;
	if (codepoint >= 0x0BCA && codepoint <= 0x0BCC) return Unicode_Indic_Position_LEFT_AND_RIGHT;
	if (codepoint >= 0x0D4A && codepoint <= 0x0D4C) return Unicode_Indic_Position_LEFT_AND_RIGHT;
	if (codepoint == 0x0DDC) return Unicode_Indic_Position_LEFT_AND_RIGHT;
	if (codepoint == 0x0DDE) return Unicode_Indic_Position_LEFT_AND_RIGHT;
	if (codepoint == 0x17C0) return Unicode_Indic_Position_LEFT_AND_RIGHT;
	if (codepoint >= 0x17C4 && codepoint <= 0x17C5) return Unicode_Indic_Position_LEFT_AND_RIGHT;
	if (codepoint >= 0x1B40 && codepoint <= 0x1B41) return Unicode_Indic_Position_LEFT_AND_RIGHT;
	if (codepoint >= 0x1134B && codepoint <= 0x1134C) return Unicode_Indic_Position_LEFT_AND_RIGHT;
	if (codepoint == 0x114BC) return Unicode_Indic_Position_LEFT_AND_RIGHT;
	if (codepoint == 0x114BE) return Unicode_Indic_Position_LEFT_AND_RIGHT;
	if (codepoint == 0x115BA) return Unicode_Indic_Position_LEFT_AND_RIGHT;
	if (codepoint == 0x11938) return Unicode_Indic_Position_LEFT_AND_RIGHT;
	if (codepoint >= 0x0900 && codepoint <= 0x0902) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x093A) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0945 && codepoint <= 0x0948) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0951) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0953 && codepoint <= 0x0955) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0981) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x09FE) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0A01 && codepoint <= 0x0A02) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0A47 && codepoint <= 0x0A48) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0A4B && codepoint <= 0x0A4C) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0A70 && codepoint <= 0x0A71) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0A81 && codepoint <= 0x0A82) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0AC5) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0AC7 && codepoint <= 0x0AC8) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0AFA && codepoint <= 0x0AFF) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0B01) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0B3F) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0B55 && codepoint <= 0x0B56) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0B82) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0BC0) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0BCD) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0C00) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0C04) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0C3E && codepoint <= 0x0C40) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0C46 && codepoint <= 0x0C47) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0C4A && codepoint <= 0x0C4D) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0C55) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0C81) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0CBF) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0CC6) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0CCC && codepoint <= 0x0CCD) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0D00 && codepoint <= 0x0D01) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0D3B && codepoint <= 0x0D3C) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0D4D) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0D4E) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0D81) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0DCA) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0DD2 && codepoint <= 0x0DD3) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0E31) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0E34 && codepoint <= 0x0E37) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0E47 && codepoint <= 0x0E4E) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0EB1) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0EB4 && codepoint <= 0x0EB7) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0EBB) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0EC8 && codepoint <= 0x0ECD) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0F39) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0F72) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0F7A && codepoint <= 0x0F7E) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x0F80) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0F82 && codepoint <= 0x0F83) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x0F86 && codepoint <= 0x0F87) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x102D && codepoint <= 0x102E) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x1032 && codepoint <= 0x1036) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x103A) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x1071 && codepoint <= 0x1074) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x1085 && codepoint <= 0x1086) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x109D) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1712) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1732) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1752) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1772) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x17B7 && codepoint <= 0x17BA) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x17C6) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x17C9 && codepoint <= 0x17D1) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x17D3) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x17DD) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x1920 && codepoint <= 0x1921) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x1927 && codepoint <= 0x1928) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x193A) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1A17) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1A1B) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x1A58 && codepoint <= 0x1A5A) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1A62) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x1A65 && codepoint <= 0x1A68) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1A6B) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x1A73 && codepoint <= 0x1A7C) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x1B00 && codepoint <= 0x1B03) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1B34) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x1B36 && codepoint <= 0x1B37) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1B42) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1B6B) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x1B6D && codepoint <= 0x1B73) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x1B80 && codepoint <= 0x1B81) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1BA4) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x1BA8 && codepoint <= 0x1BA9) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1BE6) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x1BE8 && codepoint <= 0x1BE9) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1BED) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x1BEF && codepoint <= 0x1BF1) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x1C2D && codepoint <= 0x1C33) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1C36) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x1CD0 && codepoint <= 0x1CD2) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x1CDA && codepoint <= 0x1CDB) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1CE0) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1CF4) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1DFB) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x20F0) return Unicode_Indic_Position_TOP;
	if (codepoint == 0xA802) return Unicode_Indic_Position_TOP;
	if (codepoint == 0xA806) return Unicode_Indic_Position_TOP;
	if (codepoint == 0xA80B) return Unicode_Indic_Position_TOP;
	if (codepoint == 0xA826) return Unicode_Indic_Position_TOP;
	if (codepoint == 0xA8C5) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0xA8E0 && codepoint <= 0xA8F1) return Unicode_Indic_Position_TOP;
	if (codepoint == 0xA8FF) return Unicode_Indic_Position_TOP;
	if (codepoint == 0xA94A) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0xA94F && codepoint <= 0xA951) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0xA980 && codepoint <= 0xA982) return Unicode_Indic_Position_TOP;
	if (codepoint == 0xA9B3) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0xA9B6 && codepoint <= 0xA9B7) return Unicode_Indic_Position_TOP;
	if (codepoint == 0xA9BC) return Unicode_Indic_Position_TOP;
	if (codepoint == 0xA9E5) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0xAA29 && codepoint <= 0xAA2C) return Unicode_Indic_Position_TOP;
	if (codepoint == 0xAA2E) return Unicode_Indic_Position_TOP;
	if (codepoint == 0xAA31) return Unicode_Indic_Position_TOP;
	if (codepoint == 0xAA43) return Unicode_Indic_Position_TOP;
	if (codepoint == 0xAA4C) return Unicode_Indic_Position_TOP;
	if (codepoint == 0xAA7C) return Unicode_Indic_Position_TOP;
	if (codepoint == 0xAAB0) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0xAAB2 && codepoint <= 0xAAB3) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0xAAB7 && codepoint <= 0xAAB8) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0xAABE && codepoint <= 0xAABF) return Unicode_Indic_Position_TOP;
	if (codepoint == 0xAAC1) return Unicode_Indic_Position_TOP;
	if (codepoint == 0xAAED) return Unicode_Indic_Position_TOP;
	if (codepoint == 0xABE5) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x10A05) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x10A0F) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x10A38) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x11001) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11038 && codepoint <= 0x1103B) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11042 && codepoint <= 0x11046) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11080 && codepoint <= 0x11081) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x110B5 && codepoint <= 0x110B6) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11100 && codepoint <= 0x11102) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11127 && codepoint <= 0x11129) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1112D) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x11130) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x11134) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11180 && codepoint <= 0x11181) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x111BC && codepoint <= 0x111BE) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x111C2 && codepoint <= 0x111C3) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x111CB) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x111CF) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11230 && codepoint <= 0x11231) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x11234) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11236 && codepoint <= 0x11237) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1123E) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x112DF) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x112E5 && codepoint <= 0x112E8) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11300 && codepoint <= 0x11301) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x11340) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11366 && codepoint <= 0x1136C) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11370 && codepoint <= 0x11374) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x1143E && codepoint <= 0x1143F) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11443 && codepoint <= 0x11444) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1145E) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x114BA) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x114BF && codepoint <= 0x114C0) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x115BC && codepoint <= 0x115BD) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11639 && codepoint <= 0x1163A) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1163D) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x11640) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x116AB) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x116AD) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x116B2 && codepoint <= 0x116B5) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1171F) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11722 && codepoint <= 0x11723) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x11727) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11729 && codepoint <= 0x1172B) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11833 && codepoint <= 0x11837) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x1193B && codepoint <= 0x1193C) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x1193F) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x11941) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x119DA && codepoint <= 0x119DB) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x11A01) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11A04 && codepoint <= 0x11A09) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11A35 && codepoint <= 0x11A38) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x11A3A) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x11A51) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11A54 && codepoint <= 0x11A56) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11A84 && codepoint <= 0x11A89) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x11A96) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x11A98) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11C30 && codepoint <= 0x11C31) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11C38 && codepoint <= 0x11C3D) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x11CB3) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11CB5 && codepoint <= 0x11CB6) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11D31 && codepoint <= 0x11D35) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x11D3A) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11D3C && codepoint <= 0x11D3D) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11D3F && codepoint <= 0x11D41) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x11D43) return Unicode_Indic_Position_TOP;
	if (codepoint >= 0x11D90 && codepoint <= 0x11D91) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x11D95) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x11EF3) return Unicode_Indic_Position_TOP;
	if (codepoint == 0x093C) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x0941 && codepoint <= 0x0944) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x094D) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x0952) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x0956 && codepoint <= 0x0957) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x0962 && codepoint <= 0x0963) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x09BC) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x09C1 && codepoint <= 0x09C4) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x09CD) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x09E2 && codepoint <= 0x09E3) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x0A3C) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x0A41 && codepoint <= 0x0A42) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x0A4D) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x0A51) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x0A75) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x0ABC) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x0AC1 && codepoint <= 0x0AC4) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x0ACD) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x0AE2 && codepoint <= 0x0AE3) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x0B3C) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x0B41 && codepoint <= 0x0B44) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x0B4D) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x0B62 && codepoint <= 0x0B63) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x0C56) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x0C62 && codepoint <= 0x0C63) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x0CBC) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x0CE2 && codepoint <= 0x0CE3) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x0D43 && codepoint <= 0x0D44) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x0D62 && codepoint <= 0x0D63) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x0DD4) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x0DD6) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x0E38 && codepoint <= 0x0E3A) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x0EB8 && codepoint <= 0x0EBA) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x0EBC) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x0F18 && codepoint <= 0x0F19) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x0F35) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x0F37) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x0F71) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x0F74 && codepoint <= 0x0F75) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x0F84) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x0F8D && codepoint <= 0x0F97) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x0F99 && codepoint <= 0x0FBC) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x0FC6) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x102F && codepoint <= 0x1030) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x1037) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x103D && codepoint <= 0x103E) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x1058 && codepoint <= 0x1059) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x105E && codepoint <= 0x1060) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x1082) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x108D) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x1713 && codepoint <= 0x1714) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x1733 && codepoint <= 0x1734) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x1753) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x1773) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x17BB && codepoint <= 0x17BD) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x1922) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x1932) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x1939) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x193B) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x1A18) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x1A56) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x1A5B && codepoint <= 0x1A5E) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x1A69 && codepoint <= 0x1A6A) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x1A6C) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x1A7F) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x1B38 && codepoint <= 0x1B3A) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x1B6C) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x1BA2 && codepoint <= 0x1BA3) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x1BA5) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x1BAC && codepoint <= 0x1BAD) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x1C2C) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x1C37) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x1CD5 && codepoint <= 0x1CD9) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x1CDC && codepoint <= 0x1CDF) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x1CED) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0xA825) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0xA82C) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0xA8C4) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0xA92B && codepoint <= 0xA92D) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0xA947 && codepoint <= 0xA949) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0xA94B && codepoint <= 0xA94E) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0xA9B8 && codepoint <= 0xA9B9) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0xA9BD) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0xAA2D) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0xAA32) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0xAA35 && codepoint <= 0xAA36) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0xAAB4) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0xAAEC) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0xABE8) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0xABED) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x10A02 && codepoint <= 0x10A03) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x10A0C && codepoint <= 0x10A0E) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x10A39 && codepoint <= 0x10A3A) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x1103C && codepoint <= 0x11041) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x110B3 && codepoint <= 0x110B4) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x110B9 && codepoint <= 0x110BA) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x1112A && codepoint <= 0x1112B) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x11131 && codepoint <= 0x11132) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x11173) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x111B6 && codepoint <= 0x111BB) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x111C9 && codepoint <= 0x111CA) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x111CC) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x1122F) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x112E3 && codepoint <= 0x112E4) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x112E9 && codepoint <= 0x112EA) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x1133B && codepoint <= 0x1133C) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x11438 && codepoint <= 0x1143D) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x11442) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x11446) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x114B3 && codepoint <= 0x114B8) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x114C2 && codepoint <= 0x114C3) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x115B2 && codepoint <= 0x115B5) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x115BF && codepoint <= 0x115C0) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x115DC && codepoint <= 0x115DD) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x11633 && codepoint <= 0x11638) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x1163F) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x116B0 && codepoint <= 0x116B1) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x116B7) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x1171D) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x11724 && codepoint <= 0x11725) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x11728) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x1182F && codepoint <= 0x11832) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x11839 && codepoint <= 0x1183A) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x11943) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x119D4 && codepoint <= 0x119D7) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x119E0) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x11A02 && codepoint <= 0x11A03) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x11A0A) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x11A33 && codepoint <= 0x11A34) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x11A3B && codepoint <= 0x11A3E) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x11A52 && codepoint <= 0x11A53) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x11A59 && codepoint <= 0x11A5B) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x11A8A && codepoint <= 0x11A95) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x11C32 && codepoint <= 0x11C36) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x11C3F) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x11C92 && codepoint <= 0x11CA7) return Unicode_Indic_Position_BOTTOM;
	if (codepoint >= 0x11CAA && codepoint <= 0x11CB0) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x11CB2) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x11D36) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x11D42) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x11D44) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x11D47) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x11EF4) return Unicode_Indic_Position_BOTTOM;
	if (codepoint == 0x0C48) return Unicode_Indic_Position_TOP_AND_BOTTOM;
	if (codepoint == 0x0F73) return Unicode_Indic_Position_TOP_AND_BOTTOM;
	if (codepoint >= 0x0F76 && codepoint <= 0x0F79) return Unicode_Indic_Position_TOP_AND_BOTTOM;
	if (codepoint == 0x0F81) return Unicode_Indic_Position_TOP_AND_BOTTOM;
	if (codepoint == 0x1B3C) return Unicode_Indic_Position_TOP_AND_BOTTOM;
	if (codepoint >= 0x1112E && codepoint <= 0x1112F) return Unicode_Indic_Position_TOP_AND_BOTTOM;
	if (codepoint == 0x0AC9) return Unicode_Indic_Position_TOP_AND_RIGHT;
	if (codepoint == 0x0B57) return Unicode_Indic_Position_TOP_AND_RIGHT;
	if (codepoint == 0x0CC0) return Unicode_Indic_Position_TOP_AND_RIGHT;
	if (codepoint >= 0x0CC7 && codepoint <= 0x0CC8) return Unicode_Indic_Position_TOP_AND_RIGHT;
	if (codepoint >= 0x0CCA && codepoint <= 0x0CCB) return Unicode_Indic_Position_TOP_AND_RIGHT;
	if (codepoint >= 0x1925 && codepoint <= 0x1926) return Unicode_Indic_Position_TOP_AND_RIGHT;
	if (codepoint == 0x1B43) return Unicode_Indic_Position_TOP_AND_RIGHT;
	if (codepoint == 0x111BF) return Unicode_Indic_Position_TOP_AND_RIGHT;
	if (codepoint >= 0x11232 && codepoint <= 0x11233) return Unicode_Indic_Position_TOP_AND_RIGHT;
	if (codepoint == 0x0B48) return Unicode_Indic_Position_TOP_AND_LEFT;
	if (codepoint == 0x0DDA) return Unicode_Indic_Position_TOP_AND_LEFT;
	if (codepoint == 0x17BE) return Unicode_Indic_Position_TOP_AND_LEFT;
	if (codepoint == 0x1C29) return Unicode_Indic_Position_TOP_AND_LEFT;
	if (codepoint == 0x114BB) return Unicode_Indic_Position_TOP_AND_LEFT;
	if (codepoint == 0x115B9) return Unicode_Indic_Position_TOP_AND_LEFT;
	if (codepoint == 0x0B4C) return Unicode_Indic_Position_TOP_AND_LEFT_AND_RIGHT;
	if (codepoint == 0x0DDD) return Unicode_Indic_Position_TOP_AND_LEFT_AND_RIGHT;
	if (codepoint == 0x17BF) return Unicode_Indic_Position_TOP_AND_LEFT_AND_RIGHT;
	if (codepoint == 0x115BB) return Unicode_Indic_Position_TOP_AND_LEFT_AND_RIGHT;
	if (codepoint == 0x1B3B) return Unicode_Indic_Position_BOTTOM_AND_RIGHT;
	if (codepoint == 0xA9BE) return Unicode_Indic_Position_BOTTOM_AND_RIGHT;
	if (codepoint == 0xA9C0) return Unicode_Indic_Position_BOTTOM_AND_RIGHT;
	if (codepoint == 0x11942) return Unicode_Indic_Position_BOTTOM_AND_RIGHT;
	if (codepoint == 0xA9BF) return Unicode_Indic_Position_BOTTOM_AND_LEFT;
	if (codepoint == 0x1B3D) return Unicode_Indic_Position_TOP_AND_BOTTOM_AND_RIGHT;
	if (codepoint == 0x103C) return Unicode_Indic_Position_TOP_AND_BOTTOM_AND_LEFT;
	if (codepoint == 0x1171E) return Unicode_Indic_Position_TOP_AND_BOTTOM_AND_LEFT;
	if (codepoint == 0x1CD4) return Unicode_Indic_Position_OVERSTRUCK;
	if (codepoint >= 0x1CE2 && codepoint <= 0x1CE8) return Unicode_Indic_Position_OVERSTRUCK;
	if (codepoint == 0x10A01) return Unicode_Indic_Position_OVERSTRUCK;
	if (codepoint == 0x10A06) return Unicode_Indic_Position_OVERSTRUCK;

	return Unicode_Indic_Position_UNKNOWN;
}

Unicode_Grapheme_Property unicode_grapheme_property(uint32_t codepoint) {
	if (codepoint >= 0x0600 && codepoint <= 0x0605) return Unicode_Grapheme_Property_PREPEND;
	if (codepoint == 0x06DD) return Unicode_Grapheme_Property_PREPEND;
	if (codepoint == 0x070F) return Unicode_Grapheme_Property_PREPEND;
	if (codepoint == 0x08E2) return Unicode_Grapheme_Property_PREPEND;
	if (codepoint == 0x0D4E) return Unicode_Grapheme_Property_PREPEND;
	if (codepoint == 0x110BD) return Unicode_Grapheme_Property_PREPEND;
	if (codepoint == 0x110CD) return Unicode_Grapheme_Property_PREPEND;
	if (codepoint >= 0x111C2 && codepoint <= 0x111C3) return Unicode_Grapheme_Property_PREPEND;
	if (codepoint == 0x1193F) return Unicode_Grapheme_Property_PREPEND;
	if (codepoint == 0x11941) return Unicode_Grapheme_Property_PREPEND;
	if (codepoint == 0x11A3A) return Unicode_Grapheme_Property_PREPEND;
	if (codepoint >= 0x11A84 && codepoint <= 0x11A89) return Unicode_Grapheme_Property_PREPEND;
	if (codepoint == 0x11D46) return Unicode_Grapheme_Property_PREPEND;
	if (codepoint == 0x000D) return Unicode_Grapheme_Property_CR;
	if (codepoint == 0x000A) return Unicode_Grapheme_Property_LF;
	if (codepoint >= 0x0000 && codepoint <= 0x0009) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint >= 0x000B && codepoint <= 0x000C) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint >= 0x000E && codepoint <= 0x001F) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint >= 0x007F && codepoint <= 0x009F) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint == 0x00AD) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint == 0x061C) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint == 0x180E) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint == 0x200B) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint >= 0x200E && codepoint <= 0x200F) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint == 0x2028) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint == 0x2029) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint >= 0x202A && codepoint <= 0x202E) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint >= 0x2060 && codepoint <= 0x2064) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint == 0x2065) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint >= 0x2066 && codepoint <= 0x206F) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint == 0xFEFF) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint >= 0xFFF0 && codepoint <= 0xFFF8) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint >= 0xFFF9 && codepoint <= 0xFFFB) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint >= 0x13430 && codepoint <= 0x13438) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint >= 0x1BCA0 && codepoint <= 0x1BCA3) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint >= 0x1D173 && codepoint <= 0x1D17A) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint == 0xE0000) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint == 0xE0001) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint >= 0xE0002 && codepoint <= 0xE001F) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint >= 0xE0080 && codepoint <= 0xE00FF) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint >= 0xE01F0 && codepoint <= 0xE0FFF) return Unicode_Grapheme_Property_CONTROL;
	if (codepoint >= 0x0300 && codepoint <= 0x036F) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0483 && codepoint <= 0x0487) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0488 && codepoint <= 0x0489) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0591 && codepoint <= 0x05BD) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x05BF) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x05C1 && codepoint <= 0x05C2) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x05C4 && codepoint <= 0x05C5) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x05C7) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0610 && codepoint <= 0x061A) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x064B && codepoint <= 0x065F) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0670) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x06D6 && codepoint <= 0x06DC) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x06DF && codepoint <= 0x06E4) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x06E7 && codepoint <= 0x06E8) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x06EA && codepoint <= 0x06ED) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0711) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0730 && codepoint <= 0x074A) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x07A6 && codepoint <= 0x07B0) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x07EB && codepoint <= 0x07F3) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x07FD) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0816 && codepoint <= 0x0819) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x081B && codepoint <= 0x0823) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0825 && codepoint <= 0x0827) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0829 && codepoint <= 0x082D) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0859 && codepoint <= 0x085B) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x08D3 && codepoint <= 0x08E1) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x08E3 && codepoint <= 0x0902) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x093A) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x093C) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0941 && codepoint <= 0x0948) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x094D) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0951 && codepoint <= 0x0957) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0962 && codepoint <= 0x0963) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0981) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x09BC) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x09BE) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x09C1 && codepoint <= 0x09C4) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x09CD) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x09D7) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x09E2 && codepoint <= 0x09E3) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x09FE) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0A01 && codepoint <= 0x0A02) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0A3C) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0A41 && codepoint <= 0x0A42) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0A47 && codepoint <= 0x0A48) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0A4B && codepoint <= 0x0A4D) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0A51) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0A70 && codepoint <= 0x0A71) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0A75) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0A81 && codepoint <= 0x0A82) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0ABC) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0AC1 && codepoint <= 0x0AC5) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0AC7 && codepoint <= 0x0AC8) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0ACD) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0AE2 && codepoint <= 0x0AE3) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0AFA && codepoint <= 0x0AFF) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0B01) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0B3C) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0B3E) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0B3F) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0B41 && codepoint <= 0x0B44) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0B4D) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0B55 && codepoint <= 0x0B56) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0B57) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0B62 && codepoint <= 0x0B63) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0B82) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0BBE) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0BC0) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0BCD) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0BD7) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0C00) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0C04) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0C3E && codepoint <= 0x0C40) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0C46 && codepoint <= 0x0C48) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0C4A && codepoint <= 0x0C4D) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0C55 && codepoint <= 0x0C56) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0C62 && codepoint <= 0x0C63) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0C81) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0CBC) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0CBF) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0CC2) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0CC6) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0CCC && codepoint <= 0x0CCD) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0CD5 && codepoint <= 0x0CD6) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0CE2 && codepoint <= 0x0CE3) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0D00 && codepoint <= 0x0D01) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0D3B && codepoint <= 0x0D3C) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0D3E) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0D41 && codepoint <= 0x0D44) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0D4D) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0D57) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0D62 && codepoint <= 0x0D63) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0D81) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0DCA) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0DCF) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0DD2 && codepoint <= 0x0DD4) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0DD6) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0DDF) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0E31) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0E34 && codepoint <= 0x0E3A) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0E47 && codepoint <= 0x0E4E) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0EB1) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0EB4 && codepoint <= 0x0EBC) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0EC8 && codepoint <= 0x0ECD) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0F18 && codepoint <= 0x0F19) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0F35) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0F37) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0F39) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0F71 && codepoint <= 0x0F7E) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0F80 && codepoint <= 0x0F84) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0F86 && codepoint <= 0x0F87) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0F8D && codepoint <= 0x0F97) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x0F99 && codepoint <= 0x0FBC) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x0FC6) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x102D && codepoint <= 0x1030) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1032 && codepoint <= 0x1037) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1039 && codepoint <= 0x103A) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x103D && codepoint <= 0x103E) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1058 && codepoint <= 0x1059) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x105E && codepoint <= 0x1060) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1071 && codepoint <= 0x1074) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1082) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1085 && codepoint <= 0x1086) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x108D) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x109D) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x135D && codepoint <= 0x135F) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1712 && codepoint <= 0x1714) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1732 && codepoint <= 0x1734) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1752 && codepoint <= 0x1753) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1772 && codepoint <= 0x1773) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x17B4 && codepoint <= 0x17B5) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x17B7 && codepoint <= 0x17BD) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x17C6) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x17C9 && codepoint <= 0x17D3) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x17DD) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x180B && codepoint <= 0x180D) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1885 && codepoint <= 0x1886) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x18A9) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1920 && codepoint <= 0x1922) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1927 && codepoint <= 0x1928) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1932) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1939 && codepoint <= 0x193B) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1A17 && codepoint <= 0x1A18) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1A1B) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1A56) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1A58 && codepoint <= 0x1A5E) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1A60) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1A62) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1A65 && codepoint <= 0x1A6C) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1A73 && codepoint <= 0x1A7C) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1A7F) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1AB0 && codepoint <= 0x1ABD) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1ABE) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1ABF && codepoint <= 0x1AC0) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1B00 && codepoint <= 0x1B03) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1B34) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1B35) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1B36 && codepoint <= 0x1B3A) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1B3C) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1B42) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1B6B && codepoint <= 0x1B73) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1B80 && codepoint <= 0x1B81) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1BA2 && codepoint <= 0x1BA5) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1BA8 && codepoint <= 0x1BA9) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1BAB && codepoint <= 0x1BAD) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1BE6) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1BE8 && codepoint <= 0x1BE9) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1BED) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1BEF && codepoint <= 0x1BF1) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1C2C && codepoint <= 0x1C33) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1C36 && codepoint <= 0x1C37) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1CD0 && codepoint <= 0x1CD2) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1CD4 && codepoint <= 0x1CE0) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1CE2 && codepoint <= 0x1CE8) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1CED) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1CF4) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1CF8 && codepoint <= 0x1CF9) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1DC0 && codepoint <= 0x1DF9) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1DFB && codepoint <= 0x1DFF) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x200C) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x20D0 && codepoint <= 0x20DC) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x20DD && codepoint <= 0x20E0) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x20E1) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x20E2 && codepoint <= 0x20E4) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x20E5 && codepoint <= 0x20F0) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x2CEF && codepoint <= 0x2CF1) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x2D7F) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x2DE0 && codepoint <= 0x2DFF) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x302A && codepoint <= 0x302D) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x302E && codepoint <= 0x302F) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x3099 && codepoint <= 0x309A) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0xA66F) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xA670 && codepoint <= 0xA672) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xA674 && codepoint <= 0xA67D) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xA69E && codepoint <= 0xA69F) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xA6F0 && codepoint <= 0xA6F1) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0xA802) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0xA806) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0xA80B) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xA825 && codepoint <= 0xA826) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0xA82C) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xA8C4 && codepoint <= 0xA8C5) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xA8E0 && codepoint <= 0xA8F1) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0xA8FF) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xA926 && codepoint <= 0xA92D) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xA947 && codepoint <= 0xA951) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xA980 && codepoint <= 0xA982) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0xA9B3) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xA9B6 && codepoint <= 0xA9B9) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xA9BC && codepoint <= 0xA9BD) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0xA9E5) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xAA29 && codepoint <= 0xAA2E) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xAA31 && codepoint <= 0xAA32) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xAA35 && codepoint <= 0xAA36) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0xAA43) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0xAA4C) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0xAA7C) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0xAAB0) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xAAB2 && codepoint <= 0xAAB4) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xAAB7 && codepoint <= 0xAAB8) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xAABE && codepoint <= 0xAABF) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0xAAC1) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xAAEC && codepoint <= 0xAAED) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0xAAF6) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0xABE5) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0xABE8) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0xABED) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0xFB1E) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xFE00 && codepoint <= 0xFE0F) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xFE20 && codepoint <= 0xFE2F) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xFF9E && codepoint <= 0xFF9F) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x101FD) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x102E0) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x10376 && codepoint <= 0x1037A) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x10A01 && codepoint <= 0x10A03) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x10A05 && codepoint <= 0x10A06) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x10A0C && codepoint <= 0x10A0F) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x10A38 && codepoint <= 0x10A3A) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x10A3F) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x10AE5 && codepoint <= 0x10AE6) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x10D24 && codepoint <= 0x10D27) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x10EAB && codepoint <= 0x10EAC) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x10F46 && codepoint <= 0x10F50) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x11001) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11038 && codepoint <= 0x11046) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1107F && codepoint <= 0x11081) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x110B3 && codepoint <= 0x110B6) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x110B9 && codepoint <= 0x110BA) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11100 && codepoint <= 0x11102) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11127 && codepoint <= 0x1112B) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1112D && codepoint <= 0x11134) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x11173) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11180 && codepoint <= 0x11181) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x111B6 && codepoint <= 0x111BE) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x111C9 && codepoint <= 0x111CC) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x111CF) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1122F && codepoint <= 0x11231) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x11234) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11236 && codepoint <= 0x11237) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1123E) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x112DF) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x112E3 && codepoint <= 0x112EA) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11300 && codepoint <= 0x11301) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1133B && codepoint <= 0x1133C) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1133E) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x11340) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x11357) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11366 && codepoint <= 0x1136C) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11370 && codepoint <= 0x11374) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11438 && codepoint <= 0x1143F) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11442 && codepoint <= 0x11444) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x11446) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1145E) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x114B0) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x114B3 && codepoint <= 0x114B8) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x114BA) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x114BD) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x114BF && codepoint <= 0x114C0) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x114C2 && codepoint <= 0x114C3) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x115AF) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x115B2 && codepoint <= 0x115B5) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x115BC && codepoint <= 0x115BD) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x115BF && codepoint <= 0x115C0) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x115DC && codepoint <= 0x115DD) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11633 && codepoint <= 0x1163A) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1163D) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1163F && codepoint <= 0x11640) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x116AB) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x116AD) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x116B0 && codepoint <= 0x116B5) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x116B7) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1171D && codepoint <= 0x1171F) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11722 && codepoint <= 0x11725) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11727 && codepoint <= 0x1172B) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1182F && codepoint <= 0x11837) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11839 && codepoint <= 0x1183A) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x11930) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1193B && codepoint <= 0x1193C) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1193E) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x11943) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x119D4 && codepoint <= 0x119D7) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x119DA && codepoint <= 0x119DB) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x119E0) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11A01 && codepoint <= 0x11A0A) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11A33 && codepoint <= 0x11A38) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11A3B && codepoint <= 0x11A3E) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x11A47) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11A51 && codepoint <= 0x11A56) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11A59 && codepoint <= 0x11A5B) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11A8A && codepoint <= 0x11A96) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11A98 && codepoint <= 0x11A99) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11C30 && codepoint <= 0x11C36) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11C38 && codepoint <= 0x11C3D) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x11C3F) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11C92 && codepoint <= 0x11CA7) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11CAA && codepoint <= 0x11CB0) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11CB2 && codepoint <= 0x11CB3) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11CB5 && codepoint <= 0x11CB6) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11D31 && codepoint <= 0x11D36) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x11D3A) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11D3C && codepoint <= 0x11D3D) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11D3F && codepoint <= 0x11D45) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x11D47) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11D90 && codepoint <= 0x11D91) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x11D95) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x11D97) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x11EF3 && codepoint <= 0x11EF4) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x16AF0 && codepoint <= 0x16AF4) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x16B30 && codepoint <= 0x16B36) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x16F4F) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x16F8F && codepoint <= 0x16F92) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x16FE4) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1BC9D && codepoint <= 0x1BC9E) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1D165) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1D167 && codepoint <= 0x1D169) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1D16E && codepoint <= 0x1D172) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1D17B && codepoint <= 0x1D182) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1D185 && codepoint <= 0x1D18B) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1D1AA && codepoint <= 0x1D1AD) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1D242 && codepoint <= 0x1D244) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1DA00 && codepoint <= 0x1DA36) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1DA3B && codepoint <= 0x1DA6C) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1DA75) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint == 0x1DA84) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1DA9B && codepoint <= 0x1DA9F) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1DAA1 && codepoint <= 0x1DAAF) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1E000 && codepoint <= 0x1E006) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1E008 && codepoint <= 0x1E018) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1E01B && codepoint <= 0x1E021) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1E023 && codepoint <= 0x1E024) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1E026 && codepoint <= 0x1E02A) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1E130 && codepoint <= 0x1E136) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1E2EC && codepoint <= 0x1E2EF) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1E8D0 && codepoint <= 0x1E8D6) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1E944 && codepoint <= 0x1E94A) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1F3FB && codepoint <= 0x1F3FF) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xE0020 && codepoint <= 0xE007F) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0xE0100 && codepoint <= 0xE01EF) return Unicode_Grapheme_Property_EXTEND;
	if (codepoint >= 0x1F1E6 && codepoint <= 0x1F1FF) return Unicode_Grapheme_Property_REGIONAL_INDICATOR;
	if (codepoint == 0x0903) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x093B) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x093E && codepoint <= 0x0940) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0949 && codepoint <= 0x094C) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x094E && codepoint <= 0x094F) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0982 && codepoint <= 0x0983) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x09BF && codepoint <= 0x09C0) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x09C7 && codepoint <= 0x09C8) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x09CB && codepoint <= 0x09CC) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x0A03) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0A3E && codepoint <= 0x0A40) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x0A83) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0ABE && codepoint <= 0x0AC0) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x0AC9) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0ACB && codepoint <= 0x0ACC) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0B02 && codepoint <= 0x0B03) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x0B40) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0B47 && codepoint <= 0x0B48) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0B4B && codepoint <= 0x0B4C) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x0BBF) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0BC1 && codepoint <= 0x0BC2) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0BC6 && codepoint <= 0x0BC8) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0BCA && codepoint <= 0x0BCC) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0C01 && codepoint <= 0x0C03) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0C41 && codepoint <= 0x0C44) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0C82 && codepoint <= 0x0C83) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x0CBE) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0CC0 && codepoint <= 0x0CC1) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0CC3 && codepoint <= 0x0CC4) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0CC7 && codepoint <= 0x0CC8) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0CCA && codepoint <= 0x0CCB) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0D02 && codepoint <= 0x0D03) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0D3F && codepoint <= 0x0D40) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0D46 && codepoint <= 0x0D48) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0D4A && codepoint <= 0x0D4C) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0D82 && codepoint <= 0x0D83) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0DD0 && codepoint <= 0x0DD1) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0DD8 && codepoint <= 0x0DDE) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0DF2 && codepoint <= 0x0DF3) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x0E33) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x0EB3) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x0F3E && codepoint <= 0x0F3F) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x0F7F) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x1031) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x103B && codepoint <= 0x103C) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x1056 && codepoint <= 0x1057) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x1084) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x17B6) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x17BE && codepoint <= 0x17C5) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x17C7 && codepoint <= 0x17C8) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x1923 && codepoint <= 0x1926) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x1929 && codepoint <= 0x192B) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x1930 && codepoint <= 0x1931) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x1933 && codepoint <= 0x1938) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x1A19 && codepoint <= 0x1A1A) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x1A55) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x1A57) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x1A6D && codepoint <= 0x1A72) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x1B04) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x1B3B) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x1B3D && codepoint <= 0x1B41) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x1B43 && codepoint <= 0x1B44) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x1B82) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x1BA1) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x1BA6 && codepoint <= 0x1BA7) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x1BAA) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x1BE7) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x1BEA && codepoint <= 0x1BEC) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x1BEE) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x1BF2 && codepoint <= 0x1BF3) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x1C24 && codepoint <= 0x1C2B) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x1C34 && codepoint <= 0x1C35) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x1CE1) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x1CF7) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0xA823 && codepoint <= 0xA824) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0xA827) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0xA880 && codepoint <= 0xA881) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0xA8B4 && codepoint <= 0xA8C3) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0xA952 && codepoint <= 0xA953) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0xA983) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0xA9B4 && codepoint <= 0xA9B5) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0xA9BA && codepoint <= 0xA9BB) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0xA9BE && codepoint <= 0xA9C0) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0xAA2F && codepoint <= 0xAA30) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0xAA33 && codepoint <= 0xAA34) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0xAA4D) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0xAAEB) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0xAAEE && codepoint <= 0xAAEF) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0xAAF5) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0xABE3 && codepoint <= 0xABE4) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0xABE6 && codepoint <= 0xABE7) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0xABE9 && codepoint <= 0xABEA) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0xABEC) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x11000) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x11002) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x11082) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x110B0 && codepoint <= 0x110B2) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x110B7 && codepoint <= 0x110B8) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x1112C) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x11145 && codepoint <= 0x11146) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x11182) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x111B3 && codepoint <= 0x111B5) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x111BF && codepoint <= 0x111C0) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x111CE) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x1122C && codepoint <= 0x1122E) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x11232 && codepoint <= 0x11233) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x11235) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x112E0 && codepoint <= 0x112E2) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x11302 && codepoint <= 0x11303) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x1133F) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x11341 && codepoint <= 0x11344) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x11347 && codepoint <= 0x11348) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x1134B && codepoint <= 0x1134D) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x11362 && codepoint <= 0x11363) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x11435 && codepoint <= 0x11437) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x11440 && codepoint <= 0x11441) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x11445) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x114B1 && codepoint <= 0x114B2) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x114B9) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x114BB && codepoint <= 0x114BC) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x114BE) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x114C1) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x115B0 && codepoint <= 0x115B1) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x115B8 && codepoint <= 0x115BB) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x115BE) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x11630 && codepoint <= 0x11632) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x1163B && codepoint <= 0x1163C) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x1163E) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x116AC) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x116AE && codepoint <= 0x116AF) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x116B6) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x11720 && codepoint <= 0x11721) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x11726) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x1182C && codepoint <= 0x1182E) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x11838) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x11931 && codepoint <= 0x11935) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x11937 && codepoint <= 0x11938) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x1193D) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x11940) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x11942) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x119D1 && codepoint <= 0x119D3) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x119DC && codepoint <= 0x119DF) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x119E4) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x11A39) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x11A57 && codepoint <= 0x11A58) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x11A97) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x11C2F) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x11C3E) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x11CA9) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x11CB1) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x11CB4) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x11D8A && codepoint <= 0x11D8E) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x11D93 && codepoint <= 0x11D94) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x11D96) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x11EF5 && codepoint <= 0x11EF6) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x16F51 && codepoint <= 0x16F87) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x16FF0 && codepoint <= 0x16FF1) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x1D166) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint == 0x1D16D) return Unicode_Grapheme_Property_SPACINGMARK;
	if (codepoint >= 0x1100 && codepoint <= 0x115F) return Unicode_Grapheme_Property_L;
	if (codepoint >= 0xA960 && codepoint <= 0xA97C) return Unicode_Grapheme_Property_L;
	if (codepoint >= 0x1160 && codepoint <= 0x11A7) return Unicode_Grapheme_Property_V;
	if (codepoint >= 0xD7B0 && codepoint <= 0xD7C6) return Unicode_Grapheme_Property_V;
	if (codepoint >= 0x11A8 && codepoint <= 0x11FF) return Unicode_Grapheme_Property_T;
	if (codepoint >= 0xD7CB && codepoint <= 0xD7FB) return Unicode_Grapheme_Property_T;
	if (codepoint == 0xAC00) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAC1C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAC38) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAC54) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAC70) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAC8C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xACA8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xACC4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xACE0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xACFC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAD18) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAD34) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAD50) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAD6C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAD88) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xADA4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xADC0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xADDC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xADF8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAE14) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAE30) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAE4C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAE68) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAE84) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAEA0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAEBC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAED8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAEF4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAF10) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAF2C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAF48) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAF64) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAF80) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAF9C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAFB8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAFD4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xAFF0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB00C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB028) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB044) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB060) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB07C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB098) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB0B4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB0D0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB0EC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB108) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB124) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB140) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB15C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB178) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB194) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB1B0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB1CC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB1E8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB204) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB220) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB23C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB258) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB274) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB290) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB2AC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB2C8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB2E4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB300) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB31C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB338) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB354) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB370) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB38C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB3A8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB3C4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB3E0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB3FC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB418) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB434) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB450) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB46C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB488) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB4A4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB4C0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB4DC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB4F8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB514) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB530) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB54C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB568) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB584) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB5A0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB5BC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB5D8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB5F4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB610) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB62C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB648) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB664) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB680) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB69C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB6B8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB6D4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB6F0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB70C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB728) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB744) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB760) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB77C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB798) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB7B4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB7D0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB7EC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB808) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB824) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB840) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB85C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB878) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB894) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB8B0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB8CC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB8E8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB904) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB920) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB93C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB958) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB974) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB990) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB9AC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB9C8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xB9E4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBA00) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBA1C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBA38) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBA54) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBA70) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBA8C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBAA8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBAC4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBAE0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBAFC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBB18) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBB34) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBB50) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBB6C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBB88) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBBA4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBBC0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBBDC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBBF8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBC14) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBC30) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBC4C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBC68) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBC84) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBCA0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBCBC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBCD8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBCF4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBD10) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBD2C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBD48) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBD64) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBD80) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBD9C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBDB8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBDD4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBDF0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBE0C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBE28) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBE44) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBE60) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBE7C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBE98) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBEB4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBED0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBEEC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBF08) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBF24) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBF40) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBF5C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBF78) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBF94) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBFB0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBFCC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xBFE8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC004) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC020) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC03C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC058) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC074) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC090) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC0AC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC0C8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC0E4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC100) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC11C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC138) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC154) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC170) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC18C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC1A8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC1C4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC1E0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC1FC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC218) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC234) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC250) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC26C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC288) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC2A4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC2C0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC2DC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC2F8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC314) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC330) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC34C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC368) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC384) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC3A0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC3BC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC3D8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC3F4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC410) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC42C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC448) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC464) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC480) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC49C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC4B8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC4D4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC4F0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC50C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC528) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC544) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC560) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC57C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC598) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC5B4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC5D0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC5EC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC608) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC624) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC640) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC65C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC678) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC694) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC6B0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC6CC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC6E8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC704) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC720) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC73C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC758) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC774) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC790) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC7AC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC7C8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC7E4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC800) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC81C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC838) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC854) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC870) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC88C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC8A8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC8C4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC8E0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC8FC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC918) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC934) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC950) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC96C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC988) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC9A4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC9C0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC9DC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xC9F8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCA14) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCA30) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCA4C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCA68) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCA84) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCAA0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCABC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCAD8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCAF4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCB10) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCB2C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCB48) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCB64) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCB80) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCB9C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCBB8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCBD4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCBF0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCC0C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCC28) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCC44) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCC60) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCC7C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCC98) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCCB4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCCD0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCCEC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCD08) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCD24) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCD40) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCD5C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCD78) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCD94) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCDB0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCDCC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCDE8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCE04) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCE20) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCE3C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCE58) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCE74) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCE90) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCEAC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCEC8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCEE4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCF00) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCF1C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCF38) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCF54) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCF70) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCF8C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCFA8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCFC4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCFE0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xCFFC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD018) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD034) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD050) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD06C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD088) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD0A4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD0C0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD0DC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD0F8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD114) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD130) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD14C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD168) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD184) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD1A0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD1BC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD1D8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD1F4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD210) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD22C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD248) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD264) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD280) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD29C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD2B8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD2D4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD2F0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD30C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD328) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD344) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD360) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD37C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD398) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD3B4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD3D0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD3EC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD408) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD424) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD440) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD45C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD478) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD494) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD4B0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD4CC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD4E8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD504) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD520) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD53C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD558) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD574) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD590) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD5AC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD5C8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD5E4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD600) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD61C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD638) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD654) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD670) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD68C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD6A8) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD6C4) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD6E0) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD6FC) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD718) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD734) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD750) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD76C) return Unicode_Grapheme_Property_LV;
	if (codepoint == 0xD788) return Unicode_Grapheme_Property_LV;
	if (codepoint >= 0xAC01 && codepoint <= 0xAC1B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAC1D && codepoint <= 0xAC37) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAC39 && codepoint <= 0xAC53) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAC55 && codepoint <= 0xAC6F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAC71 && codepoint <= 0xAC8B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAC8D && codepoint <= 0xACA7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xACA9 && codepoint <= 0xACC3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xACC5 && codepoint <= 0xACDF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xACE1 && codepoint <= 0xACFB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xACFD && codepoint <= 0xAD17) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAD19 && codepoint <= 0xAD33) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAD35 && codepoint <= 0xAD4F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAD51 && codepoint <= 0xAD6B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAD6D && codepoint <= 0xAD87) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAD89 && codepoint <= 0xADA3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xADA5 && codepoint <= 0xADBF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xADC1 && codepoint <= 0xADDB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xADDD && codepoint <= 0xADF7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xADF9 && codepoint <= 0xAE13) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAE15 && codepoint <= 0xAE2F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAE31 && codepoint <= 0xAE4B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAE4D && codepoint <= 0xAE67) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAE69 && codepoint <= 0xAE83) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAE85 && codepoint <= 0xAE9F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAEA1 && codepoint <= 0xAEBB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAEBD && codepoint <= 0xAED7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAED9 && codepoint <= 0xAEF3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAEF5 && codepoint <= 0xAF0F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAF11 && codepoint <= 0xAF2B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAF2D && codepoint <= 0xAF47) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAF49 && codepoint <= 0xAF63) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAF65 && codepoint <= 0xAF7F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAF81 && codepoint <= 0xAF9B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAF9D && codepoint <= 0xAFB7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAFB9 && codepoint <= 0xAFD3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAFD5 && codepoint <= 0xAFEF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xAFF1 && codepoint <= 0xB00B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB00D && codepoint <= 0xB027) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB029 && codepoint <= 0xB043) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB045 && codepoint <= 0xB05F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB061 && codepoint <= 0xB07B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB07D && codepoint <= 0xB097) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB099 && codepoint <= 0xB0B3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB0B5 && codepoint <= 0xB0CF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB0D1 && codepoint <= 0xB0EB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB0ED && codepoint <= 0xB107) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB109 && codepoint <= 0xB123) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB125 && codepoint <= 0xB13F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB141 && codepoint <= 0xB15B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB15D && codepoint <= 0xB177) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB179 && codepoint <= 0xB193) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB195 && codepoint <= 0xB1AF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB1B1 && codepoint <= 0xB1CB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB1CD && codepoint <= 0xB1E7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB1E9 && codepoint <= 0xB203) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB205 && codepoint <= 0xB21F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB221 && codepoint <= 0xB23B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB23D && codepoint <= 0xB257) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB259 && codepoint <= 0xB273) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB275 && codepoint <= 0xB28F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB291 && codepoint <= 0xB2AB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB2AD && codepoint <= 0xB2C7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB2C9 && codepoint <= 0xB2E3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB2E5 && codepoint <= 0xB2FF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB301 && codepoint <= 0xB31B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB31D && codepoint <= 0xB337) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB339 && codepoint <= 0xB353) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB355 && codepoint <= 0xB36F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB371 && codepoint <= 0xB38B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB38D && codepoint <= 0xB3A7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB3A9 && codepoint <= 0xB3C3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB3C5 && codepoint <= 0xB3DF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB3E1 && codepoint <= 0xB3FB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB3FD && codepoint <= 0xB417) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB419 && codepoint <= 0xB433) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB435 && codepoint <= 0xB44F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB451 && codepoint <= 0xB46B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB46D && codepoint <= 0xB487) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB489 && codepoint <= 0xB4A3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB4A5 && codepoint <= 0xB4BF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB4C1 && codepoint <= 0xB4DB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB4DD && codepoint <= 0xB4F7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB4F9 && codepoint <= 0xB513) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB515 && codepoint <= 0xB52F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB531 && codepoint <= 0xB54B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB54D && codepoint <= 0xB567) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB569 && codepoint <= 0xB583) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB585 && codepoint <= 0xB59F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB5A1 && codepoint <= 0xB5BB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB5BD && codepoint <= 0xB5D7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB5D9 && codepoint <= 0xB5F3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB5F5 && codepoint <= 0xB60F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB611 && codepoint <= 0xB62B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB62D && codepoint <= 0xB647) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB649 && codepoint <= 0xB663) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB665 && codepoint <= 0xB67F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB681 && codepoint <= 0xB69B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB69D && codepoint <= 0xB6B7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB6B9 && codepoint <= 0xB6D3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB6D5 && codepoint <= 0xB6EF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB6F1 && codepoint <= 0xB70B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB70D && codepoint <= 0xB727) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB729 && codepoint <= 0xB743) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB745 && codepoint <= 0xB75F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB761 && codepoint <= 0xB77B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB77D && codepoint <= 0xB797) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB799 && codepoint <= 0xB7B3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB7B5 && codepoint <= 0xB7CF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB7D1 && codepoint <= 0xB7EB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB7ED && codepoint <= 0xB807) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB809 && codepoint <= 0xB823) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB825 && codepoint <= 0xB83F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB841 && codepoint <= 0xB85B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB85D && codepoint <= 0xB877) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB879 && codepoint <= 0xB893) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB895 && codepoint <= 0xB8AF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB8B1 && codepoint <= 0xB8CB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB8CD && codepoint <= 0xB8E7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB8E9 && codepoint <= 0xB903) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB905 && codepoint <= 0xB91F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB921 && codepoint <= 0xB93B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB93D && codepoint <= 0xB957) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB959 && codepoint <= 0xB973) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB975 && codepoint <= 0xB98F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB991 && codepoint <= 0xB9AB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB9AD && codepoint <= 0xB9C7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB9C9 && codepoint <= 0xB9E3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xB9E5 && codepoint <= 0xB9FF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBA01 && codepoint <= 0xBA1B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBA1D && codepoint <= 0xBA37) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBA39 && codepoint <= 0xBA53) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBA55 && codepoint <= 0xBA6F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBA71 && codepoint <= 0xBA8B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBA8D && codepoint <= 0xBAA7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBAA9 && codepoint <= 0xBAC3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBAC5 && codepoint <= 0xBADF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBAE1 && codepoint <= 0xBAFB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBAFD && codepoint <= 0xBB17) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBB19 && codepoint <= 0xBB33) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBB35 && codepoint <= 0xBB4F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBB51 && codepoint <= 0xBB6B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBB6D && codepoint <= 0xBB87) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBB89 && codepoint <= 0xBBA3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBBA5 && codepoint <= 0xBBBF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBBC1 && codepoint <= 0xBBDB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBBDD && codepoint <= 0xBBF7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBBF9 && codepoint <= 0xBC13) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBC15 && codepoint <= 0xBC2F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBC31 && codepoint <= 0xBC4B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBC4D && codepoint <= 0xBC67) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBC69 && codepoint <= 0xBC83) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBC85 && codepoint <= 0xBC9F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBCA1 && codepoint <= 0xBCBB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBCBD && codepoint <= 0xBCD7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBCD9 && codepoint <= 0xBCF3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBCF5 && codepoint <= 0xBD0F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBD11 && codepoint <= 0xBD2B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBD2D && codepoint <= 0xBD47) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBD49 && codepoint <= 0xBD63) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBD65 && codepoint <= 0xBD7F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBD81 && codepoint <= 0xBD9B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBD9D && codepoint <= 0xBDB7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBDB9 && codepoint <= 0xBDD3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBDD5 && codepoint <= 0xBDEF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBDF1 && codepoint <= 0xBE0B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBE0D && codepoint <= 0xBE27) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBE29 && codepoint <= 0xBE43) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBE45 && codepoint <= 0xBE5F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBE61 && codepoint <= 0xBE7B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBE7D && codepoint <= 0xBE97) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBE99 && codepoint <= 0xBEB3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBEB5 && codepoint <= 0xBECF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBED1 && codepoint <= 0xBEEB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBEED && codepoint <= 0xBF07) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBF09 && codepoint <= 0xBF23) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBF25 && codepoint <= 0xBF3F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBF41 && codepoint <= 0xBF5B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBF5D && codepoint <= 0xBF77) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBF79 && codepoint <= 0xBF93) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBF95 && codepoint <= 0xBFAF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBFB1 && codepoint <= 0xBFCB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBFCD && codepoint <= 0xBFE7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xBFE9 && codepoint <= 0xC003) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC005 && codepoint <= 0xC01F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC021 && codepoint <= 0xC03B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC03D && codepoint <= 0xC057) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC059 && codepoint <= 0xC073) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC075 && codepoint <= 0xC08F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC091 && codepoint <= 0xC0AB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC0AD && codepoint <= 0xC0C7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC0C9 && codepoint <= 0xC0E3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC0E5 && codepoint <= 0xC0FF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC101 && codepoint <= 0xC11B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC11D && codepoint <= 0xC137) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC139 && codepoint <= 0xC153) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC155 && codepoint <= 0xC16F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC171 && codepoint <= 0xC18B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC18D && codepoint <= 0xC1A7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC1A9 && codepoint <= 0xC1C3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC1C5 && codepoint <= 0xC1DF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC1E1 && codepoint <= 0xC1FB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC1FD && codepoint <= 0xC217) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC219 && codepoint <= 0xC233) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC235 && codepoint <= 0xC24F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC251 && codepoint <= 0xC26B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC26D && codepoint <= 0xC287) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC289 && codepoint <= 0xC2A3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC2A5 && codepoint <= 0xC2BF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC2C1 && codepoint <= 0xC2DB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC2DD && codepoint <= 0xC2F7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC2F9 && codepoint <= 0xC313) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC315 && codepoint <= 0xC32F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC331 && codepoint <= 0xC34B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC34D && codepoint <= 0xC367) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC369 && codepoint <= 0xC383) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC385 && codepoint <= 0xC39F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC3A1 && codepoint <= 0xC3BB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC3BD && codepoint <= 0xC3D7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC3D9 && codepoint <= 0xC3F3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC3F5 && codepoint <= 0xC40F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC411 && codepoint <= 0xC42B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC42D && codepoint <= 0xC447) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC449 && codepoint <= 0xC463) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC465 && codepoint <= 0xC47F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC481 && codepoint <= 0xC49B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC49D && codepoint <= 0xC4B7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC4B9 && codepoint <= 0xC4D3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC4D5 && codepoint <= 0xC4EF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC4F1 && codepoint <= 0xC50B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC50D && codepoint <= 0xC527) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC529 && codepoint <= 0xC543) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC545 && codepoint <= 0xC55F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC561 && codepoint <= 0xC57B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC57D && codepoint <= 0xC597) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC599 && codepoint <= 0xC5B3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC5B5 && codepoint <= 0xC5CF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC5D1 && codepoint <= 0xC5EB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC5ED && codepoint <= 0xC607) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC609 && codepoint <= 0xC623) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC625 && codepoint <= 0xC63F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC641 && codepoint <= 0xC65B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC65D && codepoint <= 0xC677) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC679 && codepoint <= 0xC693) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC695 && codepoint <= 0xC6AF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC6B1 && codepoint <= 0xC6CB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC6CD && codepoint <= 0xC6E7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC6E9 && codepoint <= 0xC703) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC705 && codepoint <= 0xC71F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC721 && codepoint <= 0xC73B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC73D && codepoint <= 0xC757) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC759 && codepoint <= 0xC773) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC775 && codepoint <= 0xC78F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC791 && codepoint <= 0xC7AB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC7AD && codepoint <= 0xC7C7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC7C9 && codepoint <= 0xC7E3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC7E5 && codepoint <= 0xC7FF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC801 && codepoint <= 0xC81B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC81D && codepoint <= 0xC837) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC839 && codepoint <= 0xC853) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC855 && codepoint <= 0xC86F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC871 && codepoint <= 0xC88B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC88D && codepoint <= 0xC8A7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC8A9 && codepoint <= 0xC8C3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC8C5 && codepoint <= 0xC8DF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC8E1 && codepoint <= 0xC8FB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC8FD && codepoint <= 0xC917) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC919 && codepoint <= 0xC933) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC935 && codepoint <= 0xC94F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC951 && codepoint <= 0xC96B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC96D && codepoint <= 0xC987) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC989 && codepoint <= 0xC9A3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC9A5 && codepoint <= 0xC9BF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC9C1 && codepoint <= 0xC9DB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC9DD && codepoint <= 0xC9F7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xC9F9 && codepoint <= 0xCA13) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCA15 && codepoint <= 0xCA2F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCA31 && codepoint <= 0xCA4B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCA4D && codepoint <= 0xCA67) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCA69 && codepoint <= 0xCA83) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCA85 && codepoint <= 0xCA9F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCAA1 && codepoint <= 0xCABB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCABD && codepoint <= 0xCAD7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCAD9 && codepoint <= 0xCAF3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCAF5 && codepoint <= 0xCB0F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCB11 && codepoint <= 0xCB2B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCB2D && codepoint <= 0xCB47) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCB49 && codepoint <= 0xCB63) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCB65 && codepoint <= 0xCB7F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCB81 && codepoint <= 0xCB9B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCB9D && codepoint <= 0xCBB7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCBB9 && codepoint <= 0xCBD3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCBD5 && codepoint <= 0xCBEF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCBF1 && codepoint <= 0xCC0B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCC0D && codepoint <= 0xCC27) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCC29 && codepoint <= 0xCC43) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCC45 && codepoint <= 0xCC5F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCC61 && codepoint <= 0xCC7B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCC7D && codepoint <= 0xCC97) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCC99 && codepoint <= 0xCCB3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCCB5 && codepoint <= 0xCCCF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCCD1 && codepoint <= 0xCCEB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCCED && codepoint <= 0xCD07) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCD09 && codepoint <= 0xCD23) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCD25 && codepoint <= 0xCD3F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCD41 && codepoint <= 0xCD5B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCD5D && codepoint <= 0xCD77) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCD79 && codepoint <= 0xCD93) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCD95 && codepoint <= 0xCDAF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCDB1 && codepoint <= 0xCDCB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCDCD && codepoint <= 0xCDE7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCDE9 && codepoint <= 0xCE03) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCE05 && codepoint <= 0xCE1F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCE21 && codepoint <= 0xCE3B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCE3D && codepoint <= 0xCE57) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCE59 && codepoint <= 0xCE73) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCE75 && codepoint <= 0xCE8F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCE91 && codepoint <= 0xCEAB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCEAD && codepoint <= 0xCEC7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCEC9 && codepoint <= 0xCEE3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCEE5 && codepoint <= 0xCEFF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCF01 && codepoint <= 0xCF1B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCF1D && codepoint <= 0xCF37) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCF39 && codepoint <= 0xCF53) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCF55 && codepoint <= 0xCF6F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCF71 && codepoint <= 0xCF8B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCF8D && codepoint <= 0xCFA7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCFA9 && codepoint <= 0xCFC3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCFC5 && codepoint <= 0xCFDF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCFE1 && codepoint <= 0xCFFB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xCFFD && codepoint <= 0xD017) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD019 && codepoint <= 0xD033) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD035 && codepoint <= 0xD04F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD051 && codepoint <= 0xD06B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD06D && codepoint <= 0xD087) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD089 && codepoint <= 0xD0A3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD0A5 && codepoint <= 0xD0BF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD0C1 && codepoint <= 0xD0DB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD0DD && codepoint <= 0xD0F7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD0F9 && codepoint <= 0xD113) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD115 && codepoint <= 0xD12F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD131 && codepoint <= 0xD14B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD14D && codepoint <= 0xD167) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD169 && codepoint <= 0xD183) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD185 && codepoint <= 0xD19F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD1A1 && codepoint <= 0xD1BB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD1BD && codepoint <= 0xD1D7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD1D9 && codepoint <= 0xD1F3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD1F5 && codepoint <= 0xD20F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD211 && codepoint <= 0xD22B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD22D && codepoint <= 0xD247) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD249 && codepoint <= 0xD263) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD265 && codepoint <= 0xD27F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD281 && codepoint <= 0xD29B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD29D && codepoint <= 0xD2B7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD2B9 && codepoint <= 0xD2D3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD2D5 && codepoint <= 0xD2EF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD2F1 && codepoint <= 0xD30B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD30D && codepoint <= 0xD327) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD329 && codepoint <= 0xD343) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD345 && codepoint <= 0xD35F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD361 && codepoint <= 0xD37B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD37D && codepoint <= 0xD397) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD399 && codepoint <= 0xD3B3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD3B5 && codepoint <= 0xD3CF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD3D1 && codepoint <= 0xD3EB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD3ED && codepoint <= 0xD407) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD409 && codepoint <= 0xD423) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD425 && codepoint <= 0xD43F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD441 && codepoint <= 0xD45B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD45D && codepoint <= 0xD477) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD479 && codepoint <= 0xD493) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD495 && codepoint <= 0xD4AF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD4B1 && codepoint <= 0xD4CB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD4CD && codepoint <= 0xD4E7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD4E9 && codepoint <= 0xD503) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD505 && codepoint <= 0xD51F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD521 && codepoint <= 0xD53B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD53D && codepoint <= 0xD557) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD559 && codepoint <= 0xD573) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD575 && codepoint <= 0xD58F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD591 && codepoint <= 0xD5AB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD5AD && codepoint <= 0xD5C7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD5C9 && codepoint <= 0xD5E3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD5E5 && codepoint <= 0xD5FF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD601 && codepoint <= 0xD61B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD61D && codepoint <= 0xD637) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD639 && codepoint <= 0xD653) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD655 && codepoint <= 0xD66F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD671 && codepoint <= 0xD68B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD68D && codepoint <= 0xD6A7) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD6A9 && codepoint <= 0xD6C3) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD6C5 && codepoint <= 0xD6DF) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD6E1 && codepoint <= 0xD6FB) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD6FD && codepoint <= 0xD717) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD719 && codepoint <= 0xD733) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD735 && codepoint <= 0xD74F) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD751 && codepoint <= 0xD76B) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD76D && codepoint <= 0xD787) return Unicode_Grapheme_Property_LVT;
	if (codepoint >= 0xD789 && codepoint <= 0xD7A3) return Unicode_Grapheme_Property_LVT;
	if (codepoint == 0x200D) return Unicode_Grapheme_Property_ZWJ;

	return Unicode_Grapheme_Property_UNKNOWN;
}

int unicode_normalize(uint32_t codepoint, uint32_t **normals) {
	static uint32_t no_break_space [] = { 0x0020 };
	static uint32_t diaeresis [] = { 0x0020, 0x0308 };
	static uint32_t feminine_ordinal_indicator [] = { 0x0061 };
	static uint32_t macron [] = { 0x0020, 0x0304 };
	static uint32_t superscript_two [] = { 0x0032 };
	static uint32_t superscript_three [] = { 0x0033 };
	static uint32_t acute_accent [] = { 0x0020, 0x0301 };
	static uint32_t micro_sign [] = { 0x03BC };
	static uint32_t cedilla [] = { 0x0020, 0x0327 };
	static uint32_t superscript_one [] = { 0x0031 };
	static uint32_t masculine_ordinal_indicator [] = { 0x006F };
	static uint32_t vulgar_fraction_one_quarter [] = { 0x0031, 0x2044, 0x0034 };
	static uint32_t vulgar_fraction_one_half [] = { 0x0031, 0x2044, 0x0032 };
	static uint32_t vulgar_fraction_three_quarters [] = { 0x0033, 0x2044, 0x0034 };
	static uint32_t latin_capital_letter_a_with_grave [] = { 0x0041, 0x0300 };
	static uint32_t latin_capital_letter_a_with_acute [] = { 0x0041, 0x0301 };
	static uint32_t latin_capital_letter_a_with_circumflex [] = { 0x0041, 0x0302 };
	static uint32_t latin_capital_letter_a_with_tilde [] = { 0x0041, 0x0303 };
	static uint32_t latin_capital_letter_a_with_diaeresis [] = { 0x0041, 0x0308 };
	static uint32_t latin_capital_letter_a_with_ring_above [] = { 0x0041, 0x030A };
	static uint32_t latin_capital_letter_c_with_cedilla [] = { 0x0043, 0x0327 };
	static uint32_t latin_capital_letter_e_with_grave [] = { 0x0045, 0x0300 };
	static uint32_t latin_capital_letter_e_with_acute [] = { 0x0045, 0x0301 };
	static uint32_t latin_capital_letter_e_with_circumflex [] = { 0x0045, 0x0302 };
	static uint32_t latin_capital_letter_e_with_diaeresis [] = { 0x0045, 0x0308 };
	static uint32_t latin_capital_letter_i_with_grave [] = { 0x0049, 0x0300 };
	static uint32_t latin_capital_letter_i_with_acute [] = { 0x0049, 0x0301 };
	static uint32_t latin_capital_letter_i_with_circumflex [] = { 0x0049, 0x0302 };
	static uint32_t latin_capital_letter_i_with_diaeresis [] = { 0x0049, 0x0308 };
	static uint32_t latin_capital_letter_n_with_tilde [] = { 0x004E, 0x0303 };
	static uint32_t latin_capital_letter_o_with_grave [] = { 0x004F, 0x0300 };
	static uint32_t latin_capital_letter_o_with_acute [] = { 0x004F, 0x0301 };
	static uint32_t latin_capital_letter_o_with_circumflex [] = { 0x004F, 0x0302 };
	static uint32_t latin_capital_letter_o_with_tilde [] = { 0x004F, 0x0303 };
	static uint32_t latin_capital_letter_o_with_diaeresis [] = { 0x004F, 0x0308 };
	static uint32_t latin_capital_letter_u_with_grave [] = { 0x0055, 0x0300 };
	static uint32_t latin_capital_letter_u_with_acute [] = { 0x0055, 0x0301 };
	static uint32_t latin_capital_letter_u_with_circumflex [] = { 0x0055, 0x0302 };
	static uint32_t latin_capital_letter_u_with_diaeresis [] = { 0x0055, 0x0308 };
	static uint32_t latin_capital_letter_y_with_acute [] = { 0x0059, 0x0301 };
	static uint32_t latin_small_letter_a_with_grave [] = { 0x0061, 0x0300 };
	static uint32_t latin_small_letter_a_with_acute [] = { 0x0061, 0x0301 };
	static uint32_t latin_small_letter_a_with_circumflex [] = { 0x0061, 0x0302 };
	static uint32_t latin_small_letter_a_with_tilde [] = { 0x0061, 0x0303 };
	static uint32_t latin_small_letter_a_with_diaeresis [] = { 0x0061, 0x0308 };
	static uint32_t latin_small_letter_a_with_ring_above [] = { 0x0061, 0x030A };
	static uint32_t latin_small_letter_c_with_cedilla [] = { 0x0063, 0x0327 };
	static uint32_t latin_small_letter_e_with_grave [] = { 0x0065, 0x0300 };
	static uint32_t latin_small_letter_e_with_acute [] = { 0x0065, 0x0301 };
	static uint32_t latin_small_letter_e_with_circumflex [] = { 0x0065, 0x0302 };
	static uint32_t latin_small_letter_e_with_diaeresis [] = { 0x0065, 0x0308 };
	static uint32_t latin_small_letter_i_with_grave [] = { 0x0069, 0x0300 };
	static uint32_t latin_small_letter_i_with_acute [] = { 0x0069, 0x0301 };
	static uint32_t latin_small_letter_i_with_circumflex [] = { 0x0069, 0x0302 };
	static uint32_t latin_small_letter_i_with_diaeresis [] = { 0x0069, 0x0308 };
	static uint32_t latin_small_letter_n_with_tilde [] = { 0x006E, 0x0303 };
	static uint32_t latin_small_letter_o_with_grave [] = { 0x006F, 0x0300 };
	static uint32_t latin_small_letter_o_with_acute [] = { 0x006F, 0x0301 };
	static uint32_t latin_small_letter_o_with_circumflex [] = { 0x006F, 0x0302 };
	static uint32_t latin_small_letter_o_with_tilde [] = { 0x006F, 0x0303 };
	static uint32_t latin_small_letter_o_with_diaeresis [] = { 0x006F, 0x0308 };
	static uint32_t latin_small_letter_u_with_grave [] = { 0x0075, 0x0300 };
	static uint32_t latin_small_letter_u_with_acute [] = { 0x0075, 0x0301 };
	static uint32_t latin_small_letter_u_with_circumflex [] = { 0x0075, 0x0302 };
	static uint32_t latin_small_letter_u_with_diaeresis [] = { 0x0075, 0x0308 };
	static uint32_t latin_small_letter_y_with_acute [] = { 0x0079, 0x0301 };
	static uint32_t latin_small_letter_y_with_diaeresis [] = { 0x0079, 0x0308 };
	static uint32_t latin_capital_letter_a_with_macron [] = { 0x0041, 0x0304 };
	static uint32_t latin_small_letter_a_with_macron [] = { 0x0061, 0x0304 };
	static uint32_t latin_capital_letter_a_with_breve [] = { 0x0041, 0x0306 };
	static uint32_t latin_small_letter_a_with_breve [] = { 0x0061, 0x0306 };
	static uint32_t latin_capital_letter_a_with_ogonek [] = { 0x0041, 0x0328 };
	static uint32_t latin_small_letter_a_with_ogonek [] = { 0x0061, 0x0328 };
	static uint32_t latin_capital_letter_c_with_acute [] = { 0x0043, 0x0301 };
	static uint32_t latin_small_letter_c_with_acute [] = { 0x0063, 0x0301 };
	static uint32_t latin_capital_letter_c_with_circumflex [] = { 0x0043, 0x0302 };
	static uint32_t latin_small_letter_c_with_circumflex [] = { 0x0063, 0x0302 };
	static uint32_t latin_capital_letter_c_with_dot_above [] = { 0x0043, 0x0307 };
	static uint32_t latin_small_letter_c_with_dot_above [] = { 0x0063, 0x0307 };
	static uint32_t latin_capital_letter_c_with_caron [] = { 0x0043, 0x030C };
	static uint32_t latin_small_letter_c_with_caron [] = { 0x0063, 0x030C };
	static uint32_t latin_capital_letter_d_with_caron [] = { 0x0044, 0x030C };
	static uint32_t latin_small_letter_d_with_caron [] = { 0x0064, 0x030C };
	static uint32_t latin_capital_letter_e_with_macron [] = { 0x0045, 0x0304 };
	static uint32_t latin_small_letter_e_with_macron [] = { 0x0065, 0x0304 };
	static uint32_t latin_capital_letter_e_with_breve [] = { 0x0045, 0x0306 };
	static uint32_t latin_small_letter_e_with_breve [] = { 0x0065, 0x0306 };
	static uint32_t latin_capital_letter_e_with_dot_above [] = { 0x0045, 0x0307 };
	static uint32_t latin_small_letter_e_with_dot_above [] = { 0x0065, 0x0307 };
	static uint32_t latin_capital_letter_e_with_ogonek [] = { 0x0045, 0x0328 };
	static uint32_t latin_small_letter_e_with_ogonek [] = { 0x0065, 0x0328 };
	static uint32_t latin_capital_letter_e_with_caron [] = { 0x0045, 0x030C };
	static uint32_t latin_small_letter_e_with_caron [] = { 0x0065, 0x030C };
	static uint32_t latin_capital_letter_g_with_circumflex [] = { 0x0047, 0x0302 };
	static uint32_t latin_small_letter_g_with_circumflex [] = { 0x0067, 0x0302 };
	static uint32_t latin_capital_letter_g_with_breve [] = { 0x0047, 0x0306 };
	static uint32_t latin_small_letter_g_with_breve [] = { 0x0067, 0x0306 };
	static uint32_t latin_capital_letter_g_with_dot_above [] = { 0x0047, 0x0307 };
	static uint32_t latin_small_letter_g_with_dot_above [] = { 0x0067, 0x0307 };
	static uint32_t latin_capital_letter_g_with_cedilla [] = { 0x0047, 0x0327 };
	static uint32_t latin_small_letter_g_with_cedilla [] = { 0x0067, 0x0327 };
	static uint32_t latin_capital_letter_h_with_circumflex [] = { 0x0048, 0x0302 };
	static uint32_t latin_small_letter_h_with_circumflex [] = { 0x0068, 0x0302 };
	static uint32_t latin_capital_letter_i_with_tilde [] = { 0x0049, 0x0303 };
	static uint32_t latin_small_letter_i_with_tilde [] = { 0x0069, 0x0303 };
	static uint32_t latin_capital_letter_i_with_macron [] = { 0x0049, 0x0304 };
	static uint32_t latin_small_letter_i_with_macron [] = { 0x0069, 0x0304 };
	static uint32_t latin_capital_letter_i_with_breve [] = { 0x0049, 0x0306 };
	static uint32_t latin_small_letter_i_with_breve [] = { 0x0069, 0x0306 };
	static uint32_t latin_capital_letter_i_with_ogonek [] = { 0x0049, 0x0328 };
	static uint32_t latin_small_letter_i_with_ogonek [] = { 0x0069, 0x0328 };
	static uint32_t latin_capital_letter_i_with_dot_above [] = { 0x0049, 0x0307 };
	static uint32_t latin_capital_ligature_ij [] = { 0x0049, 0x004A };
	static uint32_t latin_small_ligature_ij [] = { 0x0069, 0x006A };
	static uint32_t latin_capital_letter_j_with_circumflex [] = { 0x004A, 0x0302 };
	static uint32_t latin_small_letter_j_with_circumflex [] = { 0x006A, 0x0302 };
	static uint32_t latin_capital_letter_k_with_cedilla [] = { 0x004B, 0x0327 };
	static uint32_t latin_small_letter_k_with_cedilla [] = { 0x006B, 0x0327 };
	static uint32_t latin_capital_letter_l_with_acute [] = { 0x004C, 0x0301 };
	static uint32_t latin_small_letter_l_with_acute [] = { 0x006C, 0x0301 };
	static uint32_t latin_capital_letter_l_with_cedilla [] = { 0x004C, 0x0327 };
	static uint32_t latin_small_letter_l_with_cedilla [] = { 0x006C, 0x0327 };
	static uint32_t latin_capital_letter_l_with_caron [] = { 0x004C, 0x030C };
	static uint32_t latin_small_letter_l_with_caron [] = { 0x006C, 0x030C };
	static uint32_t latin_capital_letter_l_with_middle_dot [] = { 0x004C, 0x00B7 };
	static uint32_t latin_small_letter_l_with_middle_dot [] = { 0x006C, 0x00B7 };
	static uint32_t latin_capital_letter_n_with_acute [] = { 0x004E, 0x0301 };
	static uint32_t latin_small_letter_n_with_acute [] = { 0x006E, 0x0301 };
	static uint32_t latin_capital_letter_n_with_cedilla [] = { 0x004E, 0x0327 };
	static uint32_t latin_small_letter_n_with_cedilla [] = { 0x006E, 0x0327 };
	static uint32_t latin_capital_letter_n_with_caron [] = { 0x004E, 0x030C };
	static uint32_t latin_small_letter_n_with_caron [] = { 0x006E, 0x030C };
	static uint32_t latin_small_letter_n_preceded_by_apostrophe [] = { 0x02BC, 0x006E };
	static uint32_t latin_capital_letter_o_with_macron [] = { 0x004F, 0x0304 };
	static uint32_t latin_small_letter_o_with_macron [] = { 0x006F, 0x0304 };
	static uint32_t latin_capital_letter_o_with_breve [] = { 0x004F, 0x0306 };
	static uint32_t latin_small_letter_o_with_breve [] = { 0x006F, 0x0306 };
	static uint32_t latin_capital_letter_o_with_double_acute [] = { 0x004F, 0x030B };
	static uint32_t latin_small_letter_o_with_double_acute [] = { 0x006F, 0x030B };
	static uint32_t latin_capital_letter_r_with_acute [] = { 0x0052, 0x0301 };
	static uint32_t latin_small_letter_r_with_acute [] = { 0x0072, 0x0301 };
	static uint32_t latin_capital_letter_r_with_cedilla [] = { 0x0052, 0x0327 };
	static uint32_t latin_small_letter_r_with_cedilla [] = { 0x0072, 0x0327 };
	static uint32_t latin_capital_letter_r_with_caron [] = { 0x0052, 0x030C };
	static uint32_t latin_small_letter_r_with_caron [] = { 0x0072, 0x030C };
	static uint32_t latin_capital_letter_s_with_acute [] = { 0x0053, 0x0301 };
	static uint32_t latin_small_letter_s_with_acute [] = { 0x0073, 0x0301 };
	static uint32_t latin_capital_letter_s_with_circumflex [] = { 0x0053, 0x0302 };
	static uint32_t latin_small_letter_s_with_circumflex [] = { 0x0073, 0x0302 };
	static uint32_t latin_capital_letter_s_with_cedilla [] = { 0x0053, 0x0327 };
	static uint32_t latin_small_letter_s_with_cedilla [] = { 0x0073, 0x0327 };
	static uint32_t latin_capital_letter_s_with_caron [] = { 0x0053, 0x030C };
	static uint32_t latin_small_letter_s_with_caron [] = { 0x0073, 0x030C };
	static uint32_t latin_capital_letter_t_with_cedilla [] = { 0x0054, 0x0327 };
	static uint32_t latin_small_letter_t_with_cedilla [] = { 0x0074, 0x0327 };
	static uint32_t latin_capital_letter_t_with_caron [] = { 0x0054, 0x030C };
	static uint32_t latin_small_letter_t_with_caron [] = { 0x0074, 0x030C };
	static uint32_t latin_capital_letter_u_with_tilde [] = { 0x0055, 0x0303 };
	static uint32_t latin_small_letter_u_with_tilde [] = { 0x0075, 0x0303 };
	static uint32_t latin_capital_letter_u_with_macron [] = { 0x0055, 0x0304 };
	static uint32_t latin_small_letter_u_with_macron [] = { 0x0075, 0x0304 };
	static uint32_t latin_capital_letter_u_with_breve [] = { 0x0055, 0x0306 };
	static uint32_t latin_small_letter_u_with_breve [] = { 0x0075, 0x0306 };
	static uint32_t latin_capital_letter_u_with_ring_above [] = { 0x0055, 0x030A };
	static uint32_t latin_small_letter_u_with_ring_above [] = { 0x0075, 0x030A };
	static uint32_t latin_capital_letter_u_with_double_acute [] = { 0x0055, 0x030B };
	static uint32_t latin_small_letter_u_with_double_acute [] = { 0x0075, 0x030B };
	static uint32_t latin_capital_letter_u_with_ogonek [] = { 0x0055, 0x0328 };
	static uint32_t latin_small_letter_u_with_ogonek [] = { 0x0075, 0x0328 };
	static uint32_t latin_capital_letter_w_with_circumflex [] = { 0x0057, 0x0302 };
	static uint32_t latin_small_letter_w_with_circumflex [] = { 0x0077, 0x0302 };
	static uint32_t latin_capital_letter_y_with_circumflex [] = { 0x0059, 0x0302 };
	static uint32_t latin_small_letter_y_with_circumflex [] = { 0x0079, 0x0302 };
	static uint32_t latin_capital_letter_y_with_diaeresis [] = { 0x0059, 0x0308 };
	static uint32_t latin_capital_letter_z_with_acute [] = { 0x005A, 0x0301 };
	static uint32_t latin_small_letter_z_with_acute [] = { 0x007A, 0x0301 };
	static uint32_t latin_capital_letter_z_with_dot_above [] = { 0x005A, 0x0307 };
	static uint32_t latin_small_letter_z_with_dot_above [] = { 0x007A, 0x0307 };
	static uint32_t latin_capital_letter_z_with_caron [] = { 0x005A, 0x030C };
	static uint32_t latin_small_letter_z_with_caron [] = { 0x007A, 0x030C };
	static uint32_t latin_small_letter_long_s [] = { 0x0073 };
	static uint32_t latin_capital_letter_o_with_horn [] = { 0x004F, 0x031B };
	static uint32_t latin_small_letter_o_with_horn [] = { 0x006F, 0x031B };
	static uint32_t latin_capital_letter_u_with_horn [] = { 0x0055, 0x031B };
	static uint32_t latin_small_letter_u_with_horn [] = { 0x0075, 0x031B };
	static uint32_t latin_capital_letter_dz_with_caron [] = { 0x0044, 0x017D };
	static uint32_t latin_capital_letter_d_with_small_letter_z_with_caron [] = { 0x0044, 0x017E };
	static uint32_t latin_small_letter_dz_with_caron [] = { 0x0064, 0x017E };
	static uint32_t latin_capital_letter_lj [] = { 0x004C, 0x004A };
	static uint32_t latin_capital_letter_l_with_small_letter_j [] = { 0x004C, 0x006A };
	static uint32_t latin_small_letter_lj [] = { 0x006C, 0x006A };
	static uint32_t latin_capital_letter_nj [] = { 0x004E, 0x004A };
	static uint32_t latin_capital_letter_n_with_small_letter_j [] = { 0x004E, 0x006A };
	static uint32_t latin_small_letter_nj [] = { 0x006E, 0x006A };
	static uint32_t latin_capital_letter_a_with_caron [] = { 0x0041, 0x030C };
	static uint32_t latin_small_letter_a_with_caron [] = { 0x0061, 0x030C };
	static uint32_t latin_capital_letter_i_with_caron [] = { 0x0049, 0x030C };
	static uint32_t latin_small_letter_i_with_caron [] = { 0x0069, 0x030C };
	static uint32_t latin_capital_letter_o_with_caron [] = { 0x004F, 0x030C };
	static uint32_t latin_small_letter_o_with_caron [] = { 0x006F, 0x030C };
	static uint32_t latin_capital_letter_u_with_caron [] = { 0x0055, 0x030C };
	static uint32_t latin_small_letter_u_with_caron [] = { 0x0075, 0x030C };
	static uint32_t latin_capital_letter_u_with_diaeresis_and_macron [] = { 0x00DC, 0x0304 };
	static uint32_t latin_small_letter_u_with_diaeresis_and_macron [] = { 0x00FC, 0x0304 };
	static uint32_t latin_capital_letter_u_with_diaeresis_and_acute [] = { 0x00DC, 0x0301 };
	static uint32_t latin_small_letter_u_with_diaeresis_and_acute [] = { 0x00FC, 0x0301 };
	static uint32_t latin_capital_letter_u_with_diaeresis_and_caron [] = { 0x00DC, 0x030C };
	static uint32_t latin_small_letter_u_with_diaeresis_and_caron [] = { 0x00FC, 0x030C };
	static uint32_t latin_capital_letter_u_with_diaeresis_and_grave [] = { 0x00DC, 0x0300 };
	static uint32_t latin_small_letter_u_with_diaeresis_and_grave [] = { 0x00FC, 0x0300 };
	static uint32_t latin_capital_letter_a_with_diaeresis_and_macron [] = { 0x00C4, 0x0304 };
	static uint32_t latin_small_letter_a_with_diaeresis_and_macron [] = { 0x00E4, 0x0304 };
	static uint32_t latin_capital_letter_a_with_dot_above_and_macron [] = { 0x0226, 0x0304 };
	static uint32_t latin_small_letter_a_with_dot_above_and_macron [] = { 0x0227, 0x0304 };
	static uint32_t latin_capital_letter_ae_with_macron [] = { 0x00C6, 0x0304 };
	static uint32_t latin_small_letter_ae_with_macron [] = { 0x00E6, 0x0304 };
	static uint32_t latin_capital_letter_g_with_caron [] = { 0x0047, 0x030C };
	static uint32_t latin_small_letter_g_with_caron [] = { 0x0067, 0x030C };
	static uint32_t latin_capital_letter_k_with_caron [] = { 0x004B, 0x030C };
	static uint32_t latin_small_letter_k_with_caron [] = { 0x006B, 0x030C };
	static uint32_t latin_capital_letter_o_with_ogonek [] = { 0x004F, 0x0328 };
	static uint32_t latin_small_letter_o_with_ogonek [] = { 0x006F, 0x0328 };
	static uint32_t latin_capital_letter_o_with_ogonek_and_macron [] = { 0x01EA, 0x0304 };
	static uint32_t latin_small_letter_o_with_ogonek_and_macron [] = { 0x01EB, 0x0304 };
	static uint32_t latin_capital_letter_ezh_with_caron [] = { 0x01B7, 0x030C };
	static uint32_t latin_small_letter_ezh_with_caron [] = { 0x0292, 0x030C };
	static uint32_t latin_small_letter_j_with_caron [] = { 0x006A, 0x030C };
	static uint32_t latin_capital_letter_dz [] = { 0x0044, 0x005A };
	static uint32_t latin_capital_letter_d_with_small_letter_z [] = { 0x0044, 0x007A };
	static uint32_t latin_small_letter_dz [] = { 0x0064, 0x007A };
	static uint32_t latin_capital_letter_g_with_acute [] = { 0x0047, 0x0301 };
	static uint32_t latin_small_letter_g_with_acute [] = { 0x0067, 0x0301 };
	static uint32_t latin_capital_letter_n_with_grave [] = { 0x004E, 0x0300 };
	static uint32_t latin_small_letter_n_with_grave [] = { 0x006E, 0x0300 };
	static uint32_t latin_capital_letter_a_with_ring_above_and_acute [] = { 0x00C5, 0x0301 };
	static uint32_t latin_small_letter_a_with_ring_above_and_acute [] = { 0x00E5, 0x0301 };
	static uint32_t latin_capital_letter_ae_with_acute [] = { 0x00C6, 0x0301 };
	static uint32_t latin_small_letter_ae_with_acute [] = { 0x00E6, 0x0301 };
	static uint32_t latin_capital_letter_o_with_stroke_and_acute [] = { 0x00D8, 0x0301 };
	static uint32_t latin_small_letter_o_with_stroke_and_acute [] = { 0x00F8, 0x0301 };
	static uint32_t latin_capital_letter_a_with_double_grave [] = { 0x0041, 0x030F };
	static uint32_t latin_small_letter_a_with_double_grave [] = { 0x0061, 0x030F };
	static uint32_t latin_capital_letter_a_with_inverted_breve [] = { 0x0041, 0x0311 };
	static uint32_t latin_small_letter_a_with_inverted_breve [] = { 0x0061, 0x0311 };
	static uint32_t latin_capital_letter_e_with_double_grave [] = { 0x0045, 0x030F };
	static uint32_t latin_small_letter_e_with_double_grave [] = { 0x0065, 0x030F };
	static uint32_t latin_capital_letter_e_with_inverted_breve [] = { 0x0045, 0x0311 };
	static uint32_t latin_small_letter_e_with_inverted_breve [] = { 0x0065, 0x0311 };
	static uint32_t latin_capital_letter_i_with_double_grave [] = { 0x0049, 0x030F };
	static uint32_t latin_small_letter_i_with_double_grave [] = { 0x0069, 0x030F };
	static uint32_t latin_capital_letter_i_with_inverted_breve [] = { 0x0049, 0x0311 };
	static uint32_t latin_small_letter_i_with_inverted_breve [] = { 0x0069, 0x0311 };
	static uint32_t latin_capital_letter_o_with_double_grave [] = { 0x004F, 0x030F };
	static uint32_t latin_small_letter_o_with_double_grave [] = { 0x006F, 0x030F };
	static uint32_t latin_capital_letter_o_with_inverted_breve [] = { 0x004F, 0x0311 };
	static uint32_t latin_small_letter_o_with_inverted_breve [] = { 0x006F, 0x0311 };
	static uint32_t latin_capital_letter_r_with_double_grave [] = { 0x0052, 0x030F };
	static uint32_t latin_small_letter_r_with_double_grave [] = { 0x0072, 0x030F };
	static uint32_t latin_capital_letter_r_with_inverted_breve [] = { 0x0052, 0x0311 };
	static uint32_t latin_small_letter_r_with_inverted_breve [] = { 0x0072, 0x0311 };
	static uint32_t latin_capital_letter_u_with_double_grave [] = { 0x0055, 0x030F };
	static uint32_t latin_small_letter_u_with_double_grave [] = { 0x0075, 0x030F };
	static uint32_t latin_capital_letter_u_with_inverted_breve [] = { 0x0055, 0x0311 };
	static uint32_t latin_small_letter_u_with_inverted_breve [] = { 0x0075, 0x0311 };
	static uint32_t latin_capital_letter_s_with_comma_below [] = { 0x0053, 0x0326 };
	static uint32_t latin_small_letter_s_with_comma_below [] = { 0x0073, 0x0326 };
	static uint32_t latin_capital_letter_t_with_comma_below [] = { 0x0054, 0x0326 };
	static uint32_t latin_small_letter_t_with_comma_below [] = { 0x0074, 0x0326 };
	static uint32_t latin_capital_letter_h_with_caron [] = { 0x0048, 0x030C };
	static uint32_t latin_small_letter_h_with_caron [] = { 0x0068, 0x030C };
	static uint32_t latin_capital_letter_a_with_dot_above [] = { 0x0041, 0x0307 };
	static uint32_t latin_small_letter_a_with_dot_above [] = { 0x0061, 0x0307 };
	static uint32_t latin_capital_letter_e_with_cedilla [] = { 0x0045, 0x0327 };
	static uint32_t latin_small_letter_e_with_cedilla [] = { 0x0065, 0x0327 };
	static uint32_t latin_capital_letter_o_with_diaeresis_and_macron [] = { 0x00D6, 0x0304 };
	static uint32_t latin_small_letter_o_with_diaeresis_and_macron [] = { 0x00F6, 0x0304 };
	static uint32_t latin_capital_letter_o_with_tilde_and_macron [] = { 0x00D5, 0x0304 };
	static uint32_t latin_small_letter_o_with_tilde_and_macron [] = { 0x00F5, 0x0304 };
	static uint32_t latin_capital_letter_o_with_dot_above [] = { 0x004F, 0x0307 };
	static uint32_t latin_small_letter_o_with_dot_above [] = { 0x006F, 0x0307 };
	static uint32_t latin_capital_letter_o_with_dot_above_and_macron [] = { 0x022E, 0x0304 };
	static uint32_t latin_small_letter_o_with_dot_above_and_macron [] = { 0x022F, 0x0304 };
	static uint32_t latin_capital_letter_y_with_macron [] = { 0x0059, 0x0304 };
	static uint32_t latin_small_letter_y_with_macron [] = { 0x0079, 0x0304 };
	static uint32_t modifier_letter_small_h [] = { 0x0068 };
	static uint32_t modifier_letter_small_h_with_hook [] = { 0x0266 };
	static uint32_t modifier_letter_small_j [] = { 0x006A };
	static uint32_t modifier_letter_small_r [] = { 0x0072 };
	static uint32_t modifier_letter_small_turned_r [] = { 0x0279 };
	static uint32_t modifier_letter_small_turned_r_with_hook [] = { 0x027B };
	static uint32_t modifier_letter_small_capital_inverted_r [] = { 0x0281 };
	static uint32_t modifier_letter_small_w [] = { 0x0077 };
	static uint32_t modifier_letter_small_y [] = { 0x0079 };
	static uint32_t breve [] = { 0x0020, 0x0306 };
	static uint32_t dot_above [] = { 0x0020, 0x0307 };
	static uint32_t ring_above [] = { 0x0020, 0x030A };
	static uint32_t ogonek [] = { 0x0020, 0x0328 };
	static uint32_t small_tilde [] = { 0x0020, 0x0303 };
	static uint32_t double_acute_accent [] = { 0x0020, 0x030B };
	static uint32_t modifier_letter_small_gamma [] = { 0x0263 };
	static uint32_t modifier_letter_small_l [] = { 0x006C };
	static uint32_t modifier_letter_small_s [] = { 0x0073 };
	static uint32_t modifier_letter_small_x [] = { 0x0078 };
	static uint32_t modifier_letter_small_reversed_glottal_stop [] = { 0x0295 };
	static uint32_t combining_grave_tone_mark [] = { 0x0300 };
	static uint32_t combining_acute_tone_mark [] = { 0x0301 };
	static uint32_t combining_greek_koronis [] = { 0x0313 };
	static uint32_t combining_greek_dialytika_tonos [] = { 0x0308, 0x0301 };
	static uint32_t greek_numeral_sign [] = { 0x02B9 };
	static uint32_t greek_ypogegrammeni [] = { 0x0020, 0x0345 };
	static uint32_t greek_question_mark [] = { 0x003B };
	static uint32_t greek_tonos [] = { 0x0020, 0x0301 };
	static uint32_t greek_dialytika_tonos [] = { 0x00A8, 0x0301 };
	static uint32_t greek_capital_letter_alpha_with_tonos [] = { 0x0391, 0x0301 };
	static uint32_t greek_ano_teleia [] = { 0x00B7 };
	static uint32_t greek_capital_letter_epsilon_with_tonos [] = { 0x0395, 0x0301 };
	static uint32_t greek_capital_letter_eta_with_tonos [] = { 0x0397, 0x0301 };
	static uint32_t greek_capital_letter_iota_with_tonos [] = { 0x0399, 0x0301 };
	static uint32_t greek_capital_letter_omicron_with_tonos [] = { 0x039F, 0x0301 };
	static uint32_t greek_capital_letter_upsilon_with_tonos [] = { 0x03A5, 0x0301 };
	static uint32_t greek_capital_letter_omega_with_tonos [] = { 0x03A9, 0x0301 };
	static uint32_t greek_small_letter_iota_with_dialytika_and_tonos [] = { 0x03CA, 0x0301 };
	static uint32_t greek_capital_letter_iota_with_dialytika [] = { 0x0399, 0x0308 };
	static uint32_t greek_capital_letter_upsilon_with_dialytika [] = { 0x03A5, 0x0308 };
	static uint32_t greek_small_letter_alpha_with_tonos [] = { 0x03B1, 0x0301 };
	static uint32_t greek_small_letter_epsilon_with_tonos [] = { 0x03B5, 0x0301 };
	static uint32_t greek_small_letter_eta_with_tonos [] = { 0x03B7, 0x0301 };
	static uint32_t greek_small_letter_iota_with_tonos [] = { 0x03B9, 0x0301 };
	static uint32_t greek_small_letter_upsilon_with_dialytika_and_tonos [] = { 0x03CB, 0x0301 };
	static uint32_t greek_small_letter_iota_with_dialytika [] = { 0x03B9, 0x0308 };
	static uint32_t greek_small_letter_upsilon_with_dialytika [] = { 0x03C5, 0x0308 };
	static uint32_t greek_small_letter_omicron_with_tonos [] = { 0x03BF, 0x0301 };
	static uint32_t greek_small_letter_upsilon_with_tonos [] = { 0x03C5, 0x0301 };
	static uint32_t greek_small_letter_omega_with_tonos [] = { 0x03C9, 0x0301 };
	static uint32_t greek_beta_symbol [] = { 0x03B2 };
	static uint32_t greek_theta_symbol [] = { 0x03B8 };
	static uint32_t greek_upsilon_with_hook_symbol [] = { 0x03A5 };
	static uint32_t greek_upsilon_with_acute_and_hook_symbol [] = { 0x03D2, 0x0301 };
	static uint32_t greek_upsilon_with_diaeresis_and_hook_symbol [] = { 0x03D2, 0x0308 };
	static uint32_t greek_phi_symbol [] = { 0x03C6 };
	static uint32_t greek_pi_symbol [] = { 0x03C0 };
	static uint32_t greek_kappa_symbol [] = { 0x03BA };
	static uint32_t greek_rho_symbol [] = { 0x03C1 };
	static uint32_t greek_lunate_sigma_symbol [] = { 0x03C2 };
	static uint32_t greek_capital_theta_symbol [] = { 0x0398 };
	static uint32_t greek_lunate_epsilon_symbol [] = { 0x03B5 };
	static uint32_t greek_capital_lunate_sigma_symbol [] = { 0x03A3 };
	static uint32_t cyrillic_capital_letter_ie_with_grave [] = { 0x0415, 0x0300 };
	static uint32_t cyrillic_capital_letter_io [] = { 0x0415, 0x0308 };
	static uint32_t cyrillic_capital_letter_gje [] = { 0x0413, 0x0301 };
	static uint32_t cyrillic_capital_letter_yi [] = { 0x0406, 0x0308 };
	static uint32_t cyrillic_capital_letter_kje [] = { 0x041A, 0x0301 };
	static uint32_t cyrillic_capital_letter_i_with_grave [] = { 0x0418, 0x0300 };
	static uint32_t cyrillic_capital_letter_short_u [] = { 0x0423, 0x0306 };
	static uint32_t cyrillic_capital_letter_short_i [] = { 0x0418, 0x0306 };
	static uint32_t cyrillic_small_letter_short_i [] = { 0x0438, 0x0306 };
	static uint32_t cyrillic_small_letter_ie_with_grave [] = { 0x0435, 0x0300 };
	static uint32_t cyrillic_small_letter_io [] = { 0x0435, 0x0308 };
	static uint32_t cyrillic_small_letter_gje [] = { 0x0433, 0x0301 };
	static uint32_t cyrillic_small_letter_yi [] = { 0x0456, 0x0308 };
	static uint32_t cyrillic_small_letter_kje [] = { 0x043A, 0x0301 };
	static uint32_t cyrillic_small_letter_i_with_grave [] = { 0x0438, 0x0300 };
	static uint32_t cyrillic_small_letter_short_u [] = { 0x0443, 0x0306 };
	static uint32_t cyrillic_capital_letter_izhitsa_with_double_grave_accent [] = { 0x0474, 0x030F };
	static uint32_t cyrillic_small_letter_izhitsa_with_double_grave_accent [] = { 0x0475, 0x030F };
	static uint32_t cyrillic_capital_letter_zhe_with_breve [] = { 0x0416, 0x0306 };
	static uint32_t cyrillic_small_letter_zhe_with_breve [] = { 0x0436, 0x0306 };
	static uint32_t cyrillic_capital_letter_a_with_breve [] = { 0x0410, 0x0306 };
	static uint32_t cyrillic_small_letter_a_with_breve [] = { 0x0430, 0x0306 };
	static uint32_t cyrillic_capital_letter_a_with_diaeresis [] = { 0x0410, 0x0308 };
	static uint32_t cyrillic_small_letter_a_with_diaeresis [] = { 0x0430, 0x0308 };
	static uint32_t cyrillic_capital_letter_ie_with_breve [] = { 0x0415, 0x0306 };
	static uint32_t cyrillic_small_letter_ie_with_breve [] = { 0x0435, 0x0306 };
	static uint32_t cyrillic_capital_letter_schwa_with_diaeresis [] = { 0x04D8, 0x0308 };
	static uint32_t cyrillic_small_letter_schwa_with_diaeresis [] = { 0x04D9, 0x0308 };
	static uint32_t cyrillic_capital_letter_zhe_with_diaeresis [] = { 0x0416, 0x0308 };
	static uint32_t cyrillic_small_letter_zhe_with_diaeresis [] = { 0x0436, 0x0308 };
	static uint32_t cyrillic_capital_letter_ze_with_diaeresis [] = { 0x0417, 0x0308 };
	static uint32_t cyrillic_small_letter_ze_with_diaeresis [] = { 0x0437, 0x0308 };
	static uint32_t cyrillic_capital_letter_i_with_macron [] = { 0x0418, 0x0304 };
	static uint32_t cyrillic_small_letter_i_with_macron [] = { 0x0438, 0x0304 };
	static uint32_t cyrillic_capital_letter_i_with_diaeresis [] = { 0x0418, 0x0308 };
	static uint32_t cyrillic_small_letter_i_with_diaeresis [] = { 0x0438, 0x0308 };
	static uint32_t cyrillic_capital_letter_o_with_diaeresis [] = { 0x041E, 0x0308 };
	static uint32_t cyrillic_small_letter_o_with_diaeresis [] = { 0x043E, 0x0308 };
	static uint32_t cyrillic_capital_letter_barred_o_with_diaeresis [] = { 0x04E8, 0x0308 };
	static uint32_t cyrillic_small_letter_barred_o_with_diaeresis [] = { 0x04E9, 0x0308 };
	static uint32_t cyrillic_capital_letter_e_with_diaeresis [] = { 0x042D, 0x0308 };
	static uint32_t cyrillic_small_letter_e_with_diaeresis [] = { 0x044D, 0x0308 };
	static uint32_t cyrillic_capital_letter_u_with_macron [] = { 0x0423, 0x0304 };
	static uint32_t cyrillic_small_letter_u_with_macron [] = { 0x0443, 0x0304 };
	static uint32_t cyrillic_capital_letter_u_with_diaeresis [] = { 0x0423, 0x0308 };
	static uint32_t cyrillic_small_letter_u_with_diaeresis [] = { 0x0443, 0x0308 };
	static uint32_t cyrillic_capital_letter_u_with_double_acute [] = { 0x0423, 0x030B };
	static uint32_t cyrillic_small_letter_u_with_double_acute [] = { 0x0443, 0x030B };
	static uint32_t cyrillic_capital_letter_che_with_diaeresis [] = { 0x0427, 0x0308 };
	static uint32_t cyrillic_small_letter_che_with_diaeresis [] = { 0x0447, 0x0308 };
	static uint32_t cyrillic_capital_letter_yeru_with_diaeresis [] = { 0x042B, 0x0308 };
	static uint32_t cyrillic_small_letter_yeru_with_diaeresis [] = { 0x044B, 0x0308 };
	static uint32_t armenian_small_ligature_ech_yiwn [] = { 0x0565, 0x0582 };
	static uint32_t arabic_letter_alef_with_madda_above [] = { 0x0627, 0x0653 };
	static uint32_t arabic_letter_alef_with_hamza_above [] = { 0x0627, 0x0654 };
	static uint32_t arabic_letter_waw_with_hamza_above [] = { 0x0648, 0x0654 };
	static uint32_t arabic_letter_alef_with_hamza_below [] = { 0x0627, 0x0655 };
	static uint32_t arabic_letter_yeh_with_hamza_above [] = { 0x064A, 0x0654 };
	static uint32_t arabic_letter_high_hamza_alef [] = { 0x0627, 0x0674 };
	static uint32_t arabic_letter_high_hamza_waw [] = { 0x0648, 0x0674 };
	static uint32_t arabic_letter_u_with_hamza_above [] = { 0x06C7, 0x0674 };
	static uint32_t arabic_letter_high_hamza_yeh [] = { 0x064A, 0x0674 };
	static uint32_t arabic_letter_heh_with_yeh_above [] = { 0x06D5, 0x0654 };
	static uint32_t arabic_letter_heh_goal_with_hamza_above [] = { 0x06C1, 0x0654 };
	static uint32_t arabic_letter_yeh_barree_with_hamza_above [] = { 0x06D2, 0x0654 };
	static uint32_t devanagari_letter_nnna [] = { 0x0928, 0x093C };
	static uint32_t devanagari_letter_rra [] = { 0x0930, 0x093C };
	static uint32_t devanagari_letter_llla [] = { 0x0933, 0x093C };
	static uint32_t devanagari_letter_qa [] = { 0x0915, 0x093C };
	static uint32_t devanagari_letter_khha [] = { 0x0916, 0x093C };
	static uint32_t devanagari_letter_ghha [] = { 0x0917, 0x093C };
	static uint32_t devanagari_letter_za [] = { 0x091C, 0x093C };
	static uint32_t devanagari_letter_dddha [] = { 0x0921, 0x093C };
	static uint32_t devanagari_letter_rha [] = { 0x0922, 0x093C };
	static uint32_t devanagari_letter_fa [] = { 0x092B, 0x093C };
	static uint32_t devanagari_letter_yya [] = { 0x092F, 0x093C };
	static uint32_t bengali_vowel_sign_o [] = { 0x09C7, 0x09BE };
	static uint32_t bengali_vowel_sign_au [] = { 0x09C7, 0x09D7 };
	static uint32_t bengali_letter_rra [] = { 0x09A1, 0x09BC };
	static uint32_t bengali_letter_rha [] = { 0x09A2, 0x09BC };
	static uint32_t bengali_letter_yya [] = { 0x09AF, 0x09BC };
	static uint32_t gurmukhi_letter_lla [] = { 0x0A32, 0x0A3C };
	static uint32_t gurmukhi_letter_sha [] = { 0x0A38, 0x0A3C };
	static uint32_t gurmukhi_letter_khha [] = { 0x0A16, 0x0A3C };
	static uint32_t gurmukhi_letter_ghha [] = { 0x0A17, 0x0A3C };
	static uint32_t gurmukhi_letter_za [] = { 0x0A1C, 0x0A3C };
	static uint32_t gurmukhi_letter_fa [] = { 0x0A2B, 0x0A3C };
	static uint32_t oriya_vowel_sign_ai [] = { 0x0B47, 0x0B56 };
	static uint32_t oriya_vowel_sign_o [] = { 0x0B47, 0x0B3E };
	static uint32_t oriya_vowel_sign_au [] = { 0x0B47, 0x0B57 };
	static uint32_t oriya_letter_rra [] = { 0x0B21, 0x0B3C };
	static uint32_t oriya_letter_rha [] = { 0x0B22, 0x0B3C };
	static uint32_t tamil_letter_au [] = { 0x0B92, 0x0BD7 };
	static uint32_t tamil_vowel_sign_o [] = { 0x0BC6, 0x0BBE };
	static uint32_t tamil_vowel_sign_oo [] = { 0x0BC7, 0x0BBE };
	static uint32_t tamil_vowel_sign_au [] = { 0x0BC6, 0x0BD7 };
	static uint32_t telugu_vowel_sign_ai [] = { 0x0C46, 0x0C56 };
	static uint32_t kannada_vowel_sign_ii [] = { 0x0CBF, 0x0CD5 };
	static uint32_t kannada_vowel_sign_ee [] = { 0x0CC6, 0x0CD5 };
	static uint32_t kannada_vowel_sign_ai [] = { 0x0CC6, 0x0CD6 };
	static uint32_t kannada_vowel_sign_o [] = { 0x0CC6, 0x0CC2 };
	static uint32_t kannada_vowel_sign_oo [] = { 0x0CCA, 0x0CD5 };
	static uint32_t malayalam_vowel_sign_o [] = { 0x0D46, 0x0D3E };
	static uint32_t malayalam_vowel_sign_oo [] = { 0x0D47, 0x0D3E };
	static uint32_t malayalam_vowel_sign_au [] = { 0x0D46, 0x0D57 };
	static uint32_t sinhala_vowel_sign_diga_kombuva [] = { 0x0DD9, 0x0DCA };
	static uint32_t sinhala_vowel_sign_kombuva_haa_aela_pilla [] = { 0x0DD9, 0x0DCF };
	static uint32_t sinhala_vowel_sign_kombuva_haa_diga_aela_pilla [] = { 0x0DDC, 0x0DCA };
	static uint32_t sinhala_vowel_sign_kombuva_haa_gayanukitta [] = { 0x0DD9, 0x0DDF };
	static uint32_t thai_character_sara_am [] = { 0x0E4D, 0x0E32 };
	static uint32_t lao_vowel_sign_am [] = { 0x0ECD, 0x0EB2 };
	static uint32_t lao_ho_no [] = { 0x0EAB, 0x0E99 };
	static uint32_t lao_ho_mo [] = { 0x0EAB, 0x0EA1 };
	static uint32_t tibetan_mark_delimiter_tsheg_bstar [] = { 0x0F0B };
	static uint32_t tibetan_letter_gha [] = { 0x0F42, 0x0FB7 };
	static uint32_t tibetan_letter_ddha [] = { 0x0F4C, 0x0FB7 };
	static uint32_t tibetan_letter_dha [] = { 0x0F51, 0x0FB7 };
	static uint32_t tibetan_letter_bha [] = { 0x0F56, 0x0FB7 };
	static uint32_t tibetan_letter_dzha [] = { 0x0F5B, 0x0FB7 };
	static uint32_t tibetan_letter_kssa [] = { 0x0F40, 0x0FB5 };
	static uint32_t tibetan_vowel_sign_ii [] = { 0x0F71, 0x0F72 };
	static uint32_t tibetan_vowel_sign_uu [] = { 0x0F71, 0x0F74 };
	static uint32_t tibetan_vowel_sign_vocalic_r [] = { 0x0FB2, 0x0F80 };
	static uint32_t tibetan_vowel_sign_vocalic_rr [] = { 0x0FB2, 0x0F81 };
	static uint32_t tibetan_vowel_sign_vocalic_l [] = { 0x0FB3, 0x0F80 };
	static uint32_t tibetan_vowel_sign_vocalic_ll [] = { 0x0FB3, 0x0F81 };
	static uint32_t tibetan_vowel_sign_reversed_ii [] = { 0x0F71, 0x0F80 };
	static uint32_t tibetan_subjoined_letter_gha [] = { 0x0F92, 0x0FB7 };
	static uint32_t tibetan_subjoined_letter_ddha [] = { 0x0F9C, 0x0FB7 };
	static uint32_t tibetan_subjoined_letter_dha [] = { 0x0FA1, 0x0FB7 };
	static uint32_t tibetan_subjoined_letter_bha [] = { 0x0FA6, 0x0FB7 };
	static uint32_t tibetan_subjoined_letter_dzha [] = { 0x0FAB, 0x0FB7 };
	static uint32_t tibetan_subjoined_letter_kssa [] = { 0x0F90, 0x0FB5 };
	static uint32_t myanmar_letter_uu [] = { 0x1025, 0x102E };
	static uint32_t modifier_letter_georgian_nar [] = { 0x10DC };
	static uint32_t balinese_letter_akara_tedung [] = { 0x1B05, 0x1B35 };
	static uint32_t balinese_letter_ikara_tedung [] = { 0x1B07, 0x1B35 };
	static uint32_t balinese_letter_ukara_tedung [] = { 0x1B09, 0x1B35 };
	static uint32_t balinese_letter_ra_repa_tedung [] = { 0x1B0B, 0x1B35 };
	static uint32_t balinese_letter_la_lenga_tedung [] = { 0x1B0D, 0x1B35 };
	static uint32_t balinese_letter_okara_tedung [] = { 0x1B11, 0x1B35 };
	static uint32_t balinese_vowel_sign_ra_repa_tedung [] = { 0x1B3A, 0x1B35 };
	static uint32_t balinese_vowel_sign_la_lenga_tedung [] = { 0x1B3C, 0x1B35 };
	static uint32_t balinese_vowel_sign_taling_tedung [] = { 0x1B3E, 0x1B35 };
	static uint32_t balinese_vowel_sign_taling_repa_tedung [] = { 0x1B3F, 0x1B35 };
	static uint32_t balinese_vowel_sign_pepet_tedung [] = { 0x1B42, 0x1B35 };
	static uint32_t modifier_letter_capital_a [] = { 0x0041 };
	static uint32_t modifier_letter_capital_ae [] = { 0x00C6 };
	static uint32_t modifier_letter_capital_b [] = { 0x0042 };
	static uint32_t modifier_letter_capital_d [] = { 0x0044 };
	static uint32_t modifier_letter_capital_e [] = { 0x0045 };
	static uint32_t modifier_letter_capital_reversed_e [] = { 0x018E };
	static uint32_t modifier_letter_capital_g [] = { 0x0047 };
	static uint32_t modifier_letter_capital_h [] = { 0x0048 };
	static uint32_t modifier_letter_capital_i [] = { 0x0049 };
	static uint32_t modifier_letter_capital_j [] = { 0x004A };
	static uint32_t modifier_letter_capital_k [] = { 0x004B };
	static uint32_t modifier_letter_capital_l [] = { 0x004C };
	static uint32_t modifier_letter_capital_m [] = { 0x004D };
	static uint32_t modifier_letter_capital_n [] = { 0x004E };
	static uint32_t modifier_letter_capital_o [] = { 0x004F };
	static uint32_t modifier_letter_capital_ou [] = { 0x0222 };
	static uint32_t modifier_letter_capital_p [] = { 0x0050 };
	static uint32_t modifier_letter_capital_r [] = { 0x0052 };
	static uint32_t modifier_letter_capital_t [] = { 0x0054 };
	static uint32_t modifier_letter_capital_u [] = { 0x0055 };
	static uint32_t modifier_letter_capital_w [] = { 0x0057 };
	static uint32_t modifier_letter_small_a [] = { 0x0061 };
	static uint32_t modifier_letter_small_turned_a [] = { 0x0250 };
	static uint32_t modifier_letter_small_alpha [] = { 0x0251 };
	static uint32_t modifier_letter_small_turned_ae [] = { 0x1D02 };
	static uint32_t modifier_letter_small_b [] = { 0x0062 };
	static uint32_t modifier_letter_small_d [] = { 0x0064 };
	static uint32_t modifier_letter_small_e [] = { 0x0065 };
	static uint32_t modifier_letter_small_schwa [] = { 0x0259 };
	static uint32_t modifier_letter_small_open_e [] = { 0x025B };
	static uint32_t modifier_letter_small_turned_open_e [] = { 0x025C };
	static uint32_t modifier_letter_small_g [] = { 0x0067 };
	static uint32_t modifier_letter_small_k [] = { 0x006B };
	static uint32_t modifier_letter_small_m [] = { 0x006D };
	static uint32_t modifier_letter_small_eng [] = { 0x014B };
	static uint32_t modifier_letter_small_o [] = { 0x006F };
	static uint32_t modifier_letter_small_open_o [] = { 0x0254 };
	static uint32_t modifier_letter_small_top_half_o [] = { 0x1D16 };
	static uint32_t modifier_letter_small_bottom_half_o [] = { 0x1D17 };
	static uint32_t modifier_letter_small_p [] = { 0x0070 };
	static uint32_t modifier_letter_small_t [] = { 0x0074 };
	static uint32_t modifier_letter_small_u [] = { 0x0075 };
	static uint32_t modifier_letter_small_sideways_u [] = { 0x1D1D };
	static uint32_t modifier_letter_small_turned_m [] = { 0x026F };
	static uint32_t modifier_letter_small_v [] = { 0x0076 };
	static uint32_t modifier_letter_small_ain [] = { 0x1D25 };
	static uint32_t modifier_letter_small_beta [] = { 0x03B2 };
	static uint32_t modifier_letter_small_greek_gamma [] = { 0x03B3 };
	static uint32_t modifier_letter_small_delta [] = { 0x03B4 };
	static uint32_t modifier_letter_small_greek_phi [] = { 0x03C6 };
	static uint32_t modifier_letter_small_chi [] = { 0x03C7 };
	static uint32_t latin_subscript_small_letter_i [] = { 0x0069 };
	static uint32_t latin_subscript_small_letter_r [] = { 0x0072 };
	static uint32_t latin_subscript_small_letter_u [] = { 0x0075 };
	static uint32_t latin_subscript_small_letter_v [] = { 0x0076 };
	static uint32_t greek_subscript_small_letter_beta [] = { 0x03B2 };
	static uint32_t greek_subscript_small_letter_gamma [] = { 0x03B3 };
	static uint32_t greek_subscript_small_letter_rho [] = { 0x03C1 };
	static uint32_t greek_subscript_small_letter_phi [] = { 0x03C6 };
	static uint32_t greek_subscript_small_letter_chi [] = { 0x03C7 };
	static uint32_t modifier_letter_cyrillic_en [] = { 0x043D };
	static uint32_t modifier_letter_small_turned_alpha [] = { 0x0252 };
	static uint32_t modifier_letter_small_c [] = { 0x0063 };
	static uint32_t modifier_letter_small_c_with_curl [] = { 0x0255 };
	static uint32_t modifier_letter_small_eth [] = { 0x00F0 };
	static uint32_t modifier_letter_small_reversed_open_e [] = { 0x025C };
	static uint32_t modifier_letter_small_f [] = { 0x0066 };
	static uint32_t modifier_letter_small_dotless_j_with_stroke [] = { 0x025F };
	static uint32_t modifier_letter_small_script_g [] = { 0x0261 };
	static uint32_t modifier_letter_small_turned_h [] = { 0x0265 };
	static uint32_t modifier_letter_small_i_with_stroke [] = { 0x0268 };
	static uint32_t modifier_letter_small_iota [] = { 0x0269 };
	static uint32_t modifier_letter_small_capital_i [] = { 0x026A };
	static uint32_t modifier_letter_small_capital_i_with_stroke [] = { 0x1D7B };
	static uint32_t modifier_letter_small_j_with_crossed_tail [] = { 0x029D };
	static uint32_t modifier_letter_small_l_with_retroflex_hook [] = { 0x026D };
	static uint32_t modifier_letter_small_l_with_palatal_hook [] = { 0x1D85 };
	static uint32_t modifier_letter_small_capital_l [] = { 0x029F };
	static uint32_t modifier_letter_small_m_with_hook [] = { 0x0271 };
	static uint32_t modifier_letter_small_turned_m_with_long_leg [] = { 0x0270 };
	static uint32_t modifier_letter_small_n_with_left_hook [] = { 0x0272 };
	static uint32_t modifier_letter_small_n_with_retroflex_hook [] = { 0x0273 };
	static uint32_t modifier_letter_small_capital_n [] = { 0x0274 };
	static uint32_t modifier_letter_small_barred_o [] = { 0x0275 };
	static uint32_t modifier_letter_small_phi [] = { 0x0278 };
	static uint32_t modifier_letter_small_s_with_hook [] = { 0x0282 };
	static uint32_t modifier_letter_small_esh [] = { 0x0283 };
	static uint32_t modifier_letter_small_t_with_palatal_hook [] = { 0x01AB };
	static uint32_t modifier_letter_small_u_bar [] = { 0x0289 };
	static uint32_t modifier_letter_small_upsilon [] = { 0x028A };
	static uint32_t modifier_letter_small_capital_u [] = { 0x1D1C };
	static uint32_t modifier_letter_small_v_with_hook [] = { 0x028B };
	static uint32_t modifier_letter_small_turned_v [] = { 0x028C };
	static uint32_t modifier_letter_small_z [] = { 0x007A };
	static uint32_t modifier_letter_small_z_with_retroflex_hook [] = { 0x0290 };
	static uint32_t modifier_letter_small_z_with_curl [] = { 0x0291 };
	static uint32_t modifier_letter_small_ezh [] = { 0x0292 };
	static uint32_t modifier_letter_small_theta [] = { 0x03B8 };
	static uint32_t latin_capital_letter_a_with_ring_below [] = { 0x0041, 0x0325 };
	static uint32_t latin_small_letter_a_with_ring_below [] = { 0x0061, 0x0325 };
	static uint32_t latin_capital_letter_b_with_dot_above [] = { 0x0042, 0x0307 };
	static uint32_t latin_small_letter_b_with_dot_above [] = { 0x0062, 0x0307 };
	static uint32_t latin_capital_letter_b_with_dot_below [] = { 0x0042, 0x0323 };
	static uint32_t latin_small_letter_b_with_dot_below [] = { 0x0062, 0x0323 };
	static uint32_t latin_capital_letter_b_with_line_below [] = { 0x0042, 0x0331 };
	static uint32_t latin_small_letter_b_with_line_below [] = { 0x0062, 0x0331 };
	static uint32_t latin_capital_letter_c_with_cedilla_and_acute [] = { 0x00C7, 0x0301 };
	static uint32_t latin_small_letter_c_with_cedilla_and_acute [] = { 0x00E7, 0x0301 };
	static uint32_t latin_capital_letter_d_with_dot_above [] = { 0x0044, 0x0307 };
	static uint32_t latin_small_letter_d_with_dot_above [] = { 0x0064, 0x0307 };
	static uint32_t latin_capital_letter_d_with_dot_below [] = { 0x0044, 0x0323 };
	static uint32_t latin_small_letter_d_with_dot_below [] = { 0x0064, 0x0323 };
	static uint32_t latin_capital_letter_d_with_line_below [] = { 0x0044, 0x0331 };
	static uint32_t latin_small_letter_d_with_line_below [] = { 0x0064, 0x0331 };
	static uint32_t latin_capital_letter_d_with_cedilla [] = { 0x0044, 0x0327 };
	static uint32_t latin_small_letter_d_with_cedilla [] = { 0x0064, 0x0327 };
	static uint32_t latin_capital_letter_d_with_circumflex_below [] = { 0x0044, 0x032D };
	static uint32_t latin_small_letter_d_with_circumflex_below [] = { 0x0064, 0x032D };
	static uint32_t latin_capital_letter_e_with_macron_and_grave [] = { 0x0112, 0x0300 };
	static uint32_t latin_small_letter_e_with_macron_and_grave [] = { 0x0113, 0x0300 };
	static uint32_t latin_capital_letter_e_with_macron_and_acute [] = { 0x0112, 0x0301 };
	static uint32_t latin_small_letter_e_with_macron_and_acute [] = { 0x0113, 0x0301 };
	static uint32_t latin_capital_letter_e_with_circumflex_below [] = { 0x0045, 0x032D };
	static uint32_t latin_small_letter_e_with_circumflex_below [] = { 0x0065, 0x032D };
	static uint32_t latin_capital_letter_e_with_tilde_below [] = { 0x0045, 0x0330 };
	static uint32_t latin_small_letter_e_with_tilde_below [] = { 0x0065, 0x0330 };
	static uint32_t latin_capital_letter_e_with_cedilla_and_breve [] = { 0x0228, 0x0306 };
	static uint32_t latin_small_letter_e_with_cedilla_and_breve [] = { 0x0229, 0x0306 };
	static uint32_t latin_capital_letter_f_with_dot_above [] = { 0x0046, 0x0307 };
	static uint32_t latin_small_letter_f_with_dot_above [] = { 0x0066, 0x0307 };
	static uint32_t latin_capital_letter_g_with_macron [] = { 0x0047, 0x0304 };
	static uint32_t latin_small_letter_g_with_macron [] = { 0x0067, 0x0304 };
	static uint32_t latin_capital_letter_h_with_dot_above [] = { 0x0048, 0x0307 };
	static uint32_t latin_small_letter_h_with_dot_above [] = { 0x0068, 0x0307 };
	static uint32_t latin_capital_letter_h_with_dot_below [] = { 0x0048, 0x0323 };
	static uint32_t latin_small_letter_h_with_dot_below [] = { 0x0068, 0x0323 };
	static uint32_t latin_capital_letter_h_with_diaeresis [] = { 0x0048, 0x0308 };
	static uint32_t latin_small_letter_h_with_diaeresis [] = { 0x0068, 0x0308 };
	static uint32_t latin_capital_letter_h_with_cedilla [] = { 0x0048, 0x0327 };
	static uint32_t latin_small_letter_h_with_cedilla [] = { 0x0068, 0x0327 };
	static uint32_t latin_capital_letter_h_with_breve_below [] = { 0x0048, 0x032E };
	static uint32_t latin_small_letter_h_with_breve_below [] = { 0x0068, 0x032E };
	static uint32_t latin_capital_letter_i_with_tilde_below [] = { 0x0049, 0x0330 };
	static uint32_t latin_small_letter_i_with_tilde_below [] = { 0x0069, 0x0330 };
	static uint32_t latin_capital_letter_i_with_diaeresis_and_acute [] = { 0x00CF, 0x0301 };
	static uint32_t latin_small_letter_i_with_diaeresis_and_acute [] = { 0x00EF, 0x0301 };
	static uint32_t latin_capital_letter_k_with_acute [] = { 0x004B, 0x0301 };
	static uint32_t latin_small_letter_k_with_acute [] = { 0x006B, 0x0301 };
	static uint32_t latin_capital_letter_k_with_dot_below [] = { 0x004B, 0x0323 };
	static uint32_t latin_small_letter_k_with_dot_below [] = { 0x006B, 0x0323 };
	static uint32_t latin_capital_letter_k_with_line_below [] = { 0x004B, 0x0331 };
	static uint32_t latin_small_letter_k_with_line_below [] = { 0x006B, 0x0331 };
	static uint32_t latin_capital_letter_l_with_dot_below [] = { 0x004C, 0x0323 };
	static uint32_t latin_small_letter_l_with_dot_below [] = { 0x006C, 0x0323 };
	static uint32_t latin_capital_letter_l_with_dot_below_and_macron [] = { 0x1E36, 0x0304 };
	static uint32_t latin_small_letter_l_with_dot_below_and_macron [] = { 0x1E37, 0x0304 };
	static uint32_t latin_capital_letter_l_with_line_below [] = { 0x004C, 0x0331 };
	static uint32_t latin_small_letter_l_with_line_below [] = { 0x006C, 0x0331 };
	static uint32_t latin_capital_letter_l_with_circumflex_below [] = { 0x004C, 0x032D };
	static uint32_t latin_small_letter_l_with_circumflex_below [] = { 0x006C, 0x032D };
	static uint32_t latin_capital_letter_m_with_acute [] = { 0x004D, 0x0301 };
	static uint32_t latin_small_letter_m_with_acute [] = { 0x006D, 0x0301 };
	static uint32_t latin_capital_letter_m_with_dot_above [] = { 0x004D, 0x0307 };
	static uint32_t latin_small_letter_m_with_dot_above [] = { 0x006D, 0x0307 };
	static uint32_t latin_capital_letter_m_with_dot_below [] = { 0x004D, 0x0323 };
	static uint32_t latin_small_letter_m_with_dot_below [] = { 0x006D, 0x0323 };
	static uint32_t latin_capital_letter_n_with_dot_above [] = { 0x004E, 0x0307 };
	static uint32_t latin_small_letter_n_with_dot_above [] = { 0x006E, 0x0307 };
	static uint32_t latin_capital_letter_n_with_dot_below [] = { 0x004E, 0x0323 };
	static uint32_t latin_small_letter_n_with_dot_below [] = { 0x006E, 0x0323 };
	static uint32_t latin_capital_letter_n_with_line_below [] = { 0x004E, 0x0331 };
	static uint32_t latin_small_letter_n_with_line_below [] = { 0x006E, 0x0331 };
	static uint32_t latin_capital_letter_n_with_circumflex_below [] = { 0x004E, 0x032D };
	static uint32_t latin_small_letter_n_with_circumflex_below [] = { 0x006E, 0x032D };
	static uint32_t latin_capital_letter_o_with_tilde_and_acute [] = { 0x00D5, 0x0301 };
	static uint32_t latin_small_letter_o_with_tilde_and_acute [] = { 0x00F5, 0x0301 };
	static uint32_t latin_capital_letter_o_with_tilde_and_diaeresis [] = { 0x00D5, 0x0308 };
	static uint32_t latin_small_letter_o_with_tilde_and_diaeresis [] = { 0x00F5, 0x0308 };
	static uint32_t latin_capital_letter_o_with_macron_and_grave [] = { 0x014C, 0x0300 };
	static uint32_t latin_small_letter_o_with_macron_and_grave [] = { 0x014D, 0x0300 };
	static uint32_t latin_capital_letter_o_with_macron_and_acute [] = { 0x014C, 0x0301 };
	static uint32_t latin_small_letter_o_with_macron_and_acute [] = { 0x014D, 0x0301 };
	static uint32_t latin_capital_letter_p_with_acute [] = { 0x0050, 0x0301 };
	static uint32_t latin_small_letter_p_with_acute [] = { 0x0070, 0x0301 };
	static uint32_t latin_capital_letter_p_with_dot_above [] = { 0x0050, 0x0307 };
	static uint32_t latin_small_letter_p_with_dot_above [] = { 0x0070, 0x0307 };
	static uint32_t latin_capital_letter_r_with_dot_above [] = { 0x0052, 0x0307 };
	static uint32_t latin_small_letter_r_with_dot_above [] = { 0x0072, 0x0307 };
	static uint32_t latin_capital_letter_r_with_dot_below [] = { 0x0052, 0x0323 };
	static uint32_t latin_small_letter_r_with_dot_below [] = { 0x0072, 0x0323 };
	static uint32_t latin_capital_letter_r_with_dot_below_and_macron [] = { 0x1E5A, 0x0304 };
	static uint32_t latin_small_letter_r_with_dot_below_and_macron [] = { 0x1E5B, 0x0304 };
	static uint32_t latin_capital_letter_r_with_line_below [] = { 0x0052, 0x0331 };
	static uint32_t latin_small_letter_r_with_line_below [] = { 0x0072, 0x0331 };
	static uint32_t latin_capital_letter_s_with_dot_above [] = { 0x0053, 0x0307 };
	static uint32_t latin_small_letter_s_with_dot_above [] = { 0x0073, 0x0307 };
	static uint32_t latin_capital_letter_s_with_dot_below [] = { 0x0053, 0x0323 };
	static uint32_t latin_small_letter_s_with_dot_below [] = { 0x0073, 0x0323 };
	static uint32_t latin_capital_letter_s_with_acute_and_dot_above [] = { 0x015A, 0x0307 };
	static uint32_t latin_small_letter_s_with_acute_and_dot_above [] = { 0x015B, 0x0307 };
	static uint32_t latin_capital_letter_s_with_caron_and_dot_above [] = { 0x0160, 0x0307 };
	static uint32_t latin_small_letter_s_with_caron_and_dot_above [] = { 0x0161, 0x0307 };
	static uint32_t latin_capital_letter_s_with_dot_below_and_dot_above [] = { 0x1E62, 0x0307 };
	static uint32_t latin_small_letter_s_with_dot_below_and_dot_above [] = { 0x1E63, 0x0307 };
	static uint32_t latin_capital_letter_t_with_dot_above [] = { 0x0054, 0x0307 };
	static uint32_t latin_small_letter_t_with_dot_above [] = { 0x0074, 0x0307 };
	static uint32_t latin_capital_letter_t_with_dot_below [] = { 0x0054, 0x0323 };
	static uint32_t latin_small_letter_t_with_dot_below [] = { 0x0074, 0x0323 };
	static uint32_t latin_capital_letter_t_with_line_below [] = { 0x0054, 0x0331 };
	static uint32_t latin_small_letter_t_with_line_below [] = { 0x0074, 0x0331 };
	static uint32_t latin_capital_letter_t_with_circumflex_below [] = { 0x0054, 0x032D };
	static uint32_t latin_small_letter_t_with_circumflex_below [] = { 0x0074, 0x032D };
	static uint32_t latin_capital_letter_u_with_diaeresis_below [] = { 0x0055, 0x0324 };
	static uint32_t latin_small_letter_u_with_diaeresis_below [] = { 0x0075, 0x0324 };
	static uint32_t latin_capital_letter_u_with_tilde_below [] = { 0x0055, 0x0330 };
	static uint32_t latin_small_letter_u_with_tilde_below [] = { 0x0075, 0x0330 };
	static uint32_t latin_capital_letter_u_with_circumflex_below [] = { 0x0055, 0x032D };
	static uint32_t latin_small_letter_u_with_circumflex_below [] = { 0x0075, 0x032D };
	static uint32_t latin_capital_letter_u_with_tilde_and_acute [] = { 0x0168, 0x0301 };
	static uint32_t latin_small_letter_u_with_tilde_and_acute [] = { 0x0169, 0x0301 };
	static uint32_t latin_capital_letter_u_with_macron_and_diaeresis [] = { 0x016A, 0x0308 };
	static uint32_t latin_small_letter_u_with_macron_and_diaeresis [] = { 0x016B, 0x0308 };
	static uint32_t latin_capital_letter_v_with_tilde [] = { 0x0056, 0x0303 };
	static uint32_t latin_small_letter_v_with_tilde [] = { 0x0076, 0x0303 };
	static uint32_t latin_capital_letter_v_with_dot_below [] = { 0x0056, 0x0323 };
	static uint32_t latin_small_letter_v_with_dot_below [] = { 0x0076, 0x0323 };
	static uint32_t latin_capital_letter_w_with_grave [] = { 0x0057, 0x0300 };
	static uint32_t latin_small_letter_w_with_grave [] = { 0x0077, 0x0300 };
	static uint32_t latin_capital_letter_w_with_acute [] = { 0x0057, 0x0301 };
	static uint32_t latin_small_letter_w_with_acute [] = { 0x0077, 0x0301 };
	static uint32_t latin_capital_letter_w_with_diaeresis [] = { 0x0057, 0x0308 };
	static uint32_t latin_small_letter_w_with_diaeresis [] = { 0x0077, 0x0308 };
	static uint32_t latin_capital_letter_w_with_dot_above [] = { 0x0057, 0x0307 };
	static uint32_t latin_small_letter_w_with_dot_above [] = { 0x0077, 0x0307 };
	static uint32_t latin_capital_letter_w_with_dot_below [] = { 0x0057, 0x0323 };
	static uint32_t latin_small_letter_w_with_dot_below [] = { 0x0077, 0x0323 };
	static uint32_t latin_capital_letter_x_with_dot_above [] = { 0x0058, 0x0307 };
	static uint32_t latin_small_letter_x_with_dot_above [] = { 0x0078, 0x0307 };
	static uint32_t latin_capital_letter_x_with_diaeresis [] = { 0x0058, 0x0308 };
	static uint32_t latin_small_letter_x_with_diaeresis [] = { 0x0078, 0x0308 };
	static uint32_t latin_capital_letter_y_with_dot_above [] = { 0x0059, 0x0307 };
	static uint32_t latin_small_letter_y_with_dot_above [] = { 0x0079, 0x0307 };
	static uint32_t latin_capital_letter_z_with_circumflex [] = { 0x005A, 0x0302 };
	static uint32_t latin_small_letter_z_with_circumflex [] = { 0x007A, 0x0302 };
	static uint32_t latin_capital_letter_z_with_dot_below [] = { 0x005A, 0x0323 };
	static uint32_t latin_small_letter_z_with_dot_below [] = { 0x007A, 0x0323 };
	static uint32_t latin_capital_letter_z_with_line_below [] = { 0x005A, 0x0331 };
	static uint32_t latin_small_letter_z_with_line_below [] = { 0x007A, 0x0331 };
	static uint32_t latin_small_letter_h_with_line_below [] = { 0x0068, 0x0331 };
	static uint32_t latin_small_letter_t_with_diaeresis [] = { 0x0074, 0x0308 };
	static uint32_t latin_small_letter_w_with_ring_above [] = { 0x0077, 0x030A };
	static uint32_t latin_small_letter_y_with_ring_above [] = { 0x0079, 0x030A };
	static uint32_t latin_small_letter_a_with_right_half_ring [] = { 0x0061, 0x02BE };
	static uint32_t latin_small_letter_long_s_with_dot_above [] = { 0x017F, 0x0307 };
	static uint32_t latin_capital_letter_a_with_dot_below [] = { 0x0041, 0x0323 };
	static uint32_t latin_small_letter_a_with_dot_below [] = { 0x0061, 0x0323 };
	static uint32_t latin_capital_letter_a_with_hook_above [] = { 0x0041, 0x0309 };
	static uint32_t latin_small_letter_a_with_hook_above [] = { 0x0061, 0x0309 };
	static uint32_t latin_capital_letter_a_with_circumflex_and_acute [] = { 0x00C2, 0x0301 };
	static uint32_t latin_small_letter_a_with_circumflex_and_acute [] = { 0x00E2, 0x0301 };
	static uint32_t latin_capital_letter_a_with_circumflex_and_grave [] = { 0x00C2, 0x0300 };
	static uint32_t latin_small_letter_a_with_circumflex_and_grave [] = { 0x00E2, 0x0300 };
	static uint32_t latin_capital_letter_a_with_circumflex_and_hook_above [] = { 0x00C2, 0x0309 };
	static uint32_t latin_small_letter_a_with_circumflex_and_hook_above [] = { 0x00E2, 0x0309 };
	static uint32_t latin_capital_letter_a_with_circumflex_and_tilde [] = { 0x00C2, 0x0303 };
	static uint32_t latin_small_letter_a_with_circumflex_and_tilde [] = { 0x00E2, 0x0303 };
	static uint32_t latin_capital_letter_a_with_circumflex_and_dot_below [] = { 0x1EA0, 0x0302 };
	static uint32_t latin_small_letter_a_with_circumflex_and_dot_below [] = { 0x1EA1, 0x0302 };
	static uint32_t latin_capital_letter_a_with_breve_and_acute [] = { 0x0102, 0x0301 };
	static uint32_t latin_small_letter_a_with_breve_and_acute [] = { 0x0103, 0x0301 };
	static uint32_t latin_capital_letter_a_with_breve_and_grave [] = { 0x0102, 0x0300 };
	static uint32_t latin_small_letter_a_with_breve_and_grave [] = { 0x0103, 0x0300 };
	static uint32_t latin_capital_letter_a_with_breve_and_hook_above [] = { 0x0102, 0x0309 };
	static uint32_t latin_small_letter_a_with_breve_and_hook_above [] = { 0x0103, 0x0309 };
	static uint32_t latin_capital_letter_a_with_breve_and_tilde [] = { 0x0102, 0x0303 };
	static uint32_t latin_small_letter_a_with_breve_and_tilde [] = { 0x0103, 0x0303 };
	static uint32_t latin_capital_letter_a_with_breve_and_dot_below [] = { 0x1EA0, 0x0306 };
	static uint32_t latin_small_letter_a_with_breve_and_dot_below [] = { 0x1EA1, 0x0306 };
	static uint32_t latin_capital_letter_e_with_dot_below [] = { 0x0045, 0x0323 };
	static uint32_t latin_small_letter_e_with_dot_below [] = { 0x0065, 0x0323 };
	static uint32_t latin_capital_letter_e_with_hook_above [] = { 0x0045, 0x0309 };
	static uint32_t latin_small_letter_e_with_hook_above [] = { 0x0065, 0x0309 };
	static uint32_t latin_capital_letter_e_with_tilde [] = { 0x0045, 0x0303 };
	static uint32_t latin_small_letter_e_with_tilde [] = { 0x0065, 0x0303 };
	static uint32_t latin_capital_letter_e_with_circumflex_and_acute [] = { 0x00CA, 0x0301 };
	static uint32_t latin_small_letter_e_with_circumflex_and_acute [] = { 0x00EA, 0x0301 };
	static uint32_t latin_capital_letter_e_with_circumflex_and_grave [] = { 0x00CA, 0x0300 };
	static uint32_t latin_small_letter_e_with_circumflex_and_grave [] = { 0x00EA, 0x0300 };
	static uint32_t latin_capital_letter_e_with_circumflex_and_hook_above [] = { 0x00CA, 0x0309 };
	static uint32_t latin_small_letter_e_with_circumflex_and_hook_above [] = { 0x00EA, 0x0309 };
	static uint32_t latin_capital_letter_e_with_circumflex_and_tilde [] = { 0x00CA, 0x0303 };
	static uint32_t latin_small_letter_e_with_circumflex_and_tilde [] = { 0x00EA, 0x0303 };
	static uint32_t latin_capital_letter_e_with_circumflex_and_dot_below [] = { 0x1EB8, 0x0302 };
	static uint32_t latin_small_letter_e_with_circumflex_and_dot_below [] = { 0x1EB9, 0x0302 };
	static uint32_t latin_capital_letter_i_with_hook_above [] = { 0x0049, 0x0309 };
	static uint32_t latin_small_letter_i_with_hook_above [] = { 0x0069, 0x0309 };
	static uint32_t latin_capital_letter_i_with_dot_below [] = { 0x0049, 0x0323 };
	static uint32_t latin_small_letter_i_with_dot_below [] = { 0x0069, 0x0323 };
	static uint32_t latin_capital_letter_o_with_dot_below [] = { 0x004F, 0x0323 };
	static uint32_t latin_small_letter_o_with_dot_below [] = { 0x006F, 0x0323 };
	static uint32_t latin_capital_letter_o_with_hook_above [] = { 0x004F, 0x0309 };
	static uint32_t latin_small_letter_o_with_hook_above [] = { 0x006F, 0x0309 };
	static uint32_t latin_capital_letter_o_with_circumflex_and_acute [] = { 0x00D4, 0x0301 };
	static uint32_t latin_small_letter_o_with_circumflex_and_acute [] = { 0x00F4, 0x0301 };
	static uint32_t latin_capital_letter_o_with_circumflex_and_grave [] = { 0x00D4, 0x0300 };
	static uint32_t latin_small_letter_o_with_circumflex_and_grave [] = { 0x00F4, 0x0300 };
	static uint32_t latin_capital_letter_o_with_circumflex_and_hook_above [] = { 0x00D4, 0x0309 };
	static uint32_t latin_small_letter_o_with_circumflex_and_hook_above [] = { 0x00F4, 0x0309 };
	static uint32_t latin_capital_letter_o_with_circumflex_and_tilde [] = { 0x00D4, 0x0303 };
	static uint32_t latin_small_letter_o_with_circumflex_and_tilde [] = { 0x00F4, 0x0303 };
	static uint32_t latin_capital_letter_o_with_circumflex_and_dot_below [] = { 0x1ECC, 0x0302 };
	static uint32_t latin_small_letter_o_with_circumflex_and_dot_below [] = { 0x1ECD, 0x0302 };
	static uint32_t latin_capital_letter_o_with_horn_and_acute [] = { 0x01A0, 0x0301 };
	static uint32_t latin_small_letter_o_with_horn_and_acute [] = { 0x01A1, 0x0301 };
	static uint32_t latin_capital_letter_o_with_horn_and_grave [] = { 0x01A0, 0x0300 };
	static uint32_t latin_small_letter_o_with_horn_and_grave [] = { 0x01A1, 0x0300 };
	static uint32_t latin_capital_letter_o_with_horn_and_hook_above [] = { 0x01A0, 0x0309 };
	static uint32_t latin_small_letter_o_with_horn_and_hook_above [] = { 0x01A1, 0x0309 };
	static uint32_t latin_capital_letter_o_with_horn_and_tilde [] = { 0x01A0, 0x0303 };
	static uint32_t latin_small_letter_o_with_horn_and_tilde [] = { 0x01A1, 0x0303 };
	static uint32_t latin_capital_letter_o_with_horn_and_dot_below [] = { 0x01A0, 0x0323 };
	static uint32_t latin_small_letter_o_with_horn_and_dot_below [] = { 0x01A1, 0x0323 };
	static uint32_t latin_capital_letter_u_with_dot_below [] = { 0x0055, 0x0323 };
	static uint32_t latin_small_letter_u_with_dot_below [] = { 0x0075, 0x0323 };
	static uint32_t latin_capital_letter_u_with_hook_above [] = { 0x0055, 0x0309 };
	static uint32_t latin_small_letter_u_with_hook_above [] = { 0x0075, 0x0309 };
	static uint32_t latin_capital_letter_u_with_horn_and_acute [] = { 0x01AF, 0x0301 };
	static uint32_t latin_small_letter_u_with_horn_and_acute [] = { 0x01B0, 0x0301 };
	static uint32_t latin_capital_letter_u_with_horn_and_grave [] = { 0x01AF, 0x0300 };
	static uint32_t latin_small_letter_u_with_horn_and_grave [] = { 0x01B0, 0x0300 };
	static uint32_t latin_capital_letter_u_with_horn_and_hook_above [] = { 0x01AF, 0x0309 };
	static uint32_t latin_small_letter_u_with_horn_and_hook_above [] = { 0x01B0, 0x0309 };
	static uint32_t latin_capital_letter_u_with_horn_and_tilde [] = { 0x01AF, 0x0303 };
	static uint32_t latin_small_letter_u_with_horn_and_tilde [] = { 0x01B0, 0x0303 };
	static uint32_t latin_capital_letter_u_with_horn_and_dot_below [] = { 0x01AF, 0x0323 };
	static uint32_t latin_small_letter_u_with_horn_and_dot_below [] = { 0x01B0, 0x0323 };
	static uint32_t latin_capital_letter_y_with_grave [] = { 0x0059, 0x0300 };
	static uint32_t latin_small_letter_y_with_grave [] = { 0x0079, 0x0300 };
	static uint32_t latin_capital_letter_y_with_dot_below [] = { 0x0059, 0x0323 };
	static uint32_t latin_small_letter_y_with_dot_below [] = { 0x0079, 0x0323 };
	static uint32_t latin_capital_letter_y_with_hook_above [] = { 0x0059, 0x0309 };
	static uint32_t latin_small_letter_y_with_hook_above [] = { 0x0079, 0x0309 };
	static uint32_t latin_capital_letter_y_with_tilde [] = { 0x0059, 0x0303 };
	static uint32_t latin_small_letter_y_with_tilde [] = { 0x0079, 0x0303 };
	static uint32_t greek_small_letter_alpha_with_psili [] = { 0x03B1, 0x0313 };
	static uint32_t greek_small_letter_alpha_with_dasia [] = { 0x03B1, 0x0314 };
	static uint32_t greek_small_letter_alpha_with_psili_and_varia [] = { 0x1F00, 0x0300 };
	static uint32_t greek_small_letter_alpha_with_dasia_and_varia [] = { 0x1F01, 0x0300 };
	static uint32_t greek_small_letter_alpha_with_psili_and_oxia [] = { 0x1F00, 0x0301 };
	static uint32_t greek_small_letter_alpha_with_dasia_and_oxia [] = { 0x1F01, 0x0301 };
	static uint32_t greek_small_letter_alpha_with_psili_and_perispomeni [] = { 0x1F00, 0x0342 };
	static uint32_t greek_small_letter_alpha_with_dasia_and_perispomeni [] = { 0x1F01, 0x0342 };
	static uint32_t greek_capital_letter_alpha_with_psili [] = { 0x0391, 0x0313 };
	static uint32_t greek_capital_letter_alpha_with_dasia [] = { 0x0391, 0x0314 };
	static uint32_t greek_capital_letter_alpha_with_psili_and_varia [] = { 0x1F08, 0x0300 };
	static uint32_t greek_capital_letter_alpha_with_dasia_and_varia [] = { 0x1F09, 0x0300 };
	static uint32_t greek_capital_letter_alpha_with_psili_and_oxia [] = { 0x1F08, 0x0301 };
	static uint32_t greek_capital_letter_alpha_with_dasia_and_oxia [] = { 0x1F09, 0x0301 };
	static uint32_t greek_capital_letter_alpha_with_psili_and_perispomeni [] = { 0x1F08, 0x0342 };
	static uint32_t greek_capital_letter_alpha_with_dasia_and_perispomeni [] = { 0x1F09, 0x0342 };
	static uint32_t greek_small_letter_epsilon_with_psili [] = { 0x03B5, 0x0313 };
	static uint32_t greek_small_letter_epsilon_with_dasia [] = { 0x03B5, 0x0314 };
	static uint32_t greek_small_letter_epsilon_with_psili_and_varia [] = { 0x1F10, 0x0300 };
	static uint32_t greek_small_letter_epsilon_with_dasia_and_varia [] = { 0x1F11, 0x0300 };
	static uint32_t greek_small_letter_epsilon_with_psili_and_oxia [] = { 0x1F10, 0x0301 };
	static uint32_t greek_small_letter_epsilon_with_dasia_and_oxia [] = { 0x1F11, 0x0301 };
	static uint32_t greek_capital_letter_epsilon_with_psili [] = { 0x0395, 0x0313 };
	static uint32_t greek_capital_letter_epsilon_with_dasia [] = { 0x0395, 0x0314 };
	static uint32_t greek_capital_letter_epsilon_with_psili_and_varia [] = { 0x1F18, 0x0300 };
	static uint32_t greek_capital_letter_epsilon_with_dasia_and_varia [] = { 0x1F19, 0x0300 };
	static uint32_t greek_capital_letter_epsilon_with_psili_and_oxia [] = { 0x1F18, 0x0301 };
	static uint32_t greek_capital_letter_epsilon_with_dasia_and_oxia [] = { 0x1F19, 0x0301 };
	static uint32_t greek_small_letter_eta_with_psili [] = { 0x03B7, 0x0313 };
	static uint32_t greek_small_letter_eta_with_dasia [] = { 0x03B7, 0x0314 };
	static uint32_t greek_small_letter_eta_with_psili_and_varia [] = { 0x1F20, 0x0300 };
	static uint32_t greek_small_letter_eta_with_dasia_and_varia [] = { 0x1F21, 0x0300 };
	static uint32_t greek_small_letter_eta_with_psili_and_oxia [] = { 0x1F20, 0x0301 };
	static uint32_t greek_small_letter_eta_with_dasia_and_oxia [] = { 0x1F21, 0x0301 };
	static uint32_t greek_small_letter_eta_with_psili_and_perispomeni [] = { 0x1F20, 0x0342 };
	static uint32_t greek_small_letter_eta_with_dasia_and_perispomeni [] = { 0x1F21, 0x0342 };
	static uint32_t greek_capital_letter_eta_with_psili [] = { 0x0397, 0x0313 };
	static uint32_t greek_capital_letter_eta_with_dasia [] = { 0x0397, 0x0314 };
	static uint32_t greek_capital_letter_eta_with_psili_and_varia [] = { 0x1F28, 0x0300 };
	static uint32_t greek_capital_letter_eta_with_dasia_and_varia [] = { 0x1F29, 0x0300 };
	static uint32_t greek_capital_letter_eta_with_psili_and_oxia [] = { 0x1F28, 0x0301 };
	static uint32_t greek_capital_letter_eta_with_dasia_and_oxia [] = { 0x1F29, 0x0301 };
	static uint32_t greek_capital_letter_eta_with_psili_and_perispomeni [] = { 0x1F28, 0x0342 };
	static uint32_t greek_capital_letter_eta_with_dasia_and_perispomeni [] = { 0x1F29, 0x0342 };
	static uint32_t greek_small_letter_iota_with_psili [] = { 0x03B9, 0x0313 };
	static uint32_t greek_small_letter_iota_with_dasia [] = { 0x03B9, 0x0314 };
	static uint32_t greek_small_letter_iota_with_psili_and_varia [] = { 0x1F30, 0x0300 };
	static uint32_t greek_small_letter_iota_with_dasia_and_varia [] = { 0x1F31, 0x0300 };
	static uint32_t greek_small_letter_iota_with_psili_and_oxia [] = { 0x1F30, 0x0301 };
	static uint32_t greek_small_letter_iota_with_dasia_and_oxia [] = { 0x1F31, 0x0301 };
	static uint32_t greek_small_letter_iota_with_psili_and_perispomeni [] = { 0x1F30, 0x0342 };
	static uint32_t greek_small_letter_iota_with_dasia_and_perispomeni [] = { 0x1F31, 0x0342 };
	static uint32_t greek_capital_letter_iota_with_psili [] = { 0x0399, 0x0313 };
	static uint32_t greek_capital_letter_iota_with_dasia [] = { 0x0399, 0x0314 };
	static uint32_t greek_capital_letter_iota_with_psili_and_varia [] = { 0x1F38, 0x0300 };
	static uint32_t greek_capital_letter_iota_with_dasia_and_varia [] = { 0x1F39, 0x0300 };
	static uint32_t greek_capital_letter_iota_with_psili_and_oxia [] = { 0x1F38, 0x0301 };
	static uint32_t greek_capital_letter_iota_with_dasia_and_oxia [] = { 0x1F39, 0x0301 };
	static uint32_t greek_capital_letter_iota_with_psili_and_perispomeni [] = { 0x1F38, 0x0342 };
	static uint32_t greek_capital_letter_iota_with_dasia_and_perispomeni [] = { 0x1F39, 0x0342 };
	static uint32_t greek_small_letter_omicron_with_psili [] = { 0x03BF, 0x0313 };
	static uint32_t greek_small_letter_omicron_with_dasia [] = { 0x03BF, 0x0314 };
	static uint32_t greek_small_letter_omicron_with_psili_and_varia [] = { 0x1F40, 0x0300 };
	static uint32_t greek_small_letter_omicron_with_dasia_and_varia [] = { 0x1F41, 0x0300 };
	static uint32_t greek_small_letter_omicron_with_psili_and_oxia [] = { 0x1F40, 0x0301 };
	static uint32_t greek_small_letter_omicron_with_dasia_and_oxia [] = { 0x1F41, 0x0301 };
	static uint32_t greek_capital_letter_omicron_with_psili [] = { 0x039F, 0x0313 };
	static uint32_t greek_capital_letter_omicron_with_dasia [] = { 0x039F, 0x0314 };
	static uint32_t greek_capital_letter_omicron_with_psili_and_varia [] = { 0x1F48, 0x0300 };
	static uint32_t greek_capital_letter_omicron_with_dasia_and_varia [] = { 0x1F49, 0x0300 };
	static uint32_t greek_capital_letter_omicron_with_psili_and_oxia [] = { 0x1F48, 0x0301 };
	static uint32_t greek_capital_letter_omicron_with_dasia_and_oxia [] = { 0x1F49, 0x0301 };
	static uint32_t greek_small_letter_upsilon_with_psili [] = { 0x03C5, 0x0313 };
	static uint32_t greek_small_letter_upsilon_with_dasia [] = { 0x03C5, 0x0314 };
	static uint32_t greek_small_letter_upsilon_with_psili_and_varia [] = { 0x1F50, 0x0300 };
	static uint32_t greek_small_letter_upsilon_with_dasia_and_varia [] = { 0x1F51, 0x0300 };
	static uint32_t greek_small_letter_upsilon_with_psili_and_oxia [] = { 0x1F50, 0x0301 };
	static uint32_t greek_small_letter_upsilon_with_dasia_and_oxia [] = { 0x1F51, 0x0301 };
	static uint32_t greek_small_letter_upsilon_with_psili_and_perispomeni [] = { 0x1F50, 0x0342 };
	static uint32_t greek_small_letter_upsilon_with_dasia_and_perispomeni [] = { 0x1F51, 0x0342 };
	static uint32_t greek_capital_letter_upsilon_with_dasia [] = { 0x03A5, 0x0314 };
	static uint32_t greek_capital_letter_upsilon_with_dasia_and_varia [] = { 0x1F59, 0x0300 };
	static uint32_t greek_capital_letter_upsilon_with_dasia_and_oxia [] = { 0x1F59, 0x0301 };
	static uint32_t greek_capital_letter_upsilon_with_dasia_and_perispomeni [] = { 0x1F59, 0x0342 };
	static uint32_t greek_small_letter_omega_with_psili [] = { 0x03C9, 0x0313 };
	static uint32_t greek_small_letter_omega_with_dasia [] = { 0x03C9, 0x0314 };
	static uint32_t greek_small_letter_omega_with_psili_and_varia [] = { 0x1F60, 0x0300 };
	static uint32_t greek_small_letter_omega_with_dasia_and_varia [] = { 0x1F61, 0x0300 };
	static uint32_t greek_small_letter_omega_with_psili_and_oxia [] = { 0x1F60, 0x0301 };
	static uint32_t greek_small_letter_omega_with_dasia_and_oxia [] = { 0x1F61, 0x0301 };
	static uint32_t greek_small_letter_omega_with_psili_and_perispomeni [] = { 0x1F60, 0x0342 };
	static uint32_t greek_small_letter_omega_with_dasia_and_perispomeni [] = { 0x1F61, 0x0342 };
	static uint32_t greek_capital_letter_omega_with_psili [] = { 0x03A9, 0x0313 };
	static uint32_t greek_capital_letter_omega_with_dasia [] = { 0x03A9, 0x0314 };
	static uint32_t greek_capital_letter_omega_with_psili_and_varia [] = { 0x1F68, 0x0300 };
	static uint32_t greek_capital_letter_omega_with_dasia_and_varia [] = { 0x1F69, 0x0300 };
	static uint32_t greek_capital_letter_omega_with_psili_and_oxia [] = { 0x1F68, 0x0301 };
	static uint32_t greek_capital_letter_omega_with_dasia_and_oxia [] = { 0x1F69, 0x0301 };
	static uint32_t greek_capital_letter_omega_with_psili_and_perispomeni [] = { 0x1F68, 0x0342 };
	static uint32_t greek_capital_letter_omega_with_dasia_and_perispomeni [] = { 0x1F69, 0x0342 };
	static uint32_t greek_small_letter_alpha_with_varia [] = { 0x03B1, 0x0300 };
	static uint32_t greek_small_letter_alpha_with_oxia [] = { 0x03AC };
	static uint32_t greek_small_letter_epsilon_with_varia [] = { 0x03B5, 0x0300 };
	static uint32_t greek_small_letter_epsilon_with_oxia [] = { 0x03AD };
	static uint32_t greek_small_letter_eta_with_varia [] = { 0x03B7, 0x0300 };
	static uint32_t greek_small_letter_eta_with_oxia [] = { 0x03AE };
	static uint32_t greek_small_letter_iota_with_varia [] = { 0x03B9, 0x0300 };
	static uint32_t greek_small_letter_iota_with_oxia [] = { 0x03AF };
	static uint32_t greek_small_letter_omicron_with_varia [] = { 0x03BF, 0x0300 };
	static uint32_t greek_small_letter_omicron_with_oxia [] = { 0x03CC };
	static uint32_t greek_small_letter_upsilon_with_varia [] = { 0x03C5, 0x0300 };
	static uint32_t greek_small_letter_upsilon_with_oxia [] = { 0x03CD };
	static uint32_t greek_small_letter_omega_with_varia [] = { 0x03C9, 0x0300 };
	static uint32_t greek_small_letter_omega_with_oxia [] = { 0x03CE };
	static uint32_t greek_small_letter_alpha_with_psili_and_ypogegrammeni [] = { 0x1F00, 0x0345 };
	static uint32_t greek_small_letter_alpha_with_dasia_and_ypogegrammeni [] = { 0x1F01, 0x0345 };
	static uint32_t greek_small_letter_alpha_with_psili_and_varia_and_ypogegrammeni [] = { 0x1F02, 0x0345 };
	static uint32_t greek_small_letter_alpha_with_dasia_and_varia_and_ypogegrammeni [] = { 0x1F03, 0x0345 };
	static uint32_t greek_small_letter_alpha_with_psili_and_oxia_and_ypogegrammeni [] = { 0x1F04, 0x0345 };
	static uint32_t greek_small_letter_alpha_with_dasia_and_oxia_and_ypogegrammeni [] = { 0x1F05, 0x0345 };
	static uint32_t greek_small_letter_alpha_with_psili_and_perispomeni_and_ypogegrammeni [] = { 0x1F06, 0x0345 };
	static uint32_t greek_small_letter_alpha_with_dasia_and_perispomeni_and_ypogegrammeni [] = { 0x1F07, 0x0345 };
	static uint32_t greek_capital_letter_alpha_with_psili_and_prosgegrammeni [] = { 0x1F08, 0x0345 };
	static uint32_t greek_capital_letter_alpha_with_dasia_and_prosgegrammeni [] = { 0x1F09, 0x0345 };
	static uint32_t greek_capital_letter_alpha_with_psili_and_varia_and_prosgegrammeni [] = { 0x1F0A, 0x0345 };
	static uint32_t greek_capital_letter_alpha_with_dasia_and_varia_and_prosgegrammeni [] = { 0x1F0B, 0x0345 };
	static uint32_t greek_capital_letter_alpha_with_psili_and_oxia_and_prosgegrammeni [] = { 0x1F0C, 0x0345 };
	static uint32_t greek_capital_letter_alpha_with_dasia_and_oxia_and_prosgegrammeni [] = { 0x1F0D, 0x0345 };
	static uint32_t greek_capital_letter_alpha_with_psili_and_perispomeni_and_prosgegrammeni [] = { 0x1F0E, 0x0345 };
	static uint32_t greek_capital_letter_alpha_with_dasia_and_perispomeni_and_prosgegrammeni [] = { 0x1F0F, 0x0345 };
	static uint32_t greek_small_letter_eta_with_psili_and_ypogegrammeni [] = { 0x1F20, 0x0345 };
	static uint32_t greek_small_letter_eta_with_dasia_and_ypogegrammeni [] = { 0x1F21, 0x0345 };
	static uint32_t greek_small_letter_eta_with_psili_and_varia_and_ypogegrammeni [] = { 0x1F22, 0x0345 };
	static uint32_t greek_small_letter_eta_with_dasia_and_varia_and_ypogegrammeni [] = { 0x1F23, 0x0345 };
	static uint32_t greek_small_letter_eta_with_psili_and_oxia_and_ypogegrammeni [] = { 0x1F24, 0x0345 };
	static uint32_t greek_small_letter_eta_with_dasia_and_oxia_and_ypogegrammeni [] = { 0x1F25, 0x0345 };
	static uint32_t greek_small_letter_eta_with_psili_and_perispomeni_and_ypogegrammeni [] = { 0x1F26, 0x0345 };
	static uint32_t greek_small_letter_eta_with_dasia_and_perispomeni_and_ypogegrammeni [] = { 0x1F27, 0x0345 };
	static uint32_t greek_capital_letter_eta_with_psili_and_prosgegrammeni [] = { 0x1F28, 0x0345 };
	static uint32_t greek_capital_letter_eta_with_dasia_and_prosgegrammeni [] = { 0x1F29, 0x0345 };
	static uint32_t greek_capital_letter_eta_with_psili_and_varia_and_prosgegrammeni [] = { 0x1F2A, 0x0345 };
	static uint32_t greek_capital_letter_eta_with_dasia_and_varia_and_prosgegrammeni [] = { 0x1F2B, 0x0345 };
	static uint32_t greek_capital_letter_eta_with_psili_and_oxia_and_prosgegrammeni [] = { 0x1F2C, 0x0345 };
	static uint32_t greek_capital_letter_eta_with_dasia_and_oxia_and_prosgegrammeni [] = { 0x1F2D, 0x0345 };
	static uint32_t greek_capital_letter_eta_with_psili_and_perispomeni_and_prosgegrammeni [] = { 0x1F2E, 0x0345 };
	static uint32_t greek_capital_letter_eta_with_dasia_and_perispomeni_and_prosgegrammeni [] = { 0x1F2F, 0x0345 };
	static uint32_t greek_small_letter_omega_with_psili_and_ypogegrammeni [] = { 0x1F60, 0x0345 };
	static uint32_t greek_small_letter_omega_with_dasia_and_ypogegrammeni [] = { 0x1F61, 0x0345 };
	static uint32_t greek_small_letter_omega_with_psili_and_varia_and_ypogegrammeni [] = { 0x1F62, 0x0345 };
	static uint32_t greek_small_letter_omega_with_dasia_and_varia_and_ypogegrammeni [] = { 0x1F63, 0x0345 };
	static uint32_t greek_small_letter_omega_with_psili_and_oxia_and_ypogegrammeni [] = { 0x1F64, 0x0345 };
	static uint32_t greek_small_letter_omega_with_dasia_and_oxia_and_ypogegrammeni [] = { 0x1F65, 0x0345 };
	static uint32_t greek_small_letter_omega_with_psili_and_perispomeni_and_ypogegrammeni [] = { 0x1F66, 0x0345 };
	static uint32_t greek_small_letter_omega_with_dasia_and_perispomeni_and_ypogegrammeni [] = { 0x1F67, 0x0345 };
	static uint32_t greek_capital_letter_omega_with_psili_and_prosgegrammeni [] = { 0x1F68, 0x0345 };
	static uint32_t greek_capital_letter_omega_with_dasia_and_prosgegrammeni [] = { 0x1F69, 0x0345 };
	static uint32_t greek_capital_letter_omega_with_psili_and_varia_and_prosgegrammeni [] = { 0x1F6A, 0x0345 };
	static uint32_t greek_capital_letter_omega_with_dasia_and_varia_and_prosgegrammeni [] = { 0x1F6B, 0x0345 };
	static uint32_t greek_capital_letter_omega_with_psili_and_oxia_and_prosgegrammeni [] = { 0x1F6C, 0x0345 };
	static uint32_t greek_capital_letter_omega_with_dasia_and_oxia_and_prosgegrammeni [] = { 0x1F6D, 0x0345 };
	static uint32_t greek_capital_letter_omega_with_psili_and_perispomeni_and_prosgegrammeni [] = { 0x1F6E, 0x0345 };
	static uint32_t greek_capital_letter_omega_with_dasia_and_perispomeni_and_prosgegrammeni [] = { 0x1F6F, 0x0345 };
	static uint32_t greek_small_letter_alpha_with_vrachy [] = { 0x03B1, 0x0306 };
	static uint32_t greek_small_letter_alpha_with_macron [] = { 0x03B1, 0x0304 };
	static uint32_t greek_small_letter_alpha_with_varia_and_ypogegrammeni [] = { 0x1F70, 0x0345 };
	static uint32_t greek_small_letter_alpha_with_ypogegrammeni [] = { 0x03B1, 0x0345 };
	static uint32_t greek_small_letter_alpha_with_oxia_and_ypogegrammeni [] = { 0x03AC, 0x0345 };
	static uint32_t greek_small_letter_alpha_with_perispomeni [] = { 0x03B1, 0x0342 };
	static uint32_t greek_small_letter_alpha_with_perispomeni_and_ypogegrammeni [] = { 0x1FB6, 0x0345 };
	static uint32_t greek_capital_letter_alpha_with_vrachy [] = { 0x0391, 0x0306 };
	static uint32_t greek_capital_letter_alpha_with_macron [] = { 0x0391, 0x0304 };
	static uint32_t greek_capital_letter_alpha_with_varia [] = { 0x0391, 0x0300 };
	static uint32_t greek_capital_letter_alpha_with_oxia [] = { 0x0386 };
	static uint32_t greek_capital_letter_alpha_with_prosgegrammeni [] = { 0x0391, 0x0345 };
	static uint32_t greek_koronis [] = { 0x0020, 0x0313 };
	static uint32_t greek_prosgegrammeni [] = { 0x03B9 };
	static uint32_t greek_psili [] = { 0x0020, 0x0313 };
	static uint32_t greek_perispomeni [] = { 0x0020, 0x0342 };
	static uint32_t greek_dialytika_and_perispomeni [] = { 0x00A8, 0x0342 };
	static uint32_t greek_small_letter_eta_with_varia_and_ypogegrammeni [] = { 0x1F74, 0x0345 };
	static uint32_t greek_small_letter_eta_with_ypogegrammeni [] = { 0x03B7, 0x0345 };
	static uint32_t greek_small_letter_eta_with_oxia_and_ypogegrammeni [] = { 0x03AE, 0x0345 };
	static uint32_t greek_small_letter_eta_with_perispomeni [] = { 0x03B7, 0x0342 };
	static uint32_t greek_small_letter_eta_with_perispomeni_and_ypogegrammeni [] = { 0x1FC6, 0x0345 };
	static uint32_t greek_capital_letter_epsilon_with_varia [] = { 0x0395, 0x0300 };
	static uint32_t greek_capital_letter_epsilon_with_oxia [] = { 0x0388 };
	static uint32_t greek_capital_letter_eta_with_varia [] = { 0x0397, 0x0300 };
	static uint32_t greek_capital_letter_eta_with_oxia [] = { 0x0389 };
	static uint32_t greek_capital_letter_eta_with_prosgegrammeni [] = { 0x0397, 0x0345 };
	static uint32_t greek_psili_and_varia [] = { 0x1FBF, 0x0300 };
	static uint32_t greek_psili_and_oxia [] = { 0x1FBF, 0x0301 };
	static uint32_t greek_psili_and_perispomeni [] = { 0x1FBF, 0x0342 };
	static uint32_t greek_small_letter_iota_with_vrachy [] = { 0x03B9, 0x0306 };
	static uint32_t greek_small_letter_iota_with_macron [] = { 0x03B9, 0x0304 };
	static uint32_t greek_small_letter_iota_with_dialytika_and_varia [] = { 0x03CA, 0x0300 };
	static uint32_t greek_small_letter_iota_with_dialytika_and_oxia [] = { 0x0390 };
	static uint32_t greek_small_letter_iota_with_perispomeni [] = { 0x03B9, 0x0342 };
	static uint32_t greek_small_letter_iota_with_dialytika_and_perispomeni [] = { 0x03CA, 0x0342 };
	static uint32_t greek_capital_letter_iota_with_vrachy [] = { 0x0399, 0x0306 };
	static uint32_t greek_capital_letter_iota_with_macron [] = { 0x0399, 0x0304 };
	static uint32_t greek_capital_letter_iota_with_varia [] = { 0x0399, 0x0300 };
	static uint32_t greek_capital_letter_iota_with_oxia [] = { 0x038A };
	static uint32_t greek_dasia_and_varia [] = { 0x1FFE, 0x0300 };
	static uint32_t greek_dasia_and_oxia [] = { 0x1FFE, 0x0301 };
	static uint32_t greek_dasia_and_perispomeni [] = { 0x1FFE, 0x0342 };
	static uint32_t greek_small_letter_upsilon_with_vrachy [] = { 0x03C5, 0x0306 };
	static uint32_t greek_small_letter_upsilon_with_macron [] = { 0x03C5, 0x0304 };
	static uint32_t greek_small_letter_upsilon_with_dialytika_and_varia [] = { 0x03CB, 0x0300 };
	static uint32_t greek_small_letter_upsilon_with_dialytika_and_oxia [] = { 0x03B0 };
	static uint32_t greek_small_letter_rho_with_psili [] = { 0x03C1, 0x0313 };
	static uint32_t greek_small_letter_rho_with_dasia [] = { 0x03C1, 0x0314 };
	static uint32_t greek_small_letter_upsilon_with_perispomeni [] = { 0x03C5, 0x0342 };
	static uint32_t greek_small_letter_upsilon_with_dialytika_and_perispomeni [] = { 0x03CB, 0x0342 };
	static uint32_t greek_capital_letter_upsilon_with_vrachy [] = { 0x03A5, 0x0306 };
	static uint32_t greek_capital_letter_upsilon_with_macron [] = { 0x03A5, 0x0304 };
	static uint32_t greek_capital_letter_upsilon_with_varia [] = { 0x03A5, 0x0300 };
	static uint32_t greek_capital_letter_upsilon_with_oxia [] = { 0x038E };
	static uint32_t greek_capital_letter_rho_with_dasia [] = { 0x03A1, 0x0314 };
	static uint32_t greek_dialytika_and_varia [] = { 0x00A8, 0x0300 };
	static uint32_t greek_dialytika_and_oxia [] = { 0x0385 };
	static uint32_t greek_varia [] = { 0x0060 };
	static uint32_t greek_small_letter_omega_with_varia_and_ypogegrammeni [] = { 0x1F7C, 0x0345 };
	static uint32_t greek_small_letter_omega_with_ypogegrammeni [] = { 0x03C9, 0x0345 };
	static uint32_t greek_small_letter_omega_with_oxia_and_ypogegrammeni [] = { 0x03CE, 0x0345 };
	static uint32_t greek_small_letter_omega_with_perispomeni [] = { 0x03C9, 0x0342 };
	static uint32_t greek_small_letter_omega_with_perispomeni_and_ypogegrammeni [] = { 0x1FF6, 0x0345 };
	static uint32_t greek_capital_letter_omicron_with_varia [] = { 0x039F, 0x0300 };
	static uint32_t greek_capital_letter_omicron_with_oxia [] = { 0x038C };
	static uint32_t greek_capital_letter_omega_with_varia [] = { 0x03A9, 0x0300 };
	static uint32_t greek_capital_letter_omega_with_oxia [] = { 0x038F };
	static uint32_t greek_capital_letter_omega_with_prosgegrammeni [] = { 0x03A9, 0x0345 };
	static uint32_t greek_oxia [] = { 0x00B4 };
	static uint32_t greek_dasia [] = { 0x0020, 0x0314 };
	static uint32_t en_quad [] = { 0x2002 };
	static uint32_t em_quad [] = { 0x2003 };
	static uint32_t en_space [] = { 0x0020 };
	static uint32_t em_space [] = { 0x0020 };
	static uint32_t three_per_em_space [] = { 0x0020 };
	static uint32_t four_per_em_space [] = { 0x0020 };
	static uint32_t six_per_em_space [] = { 0x0020 };
	static uint32_t figure_space [] = { 0x0020 };
	static uint32_t punctuation_space [] = { 0x0020 };
	static uint32_t thin_space [] = { 0x0020 };
	static uint32_t hair_space [] = { 0x0020 };
	static uint32_t non_breaking_hyphen [] = { 0x2010 };
	static uint32_t double_low_line [] = { 0x0020, 0x0333 };
	static uint32_t one_dot_leader [] = { 0x002E };
	static uint32_t two_dot_leader [] = { 0x002E, 0x002E };
	static uint32_t horizontal_ellipsis [] = { 0x002E, 0x002E, 0x002E };
	static uint32_t narrow_no_break_space [] = { 0x0020 };
	static uint32_t double_prime [] = { 0x2032, 0x2032 };
	static uint32_t triple_prime [] = { 0x2032, 0x2032, 0x2032 };
	static uint32_t reversed_double_prime [] = { 0x2035, 0x2035 };
	static uint32_t reversed_triple_prime [] = { 0x2035, 0x2035, 0x2035 };
	static uint32_t double_exclamation_mark [] = { 0x0021, 0x0021 };
	static uint32_t overline [] = { 0x0020, 0x0305 };
	static uint32_t double_question_mark [] = { 0x003F, 0x003F };
	static uint32_t question_exclamation_mark [] = { 0x003F, 0x0021 };
	static uint32_t exclamation_question_mark [] = { 0x0021, 0x003F };
	static uint32_t quadruple_prime [] = { 0x2032, 0x2032, 0x2032, 0x2032 };
	static uint32_t medium_mathematical_space [] = { 0x0020 };
	static uint32_t superscript_zero [] = { 0x0030 };
	static uint32_t superscript_latin_small_letter_i [] = { 0x0069 };
	static uint32_t superscript_four [] = { 0x0034 };
	static uint32_t superscript_five [] = { 0x0035 };
	static uint32_t superscript_six [] = { 0x0036 };
	static uint32_t superscript_seven [] = { 0x0037 };
	static uint32_t superscript_eight [] = { 0x0038 };
	static uint32_t superscript_nine [] = { 0x0039 };
	static uint32_t superscript_plus_sign [] = { 0x002B };
	static uint32_t superscript_minus [] = { 0x2212 };
	static uint32_t superscript_equals_sign [] = { 0x003D };
	static uint32_t superscript_left_parenthesis [] = { 0x0028 };
	static uint32_t superscript_right_parenthesis [] = { 0x0029 };
	static uint32_t superscript_latin_small_letter_n [] = { 0x006E };
	static uint32_t subscript_zero [] = { 0x0030 };
	static uint32_t subscript_one [] = { 0x0031 };
	static uint32_t subscript_two [] = { 0x0032 };
	static uint32_t subscript_three [] = { 0x0033 };
	static uint32_t subscript_four [] = { 0x0034 };
	static uint32_t subscript_five [] = { 0x0035 };
	static uint32_t subscript_six [] = { 0x0036 };
	static uint32_t subscript_seven [] = { 0x0037 };
	static uint32_t subscript_eight [] = { 0x0038 };
	static uint32_t subscript_nine [] = { 0x0039 };
	static uint32_t subscript_plus_sign [] = { 0x002B };
	static uint32_t subscript_minus [] = { 0x2212 };
	static uint32_t subscript_equals_sign [] = { 0x003D };
	static uint32_t subscript_left_parenthesis [] = { 0x0028 };
	static uint32_t subscript_right_parenthesis [] = { 0x0029 };
	static uint32_t latin_subscript_small_letter_a [] = { 0x0061 };
	static uint32_t latin_subscript_small_letter_e [] = { 0x0065 };
	static uint32_t latin_subscript_small_letter_o [] = { 0x006F };
	static uint32_t latin_subscript_small_letter_x [] = { 0x0078 };
	static uint32_t latin_subscript_small_letter_schwa [] = { 0x0259 };
	static uint32_t latin_subscript_small_letter_h [] = { 0x0068 };
	static uint32_t latin_subscript_small_letter_k [] = { 0x006B };
	static uint32_t latin_subscript_small_letter_l [] = { 0x006C };
	static uint32_t latin_subscript_small_letter_m [] = { 0x006D };
	static uint32_t latin_subscript_small_letter_n [] = { 0x006E };
	static uint32_t latin_subscript_small_letter_p [] = { 0x0070 };
	static uint32_t latin_subscript_small_letter_s [] = { 0x0073 };
	static uint32_t latin_subscript_small_letter_t [] = { 0x0074 };
	static uint32_t rupee_sign [] = { 0x0052, 0x0073 };
	static uint32_t account_of [] = { 0x0061, 0x002F, 0x0063 };
	static uint32_t addressed_to_the_subject [] = { 0x0061, 0x002F, 0x0073 };
	static uint32_t double_struck_capital_c [] = { 0x0043 };
	static uint32_t degree_celsius [] = { 0x00B0, 0x0043 };
	static uint32_t care_of [] = { 0x0063, 0x002F, 0x006F };
	static uint32_t cada_una [] = { 0x0063, 0x002F, 0x0075 };
	static uint32_t euler_constant [] = { 0x0190 };
	static uint32_t degree_fahrenheit [] = { 0x00B0, 0x0046 };
	static uint32_t script_small_g [] = { 0x0067 };
	static uint32_t script_capital_h [] = { 0x0048 };
	static uint32_t black_letter_capital_h [] = { 0x0048 };
	static uint32_t double_struck_capital_h [] = { 0x0048 };
	static uint32_t planck_constant [] = { 0x0068 };
	static uint32_t planck_constant_over_two_pi [] = { 0x0127 };
	static uint32_t script_capital_i [] = { 0x0049 };
	static uint32_t black_letter_capital_i [] = { 0x0049 };
	static uint32_t script_capital_l [] = { 0x004C };
	static uint32_t script_small_l [] = { 0x006C };
	static uint32_t double_struck_capital_n [] = { 0x004E };
	static uint32_t numero_sign [] = { 0x004E, 0x006F };
	static uint32_t double_struck_capital_p [] = { 0x0050 };
	static uint32_t double_struck_capital_q [] = { 0x0051 };
	static uint32_t script_capital_r [] = { 0x0052 };
	static uint32_t black_letter_capital_r [] = { 0x0052 };
	static uint32_t double_struck_capital_r [] = { 0x0052 };
	static uint32_t service_mark [] = { 0x0053, 0x004D };
	static uint32_t telephone_sign [] = { 0x0054, 0x0045, 0x004C };
	static uint32_t trade_mark_sign [] = { 0x0054, 0x004D };
	static uint32_t double_struck_capital_z [] = { 0x005A };
	static uint32_t ohm_sign [] = { 0x03A9 };
	static uint32_t black_letter_capital_z [] = { 0x005A };
	static uint32_t kelvin_sign [] = { 0x004B };
	static uint32_t angstrom_sign [] = { 0x00C5 };
	static uint32_t script_capital_b [] = { 0x0042 };
	static uint32_t black_letter_capital_c [] = { 0x0043 };
	static uint32_t script_small_e [] = { 0x0065 };
	static uint32_t script_capital_e [] = { 0x0045 };
	static uint32_t script_capital_f [] = { 0x0046 };
	static uint32_t script_capital_m [] = { 0x004D };
	static uint32_t script_small_o [] = { 0x006F };
	static uint32_t alef_symbol [] = { 0x05D0 };
	static uint32_t bet_symbol [] = { 0x05D1 };
	static uint32_t gimel_symbol [] = { 0x05D2 };
	static uint32_t dalet_symbol [] = { 0x05D3 };
	static uint32_t information_source [] = { 0x0069 };
	static uint32_t facsimile_sign [] = { 0x0046, 0x0041, 0x0058 };
	static uint32_t double_struck_small_pi [] = { 0x03C0 };
	static uint32_t double_struck_small_gamma [] = { 0x03B3 };
	static uint32_t double_struck_capital_gamma [] = { 0x0393 };
	static uint32_t double_struck_capital_pi [] = { 0x03A0 };
	static uint32_t double_struck_n_ary_summation [] = { 0x2211 };
	static uint32_t double_struck_italic_capital_d [] = { 0x0044 };
	static uint32_t double_struck_italic_small_d [] = { 0x0064 };
	static uint32_t double_struck_italic_small_e [] = { 0x0065 };
	static uint32_t double_struck_italic_small_i [] = { 0x0069 };
	static uint32_t double_struck_italic_small_j [] = { 0x006A };
	static uint32_t vulgar_fraction_one_seventh [] = { 0x0031, 0x2044, 0x0037 };
	static uint32_t vulgar_fraction_one_ninth [] = { 0x0031, 0x2044, 0x0039 };
	static uint32_t vulgar_fraction_one_tenth [] = { 0x0031, 0x2044, 0x0031, 0x0030 };
	static uint32_t vulgar_fraction_one_third [] = { 0x0031, 0x2044, 0x0033 };
	static uint32_t vulgar_fraction_two_thirds [] = { 0x0032, 0x2044, 0x0033 };
	static uint32_t vulgar_fraction_one_fifth [] = { 0x0031, 0x2044, 0x0035 };
	static uint32_t vulgar_fraction_two_fifths [] = { 0x0032, 0x2044, 0x0035 };
	static uint32_t vulgar_fraction_three_fifths [] = { 0x0033, 0x2044, 0x0035 };
	static uint32_t vulgar_fraction_four_fifths [] = { 0x0034, 0x2044, 0x0035 };
	static uint32_t vulgar_fraction_one_sixth [] = { 0x0031, 0x2044, 0x0036 };
	static uint32_t vulgar_fraction_five_sixths [] = { 0x0035, 0x2044, 0x0036 };
	static uint32_t vulgar_fraction_one_eighth [] = { 0x0031, 0x2044, 0x0038 };
	static uint32_t vulgar_fraction_three_eighths [] = { 0x0033, 0x2044, 0x0038 };
	static uint32_t vulgar_fraction_five_eighths [] = { 0x0035, 0x2044, 0x0038 };
	static uint32_t vulgar_fraction_seven_eighths [] = { 0x0037, 0x2044, 0x0038 };
	static uint32_t fraction_numerator_one [] = { 0x0031, 0x2044 };
	static uint32_t roman_numeral_one [] = { 0x0049 };
	static uint32_t roman_numeral_two [] = { 0x0049, 0x0049 };
	static uint32_t roman_numeral_three [] = { 0x0049, 0x0049, 0x0049 };
	static uint32_t roman_numeral_four [] = { 0x0049, 0x0056 };
	static uint32_t roman_numeral_five [] = { 0x0056 };
	static uint32_t roman_numeral_six [] = { 0x0056, 0x0049 };
	static uint32_t roman_numeral_seven [] = { 0x0056, 0x0049, 0x0049 };
	static uint32_t roman_numeral_eight [] = { 0x0056, 0x0049, 0x0049, 0x0049 };
	static uint32_t roman_numeral_nine [] = { 0x0049, 0x0058 };
	static uint32_t roman_numeral_ten [] = { 0x0058 };
	static uint32_t roman_numeral_eleven [] = { 0x0058, 0x0049 };
	static uint32_t roman_numeral_twelve [] = { 0x0058, 0x0049, 0x0049 };
	static uint32_t roman_numeral_fifty [] = { 0x004C };
	static uint32_t roman_numeral_one_hundred [] = { 0x0043 };
	static uint32_t roman_numeral_five_hundred [] = { 0x0044 };
	static uint32_t roman_numeral_one_thousand [] = { 0x004D };
	static uint32_t small_roman_numeral_one [] = { 0x0069 };
	static uint32_t small_roman_numeral_two [] = { 0x0069, 0x0069 };
	static uint32_t small_roman_numeral_three [] = { 0x0069, 0x0069, 0x0069 };
	static uint32_t small_roman_numeral_four [] = { 0x0069, 0x0076 };
	static uint32_t small_roman_numeral_five [] = { 0x0076 };
	static uint32_t small_roman_numeral_six [] = { 0x0076, 0x0069 };
	static uint32_t small_roman_numeral_seven [] = { 0x0076, 0x0069, 0x0069 };
	static uint32_t small_roman_numeral_eight [] = { 0x0076, 0x0069, 0x0069, 0x0069 };
	static uint32_t small_roman_numeral_nine [] = { 0x0069, 0x0078 };
	static uint32_t small_roman_numeral_ten [] = { 0x0078 };
	static uint32_t small_roman_numeral_eleven [] = { 0x0078, 0x0069 };
	static uint32_t small_roman_numeral_twelve [] = { 0x0078, 0x0069, 0x0069 };
	static uint32_t small_roman_numeral_fifty [] = { 0x006C };
	static uint32_t small_roman_numeral_one_hundred [] = { 0x0063 };
	static uint32_t small_roman_numeral_five_hundred [] = { 0x0064 };
	static uint32_t small_roman_numeral_one_thousand [] = { 0x006D };
	static uint32_t vulgar_fraction_zero_thirds [] = { 0x0030, 0x2044, 0x0033 };
	static uint32_t leftwards_arrow_with_stroke [] = { 0x2190, 0x0338 };
	static uint32_t rightwards_arrow_with_stroke [] = { 0x2192, 0x0338 };
	static uint32_t left_right_arrow_with_stroke [] = { 0x2194, 0x0338 };
	static uint32_t leftwards_double_arrow_with_stroke [] = { 0x21D0, 0x0338 };
	static uint32_t left_right_double_arrow_with_stroke [] = { 0x21D4, 0x0338 };
	static uint32_t rightwards_double_arrow_with_stroke [] = { 0x21D2, 0x0338 };
	static uint32_t there_does_not_exist [] = { 0x2203, 0x0338 };
	static uint32_t not_an_element_of [] = { 0x2208, 0x0338 };
	static uint32_t does_not_contain_as_member [] = { 0x220B, 0x0338 };
	static uint32_t does_not_divide [] = { 0x2223, 0x0338 };
	static uint32_t not_parallel_to [] = { 0x2225, 0x0338 };
	static uint32_t double_integral [] = { 0x222B, 0x222B };
	static uint32_t triple_integral [] = { 0x222B, 0x222B, 0x222B };
	static uint32_t surface_integral [] = { 0x222E, 0x222E };
	static uint32_t volume_integral [] = { 0x222E, 0x222E, 0x222E };
	static uint32_t not_tilde [] = { 0x223C, 0x0338 };
	static uint32_t not_asymptotically_equal_to [] = { 0x2243, 0x0338 };
	static uint32_t neither_approximately_nor_actually_equal_to [] = { 0x2245, 0x0338 };
	static uint32_t not_almost_equal_to [] = { 0x2248, 0x0338 };
	static uint32_t not_equal_to [] = { 0x003D, 0x0338 };
	static uint32_t not_identical_to [] = { 0x2261, 0x0338 };
	static uint32_t not_equivalent_to [] = { 0x224D, 0x0338 };
	static uint32_t not_less_than [] = { 0x003C, 0x0338 };
	static uint32_t not_greater_than [] = { 0x003E, 0x0338 };
	static uint32_t neither_less_than_nor_equal_to [] = { 0x2264, 0x0338 };
	static uint32_t neither_greater_than_nor_equal_to [] = { 0x2265, 0x0338 };
	static uint32_t neither_less_than_nor_equivalent_to [] = { 0x2272, 0x0338 };
	static uint32_t neither_greater_than_nor_equivalent_to [] = { 0x2273, 0x0338 };
	static uint32_t neither_less_than_nor_greater_than [] = { 0x2276, 0x0338 };
	static uint32_t neither_greater_than_nor_less_than [] = { 0x2277, 0x0338 };
	static uint32_t does_not_precede [] = { 0x227A, 0x0338 };
	static uint32_t does_not_succeed [] = { 0x227B, 0x0338 };
	static uint32_t not_a_subset_of [] = { 0x2282, 0x0338 };
	static uint32_t not_a_superset_of [] = { 0x2283, 0x0338 };
	static uint32_t neither_a_subset_of_nor_equal_to [] = { 0x2286, 0x0338 };
	static uint32_t neither_a_superset_of_nor_equal_to [] = { 0x2287, 0x0338 };
	static uint32_t does_not_prove [] = { 0x22A2, 0x0338 };
	static uint32_t not_true [] = { 0x22A8, 0x0338 };
	static uint32_t does_not_force [] = { 0x22A9, 0x0338 };
	static uint32_t negated_double_vertical_bar_double_right_turnstile [] = { 0x22AB, 0x0338 };
	static uint32_t does_not_precede_or_equal [] = { 0x227C, 0x0338 };
	static uint32_t does_not_succeed_or_equal [] = { 0x227D, 0x0338 };
	static uint32_t not_square_image_of_or_equal_to [] = { 0x2291, 0x0338 };
	static uint32_t not_square_original_of_or_equal_to [] = { 0x2292, 0x0338 };
	static uint32_t not_normal_subgroup_of [] = { 0x22B2, 0x0338 };
	static uint32_t does_not_contain_as_normal_subgroup [] = { 0x22B3, 0x0338 };
	static uint32_t not_normal_subgroup_of_or_equal_to [] = { 0x22B4, 0x0338 };
	static uint32_t does_not_contain_as_normal_subgroup_or_equal [] = { 0x22B5, 0x0338 };
	static uint32_t left_pointing_angle_bracket [] = { 0x3008 };
	static uint32_t right_pointing_angle_bracket [] = { 0x3009 };
	static uint32_t circled_digit_one [] = { 0x0031 };
	static uint32_t circled_digit_two [] = { 0x0032 };
	static uint32_t circled_digit_three [] = { 0x0033 };
	static uint32_t circled_digit_four [] = { 0x0034 };
	static uint32_t circled_digit_five [] = { 0x0035 };
	static uint32_t circled_digit_six [] = { 0x0036 };
	static uint32_t circled_digit_seven [] = { 0x0037 };
	static uint32_t circled_digit_eight [] = { 0x0038 };
	static uint32_t circled_digit_nine [] = { 0x0039 };
	static uint32_t circled_number_ten [] = { 0x0031, 0x0030 };
	static uint32_t circled_number_eleven [] = { 0x0031, 0x0031 };
	static uint32_t circled_number_twelve [] = { 0x0031, 0x0032 };
	static uint32_t circled_number_thirteen [] = { 0x0031, 0x0033 };
	static uint32_t circled_number_fourteen [] = { 0x0031, 0x0034 };
	static uint32_t circled_number_fifteen [] = { 0x0031, 0x0035 };
	static uint32_t circled_number_sixteen [] = { 0x0031, 0x0036 };
	static uint32_t circled_number_seventeen [] = { 0x0031, 0x0037 };
	static uint32_t circled_number_eighteen [] = { 0x0031, 0x0038 };
	static uint32_t circled_number_nineteen [] = { 0x0031, 0x0039 };
	static uint32_t circled_number_twenty [] = { 0x0032, 0x0030 };
	static uint32_t parenthesized_digit_one [] = { 0x0028, 0x0031, 0x0029 };
	static uint32_t parenthesized_digit_two [] = { 0x0028, 0x0032, 0x0029 };
	static uint32_t parenthesized_digit_three [] = { 0x0028, 0x0033, 0x0029 };
	static uint32_t parenthesized_digit_four [] = { 0x0028, 0x0034, 0x0029 };
	static uint32_t parenthesized_digit_five [] = { 0x0028, 0x0035, 0x0029 };
	static uint32_t parenthesized_digit_six [] = { 0x0028, 0x0036, 0x0029 };
	static uint32_t parenthesized_digit_seven [] = { 0x0028, 0x0037, 0x0029 };
	static uint32_t parenthesized_digit_eight [] = { 0x0028, 0x0038, 0x0029 };
	static uint32_t parenthesized_digit_nine [] = { 0x0028, 0x0039, 0x0029 };
	static uint32_t parenthesized_number_ten [] = { 0x0028, 0x0031, 0x0030, 0x0029 };
	static uint32_t parenthesized_number_eleven [] = { 0x0028, 0x0031, 0x0031, 0x0029 };
	static uint32_t parenthesized_number_twelve [] = { 0x0028, 0x0031, 0x0032, 0x0029 };
	static uint32_t parenthesized_number_thirteen [] = { 0x0028, 0x0031, 0x0033, 0x0029 };
	static uint32_t parenthesized_number_fourteen [] = { 0x0028, 0x0031, 0x0034, 0x0029 };
	static uint32_t parenthesized_number_fifteen [] = { 0x0028, 0x0031, 0x0035, 0x0029 };
	static uint32_t parenthesized_number_sixteen [] = { 0x0028, 0x0031, 0x0036, 0x0029 };
	static uint32_t parenthesized_number_seventeen [] = { 0x0028, 0x0031, 0x0037, 0x0029 };
	static uint32_t parenthesized_number_eighteen [] = { 0x0028, 0x0031, 0x0038, 0x0029 };
	static uint32_t parenthesized_number_nineteen [] = { 0x0028, 0x0031, 0x0039, 0x0029 };
	static uint32_t parenthesized_number_twenty [] = { 0x0028, 0x0032, 0x0030, 0x0029 };
	static uint32_t digit_one_full_stop [] = { 0x0031, 0x002E };
	static uint32_t digit_two_full_stop [] = { 0x0032, 0x002E };
	static uint32_t digit_three_full_stop [] = { 0x0033, 0x002E };
	static uint32_t digit_four_full_stop [] = { 0x0034, 0x002E };
	static uint32_t digit_five_full_stop [] = { 0x0035, 0x002E };
	static uint32_t digit_six_full_stop [] = { 0x0036, 0x002E };
	static uint32_t digit_seven_full_stop [] = { 0x0037, 0x002E };
	static uint32_t digit_eight_full_stop [] = { 0x0038, 0x002E };
	static uint32_t digit_nine_full_stop [] = { 0x0039, 0x002E };
	static uint32_t number_ten_full_stop [] = { 0x0031, 0x0030, 0x002E };
	static uint32_t number_eleven_full_stop [] = { 0x0031, 0x0031, 0x002E };
	static uint32_t number_twelve_full_stop [] = { 0x0031, 0x0032, 0x002E };
	static uint32_t number_thirteen_full_stop [] = { 0x0031, 0x0033, 0x002E };
	static uint32_t number_fourteen_full_stop [] = { 0x0031, 0x0034, 0x002E };
	static uint32_t number_fifteen_full_stop [] = { 0x0031, 0x0035, 0x002E };
	static uint32_t number_sixteen_full_stop [] = { 0x0031, 0x0036, 0x002E };
	static uint32_t number_seventeen_full_stop [] = { 0x0031, 0x0037, 0x002E };
	static uint32_t number_eighteen_full_stop [] = { 0x0031, 0x0038, 0x002E };
	static uint32_t number_nineteen_full_stop [] = { 0x0031, 0x0039, 0x002E };
	static uint32_t number_twenty_full_stop [] = { 0x0032, 0x0030, 0x002E };
	static uint32_t parenthesized_latin_small_letter_a [] = { 0x0028, 0x0061, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_b [] = { 0x0028, 0x0062, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_c [] = { 0x0028, 0x0063, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_d [] = { 0x0028, 0x0064, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_e [] = { 0x0028, 0x0065, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_f [] = { 0x0028, 0x0066, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_g [] = { 0x0028, 0x0067, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_h [] = { 0x0028, 0x0068, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_i [] = { 0x0028, 0x0069, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_j [] = { 0x0028, 0x006A, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_k [] = { 0x0028, 0x006B, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_l [] = { 0x0028, 0x006C, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_m [] = { 0x0028, 0x006D, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_n [] = { 0x0028, 0x006E, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_o [] = { 0x0028, 0x006F, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_p [] = { 0x0028, 0x0070, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_q [] = { 0x0028, 0x0071, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_r [] = { 0x0028, 0x0072, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_s [] = { 0x0028, 0x0073, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_t [] = { 0x0028, 0x0074, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_u [] = { 0x0028, 0x0075, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_v [] = { 0x0028, 0x0076, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_w [] = { 0x0028, 0x0077, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_x [] = { 0x0028, 0x0078, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_y [] = { 0x0028, 0x0079, 0x0029 };
	static uint32_t parenthesized_latin_small_letter_z [] = { 0x0028, 0x007A, 0x0029 };
	static uint32_t circled_latin_capital_letter_a [] = { 0x0041 };
	static uint32_t circled_latin_capital_letter_b [] = { 0x0042 };
	static uint32_t circled_latin_capital_letter_c [] = { 0x0043 };
	static uint32_t circled_latin_capital_letter_d [] = { 0x0044 };
	static uint32_t circled_latin_capital_letter_e [] = { 0x0045 };
	static uint32_t circled_latin_capital_letter_f [] = { 0x0046 };
	static uint32_t circled_latin_capital_letter_g [] = { 0x0047 };
	static uint32_t circled_latin_capital_letter_h [] = { 0x0048 };
	static uint32_t circled_latin_capital_letter_i [] = { 0x0049 };
	static uint32_t circled_latin_capital_letter_j [] = { 0x004A };
	static uint32_t circled_latin_capital_letter_k [] = { 0x004B };
	static uint32_t circled_latin_capital_letter_l [] = { 0x004C };
	static uint32_t circled_latin_capital_letter_m [] = { 0x004D };
	static uint32_t circled_latin_capital_letter_n [] = { 0x004E };
	static uint32_t circled_latin_capital_letter_o [] = { 0x004F };
	static uint32_t circled_latin_capital_letter_p [] = { 0x0050 };
	static uint32_t circled_latin_capital_letter_q [] = { 0x0051 };
	static uint32_t circled_latin_capital_letter_r [] = { 0x0052 };
	static uint32_t circled_latin_capital_letter_s [] = { 0x0053 };
	static uint32_t circled_latin_capital_letter_t [] = { 0x0054 };
	static uint32_t circled_latin_capital_letter_u [] = { 0x0055 };
	static uint32_t circled_latin_capital_letter_v [] = { 0x0056 };
	static uint32_t circled_latin_capital_letter_w [] = { 0x0057 };
	static uint32_t circled_latin_capital_letter_x [] = { 0x0058 };
	static uint32_t circled_latin_capital_letter_y [] = { 0x0059 };
	static uint32_t circled_latin_capital_letter_z [] = { 0x005A };
	static uint32_t circled_latin_small_letter_a [] = { 0x0061 };
	static uint32_t circled_latin_small_letter_b [] = { 0x0062 };
	static uint32_t circled_latin_small_letter_c [] = { 0x0063 };
	static uint32_t circled_latin_small_letter_d [] = { 0x0064 };
	static uint32_t circled_latin_small_letter_e [] = { 0x0065 };
	static uint32_t circled_latin_small_letter_f [] = { 0x0066 };
	static uint32_t circled_latin_small_letter_g [] = { 0x0067 };
	static uint32_t circled_latin_small_letter_h [] = { 0x0068 };
	static uint32_t circled_latin_small_letter_i [] = { 0x0069 };
	static uint32_t circled_latin_small_letter_j [] = { 0x006A };
	static uint32_t circled_latin_small_letter_k [] = { 0x006B };
	static uint32_t circled_latin_small_letter_l [] = { 0x006C };
	static uint32_t circled_latin_small_letter_m [] = { 0x006D };
	static uint32_t circled_latin_small_letter_n [] = { 0x006E };
	static uint32_t circled_latin_small_letter_o [] = { 0x006F };
	static uint32_t circled_latin_small_letter_p [] = { 0x0070 };
	static uint32_t circled_latin_small_letter_q [] = { 0x0071 };
	static uint32_t circled_latin_small_letter_r [] = { 0x0072 };
	static uint32_t circled_latin_small_letter_s [] = { 0x0073 };
	static uint32_t circled_latin_small_letter_t [] = { 0x0074 };
	static uint32_t circled_latin_small_letter_u [] = { 0x0075 };
	static uint32_t circled_latin_small_letter_v [] = { 0x0076 };
	static uint32_t circled_latin_small_letter_w [] = { 0x0077 };
	static uint32_t circled_latin_small_letter_x [] = { 0x0078 };
	static uint32_t circled_latin_small_letter_y [] = { 0x0079 };
	static uint32_t circled_latin_small_letter_z [] = { 0x007A };
	static uint32_t circled_digit_zero [] = { 0x0030 };
	static uint32_t quadruple_integral_operator [] = { 0x222B, 0x222B, 0x222B, 0x222B };
	static uint32_t double_colon_equal [] = { 0x003A, 0x003A, 0x003D };
	static uint32_t two_consecutive_equals_signs [] = { 0x003D, 0x003D };
	static uint32_t three_consecutive_equals_signs [] = { 0x003D, 0x003D, 0x003D };
	static uint32_t forking [] = { 0x2ADD, 0x0338 };
	static uint32_t latin_subscript_small_letter_j [] = { 0x006A };
	static uint32_t modifier_letter_capital_v [] = { 0x0056 };
	static uint32_t tifinagh_modifier_letter_labialization_mark [] = { 0x2D61 };
	static uint32_t cjk_radical_mother [] = { 0x6BCD };
	static uint32_t cjk_radical_c_simplified_turtle [] = { 0x9F9F };
	static uint32_t kangxi_radical_one [] = { 0x4E00 };
	static uint32_t kangxi_radical_line [] = { 0x4E28 };
	static uint32_t kangxi_radical_dot [] = { 0x4E36 };
	static uint32_t kangxi_radical_slash [] = { 0x4E3F };
	static uint32_t kangxi_radical_second [] = { 0x4E59 };
	static uint32_t kangxi_radical_hook [] = { 0x4E85 };
	static uint32_t kangxi_radical_two [] = { 0x4E8C };
	static uint32_t kangxi_radical_lid [] = { 0x4EA0 };
	static uint32_t kangxi_radical_man [] = { 0x4EBA };
	static uint32_t kangxi_radical_legs [] = { 0x513F };
	static uint32_t kangxi_radical_enter [] = { 0x5165 };
	static uint32_t kangxi_radical_eight [] = { 0x516B };
	static uint32_t kangxi_radical_down_box [] = { 0x5182 };
	static uint32_t kangxi_radical_cover [] = { 0x5196 };
	static uint32_t kangxi_radical_ice [] = { 0x51AB };
	static uint32_t kangxi_radical_table [] = { 0x51E0 };
	static uint32_t kangxi_radical_open_box [] = { 0x51F5 };
	static uint32_t kangxi_radical_knife [] = { 0x5200 };
	static uint32_t kangxi_radical_power [] = { 0x529B };
	static uint32_t kangxi_radical_wrap [] = { 0x52F9 };
	static uint32_t kangxi_radical_spoon [] = { 0x5315 };
	static uint32_t kangxi_radical_right_open_box [] = { 0x531A };
	static uint32_t kangxi_radical_hiding_enclosure [] = { 0x5338 };
	static uint32_t kangxi_radical_ten [] = { 0x5341 };
	static uint32_t kangxi_radical_divination [] = { 0x535C };
	static uint32_t kangxi_radical_seal [] = { 0x5369 };
	static uint32_t kangxi_radical_cliff [] = { 0x5382 };
	static uint32_t kangxi_radical_private [] = { 0x53B6 };
	static uint32_t kangxi_radical_again [] = { 0x53C8 };
	static uint32_t kangxi_radical_mouth [] = { 0x53E3 };
	static uint32_t kangxi_radical_enclosure [] = { 0x56D7 };
	static uint32_t kangxi_radical_earth [] = { 0x571F };
	static uint32_t kangxi_radical_scholar [] = { 0x58EB };
	static uint32_t kangxi_radical_go [] = { 0x5902 };
	static uint32_t kangxi_radical_go_slowly [] = { 0x590A };
	static uint32_t kangxi_radical_evening [] = { 0x5915 };
	static uint32_t kangxi_radical_big [] = { 0x5927 };
	static uint32_t kangxi_radical_woman [] = { 0x5973 };
	static uint32_t kangxi_radical_child [] = { 0x5B50 };
	static uint32_t kangxi_radical_roof [] = { 0x5B80 };
	static uint32_t kangxi_radical_inch [] = { 0x5BF8 };
	static uint32_t kangxi_radical_small [] = { 0x5C0F };
	static uint32_t kangxi_radical_lame [] = { 0x5C22 };
	static uint32_t kangxi_radical_corpse [] = { 0x5C38 };
	static uint32_t kangxi_radical_sprout [] = { 0x5C6E };
	static uint32_t kangxi_radical_mountain [] = { 0x5C71 };
	static uint32_t kangxi_radical_river [] = { 0x5DDB };
	static uint32_t kangxi_radical_work [] = { 0x5DE5 };
	static uint32_t kangxi_radical_oneself [] = { 0x5DF1 };
	static uint32_t kangxi_radical_turban [] = { 0x5DFE };
	static uint32_t kangxi_radical_dry [] = { 0x5E72 };
	static uint32_t kangxi_radical_short_thread [] = { 0x5E7A };
	static uint32_t kangxi_radical_dotted_cliff [] = { 0x5E7F };
	static uint32_t kangxi_radical_long_stride [] = { 0x5EF4 };
	static uint32_t kangxi_radical_two_hands [] = { 0x5EFE };
	static uint32_t kangxi_radical_shoot [] = { 0x5F0B };
	static uint32_t kangxi_radical_bow [] = { 0x5F13 };
	static uint32_t kangxi_radical_snout [] = { 0x5F50 };
	static uint32_t kangxi_radical_bristle [] = { 0x5F61 };
	static uint32_t kangxi_radical_step [] = { 0x5F73 };
	static uint32_t kangxi_radical_heart [] = { 0x5FC3 };
	static uint32_t kangxi_radical_halberd [] = { 0x6208 };
	static uint32_t kangxi_radical_door [] = { 0x6236 };
	static uint32_t kangxi_radical_hand [] = { 0x624B };
	static uint32_t kangxi_radical_branch [] = { 0x652F };
	static uint32_t kangxi_radical_rap [] = { 0x6534 };
	static uint32_t kangxi_radical_script [] = { 0x6587 };
	static uint32_t kangxi_radical_dipper [] = { 0x6597 };
	static uint32_t kangxi_radical_axe [] = { 0x65A4 };
	static uint32_t kangxi_radical_square [] = { 0x65B9 };
	static uint32_t kangxi_radical_not [] = { 0x65E0 };
	static uint32_t kangxi_radical_sun [] = { 0x65E5 };
	static uint32_t kangxi_radical_say [] = { 0x66F0 };
	static uint32_t kangxi_radical_moon [] = { 0x6708 };
	static uint32_t kangxi_radical_tree [] = { 0x6728 };
	static uint32_t kangxi_radical_lack [] = { 0x6B20 };
	static uint32_t kangxi_radical_stop [] = { 0x6B62 };
	static uint32_t kangxi_radical_death [] = { 0x6B79 };
	static uint32_t kangxi_radical_weapon [] = { 0x6BB3 };
	static uint32_t kangxi_radical_do_not [] = { 0x6BCB };
	static uint32_t kangxi_radical_compare [] = { 0x6BD4 };
	static uint32_t kangxi_radical_fur [] = { 0x6BDB };
	static uint32_t kangxi_radical_clan [] = { 0x6C0F };
	static uint32_t kangxi_radical_steam [] = { 0x6C14 };
	static uint32_t kangxi_radical_water [] = { 0x6C34 };
	static uint32_t kangxi_radical_fire [] = { 0x706B };
	static uint32_t kangxi_radical_claw [] = { 0x722A };
	static uint32_t kangxi_radical_father [] = { 0x7236 };
	static uint32_t kangxi_radical_double_x [] = { 0x723B };
	static uint32_t kangxi_radical_half_tree_trunk [] = { 0x723F };
	static uint32_t kangxi_radical_slice [] = { 0x7247 };
	static uint32_t kangxi_radical_fang [] = { 0x7259 };
	static uint32_t kangxi_radical_cow [] = { 0x725B };
	static uint32_t kangxi_radical_dog [] = { 0x72AC };
	static uint32_t kangxi_radical_profound [] = { 0x7384 };
	static uint32_t kangxi_radical_jade [] = { 0x7389 };
	static uint32_t kangxi_radical_melon [] = { 0x74DC };
	static uint32_t kangxi_radical_tile [] = { 0x74E6 };
	static uint32_t kangxi_radical_sweet [] = { 0x7518 };
	static uint32_t kangxi_radical_life [] = { 0x751F };
	static uint32_t kangxi_radical_use [] = { 0x7528 };
	static uint32_t kangxi_radical_field [] = { 0x7530 };
	static uint32_t kangxi_radical_bolt_of_cloth [] = { 0x758B };
	static uint32_t kangxi_radical_sickness [] = { 0x7592 };
	static uint32_t kangxi_radical_dotted_tent [] = { 0x7676 };
	static uint32_t kangxi_radical_white [] = { 0x767D };
	static uint32_t kangxi_radical_skin [] = { 0x76AE };
	static uint32_t kangxi_radical_dish [] = { 0x76BF };
	static uint32_t kangxi_radical_eye [] = { 0x76EE };
	static uint32_t kangxi_radical_spear [] = { 0x77DB };
	static uint32_t kangxi_radical_arrow [] = { 0x77E2 };
	static uint32_t kangxi_radical_stone [] = { 0x77F3 };
	static uint32_t kangxi_radical_spirit [] = { 0x793A };
	static uint32_t kangxi_radical_track [] = { 0x79B8 };
	static uint32_t kangxi_radical_grain [] = { 0x79BE };
	static uint32_t kangxi_radical_cave [] = { 0x7A74 };
	static uint32_t kangxi_radical_stand [] = { 0x7ACB };
	static uint32_t kangxi_radical_bamboo [] = { 0x7AF9 };
	static uint32_t kangxi_radical_rice [] = { 0x7C73 };
	static uint32_t kangxi_radical_silk [] = { 0x7CF8 };
	static uint32_t kangxi_radical_jar [] = { 0x7F36 };
	static uint32_t kangxi_radical_net [] = { 0x7F51 };
	static uint32_t kangxi_radical_sheep [] = { 0x7F8A };
	static uint32_t kangxi_radical_feather [] = { 0x7FBD };
	static uint32_t kangxi_radical_old [] = { 0x8001 };
	static uint32_t kangxi_radical_and [] = { 0x800C };
	static uint32_t kangxi_radical_plow [] = { 0x8012 };
	static uint32_t kangxi_radical_ear [] = { 0x8033 };
	static uint32_t kangxi_radical_brush [] = { 0x807F };
	static uint32_t kangxi_radical_meat [] = { 0x8089 };
	static uint32_t kangxi_radical_minister [] = { 0x81E3 };
	static uint32_t kangxi_radical_self [] = { 0x81EA };
	static uint32_t kangxi_radical_arrive [] = { 0x81F3 };
	static uint32_t kangxi_radical_mortar [] = { 0x81FC };
	static uint32_t kangxi_radical_tongue [] = { 0x820C };
	static uint32_t kangxi_radical_oppose [] = { 0x821B };
	static uint32_t kangxi_radical_boat [] = { 0x821F };
	static uint32_t kangxi_radical_stopping [] = { 0x826E };
	static uint32_t kangxi_radical_color [] = { 0x8272 };
	static uint32_t kangxi_radical_grass [] = { 0x8278 };
	static uint32_t kangxi_radical_tiger [] = { 0x864D };
	static uint32_t kangxi_radical_insect [] = { 0x866B };
	static uint32_t kangxi_radical_blood [] = { 0x8840 };
	static uint32_t kangxi_radical_walk_enclosure [] = { 0x884C };
	static uint32_t kangxi_radical_clothes [] = { 0x8863 };
	static uint32_t kangxi_radical_west [] = { 0x897E };
	static uint32_t kangxi_radical_see [] = { 0x898B };
	static uint32_t kangxi_radical_horn [] = { 0x89D2 };
	static uint32_t kangxi_radical_speech [] = { 0x8A00 };
	static uint32_t kangxi_radical_valley [] = { 0x8C37 };
	static uint32_t kangxi_radical_bean [] = { 0x8C46 };
	static uint32_t kangxi_radical_pig [] = { 0x8C55 };
	static uint32_t kangxi_radical_badger [] = { 0x8C78 };
	static uint32_t kangxi_radical_shell [] = { 0x8C9D };
	static uint32_t kangxi_radical_red [] = { 0x8D64 };
	static uint32_t kangxi_radical_run [] = { 0x8D70 };
	static uint32_t kangxi_radical_foot [] = { 0x8DB3 };
	static uint32_t kangxi_radical_body [] = { 0x8EAB };
	static uint32_t kangxi_radical_cart [] = { 0x8ECA };
	static uint32_t kangxi_radical_bitter [] = { 0x8F9B };
	static uint32_t kangxi_radical_morning [] = { 0x8FB0 };
	static uint32_t kangxi_radical_walk [] = { 0x8FB5 };
	static uint32_t kangxi_radical_city [] = { 0x9091 };
	static uint32_t kangxi_radical_wine [] = { 0x9149 };
	static uint32_t kangxi_radical_distinguish [] = { 0x91C6 };
	static uint32_t kangxi_radical_village [] = { 0x91CC };
	static uint32_t kangxi_radical_gold [] = { 0x91D1 };
	static uint32_t kangxi_radical_long [] = { 0x9577 };
	static uint32_t kangxi_radical_gate [] = { 0x9580 };
	static uint32_t kangxi_radical_mound [] = { 0x961C };
	static uint32_t kangxi_radical_slave [] = { 0x96B6 };
	static uint32_t kangxi_radical_short_tailed_bird [] = { 0x96B9 };
	static uint32_t kangxi_radical_rain [] = { 0x96E8 };
	static uint32_t kangxi_radical_blue [] = { 0x9751 };
	static uint32_t kangxi_radical_wrong [] = { 0x975E };
	static uint32_t kangxi_radical_face [] = { 0x9762 };
	static uint32_t kangxi_radical_leather [] = { 0x9769 };
	static uint32_t kangxi_radical_tanned_leather [] = { 0x97CB };
	static uint32_t kangxi_radical_leek [] = { 0x97ED };
	static uint32_t kangxi_radical_sound [] = { 0x97F3 };
	static uint32_t kangxi_radical_leaf [] = { 0x9801 };
	static uint32_t kangxi_radical_wind [] = { 0x98A8 };
	static uint32_t kangxi_radical_fly [] = { 0x98DB };
	static uint32_t kangxi_radical_eat [] = { 0x98DF };
	static uint32_t kangxi_radical_head [] = { 0x9996 };
	static uint32_t kangxi_radical_fragrant [] = { 0x9999 };
	static uint32_t kangxi_radical_horse [] = { 0x99AC };
	static uint32_t kangxi_radical_bone [] = { 0x9AA8 };
	static uint32_t kangxi_radical_tall [] = { 0x9AD8 };
	static uint32_t kangxi_radical_hair [] = { 0x9ADF };
	static uint32_t kangxi_radical_fight [] = { 0x9B25 };
	static uint32_t kangxi_radical_sacrificial_wine [] = { 0x9B2F };
	static uint32_t kangxi_radical_cauldron [] = { 0x9B32 };
	static uint32_t kangxi_radical_ghost [] = { 0x9B3C };
	static uint32_t kangxi_radical_fish [] = { 0x9B5A };
	static uint32_t kangxi_radical_bird [] = { 0x9CE5 };
	static uint32_t kangxi_radical_salt [] = { 0x9E75 };
	static uint32_t kangxi_radical_deer [] = { 0x9E7F };
	static uint32_t kangxi_radical_wheat [] = { 0x9EA5 };
	static uint32_t kangxi_radical_hemp [] = { 0x9EBB };
	static uint32_t kangxi_radical_yellow [] = { 0x9EC3 };
	static uint32_t kangxi_radical_millet [] = { 0x9ECD };
	static uint32_t kangxi_radical_black [] = { 0x9ED1 };
	static uint32_t kangxi_radical_embroidery [] = { 0x9EF9 };
	static uint32_t kangxi_radical_frog [] = { 0x9EFD };
	static uint32_t kangxi_radical_tripod [] = { 0x9F0E };
	static uint32_t kangxi_radical_drum [] = { 0x9F13 };
	static uint32_t kangxi_radical_rat [] = { 0x9F20 };
	static uint32_t kangxi_radical_nose [] = { 0x9F3B };
	static uint32_t kangxi_radical_even [] = { 0x9F4A };
	static uint32_t kangxi_radical_tooth [] = { 0x9F52 };
	static uint32_t kangxi_radical_dragon [] = { 0x9F8D };
	static uint32_t kangxi_radical_turtle [] = { 0x9F9C };
	static uint32_t kangxi_radical_flute [] = { 0x9FA0 };
	static uint32_t ideographic_space [] = { 0x0020 };
	static uint32_t circled_postal_mark [] = { 0x3012 };
	static uint32_t hangzhou_numeral_ten [] = { 0x5341 };
	static uint32_t hangzhou_numeral_twenty [] = { 0x5344 };
	static uint32_t hangzhou_numeral_thirty [] = { 0x5345 };
	static uint32_t hiragana_letter_ga [] = { 0x304B, 0x3099 };
	static uint32_t hiragana_letter_gi [] = { 0x304D, 0x3099 };
	static uint32_t hiragana_letter_gu [] = { 0x304F, 0x3099 };
	static uint32_t hiragana_letter_ge [] = { 0x3051, 0x3099 };
	static uint32_t hiragana_letter_go [] = { 0x3053, 0x3099 };
	static uint32_t hiragana_letter_za [] = { 0x3055, 0x3099 };
	static uint32_t hiragana_letter_zi [] = { 0x3057, 0x3099 };
	static uint32_t hiragana_letter_zu [] = { 0x3059, 0x3099 };
	static uint32_t hiragana_letter_ze [] = { 0x305B, 0x3099 };
	static uint32_t hiragana_letter_zo [] = { 0x305D, 0x3099 };
	static uint32_t hiragana_letter_da [] = { 0x305F, 0x3099 };
	static uint32_t hiragana_letter_di [] = { 0x3061, 0x3099 };
	static uint32_t hiragana_letter_du [] = { 0x3064, 0x3099 };
	static uint32_t hiragana_letter_de [] = { 0x3066, 0x3099 };
	static uint32_t hiragana_letter_do [] = { 0x3068, 0x3099 };
	static uint32_t hiragana_letter_ba [] = { 0x306F, 0x3099 };
	static uint32_t hiragana_letter_pa [] = { 0x306F, 0x309A };
	static uint32_t hiragana_letter_bi [] = { 0x3072, 0x3099 };
	static uint32_t hiragana_letter_pi [] = { 0x3072, 0x309A };
	static uint32_t hiragana_letter_bu [] = { 0x3075, 0x3099 };
	static uint32_t hiragana_letter_pu [] = { 0x3075, 0x309A };
	static uint32_t hiragana_letter_be [] = { 0x3078, 0x3099 };
	static uint32_t hiragana_letter_pe [] = { 0x3078, 0x309A };
	static uint32_t hiragana_letter_bo [] = { 0x307B, 0x3099 };
	static uint32_t hiragana_letter_po [] = { 0x307B, 0x309A };
	static uint32_t hiragana_letter_vu [] = { 0x3046, 0x3099 };
	static uint32_t katakana_hiragana_voiced_sound_mark [] = { 0x0020, 0x3099 };
	static uint32_t katakana_hiragana_semi_voiced_sound_mark [] = { 0x0020, 0x309A };
	static uint32_t hiragana_voiced_iteration_mark [] = { 0x309D, 0x3099 };
	static uint32_t hiragana_digraph_yori [] = { 0x3088, 0x308A };
	static uint32_t katakana_letter_ga [] = { 0x30AB, 0x3099 };
	static uint32_t katakana_letter_gi [] = { 0x30AD, 0x3099 };
	static uint32_t katakana_letter_gu [] = { 0x30AF, 0x3099 };
	static uint32_t katakana_letter_ge [] = { 0x30B1, 0x3099 };
	static uint32_t katakana_letter_go [] = { 0x30B3, 0x3099 };
	static uint32_t katakana_letter_za [] = { 0x30B5, 0x3099 };
	static uint32_t katakana_letter_zi [] = { 0x30B7, 0x3099 };
	static uint32_t katakana_letter_zu [] = { 0x30B9, 0x3099 };
	static uint32_t katakana_letter_ze [] = { 0x30BB, 0x3099 };
	static uint32_t katakana_letter_zo [] = { 0x30BD, 0x3099 };
	static uint32_t katakana_letter_da [] = { 0x30BF, 0x3099 };
	static uint32_t katakana_letter_di [] = { 0x30C1, 0x3099 };
	static uint32_t katakana_letter_du [] = { 0x30C4, 0x3099 };
	static uint32_t katakana_letter_de [] = { 0x30C6, 0x3099 };
	static uint32_t katakana_letter_do [] = { 0x30C8, 0x3099 };
	static uint32_t katakana_letter_ba [] = { 0x30CF, 0x3099 };
	static uint32_t katakana_letter_pa [] = { 0x30CF, 0x309A };
	static uint32_t katakana_letter_bi [] = { 0x30D2, 0x3099 };
	static uint32_t katakana_letter_pi [] = { 0x30D2, 0x309A };
	static uint32_t katakana_letter_bu [] = { 0x30D5, 0x3099 };
	static uint32_t katakana_letter_pu [] = { 0x30D5, 0x309A };
	static uint32_t katakana_letter_be [] = { 0x30D8, 0x3099 };
	static uint32_t katakana_letter_pe [] = { 0x30D8, 0x309A };
	static uint32_t katakana_letter_bo [] = { 0x30DB, 0x3099 };
	static uint32_t katakana_letter_po [] = { 0x30DB, 0x309A };
	static uint32_t katakana_letter_vu [] = { 0x30A6, 0x3099 };
	static uint32_t katakana_letter_va [] = { 0x30EF, 0x3099 };
	static uint32_t katakana_letter_vi [] = { 0x30F0, 0x3099 };
	static uint32_t katakana_letter_ve [] = { 0x30F1, 0x3099 };
	static uint32_t katakana_letter_vo [] = { 0x30F2, 0x3099 };
	static uint32_t katakana_voiced_iteration_mark [] = { 0x30FD, 0x3099 };
	static uint32_t katakana_digraph_koto [] = { 0x30B3, 0x30C8 };
	static uint32_t hangul_letter_kiyeok [] = { 0x1100 };
	static uint32_t hangul_letter_ssangkiyeok [] = { 0x1101 };
	static uint32_t hangul_letter_kiyeok_sios [] = { 0x11AA };
	static uint32_t hangul_letter_nieun [] = { 0x1102 };
	static uint32_t hangul_letter_nieun_cieuc [] = { 0x11AC };
	static uint32_t hangul_letter_nieun_hieuh [] = { 0x11AD };
	static uint32_t hangul_letter_tikeut [] = { 0x1103 };
	static uint32_t hangul_letter_ssangtikeut [] = { 0x1104 };
	static uint32_t hangul_letter_rieul [] = { 0x1105 };
	static uint32_t hangul_letter_rieul_kiyeok [] = { 0x11B0 };
	static uint32_t hangul_letter_rieul_mieum [] = { 0x11B1 };
	static uint32_t hangul_letter_rieul_pieup [] = { 0x11B2 };
	static uint32_t hangul_letter_rieul_sios [] = { 0x11B3 };
	static uint32_t hangul_letter_rieul_thieuth [] = { 0x11B4 };
	static uint32_t hangul_letter_rieul_phieuph [] = { 0x11B5 };
	static uint32_t hangul_letter_rieul_hieuh [] = { 0x111A };
	static uint32_t hangul_letter_mieum [] = { 0x1106 };
	static uint32_t hangul_letter_pieup [] = { 0x1107 };
	static uint32_t hangul_letter_ssangpieup [] = { 0x1108 };
	static uint32_t hangul_letter_pieup_sios [] = { 0x1121 };
	static uint32_t hangul_letter_sios [] = { 0x1109 };
	static uint32_t hangul_letter_ssangsios [] = { 0x110A };
	static uint32_t hangul_letter_ieung [] = { 0x110B };
	static uint32_t hangul_letter_cieuc [] = { 0x110C };
	static uint32_t hangul_letter_ssangcieuc [] = { 0x110D };
	static uint32_t hangul_letter_chieuch [] = { 0x110E };
	static uint32_t hangul_letter_khieukh [] = { 0x110F };
	static uint32_t hangul_letter_thieuth [] = { 0x1110 };
	static uint32_t hangul_letter_phieuph [] = { 0x1111 };
	static uint32_t hangul_letter_hieuh [] = { 0x1112 };
	static uint32_t hangul_letter_a [] = { 0x1161 };
	static uint32_t hangul_letter_ae [] = { 0x1162 };
	static uint32_t hangul_letter_ya [] = { 0x1163 };
	static uint32_t hangul_letter_yae [] = { 0x1164 };
	static uint32_t hangul_letter_eo [] = { 0x1165 };
	static uint32_t hangul_letter_e [] = { 0x1166 };
	static uint32_t hangul_letter_yeo [] = { 0x1167 };
	static uint32_t hangul_letter_ye [] = { 0x1168 };
	static uint32_t hangul_letter_o [] = { 0x1169 };
	static uint32_t hangul_letter_wa [] = { 0x116A };
	static uint32_t hangul_letter_wae [] = { 0x116B };
	static uint32_t hangul_letter_oe [] = { 0x116C };
	static uint32_t hangul_letter_yo [] = { 0x116D };
	static uint32_t hangul_letter_u [] = { 0x116E };
	static uint32_t hangul_letter_weo [] = { 0x116F };
	static uint32_t hangul_letter_we [] = { 0x1170 };
	static uint32_t hangul_letter_wi [] = { 0x1171 };
	static uint32_t hangul_letter_yu [] = { 0x1172 };
	static uint32_t hangul_letter_eu [] = { 0x1173 };
	static uint32_t hangul_letter_yi [] = { 0x1174 };
	static uint32_t hangul_letter_i [] = { 0x1175 };
	static uint32_t hangul_filler [] = { 0x1160 };
	static uint32_t hangul_letter_ssangnieun [] = { 0x1114 };
	static uint32_t hangul_letter_nieun_tikeut [] = { 0x1115 };
	static uint32_t hangul_letter_nieun_sios [] = { 0x11C7 };
	static uint32_t hangul_letter_nieun_pansios [] = { 0x11C8 };
	static uint32_t hangul_letter_rieul_kiyeok_sios [] = { 0x11CC };
	static uint32_t hangul_letter_rieul_tikeut [] = { 0x11CE };
	static uint32_t hangul_letter_rieul_pieup_sios [] = { 0x11D3 };
	static uint32_t hangul_letter_rieul_pansios [] = { 0x11D7 };
	static uint32_t hangul_letter_rieul_yeorinhieuh [] = { 0x11D9 };
	static uint32_t hangul_letter_mieum_pieup [] = { 0x111C };
	static uint32_t hangul_letter_mieum_sios [] = { 0x11DD };
	static uint32_t hangul_letter_mieum_pansios [] = { 0x11DF };
	static uint32_t hangul_letter_kapyeounmieum [] = { 0x111D };
	static uint32_t hangul_letter_pieup_kiyeok [] = { 0x111E };
	static uint32_t hangul_letter_pieup_tikeut [] = { 0x1120 };
	static uint32_t hangul_letter_pieup_sios_kiyeok [] = { 0x1122 };
	static uint32_t hangul_letter_pieup_sios_tikeut [] = { 0x1123 };
	static uint32_t hangul_letter_pieup_cieuc [] = { 0x1127 };
	static uint32_t hangul_letter_pieup_thieuth [] = { 0x1129 };
	static uint32_t hangul_letter_kapyeounpieup [] = { 0x112B };
	static uint32_t hangul_letter_kapyeounssangpieup [] = { 0x112C };
	static uint32_t hangul_letter_sios_kiyeok [] = { 0x112D };
	static uint32_t hangul_letter_sios_nieun [] = { 0x112E };
	static uint32_t hangul_letter_sios_tikeut [] = { 0x112F };
	static uint32_t hangul_letter_sios_pieup [] = { 0x1132 };
	static uint32_t hangul_letter_sios_cieuc [] = { 0x1136 };
	static uint32_t hangul_letter_pansios [] = { 0x1140 };
	static uint32_t hangul_letter_ssangieung [] = { 0x1147 };
	static uint32_t hangul_letter_yesieung [] = { 0x114C };
	static uint32_t hangul_letter_yesieung_sios [] = { 0x11F1 };
	static uint32_t hangul_letter_yesieung_pansios [] = { 0x11F2 };
	static uint32_t hangul_letter_kapyeounphieuph [] = { 0x1157 };
	static uint32_t hangul_letter_ssanghieuh [] = { 0x1158 };
	static uint32_t hangul_letter_yeorinhieuh [] = { 0x1159 };
	static uint32_t hangul_letter_yo_ya [] = { 0x1184 };
	static uint32_t hangul_letter_yo_yae [] = { 0x1185 };
	static uint32_t hangul_letter_yo_i [] = { 0x1188 };
	static uint32_t hangul_letter_yu_yeo [] = { 0x1191 };
	static uint32_t hangul_letter_yu_ye [] = { 0x1192 };
	static uint32_t hangul_letter_yu_i [] = { 0x1194 };
	static uint32_t hangul_letter_araea [] = { 0x119E };
	static uint32_t hangul_letter_araeae [] = { 0x11A1 };
	static uint32_t ideographic_annotation_one_mark [] = { 0x4E00 };
	static uint32_t ideographic_annotation_two_mark [] = { 0x4E8C };
	static uint32_t ideographic_annotation_three_mark [] = { 0x4E09 };
	static uint32_t ideographic_annotation_four_mark [] = { 0x56DB };
	static uint32_t ideographic_annotation_top_mark [] = { 0x4E0A };
	static uint32_t ideographic_annotation_middle_mark [] = { 0x4E2D };
	static uint32_t ideographic_annotation_bottom_mark [] = { 0x4E0B };
	static uint32_t ideographic_annotation_first_mark [] = { 0x7532 };
	static uint32_t ideographic_annotation_second_mark [] = { 0x4E59 };
	static uint32_t ideographic_annotation_third_mark [] = { 0x4E19 };
	static uint32_t ideographic_annotation_fourth_mark [] = { 0x4E01 };
	static uint32_t ideographic_annotation_heaven_mark [] = { 0x5929 };
	static uint32_t ideographic_annotation_earth_mark [] = { 0x5730 };
	static uint32_t ideographic_annotation_man_mark [] = { 0x4EBA };
	static uint32_t parenthesized_hangul_kiyeok [] = { 0x0028, 0x1100, 0x0029 };
	static uint32_t parenthesized_hangul_nieun [] = { 0x0028, 0x1102, 0x0029 };
	static uint32_t parenthesized_hangul_tikeut [] = { 0x0028, 0x1103, 0x0029 };
	static uint32_t parenthesized_hangul_rieul [] = { 0x0028, 0x1105, 0x0029 };
	static uint32_t parenthesized_hangul_mieum [] = { 0x0028, 0x1106, 0x0029 };
	static uint32_t parenthesized_hangul_pieup [] = { 0x0028, 0x1107, 0x0029 };
	static uint32_t parenthesized_hangul_sios [] = { 0x0028, 0x1109, 0x0029 };
	static uint32_t parenthesized_hangul_ieung [] = { 0x0028, 0x110B, 0x0029 };
	static uint32_t parenthesized_hangul_cieuc [] = { 0x0028, 0x110C, 0x0029 };
	static uint32_t parenthesized_hangul_chieuch [] = { 0x0028, 0x110E, 0x0029 };
	static uint32_t parenthesized_hangul_khieukh [] = { 0x0028, 0x110F, 0x0029 };
	static uint32_t parenthesized_hangul_thieuth [] = { 0x0028, 0x1110, 0x0029 };
	static uint32_t parenthesized_hangul_phieuph [] = { 0x0028, 0x1111, 0x0029 };
	static uint32_t parenthesized_hangul_hieuh [] = { 0x0028, 0x1112, 0x0029 };
	static uint32_t parenthesized_hangul_kiyeok_a [] = { 0x0028, 0x1100, 0x1161, 0x0029 };
	static uint32_t parenthesized_hangul_nieun_a [] = { 0x0028, 0x1102, 0x1161, 0x0029 };
	static uint32_t parenthesized_hangul_tikeut_a [] = { 0x0028, 0x1103, 0x1161, 0x0029 };
	static uint32_t parenthesized_hangul_rieul_a [] = { 0x0028, 0x1105, 0x1161, 0x0029 };
	static uint32_t parenthesized_hangul_mieum_a [] = { 0x0028, 0x1106, 0x1161, 0x0029 };
	static uint32_t parenthesized_hangul_pieup_a [] = { 0x0028, 0x1107, 0x1161, 0x0029 };
	static uint32_t parenthesized_hangul_sios_a [] = { 0x0028, 0x1109, 0x1161, 0x0029 };
	static uint32_t parenthesized_hangul_ieung_a [] = { 0x0028, 0x110B, 0x1161, 0x0029 };
	static uint32_t parenthesized_hangul_cieuc_a [] = { 0x0028, 0x110C, 0x1161, 0x0029 };
	static uint32_t parenthesized_hangul_chieuch_a [] = { 0x0028, 0x110E, 0x1161, 0x0029 };
	static uint32_t parenthesized_hangul_khieukh_a [] = { 0x0028, 0x110F, 0x1161, 0x0029 };
	static uint32_t parenthesized_hangul_thieuth_a [] = { 0x0028, 0x1110, 0x1161, 0x0029 };
	static uint32_t parenthesized_hangul_phieuph_a [] = { 0x0028, 0x1111, 0x1161, 0x0029 };
	static uint32_t parenthesized_hangul_hieuh_a [] = { 0x0028, 0x1112, 0x1161, 0x0029 };
	static uint32_t parenthesized_hangul_cieuc_u [] = { 0x0028, 0x110C, 0x116E, 0x0029 };
	static uint32_t parenthesized_korean_character_ojeon [] = { 0x0028, 0x110B, 0x1169, 0x110C, 0x1165, 0x11AB, 0x0029 };
	static uint32_t parenthesized_korean_character_o_hu [] = { 0x0028, 0x110B, 0x1169, 0x1112, 0x116E, 0x0029 };
	static uint32_t parenthesized_ideograph_one [] = { 0x0028, 0x4E00, 0x0029 };
	static uint32_t parenthesized_ideograph_two [] = { 0x0028, 0x4E8C, 0x0029 };
	static uint32_t parenthesized_ideograph_three [] = { 0x0028, 0x4E09, 0x0029 };
	static uint32_t parenthesized_ideograph_four [] = { 0x0028, 0x56DB, 0x0029 };
	static uint32_t parenthesized_ideograph_five [] = { 0x0028, 0x4E94, 0x0029 };
	static uint32_t parenthesized_ideograph_six [] = { 0x0028, 0x516D, 0x0029 };
	static uint32_t parenthesized_ideograph_seven [] = { 0x0028, 0x4E03, 0x0029 };
	static uint32_t parenthesized_ideograph_eight [] = { 0x0028, 0x516B, 0x0029 };
	static uint32_t parenthesized_ideograph_nine [] = { 0x0028, 0x4E5D, 0x0029 };
	static uint32_t parenthesized_ideograph_ten [] = { 0x0028, 0x5341, 0x0029 };
	static uint32_t parenthesized_ideograph_moon [] = { 0x0028, 0x6708, 0x0029 };
	static uint32_t parenthesized_ideograph_fire [] = { 0x0028, 0x706B, 0x0029 };
	static uint32_t parenthesized_ideograph_water [] = { 0x0028, 0x6C34, 0x0029 };
	static uint32_t parenthesized_ideograph_wood [] = { 0x0028, 0x6728, 0x0029 };
	static uint32_t parenthesized_ideograph_metal [] = { 0x0028, 0x91D1, 0x0029 };
	static uint32_t parenthesized_ideograph_earth [] = { 0x0028, 0x571F, 0x0029 };
	static uint32_t parenthesized_ideograph_sun [] = { 0x0028, 0x65E5, 0x0029 };
	static uint32_t parenthesized_ideograph_stock [] = { 0x0028, 0x682A, 0x0029 };
	static uint32_t parenthesized_ideograph_have [] = { 0x0028, 0x6709, 0x0029 };
	static uint32_t parenthesized_ideograph_society [] = { 0x0028, 0x793E, 0x0029 };
	static uint32_t parenthesized_ideograph_name [] = { 0x0028, 0x540D, 0x0029 };
	static uint32_t parenthesized_ideograph_special [] = { 0x0028, 0x7279, 0x0029 };
	static uint32_t parenthesized_ideograph_financial [] = { 0x0028, 0x8CA1, 0x0029 };
	static uint32_t parenthesized_ideograph_congratulation [] = { 0x0028, 0x795D, 0x0029 };
	static uint32_t parenthesized_ideograph_labor [] = { 0x0028, 0x52B4, 0x0029 };
	static uint32_t parenthesized_ideograph_represent [] = { 0x0028, 0x4EE3, 0x0029 };
	static uint32_t parenthesized_ideograph_call [] = { 0x0028, 0x547C, 0x0029 };
	static uint32_t parenthesized_ideograph_study [] = { 0x0028, 0x5B66, 0x0029 };
	static uint32_t parenthesized_ideograph_supervise [] = { 0x0028, 0x76E3, 0x0029 };
	static uint32_t parenthesized_ideograph_enterprise [] = { 0x0028, 0x4F01, 0x0029 };
	static uint32_t parenthesized_ideograph_resource [] = { 0x0028, 0x8CC7, 0x0029 };
	static uint32_t parenthesized_ideograph_alliance [] = { 0x0028, 0x5354, 0x0029 };
	static uint32_t parenthesized_ideograph_festival [] = { 0x0028, 0x796D, 0x0029 };
	static uint32_t parenthesized_ideograph_rest [] = { 0x0028, 0x4F11, 0x0029 };
	static uint32_t parenthesized_ideograph_self [] = { 0x0028, 0x81EA, 0x0029 };
	static uint32_t parenthesized_ideograph_reach [] = { 0x0028, 0x81F3, 0x0029 };
	static uint32_t circled_ideograph_question [] = { 0x554F };
	static uint32_t circled_ideograph_kindergarten [] = { 0x5E7C };
	static uint32_t circled_ideograph_school [] = { 0x6587 };
	static uint32_t circled_ideograph_koto [] = { 0x7B8F };
	static uint32_t partnership_sign [] = { 0x0050, 0x0054, 0x0045 };
	static uint32_t circled_number_twenty_one [] = { 0x0032, 0x0031 };
	static uint32_t circled_number_twenty_two [] = { 0x0032, 0x0032 };
	static uint32_t circled_number_twenty_three [] = { 0x0032, 0x0033 };
	static uint32_t circled_number_twenty_four [] = { 0x0032, 0x0034 };
	static uint32_t circled_number_twenty_five [] = { 0x0032, 0x0035 };
	static uint32_t circled_number_twenty_six [] = { 0x0032, 0x0036 };
	static uint32_t circled_number_twenty_seven [] = { 0x0032, 0x0037 };
	static uint32_t circled_number_twenty_eight [] = { 0x0032, 0x0038 };
	static uint32_t circled_number_twenty_nine [] = { 0x0032, 0x0039 };
	static uint32_t circled_number_thirty [] = { 0x0033, 0x0030 };
	static uint32_t circled_number_thirty_one [] = { 0x0033, 0x0031 };
	static uint32_t circled_number_thirty_two [] = { 0x0033, 0x0032 };
	static uint32_t circled_number_thirty_three [] = { 0x0033, 0x0033 };
	static uint32_t circled_number_thirty_four [] = { 0x0033, 0x0034 };
	static uint32_t circled_number_thirty_five [] = { 0x0033, 0x0035 };
	static uint32_t circled_hangul_kiyeok [] = { 0x1100 };
	static uint32_t circled_hangul_nieun [] = { 0x1102 };
	static uint32_t circled_hangul_tikeut [] = { 0x1103 };
	static uint32_t circled_hangul_rieul [] = { 0x1105 };
	static uint32_t circled_hangul_mieum [] = { 0x1106 };
	static uint32_t circled_hangul_pieup [] = { 0x1107 };
	static uint32_t circled_hangul_sios [] = { 0x1109 };
	static uint32_t circled_hangul_ieung [] = { 0x110B };
	static uint32_t circled_hangul_cieuc [] = { 0x110C };
	static uint32_t circled_hangul_chieuch [] = { 0x110E };
	static uint32_t circled_hangul_khieukh [] = { 0x110F };
	static uint32_t circled_hangul_thieuth [] = { 0x1110 };
	static uint32_t circled_hangul_phieuph [] = { 0x1111 };
	static uint32_t circled_hangul_hieuh [] = { 0x1112 };
	static uint32_t circled_hangul_kiyeok_a [] = { 0x1100, 0x1161 };
	static uint32_t circled_hangul_nieun_a [] = { 0x1102, 0x1161 };
	static uint32_t circled_hangul_tikeut_a [] = { 0x1103, 0x1161 };
	static uint32_t circled_hangul_rieul_a [] = { 0x1105, 0x1161 };
	static uint32_t circled_hangul_mieum_a [] = { 0x1106, 0x1161 };
	static uint32_t circled_hangul_pieup_a [] = { 0x1107, 0x1161 };
	static uint32_t circled_hangul_sios_a [] = { 0x1109, 0x1161 };
	static uint32_t circled_hangul_ieung_a [] = { 0x110B, 0x1161 };
	static uint32_t circled_hangul_cieuc_a [] = { 0x110C, 0x1161 };
	static uint32_t circled_hangul_chieuch_a [] = { 0x110E, 0x1161 };
	static uint32_t circled_hangul_khieukh_a [] = { 0x110F, 0x1161 };
	static uint32_t circled_hangul_thieuth_a [] = { 0x1110, 0x1161 };
	static uint32_t circled_hangul_phieuph_a [] = { 0x1111, 0x1161 };
	static uint32_t circled_hangul_hieuh_a [] = { 0x1112, 0x1161 };
	static uint32_t circled_korean_character_chamko [] = { 0x110E, 0x1161, 0x11B7, 0x1100, 0x1169 };
	static uint32_t circled_korean_character_jueui [] = { 0x110C, 0x116E, 0x110B, 0x1174 };
	static uint32_t circled_hangul_ieung_u [] = { 0x110B, 0x116E };
	static uint32_t circled_ideograph_one [] = { 0x4E00 };
	static uint32_t circled_ideograph_two [] = { 0x4E8C };
	static uint32_t circled_ideograph_three [] = { 0x4E09 };
	static uint32_t circled_ideograph_four [] = { 0x56DB };
	static uint32_t circled_ideograph_five [] = { 0x4E94 };
	static uint32_t circled_ideograph_six [] = { 0x516D };
	static uint32_t circled_ideograph_seven [] = { 0x4E03 };
	static uint32_t circled_ideograph_eight [] = { 0x516B };
	static uint32_t circled_ideograph_nine [] = { 0x4E5D };
	static uint32_t circled_ideograph_ten [] = { 0x5341 };
	static uint32_t circled_ideograph_moon [] = { 0x6708 };
	static uint32_t circled_ideograph_fire [] = { 0x706B };
	static uint32_t circled_ideograph_water [] = { 0x6C34 };
	static uint32_t circled_ideograph_wood [] = { 0x6728 };
	static uint32_t circled_ideograph_metal [] = { 0x91D1 };
	static uint32_t circled_ideograph_earth [] = { 0x571F };
	static uint32_t circled_ideograph_sun [] = { 0x65E5 };
	static uint32_t circled_ideograph_stock [] = { 0x682A };
	static uint32_t circled_ideograph_have [] = { 0x6709 };
	static uint32_t circled_ideograph_society [] = { 0x793E };
	static uint32_t circled_ideograph_name [] = { 0x540D };
	static uint32_t circled_ideograph_special [] = { 0x7279 };
	static uint32_t circled_ideograph_financial [] = { 0x8CA1 };
	static uint32_t circled_ideograph_congratulation [] = { 0x795D };
	static uint32_t circled_ideograph_labor [] = { 0x52B4 };
	static uint32_t circled_ideograph_secret [] = { 0x79D8 };
	static uint32_t circled_ideograph_male [] = { 0x7537 };
	static uint32_t circled_ideograph_female [] = { 0x5973 };
	static uint32_t circled_ideograph_suitable [] = { 0x9069 };
	static uint32_t circled_ideograph_excellent [] = { 0x512A };
	static uint32_t circled_ideograph_print [] = { 0x5370 };
	static uint32_t circled_ideograph_attention [] = { 0x6CE8 };
	static uint32_t circled_ideograph_item [] = { 0x9805 };
	static uint32_t circled_ideograph_rest [] = { 0x4F11 };
	static uint32_t circled_ideograph_copy [] = { 0x5199 };
	static uint32_t circled_ideograph_correct [] = { 0x6B63 };
	static uint32_t circled_ideograph_high [] = { 0x4E0A };
	static uint32_t circled_ideograph_centre [] = { 0x4E2D };
	static uint32_t circled_ideograph_low [] = { 0x4E0B };
	static uint32_t circled_ideograph_left [] = { 0x5DE6 };
	static uint32_t circled_ideograph_right [] = { 0x53F3 };
	static uint32_t circled_ideograph_medicine [] = { 0x533B };
	static uint32_t circled_ideograph_religion [] = { 0x5B97 };
	static uint32_t circled_ideograph_study [] = { 0x5B66 };
	static uint32_t circled_ideograph_supervise [] = { 0x76E3 };
	static uint32_t circled_ideograph_enterprise [] = { 0x4F01 };
	static uint32_t circled_ideograph_resource [] = { 0x8CC7 };
	static uint32_t circled_ideograph_alliance [] = { 0x5354 };
	static uint32_t circled_ideograph_night [] = { 0x591C };
	static uint32_t circled_number_thirty_six [] = { 0x0033, 0x0036 };
	static uint32_t circled_number_thirty_seven [] = { 0x0033, 0x0037 };
	static uint32_t circled_number_thirty_eight [] = { 0x0033, 0x0038 };
	static uint32_t circled_number_thirty_nine [] = { 0x0033, 0x0039 };
	static uint32_t circled_number_forty [] = { 0x0034, 0x0030 };
	static uint32_t circled_number_forty_one [] = { 0x0034, 0x0031 };
	static uint32_t circled_number_forty_two [] = { 0x0034, 0x0032 };
	static uint32_t circled_number_forty_three [] = { 0x0034, 0x0033 };
	static uint32_t circled_number_forty_four [] = { 0x0034, 0x0034 };
	static uint32_t circled_number_forty_five [] = { 0x0034, 0x0035 };
	static uint32_t circled_number_forty_six [] = { 0x0034, 0x0036 };
	static uint32_t circled_number_forty_seven [] = { 0x0034, 0x0037 };
	static uint32_t circled_number_forty_eight [] = { 0x0034, 0x0038 };
	static uint32_t circled_number_forty_nine [] = { 0x0034, 0x0039 };
	static uint32_t circled_number_fifty [] = { 0x0035, 0x0030 };
	static uint32_t ideographic_telegraph_symbol_for_january [] = { 0x0031, 0x6708 };
	static uint32_t ideographic_telegraph_symbol_for_february [] = { 0x0032, 0x6708 };
	static uint32_t ideographic_telegraph_symbol_for_march [] = { 0x0033, 0x6708 };
	static uint32_t ideographic_telegraph_symbol_for_april [] = { 0x0034, 0x6708 };
	static uint32_t ideographic_telegraph_symbol_for_may [] = { 0x0035, 0x6708 };
	static uint32_t ideographic_telegraph_symbol_for_june [] = { 0x0036, 0x6708 };
	static uint32_t ideographic_telegraph_symbol_for_july [] = { 0x0037, 0x6708 };
	static uint32_t ideographic_telegraph_symbol_for_august [] = { 0x0038, 0x6708 };
	static uint32_t ideographic_telegraph_symbol_for_september [] = { 0x0039, 0x6708 };
	static uint32_t ideographic_telegraph_symbol_for_october [] = { 0x0031, 0x0030, 0x6708 };
	static uint32_t ideographic_telegraph_symbol_for_november [] = { 0x0031, 0x0031, 0x6708 };
	static uint32_t ideographic_telegraph_symbol_for_december [] = { 0x0031, 0x0032, 0x6708 };
	static uint32_t square_hg [] = { 0x0048, 0x0067 };
	static uint32_t square_erg [] = { 0x0065, 0x0072, 0x0067 };
	static uint32_t square_ev [] = { 0x0065, 0x0056 };
	static uint32_t limited_liability_sign [] = { 0x004C, 0x0054, 0x0044 };
	static uint32_t circled_katakana_a [] = { 0x30A2 };
	static uint32_t circled_katakana_i [] = { 0x30A4 };
	static uint32_t circled_katakana_u [] = { 0x30A6 };
	static uint32_t circled_katakana_e [] = { 0x30A8 };
	static uint32_t circled_katakana_o [] = { 0x30AA };
	static uint32_t circled_katakana_ka [] = { 0x30AB };
	static uint32_t circled_katakana_ki [] = { 0x30AD };
	static uint32_t circled_katakana_ku [] = { 0x30AF };
	static uint32_t circled_katakana_ke [] = { 0x30B1 };
	static uint32_t circled_katakana_ko [] = { 0x30B3 };
	static uint32_t circled_katakana_sa [] = { 0x30B5 };
	static uint32_t circled_katakana_si [] = { 0x30B7 };
	static uint32_t circled_katakana_su [] = { 0x30B9 };
	static uint32_t circled_katakana_se [] = { 0x30BB };
	static uint32_t circled_katakana_so [] = { 0x30BD };
	static uint32_t circled_katakana_ta [] = { 0x30BF };
	static uint32_t circled_katakana_ti [] = { 0x30C1 };
	static uint32_t circled_katakana_tu [] = { 0x30C4 };
	static uint32_t circled_katakana_te [] = { 0x30C6 };
	static uint32_t circled_katakana_to [] = { 0x30C8 };
	static uint32_t circled_katakana_na [] = { 0x30CA };
	static uint32_t circled_katakana_ni [] = { 0x30CB };
	static uint32_t circled_katakana_nu [] = { 0x30CC };
	static uint32_t circled_katakana_ne [] = { 0x30CD };
	static uint32_t circled_katakana_no [] = { 0x30CE };
	static uint32_t circled_katakana_ha [] = { 0x30CF };
	static uint32_t circled_katakana_hi [] = { 0x30D2 };
	static uint32_t circled_katakana_hu [] = { 0x30D5 };
	static uint32_t circled_katakana_he [] = { 0x30D8 };
	static uint32_t circled_katakana_ho [] = { 0x30DB };
	static uint32_t circled_katakana_ma [] = { 0x30DE };
	static uint32_t circled_katakana_mi [] = { 0x30DF };
	static uint32_t circled_katakana_mu [] = { 0x30E0 };
	static uint32_t circled_katakana_me [] = { 0x30E1 };
	static uint32_t circled_katakana_mo [] = { 0x30E2 };
	static uint32_t circled_katakana_ya [] = { 0x30E4 };
	static uint32_t circled_katakana_yu [] = { 0x30E6 };
	static uint32_t circled_katakana_yo [] = { 0x30E8 };
	static uint32_t circled_katakana_ra [] = { 0x30E9 };
	static uint32_t circled_katakana_ri [] = { 0x30EA };
	static uint32_t circled_katakana_ru [] = { 0x30EB };
	static uint32_t circled_katakana_re [] = { 0x30EC };
	static uint32_t circled_katakana_ro [] = { 0x30ED };
	static uint32_t circled_katakana_wa [] = { 0x30EF };
	static uint32_t circled_katakana_wi [] = { 0x30F0 };
	static uint32_t circled_katakana_we [] = { 0x30F1 };
	static uint32_t circled_katakana_wo [] = { 0x30F2 };
	static uint32_t square_era_name_reiwa [] = { 0x4EE4, 0x548C };
	static uint32_t square_apaato [] = { 0x30A2, 0x30D1, 0x30FC, 0x30C8 };
	static uint32_t square_aruhua [] = { 0x30A2, 0x30EB, 0x30D5, 0x30A1 };
	static uint32_t square_anpea [] = { 0x30A2, 0x30F3, 0x30DA, 0x30A2 };
	static uint32_t square_aaru [] = { 0x30A2, 0x30FC, 0x30EB };
	static uint32_t square_iningu [] = { 0x30A4, 0x30CB, 0x30F3, 0x30B0 };
	static uint32_t square_inti [] = { 0x30A4, 0x30F3, 0x30C1 };
	static uint32_t square_uon [] = { 0x30A6, 0x30A9, 0x30F3 };
	static uint32_t square_esukuudo [] = { 0x30A8, 0x30B9, 0x30AF, 0x30FC, 0x30C9 };
	static uint32_t square_eekaa [] = { 0x30A8, 0x30FC, 0x30AB, 0x30FC };
	static uint32_t square_onsu [] = { 0x30AA, 0x30F3, 0x30B9 };
	static uint32_t square_oomu [] = { 0x30AA, 0x30FC, 0x30E0 };
	static uint32_t square_kairi [] = { 0x30AB, 0x30A4, 0x30EA };
	static uint32_t square_karatto [] = { 0x30AB, 0x30E9, 0x30C3, 0x30C8 };
	static uint32_t square_karorii [] = { 0x30AB, 0x30ED, 0x30EA, 0x30FC };
	static uint32_t square_garon [] = { 0x30AC, 0x30ED, 0x30F3 };
	static uint32_t square_ganma [] = { 0x30AC, 0x30F3, 0x30DE };
	static uint32_t square_giga [] = { 0x30AE, 0x30AC };
	static uint32_t square_ginii [] = { 0x30AE, 0x30CB, 0x30FC };
	static uint32_t square_kyurii [] = { 0x30AD, 0x30E5, 0x30EA, 0x30FC };
	static uint32_t square_girudaa [] = { 0x30AE, 0x30EB, 0x30C0, 0x30FC };
	static uint32_t square_kiro [] = { 0x30AD, 0x30ED };
	static uint32_t square_kiroguramu [] = { 0x30AD, 0x30ED, 0x30B0, 0x30E9, 0x30E0 };
	static uint32_t square_kiromeetoru [] = { 0x30AD, 0x30ED, 0x30E1, 0x30FC, 0x30C8, 0x30EB };
	static uint32_t square_kirowatto [] = { 0x30AD, 0x30ED, 0x30EF, 0x30C3, 0x30C8 };
	static uint32_t square_guramu [] = { 0x30B0, 0x30E9, 0x30E0 };
	static uint32_t square_guramuton [] = { 0x30B0, 0x30E9, 0x30E0, 0x30C8, 0x30F3 };
	static uint32_t square_kuruzeiro [] = { 0x30AF, 0x30EB, 0x30BC, 0x30A4, 0x30ED };
	static uint32_t square_kuroone [] = { 0x30AF, 0x30ED, 0x30FC, 0x30CD };
	static uint32_t square_keesu [] = { 0x30B1, 0x30FC, 0x30B9 };
	static uint32_t square_koruna [] = { 0x30B3, 0x30EB, 0x30CA };
	static uint32_t square_koopo [] = { 0x30B3, 0x30FC, 0x30DD };
	static uint32_t square_saikuru [] = { 0x30B5, 0x30A4, 0x30AF, 0x30EB };
	static uint32_t square_santiimu [] = { 0x30B5, 0x30F3, 0x30C1, 0x30FC, 0x30E0 };
	static uint32_t square_siringu [] = { 0x30B7, 0x30EA, 0x30F3, 0x30B0 };
	static uint32_t square_senti [] = { 0x30BB, 0x30F3, 0x30C1 };
	static uint32_t square_sento [] = { 0x30BB, 0x30F3, 0x30C8 };
	static uint32_t square_daasu [] = { 0x30C0, 0x30FC, 0x30B9 };
	static uint32_t square_desi [] = { 0x30C7, 0x30B7 };
	static uint32_t square_doru [] = { 0x30C9, 0x30EB };
	static uint32_t square_ton [] = { 0x30C8, 0x30F3 };
	static uint32_t square_nano [] = { 0x30CA, 0x30CE };
	static uint32_t square_notto [] = { 0x30CE, 0x30C3, 0x30C8 };
	static uint32_t square_haitu [] = { 0x30CF, 0x30A4, 0x30C4 };
	static uint32_t square_paasento [] = { 0x30D1, 0x30FC, 0x30BB, 0x30F3, 0x30C8 };
	static uint32_t square_paatu [] = { 0x30D1, 0x30FC, 0x30C4 };
	static uint32_t square_baareru [] = { 0x30D0, 0x30FC, 0x30EC, 0x30EB };
	static uint32_t square_piasutoru [] = { 0x30D4, 0x30A2, 0x30B9, 0x30C8, 0x30EB };
	static uint32_t square_pikuru [] = { 0x30D4, 0x30AF, 0x30EB };
	static uint32_t square_piko [] = { 0x30D4, 0x30B3 };
	static uint32_t square_biru [] = { 0x30D3, 0x30EB };
	static uint32_t square_huaraddo [] = { 0x30D5, 0x30A1, 0x30E9, 0x30C3, 0x30C9 };
	static uint32_t square_huiito [] = { 0x30D5, 0x30A3, 0x30FC, 0x30C8 };
	static uint32_t square_bussyeru [] = { 0x30D6, 0x30C3, 0x30B7, 0x30A7, 0x30EB };
	static uint32_t square_huran [] = { 0x30D5, 0x30E9, 0x30F3 };
	static uint32_t square_hekutaaru [] = { 0x30D8, 0x30AF, 0x30BF, 0x30FC, 0x30EB };
	static uint32_t square_peso [] = { 0x30DA, 0x30BD };
	static uint32_t square_penihi [] = { 0x30DA, 0x30CB, 0x30D2 };
	static uint32_t square_herutu [] = { 0x30D8, 0x30EB, 0x30C4 };
	static uint32_t square_pensu [] = { 0x30DA, 0x30F3, 0x30B9 };
	static uint32_t square_peezi [] = { 0x30DA, 0x30FC, 0x30B8 };
	static uint32_t square_beeta [] = { 0x30D9, 0x30FC, 0x30BF };
	static uint32_t square_pointo [] = { 0x30DD, 0x30A4, 0x30F3, 0x30C8 };
	static uint32_t square_boruto [] = { 0x30DC, 0x30EB, 0x30C8 };
	static uint32_t square_hon [] = { 0x30DB, 0x30F3 };
	static uint32_t square_pondo [] = { 0x30DD, 0x30F3, 0x30C9 };
	static uint32_t square_hooru [] = { 0x30DB, 0x30FC, 0x30EB };
	static uint32_t square_hoon [] = { 0x30DB, 0x30FC, 0x30F3 };
	static uint32_t square_maikuro [] = { 0x30DE, 0x30A4, 0x30AF, 0x30ED };
	static uint32_t square_mairu [] = { 0x30DE, 0x30A4, 0x30EB };
	static uint32_t square_mahha [] = { 0x30DE, 0x30C3, 0x30CF };
	static uint32_t square_maruku [] = { 0x30DE, 0x30EB, 0x30AF };
	static uint32_t square_mansyon [] = { 0x30DE, 0x30F3, 0x30B7, 0x30E7, 0x30F3 };
	static uint32_t square_mikuron [] = { 0x30DF, 0x30AF, 0x30ED, 0x30F3 };
	static uint32_t square_miri [] = { 0x30DF, 0x30EA };
	static uint32_t square_miribaaru [] = { 0x30DF, 0x30EA, 0x30D0, 0x30FC, 0x30EB };
	static uint32_t square_mega [] = { 0x30E1, 0x30AC };
	static uint32_t square_megaton [] = { 0x30E1, 0x30AC, 0x30C8, 0x30F3 };
	static uint32_t square_meetoru [] = { 0x30E1, 0x30FC, 0x30C8, 0x30EB };
	static uint32_t square_yaado [] = { 0x30E4, 0x30FC, 0x30C9 };
	static uint32_t square_yaaru [] = { 0x30E4, 0x30FC, 0x30EB };
	static uint32_t square_yuan [] = { 0x30E6, 0x30A2, 0x30F3 };
	static uint32_t square_rittoru [] = { 0x30EA, 0x30C3, 0x30C8, 0x30EB };
	static uint32_t square_rira [] = { 0x30EA, 0x30E9 };
	static uint32_t square_rupii [] = { 0x30EB, 0x30D4, 0x30FC };
	static uint32_t square_ruuburu [] = { 0x30EB, 0x30FC, 0x30D6, 0x30EB };
	static uint32_t square_remu [] = { 0x30EC, 0x30E0 };
	static uint32_t square_rentogen [] = { 0x30EC, 0x30F3, 0x30C8, 0x30B2, 0x30F3 };
	static uint32_t square_watto [] = { 0x30EF, 0x30C3, 0x30C8 };
	static uint32_t ideographic_telegraph_symbol_for_hour_zero [] = { 0x0030, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_one [] = { 0x0031, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_two [] = { 0x0032, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_three [] = { 0x0033, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_four [] = { 0x0034, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_five [] = { 0x0035, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_six [] = { 0x0036, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_seven [] = { 0x0037, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_eight [] = { 0x0038, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_nine [] = { 0x0039, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_ten [] = { 0x0031, 0x0030, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_eleven [] = { 0x0031, 0x0031, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_twelve [] = { 0x0031, 0x0032, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_thirteen [] = { 0x0031, 0x0033, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_fourteen [] = { 0x0031, 0x0034, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_fifteen [] = { 0x0031, 0x0035, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_sixteen [] = { 0x0031, 0x0036, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_seventeen [] = { 0x0031, 0x0037, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_eighteen [] = { 0x0031, 0x0038, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_nineteen [] = { 0x0031, 0x0039, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_twenty [] = { 0x0032, 0x0030, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_twenty_one [] = { 0x0032, 0x0031, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_twenty_two [] = { 0x0032, 0x0032, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_twenty_three [] = { 0x0032, 0x0033, 0x70B9 };
	static uint32_t ideographic_telegraph_symbol_for_hour_twenty_four [] = { 0x0032, 0x0034, 0x70B9 };
	static uint32_t square_hpa [] = { 0x0068, 0x0050, 0x0061 };
	static uint32_t square_da [] = { 0x0064, 0x0061 };
	static uint32_t square_au [] = { 0x0041, 0x0055 };
	static uint32_t square_bar [] = { 0x0062, 0x0061, 0x0072 };
	static uint32_t square_ov [] = { 0x006F, 0x0056 };
	static uint32_t square_pc [] = { 0x0070, 0x0063 };
	static uint32_t square_dm [] = { 0x0064, 0x006D };
	static uint32_t square_dm_squared [] = { 0x0064, 0x006D, 0x00B2 };
	static uint32_t square_dm_cubed [] = { 0x0064, 0x006D, 0x00B3 };
	static uint32_t square_iu [] = { 0x0049, 0x0055 };
	static uint32_t square_era_name_heisei [] = { 0x5E73, 0x6210 };
	static uint32_t square_era_name_syouwa [] = { 0x662D, 0x548C };
	static uint32_t square_era_name_taisyou [] = { 0x5927, 0x6B63 };
	static uint32_t square_era_name_meizi [] = { 0x660E, 0x6CBB };
	static uint32_t square_corporation [] = { 0x682A, 0x5F0F, 0x4F1A, 0x793E };
	static uint32_t square_pa_amps [] = { 0x0070, 0x0041 };
	static uint32_t square_na [] = { 0x006E, 0x0041 };
	static uint32_t square_mu_a [] = { 0x03BC, 0x0041 };
	static uint32_t square_ma [] = { 0x006D, 0x0041 };
	static uint32_t square_ka [] = { 0x006B, 0x0041 };
	static uint32_t square_kb [] = { 0x004B, 0x0042 };
	static uint32_t square_mb [] = { 0x004D, 0x0042 };
	static uint32_t square_gb [] = { 0x0047, 0x0042 };
	static uint32_t square_cal [] = { 0x0063, 0x0061, 0x006C };
	static uint32_t square_kcal [] = { 0x006B, 0x0063, 0x0061, 0x006C };
	static uint32_t square_pf [] = { 0x0070, 0x0046 };
	static uint32_t square_nf [] = { 0x006E, 0x0046 };
	static uint32_t square_mu_f [] = { 0x03BC, 0x0046 };
	static uint32_t square_mu_g [] = { 0x03BC, 0x0067 };
	static uint32_t square_mg [] = { 0x006D, 0x0067 };
	static uint32_t square_kg [] = { 0x006B, 0x0067 };
	static uint32_t square_hz [] = { 0x0048, 0x007A };
	static uint32_t square_khz [] = { 0x006B, 0x0048, 0x007A };
	static uint32_t square_mhz [] = { 0x004D, 0x0048, 0x007A };
	static uint32_t square_ghz [] = { 0x0047, 0x0048, 0x007A };
	static uint32_t square_thz [] = { 0x0054, 0x0048, 0x007A };
	static uint32_t square_mu_l [] = { 0x03BC, 0x2113 };
	static uint32_t square_ml [] = { 0x006D, 0x2113 };
	static uint32_t square_dl [] = { 0x0064, 0x2113 };
	static uint32_t square_kl [] = { 0x006B, 0x2113 };
	static uint32_t square_fm [] = { 0x0066, 0x006D };
	static uint32_t square_nm [] = { 0x006E, 0x006D };
	static uint32_t square_mu_m [] = { 0x03BC, 0x006D };
	static uint32_t square_mm [] = { 0x006D, 0x006D };
	static uint32_t square_cm [] = { 0x0063, 0x006D };
	static uint32_t square_km [] = { 0x006B, 0x006D };
	static uint32_t square_mm_squared [] = { 0x006D, 0x006D, 0x00B2 };
	static uint32_t square_cm_squared [] = { 0x0063, 0x006D, 0x00B2 };
	static uint32_t square_m_squared [] = { 0x006D, 0x00B2 };
	static uint32_t square_km_squared [] = { 0x006B, 0x006D, 0x00B2 };
	static uint32_t square_mm_cubed [] = { 0x006D, 0x006D, 0x00B3 };
	static uint32_t square_cm_cubed [] = { 0x0063, 0x006D, 0x00B3 };
	static uint32_t square_m_cubed [] = { 0x006D, 0x00B3 };
	static uint32_t square_km_cubed [] = { 0x006B, 0x006D, 0x00B3 };
	static uint32_t square_m_over_s [] = { 0x006D, 0x2215, 0x0073 };
	static uint32_t square_m_over_s_squared [] = { 0x006D, 0x2215, 0x0073, 0x00B2 };
	static uint32_t square_pa [] = { 0x0050, 0x0061 };
	static uint32_t square_kpa [] = { 0x006B, 0x0050, 0x0061 };
	static uint32_t square_mpa [] = { 0x004D, 0x0050, 0x0061 };
	static uint32_t square_gpa [] = { 0x0047, 0x0050, 0x0061 };
	static uint32_t square_rad [] = { 0x0072, 0x0061, 0x0064 };
	static uint32_t square_rad_over_s [] = { 0x0072, 0x0061, 0x0064, 0x2215, 0x0073 };
	static uint32_t square_rad_over_s_squared [] = { 0x0072, 0x0061, 0x0064, 0x2215, 0x0073, 0x00B2 };
	static uint32_t square_ps [] = { 0x0070, 0x0073 };
	static uint32_t square_ns [] = { 0x006E, 0x0073 };
	static uint32_t square_mu_s [] = { 0x03BC, 0x0073 };
	static uint32_t square_ms [] = { 0x006D, 0x0073 };
	static uint32_t square_pv [] = { 0x0070, 0x0056 };
	static uint32_t square_nv [] = { 0x006E, 0x0056 };
	static uint32_t square_mu_v [] = { 0x03BC, 0x0056 };
	static uint32_t square_mv [] = { 0x006D, 0x0056 };
	static uint32_t square_kv [] = { 0x006B, 0x0056 };
	static uint32_t square_mv_mega [] = { 0x004D, 0x0056 };
	static uint32_t square_pw [] = { 0x0070, 0x0057 };
	static uint32_t square_nw [] = { 0x006E, 0x0057 };
	static uint32_t square_mu_w [] = { 0x03BC, 0x0057 };
	static uint32_t square_mw [] = { 0x006D, 0x0057 };
	static uint32_t square_kw [] = { 0x006B, 0x0057 };
	static uint32_t square_mw_mega [] = { 0x004D, 0x0057 };
	static uint32_t square_k_ohm [] = { 0x006B, 0x03A9 };
	static uint32_t square_m_ohm [] = { 0x004D, 0x03A9 };
	static uint32_t square_am [] = { 0x0061, 0x002E, 0x006D, 0x002E };
	static uint32_t square_bq [] = { 0x0042, 0x0071 };
	static uint32_t square_cc [] = { 0x0063, 0x0063 };
	static uint32_t square_cd [] = { 0x0063, 0x0064 };
	static uint32_t square_c_over_kg [] = { 0x0043, 0x2215, 0x006B, 0x0067 };
	static uint32_t square_co [] = { 0x0043, 0x006F, 0x002E };
	static uint32_t square_db [] = { 0x0064, 0x0042 };
	static uint32_t square_gy [] = { 0x0047, 0x0079 };
	static uint32_t square_ha [] = { 0x0068, 0x0061 };
	static uint32_t square_hp [] = { 0x0048, 0x0050 };
	static uint32_t square_in [] = { 0x0069, 0x006E };
	static uint32_t square_kk [] = { 0x004B, 0x004B };
	static uint32_t square_km_capital [] = { 0x004B, 0x004D };
	static uint32_t square_kt [] = { 0x006B, 0x0074 };
	static uint32_t square_lm [] = { 0x006C, 0x006D };
	static uint32_t square_ln [] = { 0x006C, 0x006E };
	static uint32_t square_log [] = { 0x006C, 0x006F, 0x0067 };
	static uint32_t square_lx [] = { 0x006C, 0x0078 };
	static uint32_t square_mb_small [] = { 0x006D, 0x0062 };
	static uint32_t square_mil [] = { 0x006D, 0x0069, 0x006C };
	static uint32_t square_mol [] = { 0x006D, 0x006F, 0x006C };
	static uint32_t square_ph [] = { 0x0050, 0x0048 };
	static uint32_t square_pm [] = { 0x0070, 0x002E, 0x006D, 0x002E };
	static uint32_t square_ppm [] = { 0x0050, 0x0050, 0x004D };
	static uint32_t square_pr [] = { 0x0050, 0x0052 };
	static uint32_t square_sr [] = { 0x0073, 0x0072 };
	static uint32_t square_sv [] = { 0x0053, 0x0076 };
	static uint32_t square_wb [] = { 0x0057, 0x0062 };
	static uint32_t square_v_over_m [] = { 0x0056, 0x2215, 0x006D };
	static uint32_t square_a_over_m [] = { 0x0041, 0x2215, 0x006D };
	static uint32_t ideographic_telegraph_symbol_for_day_one [] = { 0x0031, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_two [] = { 0x0032, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_three [] = { 0x0033, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_four [] = { 0x0034, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_five [] = { 0x0035, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_six [] = { 0x0036, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_seven [] = { 0x0037, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_eight [] = { 0x0038, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_nine [] = { 0x0039, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_ten [] = { 0x0031, 0x0030, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_eleven [] = { 0x0031, 0x0031, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_twelve [] = { 0x0031, 0x0032, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_thirteen [] = { 0x0031, 0x0033, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_fourteen [] = { 0x0031, 0x0034, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_fifteen [] = { 0x0031, 0x0035, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_sixteen [] = { 0x0031, 0x0036, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_seventeen [] = { 0x0031, 0x0037, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_eighteen [] = { 0x0031, 0x0038, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_nineteen [] = { 0x0031, 0x0039, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_twenty [] = { 0x0032, 0x0030, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_twenty_one [] = { 0x0032, 0x0031, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_twenty_two [] = { 0x0032, 0x0032, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_twenty_three [] = { 0x0032, 0x0033, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_twenty_four [] = { 0x0032, 0x0034, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_twenty_five [] = { 0x0032, 0x0035, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_twenty_six [] = { 0x0032, 0x0036, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_twenty_seven [] = { 0x0032, 0x0037, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_twenty_eight [] = { 0x0032, 0x0038, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_twenty_nine [] = { 0x0032, 0x0039, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_thirty [] = { 0x0033, 0x0030, 0x65E5 };
	static uint32_t ideographic_telegraph_symbol_for_day_thirty_one [] = { 0x0033, 0x0031, 0x65E5 };
	static uint32_t square_gal [] = { 0x0067, 0x0061, 0x006C };
	static uint32_t modifier_letter_cyrillic_hard_sign [] = { 0x044A };
	static uint32_t modifier_letter_cyrillic_soft_sign [] = { 0x044C };
	static uint32_t modifier_letter_us [] = { 0xA76F };
	static uint32_t modifier_letter_capital_h_with_stroke [] = { 0x0126 };
	static uint32_t modifier_letter_small_ligature_oe [] = { 0x0153 };
	static uint32_t modifier_letter_small_heng [] = { 0xA727 };
	static uint32_t modifier_letter_small_l_with_inverted_lazy_s [] = { 0xAB37 };
	static uint32_t modifier_letter_small_l_with_middle_tilde [] = { 0x026B };
	static uint32_t modifier_letter_small_u_with_left_hook [] = { 0xAB52 };
	static uint32_t modifier_letter_small_turned_w [] = { 0x028D };
	static uint32_t cjk_compatibility_ideograph_f900 [] = { 0x8C48 };
	static uint32_t cjk_compatibility_ideograph_f901 [] = { 0x66F4 };
	static uint32_t cjk_compatibility_ideograph_f902 [] = { 0x8ECA };
	static uint32_t cjk_compatibility_ideograph_f903 [] = { 0x8CC8 };
	static uint32_t cjk_compatibility_ideograph_f904 [] = { 0x6ED1 };
	static uint32_t cjk_compatibility_ideograph_f905 [] = { 0x4E32 };
	static uint32_t cjk_compatibility_ideograph_f906 [] = { 0x53E5 };
	static uint32_t cjk_compatibility_ideograph_f907 [] = { 0x9F9C };
	static uint32_t cjk_compatibility_ideograph_f908 [] = { 0x9F9C };
	static uint32_t cjk_compatibility_ideograph_f909 [] = { 0x5951 };
	static uint32_t cjk_compatibility_ideograph_f90a [] = { 0x91D1 };
	static uint32_t cjk_compatibility_ideograph_f90b [] = { 0x5587 };
	static uint32_t cjk_compatibility_ideograph_f90c [] = { 0x5948 };
	static uint32_t cjk_compatibility_ideograph_f90d [] = { 0x61F6 };
	static uint32_t cjk_compatibility_ideograph_f90e [] = { 0x7669 };
	static uint32_t cjk_compatibility_ideograph_f90f [] = { 0x7F85 };
	static uint32_t cjk_compatibility_ideograph_f910 [] = { 0x863F };
	static uint32_t cjk_compatibility_ideograph_f911 [] = { 0x87BA };
	static uint32_t cjk_compatibility_ideograph_f912 [] = { 0x88F8 };
	static uint32_t cjk_compatibility_ideograph_f913 [] = { 0x908F };
	static uint32_t cjk_compatibility_ideograph_f914 [] = { 0x6A02 };
	static uint32_t cjk_compatibility_ideograph_f915 [] = { 0x6D1B };
	static uint32_t cjk_compatibility_ideograph_f916 [] = { 0x70D9 };
	static uint32_t cjk_compatibility_ideograph_f917 [] = { 0x73DE };
	static uint32_t cjk_compatibility_ideograph_f918 [] = { 0x843D };
	static uint32_t cjk_compatibility_ideograph_f919 [] = { 0x916A };
	static uint32_t cjk_compatibility_ideograph_f91a [] = { 0x99F1 };
	static uint32_t cjk_compatibility_ideograph_f91b [] = { 0x4E82 };
	static uint32_t cjk_compatibility_ideograph_f91c [] = { 0x5375 };
	static uint32_t cjk_compatibility_ideograph_f91d [] = { 0x6B04 };
	static uint32_t cjk_compatibility_ideograph_f91e [] = { 0x721B };
	static uint32_t cjk_compatibility_ideograph_f91f [] = { 0x862D };
	static uint32_t cjk_compatibility_ideograph_f920 [] = { 0x9E1E };
	static uint32_t cjk_compatibility_ideograph_f921 [] = { 0x5D50 };
	static uint32_t cjk_compatibility_ideograph_f922 [] = { 0x6FEB };
	static uint32_t cjk_compatibility_ideograph_f923 [] = { 0x85CD };
	static uint32_t cjk_compatibility_ideograph_f924 [] = { 0x8964 };
	static uint32_t cjk_compatibility_ideograph_f925 [] = { 0x62C9 };
	static uint32_t cjk_compatibility_ideograph_f926 [] = { 0x81D8 };
	static uint32_t cjk_compatibility_ideograph_f927 [] = { 0x881F };
	static uint32_t cjk_compatibility_ideograph_f928 [] = { 0x5ECA };
	static uint32_t cjk_compatibility_ideograph_f929 [] = { 0x6717 };
	static uint32_t cjk_compatibility_ideograph_f92a [] = { 0x6D6A };
	static uint32_t cjk_compatibility_ideograph_f92b [] = { 0x72FC };
	static uint32_t cjk_compatibility_ideograph_f92c [] = { 0x90CE };
	static uint32_t cjk_compatibility_ideograph_f92d [] = { 0x4F86 };
	static uint32_t cjk_compatibility_ideograph_f92e [] = { 0x51B7 };
	static uint32_t cjk_compatibility_ideograph_f92f [] = { 0x52DE };
	static uint32_t cjk_compatibility_ideograph_f930 [] = { 0x64C4 };
	static uint32_t cjk_compatibility_ideograph_f931 [] = { 0x6AD3 };
	static uint32_t cjk_compatibility_ideograph_f932 [] = { 0x7210 };
	static uint32_t cjk_compatibility_ideograph_f933 [] = { 0x76E7 };
	static uint32_t cjk_compatibility_ideograph_f934 [] = { 0x8001 };
	static uint32_t cjk_compatibility_ideograph_f935 [] = { 0x8606 };
	static uint32_t cjk_compatibility_ideograph_f936 [] = { 0x865C };
	static uint32_t cjk_compatibility_ideograph_f937 [] = { 0x8DEF };
	static uint32_t cjk_compatibility_ideograph_f938 [] = { 0x9732 };
	static uint32_t cjk_compatibility_ideograph_f939 [] = { 0x9B6F };
	static uint32_t cjk_compatibility_ideograph_f93a [] = { 0x9DFA };
	static uint32_t cjk_compatibility_ideograph_f93b [] = { 0x788C };
	static uint32_t cjk_compatibility_ideograph_f93c [] = { 0x797F };
	static uint32_t cjk_compatibility_ideograph_f93d [] = { 0x7DA0 };
	static uint32_t cjk_compatibility_ideograph_f93e [] = { 0x83C9 };
	static uint32_t cjk_compatibility_ideograph_f93f [] = { 0x9304 };
	static uint32_t cjk_compatibility_ideograph_f940 [] = { 0x9E7F };
	static uint32_t cjk_compatibility_ideograph_f941 [] = { 0x8AD6 };
	static uint32_t cjk_compatibility_ideograph_f942 [] = { 0x58DF };
	static uint32_t cjk_compatibility_ideograph_f943 [] = { 0x5F04 };
	static uint32_t cjk_compatibility_ideograph_f944 [] = { 0x7C60 };
	static uint32_t cjk_compatibility_ideograph_f945 [] = { 0x807E };
	static uint32_t cjk_compatibility_ideograph_f946 [] = { 0x7262 };
	static uint32_t cjk_compatibility_ideograph_f947 [] = { 0x78CA };
	static uint32_t cjk_compatibility_ideograph_f948 [] = { 0x8CC2 };
	static uint32_t cjk_compatibility_ideograph_f949 [] = { 0x96F7 };
	static uint32_t cjk_compatibility_ideograph_f94a [] = { 0x58D8 };
	static uint32_t cjk_compatibility_ideograph_f94b [] = { 0x5C62 };
	static uint32_t cjk_compatibility_ideograph_f94c [] = { 0x6A13 };
	static uint32_t cjk_compatibility_ideograph_f94d [] = { 0x6DDA };
	static uint32_t cjk_compatibility_ideograph_f94e [] = { 0x6F0F };
	static uint32_t cjk_compatibility_ideograph_f94f [] = { 0x7D2F };
	static uint32_t cjk_compatibility_ideograph_f950 [] = { 0x7E37 };
	static uint32_t cjk_compatibility_ideograph_f951 [] = { 0x964B };
	static uint32_t cjk_compatibility_ideograph_f952 [] = { 0x52D2 };
	static uint32_t cjk_compatibility_ideograph_f953 [] = { 0x808B };
	static uint32_t cjk_compatibility_ideograph_f954 [] = { 0x51DC };
	static uint32_t cjk_compatibility_ideograph_f955 [] = { 0x51CC };
	static uint32_t cjk_compatibility_ideograph_f956 [] = { 0x7A1C };
	static uint32_t cjk_compatibility_ideograph_f957 [] = { 0x7DBE };
	static uint32_t cjk_compatibility_ideograph_f958 [] = { 0x83F1 };
	static uint32_t cjk_compatibility_ideograph_f959 [] = { 0x9675 };
	static uint32_t cjk_compatibility_ideograph_f95a [] = { 0x8B80 };
	static uint32_t cjk_compatibility_ideograph_f95b [] = { 0x62CF };
	static uint32_t cjk_compatibility_ideograph_f95c [] = { 0x6A02 };
	static uint32_t cjk_compatibility_ideograph_f95d [] = { 0x8AFE };
	static uint32_t cjk_compatibility_ideograph_f95e [] = { 0x4E39 };
	static uint32_t cjk_compatibility_ideograph_f95f [] = { 0x5BE7 };
	static uint32_t cjk_compatibility_ideograph_f960 [] = { 0x6012 };
	static uint32_t cjk_compatibility_ideograph_f961 [] = { 0x7387 };
	static uint32_t cjk_compatibility_ideograph_f962 [] = { 0x7570 };
	static uint32_t cjk_compatibility_ideograph_f963 [] = { 0x5317 };
	static uint32_t cjk_compatibility_ideograph_f964 [] = { 0x78FB };
	static uint32_t cjk_compatibility_ideograph_f965 [] = { 0x4FBF };
	static uint32_t cjk_compatibility_ideograph_f966 [] = { 0x5FA9 };
	static uint32_t cjk_compatibility_ideograph_f967 [] = { 0x4E0D };
	static uint32_t cjk_compatibility_ideograph_f968 [] = { 0x6CCC };
	static uint32_t cjk_compatibility_ideograph_f969 [] = { 0x6578 };
	static uint32_t cjk_compatibility_ideograph_f96a [] = { 0x7D22 };
	static uint32_t cjk_compatibility_ideograph_f96b [] = { 0x53C3 };
	static uint32_t cjk_compatibility_ideograph_f96c [] = { 0x585E };
	static uint32_t cjk_compatibility_ideograph_f96d [] = { 0x7701 };
	static uint32_t cjk_compatibility_ideograph_f96e [] = { 0x8449 };
	static uint32_t cjk_compatibility_ideograph_f96f [] = { 0x8AAA };
	static uint32_t cjk_compatibility_ideograph_f970 [] = { 0x6BBA };
	static uint32_t cjk_compatibility_ideograph_f971 [] = { 0x8FB0 };
	static uint32_t cjk_compatibility_ideograph_f972 [] = { 0x6C88 };
	static uint32_t cjk_compatibility_ideograph_f973 [] = { 0x62FE };
	static uint32_t cjk_compatibility_ideograph_f974 [] = { 0x82E5 };
	static uint32_t cjk_compatibility_ideograph_f975 [] = { 0x63A0 };
	static uint32_t cjk_compatibility_ideograph_f976 [] = { 0x7565 };
	static uint32_t cjk_compatibility_ideograph_f977 [] = { 0x4EAE };
	static uint32_t cjk_compatibility_ideograph_f978 [] = { 0x5169 };
	static uint32_t cjk_compatibility_ideograph_f979 [] = { 0x51C9 };
	static uint32_t cjk_compatibility_ideograph_f97a [] = { 0x6881 };
	static uint32_t cjk_compatibility_ideograph_f97b [] = { 0x7CE7 };
	static uint32_t cjk_compatibility_ideograph_f97c [] = { 0x826F };
	static uint32_t cjk_compatibility_ideograph_f97d [] = { 0x8AD2 };
	static uint32_t cjk_compatibility_ideograph_f97e [] = { 0x91CF };
	static uint32_t cjk_compatibility_ideograph_f97f [] = { 0x52F5 };
	static uint32_t cjk_compatibility_ideograph_f980 [] = { 0x5442 };
	static uint32_t cjk_compatibility_ideograph_f981 [] = { 0x5973 };
	static uint32_t cjk_compatibility_ideograph_f982 [] = { 0x5EEC };
	static uint32_t cjk_compatibility_ideograph_f983 [] = { 0x65C5 };
	static uint32_t cjk_compatibility_ideograph_f984 [] = { 0x6FFE };
	static uint32_t cjk_compatibility_ideograph_f985 [] = { 0x792A };
	static uint32_t cjk_compatibility_ideograph_f986 [] = { 0x95AD };
	static uint32_t cjk_compatibility_ideograph_f987 [] = { 0x9A6A };
	static uint32_t cjk_compatibility_ideograph_f988 [] = { 0x9E97 };
	static uint32_t cjk_compatibility_ideograph_f989 [] = { 0x9ECE };
	static uint32_t cjk_compatibility_ideograph_f98a [] = { 0x529B };
	static uint32_t cjk_compatibility_ideograph_f98b [] = { 0x66C6 };
	static uint32_t cjk_compatibility_ideograph_f98c [] = { 0x6B77 };
	static uint32_t cjk_compatibility_ideograph_f98d [] = { 0x8F62 };
	static uint32_t cjk_compatibility_ideograph_f98e [] = { 0x5E74 };
	static uint32_t cjk_compatibility_ideograph_f98f [] = { 0x6190 };
	static uint32_t cjk_compatibility_ideograph_f990 [] = { 0x6200 };
	static uint32_t cjk_compatibility_ideograph_f991 [] = { 0x649A };
	static uint32_t cjk_compatibility_ideograph_f992 [] = { 0x6F23 };
	static uint32_t cjk_compatibility_ideograph_f993 [] = { 0x7149 };
	static uint32_t cjk_compatibility_ideograph_f994 [] = { 0x7489 };
	static uint32_t cjk_compatibility_ideograph_f995 [] = { 0x79CA };
	static uint32_t cjk_compatibility_ideograph_f996 [] = { 0x7DF4 };
	static uint32_t cjk_compatibility_ideograph_f997 [] = { 0x806F };
	static uint32_t cjk_compatibility_ideograph_f998 [] = { 0x8F26 };
	static uint32_t cjk_compatibility_ideograph_f999 [] = { 0x84EE };
	static uint32_t cjk_compatibility_ideograph_f99a [] = { 0x9023 };
	static uint32_t cjk_compatibility_ideograph_f99b [] = { 0x934A };
	static uint32_t cjk_compatibility_ideograph_f99c [] = { 0x5217 };
	static uint32_t cjk_compatibility_ideograph_f99d [] = { 0x52A3 };
	static uint32_t cjk_compatibility_ideograph_f99e [] = { 0x54BD };
	static uint32_t cjk_compatibility_ideograph_f99f [] = { 0x70C8 };
	static uint32_t cjk_compatibility_ideograph_f9a0 [] = { 0x88C2 };
	static uint32_t cjk_compatibility_ideograph_f9a1 [] = { 0x8AAA };
	static uint32_t cjk_compatibility_ideograph_f9a2 [] = { 0x5EC9 };
	static uint32_t cjk_compatibility_ideograph_f9a3 [] = { 0x5FF5 };
	static uint32_t cjk_compatibility_ideograph_f9a4 [] = { 0x637B };
	static uint32_t cjk_compatibility_ideograph_f9a5 [] = { 0x6BAE };
	static uint32_t cjk_compatibility_ideograph_f9a6 [] = { 0x7C3E };
	static uint32_t cjk_compatibility_ideograph_f9a7 [] = { 0x7375 };
	static uint32_t cjk_compatibility_ideograph_f9a8 [] = { 0x4EE4 };
	static uint32_t cjk_compatibility_ideograph_f9a9 [] = { 0x56F9 };
	static uint32_t cjk_compatibility_ideograph_f9aa [] = { 0x5BE7 };
	static uint32_t cjk_compatibility_ideograph_f9ab [] = { 0x5DBA };
	static uint32_t cjk_compatibility_ideograph_f9ac [] = { 0x601C };
	static uint32_t cjk_compatibility_ideograph_f9ad [] = { 0x73B2 };
	static uint32_t cjk_compatibility_ideograph_f9ae [] = { 0x7469 };
	static uint32_t cjk_compatibility_ideograph_f9af [] = { 0x7F9A };
	static uint32_t cjk_compatibility_ideograph_f9b0 [] = { 0x8046 };
	static uint32_t cjk_compatibility_ideograph_f9b1 [] = { 0x9234 };
	static uint32_t cjk_compatibility_ideograph_f9b2 [] = { 0x96F6 };
	static uint32_t cjk_compatibility_ideograph_f9b3 [] = { 0x9748 };
	static uint32_t cjk_compatibility_ideograph_f9b4 [] = { 0x9818 };
	static uint32_t cjk_compatibility_ideograph_f9b5 [] = { 0x4F8B };
	static uint32_t cjk_compatibility_ideograph_f9b6 [] = { 0x79AE };
	static uint32_t cjk_compatibility_ideograph_f9b7 [] = { 0x91B4 };
	static uint32_t cjk_compatibility_ideograph_f9b8 [] = { 0x96B8 };
	static uint32_t cjk_compatibility_ideograph_f9b9 [] = { 0x60E1 };
	static uint32_t cjk_compatibility_ideograph_f9ba [] = { 0x4E86 };
	static uint32_t cjk_compatibility_ideograph_f9bb [] = { 0x50DA };
	static uint32_t cjk_compatibility_ideograph_f9bc [] = { 0x5BEE };
	static uint32_t cjk_compatibility_ideograph_f9bd [] = { 0x5C3F };
	static uint32_t cjk_compatibility_ideograph_f9be [] = { 0x6599 };
	static uint32_t cjk_compatibility_ideograph_f9bf [] = { 0x6A02 };
	static uint32_t cjk_compatibility_ideograph_f9c0 [] = { 0x71CE };
	static uint32_t cjk_compatibility_ideograph_f9c1 [] = { 0x7642 };
	static uint32_t cjk_compatibility_ideograph_f9c2 [] = { 0x84FC };
	static uint32_t cjk_compatibility_ideograph_f9c3 [] = { 0x907C };
	static uint32_t cjk_compatibility_ideograph_f9c4 [] = { 0x9F8D };
	static uint32_t cjk_compatibility_ideograph_f9c5 [] = { 0x6688 };
	static uint32_t cjk_compatibility_ideograph_f9c6 [] = { 0x962E };
	static uint32_t cjk_compatibility_ideograph_f9c7 [] = { 0x5289 };
	static uint32_t cjk_compatibility_ideograph_f9c8 [] = { 0x677B };
	static uint32_t cjk_compatibility_ideograph_f9c9 [] = { 0x67F3 };
	static uint32_t cjk_compatibility_ideograph_f9ca [] = { 0x6D41 };
	static uint32_t cjk_compatibility_ideograph_f9cb [] = { 0x6E9C };
	static uint32_t cjk_compatibility_ideograph_f9cc [] = { 0x7409 };
	static uint32_t cjk_compatibility_ideograph_f9cd [] = { 0x7559 };
	static uint32_t cjk_compatibility_ideograph_f9ce [] = { 0x786B };
	static uint32_t cjk_compatibility_ideograph_f9cf [] = { 0x7D10 };
	static uint32_t cjk_compatibility_ideograph_f9d0 [] = { 0x985E };
	static uint32_t cjk_compatibility_ideograph_f9d1 [] = { 0x516D };
	static uint32_t cjk_compatibility_ideograph_f9d2 [] = { 0x622E };
	static uint32_t cjk_compatibility_ideograph_f9d3 [] = { 0x9678 };
	static uint32_t cjk_compatibility_ideograph_f9d4 [] = { 0x502B };
	static uint32_t cjk_compatibility_ideograph_f9d5 [] = { 0x5D19 };
	static uint32_t cjk_compatibility_ideograph_f9d6 [] = { 0x6DEA };
	static uint32_t cjk_compatibility_ideograph_f9d7 [] = { 0x8F2A };
	static uint32_t cjk_compatibility_ideograph_f9d8 [] = { 0x5F8B };
	static uint32_t cjk_compatibility_ideograph_f9d9 [] = { 0x6144 };
	static uint32_t cjk_compatibility_ideograph_f9da [] = { 0x6817 };
	static uint32_t cjk_compatibility_ideograph_f9db [] = { 0x7387 };
	static uint32_t cjk_compatibility_ideograph_f9dc [] = { 0x9686 };
	static uint32_t cjk_compatibility_ideograph_f9dd [] = { 0x5229 };
	static uint32_t cjk_compatibility_ideograph_f9de [] = { 0x540F };
	static uint32_t cjk_compatibility_ideograph_f9df [] = { 0x5C65 };
	static uint32_t cjk_compatibility_ideograph_f9e0 [] = { 0x6613 };
	static uint32_t cjk_compatibility_ideograph_f9e1 [] = { 0x674E };
	static uint32_t cjk_compatibility_ideograph_f9e2 [] = { 0x68A8 };
	static uint32_t cjk_compatibility_ideograph_f9e3 [] = { 0x6CE5 };
	static uint32_t cjk_compatibility_ideograph_f9e4 [] = { 0x7406 };
	static uint32_t cjk_compatibility_ideograph_f9e5 [] = { 0x75E2 };
	static uint32_t cjk_compatibility_ideograph_f9e6 [] = { 0x7F79 };
	static uint32_t cjk_compatibility_ideograph_f9e7 [] = { 0x88CF };
	static uint32_t cjk_compatibility_ideograph_f9e8 [] = { 0x88E1 };
	static uint32_t cjk_compatibility_ideograph_f9e9 [] = { 0x91CC };
	static uint32_t cjk_compatibility_ideograph_f9ea [] = { 0x96E2 };
	static uint32_t cjk_compatibility_ideograph_f9eb [] = { 0x533F };
	static uint32_t cjk_compatibility_ideograph_f9ec [] = { 0x6EBA };
	static uint32_t cjk_compatibility_ideograph_f9ed [] = { 0x541D };
	static uint32_t cjk_compatibility_ideograph_f9ee [] = { 0x71D0 };
	static uint32_t cjk_compatibility_ideograph_f9ef [] = { 0x7498 };
	static uint32_t cjk_compatibility_ideograph_f9f0 [] = { 0x85FA };
	static uint32_t cjk_compatibility_ideograph_f9f1 [] = { 0x96A3 };
	static uint32_t cjk_compatibility_ideograph_f9f2 [] = { 0x9C57 };
	static uint32_t cjk_compatibility_ideograph_f9f3 [] = { 0x9E9F };
	static uint32_t cjk_compatibility_ideograph_f9f4 [] = { 0x6797 };
	static uint32_t cjk_compatibility_ideograph_f9f5 [] = { 0x6DCB };
	static uint32_t cjk_compatibility_ideograph_f9f6 [] = { 0x81E8 };
	static uint32_t cjk_compatibility_ideograph_f9f7 [] = { 0x7ACB };
	static uint32_t cjk_compatibility_ideograph_f9f8 [] = { 0x7B20 };
	static uint32_t cjk_compatibility_ideograph_f9f9 [] = { 0x7C92 };
	static uint32_t cjk_compatibility_ideograph_f9fa [] = { 0x72C0 };
	static uint32_t cjk_compatibility_ideograph_f9fb [] = { 0x7099 };
	static uint32_t cjk_compatibility_ideograph_f9fc [] = { 0x8B58 };
	static uint32_t cjk_compatibility_ideograph_f9fd [] = { 0x4EC0 };
	static uint32_t cjk_compatibility_ideograph_f9fe [] = { 0x8336 };
	static uint32_t cjk_compatibility_ideograph_f9ff [] = { 0x523A };
	static uint32_t cjk_compatibility_ideograph_fa00 [] = { 0x5207 };
	static uint32_t cjk_compatibility_ideograph_fa01 [] = { 0x5EA6 };
	static uint32_t cjk_compatibility_ideograph_fa02 [] = { 0x62D3 };
	static uint32_t cjk_compatibility_ideograph_fa03 [] = { 0x7CD6 };
	static uint32_t cjk_compatibility_ideograph_fa04 [] = { 0x5B85 };
	static uint32_t cjk_compatibility_ideograph_fa05 [] = { 0x6D1E };
	static uint32_t cjk_compatibility_ideograph_fa06 [] = { 0x66B4 };
	static uint32_t cjk_compatibility_ideograph_fa07 [] = { 0x8F3B };
	static uint32_t cjk_compatibility_ideograph_fa08 [] = { 0x884C };
	static uint32_t cjk_compatibility_ideograph_fa09 [] = { 0x964D };
	static uint32_t cjk_compatibility_ideograph_fa0a [] = { 0x898B };
	static uint32_t cjk_compatibility_ideograph_fa0b [] = { 0x5ED3 };
	static uint32_t cjk_compatibility_ideograph_fa0c [] = { 0x5140 };
	static uint32_t cjk_compatibility_ideograph_fa0d [] = { 0x55C0 };
	static uint32_t cjk_compatibility_ideograph_fa10 [] = { 0x585A };
	static uint32_t cjk_compatibility_ideograph_fa12 [] = { 0x6674 };
	static uint32_t cjk_compatibility_ideograph_fa15 [] = { 0x51DE };
	static uint32_t cjk_compatibility_ideograph_fa16 [] = { 0x732A };
	static uint32_t cjk_compatibility_ideograph_fa17 [] = { 0x76CA };
	static uint32_t cjk_compatibility_ideograph_fa18 [] = { 0x793C };
	static uint32_t cjk_compatibility_ideograph_fa19 [] = { 0x795E };
	static uint32_t cjk_compatibility_ideograph_fa1a [] = { 0x7965 };
	static uint32_t cjk_compatibility_ideograph_fa1b [] = { 0x798F };
	static uint32_t cjk_compatibility_ideograph_fa1c [] = { 0x9756 };
	static uint32_t cjk_compatibility_ideograph_fa1d [] = { 0x7CBE };
	static uint32_t cjk_compatibility_ideograph_fa1e [] = { 0x7FBD };
	static uint32_t cjk_compatibility_ideograph_fa20 [] = { 0x8612 };
	static uint32_t cjk_compatibility_ideograph_fa22 [] = { 0x8AF8 };
	static uint32_t cjk_compatibility_ideograph_fa25 [] = { 0x9038 };
	static uint32_t cjk_compatibility_ideograph_fa26 [] = { 0x90FD };
	static uint32_t cjk_compatibility_ideograph_fa2a [] = { 0x98EF };
	static uint32_t cjk_compatibility_ideograph_fa2b [] = { 0x98FC };
	static uint32_t cjk_compatibility_ideograph_fa2c [] = { 0x9928 };
	static uint32_t cjk_compatibility_ideograph_fa2d [] = { 0x9DB4 };
	static uint32_t cjk_compatibility_ideograph_fa2e [] = { 0x90DE };
	static uint32_t cjk_compatibility_ideograph_fa2f [] = { 0x96B7 };
	static uint32_t cjk_compatibility_ideograph_fa30 [] = { 0x4FAE };
	static uint32_t cjk_compatibility_ideograph_fa31 [] = { 0x50E7 };
	static uint32_t cjk_compatibility_ideograph_fa32 [] = { 0x514D };
	static uint32_t cjk_compatibility_ideograph_fa33 [] = { 0x52C9 };
	static uint32_t cjk_compatibility_ideograph_fa34 [] = { 0x52E4 };
	static uint32_t cjk_compatibility_ideograph_fa35 [] = { 0x5351 };
	static uint32_t cjk_compatibility_ideograph_fa36 [] = { 0x559D };
	static uint32_t cjk_compatibility_ideograph_fa37 [] = { 0x5606 };
	static uint32_t cjk_compatibility_ideograph_fa38 [] = { 0x5668 };
	static uint32_t cjk_compatibility_ideograph_fa39 [] = { 0x5840 };
	static uint32_t cjk_compatibility_ideograph_fa3a [] = { 0x58A8 };
	static uint32_t cjk_compatibility_ideograph_fa3b [] = { 0x5C64 };
	static uint32_t cjk_compatibility_ideograph_fa3c [] = { 0x5C6E };
	static uint32_t cjk_compatibility_ideograph_fa3d [] = { 0x6094 };
	static uint32_t cjk_compatibility_ideograph_fa3e [] = { 0x6168 };
	static uint32_t cjk_compatibility_ideograph_fa3f [] = { 0x618E };
	static uint32_t cjk_compatibility_ideograph_fa40 [] = { 0x61F2 };
	static uint32_t cjk_compatibility_ideograph_fa41 [] = { 0x654F };
	static uint32_t cjk_compatibility_ideograph_fa42 [] = { 0x65E2 };
	static uint32_t cjk_compatibility_ideograph_fa43 [] = { 0x6691 };
	static uint32_t cjk_compatibility_ideograph_fa44 [] = { 0x6885 };
	static uint32_t cjk_compatibility_ideograph_fa45 [] = { 0x6D77 };
	static uint32_t cjk_compatibility_ideograph_fa46 [] = { 0x6E1A };
	static uint32_t cjk_compatibility_ideograph_fa47 [] = { 0x6F22 };
	static uint32_t cjk_compatibility_ideograph_fa48 [] = { 0x716E };
	static uint32_t cjk_compatibility_ideograph_fa49 [] = { 0x722B };
	static uint32_t cjk_compatibility_ideograph_fa4a [] = { 0x7422 };
	static uint32_t cjk_compatibility_ideograph_fa4b [] = { 0x7891 };
	static uint32_t cjk_compatibility_ideograph_fa4c [] = { 0x793E };
	static uint32_t cjk_compatibility_ideograph_fa4d [] = { 0x7949 };
	static uint32_t cjk_compatibility_ideograph_fa4e [] = { 0x7948 };
	static uint32_t cjk_compatibility_ideograph_fa4f [] = { 0x7950 };
	static uint32_t cjk_compatibility_ideograph_fa50 [] = { 0x7956 };
	static uint32_t cjk_compatibility_ideograph_fa51 [] = { 0x795D };
	static uint32_t cjk_compatibility_ideograph_fa52 [] = { 0x798D };
	static uint32_t cjk_compatibility_ideograph_fa53 [] = { 0x798E };
	static uint32_t cjk_compatibility_ideograph_fa54 [] = { 0x7A40 };
	static uint32_t cjk_compatibility_ideograph_fa55 [] = { 0x7A81 };
	static uint32_t cjk_compatibility_ideograph_fa56 [] = { 0x7BC0 };
	static uint32_t cjk_compatibility_ideograph_fa57 [] = { 0x7DF4 };
	static uint32_t cjk_compatibility_ideograph_fa58 [] = { 0x7E09 };
	static uint32_t cjk_compatibility_ideograph_fa59 [] = { 0x7E41 };
	static uint32_t cjk_compatibility_ideograph_fa5a [] = { 0x7F72 };
	static uint32_t cjk_compatibility_ideograph_fa5b [] = { 0x8005 };
	static uint32_t cjk_compatibility_ideograph_fa5c [] = { 0x81ED };
	static uint32_t cjk_compatibility_ideograph_fa5d [] = { 0x8279 };
	static uint32_t cjk_compatibility_ideograph_fa5e [] = { 0x8279 };
	static uint32_t cjk_compatibility_ideograph_fa5f [] = { 0x8457 };
	static uint32_t cjk_compatibility_ideograph_fa60 [] = { 0x8910 };
	static uint32_t cjk_compatibility_ideograph_fa61 [] = { 0x8996 };
	static uint32_t cjk_compatibility_ideograph_fa62 [] = { 0x8B01 };
	static uint32_t cjk_compatibility_ideograph_fa63 [] = { 0x8B39 };
	static uint32_t cjk_compatibility_ideograph_fa64 [] = { 0x8CD3 };
	static uint32_t cjk_compatibility_ideograph_fa65 [] = { 0x8D08 };
	static uint32_t cjk_compatibility_ideograph_fa66 [] = { 0x8FB6 };
	static uint32_t cjk_compatibility_ideograph_fa67 [] = { 0x9038 };
	static uint32_t cjk_compatibility_ideograph_fa68 [] = { 0x96E3 };
	static uint32_t cjk_compatibility_ideograph_fa69 [] = { 0x97FF };
	static uint32_t cjk_compatibility_ideograph_fa6a [] = { 0x983B };
	static uint32_t cjk_compatibility_ideograph_fa6b [] = { 0x6075 };
	static uint32_t cjk_compatibility_ideograph_fa6c [] = { 0x242EE };
	static uint32_t cjk_compatibility_ideograph_fa6d [] = { 0x8218 };
	static uint32_t cjk_compatibility_ideograph_fa70 [] = { 0x4E26 };
	static uint32_t cjk_compatibility_ideograph_fa71 [] = { 0x51B5 };
	static uint32_t cjk_compatibility_ideograph_fa72 [] = { 0x5168 };
	static uint32_t cjk_compatibility_ideograph_fa73 [] = { 0x4F80 };
	static uint32_t cjk_compatibility_ideograph_fa74 [] = { 0x5145 };
	static uint32_t cjk_compatibility_ideograph_fa75 [] = { 0x5180 };
	static uint32_t cjk_compatibility_ideograph_fa76 [] = { 0x52C7 };
	static uint32_t cjk_compatibility_ideograph_fa77 [] = { 0x52FA };
	static uint32_t cjk_compatibility_ideograph_fa78 [] = { 0x559D };
	static uint32_t cjk_compatibility_ideograph_fa79 [] = { 0x5555 };
	static uint32_t cjk_compatibility_ideograph_fa7a [] = { 0x5599 };
	static uint32_t cjk_compatibility_ideograph_fa7b [] = { 0x55E2 };
	static uint32_t cjk_compatibility_ideograph_fa7c [] = { 0x585A };
	static uint32_t cjk_compatibility_ideograph_fa7d [] = { 0x58B3 };
	static uint32_t cjk_compatibility_ideograph_fa7e [] = { 0x5944 };
	static uint32_t cjk_compatibility_ideograph_fa7f [] = { 0x5954 };
	static uint32_t cjk_compatibility_ideograph_fa80 [] = { 0x5A62 };
	static uint32_t cjk_compatibility_ideograph_fa81 [] = { 0x5B28 };
	static uint32_t cjk_compatibility_ideograph_fa82 [] = { 0x5ED2 };
	static uint32_t cjk_compatibility_ideograph_fa83 [] = { 0x5ED9 };
	static uint32_t cjk_compatibility_ideograph_fa84 [] = { 0x5F69 };
	static uint32_t cjk_compatibility_ideograph_fa85 [] = { 0x5FAD };
	static uint32_t cjk_compatibility_ideograph_fa86 [] = { 0x60D8 };
	static uint32_t cjk_compatibility_ideograph_fa87 [] = { 0x614E };
	static uint32_t cjk_compatibility_ideograph_fa88 [] = { 0x6108 };
	static uint32_t cjk_compatibility_ideograph_fa89 [] = { 0x618E };
	static uint32_t cjk_compatibility_ideograph_fa8a [] = { 0x6160 };
	static uint32_t cjk_compatibility_ideograph_fa8b [] = { 0x61F2 };
	static uint32_t cjk_compatibility_ideograph_fa8c [] = { 0x6234 };
	static uint32_t cjk_compatibility_ideograph_fa8d [] = { 0x63C4 };
	static uint32_t cjk_compatibility_ideograph_fa8e [] = { 0x641C };
	static uint32_t cjk_compatibility_ideograph_fa8f [] = { 0x6452 };
	static uint32_t cjk_compatibility_ideograph_fa90 [] = { 0x6556 };
	static uint32_t cjk_compatibility_ideograph_fa91 [] = { 0x6674 };
	static uint32_t cjk_compatibility_ideograph_fa92 [] = { 0x6717 };
	static uint32_t cjk_compatibility_ideograph_fa93 [] = { 0x671B };
	static uint32_t cjk_compatibility_ideograph_fa94 [] = { 0x6756 };
	static uint32_t cjk_compatibility_ideograph_fa95 [] = { 0x6B79 };
	static uint32_t cjk_compatibility_ideograph_fa96 [] = { 0x6BBA };
	static uint32_t cjk_compatibility_ideograph_fa97 [] = { 0x6D41 };
	static uint32_t cjk_compatibility_ideograph_fa98 [] = { 0x6EDB };
	static uint32_t cjk_compatibility_ideograph_fa99 [] = { 0x6ECB };
	static uint32_t cjk_compatibility_ideograph_fa9a [] = { 0x6F22 };
	static uint32_t cjk_compatibility_ideograph_fa9b [] = { 0x701E };
	static uint32_t cjk_compatibility_ideograph_fa9c [] = { 0x716E };
	static uint32_t cjk_compatibility_ideograph_fa9d [] = { 0x77A7 };
	static uint32_t cjk_compatibility_ideograph_fa9e [] = { 0x7235 };
	static uint32_t cjk_compatibility_ideograph_fa9f [] = { 0x72AF };
	static uint32_t cjk_compatibility_ideograph_faa0 [] = { 0x732A };
	static uint32_t cjk_compatibility_ideograph_faa1 [] = { 0x7471 };
	static uint32_t cjk_compatibility_ideograph_faa2 [] = { 0x7506 };
	static uint32_t cjk_compatibility_ideograph_faa3 [] = { 0x753B };
	static uint32_t cjk_compatibility_ideograph_faa4 [] = { 0x761D };
	static uint32_t cjk_compatibility_ideograph_faa5 [] = { 0x761F };
	static uint32_t cjk_compatibility_ideograph_faa6 [] = { 0x76CA };
	static uint32_t cjk_compatibility_ideograph_faa7 [] = { 0x76DB };
	static uint32_t cjk_compatibility_ideograph_faa8 [] = { 0x76F4 };
	static uint32_t cjk_compatibility_ideograph_faa9 [] = { 0x774A };
	static uint32_t cjk_compatibility_ideograph_faaa [] = { 0x7740 };
	static uint32_t cjk_compatibility_ideograph_faab [] = { 0x78CC };
	static uint32_t cjk_compatibility_ideograph_faac [] = { 0x7AB1 };
	static uint32_t cjk_compatibility_ideograph_faad [] = { 0x7BC0 };
	static uint32_t cjk_compatibility_ideograph_faae [] = { 0x7C7B };
	static uint32_t cjk_compatibility_ideograph_faaf [] = { 0x7D5B };
	static uint32_t cjk_compatibility_ideograph_fab0 [] = { 0x7DF4 };
	static uint32_t cjk_compatibility_ideograph_fab1 [] = { 0x7F3E };
	static uint32_t cjk_compatibility_ideograph_fab2 [] = { 0x8005 };
	static uint32_t cjk_compatibility_ideograph_fab3 [] = { 0x8352 };
	static uint32_t cjk_compatibility_ideograph_fab4 [] = { 0x83EF };
	static uint32_t cjk_compatibility_ideograph_fab5 [] = { 0x8779 };
	static uint32_t cjk_compatibility_ideograph_fab6 [] = { 0x8941 };
	static uint32_t cjk_compatibility_ideograph_fab7 [] = { 0x8986 };
	static uint32_t cjk_compatibility_ideograph_fab8 [] = { 0x8996 };
	static uint32_t cjk_compatibility_ideograph_fab9 [] = { 0x8ABF };
	static uint32_t cjk_compatibility_ideograph_faba [] = { 0x8AF8 };
	static uint32_t cjk_compatibility_ideograph_fabb [] = { 0x8ACB };
	static uint32_t cjk_compatibility_ideograph_fabc [] = { 0x8B01 };
	static uint32_t cjk_compatibility_ideograph_fabd [] = { 0x8AFE };
	static uint32_t cjk_compatibility_ideograph_fabe [] = { 0x8AED };
	static uint32_t cjk_compatibility_ideograph_fabf [] = { 0x8B39 };
	static uint32_t cjk_compatibility_ideograph_fac0 [] = { 0x8B8A };
	static uint32_t cjk_compatibility_ideograph_fac1 [] = { 0x8D08 };
	static uint32_t cjk_compatibility_ideograph_fac2 [] = { 0x8F38 };
	static uint32_t cjk_compatibility_ideograph_fac3 [] = { 0x9072 };
	static uint32_t cjk_compatibility_ideograph_fac4 [] = { 0x9199 };
	static uint32_t cjk_compatibility_ideograph_fac5 [] = { 0x9276 };
	static uint32_t cjk_compatibility_ideograph_fac6 [] = { 0x967C };
	static uint32_t cjk_compatibility_ideograph_fac7 [] = { 0x96E3 };
	static uint32_t cjk_compatibility_ideograph_fac8 [] = { 0x9756 };
	static uint32_t cjk_compatibility_ideograph_fac9 [] = { 0x97DB };
	static uint32_t cjk_compatibility_ideograph_faca [] = { 0x97FF };
	static uint32_t cjk_compatibility_ideograph_facb [] = { 0x980B };
	static uint32_t cjk_compatibility_ideograph_facc [] = { 0x983B };
	static uint32_t cjk_compatibility_ideograph_facd [] = { 0x9B12 };
	static uint32_t cjk_compatibility_ideograph_face [] = { 0x9F9C };
	static uint32_t cjk_compatibility_ideograph_facf [] = { 0x2284A };
	static uint32_t cjk_compatibility_ideograph_fad0 [] = { 0x22844 };
	static uint32_t cjk_compatibility_ideograph_fad1 [] = { 0x233D5 };
	static uint32_t cjk_compatibility_ideograph_fad2 [] = { 0x3B9D };
	static uint32_t cjk_compatibility_ideograph_fad3 [] = { 0x4018 };
	static uint32_t cjk_compatibility_ideograph_fad4 [] = { 0x4039 };
	static uint32_t cjk_compatibility_ideograph_fad5 [] = { 0x25249 };
	static uint32_t cjk_compatibility_ideograph_fad6 [] = { 0x25CD0 };
	static uint32_t cjk_compatibility_ideograph_fad7 [] = { 0x27ED3 };
	static uint32_t cjk_compatibility_ideograph_fad8 [] = { 0x9F43 };
	static uint32_t cjk_compatibility_ideograph_fad9 [] = { 0x9F8E };
	static uint32_t latin_small_ligature_ff [] = { 0x0066, 0x0066 };
	static uint32_t latin_small_ligature_fi [] = { 0x0066, 0x0069 };
	static uint32_t latin_small_ligature_fl [] = { 0x0066, 0x006C };
	static uint32_t latin_small_ligature_ffi [] = { 0x0066, 0x0066, 0x0069 };
	static uint32_t latin_small_ligature_ffl [] = { 0x0066, 0x0066, 0x006C };
	static uint32_t latin_small_ligature_long_s_t [] = { 0x017F, 0x0074 };
	static uint32_t latin_small_ligature_st [] = { 0x0073, 0x0074 };
	static uint32_t armenian_small_ligature_men_now [] = { 0x0574, 0x0576 };
	static uint32_t armenian_small_ligature_men_ech [] = { 0x0574, 0x0565 };
	static uint32_t armenian_small_ligature_men_ini [] = { 0x0574, 0x056B };
	static uint32_t armenian_small_ligature_vew_now [] = { 0x057E, 0x0576 };
	static uint32_t armenian_small_ligature_men_xeh [] = { 0x0574, 0x056D };
	static uint32_t hebrew_letter_yod_with_hiriq [] = { 0x05D9, 0x05B4 };
	static uint32_t hebrew_ligature_yiddish_yod_yod_patah [] = { 0x05F2, 0x05B7 };
	static uint32_t hebrew_letter_alternative_ayin [] = { 0x05E2 };
	static uint32_t hebrew_letter_wide_alef [] = { 0x05D0 };
	static uint32_t hebrew_letter_wide_dalet [] = { 0x05D3 };
	static uint32_t hebrew_letter_wide_he [] = { 0x05D4 };
	static uint32_t hebrew_letter_wide_kaf [] = { 0x05DB };
	static uint32_t hebrew_letter_wide_lamed [] = { 0x05DC };
	static uint32_t hebrew_letter_wide_final_mem [] = { 0x05DD };
	static uint32_t hebrew_letter_wide_resh [] = { 0x05E8 };
	static uint32_t hebrew_letter_wide_tav [] = { 0x05EA };
	static uint32_t hebrew_letter_alternative_plus_sign [] = { 0x002B };
	static uint32_t hebrew_letter_shin_with_shin_dot [] = { 0x05E9, 0x05C1 };
	static uint32_t hebrew_letter_shin_with_sin_dot [] = { 0x05E9, 0x05C2 };
	static uint32_t hebrew_letter_shin_with_dagesh_and_shin_dot [] = { 0xFB49, 0x05C1 };
	static uint32_t hebrew_letter_shin_with_dagesh_and_sin_dot [] = { 0xFB49, 0x05C2 };
	static uint32_t hebrew_letter_alef_with_patah [] = { 0x05D0, 0x05B7 };
	static uint32_t hebrew_letter_alef_with_qamats [] = { 0x05D0, 0x05B8 };
	static uint32_t hebrew_letter_alef_with_mapiq [] = { 0x05D0, 0x05BC };
	static uint32_t hebrew_letter_bet_with_dagesh [] = { 0x05D1, 0x05BC };
	static uint32_t hebrew_letter_gimel_with_dagesh [] = { 0x05D2, 0x05BC };
	static uint32_t hebrew_letter_dalet_with_dagesh [] = { 0x05D3, 0x05BC };
	static uint32_t hebrew_letter_he_with_mapiq [] = { 0x05D4, 0x05BC };
	static uint32_t hebrew_letter_vav_with_dagesh [] = { 0x05D5, 0x05BC };
	static uint32_t hebrew_letter_zayin_with_dagesh [] = { 0x05D6, 0x05BC };
	static uint32_t hebrew_letter_tet_with_dagesh [] = { 0x05D8, 0x05BC };
	static uint32_t hebrew_letter_yod_with_dagesh [] = { 0x05D9, 0x05BC };
	static uint32_t hebrew_letter_final_kaf_with_dagesh [] = { 0x05DA, 0x05BC };
	static uint32_t hebrew_letter_kaf_with_dagesh [] = { 0x05DB, 0x05BC };
	static uint32_t hebrew_letter_lamed_with_dagesh [] = { 0x05DC, 0x05BC };
	static uint32_t hebrew_letter_mem_with_dagesh [] = { 0x05DE, 0x05BC };
	static uint32_t hebrew_letter_nun_with_dagesh [] = { 0x05E0, 0x05BC };
	static uint32_t hebrew_letter_samekh_with_dagesh [] = { 0x05E1, 0x05BC };
	static uint32_t hebrew_letter_final_pe_with_dagesh [] = { 0x05E3, 0x05BC };
	static uint32_t hebrew_letter_pe_with_dagesh [] = { 0x05E4, 0x05BC };
	static uint32_t hebrew_letter_tsadi_with_dagesh [] = { 0x05E6, 0x05BC };
	static uint32_t hebrew_letter_qof_with_dagesh [] = { 0x05E7, 0x05BC };
	static uint32_t hebrew_letter_resh_with_dagesh [] = { 0x05E8, 0x05BC };
	static uint32_t hebrew_letter_shin_with_dagesh [] = { 0x05E9, 0x05BC };
	static uint32_t hebrew_letter_tav_with_dagesh [] = { 0x05EA, 0x05BC };
	static uint32_t hebrew_letter_vav_with_holam [] = { 0x05D5, 0x05B9 };
	static uint32_t hebrew_letter_bet_with_rafe [] = { 0x05D1, 0x05BF };
	static uint32_t hebrew_letter_kaf_with_rafe [] = { 0x05DB, 0x05BF };
	static uint32_t hebrew_letter_pe_with_rafe [] = { 0x05E4, 0x05BF };
	static uint32_t hebrew_ligature_alef_lamed [] = { 0x05D0, 0x05DC };
	static uint32_t arabic_letter_alef_wasla_isolated_form [] = { 0x0671 };
	static uint32_t arabic_letter_alef_wasla_final_form [] = { 0x0671 };
	static uint32_t arabic_letter_beeh_isolated_form [] = { 0x067B };
	static uint32_t arabic_letter_beeh_final_form [] = { 0x067B };
	static uint32_t arabic_letter_beeh_initial_form [] = { 0x067B };
	static uint32_t arabic_letter_beeh_medial_form [] = { 0x067B };
	static uint32_t arabic_letter_peh_isolated_form [] = { 0x067E };
	static uint32_t arabic_letter_peh_final_form [] = { 0x067E };
	static uint32_t arabic_letter_peh_initial_form [] = { 0x067E };
	static uint32_t arabic_letter_peh_medial_form [] = { 0x067E };
	static uint32_t arabic_letter_beheh_isolated_form [] = { 0x0680 };
	static uint32_t arabic_letter_beheh_final_form [] = { 0x0680 };
	static uint32_t arabic_letter_beheh_initial_form [] = { 0x0680 };
	static uint32_t arabic_letter_beheh_medial_form [] = { 0x0680 };
	static uint32_t arabic_letter_tteheh_isolated_form [] = { 0x067A };
	static uint32_t arabic_letter_tteheh_final_form [] = { 0x067A };
	static uint32_t arabic_letter_tteheh_initial_form [] = { 0x067A };
	static uint32_t arabic_letter_tteheh_medial_form [] = { 0x067A };
	static uint32_t arabic_letter_teheh_isolated_form [] = { 0x067F };
	static uint32_t arabic_letter_teheh_final_form [] = { 0x067F };
	static uint32_t arabic_letter_teheh_initial_form [] = { 0x067F };
	static uint32_t arabic_letter_teheh_medial_form [] = { 0x067F };
	static uint32_t arabic_letter_tteh_isolated_form [] = { 0x0679 };
	static uint32_t arabic_letter_tteh_final_form [] = { 0x0679 };
	static uint32_t arabic_letter_tteh_initial_form [] = { 0x0679 };
	static uint32_t arabic_letter_tteh_medial_form [] = { 0x0679 };
	static uint32_t arabic_letter_veh_isolated_form [] = { 0x06A4 };
	static uint32_t arabic_letter_veh_final_form [] = { 0x06A4 };
	static uint32_t arabic_letter_veh_initial_form [] = { 0x06A4 };
	static uint32_t arabic_letter_veh_medial_form [] = { 0x06A4 };
	static uint32_t arabic_letter_peheh_isolated_form [] = { 0x06A6 };
	static uint32_t arabic_letter_peheh_final_form [] = { 0x06A6 };
	static uint32_t arabic_letter_peheh_initial_form [] = { 0x06A6 };
	static uint32_t arabic_letter_peheh_medial_form [] = { 0x06A6 };
	static uint32_t arabic_letter_dyeh_isolated_form [] = { 0x0684 };
	static uint32_t arabic_letter_dyeh_final_form [] = { 0x0684 };
	static uint32_t arabic_letter_dyeh_initial_form [] = { 0x0684 };
	static uint32_t arabic_letter_dyeh_medial_form [] = { 0x0684 };
	static uint32_t arabic_letter_nyeh_isolated_form [] = { 0x0683 };
	static uint32_t arabic_letter_nyeh_final_form [] = { 0x0683 };
	static uint32_t arabic_letter_nyeh_initial_form [] = { 0x0683 };
	static uint32_t arabic_letter_nyeh_medial_form [] = { 0x0683 };
	static uint32_t arabic_letter_tcheh_isolated_form [] = { 0x0686 };
	static uint32_t arabic_letter_tcheh_final_form [] = { 0x0686 };
	static uint32_t arabic_letter_tcheh_initial_form [] = { 0x0686 };
	static uint32_t arabic_letter_tcheh_medial_form [] = { 0x0686 };
	static uint32_t arabic_letter_tcheheh_isolated_form [] = { 0x0687 };
	static uint32_t arabic_letter_tcheheh_final_form [] = { 0x0687 };
	static uint32_t arabic_letter_tcheheh_initial_form [] = { 0x0687 };
	static uint32_t arabic_letter_tcheheh_medial_form [] = { 0x0687 };
	static uint32_t arabic_letter_ddahal_isolated_form [] = { 0x068D };
	static uint32_t arabic_letter_ddahal_final_form [] = { 0x068D };
	static uint32_t arabic_letter_dahal_isolated_form [] = { 0x068C };
	static uint32_t arabic_letter_dahal_final_form [] = { 0x068C };
	static uint32_t arabic_letter_dul_isolated_form [] = { 0x068E };
	static uint32_t arabic_letter_dul_final_form [] = { 0x068E };
	static uint32_t arabic_letter_ddal_isolated_form [] = { 0x0688 };
	static uint32_t arabic_letter_ddal_final_form [] = { 0x0688 };
	static uint32_t arabic_letter_jeh_isolated_form [] = { 0x0698 };
	static uint32_t arabic_letter_jeh_final_form [] = { 0x0698 };
	static uint32_t arabic_letter_rreh_isolated_form [] = { 0x0691 };
	static uint32_t arabic_letter_rreh_final_form [] = { 0x0691 };
	static uint32_t arabic_letter_keheh_isolated_form [] = { 0x06A9 };
	static uint32_t arabic_letter_keheh_final_form [] = { 0x06A9 };
	static uint32_t arabic_letter_keheh_initial_form [] = { 0x06A9 };
	static uint32_t arabic_letter_keheh_medial_form [] = { 0x06A9 };
	static uint32_t arabic_letter_gaf_isolated_form [] = { 0x06AF };
	static uint32_t arabic_letter_gaf_final_form [] = { 0x06AF };
	static uint32_t arabic_letter_gaf_initial_form [] = { 0x06AF };
	static uint32_t arabic_letter_gaf_medial_form [] = { 0x06AF };
	static uint32_t arabic_letter_gueh_isolated_form [] = { 0x06B3 };
	static uint32_t arabic_letter_gueh_final_form [] = { 0x06B3 };
	static uint32_t arabic_letter_gueh_initial_form [] = { 0x06B3 };
	static uint32_t arabic_letter_gueh_medial_form [] = { 0x06B3 };
	static uint32_t arabic_letter_ngoeh_isolated_form [] = { 0x06B1 };
	static uint32_t arabic_letter_ngoeh_final_form [] = { 0x06B1 };
	static uint32_t arabic_letter_ngoeh_initial_form [] = { 0x06B1 };
	static uint32_t arabic_letter_ngoeh_medial_form [] = { 0x06B1 };
	static uint32_t arabic_letter_noon_ghunna_isolated_form [] = { 0x06BA };
	static uint32_t arabic_letter_noon_ghunna_final_form [] = { 0x06BA };
	static uint32_t arabic_letter_rnoon_isolated_form [] = { 0x06BB };
	static uint32_t arabic_letter_rnoon_final_form [] = { 0x06BB };
	static uint32_t arabic_letter_rnoon_initial_form [] = { 0x06BB };
	static uint32_t arabic_letter_rnoon_medial_form [] = { 0x06BB };
	static uint32_t arabic_letter_heh_with_yeh_above_isolated_form [] = { 0x06C0 };
	static uint32_t arabic_letter_heh_with_yeh_above_final_form [] = { 0x06C0 };
	static uint32_t arabic_letter_heh_goal_isolated_form [] = { 0x06C1 };
	static uint32_t arabic_letter_heh_goal_final_form [] = { 0x06C1 };
	static uint32_t arabic_letter_heh_goal_initial_form [] = { 0x06C1 };
	static uint32_t arabic_letter_heh_goal_medial_form [] = { 0x06C1 };
	static uint32_t arabic_letter_heh_doachashmee_isolated_form [] = { 0x06BE };
	static uint32_t arabic_letter_heh_doachashmee_final_form [] = { 0x06BE };
	static uint32_t arabic_letter_heh_doachashmee_initial_form [] = { 0x06BE };
	static uint32_t arabic_letter_heh_doachashmee_medial_form [] = { 0x06BE };
	static uint32_t arabic_letter_yeh_barree_isolated_form [] = { 0x06D2 };
	static uint32_t arabic_letter_yeh_barree_final_form [] = { 0x06D2 };
	static uint32_t arabic_letter_yeh_barree_with_hamza_above_isolated_form [] = { 0x06D3 };
	static uint32_t arabic_letter_yeh_barree_with_hamza_above_final_form [] = { 0x06D3 };
	static uint32_t arabic_letter_ng_isolated_form [] = { 0x06AD };
	static uint32_t arabic_letter_ng_final_form [] = { 0x06AD };
	static uint32_t arabic_letter_ng_initial_form [] = { 0x06AD };
	static uint32_t arabic_letter_ng_medial_form [] = { 0x06AD };
	static uint32_t arabic_letter_u_isolated_form [] = { 0x06C7 };
	static uint32_t arabic_letter_u_final_form [] = { 0x06C7 };
	static uint32_t arabic_letter_oe_isolated_form [] = { 0x06C6 };
	static uint32_t arabic_letter_oe_final_form [] = { 0x06C6 };
	static uint32_t arabic_letter_yu_isolated_form [] = { 0x06C8 };
	static uint32_t arabic_letter_yu_final_form [] = { 0x06C8 };
	static uint32_t arabic_letter_u_with_hamza_above_isolated_form [] = { 0x0677 };
	static uint32_t arabic_letter_ve_isolated_form [] = { 0x06CB };
	static uint32_t arabic_letter_ve_final_form [] = { 0x06CB };
	static uint32_t arabic_letter_kirghiz_oe_isolated_form [] = { 0x06C5 };
	static uint32_t arabic_letter_kirghiz_oe_final_form [] = { 0x06C5 };
	static uint32_t arabic_letter_kirghiz_yu_isolated_form [] = { 0x06C9 };
	static uint32_t arabic_letter_kirghiz_yu_final_form [] = { 0x06C9 };
	static uint32_t arabic_letter_e_isolated_form [] = { 0x06D0 };
	static uint32_t arabic_letter_e_final_form [] = { 0x06D0 };
	static uint32_t arabic_letter_e_initial_form [] = { 0x06D0 };
	static uint32_t arabic_letter_e_medial_form [] = { 0x06D0 };
	static uint32_t arabic_letter_uighur_kazakh_kirghiz_alef_maksura_initial_form [] = { 0x0649 };
	static uint32_t arabic_letter_uighur_kazakh_kirghiz_alef_maksura_medial_form [] = { 0x0649 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_alef_isolated_form [] = { 0x0626, 0x0627 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_alef_final_form [] = { 0x0626, 0x0627 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_ae_isolated_form [] = { 0x0626, 0x06D5 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_ae_final_form [] = { 0x0626, 0x06D5 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_waw_isolated_form [] = { 0x0626, 0x0648 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_waw_final_form [] = { 0x0626, 0x0648 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_u_isolated_form [] = { 0x0626, 0x06C7 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_u_final_form [] = { 0x0626, 0x06C7 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_oe_isolated_form [] = { 0x0626, 0x06C6 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_oe_final_form [] = { 0x0626, 0x06C6 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_yu_isolated_form [] = { 0x0626, 0x06C8 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_yu_final_form [] = { 0x0626, 0x06C8 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_e_isolated_form [] = { 0x0626, 0x06D0 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_e_final_form [] = { 0x0626, 0x06D0 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_e_initial_form [] = { 0x0626, 0x06D0 };
	static uint32_t arabic_ligature_uighur_kirghiz_yeh_with_hamza_above_with_alef_maksura_isolated_form [] = { 0x0626, 0x0649 };
	static uint32_t arabic_ligature_uighur_kirghiz_yeh_with_hamza_above_with_alef_maksura_final_form [] = { 0x0626, 0x0649 };
	static uint32_t arabic_ligature_uighur_kirghiz_yeh_with_hamza_above_with_alef_maksura_initial_form [] = { 0x0626, 0x0649 };
	static uint32_t arabic_letter_farsi_yeh_isolated_form [] = { 0x06CC };
	static uint32_t arabic_letter_farsi_yeh_final_form [] = { 0x06CC };
	static uint32_t arabic_letter_farsi_yeh_initial_form [] = { 0x06CC };
	static uint32_t arabic_letter_farsi_yeh_medial_form [] = { 0x06CC };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_jeem_isolated_form [] = { 0x0626, 0x062C };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_hah_isolated_form [] = { 0x0626, 0x062D };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_meem_isolated_form [] = { 0x0626, 0x0645 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_alef_maksura_isolated_form [] = { 0x0626, 0x0649 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_yeh_isolated_form [] = { 0x0626, 0x064A };
	static uint32_t arabic_ligature_beh_with_jeem_isolated_form [] = { 0x0628, 0x062C };
	static uint32_t arabic_ligature_beh_with_hah_isolated_form [] = { 0x0628, 0x062D };
	static uint32_t arabic_ligature_beh_with_khah_isolated_form [] = { 0x0628, 0x062E };
	static uint32_t arabic_ligature_beh_with_meem_isolated_form [] = { 0x0628, 0x0645 };
	static uint32_t arabic_ligature_beh_with_alef_maksura_isolated_form [] = { 0x0628, 0x0649 };
	static uint32_t arabic_ligature_beh_with_yeh_isolated_form [] = { 0x0628, 0x064A };
	static uint32_t arabic_ligature_teh_with_jeem_isolated_form [] = { 0x062A, 0x062C };
	static uint32_t arabic_ligature_teh_with_hah_isolated_form [] = { 0x062A, 0x062D };
	static uint32_t arabic_ligature_teh_with_khah_isolated_form [] = { 0x062A, 0x062E };
	static uint32_t arabic_ligature_teh_with_meem_isolated_form [] = { 0x062A, 0x0645 };
	static uint32_t arabic_ligature_teh_with_alef_maksura_isolated_form [] = { 0x062A, 0x0649 };
	static uint32_t arabic_ligature_teh_with_yeh_isolated_form [] = { 0x062A, 0x064A };
	static uint32_t arabic_ligature_theh_with_jeem_isolated_form [] = { 0x062B, 0x062C };
	static uint32_t arabic_ligature_theh_with_meem_isolated_form [] = { 0x062B, 0x0645 };
	static uint32_t arabic_ligature_theh_with_alef_maksura_isolated_form [] = { 0x062B, 0x0649 };
	static uint32_t arabic_ligature_theh_with_yeh_isolated_form [] = { 0x062B, 0x064A };
	static uint32_t arabic_ligature_jeem_with_hah_isolated_form [] = { 0x062C, 0x062D };
	static uint32_t arabic_ligature_jeem_with_meem_isolated_form [] = { 0x062C, 0x0645 };
	static uint32_t arabic_ligature_hah_with_jeem_isolated_form [] = { 0x062D, 0x062C };
	static uint32_t arabic_ligature_hah_with_meem_isolated_form [] = { 0x062D, 0x0645 };
	static uint32_t arabic_ligature_khah_with_jeem_isolated_form [] = { 0x062E, 0x062C };
	static uint32_t arabic_ligature_khah_with_hah_isolated_form [] = { 0x062E, 0x062D };
	static uint32_t arabic_ligature_khah_with_meem_isolated_form [] = { 0x062E, 0x0645 };
	static uint32_t arabic_ligature_seen_with_jeem_isolated_form [] = { 0x0633, 0x062C };
	static uint32_t arabic_ligature_seen_with_hah_isolated_form [] = { 0x0633, 0x062D };
	static uint32_t arabic_ligature_seen_with_khah_isolated_form [] = { 0x0633, 0x062E };
	static uint32_t arabic_ligature_seen_with_meem_isolated_form [] = { 0x0633, 0x0645 };
	static uint32_t arabic_ligature_sad_with_hah_isolated_form [] = { 0x0635, 0x062D };
	static uint32_t arabic_ligature_sad_with_meem_isolated_form [] = { 0x0635, 0x0645 };
	static uint32_t arabic_ligature_dad_with_jeem_isolated_form [] = { 0x0636, 0x062C };
	static uint32_t arabic_ligature_dad_with_hah_isolated_form [] = { 0x0636, 0x062D };
	static uint32_t arabic_ligature_dad_with_khah_isolated_form [] = { 0x0636, 0x062E };
	static uint32_t arabic_ligature_dad_with_meem_isolated_form [] = { 0x0636, 0x0645 };
	static uint32_t arabic_ligature_tah_with_hah_isolated_form [] = { 0x0637, 0x062D };
	static uint32_t arabic_ligature_tah_with_meem_isolated_form [] = { 0x0637, 0x0645 };
	static uint32_t arabic_ligature_zah_with_meem_isolated_form [] = { 0x0638, 0x0645 };
	static uint32_t arabic_ligature_ain_with_jeem_isolated_form [] = { 0x0639, 0x062C };
	static uint32_t arabic_ligature_ain_with_meem_isolated_form [] = { 0x0639, 0x0645 };
	static uint32_t arabic_ligature_ghain_with_jeem_isolated_form [] = { 0x063A, 0x062C };
	static uint32_t arabic_ligature_ghain_with_meem_isolated_form [] = { 0x063A, 0x0645 };
	static uint32_t arabic_ligature_feh_with_jeem_isolated_form [] = { 0x0641, 0x062C };
	static uint32_t arabic_ligature_feh_with_hah_isolated_form [] = { 0x0641, 0x062D };
	static uint32_t arabic_ligature_feh_with_khah_isolated_form [] = { 0x0641, 0x062E };
	static uint32_t arabic_ligature_feh_with_meem_isolated_form [] = { 0x0641, 0x0645 };
	static uint32_t arabic_ligature_feh_with_alef_maksura_isolated_form [] = { 0x0641, 0x0649 };
	static uint32_t arabic_ligature_feh_with_yeh_isolated_form [] = { 0x0641, 0x064A };
	static uint32_t arabic_ligature_qaf_with_hah_isolated_form [] = { 0x0642, 0x062D };
	static uint32_t arabic_ligature_qaf_with_meem_isolated_form [] = { 0x0642, 0x0645 };
	static uint32_t arabic_ligature_qaf_with_alef_maksura_isolated_form [] = { 0x0642, 0x0649 };
	static uint32_t arabic_ligature_qaf_with_yeh_isolated_form [] = { 0x0642, 0x064A };
	static uint32_t arabic_ligature_kaf_with_alef_isolated_form [] = { 0x0643, 0x0627 };
	static uint32_t arabic_ligature_kaf_with_jeem_isolated_form [] = { 0x0643, 0x062C };
	static uint32_t arabic_ligature_kaf_with_hah_isolated_form [] = { 0x0643, 0x062D };
	static uint32_t arabic_ligature_kaf_with_khah_isolated_form [] = { 0x0643, 0x062E };
	static uint32_t arabic_ligature_kaf_with_lam_isolated_form [] = { 0x0643, 0x0644 };
	static uint32_t arabic_ligature_kaf_with_meem_isolated_form [] = { 0x0643, 0x0645 };
	static uint32_t arabic_ligature_kaf_with_alef_maksura_isolated_form [] = { 0x0643, 0x0649 };
	static uint32_t arabic_ligature_kaf_with_yeh_isolated_form [] = { 0x0643, 0x064A };
	static uint32_t arabic_ligature_lam_with_jeem_isolated_form [] = { 0x0644, 0x062C };
	static uint32_t arabic_ligature_lam_with_hah_isolated_form [] = { 0x0644, 0x062D };
	static uint32_t arabic_ligature_lam_with_khah_isolated_form [] = { 0x0644, 0x062E };
	static uint32_t arabic_ligature_lam_with_meem_isolated_form [] = { 0x0644, 0x0645 };
	static uint32_t arabic_ligature_lam_with_alef_maksura_isolated_form [] = { 0x0644, 0x0649 };
	static uint32_t arabic_ligature_lam_with_yeh_isolated_form [] = { 0x0644, 0x064A };
	static uint32_t arabic_ligature_meem_with_jeem_isolated_form [] = { 0x0645, 0x062C };
	static uint32_t arabic_ligature_meem_with_hah_isolated_form [] = { 0x0645, 0x062D };
	static uint32_t arabic_ligature_meem_with_khah_isolated_form [] = { 0x0645, 0x062E };
	static uint32_t arabic_ligature_meem_with_meem_isolated_form [] = { 0x0645, 0x0645 };
	static uint32_t arabic_ligature_meem_with_alef_maksura_isolated_form [] = { 0x0645, 0x0649 };
	static uint32_t arabic_ligature_meem_with_yeh_isolated_form [] = { 0x0645, 0x064A };
	static uint32_t arabic_ligature_noon_with_jeem_isolated_form [] = { 0x0646, 0x062C };
	static uint32_t arabic_ligature_noon_with_hah_isolated_form [] = { 0x0646, 0x062D };
	static uint32_t arabic_ligature_noon_with_khah_isolated_form [] = { 0x0646, 0x062E };
	static uint32_t arabic_ligature_noon_with_meem_isolated_form [] = { 0x0646, 0x0645 };
	static uint32_t arabic_ligature_noon_with_alef_maksura_isolated_form [] = { 0x0646, 0x0649 };
	static uint32_t arabic_ligature_noon_with_yeh_isolated_form [] = { 0x0646, 0x064A };
	static uint32_t arabic_ligature_heh_with_jeem_isolated_form [] = { 0x0647, 0x062C };
	static uint32_t arabic_ligature_heh_with_meem_isolated_form [] = { 0x0647, 0x0645 };
	static uint32_t arabic_ligature_heh_with_alef_maksura_isolated_form [] = { 0x0647, 0x0649 };
	static uint32_t arabic_ligature_heh_with_yeh_isolated_form [] = { 0x0647, 0x064A };
	static uint32_t arabic_ligature_yeh_with_jeem_isolated_form [] = { 0x064A, 0x062C };
	static uint32_t arabic_ligature_yeh_with_hah_isolated_form [] = { 0x064A, 0x062D };
	static uint32_t arabic_ligature_yeh_with_khah_isolated_form [] = { 0x064A, 0x062E };
	static uint32_t arabic_ligature_yeh_with_meem_isolated_form [] = { 0x064A, 0x0645 };
	static uint32_t arabic_ligature_yeh_with_alef_maksura_isolated_form [] = { 0x064A, 0x0649 };
	static uint32_t arabic_ligature_yeh_with_yeh_isolated_form [] = { 0x064A, 0x064A };
	static uint32_t arabic_ligature_thal_with_superscript_alef_isolated_form [] = { 0x0630, 0x0670 };
	static uint32_t arabic_ligature_reh_with_superscript_alef_isolated_form [] = { 0x0631, 0x0670 };
	static uint32_t arabic_ligature_alef_maksura_with_superscript_alef_isolated_form [] = { 0x0649, 0x0670 };
	static uint32_t arabic_ligature_shadda_with_dammatan_isolated_form [] = { 0x0020, 0x064C, 0x0651 };
	static uint32_t arabic_ligature_shadda_with_kasratan_isolated_form [] = { 0x0020, 0x064D, 0x0651 };
	static uint32_t arabic_ligature_shadda_with_fatha_isolated_form [] = { 0x0020, 0x064E, 0x0651 };
	static uint32_t arabic_ligature_shadda_with_damma_isolated_form [] = { 0x0020, 0x064F, 0x0651 };
	static uint32_t arabic_ligature_shadda_with_kasra_isolated_form [] = { 0x0020, 0x0650, 0x0651 };
	static uint32_t arabic_ligature_shadda_with_superscript_alef_isolated_form [] = { 0x0020, 0x0651, 0x0670 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_reh_final_form [] = { 0x0626, 0x0631 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_zain_final_form [] = { 0x0626, 0x0632 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_meem_final_form [] = { 0x0626, 0x0645 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_noon_final_form [] = { 0x0626, 0x0646 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_alef_maksura_final_form [] = { 0x0626, 0x0649 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_yeh_final_form [] = { 0x0626, 0x064A };
	static uint32_t arabic_ligature_beh_with_reh_final_form [] = { 0x0628, 0x0631 };
	static uint32_t arabic_ligature_beh_with_zain_final_form [] = { 0x0628, 0x0632 };
	static uint32_t arabic_ligature_beh_with_meem_final_form [] = { 0x0628, 0x0645 };
	static uint32_t arabic_ligature_beh_with_noon_final_form [] = { 0x0628, 0x0646 };
	static uint32_t arabic_ligature_beh_with_alef_maksura_final_form [] = { 0x0628, 0x0649 };
	static uint32_t arabic_ligature_beh_with_yeh_final_form [] = { 0x0628, 0x064A };
	static uint32_t arabic_ligature_teh_with_reh_final_form [] = { 0x062A, 0x0631 };
	static uint32_t arabic_ligature_teh_with_zain_final_form [] = { 0x062A, 0x0632 };
	static uint32_t arabic_ligature_teh_with_meem_final_form [] = { 0x062A, 0x0645 };
	static uint32_t arabic_ligature_teh_with_noon_final_form [] = { 0x062A, 0x0646 };
	static uint32_t arabic_ligature_teh_with_alef_maksura_final_form [] = { 0x062A, 0x0649 };
	static uint32_t arabic_ligature_teh_with_yeh_final_form [] = { 0x062A, 0x064A };
	static uint32_t arabic_ligature_theh_with_reh_final_form [] = { 0x062B, 0x0631 };
	static uint32_t arabic_ligature_theh_with_zain_final_form [] = { 0x062B, 0x0632 };
	static uint32_t arabic_ligature_theh_with_meem_final_form [] = { 0x062B, 0x0645 };
	static uint32_t arabic_ligature_theh_with_noon_final_form [] = { 0x062B, 0x0646 };
	static uint32_t arabic_ligature_theh_with_alef_maksura_final_form [] = { 0x062B, 0x0649 };
	static uint32_t arabic_ligature_theh_with_yeh_final_form [] = { 0x062B, 0x064A };
	static uint32_t arabic_ligature_feh_with_alef_maksura_final_form [] = { 0x0641, 0x0649 };
	static uint32_t arabic_ligature_feh_with_yeh_final_form [] = { 0x0641, 0x064A };
	static uint32_t arabic_ligature_qaf_with_alef_maksura_final_form [] = { 0x0642, 0x0649 };
	static uint32_t arabic_ligature_qaf_with_yeh_final_form [] = { 0x0642, 0x064A };
	static uint32_t arabic_ligature_kaf_with_alef_final_form [] = { 0x0643, 0x0627 };
	static uint32_t arabic_ligature_kaf_with_lam_final_form [] = { 0x0643, 0x0644 };
	static uint32_t arabic_ligature_kaf_with_meem_final_form [] = { 0x0643, 0x0645 };
	static uint32_t arabic_ligature_kaf_with_alef_maksura_final_form [] = { 0x0643, 0x0649 };
	static uint32_t arabic_ligature_kaf_with_yeh_final_form [] = { 0x0643, 0x064A };
	static uint32_t arabic_ligature_lam_with_meem_final_form [] = { 0x0644, 0x0645 };
	static uint32_t arabic_ligature_lam_with_alef_maksura_final_form [] = { 0x0644, 0x0649 };
	static uint32_t arabic_ligature_lam_with_yeh_final_form [] = { 0x0644, 0x064A };
	static uint32_t arabic_ligature_meem_with_alef_final_form [] = { 0x0645, 0x0627 };
	static uint32_t arabic_ligature_meem_with_meem_final_form [] = { 0x0645, 0x0645 };
	static uint32_t arabic_ligature_noon_with_reh_final_form [] = { 0x0646, 0x0631 };
	static uint32_t arabic_ligature_noon_with_zain_final_form [] = { 0x0646, 0x0632 };
	static uint32_t arabic_ligature_noon_with_meem_final_form [] = { 0x0646, 0x0645 };
	static uint32_t arabic_ligature_noon_with_noon_final_form [] = { 0x0646, 0x0646 };
	static uint32_t arabic_ligature_noon_with_alef_maksura_final_form [] = { 0x0646, 0x0649 };
	static uint32_t arabic_ligature_noon_with_yeh_final_form [] = { 0x0646, 0x064A };
	static uint32_t arabic_ligature_alef_maksura_with_superscript_alef_final_form [] = { 0x0649, 0x0670 };
	static uint32_t arabic_ligature_yeh_with_reh_final_form [] = { 0x064A, 0x0631 };
	static uint32_t arabic_ligature_yeh_with_zain_final_form [] = { 0x064A, 0x0632 };
	static uint32_t arabic_ligature_yeh_with_meem_final_form [] = { 0x064A, 0x0645 };
	static uint32_t arabic_ligature_yeh_with_noon_final_form [] = { 0x064A, 0x0646 };
	static uint32_t arabic_ligature_yeh_with_alef_maksura_final_form [] = { 0x064A, 0x0649 };
	static uint32_t arabic_ligature_yeh_with_yeh_final_form [] = { 0x064A, 0x064A };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_jeem_initial_form [] = { 0x0626, 0x062C };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_hah_initial_form [] = { 0x0626, 0x062D };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_khah_initial_form [] = { 0x0626, 0x062E };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_meem_initial_form [] = { 0x0626, 0x0645 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_heh_initial_form [] = { 0x0626, 0x0647 };
	static uint32_t arabic_ligature_beh_with_jeem_initial_form [] = { 0x0628, 0x062C };
	static uint32_t arabic_ligature_beh_with_hah_initial_form [] = { 0x0628, 0x062D };
	static uint32_t arabic_ligature_beh_with_khah_initial_form [] = { 0x0628, 0x062E };
	static uint32_t arabic_ligature_beh_with_meem_initial_form [] = { 0x0628, 0x0645 };
	static uint32_t arabic_ligature_beh_with_heh_initial_form [] = { 0x0628, 0x0647 };
	static uint32_t arabic_ligature_teh_with_jeem_initial_form [] = { 0x062A, 0x062C };
	static uint32_t arabic_ligature_teh_with_hah_initial_form [] = { 0x062A, 0x062D };
	static uint32_t arabic_ligature_teh_with_khah_initial_form [] = { 0x062A, 0x062E };
	static uint32_t arabic_ligature_teh_with_meem_initial_form [] = { 0x062A, 0x0645 };
	static uint32_t arabic_ligature_teh_with_heh_initial_form [] = { 0x062A, 0x0647 };
	static uint32_t arabic_ligature_theh_with_meem_initial_form [] = { 0x062B, 0x0645 };
	static uint32_t arabic_ligature_jeem_with_hah_initial_form [] = { 0x062C, 0x062D };
	static uint32_t arabic_ligature_jeem_with_meem_initial_form [] = { 0x062C, 0x0645 };
	static uint32_t arabic_ligature_hah_with_jeem_initial_form [] = { 0x062D, 0x062C };
	static uint32_t arabic_ligature_hah_with_meem_initial_form [] = { 0x062D, 0x0645 };
	static uint32_t arabic_ligature_khah_with_jeem_initial_form [] = { 0x062E, 0x062C };
	static uint32_t arabic_ligature_khah_with_meem_initial_form [] = { 0x062E, 0x0645 };
	static uint32_t arabic_ligature_seen_with_jeem_initial_form [] = { 0x0633, 0x062C };
	static uint32_t arabic_ligature_seen_with_hah_initial_form [] = { 0x0633, 0x062D };
	static uint32_t arabic_ligature_seen_with_khah_initial_form [] = { 0x0633, 0x062E };
	static uint32_t arabic_ligature_seen_with_meem_initial_form [] = { 0x0633, 0x0645 };
	static uint32_t arabic_ligature_sad_with_hah_initial_form [] = { 0x0635, 0x062D };
	static uint32_t arabic_ligature_sad_with_khah_initial_form [] = { 0x0635, 0x062E };
	static uint32_t arabic_ligature_sad_with_meem_initial_form [] = { 0x0635, 0x0645 };
	static uint32_t arabic_ligature_dad_with_jeem_initial_form [] = { 0x0636, 0x062C };
	static uint32_t arabic_ligature_dad_with_hah_initial_form [] = { 0x0636, 0x062D };
	static uint32_t arabic_ligature_dad_with_khah_initial_form [] = { 0x0636, 0x062E };
	static uint32_t arabic_ligature_dad_with_meem_initial_form [] = { 0x0636, 0x0645 };
	static uint32_t arabic_ligature_tah_with_hah_initial_form [] = { 0x0637, 0x062D };
	static uint32_t arabic_ligature_zah_with_meem_initial_form [] = { 0x0638, 0x0645 };
	static uint32_t arabic_ligature_ain_with_jeem_initial_form [] = { 0x0639, 0x062C };
	static uint32_t arabic_ligature_ain_with_meem_initial_form [] = { 0x0639, 0x0645 };
	static uint32_t arabic_ligature_ghain_with_jeem_initial_form [] = { 0x063A, 0x062C };
	static uint32_t arabic_ligature_ghain_with_meem_initial_form [] = { 0x063A, 0x0645 };
	static uint32_t arabic_ligature_feh_with_jeem_initial_form [] = { 0x0641, 0x062C };
	static uint32_t arabic_ligature_feh_with_hah_initial_form [] = { 0x0641, 0x062D };
	static uint32_t arabic_ligature_feh_with_khah_initial_form [] = { 0x0641, 0x062E };
	static uint32_t arabic_ligature_feh_with_meem_initial_form [] = { 0x0641, 0x0645 };
	static uint32_t arabic_ligature_qaf_with_hah_initial_form [] = { 0x0642, 0x062D };
	static uint32_t arabic_ligature_qaf_with_meem_initial_form [] = { 0x0642, 0x0645 };
	static uint32_t arabic_ligature_kaf_with_jeem_initial_form [] = { 0x0643, 0x062C };
	static uint32_t arabic_ligature_kaf_with_hah_initial_form [] = { 0x0643, 0x062D };
	static uint32_t arabic_ligature_kaf_with_khah_initial_form [] = { 0x0643, 0x062E };
	static uint32_t arabic_ligature_kaf_with_lam_initial_form [] = { 0x0643, 0x0644 };
	static uint32_t arabic_ligature_kaf_with_meem_initial_form [] = { 0x0643, 0x0645 };
	static uint32_t arabic_ligature_lam_with_jeem_initial_form [] = { 0x0644, 0x062C };
	static uint32_t arabic_ligature_lam_with_hah_initial_form [] = { 0x0644, 0x062D };
	static uint32_t arabic_ligature_lam_with_khah_initial_form [] = { 0x0644, 0x062E };
	static uint32_t arabic_ligature_lam_with_meem_initial_form [] = { 0x0644, 0x0645 };
	static uint32_t arabic_ligature_lam_with_heh_initial_form [] = { 0x0644, 0x0647 };
	static uint32_t arabic_ligature_meem_with_jeem_initial_form [] = { 0x0645, 0x062C };
	static uint32_t arabic_ligature_meem_with_hah_initial_form [] = { 0x0645, 0x062D };
	static uint32_t arabic_ligature_meem_with_khah_initial_form [] = { 0x0645, 0x062E };
	static uint32_t arabic_ligature_meem_with_meem_initial_form [] = { 0x0645, 0x0645 };
	static uint32_t arabic_ligature_noon_with_jeem_initial_form [] = { 0x0646, 0x062C };
	static uint32_t arabic_ligature_noon_with_hah_initial_form [] = { 0x0646, 0x062D };
	static uint32_t arabic_ligature_noon_with_khah_initial_form [] = { 0x0646, 0x062E };
	static uint32_t arabic_ligature_noon_with_meem_initial_form [] = { 0x0646, 0x0645 };
	static uint32_t arabic_ligature_noon_with_heh_initial_form [] = { 0x0646, 0x0647 };
	static uint32_t arabic_ligature_heh_with_jeem_initial_form [] = { 0x0647, 0x062C };
	static uint32_t arabic_ligature_heh_with_meem_initial_form [] = { 0x0647, 0x0645 };
	static uint32_t arabic_ligature_heh_with_superscript_alef_initial_form [] = { 0x0647, 0x0670 };
	static uint32_t arabic_ligature_yeh_with_jeem_initial_form [] = { 0x064A, 0x062C };
	static uint32_t arabic_ligature_yeh_with_hah_initial_form [] = { 0x064A, 0x062D };
	static uint32_t arabic_ligature_yeh_with_khah_initial_form [] = { 0x064A, 0x062E };
	static uint32_t arabic_ligature_yeh_with_meem_initial_form [] = { 0x064A, 0x0645 };
	static uint32_t arabic_ligature_yeh_with_heh_initial_form [] = { 0x064A, 0x0647 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_meem_medial_form [] = { 0x0626, 0x0645 };
	static uint32_t arabic_ligature_yeh_with_hamza_above_with_heh_medial_form [] = { 0x0626, 0x0647 };
	static uint32_t arabic_ligature_beh_with_meem_medial_form [] = { 0x0628, 0x0645 };
	static uint32_t arabic_ligature_beh_with_heh_medial_form [] = { 0x0628, 0x0647 };
	static uint32_t arabic_ligature_teh_with_meem_medial_form [] = { 0x062A, 0x0645 };
	static uint32_t arabic_ligature_teh_with_heh_medial_form [] = { 0x062A, 0x0647 };
	static uint32_t arabic_ligature_theh_with_meem_medial_form [] = { 0x062B, 0x0645 };
	static uint32_t arabic_ligature_theh_with_heh_medial_form [] = { 0x062B, 0x0647 };
	static uint32_t arabic_ligature_seen_with_meem_medial_form [] = { 0x0633, 0x0645 };
	static uint32_t arabic_ligature_seen_with_heh_medial_form [] = { 0x0633, 0x0647 };
	static uint32_t arabic_ligature_sheen_with_meem_medial_form [] = { 0x0634, 0x0645 };
	static uint32_t arabic_ligature_sheen_with_heh_medial_form [] = { 0x0634, 0x0647 };
	static uint32_t arabic_ligature_kaf_with_lam_medial_form [] = { 0x0643, 0x0644 };
	static uint32_t arabic_ligature_kaf_with_meem_medial_form [] = { 0x0643, 0x0645 };
	static uint32_t arabic_ligature_lam_with_meem_medial_form [] = { 0x0644, 0x0645 };
	static uint32_t arabic_ligature_noon_with_meem_medial_form [] = { 0x0646, 0x0645 };
	static uint32_t arabic_ligature_noon_with_heh_medial_form [] = { 0x0646, 0x0647 };
	static uint32_t arabic_ligature_yeh_with_meem_medial_form [] = { 0x064A, 0x0645 };
	static uint32_t arabic_ligature_yeh_with_heh_medial_form [] = { 0x064A, 0x0647 };
	static uint32_t arabic_ligature_shadda_with_fatha_medial_form [] = { 0x0640, 0x064E, 0x0651 };
	static uint32_t arabic_ligature_shadda_with_damma_medial_form [] = { 0x0640, 0x064F, 0x0651 };
	static uint32_t arabic_ligature_shadda_with_kasra_medial_form [] = { 0x0640, 0x0650, 0x0651 };
	static uint32_t arabic_ligature_tah_with_alef_maksura_isolated_form [] = { 0x0637, 0x0649 };
	static uint32_t arabic_ligature_tah_with_yeh_isolated_form [] = { 0x0637, 0x064A };
	static uint32_t arabic_ligature_ain_with_alef_maksura_isolated_form [] = { 0x0639, 0x0649 };
	static uint32_t arabic_ligature_ain_with_yeh_isolated_form [] = { 0x0639, 0x064A };
	static uint32_t arabic_ligature_ghain_with_alef_maksura_isolated_form [] = { 0x063A, 0x0649 };
	static uint32_t arabic_ligature_ghain_with_yeh_isolated_form [] = { 0x063A, 0x064A };
	static uint32_t arabic_ligature_seen_with_alef_maksura_isolated_form [] = { 0x0633, 0x0649 };
	static uint32_t arabic_ligature_seen_with_yeh_isolated_form [] = { 0x0633, 0x064A };
	static uint32_t arabic_ligature_sheen_with_alef_maksura_isolated_form [] = { 0x0634, 0x0649 };
	static uint32_t arabic_ligature_sheen_with_yeh_isolated_form [] = { 0x0634, 0x064A };
	static uint32_t arabic_ligature_hah_with_alef_maksura_isolated_form [] = { 0x062D, 0x0649 };
	static uint32_t arabic_ligature_hah_with_yeh_isolated_form [] = { 0x062D, 0x064A };
	static uint32_t arabic_ligature_jeem_with_alef_maksura_isolated_form [] = { 0x062C, 0x0649 };
	static uint32_t arabic_ligature_jeem_with_yeh_isolated_form [] = { 0x062C, 0x064A };
	static uint32_t arabic_ligature_khah_with_alef_maksura_isolated_form [] = { 0x062E, 0x0649 };
	static uint32_t arabic_ligature_khah_with_yeh_isolated_form [] = { 0x062E, 0x064A };
	static uint32_t arabic_ligature_sad_with_alef_maksura_isolated_form [] = { 0x0635, 0x0649 };
	static uint32_t arabic_ligature_sad_with_yeh_isolated_form [] = { 0x0635, 0x064A };
	static uint32_t arabic_ligature_dad_with_alef_maksura_isolated_form [] = { 0x0636, 0x0649 };
	static uint32_t arabic_ligature_dad_with_yeh_isolated_form [] = { 0x0636, 0x064A };
	static uint32_t arabic_ligature_sheen_with_jeem_isolated_form [] = { 0x0634, 0x062C };
	static uint32_t arabic_ligature_sheen_with_hah_isolated_form [] = { 0x0634, 0x062D };
	static uint32_t arabic_ligature_sheen_with_khah_isolated_form [] = { 0x0634, 0x062E };
	static uint32_t arabic_ligature_sheen_with_meem_isolated_form [] = { 0x0634, 0x0645 };
	static uint32_t arabic_ligature_sheen_with_reh_isolated_form [] = { 0x0634, 0x0631 };
	static uint32_t arabic_ligature_seen_with_reh_isolated_form [] = { 0x0633, 0x0631 };
	static uint32_t arabic_ligature_sad_with_reh_isolated_form [] = { 0x0635, 0x0631 };
	static uint32_t arabic_ligature_dad_with_reh_isolated_form [] = { 0x0636, 0x0631 };
	static uint32_t arabic_ligature_tah_with_alef_maksura_final_form [] = { 0x0637, 0x0649 };
	static uint32_t arabic_ligature_tah_with_yeh_final_form [] = { 0x0637, 0x064A };
	static uint32_t arabic_ligature_ain_with_alef_maksura_final_form [] = { 0x0639, 0x0649 };
	static uint32_t arabic_ligature_ain_with_yeh_final_form [] = { 0x0639, 0x064A };
	static uint32_t arabic_ligature_ghain_with_alef_maksura_final_form [] = { 0x063A, 0x0649 };
	static uint32_t arabic_ligature_ghain_with_yeh_final_form [] = { 0x063A, 0x064A };
	static uint32_t arabic_ligature_seen_with_alef_maksura_final_form [] = { 0x0633, 0x0649 };
	static uint32_t arabic_ligature_seen_with_yeh_final_form [] = { 0x0633, 0x064A };
	static uint32_t arabic_ligature_sheen_with_alef_maksura_final_form [] = { 0x0634, 0x0649 };
	static uint32_t arabic_ligature_sheen_with_yeh_final_form [] = { 0x0634, 0x064A };
	static uint32_t arabic_ligature_hah_with_alef_maksura_final_form [] = { 0x062D, 0x0649 };
	static uint32_t arabic_ligature_hah_with_yeh_final_form [] = { 0x062D, 0x064A };
	static uint32_t arabic_ligature_jeem_with_alef_maksura_final_form [] = { 0x062C, 0x0649 };
	static uint32_t arabic_ligature_jeem_with_yeh_final_form [] = { 0x062C, 0x064A };
	static uint32_t arabic_ligature_khah_with_alef_maksura_final_form [] = { 0x062E, 0x0649 };
	static uint32_t arabic_ligature_khah_with_yeh_final_form [] = { 0x062E, 0x064A };
	static uint32_t arabic_ligature_sad_with_alef_maksura_final_form [] = { 0x0635, 0x0649 };
	static uint32_t arabic_ligature_sad_with_yeh_final_form [] = { 0x0635, 0x064A };
	static uint32_t arabic_ligature_dad_with_alef_maksura_final_form [] = { 0x0636, 0x0649 };
	static uint32_t arabic_ligature_dad_with_yeh_final_form [] = { 0x0636, 0x064A };
	static uint32_t arabic_ligature_sheen_with_jeem_final_form [] = { 0x0634, 0x062C };
	static uint32_t arabic_ligature_sheen_with_hah_final_form [] = { 0x0634, 0x062D };
	static uint32_t arabic_ligature_sheen_with_khah_final_form [] = { 0x0634, 0x062E };
	static uint32_t arabic_ligature_sheen_with_meem_final_form [] = { 0x0634, 0x0645 };
	static uint32_t arabic_ligature_sheen_with_reh_final_form [] = { 0x0634, 0x0631 };
	static uint32_t arabic_ligature_seen_with_reh_final_form [] = { 0x0633, 0x0631 };
	static uint32_t arabic_ligature_sad_with_reh_final_form [] = { 0x0635, 0x0631 };
	static uint32_t arabic_ligature_dad_with_reh_final_form [] = { 0x0636, 0x0631 };
	static uint32_t arabic_ligature_sheen_with_jeem_initial_form [] = { 0x0634, 0x062C };
	static uint32_t arabic_ligature_sheen_with_hah_initial_form [] = { 0x0634, 0x062D };
	static uint32_t arabic_ligature_sheen_with_khah_initial_form [] = { 0x0634, 0x062E };
	static uint32_t arabic_ligature_sheen_with_meem_initial_form [] = { 0x0634, 0x0645 };
	static uint32_t arabic_ligature_seen_with_heh_initial_form [] = { 0x0633, 0x0647 };
	static uint32_t arabic_ligature_sheen_with_heh_initial_form [] = { 0x0634, 0x0647 };
	static uint32_t arabic_ligature_tah_with_meem_initial_form [] = { 0x0637, 0x0645 };
	static uint32_t arabic_ligature_seen_with_jeem_medial_form [] = { 0x0633, 0x062C };
	static uint32_t arabic_ligature_seen_with_hah_medial_form [] = { 0x0633, 0x062D };
	static uint32_t arabic_ligature_seen_with_khah_medial_form [] = { 0x0633, 0x062E };
	static uint32_t arabic_ligature_sheen_with_jeem_medial_form [] = { 0x0634, 0x062C };
	static uint32_t arabic_ligature_sheen_with_hah_medial_form [] = { 0x0634, 0x062D };
	static uint32_t arabic_ligature_sheen_with_khah_medial_form [] = { 0x0634, 0x062E };
	static uint32_t arabic_ligature_tah_with_meem_medial_form [] = { 0x0637, 0x0645 };
	static uint32_t arabic_ligature_zah_with_meem_medial_form [] = { 0x0638, 0x0645 };
	static uint32_t arabic_ligature_alef_with_fathatan_final_form [] = { 0x0627, 0x064B };
	static uint32_t arabic_ligature_alef_with_fathatan_isolated_form [] = { 0x0627, 0x064B };
	static uint32_t arabic_ligature_teh_with_jeem_with_meem_initial_form [] = { 0x062A, 0x062C, 0x0645 };
	static uint32_t arabic_ligature_teh_with_hah_with_jeem_final_form [] = { 0x062A, 0x062D, 0x062C };
	static uint32_t arabic_ligature_teh_with_hah_with_jeem_initial_form [] = { 0x062A, 0x062D, 0x062C };
	static uint32_t arabic_ligature_teh_with_hah_with_meem_initial_form [] = { 0x062A, 0x062D, 0x0645 };
	static uint32_t arabic_ligature_teh_with_khah_with_meem_initial_form [] = { 0x062A, 0x062E, 0x0645 };
	static uint32_t arabic_ligature_teh_with_meem_with_jeem_initial_form [] = { 0x062A, 0x0645, 0x062C };
	static uint32_t arabic_ligature_teh_with_meem_with_hah_initial_form [] = { 0x062A, 0x0645, 0x062D };
	static uint32_t arabic_ligature_teh_with_meem_with_khah_initial_form [] = { 0x062A, 0x0645, 0x062E };
	static uint32_t arabic_ligature_jeem_with_meem_with_hah_final_form [] = { 0x062C, 0x0645, 0x062D };
	static uint32_t arabic_ligature_jeem_with_meem_with_hah_initial_form [] = { 0x062C, 0x0645, 0x062D };
	static uint32_t arabic_ligature_hah_with_meem_with_yeh_final_form [] = { 0x062D, 0x0645, 0x064A };
	static uint32_t arabic_ligature_hah_with_meem_with_alef_maksura_final_form [] = { 0x062D, 0x0645, 0x0649 };
	static uint32_t arabic_ligature_seen_with_hah_with_jeem_initial_form [] = { 0x0633, 0x062D, 0x062C };
	static uint32_t arabic_ligature_seen_with_jeem_with_hah_initial_form [] = { 0x0633, 0x062C, 0x062D };
	static uint32_t arabic_ligature_seen_with_jeem_with_alef_maksura_final_form [] = { 0x0633, 0x062C, 0x0649 };
	static uint32_t arabic_ligature_seen_with_meem_with_hah_final_form [] = { 0x0633, 0x0645, 0x062D };
	static uint32_t arabic_ligature_seen_with_meem_with_hah_initial_form [] = { 0x0633, 0x0645, 0x062D };
	static uint32_t arabic_ligature_seen_with_meem_with_jeem_initial_form [] = { 0x0633, 0x0645, 0x062C };
	static uint32_t arabic_ligature_seen_with_meem_with_meem_final_form [] = { 0x0633, 0x0645, 0x0645 };
	static uint32_t arabic_ligature_seen_with_meem_with_meem_initial_form [] = { 0x0633, 0x0645, 0x0645 };
	static uint32_t arabic_ligature_sad_with_hah_with_hah_final_form [] = { 0x0635, 0x062D, 0x062D };
	static uint32_t arabic_ligature_sad_with_hah_with_hah_initial_form [] = { 0x0635, 0x062D, 0x062D };
	static uint32_t arabic_ligature_sad_with_meem_with_meem_final_form [] = { 0x0635, 0x0645, 0x0645 };
	static uint32_t arabic_ligature_sheen_with_hah_with_meem_final_form [] = { 0x0634, 0x062D, 0x0645 };
	static uint32_t arabic_ligature_sheen_with_hah_with_meem_initial_form [] = { 0x0634, 0x062D, 0x0645 };
	static uint32_t arabic_ligature_sheen_with_jeem_with_yeh_final_form [] = { 0x0634, 0x062C, 0x064A };
	static uint32_t arabic_ligature_sheen_with_meem_with_khah_final_form [] = { 0x0634, 0x0645, 0x062E };
	static uint32_t arabic_ligature_sheen_with_meem_with_khah_initial_form [] = { 0x0634, 0x0645, 0x062E };
	static uint32_t arabic_ligature_sheen_with_meem_with_meem_final_form [] = { 0x0634, 0x0645, 0x0645 };
	static uint32_t arabic_ligature_sheen_with_meem_with_meem_initial_form [] = { 0x0634, 0x0645, 0x0645 };
	static uint32_t arabic_ligature_dad_with_hah_with_alef_maksura_final_form [] = { 0x0636, 0x062D, 0x0649 };
	static uint32_t arabic_ligature_dad_with_khah_with_meem_final_form [] = { 0x0636, 0x062E, 0x0645 };
	static uint32_t arabic_ligature_dad_with_khah_with_meem_initial_form [] = { 0x0636, 0x062E, 0x0645 };
	static uint32_t arabic_ligature_tah_with_meem_with_hah_final_form [] = { 0x0637, 0x0645, 0x062D };
	static uint32_t arabic_ligature_tah_with_meem_with_hah_initial_form [] = { 0x0637, 0x0645, 0x062D };
	static uint32_t arabic_ligature_tah_with_meem_with_meem_initial_form [] = { 0x0637, 0x0645, 0x0645 };
	static uint32_t arabic_ligature_tah_with_meem_with_yeh_final_form [] = { 0x0637, 0x0645, 0x064A };
	static uint32_t arabic_ligature_ain_with_jeem_with_meem_final_form [] = { 0x0639, 0x062C, 0x0645 };
	static uint32_t arabic_ligature_ain_with_meem_with_meem_final_form [] = { 0x0639, 0x0645, 0x0645 };
	static uint32_t arabic_ligature_ain_with_meem_with_meem_initial_form [] = { 0x0639, 0x0645, 0x0645 };
	static uint32_t arabic_ligature_ain_with_meem_with_alef_maksura_final_form [] = { 0x0639, 0x0645, 0x0649 };
	static uint32_t arabic_ligature_ghain_with_meem_with_meem_final_form [] = { 0x063A, 0x0645, 0x0645 };
	static uint32_t arabic_ligature_ghain_with_meem_with_yeh_final_form [] = { 0x063A, 0x0645, 0x064A };
	static uint32_t arabic_ligature_ghain_with_meem_with_alef_maksura_final_form [] = { 0x063A, 0x0645, 0x0649 };
	static uint32_t arabic_ligature_feh_with_khah_with_meem_final_form [] = { 0x0641, 0x062E, 0x0645 };
	static uint32_t arabic_ligature_feh_with_khah_with_meem_initial_form [] = { 0x0641, 0x062E, 0x0645 };
	static uint32_t arabic_ligature_qaf_with_meem_with_hah_final_form [] = { 0x0642, 0x0645, 0x062D };
	static uint32_t arabic_ligature_qaf_with_meem_with_meem_final_form [] = { 0x0642, 0x0645, 0x0645 };
	static uint32_t arabic_ligature_lam_with_hah_with_meem_final_form [] = { 0x0644, 0x062D, 0x0645 };
	static uint32_t arabic_ligature_lam_with_hah_with_yeh_final_form [] = { 0x0644, 0x062D, 0x064A };
	static uint32_t arabic_ligature_lam_with_hah_with_alef_maksura_final_form [] = { 0x0644, 0x062D, 0x0649 };
	static uint32_t arabic_ligature_lam_with_jeem_with_jeem_initial_form [] = { 0x0644, 0x062C, 0x062C };
	static uint32_t arabic_ligature_lam_with_jeem_with_jeem_final_form [] = { 0x0644, 0x062C, 0x062C };
	static uint32_t arabic_ligature_lam_with_khah_with_meem_final_form [] = { 0x0644, 0x062E, 0x0645 };
	static uint32_t arabic_ligature_lam_with_khah_with_meem_initial_form [] = { 0x0644, 0x062E, 0x0645 };
	static uint32_t arabic_ligature_lam_with_meem_with_hah_final_form [] = { 0x0644, 0x0645, 0x062D };
	static uint32_t arabic_ligature_lam_with_meem_with_hah_initial_form [] = { 0x0644, 0x0645, 0x062D };
	static uint32_t arabic_ligature_meem_with_hah_with_jeem_initial_form [] = { 0x0645, 0x062D, 0x062C };
	static uint32_t arabic_ligature_meem_with_hah_with_meem_initial_form [] = { 0x0645, 0x062D, 0x0645 };
	static uint32_t arabic_ligature_meem_with_hah_with_yeh_final_form [] = { 0x0645, 0x062D, 0x064A };
	static uint32_t arabic_ligature_meem_with_jeem_with_hah_initial_form [] = { 0x0645, 0x062C, 0x062D };
	static uint32_t arabic_ligature_meem_with_jeem_with_meem_initial_form [] = { 0x0645, 0x062C, 0x0645 };
	static uint32_t arabic_ligature_meem_with_khah_with_jeem_initial_form [] = { 0x0645, 0x062E, 0x062C };
	static uint32_t arabic_ligature_meem_with_khah_with_meem_initial_form [] = { 0x0645, 0x062E, 0x0645 };
	static uint32_t arabic_ligature_meem_with_jeem_with_khah_initial_form [] = { 0x0645, 0x062C, 0x062E };
	static uint32_t arabic_ligature_heh_with_meem_with_jeem_initial_form [] = { 0x0647, 0x0645, 0x062C };
	static uint32_t arabic_ligature_heh_with_meem_with_meem_initial_form [] = { 0x0647, 0x0645, 0x0645 };
	static uint32_t arabic_ligature_noon_with_hah_with_meem_initial_form [] = { 0x0646, 0x062D, 0x0645 };
	static uint32_t arabic_ligature_noon_with_hah_with_alef_maksura_final_form [] = { 0x0646, 0x062D, 0x0649 };
	static uint32_t arabic_ligature_noon_with_jeem_with_meem_final_form [] = { 0x0646, 0x062C, 0x0645 };
	static uint32_t arabic_ligature_noon_with_jeem_with_meem_initial_form [] = { 0x0646, 0x062C, 0x0645 };
	static uint32_t arabic_ligature_noon_with_jeem_with_alef_maksura_final_form [] = { 0x0646, 0x062C, 0x0649 };
	static uint32_t arabic_ligature_noon_with_meem_with_yeh_final_form [] = { 0x0646, 0x0645, 0x064A };
	static uint32_t arabic_ligature_noon_with_meem_with_alef_maksura_final_form [] = { 0x0646, 0x0645, 0x0649 };
	static uint32_t arabic_ligature_yeh_with_meem_with_meem_final_form [] = { 0x064A, 0x0645, 0x0645 };
	static uint32_t arabic_ligature_yeh_with_meem_with_meem_initial_form [] = { 0x064A, 0x0645, 0x0645 };
	static uint32_t arabic_ligature_beh_with_khah_with_yeh_final_form [] = { 0x0628, 0x062E, 0x064A };
	static uint32_t arabic_ligature_teh_with_jeem_with_yeh_final_form [] = { 0x062A, 0x062C, 0x064A };
	static uint32_t arabic_ligature_teh_with_jeem_with_alef_maksura_final_form [] = { 0x062A, 0x062C, 0x0649 };
	static uint32_t arabic_ligature_teh_with_khah_with_yeh_final_form [] = { 0x062A, 0x062E, 0x064A };
	static uint32_t arabic_ligature_teh_with_khah_with_alef_maksura_final_form [] = { 0x062A, 0x062E, 0x0649 };
	static uint32_t arabic_ligature_teh_with_meem_with_yeh_final_form [] = { 0x062A, 0x0645, 0x064A };
	static uint32_t arabic_ligature_teh_with_meem_with_alef_maksura_final_form [] = { 0x062A, 0x0645, 0x0649 };
	static uint32_t arabic_ligature_jeem_with_meem_with_yeh_final_form [] = { 0x062C, 0x0645, 0x064A };
	static uint32_t arabic_ligature_jeem_with_hah_with_alef_maksura_final_form [] = { 0x062C, 0x062D, 0x0649 };
	static uint32_t arabic_ligature_jeem_with_meem_with_alef_maksura_final_form [] = { 0x062C, 0x0645, 0x0649 };
	static uint32_t arabic_ligature_seen_with_khah_with_alef_maksura_final_form [] = { 0x0633, 0x062E, 0x0649 };
	static uint32_t arabic_ligature_sad_with_hah_with_yeh_final_form [] = { 0x0635, 0x062D, 0x064A };
	static uint32_t arabic_ligature_sheen_with_hah_with_yeh_final_form [] = { 0x0634, 0x062D, 0x064A };
	static uint32_t arabic_ligature_dad_with_hah_with_yeh_final_form [] = { 0x0636, 0x062D, 0x064A };
	static uint32_t arabic_ligature_lam_with_jeem_with_yeh_final_form [] = { 0x0644, 0x062C, 0x064A };
	static uint32_t arabic_ligature_lam_with_meem_with_yeh_final_form [] = { 0x0644, 0x0645, 0x064A };
	static uint32_t arabic_ligature_yeh_with_hah_with_yeh_final_form [] = { 0x064A, 0x062D, 0x064A };
	static uint32_t arabic_ligature_yeh_with_jeem_with_yeh_final_form [] = { 0x064A, 0x062C, 0x064A };
	static uint32_t arabic_ligature_yeh_with_meem_with_yeh_final_form [] = { 0x064A, 0x0645, 0x064A };
	static uint32_t arabic_ligature_meem_with_meem_with_yeh_final_form [] = { 0x0645, 0x0645, 0x064A };
	static uint32_t arabic_ligature_qaf_with_meem_with_yeh_final_form [] = { 0x0642, 0x0645, 0x064A };
	static uint32_t arabic_ligature_noon_with_hah_with_yeh_final_form [] = { 0x0646, 0x062D, 0x064A };
	static uint32_t arabic_ligature_qaf_with_meem_with_hah_initial_form [] = { 0x0642, 0x0645, 0x062D };
	static uint32_t arabic_ligature_lam_with_hah_with_meem_initial_form [] = { 0x0644, 0x062D, 0x0645 };
	static uint32_t arabic_ligature_ain_with_meem_with_yeh_final_form [] = { 0x0639, 0x0645, 0x064A };
	static uint32_t arabic_ligature_kaf_with_meem_with_yeh_final_form [] = { 0x0643, 0x0645, 0x064A };
	static uint32_t arabic_ligature_noon_with_jeem_with_hah_initial_form [] = { 0x0646, 0x062C, 0x062D };
	static uint32_t arabic_ligature_meem_with_khah_with_yeh_final_form [] = { 0x0645, 0x062E, 0x064A };
	static uint32_t arabic_ligature_lam_with_jeem_with_meem_initial_form [] = { 0x0644, 0x062C, 0x0645 };
	static uint32_t arabic_ligature_kaf_with_meem_with_meem_final_form [] = { 0x0643, 0x0645, 0x0645 };
	static uint32_t arabic_ligature_lam_with_jeem_with_meem_final_form [] = { 0x0644, 0x062C, 0x0645 };
	static uint32_t arabic_ligature_noon_with_jeem_with_hah_final_form [] = { 0x0646, 0x062C, 0x062D };
	static uint32_t arabic_ligature_jeem_with_hah_with_yeh_final_form [] = { 0x062C, 0x062D, 0x064A };
	static uint32_t arabic_ligature_hah_with_jeem_with_yeh_final_form [] = { 0x062D, 0x062C, 0x064A };
	static uint32_t arabic_ligature_meem_with_jeem_with_yeh_final_form [] = { 0x0645, 0x062C, 0x064A };
	static uint32_t arabic_ligature_feh_with_meem_with_yeh_final_form [] = { 0x0641, 0x0645, 0x064A };
	static uint32_t arabic_ligature_beh_with_hah_with_yeh_final_form [] = { 0x0628, 0x062D, 0x064A };
	static uint32_t arabic_ligature_kaf_with_meem_with_meem_initial_form [] = { 0x0643, 0x0645, 0x0645 };
	static uint32_t arabic_ligature_ain_with_jeem_with_meem_initial_form [] = { 0x0639, 0x062C, 0x0645 };
	static uint32_t arabic_ligature_sad_with_meem_with_meem_initial_form [] = { 0x0635, 0x0645, 0x0645 };
	static uint32_t arabic_ligature_seen_with_khah_with_yeh_final_form [] = { 0x0633, 0x062E, 0x064A };
	static uint32_t arabic_ligature_noon_with_jeem_with_yeh_final_form [] = { 0x0646, 0x062C, 0x064A };
	static uint32_t arabic_ligature_salla_used_as_koranic_stop_sign_isolated_form [] = { 0x0635, 0x0644, 0x06D2 };
	static uint32_t arabic_ligature_qala_used_as_koranic_stop_sign_isolated_form [] = { 0x0642, 0x0644, 0x06D2 };
	static uint32_t arabic_ligature_allah_isolated_form [] = { 0x0627, 0x0644, 0x0644, 0x0647 };
	static uint32_t arabic_ligature_akbar_isolated_form [] = { 0x0627, 0x0643, 0x0628, 0x0631 };
	static uint32_t arabic_ligature_mohammad_isolated_form [] = { 0x0645, 0x062D, 0x0645, 0x062F };
	static uint32_t arabic_ligature_salam_isolated_form [] = { 0x0635, 0x0644, 0x0639, 0x0645 };
	static uint32_t arabic_ligature_rasoul_isolated_form [] = { 0x0631, 0x0633, 0x0648, 0x0644 };
	static uint32_t arabic_ligature_alayhe_isolated_form [] = { 0x0639, 0x0644, 0x064A, 0x0647 };
	static uint32_t arabic_ligature_wasallam_isolated_form [] = { 0x0648, 0x0633, 0x0644, 0x0645 };
	static uint32_t arabic_ligature_salla_isolated_form [] = { 0x0635, 0x0644, 0x0649 };
	static uint32_t arabic_ligature_sallallahou_alayhe_wasallam [] = { 0x0635, 0x0644, 0x0649, 0x0020, 0x0627, 0x0644, 0x0644, 0x0647, 0x0020, 0x0639, 0x0644, 0x064A, 0x0647, 0x0020, 0x0648, 0x0633, 0x0644, 0x0645 };
	static uint32_t arabic_ligature_jallajalalouhou [] = { 0x062C, 0x0644, 0x0020, 0x062C, 0x0644, 0x0627, 0x0644, 0x0647 };
	static uint32_t rial_sign [] = { 0x0631, 0x06CC, 0x0627, 0x0644 };
	static uint32_t presentation_form_for_vertical_comma [] = { 0x002C };
	static uint32_t presentation_form_for_vertical_ideographic_comma [] = { 0x3001 };
	static uint32_t presentation_form_for_vertical_ideographic_full_stop [] = { 0x3002 };
	static uint32_t presentation_form_for_vertical_colon [] = { 0x003A };
	static uint32_t presentation_form_for_vertical_semicolon [] = { 0x003B };
	static uint32_t presentation_form_for_vertical_exclamation_mark [] = { 0x0021 };
	static uint32_t presentation_form_for_vertical_question_mark [] = { 0x003F };
	static uint32_t presentation_form_for_vertical_left_white_lenticular_bracket [] = { 0x3016 };
	static uint32_t presentation_form_for_vertical_right_white_lenticular_brakcet [] = { 0x3017 };
	static uint32_t presentation_form_for_vertical_horizontal_ellipsis [] = { 0x2026 };
	static uint32_t presentation_form_for_vertical_two_dot_leader [] = { 0x2025 };
	static uint32_t presentation_form_for_vertical_em_dash [] = { 0x2014 };
	static uint32_t presentation_form_for_vertical_en_dash [] = { 0x2013 };
	static uint32_t presentation_form_for_vertical_low_line [] = { 0x005F };
	static uint32_t presentation_form_for_vertical_wavy_low_line [] = { 0x005F };
	static uint32_t presentation_form_for_vertical_left_parenthesis [] = { 0x0028 };
	static uint32_t presentation_form_for_vertical_right_parenthesis [] = { 0x0029 };
	static uint32_t presentation_form_for_vertical_left_curly_bracket [] = { 0x007B };
	static uint32_t presentation_form_for_vertical_right_curly_bracket [] = { 0x007D };
	static uint32_t presentation_form_for_vertical_left_tortoise_shell_bracket [] = { 0x3014 };
	static uint32_t presentation_form_for_vertical_right_tortoise_shell_bracket [] = { 0x3015 };
	static uint32_t presentation_form_for_vertical_left_black_lenticular_bracket [] = { 0x3010 };
	static uint32_t presentation_form_for_vertical_right_black_lenticular_bracket [] = { 0x3011 };
	static uint32_t presentation_form_for_vertical_left_double_angle_bracket [] = { 0x300A };
	static uint32_t presentation_form_for_vertical_right_double_angle_bracket [] = { 0x300B };
	static uint32_t presentation_form_for_vertical_left_angle_bracket [] = { 0x3008 };
	static uint32_t presentation_form_for_vertical_right_angle_bracket [] = { 0x3009 };
	static uint32_t presentation_form_for_vertical_left_corner_bracket [] = { 0x300C };
	static uint32_t presentation_form_for_vertical_right_corner_bracket [] = { 0x300D };
	static uint32_t presentation_form_for_vertical_left_white_corner_bracket [] = { 0x300E };
	static uint32_t presentation_form_for_vertical_right_white_corner_bracket [] = { 0x300F };
	static uint32_t presentation_form_for_vertical_left_square_bracket [] = { 0x005B };
	static uint32_t presentation_form_for_vertical_right_square_bracket [] = { 0x005D };
	static uint32_t dashed_overline [] = { 0x203E };
	static uint32_t centreline_overline [] = { 0x203E };
	static uint32_t wavy_overline [] = { 0x203E };
	static uint32_t double_wavy_overline [] = { 0x203E };
	static uint32_t dashed_low_line [] = { 0x005F };
	static uint32_t centreline_low_line [] = { 0x005F };
	static uint32_t wavy_low_line [] = { 0x005F };
	static uint32_t small_comma [] = { 0x002C };
	static uint32_t small_ideographic_comma [] = { 0x3001 };
	static uint32_t small_full_stop [] = { 0x002E };
	static uint32_t small_semicolon [] = { 0x003B };
	static uint32_t small_colon [] = { 0x003A };
	static uint32_t small_question_mark [] = { 0x003F };
	static uint32_t small_exclamation_mark [] = { 0x0021 };
	static uint32_t small_em_dash [] = { 0x2014 };
	static uint32_t small_left_parenthesis [] = { 0x0028 };
	static uint32_t small_right_parenthesis [] = { 0x0029 };
	static uint32_t small_left_curly_bracket [] = { 0x007B };
	static uint32_t small_right_curly_bracket [] = { 0x007D };
	static uint32_t small_left_tortoise_shell_bracket [] = { 0x3014 };
	static uint32_t small_right_tortoise_shell_bracket [] = { 0x3015 };
	static uint32_t small_number_sign [] = { 0x0023 };
	static uint32_t small_ampersand [] = { 0x0026 };
	static uint32_t small_asterisk [] = { 0x002A };
	static uint32_t small_plus_sign [] = { 0x002B };
	static uint32_t small_hyphen_minus [] = { 0x002D };
	static uint32_t small_less_than_sign [] = { 0x003C };
	static uint32_t small_greater_than_sign [] = { 0x003E };
	static uint32_t small_equals_sign [] = { 0x003D };
	static uint32_t small_reverse_solidus [] = { 0x005C };
	static uint32_t small_dollar_sign [] = { 0x0024 };
	static uint32_t small_percent_sign [] = { 0x0025 };
	static uint32_t small_commercial_at [] = { 0x0040 };
	static uint32_t arabic_fathatan_isolated_form [] = { 0x0020, 0x064B };
	static uint32_t arabic_tatweel_with_fathatan_above [] = { 0x0640, 0x064B };
	static uint32_t arabic_dammatan_isolated_form [] = { 0x0020, 0x064C };
	static uint32_t arabic_kasratan_isolated_form [] = { 0x0020, 0x064D };
	static uint32_t arabic_fatha_isolated_form [] = { 0x0020, 0x064E };
	static uint32_t arabic_fatha_medial_form [] = { 0x0640, 0x064E };
	static uint32_t arabic_damma_isolated_form [] = { 0x0020, 0x064F };
	static uint32_t arabic_damma_medial_form [] = { 0x0640, 0x064F };
	static uint32_t arabic_kasra_isolated_form [] = { 0x0020, 0x0650 };
	static uint32_t arabic_kasra_medial_form [] = { 0x0640, 0x0650 };
	static uint32_t arabic_shadda_isolated_form [] = { 0x0020, 0x0651 };
	static uint32_t arabic_shadda_medial_form [] = { 0x0640, 0x0651 };
	static uint32_t arabic_sukun_isolated_form [] = { 0x0020, 0x0652 };
	static uint32_t arabic_sukun_medial_form [] = { 0x0640, 0x0652 };
	static uint32_t arabic_letter_hamza_isolated_form [] = { 0x0621 };
	static uint32_t arabic_letter_alef_with_madda_above_isolated_form [] = { 0x0622 };
	static uint32_t arabic_letter_alef_with_madda_above_final_form [] = { 0x0622 };
	static uint32_t arabic_letter_alef_with_hamza_above_isolated_form [] = { 0x0623 };
	static uint32_t arabic_letter_alef_with_hamza_above_final_form [] = { 0x0623 };
	static uint32_t arabic_letter_waw_with_hamza_above_isolated_form [] = { 0x0624 };
	static uint32_t arabic_letter_waw_with_hamza_above_final_form [] = { 0x0624 };
	static uint32_t arabic_letter_alef_with_hamza_below_isolated_form [] = { 0x0625 };
	static uint32_t arabic_letter_alef_with_hamza_below_final_form [] = { 0x0625 };
	static uint32_t arabic_letter_yeh_with_hamza_above_isolated_form [] = { 0x0626 };
	static uint32_t arabic_letter_yeh_with_hamza_above_final_form [] = { 0x0626 };
	static uint32_t arabic_letter_yeh_with_hamza_above_initial_form [] = { 0x0626 };
	static uint32_t arabic_letter_yeh_with_hamza_above_medial_form [] = { 0x0626 };
	static uint32_t arabic_letter_alef_isolated_form [] = { 0x0627 };
	static uint32_t arabic_letter_alef_final_form [] = { 0x0627 };
	static uint32_t arabic_letter_beh_isolated_form [] = { 0x0628 };
	static uint32_t arabic_letter_beh_final_form [] = { 0x0628 };
	static uint32_t arabic_letter_beh_initial_form [] = { 0x0628 };
	static uint32_t arabic_letter_beh_medial_form [] = { 0x0628 };
	static uint32_t arabic_letter_teh_marbuta_isolated_form [] = { 0x0629 };
	static uint32_t arabic_letter_teh_marbuta_final_form [] = { 0x0629 };
	static uint32_t arabic_letter_teh_isolated_form [] = { 0x062A };
	static uint32_t arabic_letter_teh_final_form [] = { 0x062A };
	static uint32_t arabic_letter_teh_initial_form [] = { 0x062A };
	static uint32_t arabic_letter_teh_medial_form [] = { 0x062A };
	static uint32_t arabic_letter_theh_isolated_form [] = { 0x062B };
	static uint32_t arabic_letter_theh_final_form [] = { 0x062B };
	static uint32_t arabic_letter_theh_initial_form [] = { 0x062B };
	static uint32_t arabic_letter_theh_medial_form [] = { 0x062B };
	static uint32_t arabic_letter_jeem_isolated_form [] = { 0x062C };
	static uint32_t arabic_letter_jeem_final_form [] = { 0x062C };
	static uint32_t arabic_letter_jeem_initial_form [] = { 0x062C };
	static uint32_t arabic_letter_jeem_medial_form [] = { 0x062C };
	static uint32_t arabic_letter_hah_isolated_form [] = { 0x062D };
	static uint32_t arabic_letter_hah_final_form [] = { 0x062D };
	static uint32_t arabic_letter_hah_initial_form [] = { 0x062D };
	static uint32_t arabic_letter_hah_medial_form [] = { 0x062D };
	static uint32_t arabic_letter_khah_isolated_form [] = { 0x062E };
	static uint32_t arabic_letter_khah_final_form [] = { 0x062E };
	static uint32_t arabic_letter_khah_initial_form [] = { 0x062E };
	static uint32_t arabic_letter_khah_medial_form [] = { 0x062E };
	static uint32_t arabic_letter_dal_isolated_form [] = { 0x062F };
	static uint32_t arabic_letter_dal_final_form [] = { 0x062F };
	static uint32_t arabic_letter_thal_isolated_form [] = { 0x0630 };
	static uint32_t arabic_letter_thal_final_form [] = { 0x0630 };
	static uint32_t arabic_letter_reh_isolated_form [] = { 0x0631 };
	static uint32_t arabic_letter_reh_final_form [] = { 0x0631 };
	static uint32_t arabic_letter_zain_isolated_form [] = { 0x0632 };
	static uint32_t arabic_letter_zain_final_form [] = { 0x0632 };
	static uint32_t arabic_letter_seen_isolated_form [] = { 0x0633 };
	static uint32_t arabic_letter_seen_final_form [] = { 0x0633 };
	static uint32_t arabic_letter_seen_initial_form [] = { 0x0633 };
	static uint32_t arabic_letter_seen_medial_form [] = { 0x0633 };
	static uint32_t arabic_letter_sheen_isolated_form [] = { 0x0634 };
	static uint32_t arabic_letter_sheen_final_form [] = { 0x0634 };
	static uint32_t arabic_letter_sheen_initial_form [] = { 0x0634 };
	static uint32_t arabic_letter_sheen_medial_form [] = { 0x0634 };
	static uint32_t arabic_letter_sad_isolated_form [] = { 0x0635 };
	static uint32_t arabic_letter_sad_final_form [] = { 0x0635 };
	static uint32_t arabic_letter_sad_initial_form [] = { 0x0635 };
	static uint32_t arabic_letter_sad_medial_form [] = { 0x0635 };
	static uint32_t arabic_letter_dad_isolated_form [] = { 0x0636 };
	static uint32_t arabic_letter_dad_final_form [] = { 0x0636 };
	static uint32_t arabic_letter_dad_initial_form [] = { 0x0636 };
	static uint32_t arabic_letter_dad_medial_form [] = { 0x0636 };
	static uint32_t arabic_letter_tah_isolated_form [] = { 0x0637 };
	static uint32_t arabic_letter_tah_final_form [] = { 0x0637 };
	static uint32_t arabic_letter_tah_initial_form [] = { 0x0637 };
	static uint32_t arabic_letter_tah_medial_form [] = { 0x0637 };
	static uint32_t arabic_letter_zah_isolated_form [] = { 0x0638 };
	static uint32_t arabic_letter_zah_final_form [] = { 0x0638 };
	static uint32_t arabic_letter_zah_initial_form [] = { 0x0638 };
	static uint32_t arabic_letter_zah_medial_form [] = { 0x0638 };
	static uint32_t arabic_letter_ain_isolated_form [] = { 0x0639 };
	static uint32_t arabic_letter_ain_final_form [] = { 0x0639 };
	static uint32_t arabic_letter_ain_initial_form [] = { 0x0639 };
	static uint32_t arabic_letter_ain_medial_form [] = { 0x0639 };
	static uint32_t arabic_letter_ghain_isolated_form [] = { 0x063A };
	static uint32_t arabic_letter_ghain_final_form [] = { 0x063A };
	static uint32_t arabic_letter_ghain_initial_form [] = { 0x063A };
	static uint32_t arabic_letter_ghain_medial_form [] = { 0x063A };
	static uint32_t arabic_letter_feh_isolated_form [] = { 0x0641 };
	static uint32_t arabic_letter_feh_final_form [] = { 0x0641 };
	static uint32_t arabic_letter_feh_initial_form [] = { 0x0641 };
	static uint32_t arabic_letter_feh_medial_form [] = { 0x0641 };
	static uint32_t arabic_letter_qaf_isolated_form [] = { 0x0642 };
	static uint32_t arabic_letter_qaf_final_form [] = { 0x0642 };
	static uint32_t arabic_letter_qaf_initial_form [] = { 0x0642 };
	static uint32_t arabic_letter_qaf_medial_form [] = { 0x0642 };
	static uint32_t arabic_letter_kaf_isolated_form [] = { 0x0643 };
	static uint32_t arabic_letter_kaf_final_form [] = { 0x0643 };
	static uint32_t arabic_letter_kaf_initial_form [] = { 0x0643 };
	static uint32_t arabic_letter_kaf_medial_form [] = { 0x0643 };
	static uint32_t arabic_letter_lam_isolated_form [] = { 0x0644 };
	static uint32_t arabic_letter_lam_final_form [] = { 0x0644 };
	static uint32_t arabic_letter_lam_initial_form [] = { 0x0644 };
	static uint32_t arabic_letter_lam_medial_form [] = { 0x0644 };
	static uint32_t arabic_letter_meem_isolated_form [] = { 0x0645 };
	static uint32_t arabic_letter_meem_final_form [] = { 0x0645 };
	static uint32_t arabic_letter_meem_initial_form [] = { 0x0645 };
	static uint32_t arabic_letter_meem_medial_form [] = { 0x0645 };
	static uint32_t arabic_letter_noon_isolated_form [] = { 0x0646 };
	static uint32_t arabic_letter_noon_final_form [] = { 0x0646 };
	static uint32_t arabic_letter_noon_initial_form [] = { 0x0646 };
	static uint32_t arabic_letter_noon_medial_form [] = { 0x0646 };
	static uint32_t arabic_letter_heh_isolated_form [] = { 0x0647 };
	static uint32_t arabic_letter_heh_final_form [] = { 0x0647 };
	static uint32_t arabic_letter_heh_initial_form [] = { 0x0647 };
	static uint32_t arabic_letter_heh_medial_form [] = { 0x0647 };
	static uint32_t arabic_letter_waw_isolated_form [] = { 0x0648 };
	static uint32_t arabic_letter_waw_final_form [] = { 0x0648 };
	static uint32_t arabic_letter_alef_maksura_isolated_form [] = { 0x0649 };
	static uint32_t arabic_letter_alef_maksura_final_form [] = { 0x0649 };
	static uint32_t arabic_letter_yeh_isolated_form [] = { 0x064A };
	static uint32_t arabic_letter_yeh_final_form [] = { 0x064A };
	static uint32_t arabic_letter_yeh_initial_form [] = { 0x064A };
	static uint32_t arabic_letter_yeh_medial_form [] = { 0x064A };
	static uint32_t arabic_ligature_lam_with_alef_with_madda_above_isolated_form [] = { 0x0644, 0x0622 };
	static uint32_t arabic_ligature_lam_with_alef_with_madda_above_final_form [] = { 0x0644, 0x0622 };
	static uint32_t arabic_ligature_lam_with_alef_with_hamza_above_isolated_form [] = { 0x0644, 0x0623 };
	static uint32_t arabic_ligature_lam_with_alef_with_hamza_above_final_form [] = { 0x0644, 0x0623 };
	static uint32_t arabic_ligature_lam_with_alef_with_hamza_below_isolated_form [] = { 0x0644, 0x0625 };
	static uint32_t arabic_ligature_lam_with_alef_with_hamza_below_final_form [] = { 0x0644, 0x0625 };
	static uint32_t arabic_ligature_lam_with_alef_isolated_form [] = { 0x0644, 0x0627 };
	static uint32_t arabic_ligature_lam_with_alef_final_form [] = { 0x0644, 0x0627 };
	static uint32_t fullwidth_exclamation_mark [] = { 0x0021 };
	static uint32_t fullwidth_quotation_mark [] = { 0x0022 };
	static uint32_t fullwidth_number_sign [] = { 0x0023 };
	static uint32_t fullwidth_dollar_sign [] = { 0x0024 };
	static uint32_t fullwidth_percent_sign [] = { 0x0025 };
	static uint32_t fullwidth_ampersand [] = { 0x0026 };
	static uint32_t fullwidth_apostrophe [] = { 0x0027 };
	static uint32_t fullwidth_left_parenthesis [] = { 0x0028 };
	static uint32_t fullwidth_right_parenthesis [] = { 0x0029 };
	static uint32_t fullwidth_asterisk [] = { 0x002A };
	static uint32_t fullwidth_plus_sign [] = { 0x002B };
	static uint32_t fullwidth_comma [] = { 0x002C };
	static uint32_t fullwidth_hyphen_minus [] = { 0x002D };
	static uint32_t fullwidth_full_stop [] = { 0x002E };
	static uint32_t fullwidth_solidus [] = { 0x002F };
	static uint32_t fullwidth_digit_zero [] = { 0x0030 };
	static uint32_t fullwidth_digit_one [] = { 0x0031 };
	static uint32_t fullwidth_digit_two [] = { 0x0032 };
	static uint32_t fullwidth_digit_three [] = { 0x0033 };
	static uint32_t fullwidth_digit_four [] = { 0x0034 };
	static uint32_t fullwidth_digit_five [] = { 0x0035 };
	static uint32_t fullwidth_digit_six [] = { 0x0036 };
	static uint32_t fullwidth_digit_seven [] = { 0x0037 };
	static uint32_t fullwidth_digit_eight [] = { 0x0038 };
	static uint32_t fullwidth_digit_nine [] = { 0x0039 };
	static uint32_t fullwidth_colon [] = { 0x003A };
	static uint32_t fullwidth_semicolon [] = { 0x003B };
	static uint32_t fullwidth_less_than_sign [] = { 0x003C };
	static uint32_t fullwidth_equals_sign [] = { 0x003D };
	static uint32_t fullwidth_greater_than_sign [] = { 0x003E };
	static uint32_t fullwidth_question_mark [] = { 0x003F };
	static uint32_t fullwidth_commercial_at [] = { 0x0040 };
	static uint32_t fullwidth_latin_capital_letter_a [] = { 0x0041 };
	static uint32_t fullwidth_latin_capital_letter_b [] = { 0x0042 };
	static uint32_t fullwidth_latin_capital_letter_c [] = { 0x0043 };
	static uint32_t fullwidth_latin_capital_letter_d [] = { 0x0044 };
	static uint32_t fullwidth_latin_capital_letter_e [] = { 0x0045 };
	static uint32_t fullwidth_latin_capital_letter_f [] = { 0x0046 };
	static uint32_t fullwidth_latin_capital_letter_g [] = { 0x0047 };
	static uint32_t fullwidth_latin_capital_letter_h [] = { 0x0048 };
	static uint32_t fullwidth_latin_capital_letter_i [] = { 0x0049 };
	static uint32_t fullwidth_latin_capital_letter_j [] = { 0x004A };
	static uint32_t fullwidth_latin_capital_letter_k [] = { 0x004B };
	static uint32_t fullwidth_latin_capital_letter_l [] = { 0x004C };
	static uint32_t fullwidth_latin_capital_letter_m [] = { 0x004D };
	static uint32_t fullwidth_latin_capital_letter_n [] = { 0x004E };
	static uint32_t fullwidth_latin_capital_letter_o [] = { 0x004F };
	static uint32_t fullwidth_latin_capital_letter_p [] = { 0x0050 };
	static uint32_t fullwidth_latin_capital_letter_q [] = { 0x0051 };
	static uint32_t fullwidth_latin_capital_letter_r [] = { 0x0052 };
	static uint32_t fullwidth_latin_capital_letter_s [] = { 0x0053 };
	static uint32_t fullwidth_latin_capital_letter_t [] = { 0x0054 };
	static uint32_t fullwidth_latin_capital_letter_u [] = { 0x0055 };
	static uint32_t fullwidth_latin_capital_letter_v [] = { 0x0056 };
	static uint32_t fullwidth_latin_capital_letter_w [] = { 0x0057 };
	static uint32_t fullwidth_latin_capital_letter_x [] = { 0x0058 };
	static uint32_t fullwidth_latin_capital_letter_y [] = { 0x0059 };
	static uint32_t fullwidth_latin_capital_letter_z [] = { 0x005A };
	static uint32_t fullwidth_left_square_bracket [] = { 0x005B };
	static uint32_t fullwidth_reverse_solidus [] = { 0x005C };
	static uint32_t fullwidth_right_square_bracket [] = { 0x005D };
	static uint32_t fullwidth_circumflex_accent [] = { 0x005E };
	static uint32_t fullwidth_low_line [] = { 0x005F };
	static uint32_t fullwidth_grave_accent [] = { 0x0060 };
	static uint32_t fullwidth_latin_small_letter_a [] = { 0x0061 };
	static uint32_t fullwidth_latin_small_letter_b [] = { 0x0062 };
	static uint32_t fullwidth_latin_small_letter_c [] = { 0x0063 };
	static uint32_t fullwidth_latin_small_letter_d [] = { 0x0064 };
	static uint32_t fullwidth_latin_small_letter_e [] = { 0x0065 };
	static uint32_t fullwidth_latin_small_letter_f [] = { 0x0066 };
	static uint32_t fullwidth_latin_small_letter_g [] = { 0x0067 };
	static uint32_t fullwidth_latin_small_letter_h [] = { 0x0068 };
	static uint32_t fullwidth_latin_small_letter_i [] = { 0x0069 };
	static uint32_t fullwidth_latin_small_letter_j [] = { 0x006A };
	static uint32_t fullwidth_latin_small_letter_k [] = { 0x006B };
	static uint32_t fullwidth_latin_small_letter_l [] = { 0x006C };
	static uint32_t fullwidth_latin_small_letter_m [] = { 0x006D };
	static uint32_t fullwidth_latin_small_letter_n [] = { 0x006E };
	static uint32_t fullwidth_latin_small_letter_o [] = { 0x006F };
	static uint32_t fullwidth_latin_small_letter_p [] = { 0x0070 };
	static uint32_t fullwidth_latin_small_letter_q [] = { 0x0071 };
	static uint32_t fullwidth_latin_small_letter_r [] = { 0x0072 };
	static uint32_t fullwidth_latin_small_letter_s [] = { 0x0073 };
	static uint32_t fullwidth_latin_small_letter_t [] = { 0x0074 };
	static uint32_t fullwidth_latin_small_letter_u [] = { 0x0075 };
	static uint32_t fullwidth_latin_small_letter_v [] = { 0x0076 };
	static uint32_t fullwidth_latin_small_letter_w [] = { 0x0077 };
	static uint32_t fullwidth_latin_small_letter_x [] = { 0x0078 };
	static uint32_t fullwidth_latin_small_letter_y [] = { 0x0079 };
	static uint32_t fullwidth_latin_small_letter_z [] = { 0x007A };
	static uint32_t fullwidth_left_curly_bracket [] = { 0x007B };
	static uint32_t fullwidth_vertical_line [] = { 0x007C };
	static uint32_t fullwidth_right_curly_bracket [] = { 0x007D };
	static uint32_t fullwidth_tilde [] = { 0x007E };
	static uint32_t fullwidth_left_white_parenthesis [] = { 0x2985 };
	static uint32_t fullwidth_right_white_parenthesis [] = { 0x2986 };
	static uint32_t halfwidth_ideographic_full_stop [] = { 0x3002 };
	static uint32_t halfwidth_left_corner_bracket [] = { 0x300C };
	static uint32_t halfwidth_right_corner_bracket [] = { 0x300D };
	static uint32_t halfwidth_ideographic_comma [] = { 0x3001 };
	static uint32_t halfwidth_katakana_middle_dot [] = { 0x30FB };
	static uint32_t halfwidth_katakana_letter_wo [] = { 0x30F2 };
	static uint32_t halfwidth_katakana_letter_small_a [] = { 0x30A1 };
	static uint32_t halfwidth_katakana_letter_small_i [] = { 0x30A3 };
	static uint32_t halfwidth_katakana_letter_small_u [] = { 0x30A5 };
	static uint32_t halfwidth_katakana_letter_small_e [] = { 0x30A7 };
	static uint32_t halfwidth_katakana_letter_small_o [] = { 0x30A9 };
	static uint32_t halfwidth_katakana_letter_small_ya [] = { 0x30E3 };
	static uint32_t halfwidth_katakana_letter_small_yu [] = { 0x30E5 };
	static uint32_t halfwidth_katakana_letter_small_yo [] = { 0x30E7 };
	static uint32_t halfwidth_katakana_letter_small_tu [] = { 0x30C3 };
	static uint32_t halfwidth_katakana_hiragana_prolonged_sound_mark [] = { 0x30FC };
	static uint32_t halfwidth_katakana_letter_a [] = { 0x30A2 };
	static uint32_t halfwidth_katakana_letter_i [] = { 0x30A4 };
	static uint32_t halfwidth_katakana_letter_u [] = { 0x30A6 };
	static uint32_t halfwidth_katakana_letter_e [] = { 0x30A8 };
	static uint32_t halfwidth_katakana_letter_o [] = { 0x30AA };
	static uint32_t halfwidth_katakana_letter_ka [] = { 0x30AB };
	static uint32_t halfwidth_katakana_letter_ki [] = { 0x30AD };
	static uint32_t halfwidth_katakana_letter_ku [] = { 0x30AF };
	static uint32_t halfwidth_katakana_letter_ke [] = { 0x30B1 };
	static uint32_t halfwidth_katakana_letter_ko [] = { 0x30B3 };
	static uint32_t halfwidth_katakana_letter_sa [] = { 0x30B5 };
	static uint32_t halfwidth_katakana_letter_si [] = { 0x30B7 };
	static uint32_t halfwidth_katakana_letter_su [] = { 0x30B9 };
	static uint32_t halfwidth_katakana_letter_se [] = { 0x30BB };
	static uint32_t halfwidth_katakana_letter_so [] = { 0x30BD };
	static uint32_t halfwidth_katakana_letter_ta [] = { 0x30BF };
	static uint32_t halfwidth_katakana_letter_ti [] = { 0x30C1 };
	static uint32_t halfwidth_katakana_letter_tu [] = { 0x30C4 };
	static uint32_t halfwidth_katakana_letter_te [] = { 0x30C6 };
	static uint32_t halfwidth_katakana_letter_to [] = { 0x30C8 };
	static uint32_t halfwidth_katakana_letter_na [] = { 0x30CA };
	static uint32_t halfwidth_katakana_letter_ni [] = { 0x30CB };
	static uint32_t halfwidth_katakana_letter_nu [] = { 0x30CC };
	static uint32_t halfwidth_katakana_letter_ne [] = { 0x30CD };
	static uint32_t halfwidth_katakana_letter_no [] = { 0x30CE };
	static uint32_t halfwidth_katakana_letter_ha [] = { 0x30CF };
	static uint32_t halfwidth_katakana_letter_hi [] = { 0x30D2 };
	static uint32_t halfwidth_katakana_letter_hu [] = { 0x30D5 };
	static uint32_t halfwidth_katakana_letter_he [] = { 0x30D8 };
	static uint32_t halfwidth_katakana_letter_ho [] = { 0x30DB };
	static uint32_t halfwidth_katakana_letter_ma [] = { 0x30DE };
	static uint32_t halfwidth_katakana_letter_mi [] = { 0x30DF };
	static uint32_t halfwidth_katakana_letter_mu [] = { 0x30E0 };
	static uint32_t halfwidth_katakana_letter_me [] = { 0x30E1 };
	static uint32_t halfwidth_katakana_letter_mo [] = { 0x30E2 };
	static uint32_t halfwidth_katakana_letter_ya [] = { 0x30E4 };
	static uint32_t halfwidth_katakana_letter_yu [] = { 0x30E6 };
	static uint32_t halfwidth_katakana_letter_yo [] = { 0x30E8 };
	static uint32_t halfwidth_katakana_letter_ra [] = { 0x30E9 };
	static uint32_t halfwidth_katakana_letter_ri [] = { 0x30EA };
	static uint32_t halfwidth_katakana_letter_ru [] = { 0x30EB };
	static uint32_t halfwidth_katakana_letter_re [] = { 0x30EC };
	static uint32_t halfwidth_katakana_letter_ro [] = { 0x30ED };
	static uint32_t halfwidth_katakana_letter_wa [] = { 0x30EF };
	static uint32_t halfwidth_katakana_letter_n [] = { 0x30F3 };
	static uint32_t halfwidth_katakana_voiced_sound_mark [] = { 0x3099 };
	static uint32_t halfwidth_katakana_semi_voiced_sound_mark [] = { 0x309A };
	static uint32_t halfwidth_hangul_filler [] = { 0x3164 };
	static uint32_t halfwidth_hangul_letter_kiyeok [] = { 0x3131 };
	static uint32_t halfwidth_hangul_letter_ssangkiyeok [] = { 0x3132 };
	static uint32_t halfwidth_hangul_letter_kiyeok_sios [] = { 0x3133 };
	static uint32_t halfwidth_hangul_letter_nieun [] = { 0x3134 };
	static uint32_t halfwidth_hangul_letter_nieun_cieuc [] = { 0x3135 };
	static uint32_t halfwidth_hangul_letter_nieun_hieuh [] = { 0x3136 };
	static uint32_t halfwidth_hangul_letter_tikeut [] = { 0x3137 };
	static uint32_t halfwidth_hangul_letter_ssangtikeut [] = { 0x3138 };
	static uint32_t halfwidth_hangul_letter_rieul [] = { 0x3139 };
	static uint32_t halfwidth_hangul_letter_rieul_kiyeok [] = { 0x313A };
	static uint32_t halfwidth_hangul_letter_rieul_mieum [] = { 0x313B };
	static uint32_t halfwidth_hangul_letter_rieul_pieup [] = { 0x313C };
	static uint32_t halfwidth_hangul_letter_rieul_sios [] = { 0x313D };
	static uint32_t halfwidth_hangul_letter_rieul_thieuth [] = { 0x313E };
	static uint32_t halfwidth_hangul_letter_rieul_phieuph [] = { 0x313F };
	static uint32_t halfwidth_hangul_letter_rieul_hieuh [] = { 0x3140 };
	static uint32_t halfwidth_hangul_letter_mieum [] = { 0x3141 };
	static uint32_t halfwidth_hangul_letter_pieup [] = { 0x3142 };
	static uint32_t halfwidth_hangul_letter_ssangpieup [] = { 0x3143 };
	static uint32_t halfwidth_hangul_letter_pieup_sios [] = { 0x3144 };
	static uint32_t halfwidth_hangul_letter_sios [] = { 0x3145 };
	static uint32_t halfwidth_hangul_letter_ssangsios [] = { 0x3146 };
	static uint32_t halfwidth_hangul_letter_ieung [] = { 0x3147 };
	static uint32_t halfwidth_hangul_letter_cieuc [] = { 0x3148 };
	static uint32_t halfwidth_hangul_letter_ssangcieuc [] = { 0x3149 };
	static uint32_t halfwidth_hangul_letter_chieuch [] = { 0x314A };
	static uint32_t halfwidth_hangul_letter_khieukh [] = { 0x314B };
	static uint32_t halfwidth_hangul_letter_thieuth [] = { 0x314C };
	static uint32_t halfwidth_hangul_letter_phieuph [] = { 0x314D };
	static uint32_t halfwidth_hangul_letter_hieuh [] = { 0x314E };
	static uint32_t halfwidth_hangul_letter_a [] = { 0x314F };
	static uint32_t halfwidth_hangul_letter_ae [] = { 0x3150 };
	static uint32_t halfwidth_hangul_letter_ya [] = { 0x3151 };
	static uint32_t halfwidth_hangul_letter_yae [] = { 0x3152 };
	static uint32_t halfwidth_hangul_letter_eo [] = { 0x3153 };
	static uint32_t halfwidth_hangul_letter_e [] = { 0x3154 };
	static uint32_t halfwidth_hangul_letter_yeo [] = { 0x3155 };
	static uint32_t halfwidth_hangul_letter_ye [] = { 0x3156 };
	static uint32_t halfwidth_hangul_letter_o [] = { 0x3157 };
	static uint32_t halfwidth_hangul_letter_wa [] = { 0x3158 };
	static uint32_t halfwidth_hangul_letter_wae [] = { 0x3159 };
	static uint32_t halfwidth_hangul_letter_oe [] = { 0x315A };
	static uint32_t halfwidth_hangul_letter_yo [] = { 0x315B };
	static uint32_t halfwidth_hangul_letter_u [] = { 0x315C };
	static uint32_t halfwidth_hangul_letter_weo [] = { 0x315D };
	static uint32_t halfwidth_hangul_letter_we [] = { 0x315E };
	static uint32_t halfwidth_hangul_letter_wi [] = { 0x315F };
	static uint32_t halfwidth_hangul_letter_yu [] = { 0x3160 };
	static uint32_t halfwidth_hangul_letter_eu [] = { 0x3161 };
	static uint32_t halfwidth_hangul_letter_yi [] = { 0x3162 };
	static uint32_t halfwidth_hangul_letter_i [] = { 0x3163 };
	static uint32_t fullwidth_cent_sign [] = { 0x00A2 };
	static uint32_t fullwidth_pound_sign [] = { 0x00A3 };
	static uint32_t fullwidth_not_sign [] = { 0x00AC };
	static uint32_t fullwidth_macron [] = { 0x00AF };
	static uint32_t fullwidth_broken_bar [] = { 0x00A6 };
	static uint32_t fullwidth_yen_sign [] = { 0x00A5 };
	static uint32_t fullwidth_won_sign [] = { 0x20A9 };
	static uint32_t halfwidth_forms_light_vertical [] = { 0x2502 };
	static uint32_t halfwidth_leftwards_arrow [] = { 0x2190 };
	static uint32_t halfwidth_upwards_arrow [] = { 0x2191 };
	static uint32_t halfwidth_rightwards_arrow [] = { 0x2192 };
	static uint32_t halfwidth_downwards_arrow [] = { 0x2193 };
	static uint32_t halfwidth_black_square [] = { 0x25A0 };
	static uint32_t halfwidth_white_circle [] = { 0x25CB };
	static uint32_t kaithi_letter_dddha [] = { 0x11099, 0x110BA };
	static uint32_t kaithi_letter_rha [] = { 0x1109B, 0x110BA };
	static uint32_t kaithi_letter_va [] = { 0x110A5, 0x110BA };
	static uint32_t chakma_vowel_sign_o [] = { 0x11131, 0x11127 };
	static uint32_t chakma_vowel_sign_au [] = { 0x11132, 0x11127 };
	static uint32_t grantha_vowel_sign_oo [] = { 0x11347, 0x1133E };
	static uint32_t grantha_vowel_sign_au [] = { 0x11347, 0x11357 };
	static uint32_t tirhuta_vowel_sign_ai [] = { 0x114B9, 0x114BA };
	static uint32_t tirhuta_vowel_sign_o [] = { 0x114B9, 0x114B0 };
	static uint32_t tirhuta_vowel_sign_au [] = { 0x114B9, 0x114BD };
	static uint32_t siddham_vowel_sign_o [] = { 0x115B8, 0x115AF };
	static uint32_t siddham_vowel_sign_au [] = { 0x115B9, 0x115AF };
	static uint32_t dives_akuru_vowel_sign_o [] = { 0x11935, 0x11930 };
	static uint32_t musical_symbol_half_note [] = { 0x1D157, 0x1D165 };
	static uint32_t musical_symbol_quarter_note [] = { 0x1D158, 0x1D165 };
	static uint32_t musical_symbol_eighth_note [] = { 0x1D15F, 0x1D16E };
	static uint32_t musical_symbol_sixteenth_note [] = { 0x1D15F, 0x1D16F };
	static uint32_t musical_symbol_thirty_second_note [] = { 0x1D15F, 0x1D170 };
	static uint32_t musical_symbol_sixty_fourth_note [] = { 0x1D15F, 0x1D171 };
	static uint32_t musical_symbol_one_hundred_twenty_eighth_note [] = { 0x1D15F, 0x1D172 };
	static uint32_t musical_symbol_minima [] = { 0x1D1B9, 0x1D165 };
	static uint32_t musical_symbol_minima_black [] = { 0x1D1BA, 0x1D165 };
	static uint32_t musical_symbol_semiminima_white [] = { 0x1D1BB, 0x1D16E };
	static uint32_t musical_symbol_semiminima_black [] = { 0x1D1BC, 0x1D16E };
	static uint32_t musical_symbol_fusa_white [] = { 0x1D1BB, 0x1D16F };
	static uint32_t musical_symbol_fusa_black [] = { 0x1D1BC, 0x1D16F };
	static uint32_t mathematical_bold_capital_a [] = { 0x0041 };
	static uint32_t mathematical_bold_capital_b [] = { 0x0042 };
	static uint32_t mathematical_bold_capital_c [] = { 0x0043 };
	static uint32_t mathematical_bold_capital_d [] = { 0x0044 };
	static uint32_t mathematical_bold_capital_e [] = { 0x0045 };
	static uint32_t mathematical_bold_capital_f [] = { 0x0046 };
	static uint32_t mathematical_bold_capital_g [] = { 0x0047 };
	static uint32_t mathematical_bold_capital_h [] = { 0x0048 };
	static uint32_t mathematical_bold_capital_i [] = { 0x0049 };
	static uint32_t mathematical_bold_capital_j [] = { 0x004A };
	static uint32_t mathematical_bold_capital_k [] = { 0x004B };
	static uint32_t mathematical_bold_capital_l [] = { 0x004C };
	static uint32_t mathematical_bold_capital_m [] = { 0x004D };
	static uint32_t mathematical_bold_capital_n [] = { 0x004E };
	static uint32_t mathematical_bold_capital_o [] = { 0x004F };
	static uint32_t mathematical_bold_capital_p [] = { 0x0050 };
	static uint32_t mathematical_bold_capital_q [] = { 0x0051 };
	static uint32_t mathematical_bold_capital_r [] = { 0x0052 };
	static uint32_t mathematical_bold_capital_s [] = { 0x0053 };
	static uint32_t mathematical_bold_capital_t [] = { 0x0054 };
	static uint32_t mathematical_bold_capital_u [] = { 0x0055 };
	static uint32_t mathematical_bold_capital_v [] = { 0x0056 };
	static uint32_t mathematical_bold_capital_w [] = { 0x0057 };
	static uint32_t mathematical_bold_capital_x [] = { 0x0058 };
	static uint32_t mathematical_bold_capital_y [] = { 0x0059 };
	static uint32_t mathematical_bold_capital_z [] = { 0x005A };
	static uint32_t mathematical_bold_small_a [] = { 0x0061 };
	static uint32_t mathematical_bold_small_b [] = { 0x0062 };
	static uint32_t mathematical_bold_small_c [] = { 0x0063 };
	static uint32_t mathematical_bold_small_d [] = { 0x0064 };
	static uint32_t mathematical_bold_small_e [] = { 0x0065 };
	static uint32_t mathematical_bold_small_f [] = { 0x0066 };
	static uint32_t mathematical_bold_small_g [] = { 0x0067 };
	static uint32_t mathematical_bold_small_h [] = { 0x0068 };
	static uint32_t mathematical_bold_small_i [] = { 0x0069 };
	static uint32_t mathematical_bold_small_j [] = { 0x006A };
	static uint32_t mathematical_bold_small_k [] = { 0x006B };
	static uint32_t mathematical_bold_small_l [] = { 0x006C };
	static uint32_t mathematical_bold_small_m [] = { 0x006D };
	static uint32_t mathematical_bold_small_n [] = { 0x006E };
	static uint32_t mathematical_bold_small_o [] = { 0x006F };
	static uint32_t mathematical_bold_small_p [] = { 0x0070 };
	static uint32_t mathematical_bold_small_q [] = { 0x0071 };
	static uint32_t mathematical_bold_small_r [] = { 0x0072 };
	static uint32_t mathematical_bold_small_s [] = { 0x0073 };
	static uint32_t mathematical_bold_small_t [] = { 0x0074 };
	static uint32_t mathematical_bold_small_u [] = { 0x0075 };
	static uint32_t mathematical_bold_small_v [] = { 0x0076 };
	static uint32_t mathematical_bold_small_w [] = { 0x0077 };
	static uint32_t mathematical_bold_small_x [] = { 0x0078 };
	static uint32_t mathematical_bold_small_y [] = { 0x0079 };
	static uint32_t mathematical_bold_small_z [] = { 0x007A };
	static uint32_t mathematical_italic_capital_a [] = { 0x0041 };
	static uint32_t mathematical_italic_capital_b [] = { 0x0042 };
	static uint32_t mathematical_italic_capital_c [] = { 0x0043 };
	static uint32_t mathematical_italic_capital_d [] = { 0x0044 };
	static uint32_t mathematical_italic_capital_e [] = { 0x0045 };
	static uint32_t mathematical_italic_capital_f [] = { 0x0046 };
	static uint32_t mathematical_italic_capital_g [] = { 0x0047 };
	static uint32_t mathematical_italic_capital_h [] = { 0x0048 };
	static uint32_t mathematical_italic_capital_i [] = { 0x0049 };
	static uint32_t mathematical_italic_capital_j [] = { 0x004A };
	static uint32_t mathematical_italic_capital_k [] = { 0x004B };
	static uint32_t mathematical_italic_capital_l [] = { 0x004C };
	static uint32_t mathematical_italic_capital_m [] = { 0x004D };
	static uint32_t mathematical_italic_capital_n [] = { 0x004E };
	static uint32_t mathematical_italic_capital_o [] = { 0x004F };
	static uint32_t mathematical_italic_capital_p [] = { 0x0050 };
	static uint32_t mathematical_italic_capital_q [] = { 0x0051 };
	static uint32_t mathematical_italic_capital_r [] = { 0x0052 };
	static uint32_t mathematical_italic_capital_s [] = { 0x0053 };
	static uint32_t mathematical_italic_capital_t [] = { 0x0054 };
	static uint32_t mathematical_italic_capital_u [] = { 0x0055 };
	static uint32_t mathematical_italic_capital_v [] = { 0x0056 };
	static uint32_t mathematical_italic_capital_w [] = { 0x0057 };
	static uint32_t mathematical_italic_capital_x [] = { 0x0058 };
	static uint32_t mathematical_italic_capital_y [] = { 0x0059 };
	static uint32_t mathematical_italic_capital_z [] = { 0x005A };
	static uint32_t mathematical_italic_small_a [] = { 0x0061 };
	static uint32_t mathematical_italic_small_b [] = { 0x0062 };
	static uint32_t mathematical_italic_small_c [] = { 0x0063 };
	static uint32_t mathematical_italic_small_d [] = { 0x0064 };
	static uint32_t mathematical_italic_small_e [] = { 0x0065 };
	static uint32_t mathematical_italic_small_f [] = { 0x0066 };
	static uint32_t mathematical_italic_small_g [] = { 0x0067 };
	static uint32_t mathematical_italic_small_i [] = { 0x0069 };
	static uint32_t mathematical_italic_small_j [] = { 0x006A };
	static uint32_t mathematical_italic_small_k [] = { 0x006B };
	static uint32_t mathematical_italic_small_l [] = { 0x006C };
	static uint32_t mathematical_italic_small_m [] = { 0x006D };
	static uint32_t mathematical_italic_small_n [] = { 0x006E };
	static uint32_t mathematical_italic_small_o [] = { 0x006F };
	static uint32_t mathematical_italic_small_p [] = { 0x0070 };
	static uint32_t mathematical_italic_small_q [] = { 0x0071 };
	static uint32_t mathematical_italic_small_r [] = { 0x0072 };
	static uint32_t mathematical_italic_small_s [] = { 0x0073 };
	static uint32_t mathematical_italic_small_t [] = { 0x0074 };
	static uint32_t mathematical_italic_small_u [] = { 0x0075 };
	static uint32_t mathematical_italic_small_v [] = { 0x0076 };
	static uint32_t mathematical_italic_small_w [] = { 0x0077 };
	static uint32_t mathematical_italic_small_x [] = { 0x0078 };
	static uint32_t mathematical_italic_small_y [] = { 0x0079 };
	static uint32_t mathematical_italic_small_z [] = { 0x007A };
	static uint32_t mathematical_bold_italic_capital_a [] = { 0x0041 };
	static uint32_t mathematical_bold_italic_capital_b [] = { 0x0042 };
	static uint32_t mathematical_bold_italic_capital_c [] = { 0x0043 };
	static uint32_t mathematical_bold_italic_capital_d [] = { 0x0044 };
	static uint32_t mathematical_bold_italic_capital_e [] = { 0x0045 };
	static uint32_t mathematical_bold_italic_capital_f [] = { 0x0046 };
	static uint32_t mathematical_bold_italic_capital_g [] = { 0x0047 };
	static uint32_t mathematical_bold_italic_capital_h [] = { 0x0048 };
	static uint32_t mathematical_bold_italic_capital_i [] = { 0x0049 };
	static uint32_t mathematical_bold_italic_capital_j [] = { 0x004A };
	static uint32_t mathematical_bold_italic_capital_k [] = { 0x004B };
	static uint32_t mathematical_bold_italic_capital_l [] = { 0x004C };
	static uint32_t mathematical_bold_italic_capital_m [] = { 0x004D };
	static uint32_t mathematical_bold_italic_capital_n [] = { 0x004E };
	static uint32_t mathematical_bold_italic_capital_o [] = { 0x004F };
	static uint32_t mathematical_bold_italic_capital_p [] = { 0x0050 };
	static uint32_t mathematical_bold_italic_capital_q [] = { 0x0051 };
	static uint32_t mathematical_bold_italic_capital_r [] = { 0x0052 };
	static uint32_t mathematical_bold_italic_capital_s [] = { 0x0053 };
	static uint32_t mathematical_bold_italic_capital_t [] = { 0x0054 };
	static uint32_t mathematical_bold_italic_capital_u [] = { 0x0055 };
	static uint32_t mathematical_bold_italic_capital_v [] = { 0x0056 };
	static uint32_t mathematical_bold_italic_capital_w [] = { 0x0057 };
	static uint32_t mathematical_bold_italic_capital_x [] = { 0x0058 };
	static uint32_t mathematical_bold_italic_capital_y [] = { 0x0059 };
	static uint32_t mathematical_bold_italic_capital_z [] = { 0x005A };
	static uint32_t mathematical_bold_italic_small_a [] = { 0x0061 };
	static uint32_t mathematical_bold_italic_small_b [] = { 0x0062 };
	static uint32_t mathematical_bold_italic_small_c [] = { 0x0063 };
	static uint32_t mathematical_bold_italic_small_d [] = { 0x0064 };
	static uint32_t mathematical_bold_italic_small_e [] = { 0x0065 };
	static uint32_t mathematical_bold_italic_small_f [] = { 0x0066 };
	static uint32_t mathematical_bold_italic_small_g [] = { 0x0067 };
	static uint32_t mathematical_bold_italic_small_h [] = { 0x0068 };
	static uint32_t mathematical_bold_italic_small_i [] = { 0x0069 };
	static uint32_t mathematical_bold_italic_small_j [] = { 0x006A };
	static uint32_t mathematical_bold_italic_small_k [] = { 0x006B };
	static uint32_t mathematical_bold_italic_small_l [] = { 0x006C };
	static uint32_t mathematical_bold_italic_small_m [] = { 0x006D };
	static uint32_t mathematical_bold_italic_small_n [] = { 0x006E };
	static uint32_t mathematical_bold_italic_small_o [] = { 0x006F };
	static uint32_t mathematical_bold_italic_small_p [] = { 0x0070 };
	static uint32_t mathematical_bold_italic_small_q [] = { 0x0071 };
	static uint32_t mathematical_bold_italic_small_r [] = { 0x0072 };
	static uint32_t mathematical_bold_italic_small_s [] = { 0x0073 };
	static uint32_t mathematical_bold_italic_small_t [] = { 0x0074 };
	static uint32_t mathematical_bold_italic_small_u [] = { 0x0075 };
	static uint32_t mathematical_bold_italic_small_v [] = { 0x0076 };
	static uint32_t mathematical_bold_italic_small_w [] = { 0x0077 };
	static uint32_t mathematical_bold_italic_small_x [] = { 0x0078 };
	static uint32_t mathematical_bold_italic_small_y [] = { 0x0079 };
	static uint32_t mathematical_bold_italic_small_z [] = { 0x007A };
	static uint32_t mathematical_script_capital_a [] = { 0x0041 };
	static uint32_t mathematical_script_capital_c [] = { 0x0043 };
	static uint32_t mathematical_script_capital_d [] = { 0x0044 };
	static uint32_t mathematical_script_capital_g [] = { 0x0047 };
	static uint32_t mathematical_script_capital_j [] = { 0x004A };
	static uint32_t mathematical_script_capital_k [] = { 0x004B };
	static uint32_t mathematical_script_capital_n [] = { 0x004E };
	static uint32_t mathematical_script_capital_o [] = { 0x004F };
	static uint32_t mathematical_script_capital_p [] = { 0x0050 };
	static uint32_t mathematical_script_capital_q [] = { 0x0051 };
	static uint32_t mathematical_script_capital_s [] = { 0x0053 };
	static uint32_t mathematical_script_capital_t [] = { 0x0054 };
	static uint32_t mathematical_script_capital_u [] = { 0x0055 };
	static uint32_t mathematical_script_capital_v [] = { 0x0056 };
	static uint32_t mathematical_script_capital_w [] = { 0x0057 };
	static uint32_t mathematical_script_capital_x [] = { 0x0058 };
	static uint32_t mathematical_script_capital_y [] = { 0x0059 };
	static uint32_t mathematical_script_capital_z [] = { 0x005A };
	static uint32_t mathematical_script_small_a [] = { 0x0061 };
	static uint32_t mathematical_script_small_b [] = { 0x0062 };
	static uint32_t mathematical_script_small_c [] = { 0x0063 };
	static uint32_t mathematical_script_small_d [] = { 0x0064 };
	static uint32_t mathematical_script_small_f [] = { 0x0066 };
	static uint32_t mathematical_script_small_h [] = { 0x0068 };
	static uint32_t mathematical_script_small_i [] = { 0x0069 };
	static uint32_t mathematical_script_small_j [] = { 0x006A };
	static uint32_t mathematical_script_small_k [] = { 0x006B };
	static uint32_t mathematical_script_small_l [] = { 0x006C };
	static uint32_t mathematical_script_small_m [] = { 0x006D };
	static uint32_t mathematical_script_small_n [] = { 0x006E };
	static uint32_t mathematical_script_small_p [] = { 0x0070 };
	static uint32_t mathematical_script_small_q [] = { 0x0071 };
	static uint32_t mathematical_script_small_r [] = { 0x0072 };
	static uint32_t mathematical_script_small_s [] = { 0x0073 };
	static uint32_t mathematical_script_small_t [] = { 0x0074 };
	static uint32_t mathematical_script_small_u [] = { 0x0075 };
	static uint32_t mathematical_script_small_v [] = { 0x0076 };
	static uint32_t mathematical_script_small_w [] = { 0x0077 };
	static uint32_t mathematical_script_small_x [] = { 0x0078 };
	static uint32_t mathematical_script_small_y [] = { 0x0079 };
	static uint32_t mathematical_script_small_z [] = { 0x007A };
	static uint32_t mathematical_bold_script_capital_a [] = { 0x0041 };
	static uint32_t mathematical_bold_script_capital_b [] = { 0x0042 };
	static uint32_t mathematical_bold_script_capital_c [] = { 0x0043 };
	static uint32_t mathematical_bold_script_capital_d [] = { 0x0044 };
	static uint32_t mathematical_bold_script_capital_e [] = { 0x0045 };
	static uint32_t mathematical_bold_script_capital_f [] = { 0x0046 };
	static uint32_t mathematical_bold_script_capital_g [] = { 0x0047 };
	static uint32_t mathematical_bold_script_capital_h [] = { 0x0048 };
	static uint32_t mathematical_bold_script_capital_i [] = { 0x0049 };
	static uint32_t mathematical_bold_script_capital_j [] = { 0x004A };
	static uint32_t mathematical_bold_script_capital_k [] = { 0x004B };
	static uint32_t mathematical_bold_script_capital_l [] = { 0x004C };
	static uint32_t mathematical_bold_script_capital_m [] = { 0x004D };
	static uint32_t mathematical_bold_script_capital_n [] = { 0x004E };
	static uint32_t mathematical_bold_script_capital_o [] = { 0x004F };
	static uint32_t mathematical_bold_script_capital_p [] = { 0x0050 };
	static uint32_t mathematical_bold_script_capital_q [] = { 0x0051 };
	static uint32_t mathematical_bold_script_capital_r [] = { 0x0052 };
	static uint32_t mathematical_bold_script_capital_s [] = { 0x0053 };
	static uint32_t mathematical_bold_script_capital_t [] = { 0x0054 };
	static uint32_t mathematical_bold_script_capital_u [] = { 0x0055 };
	static uint32_t mathematical_bold_script_capital_v [] = { 0x0056 };
	static uint32_t mathematical_bold_script_capital_w [] = { 0x0057 };
	static uint32_t mathematical_bold_script_capital_x [] = { 0x0058 };
	static uint32_t mathematical_bold_script_capital_y [] = { 0x0059 };
	static uint32_t mathematical_bold_script_capital_z [] = { 0x005A };
	static uint32_t mathematical_bold_script_small_a [] = { 0x0061 };
	static uint32_t mathematical_bold_script_small_b [] = { 0x0062 };
	static uint32_t mathematical_bold_script_small_c [] = { 0x0063 };
	static uint32_t mathematical_bold_script_small_d [] = { 0x0064 };
	static uint32_t mathematical_bold_script_small_e [] = { 0x0065 };
	static uint32_t mathematical_bold_script_small_f [] = { 0x0066 };
	static uint32_t mathematical_bold_script_small_g [] = { 0x0067 };
	static uint32_t mathematical_bold_script_small_h [] = { 0x0068 };
	static uint32_t mathematical_bold_script_small_i [] = { 0x0069 };
	static uint32_t mathematical_bold_script_small_j [] = { 0x006A };
	static uint32_t mathematical_bold_script_small_k [] = { 0x006B };
	static uint32_t mathematical_bold_script_small_l [] = { 0x006C };
	static uint32_t mathematical_bold_script_small_m [] = { 0x006D };
	static uint32_t mathematical_bold_script_small_n [] = { 0x006E };
	static uint32_t mathematical_bold_script_small_o [] = { 0x006F };
	static uint32_t mathematical_bold_script_small_p [] = { 0x0070 };
	static uint32_t mathematical_bold_script_small_q [] = { 0x0071 };
	static uint32_t mathematical_bold_script_small_r [] = { 0x0072 };
	static uint32_t mathematical_bold_script_small_s [] = { 0x0073 };
	static uint32_t mathematical_bold_script_small_t [] = { 0x0074 };
	static uint32_t mathematical_bold_script_small_u [] = { 0x0075 };
	static uint32_t mathematical_bold_script_small_v [] = { 0x0076 };
	static uint32_t mathematical_bold_script_small_w [] = { 0x0077 };
	static uint32_t mathematical_bold_script_small_x [] = { 0x0078 };
	static uint32_t mathematical_bold_script_small_y [] = { 0x0079 };
	static uint32_t mathematical_bold_script_small_z [] = { 0x007A };
	static uint32_t mathematical_fraktur_capital_a [] = { 0x0041 };
	static uint32_t mathematical_fraktur_capital_b [] = { 0x0042 };
	static uint32_t mathematical_fraktur_capital_d [] = { 0x0044 };
	static uint32_t mathematical_fraktur_capital_e [] = { 0x0045 };
	static uint32_t mathematical_fraktur_capital_f [] = { 0x0046 };
	static uint32_t mathematical_fraktur_capital_g [] = { 0x0047 };
	static uint32_t mathematical_fraktur_capital_j [] = { 0x004A };
	static uint32_t mathematical_fraktur_capital_k [] = { 0x004B };
	static uint32_t mathematical_fraktur_capital_l [] = { 0x004C };
	static uint32_t mathematical_fraktur_capital_m [] = { 0x004D };
	static uint32_t mathematical_fraktur_capital_n [] = { 0x004E };
	static uint32_t mathematical_fraktur_capital_o [] = { 0x004F };
	static uint32_t mathematical_fraktur_capital_p [] = { 0x0050 };
	static uint32_t mathematical_fraktur_capital_q [] = { 0x0051 };
	static uint32_t mathematical_fraktur_capital_s [] = { 0x0053 };
	static uint32_t mathematical_fraktur_capital_t [] = { 0x0054 };
	static uint32_t mathematical_fraktur_capital_u [] = { 0x0055 };
	static uint32_t mathematical_fraktur_capital_v [] = { 0x0056 };
	static uint32_t mathematical_fraktur_capital_w [] = { 0x0057 };
	static uint32_t mathematical_fraktur_capital_x [] = { 0x0058 };
	static uint32_t mathematical_fraktur_capital_y [] = { 0x0059 };
	static uint32_t mathematical_fraktur_small_a [] = { 0x0061 };
	static uint32_t mathematical_fraktur_small_b [] = { 0x0062 };
	static uint32_t mathematical_fraktur_small_c [] = { 0x0063 };
	static uint32_t mathematical_fraktur_small_d [] = { 0x0064 };
	static uint32_t mathematical_fraktur_small_e [] = { 0x0065 };
	static uint32_t mathematical_fraktur_small_f [] = { 0x0066 };
	static uint32_t mathematical_fraktur_small_g [] = { 0x0067 };
	static uint32_t mathematical_fraktur_small_h [] = { 0x0068 };
	static uint32_t mathematical_fraktur_small_i [] = { 0x0069 };
	static uint32_t mathematical_fraktur_small_j [] = { 0x006A };
	static uint32_t mathematical_fraktur_small_k [] = { 0x006B };
	static uint32_t mathematical_fraktur_small_l [] = { 0x006C };
	static uint32_t mathematical_fraktur_small_m [] = { 0x006D };
	static uint32_t mathematical_fraktur_small_n [] = { 0x006E };
	static uint32_t mathematical_fraktur_small_o [] = { 0x006F };
	static uint32_t mathematical_fraktur_small_p [] = { 0x0070 };
	static uint32_t mathematical_fraktur_small_q [] = { 0x0071 };
	static uint32_t mathematical_fraktur_small_r [] = { 0x0072 };
	static uint32_t mathematical_fraktur_small_s [] = { 0x0073 };
	static uint32_t mathematical_fraktur_small_t [] = { 0x0074 };
	static uint32_t mathematical_fraktur_small_u [] = { 0x0075 };
	static uint32_t mathematical_fraktur_small_v [] = { 0x0076 };
	static uint32_t mathematical_fraktur_small_w [] = { 0x0077 };
	static uint32_t mathematical_fraktur_small_x [] = { 0x0078 };
	static uint32_t mathematical_fraktur_small_y [] = { 0x0079 };
	static uint32_t mathematical_fraktur_small_z [] = { 0x007A };
	static uint32_t mathematical_double_struck_capital_a [] = { 0x0041 };
	static uint32_t mathematical_double_struck_capital_b [] = { 0x0042 };
	static uint32_t mathematical_double_struck_capital_d [] = { 0x0044 };
	static uint32_t mathematical_double_struck_capital_e [] = { 0x0045 };
	static uint32_t mathematical_double_struck_capital_f [] = { 0x0046 };
	static uint32_t mathematical_double_struck_capital_g [] = { 0x0047 };
	static uint32_t mathematical_double_struck_capital_i [] = { 0x0049 };
	static uint32_t mathematical_double_struck_capital_j [] = { 0x004A };
	static uint32_t mathematical_double_struck_capital_k [] = { 0x004B };
	static uint32_t mathematical_double_struck_capital_l [] = { 0x004C };
	static uint32_t mathematical_double_struck_capital_m [] = { 0x004D };
	static uint32_t mathematical_double_struck_capital_o [] = { 0x004F };
	static uint32_t mathematical_double_struck_capital_s [] = { 0x0053 };
	static uint32_t mathematical_double_struck_capital_t [] = { 0x0054 };
	static uint32_t mathematical_double_struck_capital_u [] = { 0x0055 };
	static uint32_t mathematical_double_struck_capital_v [] = { 0x0056 };
	static uint32_t mathematical_double_struck_capital_w [] = { 0x0057 };
	static uint32_t mathematical_double_struck_capital_x [] = { 0x0058 };
	static uint32_t mathematical_double_struck_capital_y [] = { 0x0059 };
	static uint32_t mathematical_double_struck_small_a [] = { 0x0061 };
	static uint32_t mathematical_double_struck_small_b [] = { 0x0062 };
	static uint32_t mathematical_double_struck_small_c [] = { 0x0063 };
	static uint32_t mathematical_double_struck_small_d [] = { 0x0064 };
	static uint32_t mathematical_double_struck_small_e [] = { 0x0065 };
	static uint32_t mathematical_double_struck_small_f [] = { 0x0066 };
	static uint32_t mathematical_double_struck_small_g [] = { 0x0067 };
	static uint32_t mathematical_double_struck_small_h [] = { 0x0068 };
	static uint32_t mathematical_double_struck_small_i [] = { 0x0069 };
	static uint32_t mathematical_double_struck_small_j [] = { 0x006A };
	static uint32_t mathematical_double_struck_small_k [] = { 0x006B };
	static uint32_t mathematical_double_struck_small_l [] = { 0x006C };
	static uint32_t mathematical_double_struck_small_m [] = { 0x006D };
	static uint32_t mathematical_double_struck_small_n [] = { 0x006E };
	static uint32_t mathematical_double_struck_small_o [] = { 0x006F };
	static uint32_t mathematical_double_struck_small_p [] = { 0x0070 };
	static uint32_t mathematical_double_struck_small_q [] = { 0x0071 };
	static uint32_t mathematical_double_struck_small_r [] = { 0x0072 };
	static uint32_t mathematical_double_struck_small_s [] = { 0x0073 };
	static uint32_t mathematical_double_struck_small_t [] = { 0x0074 };
	static uint32_t mathematical_double_struck_small_u [] = { 0x0075 };
	static uint32_t mathematical_double_struck_small_v [] = { 0x0076 };
	static uint32_t mathematical_double_struck_small_w [] = { 0x0077 };
	static uint32_t mathematical_double_struck_small_x [] = { 0x0078 };
	static uint32_t mathematical_double_struck_small_y [] = { 0x0079 };
	static uint32_t mathematical_double_struck_small_z [] = { 0x007A };
	static uint32_t mathematical_bold_fraktur_capital_a [] = { 0x0041 };
	static uint32_t mathematical_bold_fraktur_capital_b [] = { 0x0042 };
	static uint32_t mathematical_bold_fraktur_capital_c [] = { 0x0043 };
	static uint32_t mathematical_bold_fraktur_capital_d [] = { 0x0044 };
	static uint32_t mathematical_bold_fraktur_capital_e [] = { 0x0045 };
	static uint32_t mathematical_bold_fraktur_capital_f [] = { 0x0046 };
	static uint32_t mathematical_bold_fraktur_capital_g [] = { 0x0047 };
	static uint32_t mathematical_bold_fraktur_capital_h [] = { 0x0048 };
	static uint32_t mathematical_bold_fraktur_capital_i [] = { 0x0049 };
	static uint32_t mathematical_bold_fraktur_capital_j [] = { 0x004A };
	static uint32_t mathematical_bold_fraktur_capital_k [] = { 0x004B };
	static uint32_t mathematical_bold_fraktur_capital_l [] = { 0x004C };
	static uint32_t mathematical_bold_fraktur_capital_m [] = { 0x004D };
	static uint32_t mathematical_bold_fraktur_capital_n [] = { 0x004E };
	static uint32_t mathematical_bold_fraktur_capital_o [] = { 0x004F };
	static uint32_t mathematical_bold_fraktur_capital_p [] = { 0x0050 };
	static uint32_t mathematical_bold_fraktur_capital_q [] = { 0x0051 };
	static uint32_t mathematical_bold_fraktur_capital_r [] = { 0x0052 };
	static uint32_t mathematical_bold_fraktur_capital_s [] = { 0x0053 };
	static uint32_t mathematical_bold_fraktur_capital_t [] = { 0x0054 };
	static uint32_t mathematical_bold_fraktur_capital_u [] = { 0x0055 };
	static uint32_t mathematical_bold_fraktur_capital_v [] = { 0x0056 };
	static uint32_t mathematical_bold_fraktur_capital_w [] = { 0x0057 };
	static uint32_t mathematical_bold_fraktur_capital_x [] = { 0x0058 };
	static uint32_t mathematical_bold_fraktur_capital_y [] = { 0x0059 };
	static uint32_t mathematical_bold_fraktur_capital_z [] = { 0x005A };
	static uint32_t mathematical_bold_fraktur_small_a [] = { 0x0061 };
	static uint32_t mathematical_bold_fraktur_small_b [] = { 0x0062 };
	static uint32_t mathematical_bold_fraktur_small_c [] = { 0x0063 };
	static uint32_t mathematical_bold_fraktur_small_d [] = { 0x0064 };
	static uint32_t mathematical_bold_fraktur_small_e [] = { 0x0065 };
	static uint32_t mathematical_bold_fraktur_small_f [] = { 0x0066 };
	static uint32_t mathematical_bold_fraktur_small_g [] = { 0x0067 };
	static uint32_t mathematical_bold_fraktur_small_h [] = { 0x0068 };
	static uint32_t mathematical_bold_fraktur_small_i [] = { 0x0069 };
	static uint32_t mathematical_bold_fraktur_small_j [] = { 0x006A };
	static uint32_t mathematical_bold_fraktur_small_k [] = { 0x006B };
	static uint32_t mathematical_bold_fraktur_small_l [] = { 0x006C };
	static uint32_t mathematical_bold_fraktur_small_m [] = { 0x006D };
	static uint32_t mathematical_bold_fraktur_small_n [] = { 0x006E };
	static uint32_t mathematical_bold_fraktur_small_o [] = { 0x006F };
	static uint32_t mathematical_bold_fraktur_small_p [] = { 0x0070 };
	static uint32_t mathematical_bold_fraktur_small_q [] = { 0x0071 };
	static uint32_t mathematical_bold_fraktur_small_r [] = { 0x0072 };
	static uint32_t mathematical_bold_fraktur_small_s [] = { 0x0073 };
	static uint32_t mathematical_bold_fraktur_small_t [] = { 0x0074 };
	static uint32_t mathematical_bold_fraktur_small_u [] = { 0x0075 };
	static uint32_t mathematical_bold_fraktur_small_v [] = { 0x0076 };
	static uint32_t mathematical_bold_fraktur_small_w [] = { 0x0077 };
	static uint32_t mathematical_bold_fraktur_small_x [] = { 0x0078 };
	static uint32_t mathematical_bold_fraktur_small_y [] = { 0x0079 };
	static uint32_t mathematical_bold_fraktur_small_z [] = { 0x007A };
	static uint32_t mathematical_sans_serif_capital_a [] = { 0x0041 };
	static uint32_t mathematical_sans_serif_capital_b [] = { 0x0042 };
	static uint32_t mathematical_sans_serif_capital_c [] = { 0x0043 };
	static uint32_t mathematical_sans_serif_capital_d [] = { 0x0044 };
	static uint32_t mathematical_sans_serif_capital_e [] = { 0x0045 };
	static uint32_t mathematical_sans_serif_capital_f [] = { 0x0046 };
	static uint32_t mathematical_sans_serif_capital_g [] = { 0x0047 };
	static uint32_t mathematical_sans_serif_capital_h [] = { 0x0048 };
	static uint32_t mathematical_sans_serif_capital_i [] = { 0x0049 };
	static uint32_t mathematical_sans_serif_capital_j [] = { 0x004A };
	static uint32_t mathematical_sans_serif_capital_k [] = { 0x004B };
	static uint32_t mathematical_sans_serif_capital_l [] = { 0x004C };
	static uint32_t mathematical_sans_serif_capital_m [] = { 0x004D };
	static uint32_t mathematical_sans_serif_capital_n [] = { 0x004E };
	static uint32_t mathematical_sans_serif_capital_o [] = { 0x004F };
	static uint32_t mathematical_sans_serif_capital_p [] = { 0x0050 };
	static uint32_t mathematical_sans_serif_capital_q [] = { 0x0051 };
	static uint32_t mathematical_sans_serif_capital_r [] = { 0x0052 };
	static uint32_t mathematical_sans_serif_capital_s [] = { 0x0053 };
	static uint32_t mathematical_sans_serif_capital_t [] = { 0x0054 };
	static uint32_t mathematical_sans_serif_capital_u [] = { 0x0055 };
	static uint32_t mathematical_sans_serif_capital_v [] = { 0x0056 };
	static uint32_t mathematical_sans_serif_capital_w [] = { 0x0057 };
	static uint32_t mathematical_sans_serif_capital_x [] = { 0x0058 };
	static uint32_t mathematical_sans_serif_capital_y [] = { 0x0059 };
	static uint32_t mathematical_sans_serif_capital_z [] = { 0x005A };
	static uint32_t mathematical_sans_serif_small_a [] = { 0x0061 };
	static uint32_t mathematical_sans_serif_small_b [] = { 0x0062 };
	static uint32_t mathematical_sans_serif_small_c [] = { 0x0063 };
	static uint32_t mathematical_sans_serif_small_d [] = { 0x0064 };
	static uint32_t mathematical_sans_serif_small_e [] = { 0x0065 };
	static uint32_t mathematical_sans_serif_small_f [] = { 0x0066 };
	static uint32_t mathematical_sans_serif_small_g [] = { 0x0067 };
	static uint32_t mathematical_sans_serif_small_h [] = { 0x0068 };
	static uint32_t mathematical_sans_serif_small_i [] = { 0x0069 };
	static uint32_t mathematical_sans_serif_small_j [] = { 0x006A };
	static uint32_t mathematical_sans_serif_small_k [] = { 0x006B };
	static uint32_t mathematical_sans_serif_small_l [] = { 0x006C };
	static uint32_t mathematical_sans_serif_small_m [] = { 0x006D };
	static uint32_t mathematical_sans_serif_small_n [] = { 0x006E };
	static uint32_t mathematical_sans_serif_small_o [] = { 0x006F };
	static uint32_t mathematical_sans_serif_small_p [] = { 0x0070 };
	static uint32_t mathematical_sans_serif_small_q [] = { 0x0071 };
	static uint32_t mathematical_sans_serif_small_r [] = { 0x0072 };
	static uint32_t mathematical_sans_serif_small_s [] = { 0x0073 };
	static uint32_t mathematical_sans_serif_small_t [] = { 0x0074 };
	static uint32_t mathematical_sans_serif_small_u [] = { 0x0075 };
	static uint32_t mathematical_sans_serif_small_v [] = { 0x0076 };
	static uint32_t mathematical_sans_serif_small_w [] = { 0x0077 };
	static uint32_t mathematical_sans_serif_small_x [] = { 0x0078 };
	static uint32_t mathematical_sans_serif_small_y [] = { 0x0079 };
	static uint32_t mathematical_sans_serif_small_z [] = { 0x007A };
	static uint32_t mathematical_sans_serif_bold_capital_a [] = { 0x0041 };
	static uint32_t mathematical_sans_serif_bold_capital_b [] = { 0x0042 };
	static uint32_t mathematical_sans_serif_bold_capital_c [] = { 0x0043 };
	static uint32_t mathematical_sans_serif_bold_capital_d [] = { 0x0044 };
	static uint32_t mathematical_sans_serif_bold_capital_e [] = { 0x0045 };
	static uint32_t mathematical_sans_serif_bold_capital_f [] = { 0x0046 };
	static uint32_t mathematical_sans_serif_bold_capital_g [] = { 0x0047 };
	static uint32_t mathematical_sans_serif_bold_capital_h [] = { 0x0048 };
	static uint32_t mathematical_sans_serif_bold_capital_i [] = { 0x0049 };
	static uint32_t mathematical_sans_serif_bold_capital_j [] = { 0x004A };
	static uint32_t mathematical_sans_serif_bold_capital_k [] = { 0x004B };
	static uint32_t mathematical_sans_serif_bold_capital_l [] = { 0x004C };
	static uint32_t mathematical_sans_serif_bold_capital_m [] = { 0x004D };
	static uint32_t mathematical_sans_serif_bold_capital_n [] = { 0x004E };
	static uint32_t mathematical_sans_serif_bold_capital_o [] = { 0x004F };
	static uint32_t mathematical_sans_serif_bold_capital_p [] = { 0x0050 };
	static uint32_t mathematical_sans_serif_bold_capital_q [] = { 0x0051 };
	static uint32_t mathematical_sans_serif_bold_capital_r [] = { 0x0052 };
	static uint32_t mathematical_sans_serif_bold_capital_s [] = { 0x0053 };
	static uint32_t mathematical_sans_serif_bold_capital_t [] = { 0x0054 };
	static uint32_t mathematical_sans_serif_bold_capital_u [] = { 0x0055 };
	static uint32_t mathematical_sans_serif_bold_capital_v [] = { 0x0056 };
	static uint32_t mathematical_sans_serif_bold_capital_w [] = { 0x0057 };
	static uint32_t mathematical_sans_serif_bold_capital_x [] = { 0x0058 };
	static uint32_t mathematical_sans_serif_bold_capital_y [] = { 0x0059 };
	static uint32_t mathematical_sans_serif_bold_capital_z [] = { 0x005A };
	static uint32_t mathematical_sans_serif_bold_small_a [] = { 0x0061 };
	static uint32_t mathematical_sans_serif_bold_small_b [] = { 0x0062 };
	static uint32_t mathematical_sans_serif_bold_small_c [] = { 0x0063 };
	static uint32_t mathematical_sans_serif_bold_small_d [] = { 0x0064 };
	static uint32_t mathematical_sans_serif_bold_small_e [] = { 0x0065 };
	static uint32_t mathematical_sans_serif_bold_small_f [] = { 0x0066 };
	static uint32_t mathematical_sans_serif_bold_small_g [] = { 0x0067 };
	static uint32_t mathematical_sans_serif_bold_small_h [] = { 0x0068 };
	static uint32_t mathematical_sans_serif_bold_small_i [] = { 0x0069 };
	static uint32_t mathematical_sans_serif_bold_small_j [] = { 0x006A };
	static uint32_t mathematical_sans_serif_bold_small_k [] = { 0x006B };
	static uint32_t mathematical_sans_serif_bold_small_l [] = { 0x006C };
	static uint32_t mathematical_sans_serif_bold_small_m [] = { 0x006D };
	static uint32_t mathematical_sans_serif_bold_small_n [] = { 0x006E };
	static uint32_t mathematical_sans_serif_bold_small_o [] = { 0x006F };
	static uint32_t mathematical_sans_serif_bold_small_p [] = { 0x0070 };
	static uint32_t mathematical_sans_serif_bold_small_q [] = { 0x0071 };
	static uint32_t mathematical_sans_serif_bold_small_r [] = { 0x0072 };
	static uint32_t mathematical_sans_serif_bold_small_s [] = { 0x0073 };
	static uint32_t mathematical_sans_serif_bold_small_t [] = { 0x0074 };
	static uint32_t mathematical_sans_serif_bold_small_u [] = { 0x0075 };
	static uint32_t mathematical_sans_serif_bold_small_v [] = { 0x0076 };
	static uint32_t mathematical_sans_serif_bold_small_w [] = { 0x0077 };
	static uint32_t mathematical_sans_serif_bold_small_x [] = { 0x0078 };
	static uint32_t mathematical_sans_serif_bold_small_y [] = { 0x0079 };
	static uint32_t mathematical_sans_serif_bold_small_z [] = { 0x007A };
	static uint32_t mathematical_sans_serif_italic_capital_a [] = { 0x0041 };
	static uint32_t mathematical_sans_serif_italic_capital_b [] = { 0x0042 };
	static uint32_t mathematical_sans_serif_italic_capital_c [] = { 0x0043 };
	static uint32_t mathematical_sans_serif_italic_capital_d [] = { 0x0044 };
	static uint32_t mathematical_sans_serif_italic_capital_e [] = { 0x0045 };
	static uint32_t mathematical_sans_serif_italic_capital_f [] = { 0x0046 };
	static uint32_t mathematical_sans_serif_italic_capital_g [] = { 0x0047 };
	static uint32_t mathematical_sans_serif_italic_capital_h [] = { 0x0048 };
	static uint32_t mathematical_sans_serif_italic_capital_i [] = { 0x0049 };
	static uint32_t mathematical_sans_serif_italic_capital_j [] = { 0x004A };
	static uint32_t mathematical_sans_serif_italic_capital_k [] = { 0x004B };
	static uint32_t mathematical_sans_serif_italic_capital_l [] = { 0x004C };
	static uint32_t mathematical_sans_serif_italic_capital_m [] = { 0x004D };
	static uint32_t mathematical_sans_serif_italic_capital_n [] = { 0x004E };
	static uint32_t mathematical_sans_serif_italic_capital_o [] = { 0x004F };
	static uint32_t mathematical_sans_serif_italic_capital_p [] = { 0x0050 };
	static uint32_t mathematical_sans_serif_italic_capital_q [] = { 0x0051 };
	static uint32_t mathematical_sans_serif_italic_capital_r [] = { 0x0052 };
	static uint32_t mathematical_sans_serif_italic_capital_s [] = { 0x0053 };
	static uint32_t mathematical_sans_serif_italic_capital_t [] = { 0x0054 };
	static uint32_t mathematical_sans_serif_italic_capital_u [] = { 0x0055 };
	static uint32_t mathematical_sans_serif_italic_capital_v [] = { 0x0056 };
	static uint32_t mathematical_sans_serif_italic_capital_w [] = { 0x0057 };
	static uint32_t mathematical_sans_serif_italic_capital_x [] = { 0x0058 };
	static uint32_t mathematical_sans_serif_italic_capital_y [] = { 0x0059 };
	static uint32_t mathematical_sans_serif_italic_capital_z [] = { 0x005A };
	static uint32_t mathematical_sans_serif_italic_small_a [] = { 0x0061 };
	static uint32_t mathematical_sans_serif_italic_small_b [] = { 0x0062 };
	static uint32_t mathematical_sans_serif_italic_small_c [] = { 0x0063 };
	static uint32_t mathematical_sans_serif_italic_small_d [] = { 0x0064 };
	static uint32_t mathematical_sans_serif_italic_small_e [] = { 0x0065 };
	static uint32_t mathematical_sans_serif_italic_small_f [] = { 0x0066 };
	static uint32_t mathematical_sans_serif_italic_small_g [] = { 0x0067 };
	static uint32_t mathematical_sans_serif_italic_small_h [] = { 0x0068 };
	static uint32_t mathematical_sans_serif_italic_small_i [] = { 0x0069 };
	static uint32_t mathematical_sans_serif_italic_small_j [] = { 0x006A };
	static uint32_t mathematical_sans_serif_italic_small_k [] = { 0x006B };
	static uint32_t mathematical_sans_serif_italic_small_l [] = { 0x006C };
	static uint32_t mathematical_sans_serif_italic_small_m [] = { 0x006D };
	static uint32_t mathematical_sans_serif_italic_small_n [] = { 0x006E };
	static uint32_t mathematical_sans_serif_italic_small_o [] = { 0x006F };
	static uint32_t mathematical_sans_serif_italic_small_p [] = { 0x0070 };
	static uint32_t mathematical_sans_serif_italic_small_q [] = { 0x0071 };
	static uint32_t mathematical_sans_serif_italic_small_r [] = { 0x0072 };
	static uint32_t mathematical_sans_serif_italic_small_s [] = { 0x0073 };
	static uint32_t mathematical_sans_serif_italic_small_t [] = { 0x0074 };
	static uint32_t mathematical_sans_serif_italic_small_u [] = { 0x0075 };
	static uint32_t mathematical_sans_serif_italic_small_v [] = { 0x0076 };
	static uint32_t mathematical_sans_serif_italic_small_w [] = { 0x0077 };
	static uint32_t mathematical_sans_serif_italic_small_x [] = { 0x0078 };
	static uint32_t mathematical_sans_serif_italic_small_y [] = { 0x0079 };
	static uint32_t mathematical_sans_serif_italic_small_z [] = { 0x007A };
	static uint32_t mathematical_sans_serif_bold_italic_capital_a [] = { 0x0041 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_b [] = { 0x0042 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_c [] = { 0x0043 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_d [] = { 0x0044 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_e [] = { 0x0045 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_f [] = { 0x0046 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_g [] = { 0x0047 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_h [] = { 0x0048 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_i [] = { 0x0049 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_j [] = { 0x004A };
	static uint32_t mathematical_sans_serif_bold_italic_capital_k [] = { 0x004B };
	static uint32_t mathematical_sans_serif_bold_italic_capital_l [] = { 0x004C };
	static uint32_t mathematical_sans_serif_bold_italic_capital_m [] = { 0x004D };
	static uint32_t mathematical_sans_serif_bold_italic_capital_n [] = { 0x004E };
	static uint32_t mathematical_sans_serif_bold_italic_capital_o [] = { 0x004F };
	static uint32_t mathematical_sans_serif_bold_italic_capital_p [] = { 0x0050 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_q [] = { 0x0051 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_r [] = { 0x0052 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_s [] = { 0x0053 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_t [] = { 0x0054 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_u [] = { 0x0055 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_v [] = { 0x0056 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_w [] = { 0x0057 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_x [] = { 0x0058 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_y [] = { 0x0059 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_z [] = { 0x005A };
	static uint32_t mathematical_sans_serif_bold_italic_small_a [] = { 0x0061 };
	static uint32_t mathematical_sans_serif_bold_italic_small_b [] = { 0x0062 };
	static uint32_t mathematical_sans_serif_bold_italic_small_c [] = { 0x0063 };
	static uint32_t mathematical_sans_serif_bold_italic_small_d [] = { 0x0064 };
	static uint32_t mathematical_sans_serif_bold_italic_small_e [] = { 0x0065 };
	static uint32_t mathematical_sans_serif_bold_italic_small_f [] = { 0x0066 };
	static uint32_t mathematical_sans_serif_bold_italic_small_g [] = { 0x0067 };
	static uint32_t mathematical_sans_serif_bold_italic_small_h [] = { 0x0068 };
	static uint32_t mathematical_sans_serif_bold_italic_small_i [] = { 0x0069 };
	static uint32_t mathematical_sans_serif_bold_italic_small_j [] = { 0x006A };
	static uint32_t mathematical_sans_serif_bold_italic_small_k [] = { 0x006B };
	static uint32_t mathematical_sans_serif_bold_italic_small_l [] = { 0x006C };
	static uint32_t mathematical_sans_serif_bold_italic_small_m [] = { 0x006D };
	static uint32_t mathematical_sans_serif_bold_italic_small_n [] = { 0x006E };
	static uint32_t mathematical_sans_serif_bold_italic_small_o [] = { 0x006F };
	static uint32_t mathematical_sans_serif_bold_italic_small_p [] = { 0x0070 };
	static uint32_t mathematical_sans_serif_bold_italic_small_q [] = { 0x0071 };
	static uint32_t mathematical_sans_serif_bold_italic_small_r [] = { 0x0072 };
	static uint32_t mathematical_sans_serif_bold_italic_small_s [] = { 0x0073 };
	static uint32_t mathematical_sans_serif_bold_italic_small_t [] = { 0x0074 };
	static uint32_t mathematical_sans_serif_bold_italic_small_u [] = { 0x0075 };
	static uint32_t mathematical_sans_serif_bold_italic_small_v [] = { 0x0076 };
	static uint32_t mathematical_sans_serif_bold_italic_small_w [] = { 0x0077 };
	static uint32_t mathematical_sans_serif_bold_italic_small_x [] = { 0x0078 };
	static uint32_t mathematical_sans_serif_bold_italic_small_y [] = { 0x0079 };
	static uint32_t mathematical_sans_serif_bold_italic_small_z [] = { 0x007A };
	static uint32_t mathematical_monospace_capital_a [] = { 0x0041 };
	static uint32_t mathematical_monospace_capital_b [] = { 0x0042 };
	static uint32_t mathematical_monospace_capital_c [] = { 0x0043 };
	static uint32_t mathematical_monospace_capital_d [] = { 0x0044 };
	static uint32_t mathematical_monospace_capital_e [] = { 0x0045 };
	static uint32_t mathematical_monospace_capital_f [] = { 0x0046 };
	static uint32_t mathematical_monospace_capital_g [] = { 0x0047 };
	static uint32_t mathematical_monospace_capital_h [] = { 0x0048 };
	static uint32_t mathematical_monospace_capital_i [] = { 0x0049 };
	static uint32_t mathematical_monospace_capital_j [] = { 0x004A };
	static uint32_t mathematical_monospace_capital_k [] = { 0x004B };
	static uint32_t mathematical_monospace_capital_l [] = { 0x004C };
	static uint32_t mathematical_monospace_capital_m [] = { 0x004D };
	static uint32_t mathematical_monospace_capital_n [] = { 0x004E };
	static uint32_t mathematical_monospace_capital_o [] = { 0x004F };
	static uint32_t mathematical_monospace_capital_p [] = { 0x0050 };
	static uint32_t mathematical_monospace_capital_q [] = { 0x0051 };
	static uint32_t mathematical_monospace_capital_r [] = { 0x0052 };
	static uint32_t mathematical_monospace_capital_s [] = { 0x0053 };
	static uint32_t mathematical_monospace_capital_t [] = { 0x0054 };
	static uint32_t mathematical_monospace_capital_u [] = { 0x0055 };
	static uint32_t mathematical_monospace_capital_v [] = { 0x0056 };
	static uint32_t mathematical_monospace_capital_w [] = { 0x0057 };
	static uint32_t mathematical_monospace_capital_x [] = { 0x0058 };
	static uint32_t mathematical_monospace_capital_y [] = { 0x0059 };
	static uint32_t mathematical_monospace_capital_z [] = { 0x005A };
	static uint32_t mathematical_monospace_small_a [] = { 0x0061 };
	static uint32_t mathematical_monospace_small_b [] = { 0x0062 };
	static uint32_t mathematical_monospace_small_c [] = { 0x0063 };
	static uint32_t mathematical_monospace_small_d [] = { 0x0064 };
	static uint32_t mathematical_monospace_small_e [] = { 0x0065 };
	static uint32_t mathematical_monospace_small_f [] = { 0x0066 };
	static uint32_t mathematical_monospace_small_g [] = { 0x0067 };
	static uint32_t mathematical_monospace_small_h [] = { 0x0068 };
	static uint32_t mathematical_monospace_small_i [] = { 0x0069 };
	static uint32_t mathematical_monospace_small_j [] = { 0x006A };
	static uint32_t mathematical_monospace_small_k [] = { 0x006B };
	static uint32_t mathematical_monospace_small_l [] = { 0x006C };
	static uint32_t mathematical_monospace_small_m [] = { 0x006D };
	static uint32_t mathematical_monospace_small_n [] = { 0x006E };
	static uint32_t mathematical_monospace_small_o [] = { 0x006F };
	static uint32_t mathematical_monospace_small_p [] = { 0x0070 };
	static uint32_t mathematical_monospace_small_q [] = { 0x0071 };
	static uint32_t mathematical_monospace_small_r [] = { 0x0072 };
	static uint32_t mathematical_monospace_small_s [] = { 0x0073 };
	static uint32_t mathematical_monospace_small_t [] = { 0x0074 };
	static uint32_t mathematical_monospace_small_u [] = { 0x0075 };
	static uint32_t mathematical_monospace_small_v [] = { 0x0076 };
	static uint32_t mathematical_monospace_small_w [] = { 0x0077 };
	static uint32_t mathematical_monospace_small_x [] = { 0x0078 };
	static uint32_t mathematical_monospace_small_y [] = { 0x0079 };
	static uint32_t mathematical_monospace_small_z [] = { 0x007A };
	static uint32_t mathematical_italic_small_dotless_i [] = { 0x0131 };
	static uint32_t mathematical_italic_small_dotless_j [] = { 0x0237 };
	static uint32_t mathematical_bold_capital_alpha [] = { 0x0391 };
	static uint32_t mathematical_bold_capital_beta [] = { 0x0392 };
	static uint32_t mathematical_bold_capital_gamma [] = { 0x0393 };
	static uint32_t mathematical_bold_capital_delta [] = { 0x0394 };
	static uint32_t mathematical_bold_capital_epsilon [] = { 0x0395 };
	static uint32_t mathematical_bold_capital_zeta [] = { 0x0396 };
	static uint32_t mathematical_bold_capital_eta [] = { 0x0397 };
	static uint32_t mathematical_bold_capital_theta [] = { 0x0398 };
	static uint32_t mathematical_bold_capital_iota [] = { 0x0399 };
	static uint32_t mathematical_bold_capital_kappa [] = { 0x039A };
	static uint32_t mathematical_bold_capital_lamda [] = { 0x039B };
	static uint32_t mathematical_bold_capital_mu [] = { 0x039C };
	static uint32_t mathematical_bold_capital_nu [] = { 0x039D };
	static uint32_t mathematical_bold_capital_xi [] = { 0x039E };
	static uint32_t mathematical_bold_capital_omicron [] = { 0x039F };
	static uint32_t mathematical_bold_capital_pi [] = { 0x03A0 };
	static uint32_t mathematical_bold_capital_rho [] = { 0x03A1 };
	static uint32_t mathematical_bold_capital_theta_symbol [] = { 0x03F4 };
	static uint32_t mathematical_bold_capital_sigma [] = { 0x03A3 };
	static uint32_t mathematical_bold_capital_tau [] = { 0x03A4 };
	static uint32_t mathematical_bold_capital_upsilon [] = { 0x03A5 };
	static uint32_t mathematical_bold_capital_phi [] = { 0x03A6 };
	static uint32_t mathematical_bold_capital_chi [] = { 0x03A7 };
	static uint32_t mathematical_bold_capital_psi [] = { 0x03A8 };
	static uint32_t mathematical_bold_capital_omega [] = { 0x03A9 };
	static uint32_t mathematical_bold_nabla [] = { 0x2207 };
	static uint32_t mathematical_bold_small_alpha [] = { 0x03B1 };
	static uint32_t mathematical_bold_small_beta [] = { 0x03B2 };
	static uint32_t mathematical_bold_small_gamma [] = { 0x03B3 };
	static uint32_t mathematical_bold_small_delta [] = { 0x03B4 };
	static uint32_t mathematical_bold_small_epsilon [] = { 0x03B5 };
	static uint32_t mathematical_bold_small_zeta [] = { 0x03B6 };
	static uint32_t mathematical_bold_small_eta [] = { 0x03B7 };
	static uint32_t mathematical_bold_small_theta [] = { 0x03B8 };
	static uint32_t mathematical_bold_small_iota [] = { 0x03B9 };
	static uint32_t mathematical_bold_small_kappa [] = { 0x03BA };
	static uint32_t mathematical_bold_small_lamda [] = { 0x03BB };
	static uint32_t mathematical_bold_small_mu [] = { 0x03BC };
	static uint32_t mathematical_bold_small_nu [] = { 0x03BD };
	static uint32_t mathematical_bold_small_xi [] = { 0x03BE };
	static uint32_t mathematical_bold_small_omicron [] = { 0x03BF };
	static uint32_t mathematical_bold_small_pi [] = { 0x03C0 };
	static uint32_t mathematical_bold_small_rho [] = { 0x03C1 };
	static uint32_t mathematical_bold_small_final_sigma [] = { 0x03C2 };
	static uint32_t mathematical_bold_small_sigma [] = { 0x03C3 };
	static uint32_t mathematical_bold_small_tau [] = { 0x03C4 };
	static uint32_t mathematical_bold_small_upsilon [] = { 0x03C5 };
	static uint32_t mathematical_bold_small_phi [] = { 0x03C6 };
	static uint32_t mathematical_bold_small_chi [] = { 0x03C7 };
	static uint32_t mathematical_bold_small_psi [] = { 0x03C8 };
	static uint32_t mathematical_bold_small_omega [] = { 0x03C9 };
	static uint32_t mathematical_bold_partial_differential [] = { 0x2202 };
	static uint32_t mathematical_bold_epsilon_symbol [] = { 0x03F5 };
	static uint32_t mathematical_bold_theta_symbol [] = { 0x03D1 };
	static uint32_t mathematical_bold_kappa_symbol [] = { 0x03F0 };
	static uint32_t mathematical_bold_phi_symbol [] = { 0x03D5 };
	static uint32_t mathematical_bold_rho_symbol [] = { 0x03F1 };
	static uint32_t mathematical_bold_pi_symbol [] = { 0x03D6 };
	static uint32_t mathematical_italic_capital_alpha [] = { 0x0391 };
	static uint32_t mathematical_italic_capital_beta [] = { 0x0392 };
	static uint32_t mathematical_italic_capital_gamma [] = { 0x0393 };
	static uint32_t mathematical_italic_capital_delta [] = { 0x0394 };
	static uint32_t mathematical_italic_capital_epsilon [] = { 0x0395 };
	static uint32_t mathematical_italic_capital_zeta [] = { 0x0396 };
	static uint32_t mathematical_italic_capital_eta [] = { 0x0397 };
	static uint32_t mathematical_italic_capital_theta [] = { 0x0398 };
	static uint32_t mathematical_italic_capital_iota [] = { 0x0399 };
	static uint32_t mathematical_italic_capital_kappa [] = { 0x039A };
	static uint32_t mathematical_italic_capital_lamda [] = { 0x039B };
	static uint32_t mathematical_italic_capital_mu [] = { 0x039C };
	static uint32_t mathematical_italic_capital_nu [] = { 0x039D };
	static uint32_t mathematical_italic_capital_xi [] = { 0x039E };
	static uint32_t mathematical_italic_capital_omicron [] = { 0x039F };
	static uint32_t mathematical_italic_capital_pi [] = { 0x03A0 };
	static uint32_t mathematical_italic_capital_rho [] = { 0x03A1 };
	static uint32_t mathematical_italic_capital_theta_symbol [] = { 0x03F4 };
	static uint32_t mathematical_italic_capital_sigma [] = { 0x03A3 };
	static uint32_t mathematical_italic_capital_tau [] = { 0x03A4 };
	static uint32_t mathematical_italic_capital_upsilon [] = { 0x03A5 };
	static uint32_t mathematical_italic_capital_phi [] = { 0x03A6 };
	static uint32_t mathematical_italic_capital_chi [] = { 0x03A7 };
	static uint32_t mathematical_italic_capital_psi [] = { 0x03A8 };
	static uint32_t mathematical_italic_capital_omega [] = { 0x03A9 };
	static uint32_t mathematical_italic_nabla [] = { 0x2207 };
	static uint32_t mathematical_italic_small_alpha [] = { 0x03B1 };
	static uint32_t mathematical_italic_small_beta [] = { 0x03B2 };
	static uint32_t mathematical_italic_small_gamma [] = { 0x03B3 };
	static uint32_t mathematical_italic_small_delta [] = { 0x03B4 };
	static uint32_t mathematical_italic_small_epsilon [] = { 0x03B5 };
	static uint32_t mathematical_italic_small_zeta [] = { 0x03B6 };
	static uint32_t mathematical_italic_small_eta [] = { 0x03B7 };
	static uint32_t mathematical_italic_small_theta [] = { 0x03B8 };
	static uint32_t mathematical_italic_small_iota [] = { 0x03B9 };
	static uint32_t mathematical_italic_small_kappa [] = { 0x03BA };
	static uint32_t mathematical_italic_small_lamda [] = { 0x03BB };
	static uint32_t mathematical_italic_small_mu [] = { 0x03BC };
	static uint32_t mathematical_italic_small_nu [] = { 0x03BD };
	static uint32_t mathematical_italic_small_xi [] = { 0x03BE };
	static uint32_t mathematical_italic_small_omicron [] = { 0x03BF };
	static uint32_t mathematical_italic_small_pi [] = { 0x03C0 };
	static uint32_t mathematical_italic_small_rho [] = { 0x03C1 };
	static uint32_t mathematical_italic_small_final_sigma [] = { 0x03C2 };
	static uint32_t mathematical_italic_small_sigma [] = { 0x03C3 };
	static uint32_t mathematical_italic_small_tau [] = { 0x03C4 };
	static uint32_t mathematical_italic_small_upsilon [] = { 0x03C5 };
	static uint32_t mathematical_italic_small_phi [] = { 0x03C6 };
	static uint32_t mathematical_italic_small_chi [] = { 0x03C7 };
	static uint32_t mathematical_italic_small_psi [] = { 0x03C8 };
	static uint32_t mathematical_italic_small_omega [] = { 0x03C9 };
	static uint32_t mathematical_italic_partial_differential [] = { 0x2202 };
	static uint32_t mathematical_italic_epsilon_symbol [] = { 0x03F5 };
	static uint32_t mathematical_italic_theta_symbol [] = { 0x03D1 };
	static uint32_t mathematical_italic_kappa_symbol [] = { 0x03F0 };
	static uint32_t mathematical_italic_phi_symbol [] = { 0x03D5 };
	static uint32_t mathematical_italic_rho_symbol [] = { 0x03F1 };
	static uint32_t mathematical_italic_pi_symbol [] = { 0x03D6 };
	static uint32_t mathematical_bold_italic_capital_alpha [] = { 0x0391 };
	static uint32_t mathematical_bold_italic_capital_beta [] = { 0x0392 };
	static uint32_t mathematical_bold_italic_capital_gamma [] = { 0x0393 };
	static uint32_t mathematical_bold_italic_capital_delta [] = { 0x0394 };
	static uint32_t mathematical_bold_italic_capital_epsilon [] = { 0x0395 };
	static uint32_t mathematical_bold_italic_capital_zeta [] = { 0x0396 };
	static uint32_t mathematical_bold_italic_capital_eta [] = { 0x0397 };
	static uint32_t mathematical_bold_italic_capital_theta [] = { 0x0398 };
	static uint32_t mathematical_bold_italic_capital_iota [] = { 0x0399 };
	static uint32_t mathematical_bold_italic_capital_kappa [] = { 0x039A };
	static uint32_t mathematical_bold_italic_capital_lamda [] = { 0x039B };
	static uint32_t mathematical_bold_italic_capital_mu [] = { 0x039C };
	static uint32_t mathematical_bold_italic_capital_nu [] = { 0x039D };
	static uint32_t mathematical_bold_italic_capital_xi [] = { 0x039E };
	static uint32_t mathematical_bold_italic_capital_omicron [] = { 0x039F };
	static uint32_t mathematical_bold_italic_capital_pi [] = { 0x03A0 };
	static uint32_t mathematical_bold_italic_capital_rho [] = { 0x03A1 };
	static uint32_t mathematical_bold_italic_capital_theta_symbol [] = { 0x03F4 };
	static uint32_t mathematical_bold_italic_capital_sigma [] = { 0x03A3 };
	static uint32_t mathematical_bold_italic_capital_tau [] = { 0x03A4 };
	static uint32_t mathematical_bold_italic_capital_upsilon [] = { 0x03A5 };
	static uint32_t mathematical_bold_italic_capital_phi [] = { 0x03A6 };
	static uint32_t mathematical_bold_italic_capital_chi [] = { 0x03A7 };
	static uint32_t mathematical_bold_italic_capital_psi [] = { 0x03A8 };
	static uint32_t mathematical_bold_italic_capital_omega [] = { 0x03A9 };
	static uint32_t mathematical_bold_italic_nabla [] = { 0x2207 };
	static uint32_t mathematical_bold_italic_small_alpha [] = { 0x03B1 };
	static uint32_t mathematical_bold_italic_small_beta [] = { 0x03B2 };
	static uint32_t mathematical_bold_italic_small_gamma [] = { 0x03B3 };
	static uint32_t mathematical_bold_italic_small_delta [] = { 0x03B4 };
	static uint32_t mathematical_bold_italic_small_epsilon [] = { 0x03B5 };
	static uint32_t mathematical_bold_italic_small_zeta [] = { 0x03B6 };
	static uint32_t mathematical_bold_italic_small_eta [] = { 0x03B7 };
	static uint32_t mathematical_bold_italic_small_theta [] = { 0x03B8 };
	static uint32_t mathematical_bold_italic_small_iota [] = { 0x03B9 };
	static uint32_t mathematical_bold_italic_small_kappa [] = { 0x03BA };
	static uint32_t mathematical_bold_italic_small_lamda [] = { 0x03BB };
	static uint32_t mathematical_bold_italic_small_mu [] = { 0x03BC };
	static uint32_t mathematical_bold_italic_small_nu [] = { 0x03BD };
	static uint32_t mathematical_bold_italic_small_xi [] = { 0x03BE };
	static uint32_t mathematical_bold_italic_small_omicron [] = { 0x03BF };
	static uint32_t mathematical_bold_italic_small_pi [] = { 0x03C0 };
	static uint32_t mathematical_bold_italic_small_rho [] = { 0x03C1 };
	static uint32_t mathematical_bold_italic_small_final_sigma [] = { 0x03C2 };
	static uint32_t mathematical_bold_italic_small_sigma [] = { 0x03C3 };
	static uint32_t mathematical_bold_italic_small_tau [] = { 0x03C4 };
	static uint32_t mathematical_bold_italic_small_upsilon [] = { 0x03C5 };
	static uint32_t mathematical_bold_italic_small_phi [] = { 0x03C6 };
	static uint32_t mathematical_bold_italic_small_chi [] = { 0x03C7 };
	static uint32_t mathematical_bold_italic_small_psi [] = { 0x03C8 };
	static uint32_t mathematical_bold_italic_small_omega [] = { 0x03C9 };
	static uint32_t mathematical_bold_italic_partial_differential [] = { 0x2202 };
	static uint32_t mathematical_bold_italic_epsilon_symbol [] = { 0x03F5 };
	static uint32_t mathematical_bold_italic_theta_symbol [] = { 0x03D1 };
	static uint32_t mathematical_bold_italic_kappa_symbol [] = { 0x03F0 };
	static uint32_t mathematical_bold_italic_phi_symbol [] = { 0x03D5 };
	static uint32_t mathematical_bold_italic_rho_symbol [] = { 0x03F1 };
	static uint32_t mathematical_bold_italic_pi_symbol [] = { 0x03D6 };
	static uint32_t mathematical_sans_serif_bold_capital_alpha [] = { 0x0391 };
	static uint32_t mathematical_sans_serif_bold_capital_beta [] = { 0x0392 };
	static uint32_t mathematical_sans_serif_bold_capital_gamma [] = { 0x0393 };
	static uint32_t mathematical_sans_serif_bold_capital_delta [] = { 0x0394 };
	static uint32_t mathematical_sans_serif_bold_capital_epsilon [] = { 0x0395 };
	static uint32_t mathematical_sans_serif_bold_capital_zeta [] = { 0x0396 };
	static uint32_t mathematical_sans_serif_bold_capital_eta [] = { 0x0397 };
	static uint32_t mathematical_sans_serif_bold_capital_theta [] = { 0x0398 };
	static uint32_t mathematical_sans_serif_bold_capital_iota [] = { 0x0399 };
	static uint32_t mathematical_sans_serif_bold_capital_kappa [] = { 0x039A };
	static uint32_t mathematical_sans_serif_bold_capital_lamda [] = { 0x039B };
	static uint32_t mathematical_sans_serif_bold_capital_mu [] = { 0x039C };
	static uint32_t mathematical_sans_serif_bold_capital_nu [] = { 0x039D };
	static uint32_t mathematical_sans_serif_bold_capital_xi [] = { 0x039E };
	static uint32_t mathematical_sans_serif_bold_capital_omicron [] = { 0x039F };
	static uint32_t mathematical_sans_serif_bold_capital_pi [] = { 0x03A0 };
	static uint32_t mathematical_sans_serif_bold_capital_rho [] = { 0x03A1 };
	static uint32_t mathematical_sans_serif_bold_capital_theta_symbol [] = { 0x03F4 };
	static uint32_t mathematical_sans_serif_bold_capital_sigma [] = { 0x03A3 };
	static uint32_t mathematical_sans_serif_bold_capital_tau [] = { 0x03A4 };
	static uint32_t mathematical_sans_serif_bold_capital_upsilon [] = { 0x03A5 };
	static uint32_t mathematical_sans_serif_bold_capital_phi [] = { 0x03A6 };
	static uint32_t mathematical_sans_serif_bold_capital_chi [] = { 0x03A7 };
	static uint32_t mathematical_sans_serif_bold_capital_psi [] = { 0x03A8 };
	static uint32_t mathematical_sans_serif_bold_capital_omega [] = { 0x03A9 };
	static uint32_t mathematical_sans_serif_bold_nabla [] = { 0x2207 };
	static uint32_t mathematical_sans_serif_bold_small_alpha [] = { 0x03B1 };
	static uint32_t mathematical_sans_serif_bold_small_beta [] = { 0x03B2 };
	static uint32_t mathematical_sans_serif_bold_small_gamma [] = { 0x03B3 };
	static uint32_t mathematical_sans_serif_bold_small_delta [] = { 0x03B4 };
	static uint32_t mathematical_sans_serif_bold_small_epsilon [] = { 0x03B5 };
	static uint32_t mathematical_sans_serif_bold_small_zeta [] = { 0x03B6 };
	static uint32_t mathematical_sans_serif_bold_small_eta [] = { 0x03B7 };
	static uint32_t mathematical_sans_serif_bold_small_theta [] = { 0x03B8 };
	static uint32_t mathematical_sans_serif_bold_small_iota [] = { 0x03B9 };
	static uint32_t mathematical_sans_serif_bold_small_kappa [] = { 0x03BA };
	static uint32_t mathematical_sans_serif_bold_small_lamda [] = { 0x03BB };
	static uint32_t mathematical_sans_serif_bold_small_mu [] = { 0x03BC };
	static uint32_t mathematical_sans_serif_bold_small_nu [] = { 0x03BD };
	static uint32_t mathematical_sans_serif_bold_small_xi [] = { 0x03BE };
	static uint32_t mathematical_sans_serif_bold_small_omicron [] = { 0x03BF };
	static uint32_t mathematical_sans_serif_bold_small_pi [] = { 0x03C0 };
	static uint32_t mathematical_sans_serif_bold_small_rho [] = { 0x03C1 };
	static uint32_t mathematical_sans_serif_bold_small_final_sigma [] = { 0x03C2 };
	static uint32_t mathematical_sans_serif_bold_small_sigma [] = { 0x03C3 };
	static uint32_t mathematical_sans_serif_bold_small_tau [] = { 0x03C4 };
	static uint32_t mathematical_sans_serif_bold_small_upsilon [] = { 0x03C5 };
	static uint32_t mathematical_sans_serif_bold_small_phi [] = { 0x03C6 };
	static uint32_t mathematical_sans_serif_bold_small_chi [] = { 0x03C7 };
	static uint32_t mathematical_sans_serif_bold_small_psi [] = { 0x03C8 };
	static uint32_t mathematical_sans_serif_bold_small_omega [] = { 0x03C9 };
	static uint32_t mathematical_sans_serif_bold_partial_differential [] = { 0x2202 };
	static uint32_t mathematical_sans_serif_bold_epsilon_symbol [] = { 0x03F5 };
	static uint32_t mathematical_sans_serif_bold_theta_symbol [] = { 0x03D1 };
	static uint32_t mathematical_sans_serif_bold_kappa_symbol [] = { 0x03F0 };
	static uint32_t mathematical_sans_serif_bold_phi_symbol [] = { 0x03D5 };
	static uint32_t mathematical_sans_serif_bold_rho_symbol [] = { 0x03F1 };
	static uint32_t mathematical_sans_serif_bold_pi_symbol [] = { 0x03D6 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_alpha [] = { 0x0391 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_beta [] = { 0x0392 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_gamma [] = { 0x0393 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_delta [] = { 0x0394 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_epsilon [] = { 0x0395 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_zeta [] = { 0x0396 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_eta [] = { 0x0397 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_theta [] = { 0x0398 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_iota [] = { 0x0399 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_kappa [] = { 0x039A };
	static uint32_t mathematical_sans_serif_bold_italic_capital_lamda [] = { 0x039B };
	static uint32_t mathematical_sans_serif_bold_italic_capital_mu [] = { 0x039C };
	static uint32_t mathematical_sans_serif_bold_italic_capital_nu [] = { 0x039D };
	static uint32_t mathematical_sans_serif_bold_italic_capital_xi [] = { 0x039E };
	static uint32_t mathematical_sans_serif_bold_italic_capital_omicron [] = { 0x039F };
	static uint32_t mathematical_sans_serif_bold_italic_capital_pi [] = { 0x03A0 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_rho [] = { 0x03A1 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_theta_symbol [] = { 0x03F4 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_sigma [] = { 0x03A3 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_tau [] = { 0x03A4 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_upsilon [] = { 0x03A5 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_phi [] = { 0x03A6 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_chi [] = { 0x03A7 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_psi [] = { 0x03A8 };
	static uint32_t mathematical_sans_serif_bold_italic_capital_omega [] = { 0x03A9 };
	static uint32_t mathematical_sans_serif_bold_italic_nabla [] = { 0x2207 };
	static uint32_t mathematical_sans_serif_bold_italic_small_alpha [] = { 0x03B1 };
	static uint32_t mathematical_sans_serif_bold_italic_small_beta [] = { 0x03B2 };
	static uint32_t mathematical_sans_serif_bold_italic_small_gamma [] = { 0x03B3 };
	static uint32_t mathematical_sans_serif_bold_italic_small_delta [] = { 0x03B4 };
	static uint32_t mathematical_sans_serif_bold_italic_small_epsilon [] = { 0x03B5 };
	static uint32_t mathematical_sans_serif_bold_italic_small_zeta [] = { 0x03B6 };
	static uint32_t mathematical_sans_serif_bold_italic_small_eta [] = { 0x03B7 };
	static uint32_t mathematical_sans_serif_bold_italic_small_theta [] = { 0x03B8 };
	static uint32_t mathematical_sans_serif_bold_italic_small_iota [] = { 0x03B9 };
	static uint32_t mathematical_sans_serif_bold_italic_small_kappa [] = { 0x03BA };
	static uint32_t mathematical_sans_serif_bold_italic_small_lamda [] = { 0x03BB };
	static uint32_t mathematical_sans_serif_bold_italic_small_mu [] = { 0x03BC };
	static uint32_t mathematical_sans_serif_bold_italic_small_nu [] = { 0x03BD };
	static uint32_t mathematical_sans_serif_bold_italic_small_xi [] = { 0x03BE };
	static uint32_t mathematical_sans_serif_bold_italic_small_omicron [] = { 0x03BF };
	static uint32_t mathematical_sans_serif_bold_italic_small_pi [] = { 0x03C0 };
	static uint32_t mathematical_sans_serif_bold_italic_small_rho [] = { 0x03C1 };
	static uint32_t mathematical_sans_serif_bold_italic_small_final_sigma [] = { 0x03C2 };
	static uint32_t mathematical_sans_serif_bold_italic_small_sigma [] = { 0x03C3 };
	static uint32_t mathematical_sans_serif_bold_italic_small_tau [] = { 0x03C4 };
	static uint32_t mathematical_sans_serif_bold_italic_small_upsilon [] = { 0x03C5 };
	static uint32_t mathematical_sans_serif_bold_italic_small_phi [] = { 0x03C6 };
	static uint32_t mathematical_sans_serif_bold_italic_small_chi [] = { 0x03C7 };
	static uint32_t mathematical_sans_serif_bold_italic_small_psi [] = { 0x03C8 };
	static uint32_t mathematical_sans_serif_bold_italic_small_omega [] = { 0x03C9 };
	static uint32_t mathematical_sans_serif_bold_italic_partial_differential [] = { 0x2202 };
	static uint32_t mathematical_sans_serif_bold_italic_epsilon_symbol [] = { 0x03F5 };
	static uint32_t mathematical_sans_serif_bold_italic_theta_symbol [] = { 0x03D1 };
	static uint32_t mathematical_sans_serif_bold_italic_kappa_symbol [] = { 0x03F0 };
	static uint32_t mathematical_sans_serif_bold_italic_phi_symbol [] = { 0x03D5 };
	static uint32_t mathematical_sans_serif_bold_italic_rho_symbol [] = { 0x03F1 };
	static uint32_t mathematical_sans_serif_bold_italic_pi_symbol [] = { 0x03D6 };
	static uint32_t mathematical_bold_capital_digamma [] = { 0x03DC };
	static uint32_t mathematical_bold_small_digamma [] = { 0x03DD };
	static uint32_t mathematical_bold_digit_zero [] = { 0x0030 };
	static uint32_t mathematical_bold_digit_one [] = { 0x0031 };
	static uint32_t mathematical_bold_digit_two [] = { 0x0032 };
	static uint32_t mathematical_bold_digit_three [] = { 0x0033 };
	static uint32_t mathematical_bold_digit_four [] = { 0x0034 };
	static uint32_t mathematical_bold_digit_five [] = { 0x0035 };
	static uint32_t mathematical_bold_digit_six [] = { 0x0036 };
	static uint32_t mathematical_bold_digit_seven [] = { 0x0037 };
	static uint32_t mathematical_bold_digit_eight [] = { 0x0038 };
	static uint32_t mathematical_bold_digit_nine [] = { 0x0039 };
	static uint32_t mathematical_double_struck_digit_zero [] = { 0x0030 };
	static uint32_t mathematical_double_struck_digit_one [] = { 0x0031 };
	static uint32_t mathematical_double_struck_digit_two [] = { 0x0032 };
	static uint32_t mathematical_double_struck_digit_three [] = { 0x0033 };
	static uint32_t mathematical_double_struck_digit_four [] = { 0x0034 };
	static uint32_t mathematical_double_struck_digit_five [] = { 0x0035 };
	static uint32_t mathematical_double_struck_digit_six [] = { 0x0036 };
	static uint32_t mathematical_double_struck_digit_seven [] = { 0x0037 };
	static uint32_t mathematical_double_struck_digit_eight [] = { 0x0038 };
	static uint32_t mathematical_double_struck_digit_nine [] = { 0x0039 };
	static uint32_t mathematical_sans_serif_digit_zero [] = { 0x0030 };
	static uint32_t mathematical_sans_serif_digit_one [] = { 0x0031 };
	static uint32_t mathematical_sans_serif_digit_two [] = { 0x0032 };
	static uint32_t mathematical_sans_serif_digit_three [] = { 0x0033 };
	static uint32_t mathematical_sans_serif_digit_four [] = { 0x0034 };
	static uint32_t mathematical_sans_serif_digit_five [] = { 0x0035 };
	static uint32_t mathematical_sans_serif_digit_six [] = { 0x0036 };
	static uint32_t mathematical_sans_serif_digit_seven [] = { 0x0037 };
	static uint32_t mathematical_sans_serif_digit_eight [] = { 0x0038 };
	static uint32_t mathematical_sans_serif_digit_nine [] = { 0x0039 };
	static uint32_t mathematical_sans_serif_bold_digit_zero [] = { 0x0030 };
	static uint32_t mathematical_sans_serif_bold_digit_one [] = { 0x0031 };
	static uint32_t mathematical_sans_serif_bold_digit_two [] = { 0x0032 };
	static uint32_t mathematical_sans_serif_bold_digit_three [] = { 0x0033 };
	static uint32_t mathematical_sans_serif_bold_digit_four [] = { 0x0034 };
	static uint32_t mathematical_sans_serif_bold_digit_five [] = { 0x0035 };
	static uint32_t mathematical_sans_serif_bold_digit_six [] = { 0x0036 };
	static uint32_t mathematical_sans_serif_bold_digit_seven [] = { 0x0037 };
	static uint32_t mathematical_sans_serif_bold_digit_eight [] = { 0x0038 };
	static uint32_t mathematical_sans_serif_bold_digit_nine [] = { 0x0039 };
	static uint32_t mathematical_monospace_digit_zero [] = { 0x0030 };
	static uint32_t mathematical_monospace_digit_one [] = { 0x0031 };
	static uint32_t mathematical_monospace_digit_two [] = { 0x0032 };
	static uint32_t mathematical_monospace_digit_three [] = { 0x0033 };
	static uint32_t mathematical_monospace_digit_four [] = { 0x0034 };
	static uint32_t mathematical_monospace_digit_five [] = { 0x0035 };
	static uint32_t mathematical_monospace_digit_six [] = { 0x0036 };
	static uint32_t mathematical_monospace_digit_seven [] = { 0x0037 };
	static uint32_t mathematical_monospace_digit_eight [] = { 0x0038 };
	static uint32_t mathematical_monospace_digit_nine [] = { 0x0039 };
	static uint32_t arabic_mathematical_alef [] = { 0x0627 };
	static uint32_t arabic_mathematical_beh [] = { 0x0628 };
	static uint32_t arabic_mathematical_jeem [] = { 0x062C };
	static uint32_t arabic_mathematical_dal [] = { 0x062F };
	static uint32_t arabic_mathematical_waw [] = { 0x0648 };
	static uint32_t arabic_mathematical_zain [] = { 0x0632 };
	static uint32_t arabic_mathematical_hah [] = { 0x062D };
	static uint32_t arabic_mathematical_tah [] = { 0x0637 };
	static uint32_t arabic_mathematical_yeh [] = { 0x064A };
	static uint32_t arabic_mathematical_kaf [] = { 0x0643 };
	static uint32_t arabic_mathematical_lam [] = { 0x0644 };
	static uint32_t arabic_mathematical_meem [] = { 0x0645 };
	static uint32_t arabic_mathematical_noon [] = { 0x0646 };
	static uint32_t arabic_mathematical_seen [] = { 0x0633 };
	static uint32_t arabic_mathematical_ain [] = { 0x0639 };
	static uint32_t arabic_mathematical_feh [] = { 0x0641 };
	static uint32_t arabic_mathematical_sad [] = { 0x0635 };
	static uint32_t arabic_mathematical_qaf [] = { 0x0642 };
	static uint32_t arabic_mathematical_reh [] = { 0x0631 };
	static uint32_t arabic_mathematical_sheen [] = { 0x0634 };
	static uint32_t arabic_mathematical_teh [] = { 0x062A };
	static uint32_t arabic_mathematical_theh [] = { 0x062B };
	static uint32_t arabic_mathematical_khah [] = { 0x062E };
	static uint32_t arabic_mathematical_thal [] = { 0x0630 };
	static uint32_t arabic_mathematical_dad [] = { 0x0636 };
	static uint32_t arabic_mathematical_zah [] = { 0x0638 };
	static uint32_t arabic_mathematical_ghain [] = { 0x063A };
	static uint32_t arabic_mathematical_dotless_beh [] = { 0x066E };
	static uint32_t arabic_mathematical_dotless_noon [] = { 0x06BA };
	static uint32_t arabic_mathematical_dotless_feh [] = { 0x06A1 };
	static uint32_t arabic_mathematical_dotless_qaf [] = { 0x066F };
	static uint32_t arabic_mathematical_initial_beh [] = { 0x0628 };
	static uint32_t arabic_mathematical_initial_jeem [] = { 0x062C };
	static uint32_t arabic_mathematical_initial_heh [] = { 0x0647 };
	static uint32_t arabic_mathematical_initial_hah [] = { 0x062D };
	static uint32_t arabic_mathematical_initial_yeh [] = { 0x064A };
	static uint32_t arabic_mathematical_initial_kaf [] = { 0x0643 };
	static uint32_t arabic_mathematical_initial_lam [] = { 0x0644 };
	static uint32_t arabic_mathematical_initial_meem [] = { 0x0645 };
	static uint32_t arabic_mathematical_initial_noon [] = { 0x0646 };
	static uint32_t arabic_mathematical_initial_seen [] = { 0x0633 };
	static uint32_t arabic_mathematical_initial_ain [] = { 0x0639 };
	static uint32_t arabic_mathematical_initial_feh [] = { 0x0641 };
	static uint32_t arabic_mathematical_initial_sad [] = { 0x0635 };
	static uint32_t arabic_mathematical_initial_qaf [] = { 0x0642 };
	static uint32_t arabic_mathematical_initial_sheen [] = { 0x0634 };
	static uint32_t arabic_mathematical_initial_teh [] = { 0x062A };
	static uint32_t arabic_mathematical_initial_theh [] = { 0x062B };
	static uint32_t arabic_mathematical_initial_khah [] = { 0x062E };
	static uint32_t arabic_mathematical_initial_dad [] = { 0x0636 };
	static uint32_t arabic_mathematical_initial_ghain [] = { 0x063A };
	static uint32_t arabic_mathematical_tailed_jeem [] = { 0x062C };
	static uint32_t arabic_mathematical_tailed_hah [] = { 0x062D };
	static uint32_t arabic_mathematical_tailed_yeh [] = { 0x064A };
	static uint32_t arabic_mathematical_tailed_lam [] = { 0x0644 };
	static uint32_t arabic_mathematical_tailed_noon [] = { 0x0646 };
	static uint32_t arabic_mathematical_tailed_seen [] = { 0x0633 };
	static uint32_t arabic_mathematical_tailed_ain [] = { 0x0639 };
	static uint32_t arabic_mathematical_tailed_sad [] = { 0x0635 };
	static uint32_t arabic_mathematical_tailed_qaf [] = { 0x0642 };
	static uint32_t arabic_mathematical_tailed_sheen [] = { 0x0634 };
	static uint32_t arabic_mathematical_tailed_khah [] = { 0x062E };
	static uint32_t arabic_mathematical_tailed_dad [] = { 0x0636 };
	static uint32_t arabic_mathematical_tailed_ghain [] = { 0x063A };
	static uint32_t arabic_mathematical_tailed_dotless_noon [] = { 0x06BA };
	static uint32_t arabic_mathematical_tailed_dotless_qaf [] = { 0x066F };
	static uint32_t arabic_mathematical_stretched_beh [] = { 0x0628 };
	static uint32_t arabic_mathematical_stretched_jeem [] = { 0x062C };
	static uint32_t arabic_mathematical_stretched_heh [] = { 0x0647 };
	static uint32_t arabic_mathematical_stretched_hah [] = { 0x062D };
	static uint32_t arabic_mathematical_stretched_tah [] = { 0x0637 };
	static uint32_t arabic_mathematical_stretched_yeh [] = { 0x064A };
	static uint32_t arabic_mathematical_stretched_kaf [] = { 0x0643 };
	static uint32_t arabic_mathematical_stretched_meem [] = { 0x0645 };
	static uint32_t arabic_mathematical_stretched_noon [] = { 0x0646 };
	static uint32_t arabic_mathematical_stretched_seen [] = { 0x0633 };
	static uint32_t arabic_mathematical_stretched_ain [] = { 0x0639 };
	static uint32_t arabic_mathematical_stretched_feh [] = { 0x0641 };
	static uint32_t arabic_mathematical_stretched_sad [] = { 0x0635 };
	static uint32_t arabic_mathematical_stretched_qaf [] = { 0x0642 };
	static uint32_t arabic_mathematical_stretched_sheen [] = { 0x0634 };
	static uint32_t arabic_mathematical_stretched_teh [] = { 0x062A };
	static uint32_t arabic_mathematical_stretched_theh [] = { 0x062B };
	static uint32_t arabic_mathematical_stretched_khah [] = { 0x062E };
	static uint32_t arabic_mathematical_stretched_dad [] = { 0x0636 };
	static uint32_t arabic_mathematical_stretched_zah [] = { 0x0638 };
	static uint32_t arabic_mathematical_stretched_ghain [] = { 0x063A };
	static uint32_t arabic_mathematical_stretched_dotless_beh [] = { 0x066E };
	static uint32_t arabic_mathematical_stretched_dotless_feh [] = { 0x06A1 };
	static uint32_t arabic_mathematical_looped_alef [] = { 0x0627 };
	static uint32_t arabic_mathematical_looped_beh [] = { 0x0628 };
	static uint32_t arabic_mathematical_looped_jeem [] = { 0x062C };
	static uint32_t arabic_mathematical_looped_dal [] = { 0x062F };
	static uint32_t arabic_mathematical_looped_heh [] = { 0x0647 };
	static uint32_t arabic_mathematical_looped_waw [] = { 0x0648 };
	static uint32_t arabic_mathematical_looped_zain [] = { 0x0632 };
	static uint32_t arabic_mathematical_looped_hah [] = { 0x062D };
	static uint32_t arabic_mathematical_looped_tah [] = { 0x0637 };
	static uint32_t arabic_mathematical_looped_yeh [] = { 0x064A };
	static uint32_t arabic_mathematical_looped_lam [] = { 0x0644 };
	static uint32_t arabic_mathematical_looped_meem [] = { 0x0645 };
	static uint32_t arabic_mathematical_looped_noon [] = { 0x0646 };
	static uint32_t arabic_mathematical_looped_seen [] = { 0x0633 };
	static uint32_t arabic_mathematical_looped_ain [] = { 0x0639 };
	static uint32_t arabic_mathematical_looped_feh [] = { 0x0641 };
	static uint32_t arabic_mathematical_looped_sad [] = { 0x0635 };
	static uint32_t arabic_mathematical_looped_qaf [] = { 0x0642 };
	static uint32_t arabic_mathematical_looped_reh [] = { 0x0631 };
	static uint32_t arabic_mathematical_looped_sheen [] = { 0x0634 };
	static uint32_t arabic_mathematical_looped_teh [] = { 0x062A };
	static uint32_t arabic_mathematical_looped_theh [] = { 0x062B };
	static uint32_t arabic_mathematical_looped_khah [] = { 0x062E };
	static uint32_t arabic_mathematical_looped_thal [] = { 0x0630 };
	static uint32_t arabic_mathematical_looped_dad [] = { 0x0636 };
	static uint32_t arabic_mathematical_looped_zah [] = { 0x0638 };
	static uint32_t arabic_mathematical_looped_ghain [] = { 0x063A };
	static uint32_t arabic_mathematical_double_struck_beh [] = { 0x0628 };
	static uint32_t arabic_mathematical_double_struck_jeem [] = { 0x062C };
	static uint32_t arabic_mathematical_double_struck_dal [] = { 0x062F };
	static uint32_t arabic_mathematical_double_struck_waw [] = { 0x0648 };
	static uint32_t arabic_mathematical_double_struck_zain [] = { 0x0632 };
	static uint32_t arabic_mathematical_double_struck_hah [] = { 0x062D };
	static uint32_t arabic_mathematical_double_struck_tah [] = { 0x0637 };
	static uint32_t arabic_mathematical_double_struck_yeh [] = { 0x064A };
	static uint32_t arabic_mathematical_double_struck_lam [] = { 0x0644 };
	static uint32_t arabic_mathematical_double_struck_meem [] = { 0x0645 };
	static uint32_t arabic_mathematical_double_struck_noon [] = { 0x0646 };
	static uint32_t arabic_mathematical_double_struck_seen [] = { 0x0633 };
	static uint32_t arabic_mathematical_double_struck_ain [] = { 0x0639 };
	static uint32_t arabic_mathematical_double_struck_feh [] = { 0x0641 };
	static uint32_t arabic_mathematical_double_struck_sad [] = { 0x0635 };
	static uint32_t arabic_mathematical_double_struck_qaf [] = { 0x0642 };
	static uint32_t arabic_mathematical_double_struck_reh [] = { 0x0631 };
	static uint32_t arabic_mathematical_double_struck_sheen [] = { 0x0634 };
	static uint32_t arabic_mathematical_double_struck_teh [] = { 0x062A };
	static uint32_t arabic_mathematical_double_struck_theh [] = { 0x062B };
	static uint32_t arabic_mathematical_double_struck_khah [] = { 0x062E };
	static uint32_t arabic_mathematical_double_struck_thal [] = { 0x0630 };
	static uint32_t arabic_mathematical_double_struck_dad [] = { 0x0636 };
	static uint32_t arabic_mathematical_double_struck_zah [] = { 0x0638 };
	static uint32_t arabic_mathematical_double_struck_ghain [] = { 0x063A };
	static uint32_t digit_zero_full_stop [] = { 0x0030, 0x002E };
	static uint32_t digit_zero_comma [] = { 0x0030, 0x002C };
	static uint32_t digit_one_comma [] = { 0x0031, 0x002C };
	static uint32_t digit_two_comma [] = { 0x0032, 0x002C };
	static uint32_t digit_three_comma [] = { 0x0033, 0x002C };
	static uint32_t digit_four_comma [] = { 0x0034, 0x002C };
	static uint32_t digit_five_comma [] = { 0x0035, 0x002C };
	static uint32_t digit_six_comma [] = { 0x0036, 0x002C };
	static uint32_t digit_seven_comma [] = { 0x0037, 0x002C };
	static uint32_t digit_eight_comma [] = { 0x0038, 0x002C };
	static uint32_t digit_nine_comma [] = { 0x0039, 0x002C };
	static uint32_t parenthesized_latin_capital_letter_a [] = { 0x0028, 0x0041, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_b [] = { 0x0028, 0x0042, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_c [] = { 0x0028, 0x0043, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_d [] = { 0x0028, 0x0044, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_e [] = { 0x0028, 0x0045, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_f [] = { 0x0028, 0x0046, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_g [] = { 0x0028, 0x0047, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_h [] = { 0x0028, 0x0048, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_i [] = { 0x0028, 0x0049, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_j [] = { 0x0028, 0x004A, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_k [] = { 0x0028, 0x004B, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_l [] = { 0x0028, 0x004C, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_m [] = { 0x0028, 0x004D, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_n [] = { 0x0028, 0x004E, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_o [] = { 0x0028, 0x004F, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_p [] = { 0x0028, 0x0050, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_q [] = { 0x0028, 0x0051, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_r [] = { 0x0028, 0x0052, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_s [] = { 0x0028, 0x0053, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_t [] = { 0x0028, 0x0054, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_u [] = { 0x0028, 0x0055, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_v [] = { 0x0028, 0x0056, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_w [] = { 0x0028, 0x0057, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_x [] = { 0x0028, 0x0058, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_y [] = { 0x0028, 0x0059, 0x0029 };
	static uint32_t parenthesized_latin_capital_letter_z [] = { 0x0028, 0x005A, 0x0029 };
	static uint32_t tortoise_shell_bracketed_latin_capital_letter_s [] = { 0x3014, 0x0053, 0x3015 };
	static uint32_t circled_italic_latin_capital_letter_c [] = { 0x0043 };
	static uint32_t circled_italic_latin_capital_letter_r [] = { 0x0052 };
	static uint32_t circled_cd [] = { 0x0043, 0x0044 };
	static uint32_t circled_wz [] = { 0x0057, 0x005A };
	static uint32_t squared_latin_capital_letter_a [] = { 0x0041 };
	static uint32_t squared_latin_capital_letter_b [] = { 0x0042 };
	static uint32_t squared_latin_capital_letter_c [] = { 0x0043 };
	static uint32_t squared_latin_capital_letter_d [] = { 0x0044 };
	static uint32_t squared_latin_capital_letter_e [] = { 0x0045 };
	static uint32_t squared_latin_capital_letter_f [] = { 0x0046 };
	static uint32_t squared_latin_capital_letter_g [] = { 0x0047 };
	static uint32_t squared_latin_capital_letter_h [] = { 0x0048 };
	static uint32_t squared_latin_capital_letter_i [] = { 0x0049 };
	static uint32_t squared_latin_capital_letter_j [] = { 0x004A };
	static uint32_t squared_latin_capital_letter_k [] = { 0x004B };
	static uint32_t squared_latin_capital_letter_l [] = { 0x004C };
	static uint32_t squared_latin_capital_letter_m [] = { 0x004D };
	static uint32_t squared_latin_capital_letter_n [] = { 0x004E };
	static uint32_t squared_latin_capital_letter_o [] = { 0x004F };
	static uint32_t squared_latin_capital_letter_p [] = { 0x0050 };
	static uint32_t squared_latin_capital_letter_q [] = { 0x0051 };
	static uint32_t squared_latin_capital_letter_r [] = { 0x0052 };
	static uint32_t squared_latin_capital_letter_s [] = { 0x0053 };
	static uint32_t squared_latin_capital_letter_t [] = { 0x0054 };
	static uint32_t squared_latin_capital_letter_u [] = { 0x0055 };
	static uint32_t squared_latin_capital_letter_v [] = { 0x0056 };
	static uint32_t squared_latin_capital_letter_w [] = { 0x0057 };
	static uint32_t squared_latin_capital_letter_x [] = { 0x0058 };
	static uint32_t squared_latin_capital_letter_y [] = { 0x0059 };
	static uint32_t squared_latin_capital_letter_z [] = { 0x005A };
	static uint32_t squared_hv [] = { 0x0048, 0x0056 };
	static uint32_t squared_mv [] = { 0x004D, 0x0056 };
	static uint32_t squared_sd [] = { 0x0053, 0x0044 };
	static uint32_t squared_ss [] = { 0x0053, 0x0053 };
	static uint32_t squared_ppv [] = { 0x0050, 0x0050, 0x0056 };
	static uint32_t squared_wc [] = { 0x0057, 0x0043 };
	static uint32_t raised_mc_sign [] = { 0x004D, 0x0043 };
	static uint32_t raised_md_sign [] = { 0x004D, 0x0044 };
	static uint32_t raised_mr_sign [] = { 0x004D, 0x0052 };
	static uint32_t square_dj [] = { 0x0044, 0x004A };
	static uint32_t square_hiragana_hoka [] = { 0x307B, 0x304B };
	static uint32_t squared_katakana_koko [] = { 0x30B3, 0x30B3 };
	static uint32_t squared_katakana_sa [] = { 0x30B5 };
	static uint32_t squared_cjk_unified_ideograph_624b [] = { 0x624B };
	static uint32_t squared_cjk_unified_ideograph_5b57 [] = { 0x5B57 };
	static uint32_t squared_cjk_unified_ideograph_53cc [] = { 0x53CC };
	static uint32_t squared_katakana_de [] = { 0x30C7 };
	static uint32_t squared_cjk_unified_ideograph_4e8c [] = { 0x4E8C };
	static uint32_t squared_cjk_unified_ideograph_591a [] = { 0x591A };
	static uint32_t squared_cjk_unified_ideograph_89e3 [] = { 0x89E3 };
	static uint32_t squared_cjk_unified_ideograph_5929 [] = { 0x5929 };
	static uint32_t squared_cjk_unified_ideograph_4ea4 [] = { 0x4EA4 };
	static uint32_t squared_cjk_unified_ideograph_6620 [] = { 0x6620 };
	static uint32_t squared_cjk_unified_ideograph_7121 [] = { 0x7121 };
	static uint32_t squared_cjk_unified_ideograph_6599 [] = { 0x6599 };
	static uint32_t squared_cjk_unified_ideograph_524d [] = { 0x524D };
	static uint32_t squared_cjk_unified_ideograph_5f8c [] = { 0x5F8C };
	static uint32_t squared_cjk_unified_ideograph_518d [] = { 0x518D };
	static uint32_t squared_cjk_unified_ideograph_65b0 [] = { 0x65B0 };
	static uint32_t squared_cjk_unified_ideograph_521d [] = { 0x521D };
	static uint32_t squared_cjk_unified_ideograph_7d42 [] = { 0x7D42 };
	static uint32_t squared_cjk_unified_ideograph_751f [] = { 0x751F };
	static uint32_t squared_cjk_unified_ideograph_8ca9 [] = { 0x8CA9 };
	static uint32_t squared_cjk_unified_ideograph_58f0 [] = { 0x58F0 };
	static uint32_t squared_cjk_unified_ideograph_5439 [] = { 0x5439 };
	static uint32_t squared_cjk_unified_ideograph_6f14 [] = { 0x6F14 };
	static uint32_t squared_cjk_unified_ideograph_6295 [] = { 0x6295 };
	static uint32_t squared_cjk_unified_ideograph_6355 [] = { 0x6355 };
	static uint32_t squared_cjk_unified_ideograph_4e00 [] = { 0x4E00 };
	static uint32_t squared_cjk_unified_ideograph_4e09 [] = { 0x4E09 };
	static uint32_t squared_cjk_unified_ideograph_904a [] = { 0x904A };
	static uint32_t squared_cjk_unified_ideograph_5de6 [] = { 0x5DE6 };
	static uint32_t squared_cjk_unified_ideograph_4e2d [] = { 0x4E2D };
	static uint32_t squared_cjk_unified_ideograph_53f3 [] = { 0x53F3 };
	static uint32_t squared_cjk_unified_ideograph_6307 [] = { 0x6307 };
	static uint32_t squared_cjk_unified_ideograph_8d70 [] = { 0x8D70 };
	static uint32_t squared_cjk_unified_ideograph_6253 [] = { 0x6253 };
	static uint32_t squared_cjk_unified_ideograph_7981 [] = { 0x7981 };
	static uint32_t squared_cjk_unified_ideograph_7a7a [] = { 0x7A7A };
	static uint32_t squared_cjk_unified_ideograph_5408 [] = { 0x5408 };
	static uint32_t squared_cjk_unified_ideograph_6e80 [] = { 0x6E80 };
	static uint32_t squared_cjk_unified_ideograph_6709 [] = { 0x6709 };
	static uint32_t squared_cjk_unified_ideograph_6708 [] = { 0x6708 };
	static uint32_t squared_cjk_unified_ideograph_7533 [] = { 0x7533 };
	static uint32_t squared_cjk_unified_ideograph_5272 [] = { 0x5272 };
	static uint32_t squared_cjk_unified_ideograph_55b6 [] = { 0x55B6 };
	static uint32_t squared_cjk_unified_ideograph_914d [] = { 0x914D };
	static uint32_t tortoise_shell_bracketed_cjk_unified_ideograph_672c [] = { 0x3014, 0x672C, 0x3015 };
	static uint32_t tortoise_shell_bracketed_cjk_unified_ideograph_4e09 [] = { 0x3014, 0x4E09, 0x3015 };
	static uint32_t tortoise_shell_bracketed_cjk_unified_ideograph_4e8c [] = { 0x3014, 0x4E8C, 0x3015 };
	static uint32_t tortoise_shell_bracketed_cjk_unified_ideograph_5b89 [] = { 0x3014, 0x5B89, 0x3015 };
	static uint32_t tortoise_shell_bracketed_cjk_unified_ideograph_70b9 [] = { 0x3014, 0x70B9, 0x3015 };
	static uint32_t tortoise_shell_bracketed_cjk_unified_ideograph_6253 [] = { 0x3014, 0x6253, 0x3015 };
	static uint32_t tortoise_shell_bracketed_cjk_unified_ideograph_76d7 [] = { 0x3014, 0x76D7, 0x3015 };
	static uint32_t tortoise_shell_bracketed_cjk_unified_ideograph_52dd [] = { 0x3014, 0x52DD, 0x3015 };
	static uint32_t tortoise_shell_bracketed_cjk_unified_ideograph_6557 [] = { 0x3014, 0x6557, 0x3015 };
	static uint32_t circled_ideograph_advantage [] = { 0x5F97 };
	static uint32_t circled_ideograph_accept [] = { 0x53EF };
	static uint32_t segmented_digit_zero [] = { 0x0030 };
	static uint32_t segmented_digit_one [] = { 0x0031 };
	static uint32_t segmented_digit_two [] = { 0x0032 };
	static uint32_t segmented_digit_three [] = { 0x0033 };
	static uint32_t segmented_digit_four [] = { 0x0034 };
	static uint32_t segmented_digit_five [] = { 0x0035 };
	static uint32_t segmented_digit_six [] = { 0x0036 };
	static uint32_t segmented_digit_seven [] = { 0x0037 };
	static uint32_t segmented_digit_eight [] = { 0x0038 };
	static uint32_t segmented_digit_nine [] = { 0x0039 };
	static uint32_t cjk_compatibility_ideograph_2f800 [] = { 0x4E3D };
	static uint32_t cjk_compatibility_ideograph_2f801 [] = { 0x4E38 };
	static uint32_t cjk_compatibility_ideograph_2f802 [] = { 0x4E41 };
	static uint32_t cjk_compatibility_ideograph_2f803 [] = { 0x20122 };
	static uint32_t cjk_compatibility_ideograph_2f804 [] = { 0x4F60 };
	static uint32_t cjk_compatibility_ideograph_2f805 [] = { 0x4FAE };
	static uint32_t cjk_compatibility_ideograph_2f806 [] = { 0x4FBB };
	static uint32_t cjk_compatibility_ideograph_2f807 [] = { 0x5002 };
	static uint32_t cjk_compatibility_ideograph_2f808 [] = { 0x507A };
	static uint32_t cjk_compatibility_ideograph_2f809 [] = { 0x5099 };
	static uint32_t cjk_compatibility_ideograph_2f80a [] = { 0x50E7 };
	static uint32_t cjk_compatibility_ideograph_2f80b [] = { 0x50CF };
	static uint32_t cjk_compatibility_ideograph_2f80c [] = { 0x349E };
	static uint32_t cjk_compatibility_ideograph_2f80d [] = { 0x2063A };
	static uint32_t cjk_compatibility_ideograph_2f80e [] = { 0x514D };
	static uint32_t cjk_compatibility_ideograph_2f80f [] = { 0x5154 };
	static uint32_t cjk_compatibility_ideograph_2f810 [] = { 0x5164 };
	static uint32_t cjk_compatibility_ideograph_2f811 [] = { 0x5177 };
	static uint32_t cjk_compatibility_ideograph_2f812 [] = { 0x2051C };
	static uint32_t cjk_compatibility_ideograph_2f813 [] = { 0x34B9 };
	static uint32_t cjk_compatibility_ideograph_2f814 [] = { 0x5167 };
	static uint32_t cjk_compatibility_ideograph_2f815 [] = { 0x518D };
	static uint32_t cjk_compatibility_ideograph_2f816 [] = { 0x2054B };
	static uint32_t cjk_compatibility_ideograph_2f817 [] = { 0x5197 };
	static uint32_t cjk_compatibility_ideograph_2f818 [] = { 0x51A4 };
	static uint32_t cjk_compatibility_ideograph_2f819 [] = { 0x4ECC };
	static uint32_t cjk_compatibility_ideograph_2f81a [] = { 0x51AC };
	static uint32_t cjk_compatibility_ideograph_2f81b [] = { 0x51B5 };
	static uint32_t cjk_compatibility_ideograph_2f81c [] = { 0x291DF };
	static uint32_t cjk_compatibility_ideograph_2f81d [] = { 0x51F5 };
	static uint32_t cjk_compatibility_ideograph_2f81e [] = { 0x5203 };
	static uint32_t cjk_compatibility_ideograph_2f81f [] = { 0x34DF };
	static uint32_t cjk_compatibility_ideograph_2f820 [] = { 0x523B };
	static uint32_t cjk_compatibility_ideograph_2f821 [] = { 0x5246 };
	static uint32_t cjk_compatibility_ideograph_2f822 [] = { 0x5272 };
	static uint32_t cjk_compatibility_ideograph_2f823 [] = { 0x5277 };
	static uint32_t cjk_compatibility_ideograph_2f824 [] = { 0x3515 };
	static uint32_t cjk_compatibility_ideograph_2f825 [] = { 0x52C7 };
	static uint32_t cjk_compatibility_ideograph_2f826 [] = { 0x52C9 };
	static uint32_t cjk_compatibility_ideograph_2f827 [] = { 0x52E4 };
	static uint32_t cjk_compatibility_ideograph_2f828 [] = { 0x52FA };
	static uint32_t cjk_compatibility_ideograph_2f829 [] = { 0x5305 };
	static uint32_t cjk_compatibility_ideograph_2f82a [] = { 0x5306 };
	static uint32_t cjk_compatibility_ideograph_2f82b [] = { 0x5317 };
	static uint32_t cjk_compatibility_ideograph_2f82c [] = { 0x5349 };
	static uint32_t cjk_compatibility_ideograph_2f82d [] = { 0x5351 };
	static uint32_t cjk_compatibility_ideograph_2f82e [] = { 0x535A };
	static uint32_t cjk_compatibility_ideograph_2f82f [] = { 0x5373 };
	static uint32_t cjk_compatibility_ideograph_2f830 [] = { 0x537D };
	static uint32_t cjk_compatibility_ideograph_2f831 [] = { 0x537F };
	static uint32_t cjk_compatibility_ideograph_2f832 [] = { 0x537F };
	static uint32_t cjk_compatibility_ideograph_2f833 [] = { 0x537F };
	static uint32_t cjk_compatibility_ideograph_2f834 [] = { 0x20A2C };
	static uint32_t cjk_compatibility_ideograph_2f835 [] = { 0x7070 };
	static uint32_t cjk_compatibility_ideograph_2f836 [] = { 0x53CA };
	static uint32_t cjk_compatibility_ideograph_2f837 [] = { 0x53DF };
	static uint32_t cjk_compatibility_ideograph_2f838 [] = { 0x20B63 };
	static uint32_t cjk_compatibility_ideograph_2f839 [] = { 0x53EB };
	static uint32_t cjk_compatibility_ideograph_2f83a [] = { 0x53F1 };
	static uint32_t cjk_compatibility_ideograph_2f83b [] = { 0x5406 };
	static uint32_t cjk_compatibility_ideograph_2f83c [] = { 0x549E };
	static uint32_t cjk_compatibility_ideograph_2f83d [] = { 0x5438 };
	static uint32_t cjk_compatibility_ideograph_2f83e [] = { 0x5448 };
	static uint32_t cjk_compatibility_ideograph_2f83f [] = { 0x5468 };
	static uint32_t cjk_compatibility_ideograph_2f840 [] = { 0x54A2 };
	static uint32_t cjk_compatibility_ideograph_2f841 [] = { 0x54F6 };
	static uint32_t cjk_compatibility_ideograph_2f842 [] = { 0x5510 };
	static uint32_t cjk_compatibility_ideograph_2f843 [] = { 0x5553 };
	static uint32_t cjk_compatibility_ideograph_2f844 [] = { 0x5563 };
	static uint32_t cjk_compatibility_ideograph_2f845 [] = { 0x5584 };
	static uint32_t cjk_compatibility_ideograph_2f846 [] = { 0x5584 };
	static uint32_t cjk_compatibility_ideograph_2f847 [] = { 0x5599 };
	static uint32_t cjk_compatibility_ideograph_2f848 [] = { 0x55AB };
	static uint32_t cjk_compatibility_ideograph_2f849 [] = { 0x55B3 };
	static uint32_t cjk_compatibility_ideograph_2f84a [] = { 0x55C2 };
	static uint32_t cjk_compatibility_ideograph_2f84b [] = { 0x5716 };
	static uint32_t cjk_compatibility_ideograph_2f84c [] = { 0x5606 };
	static uint32_t cjk_compatibility_ideograph_2f84d [] = { 0x5717 };
	static uint32_t cjk_compatibility_ideograph_2f84e [] = { 0x5651 };
	static uint32_t cjk_compatibility_ideograph_2f84f [] = { 0x5674 };
	static uint32_t cjk_compatibility_ideograph_2f850 [] = { 0x5207 };
	static uint32_t cjk_compatibility_ideograph_2f851 [] = { 0x58EE };
	static uint32_t cjk_compatibility_ideograph_2f852 [] = { 0x57CE };
	static uint32_t cjk_compatibility_ideograph_2f853 [] = { 0x57F4 };
	static uint32_t cjk_compatibility_ideograph_2f854 [] = { 0x580D };
	static uint32_t cjk_compatibility_ideograph_2f855 [] = { 0x578B };
	static uint32_t cjk_compatibility_ideograph_2f856 [] = { 0x5832 };
	static uint32_t cjk_compatibility_ideograph_2f857 [] = { 0x5831 };
	static uint32_t cjk_compatibility_ideograph_2f858 [] = { 0x58AC };
	static uint32_t cjk_compatibility_ideograph_2f859 [] = { 0x214E4 };
	static uint32_t cjk_compatibility_ideograph_2f85a [] = { 0x58F2 };
	static uint32_t cjk_compatibility_ideograph_2f85b [] = { 0x58F7 };
	static uint32_t cjk_compatibility_ideograph_2f85c [] = { 0x5906 };
	static uint32_t cjk_compatibility_ideograph_2f85d [] = { 0x591A };
	static uint32_t cjk_compatibility_ideograph_2f85e [] = { 0x5922 };
	static uint32_t cjk_compatibility_ideograph_2f85f [] = { 0x5962 };
	static uint32_t cjk_compatibility_ideograph_2f860 [] = { 0x216A8 };
	static uint32_t cjk_compatibility_ideograph_2f861 [] = { 0x216EA };
	static uint32_t cjk_compatibility_ideograph_2f862 [] = { 0x59EC };
	static uint32_t cjk_compatibility_ideograph_2f863 [] = { 0x5A1B };
	static uint32_t cjk_compatibility_ideograph_2f864 [] = { 0x5A27 };
	static uint32_t cjk_compatibility_ideograph_2f865 [] = { 0x59D8 };
	static uint32_t cjk_compatibility_ideograph_2f866 [] = { 0x5A66 };
	static uint32_t cjk_compatibility_ideograph_2f867 [] = { 0x36EE };
	static uint32_t cjk_compatibility_ideograph_2f868 [] = { 0x36FC };
	static uint32_t cjk_compatibility_ideograph_2f869 [] = { 0x5B08 };
	static uint32_t cjk_compatibility_ideograph_2f86a [] = { 0x5B3E };
	static uint32_t cjk_compatibility_ideograph_2f86b [] = { 0x5B3E };
	static uint32_t cjk_compatibility_ideograph_2f86c [] = { 0x219C8 };
	static uint32_t cjk_compatibility_ideograph_2f86d [] = { 0x5BC3 };
	static uint32_t cjk_compatibility_ideograph_2f86e [] = { 0x5BD8 };
	static uint32_t cjk_compatibility_ideograph_2f86f [] = { 0x5BE7 };
	static uint32_t cjk_compatibility_ideograph_2f870 [] = { 0x5BF3 };
	static uint32_t cjk_compatibility_ideograph_2f871 [] = { 0x21B18 };
	static uint32_t cjk_compatibility_ideograph_2f872 [] = { 0x5BFF };
	static uint32_t cjk_compatibility_ideograph_2f873 [] = { 0x5C06 };
	static uint32_t cjk_compatibility_ideograph_2f874 [] = { 0x5F53 };
	static uint32_t cjk_compatibility_ideograph_2f875 [] = { 0x5C22 };
	static uint32_t cjk_compatibility_ideograph_2f876 [] = { 0x3781 };
	static uint32_t cjk_compatibility_ideograph_2f877 [] = { 0x5C60 };
	static uint32_t cjk_compatibility_ideograph_2f878 [] = { 0x5C6E };
	static uint32_t cjk_compatibility_ideograph_2f879 [] = { 0x5CC0 };
	static uint32_t cjk_compatibility_ideograph_2f87a [] = { 0x5C8D };
	static uint32_t cjk_compatibility_ideograph_2f87b [] = { 0x21DE4 };
	static uint32_t cjk_compatibility_ideograph_2f87c [] = { 0x5D43 };
	static uint32_t cjk_compatibility_ideograph_2f87d [] = { 0x21DE6 };
	static uint32_t cjk_compatibility_ideograph_2f87e [] = { 0x5D6E };
	static uint32_t cjk_compatibility_ideograph_2f87f [] = { 0x5D6B };
	static uint32_t cjk_compatibility_ideograph_2f880 [] = { 0x5D7C };
	static uint32_t cjk_compatibility_ideograph_2f881 [] = { 0x5DE1 };
	static uint32_t cjk_compatibility_ideograph_2f882 [] = { 0x5DE2 };
	static uint32_t cjk_compatibility_ideograph_2f883 [] = { 0x382F };
	static uint32_t cjk_compatibility_ideograph_2f884 [] = { 0x5DFD };
	static uint32_t cjk_compatibility_ideograph_2f885 [] = { 0x5E28 };
	static uint32_t cjk_compatibility_ideograph_2f886 [] = { 0x5E3D };
	static uint32_t cjk_compatibility_ideograph_2f887 [] = { 0x5E69 };
	static uint32_t cjk_compatibility_ideograph_2f888 [] = { 0x3862 };
	static uint32_t cjk_compatibility_ideograph_2f889 [] = { 0x22183 };
	static uint32_t cjk_compatibility_ideograph_2f88a [] = { 0x387C };
	static uint32_t cjk_compatibility_ideograph_2f88b [] = { 0x5EB0 };
	static uint32_t cjk_compatibility_ideograph_2f88c [] = { 0x5EB3 };
	static uint32_t cjk_compatibility_ideograph_2f88d [] = { 0x5EB6 };
	static uint32_t cjk_compatibility_ideograph_2f88e [] = { 0x5ECA };
	static uint32_t cjk_compatibility_ideograph_2f88f [] = { 0x2A392 };
	static uint32_t cjk_compatibility_ideograph_2f890 [] = { 0x5EFE };
	static uint32_t cjk_compatibility_ideograph_2f891 [] = { 0x22331 };
	static uint32_t cjk_compatibility_ideograph_2f892 [] = { 0x22331 };
	static uint32_t cjk_compatibility_ideograph_2f893 [] = { 0x8201 };
	static uint32_t cjk_compatibility_ideograph_2f894 [] = { 0x5F22 };
	static uint32_t cjk_compatibility_ideograph_2f895 [] = { 0x5F22 };
	static uint32_t cjk_compatibility_ideograph_2f896 [] = { 0x38C7 };
	static uint32_t cjk_compatibility_ideograph_2f897 [] = { 0x232B8 };
	static uint32_t cjk_compatibility_ideograph_2f898 [] = { 0x261DA };
	static uint32_t cjk_compatibility_ideograph_2f899 [] = { 0x5F62 };
	static uint32_t cjk_compatibility_ideograph_2f89a [] = { 0x5F6B };
	static uint32_t cjk_compatibility_ideograph_2f89b [] = { 0x38E3 };
	static uint32_t cjk_compatibility_ideograph_2f89c [] = { 0x5F9A };
	static uint32_t cjk_compatibility_ideograph_2f89d [] = { 0x5FCD };
	static uint32_t cjk_compatibility_ideograph_2f89e [] = { 0x5FD7 };
	static uint32_t cjk_compatibility_ideograph_2f89f [] = { 0x5FF9 };
	static uint32_t cjk_compatibility_ideograph_2f8a0 [] = { 0x6081 };
	static uint32_t cjk_compatibility_ideograph_2f8a1 [] = { 0x393A };
	static uint32_t cjk_compatibility_ideograph_2f8a2 [] = { 0x391C };
	static uint32_t cjk_compatibility_ideograph_2f8a3 [] = { 0x6094 };
	static uint32_t cjk_compatibility_ideograph_2f8a4 [] = { 0x226D4 };
	static uint32_t cjk_compatibility_ideograph_2f8a5 [] = { 0x60C7 };
	static uint32_t cjk_compatibility_ideograph_2f8a6 [] = { 0x6148 };
	static uint32_t cjk_compatibility_ideograph_2f8a7 [] = { 0x614C };
	static uint32_t cjk_compatibility_ideograph_2f8a8 [] = { 0x614E };
	static uint32_t cjk_compatibility_ideograph_2f8a9 [] = { 0x614C };
	static uint32_t cjk_compatibility_ideograph_2f8aa [] = { 0x617A };
	static uint32_t cjk_compatibility_ideograph_2f8ab [] = { 0x618E };
	static uint32_t cjk_compatibility_ideograph_2f8ac [] = { 0x61B2 };
	static uint32_t cjk_compatibility_ideograph_2f8ad [] = { 0x61A4 };
	static uint32_t cjk_compatibility_ideograph_2f8ae [] = { 0x61AF };
	static uint32_t cjk_compatibility_ideograph_2f8af [] = { 0x61DE };
	static uint32_t cjk_compatibility_ideograph_2f8b0 [] = { 0x61F2 };
	static uint32_t cjk_compatibility_ideograph_2f8b1 [] = { 0x61F6 };
	static uint32_t cjk_compatibility_ideograph_2f8b2 [] = { 0x6210 };
	static uint32_t cjk_compatibility_ideograph_2f8b3 [] = { 0x621B };
	static uint32_t cjk_compatibility_ideograph_2f8b4 [] = { 0x625D };
	static uint32_t cjk_compatibility_ideograph_2f8b5 [] = { 0x62B1 };
	static uint32_t cjk_compatibility_ideograph_2f8b6 [] = { 0x62D4 };
	static uint32_t cjk_compatibility_ideograph_2f8b7 [] = { 0x6350 };
	static uint32_t cjk_compatibility_ideograph_2f8b8 [] = { 0x22B0C };
	static uint32_t cjk_compatibility_ideograph_2f8b9 [] = { 0x633D };
	static uint32_t cjk_compatibility_ideograph_2f8ba [] = { 0x62FC };
	static uint32_t cjk_compatibility_ideograph_2f8bb [] = { 0x6368 };
	static uint32_t cjk_compatibility_ideograph_2f8bc [] = { 0x6383 };
	static uint32_t cjk_compatibility_ideograph_2f8bd [] = { 0x63E4 };
	static uint32_t cjk_compatibility_ideograph_2f8be [] = { 0x22BF1 };
	static uint32_t cjk_compatibility_ideograph_2f8bf [] = { 0x6422 };
	static uint32_t cjk_compatibility_ideograph_2f8c0 [] = { 0x63C5 };
	static uint32_t cjk_compatibility_ideograph_2f8c1 [] = { 0x63A9 };
	static uint32_t cjk_compatibility_ideograph_2f8c2 [] = { 0x3A2E };
	static uint32_t cjk_compatibility_ideograph_2f8c3 [] = { 0x6469 };
	static uint32_t cjk_compatibility_ideograph_2f8c4 [] = { 0x647E };
	static uint32_t cjk_compatibility_ideograph_2f8c5 [] = { 0x649D };
	static uint32_t cjk_compatibility_ideograph_2f8c6 [] = { 0x6477 };
	static uint32_t cjk_compatibility_ideograph_2f8c7 [] = { 0x3A6C };
	static uint32_t cjk_compatibility_ideograph_2f8c8 [] = { 0x654F };
	static uint32_t cjk_compatibility_ideograph_2f8c9 [] = { 0x656C };
	static uint32_t cjk_compatibility_ideograph_2f8ca [] = { 0x2300A };
	static uint32_t cjk_compatibility_ideograph_2f8cb [] = { 0x65E3 };
	static uint32_t cjk_compatibility_ideograph_2f8cc [] = { 0x66F8 };
	static uint32_t cjk_compatibility_ideograph_2f8cd [] = { 0x6649 };
	static uint32_t cjk_compatibility_ideograph_2f8ce [] = { 0x3B19 };
	static uint32_t cjk_compatibility_ideograph_2f8cf [] = { 0x6691 };
	static uint32_t cjk_compatibility_ideograph_2f8d0 [] = { 0x3B08 };
	static uint32_t cjk_compatibility_ideograph_2f8d1 [] = { 0x3AE4 };
	static uint32_t cjk_compatibility_ideograph_2f8d2 [] = { 0x5192 };
	static uint32_t cjk_compatibility_ideograph_2f8d3 [] = { 0x5195 };
	static uint32_t cjk_compatibility_ideograph_2f8d4 [] = { 0x6700 };
	static uint32_t cjk_compatibility_ideograph_2f8d5 [] = { 0x669C };
	static uint32_t cjk_compatibility_ideograph_2f8d6 [] = { 0x80AD };
	static uint32_t cjk_compatibility_ideograph_2f8d7 [] = { 0x43D9 };
	static uint32_t cjk_compatibility_ideograph_2f8d8 [] = { 0x6717 };
	static uint32_t cjk_compatibility_ideograph_2f8d9 [] = { 0x671B };
	static uint32_t cjk_compatibility_ideograph_2f8da [] = { 0x6721 };
	static uint32_t cjk_compatibility_ideograph_2f8db [] = { 0x675E };
	static uint32_t cjk_compatibility_ideograph_2f8dc [] = { 0x6753 };
	static uint32_t cjk_compatibility_ideograph_2f8dd [] = { 0x233C3 };
	static uint32_t cjk_compatibility_ideograph_2f8de [] = { 0x3B49 };
	static uint32_t cjk_compatibility_ideograph_2f8df [] = { 0x67FA };
	static uint32_t cjk_compatibility_ideograph_2f8e0 [] = { 0x6785 };
	static uint32_t cjk_compatibility_ideograph_2f8e1 [] = { 0x6852 };
	static uint32_t cjk_compatibility_ideograph_2f8e2 [] = { 0x6885 };
	static uint32_t cjk_compatibility_ideograph_2f8e3 [] = { 0x2346D };
	static uint32_t cjk_compatibility_ideograph_2f8e4 [] = { 0x688E };
	static uint32_t cjk_compatibility_ideograph_2f8e5 [] = { 0x681F };
	static uint32_t cjk_compatibility_ideograph_2f8e6 [] = { 0x6914 };
	static uint32_t cjk_compatibility_ideograph_2f8e7 [] = { 0x3B9D };
	static uint32_t cjk_compatibility_ideograph_2f8e8 [] = { 0x6942 };
	static uint32_t cjk_compatibility_ideograph_2f8e9 [] = { 0x69A3 };
	static uint32_t cjk_compatibility_ideograph_2f8ea [] = { 0x69EA };
	static uint32_t cjk_compatibility_ideograph_2f8eb [] = { 0x6AA8 };
	static uint32_t cjk_compatibility_ideograph_2f8ec [] = { 0x236A3 };
	static uint32_t cjk_compatibility_ideograph_2f8ed [] = { 0x6ADB };
	static uint32_t cjk_compatibility_ideograph_2f8ee [] = { 0x3C18 };
	static uint32_t cjk_compatibility_ideograph_2f8ef [] = { 0x6B21 };
	static uint32_t cjk_compatibility_ideograph_2f8f0 [] = { 0x238A7 };
	static uint32_t cjk_compatibility_ideograph_2f8f1 [] = { 0x6B54 };
	static uint32_t cjk_compatibility_ideograph_2f8f2 [] = { 0x3C4E };
	static uint32_t cjk_compatibility_ideograph_2f8f3 [] = { 0x6B72 };
	static uint32_t cjk_compatibility_ideograph_2f8f4 [] = { 0x6B9F };
	static uint32_t cjk_compatibility_ideograph_2f8f5 [] = { 0x6BBA };
	static uint32_t cjk_compatibility_ideograph_2f8f6 [] = { 0x6BBB };
	static uint32_t cjk_compatibility_ideograph_2f8f7 [] = { 0x23A8D };
	static uint32_t cjk_compatibility_ideograph_2f8f8 [] = { 0x21D0B };
	static uint32_t cjk_compatibility_ideograph_2f8f9 [] = { 0x23AFA };
	static uint32_t cjk_compatibility_ideograph_2f8fa [] = { 0x6C4E };
	static uint32_t cjk_compatibility_ideograph_2f8fb [] = { 0x23CBC };
	static uint32_t cjk_compatibility_ideograph_2f8fc [] = { 0x6CBF };
	static uint32_t cjk_compatibility_ideograph_2f8fd [] = { 0x6CCD };
	static uint32_t cjk_compatibility_ideograph_2f8fe [] = { 0x6C67 };
	static uint32_t cjk_compatibility_ideograph_2f8ff [] = { 0x6D16 };
	static uint32_t cjk_compatibility_ideograph_2f900 [] = { 0x6D3E };
	static uint32_t cjk_compatibility_ideograph_2f901 [] = { 0x6D77 };
	static uint32_t cjk_compatibility_ideograph_2f902 [] = { 0x6D41 };
	static uint32_t cjk_compatibility_ideograph_2f903 [] = { 0x6D69 };
	static uint32_t cjk_compatibility_ideograph_2f904 [] = { 0x6D78 };
	static uint32_t cjk_compatibility_ideograph_2f905 [] = { 0x6D85 };
	static uint32_t cjk_compatibility_ideograph_2f906 [] = { 0x23D1E };
	static uint32_t cjk_compatibility_ideograph_2f907 [] = { 0x6D34 };
	static uint32_t cjk_compatibility_ideograph_2f908 [] = { 0x6E2F };
	static uint32_t cjk_compatibility_ideograph_2f909 [] = { 0x6E6E };
	static uint32_t cjk_compatibility_ideograph_2f90a [] = { 0x3D33 };
	static uint32_t cjk_compatibility_ideograph_2f90b [] = { 0x6ECB };
	static uint32_t cjk_compatibility_ideograph_2f90c [] = { 0x6EC7 };
	static uint32_t cjk_compatibility_ideograph_2f90d [] = { 0x23ED1 };
	static uint32_t cjk_compatibility_ideograph_2f90e [] = { 0x6DF9 };
	static uint32_t cjk_compatibility_ideograph_2f90f [] = { 0x6F6E };
	static uint32_t cjk_compatibility_ideograph_2f910 [] = { 0x23F5E };
	static uint32_t cjk_compatibility_ideograph_2f911 [] = { 0x23F8E };
	static uint32_t cjk_compatibility_ideograph_2f912 [] = { 0x6FC6 };
	static uint32_t cjk_compatibility_ideograph_2f913 [] = { 0x7039 };
	static uint32_t cjk_compatibility_ideograph_2f914 [] = { 0x701E };
	static uint32_t cjk_compatibility_ideograph_2f915 [] = { 0x701B };
	static uint32_t cjk_compatibility_ideograph_2f916 [] = { 0x3D96 };
	static uint32_t cjk_compatibility_ideograph_2f917 [] = { 0x704A };
	static uint32_t cjk_compatibility_ideograph_2f918 [] = { 0x707D };
	static uint32_t cjk_compatibility_ideograph_2f919 [] = { 0x7077 };
	static uint32_t cjk_compatibility_ideograph_2f91a [] = { 0x70AD };
	static uint32_t cjk_compatibility_ideograph_2f91b [] = { 0x20525 };
	static uint32_t cjk_compatibility_ideograph_2f91c [] = { 0x7145 };
	static uint32_t cjk_compatibility_ideograph_2f91d [] = { 0x24263 };
	static uint32_t cjk_compatibility_ideograph_2f91e [] = { 0x719C };
	static uint32_t cjk_compatibility_ideograph_2f91f [] = { 0x243AB };
	static uint32_t cjk_compatibility_ideograph_2f920 [] = { 0x7228 };
	static uint32_t cjk_compatibility_ideograph_2f921 [] = { 0x7235 };
	static uint32_t cjk_compatibility_ideograph_2f922 [] = { 0x7250 };
	static uint32_t cjk_compatibility_ideograph_2f923 [] = { 0x24608 };
	static uint32_t cjk_compatibility_ideograph_2f924 [] = { 0x7280 };
	static uint32_t cjk_compatibility_ideograph_2f925 [] = { 0x7295 };
	static uint32_t cjk_compatibility_ideograph_2f926 [] = { 0x24735 };
	static uint32_t cjk_compatibility_ideograph_2f927 [] = { 0x24814 };
	static uint32_t cjk_compatibility_ideograph_2f928 [] = { 0x737A };
	static uint32_t cjk_compatibility_ideograph_2f929 [] = { 0x738B };
	static uint32_t cjk_compatibility_ideograph_2f92a [] = { 0x3EAC };
	static uint32_t cjk_compatibility_ideograph_2f92b [] = { 0x73A5 };
	static uint32_t cjk_compatibility_ideograph_2f92c [] = { 0x3EB8 };
	static uint32_t cjk_compatibility_ideograph_2f92d [] = { 0x3EB8 };
	static uint32_t cjk_compatibility_ideograph_2f92e [] = { 0x7447 };
	static uint32_t cjk_compatibility_ideograph_2f92f [] = { 0x745C };
	static uint32_t cjk_compatibility_ideograph_2f930 [] = { 0x7471 };
	static uint32_t cjk_compatibility_ideograph_2f931 [] = { 0x7485 };
	static uint32_t cjk_compatibility_ideograph_2f932 [] = { 0x74CA };
	static uint32_t cjk_compatibility_ideograph_2f933 [] = { 0x3F1B };
	static uint32_t cjk_compatibility_ideograph_2f934 [] = { 0x7524 };
	static uint32_t cjk_compatibility_ideograph_2f935 [] = { 0x24C36 };
	static uint32_t cjk_compatibility_ideograph_2f936 [] = { 0x753E };
	static uint32_t cjk_compatibility_ideograph_2f937 [] = { 0x24C92 };
	static uint32_t cjk_compatibility_ideograph_2f938 [] = { 0x7570 };
	static uint32_t cjk_compatibility_ideograph_2f939 [] = { 0x2219F };
	static uint32_t cjk_compatibility_ideograph_2f93a [] = { 0x7610 };
	static uint32_t cjk_compatibility_ideograph_2f93b [] = { 0x24FA1 };
	static uint32_t cjk_compatibility_ideograph_2f93c [] = { 0x24FB8 };
	static uint32_t cjk_compatibility_ideograph_2f93d [] = { 0x25044 };
	static uint32_t cjk_compatibility_ideograph_2f93e [] = { 0x3FFC };
	static uint32_t cjk_compatibility_ideograph_2f93f [] = { 0x4008 };
	static uint32_t cjk_compatibility_ideograph_2f940 [] = { 0x76F4 };
	static uint32_t cjk_compatibility_ideograph_2f941 [] = { 0x250F3 };
	static uint32_t cjk_compatibility_ideograph_2f942 [] = { 0x250F2 };
	static uint32_t cjk_compatibility_ideograph_2f943 [] = { 0x25119 };
	static uint32_t cjk_compatibility_ideograph_2f944 [] = { 0x25133 };
	static uint32_t cjk_compatibility_ideograph_2f945 [] = { 0x771E };
	static uint32_t cjk_compatibility_ideograph_2f946 [] = { 0x771F };
	static uint32_t cjk_compatibility_ideograph_2f947 [] = { 0x771F };
	static uint32_t cjk_compatibility_ideograph_2f948 [] = { 0x774A };
	static uint32_t cjk_compatibility_ideograph_2f949 [] = { 0x4039 };
	static uint32_t cjk_compatibility_ideograph_2f94a [] = { 0x778B };
	static uint32_t cjk_compatibility_ideograph_2f94b [] = { 0x4046 };
	static uint32_t cjk_compatibility_ideograph_2f94c [] = { 0x4096 };
	static uint32_t cjk_compatibility_ideograph_2f94d [] = { 0x2541D };
	static uint32_t cjk_compatibility_ideograph_2f94e [] = { 0x784E };
	static uint32_t cjk_compatibility_ideograph_2f94f [] = { 0x788C };
	static uint32_t cjk_compatibility_ideograph_2f950 [] = { 0x78CC };
	static uint32_t cjk_compatibility_ideograph_2f951 [] = { 0x40E3 };
	static uint32_t cjk_compatibility_ideograph_2f952 [] = { 0x25626 };
	static uint32_t cjk_compatibility_ideograph_2f953 [] = { 0x7956 };
	static uint32_t cjk_compatibility_ideograph_2f954 [] = { 0x2569A };
	static uint32_t cjk_compatibility_ideograph_2f955 [] = { 0x256C5 };
	static uint32_t cjk_compatibility_ideograph_2f956 [] = { 0x798F };
	static uint32_t cjk_compatibility_ideograph_2f957 [] = { 0x79EB };
	static uint32_t cjk_compatibility_ideograph_2f958 [] = { 0x412F };
	static uint32_t cjk_compatibility_ideograph_2f959 [] = { 0x7A40 };
	static uint32_t cjk_compatibility_ideograph_2f95a [] = { 0x7A4A };
	static uint32_t cjk_compatibility_ideograph_2f95b [] = { 0x7A4F };
	static uint32_t cjk_compatibility_ideograph_2f95c [] = { 0x2597C };
	static uint32_t cjk_compatibility_ideograph_2f95d [] = { 0x25AA7 };
	static uint32_t cjk_compatibility_ideograph_2f95e [] = { 0x25AA7 };
	static uint32_t cjk_compatibility_ideograph_2f95f [] = { 0x7AEE };
	static uint32_t cjk_compatibility_ideograph_2f960 [] = { 0x4202 };
	static uint32_t cjk_compatibility_ideograph_2f961 [] = { 0x25BAB };
	static uint32_t cjk_compatibility_ideograph_2f962 [] = { 0x7BC6 };
	static uint32_t cjk_compatibility_ideograph_2f963 [] = { 0x7BC9 };
	static uint32_t cjk_compatibility_ideograph_2f964 [] = { 0x4227 };
	static uint32_t cjk_compatibility_ideograph_2f965 [] = { 0x25C80 };
	static uint32_t cjk_compatibility_ideograph_2f966 [] = { 0x7CD2 };
	static uint32_t cjk_compatibility_ideograph_2f967 [] = { 0x42A0 };
	static uint32_t cjk_compatibility_ideograph_2f968 [] = { 0x7CE8 };
	static uint32_t cjk_compatibility_ideograph_2f969 [] = { 0x7CE3 };
	static uint32_t cjk_compatibility_ideograph_2f96a [] = { 0x7D00 };
	static uint32_t cjk_compatibility_ideograph_2f96b [] = { 0x25F86 };
	static uint32_t cjk_compatibility_ideograph_2f96c [] = { 0x7D63 };
	static uint32_t cjk_compatibility_ideograph_2f96d [] = { 0x4301 };
	static uint32_t cjk_compatibility_ideograph_2f96e [] = { 0x7DC7 };
	static uint32_t cjk_compatibility_ideograph_2f96f [] = { 0x7E02 };
	static uint32_t cjk_compatibility_ideograph_2f970 [] = { 0x7E45 };
	static uint32_t cjk_compatibility_ideograph_2f971 [] = { 0x4334 };
	static uint32_t cjk_compatibility_ideograph_2f972 [] = { 0x26228 };
	static uint32_t cjk_compatibility_ideograph_2f973 [] = { 0x26247 };
	static uint32_t cjk_compatibility_ideograph_2f974 [] = { 0x4359 };
	static uint32_t cjk_compatibility_ideograph_2f975 [] = { 0x262D9 };
	static uint32_t cjk_compatibility_ideograph_2f976 [] = { 0x7F7A };
	static uint32_t cjk_compatibility_ideograph_2f977 [] = { 0x2633E };
	static uint32_t cjk_compatibility_ideograph_2f978 [] = { 0x7F95 };
	static uint32_t cjk_compatibility_ideograph_2f979 [] = { 0x7FFA };
	static uint32_t cjk_compatibility_ideograph_2f97a [] = { 0x8005 };
	static uint32_t cjk_compatibility_ideograph_2f97b [] = { 0x264DA };
	static uint32_t cjk_compatibility_ideograph_2f97c [] = { 0x26523 };
	static uint32_t cjk_compatibility_ideograph_2f97d [] = { 0x8060 };
	static uint32_t cjk_compatibility_ideograph_2f97e [] = { 0x265A8 };
	static uint32_t cjk_compatibility_ideograph_2f97f [] = { 0x8070 };
	static uint32_t cjk_compatibility_ideograph_2f980 [] = { 0x2335F };
	static uint32_t cjk_compatibility_ideograph_2f981 [] = { 0x43D5 };
	static uint32_t cjk_compatibility_ideograph_2f982 [] = { 0x80B2 };
	static uint32_t cjk_compatibility_ideograph_2f983 [] = { 0x8103 };
	static uint32_t cjk_compatibility_ideograph_2f984 [] = { 0x440B };
	static uint32_t cjk_compatibility_ideograph_2f985 [] = { 0x813E };
	static uint32_t cjk_compatibility_ideograph_2f986 [] = { 0x5AB5 };
	static uint32_t cjk_compatibility_ideograph_2f987 [] = { 0x267A7 };
	static uint32_t cjk_compatibility_ideograph_2f988 [] = { 0x267B5 };
	static uint32_t cjk_compatibility_ideograph_2f989 [] = { 0x23393 };
	static uint32_t cjk_compatibility_ideograph_2f98a [] = { 0x2339C };
	static uint32_t cjk_compatibility_ideograph_2f98b [] = { 0x8201 };
	static uint32_t cjk_compatibility_ideograph_2f98c [] = { 0x8204 };
	static uint32_t cjk_compatibility_ideograph_2f98d [] = { 0x8F9E };
	static uint32_t cjk_compatibility_ideograph_2f98e [] = { 0x446B };
	static uint32_t cjk_compatibility_ideograph_2f98f [] = { 0x8291 };
	static uint32_t cjk_compatibility_ideograph_2f990 [] = { 0x828B };
	static uint32_t cjk_compatibility_ideograph_2f991 [] = { 0x829D };
	static uint32_t cjk_compatibility_ideograph_2f992 [] = { 0x52B3 };
	static uint32_t cjk_compatibility_ideograph_2f993 [] = { 0x82B1 };
	static uint32_t cjk_compatibility_ideograph_2f994 [] = { 0x82B3 };
	static uint32_t cjk_compatibility_ideograph_2f995 [] = { 0x82BD };
	static uint32_t cjk_compatibility_ideograph_2f996 [] = { 0x82E6 };
	static uint32_t cjk_compatibility_ideograph_2f997 [] = { 0x26B3C };
	static uint32_t cjk_compatibility_ideograph_2f998 [] = { 0x82E5 };
	static uint32_t cjk_compatibility_ideograph_2f999 [] = { 0x831D };
	static uint32_t cjk_compatibility_ideograph_2f99a [] = { 0x8363 };
	static uint32_t cjk_compatibility_ideograph_2f99b [] = { 0x83AD };
	static uint32_t cjk_compatibility_ideograph_2f99c [] = { 0x8323 };
	static uint32_t cjk_compatibility_ideograph_2f99d [] = { 0x83BD };
	static uint32_t cjk_compatibility_ideograph_2f99e [] = { 0x83E7 };
	static uint32_t cjk_compatibility_ideograph_2f99f [] = { 0x8457 };
	static uint32_t cjk_compatibility_ideograph_2f9a0 [] = { 0x8353 };
	static uint32_t cjk_compatibility_ideograph_2f9a1 [] = { 0x83CA };
	static uint32_t cjk_compatibility_ideograph_2f9a2 [] = { 0x83CC };
	static uint32_t cjk_compatibility_ideograph_2f9a3 [] = { 0x83DC };
	static uint32_t cjk_compatibility_ideograph_2f9a4 [] = { 0x26C36 };
	static uint32_t cjk_compatibility_ideograph_2f9a5 [] = { 0x26D6B };
	static uint32_t cjk_compatibility_ideograph_2f9a6 [] = { 0x26CD5 };
	static uint32_t cjk_compatibility_ideograph_2f9a7 [] = { 0x452B };
	static uint32_t cjk_compatibility_ideograph_2f9a8 [] = { 0x84F1 };
	static uint32_t cjk_compatibility_ideograph_2f9a9 [] = { 0x84F3 };
	static uint32_t cjk_compatibility_ideograph_2f9aa [] = { 0x8516 };
	static uint32_t cjk_compatibility_ideograph_2f9ab [] = { 0x273CA };
	static uint32_t cjk_compatibility_ideograph_2f9ac [] = { 0x8564 };
	static uint32_t cjk_compatibility_ideograph_2f9ad [] = { 0x26F2C };
	static uint32_t cjk_compatibility_ideograph_2f9ae [] = { 0x455D };
	static uint32_t cjk_compatibility_ideograph_2f9af [] = { 0x4561 };
	static uint32_t cjk_compatibility_ideograph_2f9b0 [] = { 0x26FB1 };
	static uint32_t cjk_compatibility_ideograph_2f9b1 [] = { 0x270D2 };
	static uint32_t cjk_compatibility_ideograph_2f9b2 [] = { 0x456B };
	static uint32_t cjk_compatibility_ideograph_2f9b3 [] = { 0x8650 };
	static uint32_t cjk_compatibility_ideograph_2f9b4 [] = { 0x865C };
	static uint32_t cjk_compatibility_ideograph_2f9b5 [] = { 0x8667 };
	static uint32_t cjk_compatibility_ideograph_2f9b6 [] = { 0x8669 };
	static uint32_t cjk_compatibility_ideograph_2f9b7 [] = { 0x86A9 };
	static uint32_t cjk_compatibility_ideograph_2f9b8 [] = { 0x8688 };
	static uint32_t cjk_compatibility_ideograph_2f9b9 [] = { 0x870E };
	static uint32_t cjk_compatibility_ideograph_2f9ba [] = { 0x86E2 };
	static uint32_t cjk_compatibility_ideograph_2f9bb [] = { 0x8779 };
	static uint32_t cjk_compatibility_ideograph_2f9bc [] = { 0x8728 };
	static uint32_t cjk_compatibility_ideograph_2f9bd [] = { 0x876B };
	static uint32_t cjk_compatibility_ideograph_2f9be [] = { 0x8786 };
	static uint32_t cjk_compatibility_ideograph_2f9bf [] = { 0x45D7 };
	static uint32_t cjk_compatibility_ideograph_2f9c0 [] = { 0x87E1 };
	static uint32_t cjk_compatibility_ideograph_2f9c1 [] = { 0x8801 };
	static uint32_t cjk_compatibility_ideograph_2f9c2 [] = { 0x45F9 };
	static uint32_t cjk_compatibility_ideograph_2f9c3 [] = { 0x8860 };
	static uint32_t cjk_compatibility_ideograph_2f9c4 [] = { 0x8863 };
	static uint32_t cjk_compatibility_ideograph_2f9c5 [] = { 0x27667 };
	static uint32_t cjk_compatibility_ideograph_2f9c6 [] = { 0x88D7 };
	static uint32_t cjk_compatibility_ideograph_2f9c7 [] = { 0x88DE };
	static uint32_t cjk_compatibility_ideograph_2f9c8 [] = { 0x4635 };
	static uint32_t cjk_compatibility_ideograph_2f9c9 [] = { 0x88FA };
	static uint32_t cjk_compatibility_ideograph_2f9ca [] = { 0x34BB };
	static uint32_t cjk_compatibility_ideograph_2f9cb [] = { 0x278AE };
	static uint32_t cjk_compatibility_ideograph_2f9cc [] = { 0x27966 };
	static uint32_t cjk_compatibility_ideograph_2f9cd [] = { 0x46BE };
	static uint32_t cjk_compatibility_ideograph_2f9ce [] = { 0x46C7 };
	static uint32_t cjk_compatibility_ideograph_2f9cf [] = { 0x8AA0 };
	static uint32_t cjk_compatibility_ideograph_2f9d0 [] = { 0x8AED };
	static uint32_t cjk_compatibility_ideograph_2f9d1 [] = { 0x8B8A };
	static uint32_t cjk_compatibility_ideograph_2f9d2 [] = { 0x8C55 };
	static uint32_t cjk_compatibility_ideograph_2f9d3 [] = { 0x27CA8 };
	static uint32_t cjk_compatibility_ideograph_2f9d4 [] = { 0x8CAB };
	static uint32_t cjk_compatibility_ideograph_2f9d5 [] = { 0x8CC1 };
	static uint32_t cjk_compatibility_ideograph_2f9d6 [] = { 0x8D1B };
	static uint32_t cjk_compatibility_ideograph_2f9d7 [] = { 0x8D77 };
	static uint32_t cjk_compatibility_ideograph_2f9d8 [] = { 0x27F2F };
	static uint32_t cjk_compatibility_ideograph_2f9d9 [] = { 0x20804 };
	static uint32_t cjk_compatibility_ideograph_2f9da [] = { 0x8DCB };
	static uint32_t cjk_compatibility_ideograph_2f9db [] = { 0x8DBC };
	static uint32_t cjk_compatibility_ideograph_2f9dc [] = { 0x8DF0 };
	static uint32_t cjk_compatibility_ideograph_2f9dd [] = { 0x208DE };
	static uint32_t cjk_compatibility_ideograph_2f9de [] = { 0x8ED4 };
	static uint32_t cjk_compatibility_ideograph_2f9df [] = { 0x8F38 };
	static uint32_t cjk_compatibility_ideograph_2f9e0 [] = { 0x285D2 };
	static uint32_t cjk_compatibility_ideograph_2f9e1 [] = { 0x285ED };
	static uint32_t cjk_compatibility_ideograph_2f9e2 [] = { 0x9094 };
	static uint32_t cjk_compatibility_ideograph_2f9e3 [] = { 0x90F1 };
	static uint32_t cjk_compatibility_ideograph_2f9e4 [] = { 0x9111 };
	static uint32_t cjk_compatibility_ideograph_2f9e5 [] = { 0x2872E };
	static uint32_t cjk_compatibility_ideograph_2f9e6 [] = { 0x911B };
	static uint32_t cjk_compatibility_ideograph_2f9e7 [] = { 0x9238 };
	static uint32_t cjk_compatibility_ideograph_2f9e8 [] = { 0x92D7 };
	static uint32_t cjk_compatibility_ideograph_2f9e9 [] = { 0x92D8 };
	static uint32_t cjk_compatibility_ideograph_2f9ea [] = { 0x927C };
	static uint32_t cjk_compatibility_ideograph_2f9eb [] = { 0x93F9 };
	static uint32_t cjk_compatibility_ideograph_2f9ec [] = { 0x9415 };
	static uint32_t cjk_compatibility_ideograph_2f9ed [] = { 0x28BFA };
	static uint32_t cjk_compatibility_ideograph_2f9ee [] = { 0x958B };
	static uint32_t cjk_compatibility_ideograph_2f9ef [] = { 0x4995 };
	static uint32_t cjk_compatibility_ideograph_2f9f0 [] = { 0x95B7 };
	static uint32_t cjk_compatibility_ideograph_2f9f1 [] = { 0x28D77 };
	static uint32_t cjk_compatibility_ideograph_2f9f2 [] = { 0x49E6 };
	static uint32_t cjk_compatibility_ideograph_2f9f3 [] = { 0x96C3 };
	static uint32_t cjk_compatibility_ideograph_2f9f4 [] = { 0x5DB2 };
	static uint32_t cjk_compatibility_ideograph_2f9f5 [] = { 0x9723 };
	static uint32_t cjk_compatibility_ideograph_2f9f6 [] = { 0x29145 };
	static uint32_t cjk_compatibility_ideograph_2f9f7 [] = { 0x2921A };
	static uint32_t cjk_compatibility_ideograph_2f9f8 [] = { 0x4A6E };
	static uint32_t cjk_compatibility_ideograph_2f9f9 [] = { 0x4A76 };
	static uint32_t cjk_compatibility_ideograph_2f9fa [] = { 0x97E0 };
	static uint32_t cjk_compatibility_ideograph_2f9fb [] = { 0x2940A };
	static uint32_t cjk_compatibility_ideograph_2f9fc [] = { 0x4AB2 };
	static uint32_t cjk_compatibility_ideograph_2f9fd [] = { 0x29496 };
	static uint32_t cjk_compatibility_ideograph_2f9fe [] = { 0x980B };
	static uint32_t cjk_compatibility_ideograph_2f9ff [] = { 0x980B };
	static uint32_t cjk_compatibility_ideograph_2fa00 [] = { 0x9829 };
	static uint32_t cjk_compatibility_ideograph_2fa01 [] = { 0x295B6 };
	static uint32_t cjk_compatibility_ideograph_2fa02 [] = { 0x98E2 };
	static uint32_t cjk_compatibility_ideograph_2fa03 [] = { 0x4B33 };
	static uint32_t cjk_compatibility_ideograph_2fa04 [] = { 0x9929 };
	static uint32_t cjk_compatibility_ideograph_2fa05 [] = { 0x99A7 };
	static uint32_t cjk_compatibility_ideograph_2fa06 [] = { 0x99C2 };
	static uint32_t cjk_compatibility_ideograph_2fa07 [] = { 0x99FE };
	static uint32_t cjk_compatibility_ideograph_2fa08 [] = { 0x4BCE };
	static uint32_t cjk_compatibility_ideograph_2fa09 [] = { 0x29B30 };
	static uint32_t cjk_compatibility_ideograph_2fa0a [] = { 0x9B12 };
	static uint32_t cjk_compatibility_ideograph_2fa0b [] = { 0x9C40 };
	static uint32_t cjk_compatibility_ideograph_2fa0c [] = { 0x9CFD };
	static uint32_t cjk_compatibility_ideograph_2fa0d [] = { 0x4CCE };
	static uint32_t cjk_compatibility_ideograph_2fa0e [] = { 0x4CED };
	static uint32_t cjk_compatibility_ideograph_2fa0f [] = { 0x9D67 };
	static uint32_t cjk_compatibility_ideograph_2fa10 [] = { 0x2A0CE };
	static uint32_t cjk_compatibility_ideograph_2fa11 [] = { 0x4CF8 };
	static uint32_t cjk_compatibility_ideograph_2fa12 [] = { 0x2A105 };
	static uint32_t cjk_compatibility_ideograph_2fa13 [] = { 0x2A20E };
	static uint32_t cjk_compatibility_ideograph_2fa14 [] = { 0x2A291 };
	static uint32_t cjk_compatibility_ideograph_2fa15 [] = { 0x9EBB };
	static uint32_t cjk_compatibility_ideograph_2fa16 [] = { 0x4D56 };
	static uint32_t cjk_compatibility_ideograph_2fa17 [] = { 0x9EF9 };
	static uint32_t cjk_compatibility_ideograph_2fa18 [] = { 0x9EFE };
	static uint32_t cjk_compatibility_ideograph_2fa19 [] = { 0x9F05 };
	static uint32_t cjk_compatibility_ideograph_2fa1a [] = { 0x9F0F };
	static uint32_t cjk_compatibility_ideograph_2fa1b [] = { 0x9F16 };
	static uint32_t cjk_compatibility_ideograph_2fa1c [] = { 0x9F3B };
	static uint32_t cjk_compatibility_ideograph_2fa1d [] = { 0x2A600 };

	switch (codepoint) {
		case 0x00A0:
			*normals = no_break_space;
			return 1;
		case 0x00A8:
			*normals = diaeresis;
			return 2;
		case 0x00AA:
			*normals = feminine_ordinal_indicator;
			return 1;
		case 0x00AF:
			*normals = macron;
			return 2;
		case 0x00B2:
			*normals = superscript_two;
			return 1;
		case 0x00B3:
			*normals = superscript_three;
			return 1;
		case 0x00B4:
			*normals = acute_accent;
			return 2;
		case 0x00B5:
			*normals = micro_sign;
			return 1;
		case 0x00B8:
			*normals = cedilla;
			return 2;
		case 0x00B9:
			*normals = superscript_one;
			return 1;
		case 0x00BA:
			*normals = masculine_ordinal_indicator;
			return 1;
		case 0x00BC:
			*normals = vulgar_fraction_one_quarter;
			return 3;
		case 0x00BD:
			*normals = vulgar_fraction_one_half;
			return 3;
		case 0x00BE:
			*normals = vulgar_fraction_three_quarters;
			return 3;
		case 0x00C0:
			*normals = latin_capital_letter_a_with_grave;
			return 2;
		case 0x00C1:
			*normals = latin_capital_letter_a_with_acute;
			return 2;
		case 0x00C2:
			*normals = latin_capital_letter_a_with_circumflex;
			return 2;
		case 0x00C3:
			*normals = latin_capital_letter_a_with_tilde;
			return 2;
		case 0x00C4:
			*normals = latin_capital_letter_a_with_diaeresis;
			return 2;
		case 0x00C5:
			*normals = latin_capital_letter_a_with_ring_above;
			return 2;
		case 0x00C7:
			*normals = latin_capital_letter_c_with_cedilla;
			return 2;
		case 0x00C8:
			*normals = latin_capital_letter_e_with_grave;
			return 2;
		case 0x00C9:
			*normals = latin_capital_letter_e_with_acute;
			return 2;
		case 0x00CA:
			*normals = latin_capital_letter_e_with_circumflex;
			return 2;
		case 0x00CB:
			*normals = latin_capital_letter_e_with_diaeresis;
			return 2;
		case 0x00CC:
			*normals = latin_capital_letter_i_with_grave;
			return 2;
		case 0x00CD:
			*normals = latin_capital_letter_i_with_acute;
			return 2;
		case 0x00CE:
			*normals = latin_capital_letter_i_with_circumflex;
			return 2;
		case 0x00CF:
			*normals = latin_capital_letter_i_with_diaeresis;
			return 2;
		case 0x00D1:
			*normals = latin_capital_letter_n_with_tilde;
			return 2;
		case 0x00D2:
			*normals = latin_capital_letter_o_with_grave;
			return 2;
		case 0x00D3:
			*normals = latin_capital_letter_o_with_acute;
			return 2;
		case 0x00D4:
			*normals = latin_capital_letter_o_with_circumflex;
			return 2;
		case 0x00D5:
			*normals = latin_capital_letter_o_with_tilde;
			return 2;
		case 0x00D6:
			*normals = latin_capital_letter_o_with_diaeresis;
			return 2;
		case 0x00D9:
			*normals = latin_capital_letter_u_with_grave;
			return 2;
		case 0x00DA:
			*normals = latin_capital_letter_u_with_acute;
			return 2;
		case 0x00DB:
			*normals = latin_capital_letter_u_with_circumflex;
			return 2;
		case 0x00DC:
			*normals = latin_capital_letter_u_with_diaeresis;
			return 2;
		case 0x00DD:
			*normals = latin_capital_letter_y_with_acute;
			return 2;
		case 0x00E0:
			*normals = latin_small_letter_a_with_grave;
			return 2;
		case 0x00E1:
			*normals = latin_small_letter_a_with_acute;
			return 2;
		case 0x00E2:
			*normals = latin_small_letter_a_with_circumflex;
			return 2;
		case 0x00E3:
			*normals = latin_small_letter_a_with_tilde;
			return 2;
		case 0x00E4:
			*normals = latin_small_letter_a_with_diaeresis;
			return 2;
		case 0x00E5:
			*normals = latin_small_letter_a_with_ring_above;
			return 2;
		case 0x00E7:
			*normals = latin_small_letter_c_with_cedilla;
			return 2;
		case 0x00E8:
			*normals = latin_small_letter_e_with_grave;
			return 2;
		case 0x00E9:
			*normals = latin_small_letter_e_with_acute;
			return 2;
		case 0x00EA:
			*normals = latin_small_letter_e_with_circumflex;
			return 2;
		case 0x00EB:
			*normals = latin_small_letter_e_with_diaeresis;
			return 2;
		case 0x00EC:
			*normals = latin_small_letter_i_with_grave;
			return 2;
		case 0x00ED:
			*normals = latin_small_letter_i_with_acute;
			return 2;
		case 0x00EE:
			*normals = latin_small_letter_i_with_circumflex;
			return 2;
		case 0x00EF:
			*normals = latin_small_letter_i_with_diaeresis;
			return 2;
		case 0x00F1:
			*normals = latin_small_letter_n_with_tilde;
			return 2;
		case 0x00F2:
			*normals = latin_small_letter_o_with_grave;
			return 2;
		case 0x00F3:
			*normals = latin_small_letter_o_with_acute;
			return 2;
		case 0x00F4:
			*normals = latin_small_letter_o_with_circumflex;
			return 2;
		case 0x00F5:
			*normals = latin_small_letter_o_with_tilde;
			return 2;
		case 0x00F6:
			*normals = latin_small_letter_o_with_diaeresis;
			return 2;
		case 0x00F9:
			*normals = latin_small_letter_u_with_grave;
			return 2;
		case 0x00FA:
			*normals = latin_small_letter_u_with_acute;
			return 2;
		case 0x00FB:
			*normals = latin_small_letter_u_with_circumflex;
			return 2;
		case 0x00FC:
			*normals = latin_small_letter_u_with_diaeresis;
			return 2;
		case 0x00FD:
			*normals = latin_small_letter_y_with_acute;
			return 2;
		case 0x00FF:
			*normals = latin_small_letter_y_with_diaeresis;
			return 2;
		case 0x0100:
			*normals = latin_capital_letter_a_with_macron;
			return 2;
		case 0x0101:
			*normals = latin_small_letter_a_with_macron;
			return 2;
		case 0x0102:
			*normals = latin_capital_letter_a_with_breve;
			return 2;
		case 0x0103:
			*normals = latin_small_letter_a_with_breve;
			return 2;
		case 0x0104:
			*normals = latin_capital_letter_a_with_ogonek;
			return 2;
		case 0x0105:
			*normals = latin_small_letter_a_with_ogonek;
			return 2;
		case 0x0106:
			*normals = latin_capital_letter_c_with_acute;
			return 2;
		case 0x0107:
			*normals = latin_small_letter_c_with_acute;
			return 2;
		case 0x0108:
			*normals = latin_capital_letter_c_with_circumflex;
			return 2;
		case 0x0109:
			*normals = latin_small_letter_c_with_circumflex;
			return 2;
		case 0x010A:
			*normals = latin_capital_letter_c_with_dot_above;
			return 2;
		case 0x010B:
			*normals = latin_small_letter_c_with_dot_above;
			return 2;
		case 0x010C:
			*normals = latin_capital_letter_c_with_caron;
			return 2;
		case 0x010D:
			*normals = latin_small_letter_c_with_caron;
			return 2;
		case 0x010E:
			*normals = latin_capital_letter_d_with_caron;
			return 2;
		case 0x010F:
			*normals = latin_small_letter_d_with_caron;
			return 2;
		case 0x0112:
			*normals = latin_capital_letter_e_with_macron;
			return 2;
		case 0x0113:
			*normals = latin_small_letter_e_with_macron;
			return 2;
		case 0x0114:
			*normals = latin_capital_letter_e_with_breve;
			return 2;
		case 0x0115:
			*normals = latin_small_letter_e_with_breve;
			return 2;
		case 0x0116:
			*normals = latin_capital_letter_e_with_dot_above;
			return 2;
		case 0x0117:
			*normals = latin_small_letter_e_with_dot_above;
			return 2;
		case 0x0118:
			*normals = latin_capital_letter_e_with_ogonek;
			return 2;
		case 0x0119:
			*normals = latin_small_letter_e_with_ogonek;
			return 2;
		case 0x011A:
			*normals = latin_capital_letter_e_with_caron;
			return 2;
		case 0x011B:
			*normals = latin_small_letter_e_with_caron;
			return 2;
		case 0x011C:
			*normals = latin_capital_letter_g_with_circumflex;
			return 2;
		case 0x011D:
			*normals = latin_small_letter_g_with_circumflex;
			return 2;
		case 0x011E:
			*normals = latin_capital_letter_g_with_breve;
			return 2;
		case 0x011F:
			*normals = latin_small_letter_g_with_breve;
			return 2;
		case 0x0120:
			*normals = latin_capital_letter_g_with_dot_above;
			return 2;
		case 0x0121:
			*normals = latin_small_letter_g_with_dot_above;
			return 2;
		case 0x0122:
			*normals = latin_capital_letter_g_with_cedilla;
			return 2;
		case 0x0123:
			*normals = latin_small_letter_g_with_cedilla;
			return 2;
		case 0x0124:
			*normals = latin_capital_letter_h_with_circumflex;
			return 2;
		case 0x0125:
			*normals = latin_small_letter_h_with_circumflex;
			return 2;
		case 0x0128:
			*normals = latin_capital_letter_i_with_tilde;
			return 2;
		case 0x0129:
			*normals = latin_small_letter_i_with_tilde;
			return 2;
		case 0x012A:
			*normals = latin_capital_letter_i_with_macron;
			return 2;
		case 0x012B:
			*normals = latin_small_letter_i_with_macron;
			return 2;
		case 0x012C:
			*normals = latin_capital_letter_i_with_breve;
			return 2;
		case 0x012D:
			*normals = latin_small_letter_i_with_breve;
			return 2;
		case 0x012E:
			*normals = latin_capital_letter_i_with_ogonek;
			return 2;
		case 0x012F:
			*normals = latin_small_letter_i_with_ogonek;
			return 2;
		case 0x0130:
			*normals = latin_capital_letter_i_with_dot_above;
			return 2;
		case 0x0132:
			*normals = latin_capital_ligature_ij;
			return 2;
		case 0x0133:
			*normals = latin_small_ligature_ij;
			return 2;
		case 0x0134:
			*normals = latin_capital_letter_j_with_circumflex;
			return 2;
		case 0x0135:
			*normals = latin_small_letter_j_with_circumflex;
			return 2;
		case 0x0136:
			*normals = latin_capital_letter_k_with_cedilla;
			return 2;
		case 0x0137:
			*normals = latin_small_letter_k_with_cedilla;
			return 2;
		case 0x0139:
			*normals = latin_capital_letter_l_with_acute;
			return 2;
		case 0x013A:
			*normals = latin_small_letter_l_with_acute;
			return 2;
		case 0x013B:
			*normals = latin_capital_letter_l_with_cedilla;
			return 2;
		case 0x013C:
			*normals = latin_small_letter_l_with_cedilla;
			return 2;
		case 0x013D:
			*normals = latin_capital_letter_l_with_caron;
			return 2;
		case 0x013E:
			*normals = latin_small_letter_l_with_caron;
			return 2;
		case 0x013F:
			*normals = latin_capital_letter_l_with_middle_dot;
			return 2;
		case 0x0140:
			*normals = latin_small_letter_l_with_middle_dot;
			return 2;
		case 0x0143:
			*normals = latin_capital_letter_n_with_acute;
			return 2;
		case 0x0144:
			*normals = latin_small_letter_n_with_acute;
			return 2;
		case 0x0145:
			*normals = latin_capital_letter_n_with_cedilla;
			return 2;
		case 0x0146:
			*normals = latin_small_letter_n_with_cedilla;
			return 2;
		case 0x0147:
			*normals = latin_capital_letter_n_with_caron;
			return 2;
		case 0x0148:
			*normals = latin_small_letter_n_with_caron;
			return 2;
		case 0x0149:
			*normals = latin_small_letter_n_preceded_by_apostrophe;
			return 2;
		case 0x014C:
			*normals = latin_capital_letter_o_with_macron;
			return 2;
		case 0x014D:
			*normals = latin_small_letter_o_with_macron;
			return 2;
		case 0x014E:
			*normals = latin_capital_letter_o_with_breve;
			return 2;
		case 0x014F:
			*normals = latin_small_letter_o_with_breve;
			return 2;
		case 0x0150:
			*normals = latin_capital_letter_o_with_double_acute;
			return 2;
		case 0x0151:
			*normals = latin_small_letter_o_with_double_acute;
			return 2;
		case 0x0154:
			*normals = latin_capital_letter_r_with_acute;
			return 2;
		case 0x0155:
			*normals = latin_small_letter_r_with_acute;
			return 2;
		case 0x0156:
			*normals = latin_capital_letter_r_with_cedilla;
			return 2;
		case 0x0157:
			*normals = latin_small_letter_r_with_cedilla;
			return 2;
		case 0x0158:
			*normals = latin_capital_letter_r_with_caron;
			return 2;
		case 0x0159:
			*normals = latin_small_letter_r_with_caron;
			return 2;
		case 0x015A:
			*normals = latin_capital_letter_s_with_acute;
			return 2;
		case 0x015B:
			*normals = latin_small_letter_s_with_acute;
			return 2;
		case 0x015C:
			*normals = latin_capital_letter_s_with_circumflex;
			return 2;
		case 0x015D:
			*normals = latin_small_letter_s_with_circumflex;
			return 2;
		case 0x015E:
			*normals = latin_capital_letter_s_with_cedilla;
			return 2;
		case 0x015F:
			*normals = latin_small_letter_s_with_cedilla;
			return 2;
		case 0x0160:
			*normals = latin_capital_letter_s_with_caron;
			return 2;
		case 0x0161:
			*normals = latin_small_letter_s_with_caron;
			return 2;
		case 0x0162:
			*normals = latin_capital_letter_t_with_cedilla;
			return 2;
		case 0x0163:
			*normals = latin_small_letter_t_with_cedilla;
			return 2;
		case 0x0164:
			*normals = latin_capital_letter_t_with_caron;
			return 2;
		case 0x0165:
			*normals = latin_small_letter_t_with_caron;
			return 2;
		case 0x0168:
			*normals = latin_capital_letter_u_with_tilde;
			return 2;
		case 0x0169:
			*normals = latin_small_letter_u_with_tilde;
			return 2;
		case 0x016A:
			*normals = latin_capital_letter_u_with_macron;
			return 2;
		case 0x016B:
			*normals = latin_small_letter_u_with_macron;
			return 2;
		case 0x016C:
			*normals = latin_capital_letter_u_with_breve;
			return 2;
		case 0x016D:
			*normals = latin_small_letter_u_with_breve;
			return 2;
		case 0x016E:
			*normals = latin_capital_letter_u_with_ring_above;
			return 2;
		case 0x016F:
			*normals = latin_small_letter_u_with_ring_above;
			return 2;
		case 0x0170:
			*normals = latin_capital_letter_u_with_double_acute;
			return 2;
		case 0x0171:
			*normals = latin_small_letter_u_with_double_acute;
			return 2;
		case 0x0172:
			*normals = latin_capital_letter_u_with_ogonek;
			return 2;
		case 0x0173:
			*normals = latin_small_letter_u_with_ogonek;
			return 2;
		case 0x0174:
			*normals = latin_capital_letter_w_with_circumflex;
			return 2;
		case 0x0175:
			*normals = latin_small_letter_w_with_circumflex;
			return 2;
		case 0x0176:
			*normals = latin_capital_letter_y_with_circumflex;
			return 2;
		case 0x0177:
			*normals = latin_small_letter_y_with_circumflex;
			return 2;
		case 0x0178:
			*normals = latin_capital_letter_y_with_diaeresis;
			return 2;
		case 0x0179:
			*normals = latin_capital_letter_z_with_acute;
			return 2;
		case 0x017A:
			*normals = latin_small_letter_z_with_acute;
			return 2;
		case 0x017B:
			*normals = latin_capital_letter_z_with_dot_above;
			return 2;
		case 0x017C:
			*normals = latin_small_letter_z_with_dot_above;
			return 2;
		case 0x017D:
			*normals = latin_capital_letter_z_with_caron;
			return 2;
		case 0x017E:
			*normals = latin_small_letter_z_with_caron;
			return 2;
		case 0x017F:
			*normals = latin_small_letter_long_s;
			return 1;
		case 0x01A0:
			*normals = latin_capital_letter_o_with_horn;
			return 2;
		case 0x01A1:
			*normals = latin_small_letter_o_with_horn;
			return 2;
		case 0x01AF:
			*normals = latin_capital_letter_u_with_horn;
			return 2;
		case 0x01B0:
			*normals = latin_small_letter_u_with_horn;
			return 2;
		case 0x01C4:
			*normals = latin_capital_letter_dz_with_caron;
			return 2;
		case 0x01C5:
			*normals = latin_capital_letter_d_with_small_letter_z_with_caron;
			return 2;
		case 0x01C6:
			*normals = latin_small_letter_dz_with_caron;
			return 2;
		case 0x01C7:
			*normals = latin_capital_letter_lj;
			return 2;
		case 0x01C8:
			*normals = latin_capital_letter_l_with_small_letter_j;
			return 2;
		case 0x01C9:
			*normals = latin_small_letter_lj;
			return 2;
		case 0x01CA:
			*normals = latin_capital_letter_nj;
			return 2;
		case 0x01CB:
			*normals = latin_capital_letter_n_with_small_letter_j;
			return 2;
		case 0x01CC:
			*normals = latin_small_letter_nj;
			return 2;
		case 0x01CD:
			*normals = latin_capital_letter_a_with_caron;
			return 2;
		case 0x01CE:
			*normals = latin_small_letter_a_with_caron;
			return 2;
		case 0x01CF:
			*normals = latin_capital_letter_i_with_caron;
			return 2;
		case 0x01D0:
			*normals = latin_small_letter_i_with_caron;
			return 2;
		case 0x01D1:
			*normals = latin_capital_letter_o_with_caron;
			return 2;
		case 0x01D2:
			*normals = latin_small_letter_o_with_caron;
			return 2;
		case 0x01D3:
			*normals = latin_capital_letter_u_with_caron;
			return 2;
		case 0x01D4:
			*normals = latin_small_letter_u_with_caron;
			return 2;
		case 0x01D5:
			*normals = latin_capital_letter_u_with_diaeresis_and_macron;
			return 2;
		case 0x01D6:
			*normals = latin_small_letter_u_with_diaeresis_and_macron;
			return 2;
		case 0x01D7:
			*normals = latin_capital_letter_u_with_diaeresis_and_acute;
			return 2;
		case 0x01D8:
			*normals = latin_small_letter_u_with_diaeresis_and_acute;
			return 2;
		case 0x01D9:
			*normals = latin_capital_letter_u_with_diaeresis_and_caron;
			return 2;
		case 0x01DA:
			*normals = latin_small_letter_u_with_diaeresis_and_caron;
			return 2;
		case 0x01DB:
			*normals = latin_capital_letter_u_with_diaeresis_and_grave;
			return 2;
		case 0x01DC:
			*normals = latin_small_letter_u_with_diaeresis_and_grave;
			return 2;
		case 0x01DE:
			*normals = latin_capital_letter_a_with_diaeresis_and_macron;
			return 2;
		case 0x01DF:
			*normals = latin_small_letter_a_with_diaeresis_and_macron;
			return 2;
		case 0x01E0:
			*normals = latin_capital_letter_a_with_dot_above_and_macron;
			return 2;
		case 0x01E1:
			*normals = latin_small_letter_a_with_dot_above_and_macron;
			return 2;
		case 0x01E2:
			*normals = latin_capital_letter_ae_with_macron;
			return 2;
		case 0x01E3:
			*normals = latin_small_letter_ae_with_macron;
			return 2;
		case 0x01E6:
			*normals = latin_capital_letter_g_with_caron;
			return 2;
		case 0x01E7:
			*normals = latin_small_letter_g_with_caron;
			return 2;
		case 0x01E8:
			*normals = latin_capital_letter_k_with_caron;
			return 2;
		case 0x01E9:
			*normals = latin_small_letter_k_with_caron;
			return 2;
		case 0x01EA:
			*normals = latin_capital_letter_o_with_ogonek;
			return 2;
		case 0x01EB:
			*normals = latin_small_letter_o_with_ogonek;
			return 2;
		case 0x01EC:
			*normals = latin_capital_letter_o_with_ogonek_and_macron;
			return 2;
		case 0x01ED:
			*normals = latin_small_letter_o_with_ogonek_and_macron;
			return 2;
		case 0x01EE:
			*normals = latin_capital_letter_ezh_with_caron;
			return 2;
		case 0x01EF:
			*normals = latin_small_letter_ezh_with_caron;
			return 2;
		case 0x01F0:
			*normals = latin_small_letter_j_with_caron;
			return 2;
		case 0x01F1:
			*normals = latin_capital_letter_dz;
			return 2;
		case 0x01F2:
			*normals = latin_capital_letter_d_with_small_letter_z;
			return 2;
		case 0x01F3:
			*normals = latin_small_letter_dz;
			return 2;
		case 0x01F4:
			*normals = latin_capital_letter_g_with_acute;
			return 2;
		case 0x01F5:
			*normals = latin_small_letter_g_with_acute;
			return 2;
		case 0x01F8:
			*normals = latin_capital_letter_n_with_grave;
			return 2;
		case 0x01F9:
			*normals = latin_small_letter_n_with_grave;
			return 2;
		case 0x01FA:
			*normals = latin_capital_letter_a_with_ring_above_and_acute;
			return 2;
		case 0x01FB:
			*normals = latin_small_letter_a_with_ring_above_and_acute;
			return 2;
		case 0x01FC:
			*normals = latin_capital_letter_ae_with_acute;
			return 2;
		case 0x01FD:
			*normals = latin_small_letter_ae_with_acute;
			return 2;
		case 0x01FE:
			*normals = latin_capital_letter_o_with_stroke_and_acute;
			return 2;
		case 0x01FF:
			*normals = latin_small_letter_o_with_stroke_and_acute;
			return 2;
		case 0x0200:
			*normals = latin_capital_letter_a_with_double_grave;
			return 2;
		case 0x0201:
			*normals = latin_small_letter_a_with_double_grave;
			return 2;
		case 0x0202:
			*normals = latin_capital_letter_a_with_inverted_breve;
			return 2;
		case 0x0203:
			*normals = latin_small_letter_a_with_inverted_breve;
			return 2;
		case 0x0204:
			*normals = latin_capital_letter_e_with_double_grave;
			return 2;
		case 0x0205:
			*normals = latin_small_letter_e_with_double_grave;
			return 2;
		case 0x0206:
			*normals = latin_capital_letter_e_with_inverted_breve;
			return 2;
		case 0x0207:
			*normals = latin_small_letter_e_with_inverted_breve;
			return 2;
		case 0x0208:
			*normals = latin_capital_letter_i_with_double_grave;
			return 2;
		case 0x0209:
			*normals = latin_small_letter_i_with_double_grave;
			return 2;
		case 0x020A:
			*normals = latin_capital_letter_i_with_inverted_breve;
			return 2;
		case 0x020B:
			*normals = latin_small_letter_i_with_inverted_breve;
			return 2;
		case 0x020C:
			*normals = latin_capital_letter_o_with_double_grave;
			return 2;
		case 0x020D:
			*normals = latin_small_letter_o_with_double_grave;
			return 2;
		case 0x020E:
			*normals = latin_capital_letter_o_with_inverted_breve;
			return 2;
		case 0x020F:
			*normals = latin_small_letter_o_with_inverted_breve;
			return 2;
		case 0x0210:
			*normals = latin_capital_letter_r_with_double_grave;
			return 2;
		case 0x0211:
			*normals = latin_small_letter_r_with_double_grave;
			return 2;
		case 0x0212:
			*normals = latin_capital_letter_r_with_inverted_breve;
			return 2;
		case 0x0213:
			*normals = latin_small_letter_r_with_inverted_breve;
			return 2;
		case 0x0214:
			*normals = latin_capital_letter_u_with_double_grave;
			return 2;
		case 0x0215:
			*normals = latin_small_letter_u_with_double_grave;
			return 2;
		case 0x0216:
			*normals = latin_capital_letter_u_with_inverted_breve;
			return 2;
		case 0x0217:
			*normals = latin_small_letter_u_with_inverted_breve;
			return 2;
		case 0x0218:
			*normals = latin_capital_letter_s_with_comma_below;
			return 2;
		case 0x0219:
			*normals = latin_small_letter_s_with_comma_below;
			return 2;
		case 0x021A:
			*normals = latin_capital_letter_t_with_comma_below;
			return 2;
		case 0x021B:
			*normals = latin_small_letter_t_with_comma_below;
			return 2;
		case 0x021E:
			*normals = latin_capital_letter_h_with_caron;
			return 2;
		case 0x021F:
			*normals = latin_small_letter_h_with_caron;
			return 2;
		case 0x0226:
			*normals = latin_capital_letter_a_with_dot_above;
			return 2;
		case 0x0227:
			*normals = latin_small_letter_a_with_dot_above;
			return 2;
		case 0x0228:
			*normals = latin_capital_letter_e_with_cedilla;
			return 2;
		case 0x0229:
			*normals = latin_small_letter_e_with_cedilla;
			return 2;
		case 0x022A:
			*normals = latin_capital_letter_o_with_diaeresis_and_macron;
			return 2;
		case 0x022B:
			*normals = latin_small_letter_o_with_diaeresis_and_macron;
			return 2;
		case 0x022C:
			*normals = latin_capital_letter_o_with_tilde_and_macron;
			return 2;
		case 0x022D:
			*normals = latin_small_letter_o_with_tilde_and_macron;
			return 2;
		case 0x022E:
			*normals = latin_capital_letter_o_with_dot_above;
			return 2;
		case 0x022F:
			*normals = latin_small_letter_o_with_dot_above;
			return 2;
		case 0x0230:
			*normals = latin_capital_letter_o_with_dot_above_and_macron;
			return 2;
		case 0x0231:
			*normals = latin_small_letter_o_with_dot_above_and_macron;
			return 2;
		case 0x0232:
			*normals = latin_capital_letter_y_with_macron;
			return 2;
		case 0x0233:
			*normals = latin_small_letter_y_with_macron;
			return 2;
		case 0x02B0:
			*normals = modifier_letter_small_h;
			return 1;
		case 0x02B1:
			*normals = modifier_letter_small_h_with_hook;
			return 1;
		case 0x02B2:
			*normals = modifier_letter_small_j;
			return 1;
		case 0x02B3:
			*normals = modifier_letter_small_r;
			return 1;
		case 0x02B4:
			*normals = modifier_letter_small_turned_r;
			return 1;
		case 0x02B5:
			*normals = modifier_letter_small_turned_r_with_hook;
			return 1;
		case 0x02B6:
			*normals = modifier_letter_small_capital_inverted_r;
			return 1;
		case 0x02B7:
			*normals = modifier_letter_small_w;
			return 1;
		case 0x02B8:
			*normals = modifier_letter_small_y;
			return 1;
		case 0x02D8:
			*normals = breve;
			return 2;
		case 0x02D9:
			*normals = dot_above;
			return 2;
		case 0x02DA:
			*normals = ring_above;
			return 2;
		case 0x02DB:
			*normals = ogonek;
			return 2;
		case 0x02DC:
			*normals = small_tilde;
			return 2;
		case 0x02DD:
			*normals = double_acute_accent;
			return 2;
		case 0x02E0:
			*normals = modifier_letter_small_gamma;
			return 1;
		case 0x02E1:
			*normals = modifier_letter_small_l;
			return 1;
		case 0x02E2:
			*normals = modifier_letter_small_s;
			return 1;
		case 0x02E3:
			*normals = modifier_letter_small_x;
			return 1;
		case 0x02E4:
			*normals = modifier_letter_small_reversed_glottal_stop;
			return 1;
		case 0x0340:
			*normals = combining_grave_tone_mark;
			return 1;
		case 0x0341:
			*normals = combining_acute_tone_mark;
			return 1;
		case 0x0343:
			*normals = combining_greek_koronis;
			return 1;
		case 0x0344:
			*normals = combining_greek_dialytika_tonos;
			return 2;
		case 0x0374:
			*normals = greek_numeral_sign;
			return 1;
		case 0x037A:
			*normals = greek_ypogegrammeni;
			return 2;
		case 0x037E:
			*normals = greek_question_mark;
			return 1;
		case 0x0384:
			*normals = greek_tonos;
			return 2;
		case 0x0385:
			*normals = greek_dialytika_tonos;
			return 2;
		case 0x0386:
			*normals = greek_capital_letter_alpha_with_tonos;
			return 2;
		case 0x0387:
			*normals = greek_ano_teleia;
			return 1;
		case 0x0388:
			*normals = greek_capital_letter_epsilon_with_tonos;
			return 2;
		case 0x0389:
			*normals = greek_capital_letter_eta_with_tonos;
			return 2;
		case 0x038A:
			*normals = greek_capital_letter_iota_with_tonos;
			return 2;
		case 0x038C:
			*normals = greek_capital_letter_omicron_with_tonos;
			return 2;
		case 0x038E:
			*normals = greek_capital_letter_upsilon_with_tonos;
			return 2;
		case 0x038F:
			*normals = greek_capital_letter_omega_with_tonos;
			return 2;
		case 0x0390:
			*normals = greek_small_letter_iota_with_dialytika_and_tonos;
			return 2;
		case 0x03AA:
			*normals = greek_capital_letter_iota_with_dialytika;
			return 2;
		case 0x03AB:
			*normals = greek_capital_letter_upsilon_with_dialytika;
			return 2;
		case 0x03AC:
			*normals = greek_small_letter_alpha_with_tonos;
			return 2;
		case 0x03AD:
			*normals = greek_small_letter_epsilon_with_tonos;
			return 2;
		case 0x03AE:
			*normals = greek_small_letter_eta_with_tonos;
			return 2;
		case 0x03AF:
			*normals = greek_small_letter_iota_with_tonos;
			return 2;
		case 0x03B0:
			*normals = greek_small_letter_upsilon_with_dialytika_and_tonos;
			return 2;
		case 0x03CA:
			*normals = greek_small_letter_iota_with_dialytika;
			return 2;
		case 0x03CB:
			*normals = greek_small_letter_upsilon_with_dialytika;
			return 2;
		case 0x03CC:
			*normals = greek_small_letter_omicron_with_tonos;
			return 2;
		case 0x03CD:
			*normals = greek_small_letter_upsilon_with_tonos;
			return 2;
		case 0x03CE:
			*normals = greek_small_letter_omega_with_tonos;
			return 2;
		case 0x03D0:
			*normals = greek_beta_symbol;
			return 1;
		case 0x03D1:
			*normals = greek_theta_symbol;
			return 1;
		case 0x03D2:
			*normals = greek_upsilon_with_hook_symbol;
			return 1;
		case 0x03D3:
			*normals = greek_upsilon_with_acute_and_hook_symbol;
			return 2;
		case 0x03D4:
			*normals = greek_upsilon_with_diaeresis_and_hook_symbol;
			return 2;
		case 0x03D5:
			*normals = greek_phi_symbol;
			return 1;
		case 0x03D6:
			*normals = greek_pi_symbol;
			return 1;
		case 0x03F0:
			*normals = greek_kappa_symbol;
			return 1;
		case 0x03F1:
			*normals = greek_rho_symbol;
			return 1;
		case 0x03F2:
			*normals = greek_lunate_sigma_symbol;
			return 1;
		case 0x03F4:
			*normals = greek_capital_theta_symbol;
			return 1;
		case 0x03F5:
			*normals = greek_lunate_epsilon_symbol;
			return 1;
		case 0x03F9:
			*normals = greek_capital_lunate_sigma_symbol;
			return 1;
		case 0x0400:
			*normals = cyrillic_capital_letter_ie_with_grave;
			return 2;
		case 0x0401:
			*normals = cyrillic_capital_letter_io;
			return 2;
		case 0x0403:
			*normals = cyrillic_capital_letter_gje;
			return 2;
		case 0x0407:
			*normals = cyrillic_capital_letter_yi;
			return 2;
		case 0x040C:
			*normals = cyrillic_capital_letter_kje;
			return 2;
		case 0x040D:
			*normals = cyrillic_capital_letter_i_with_grave;
			return 2;
		case 0x040E:
			*normals = cyrillic_capital_letter_short_u;
			return 2;
		case 0x0419:
			*normals = cyrillic_capital_letter_short_i;
			return 2;
		case 0x0439:
			*normals = cyrillic_small_letter_short_i;
			return 2;
		case 0x0450:
			*normals = cyrillic_small_letter_ie_with_grave;
			return 2;
		case 0x0451:
			*normals = cyrillic_small_letter_io;
			return 2;
		case 0x0453:
			*normals = cyrillic_small_letter_gje;
			return 2;
		case 0x0457:
			*normals = cyrillic_small_letter_yi;
			return 2;
		case 0x045C:
			*normals = cyrillic_small_letter_kje;
			return 2;
		case 0x045D:
			*normals = cyrillic_small_letter_i_with_grave;
			return 2;
		case 0x045E:
			*normals = cyrillic_small_letter_short_u;
			return 2;
		case 0x0476:
			*normals = cyrillic_capital_letter_izhitsa_with_double_grave_accent;
			return 2;
		case 0x0477:
			*normals = cyrillic_small_letter_izhitsa_with_double_grave_accent;
			return 2;
		case 0x04C1:
			*normals = cyrillic_capital_letter_zhe_with_breve;
			return 2;
		case 0x04C2:
			*normals = cyrillic_small_letter_zhe_with_breve;
			return 2;
		case 0x04D0:
			*normals = cyrillic_capital_letter_a_with_breve;
			return 2;
		case 0x04D1:
			*normals = cyrillic_small_letter_a_with_breve;
			return 2;
		case 0x04D2:
			*normals = cyrillic_capital_letter_a_with_diaeresis;
			return 2;
		case 0x04D3:
			*normals = cyrillic_small_letter_a_with_diaeresis;
			return 2;
		case 0x04D6:
			*normals = cyrillic_capital_letter_ie_with_breve;
			return 2;
		case 0x04D7:
			*normals = cyrillic_small_letter_ie_with_breve;
			return 2;
		case 0x04DA:
			*normals = cyrillic_capital_letter_schwa_with_diaeresis;
			return 2;
		case 0x04DB:
			*normals = cyrillic_small_letter_schwa_with_diaeresis;
			return 2;
		case 0x04DC:
			*normals = cyrillic_capital_letter_zhe_with_diaeresis;
			return 2;
		case 0x04DD:
			*normals = cyrillic_small_letter_zhe_with_diaeresis;
			return 2;
		case 0x04DE:
			*normals = cyrillic_capital_letter_ze_with_diaeresis;
			return 2;
		case 0x04DF:
			*normals = cyrillic_small_letter_ze_with_diaeresis;
			return 2;
		case 0x04E2:
			*normals = cyrillic_capital_letter_i_with_macron;
			return 2;
		case 0x04E3:
			*normals = cyrillic_small_letter_i_with_macron;
			return 2;
		case 0x04E4:
			*normals = cyrillic_capital_letter_i_with_diaeresis;
			return 2;
		case 0x04E5:
			*normals = cyrillic_small_letter_i_with_diaeresis;
			return 2;
		case 0x04E6:
			*normals = cyrillic_capital_letter_o_with_diaeresis;
			return 2;
		case 0x04E7:
			*normals = cyrillic_small_letter_o_with_diaeresis;
			return 2;
		case 0x04EA:
			*normals = cyrillic_capital_letter_barred_o_with_diaeresis;
			return 2;
		case 0x04EB:
			*normals = cyrillic_small_letter_barred_o_with_diaeresis;
			return 2;
		case 0x04EC:
			*normals = cyrillic_capital_letter_e_with_diaeresis;
			return 2;
		case 0x04ED:
			*normals = cyrillic_small_letter_e_with_diaeresis;
			return 2;
		case 0x04EE:
			*normals = cyrillic_capital_letter_u_with_macron;
			return 2;
		case 0x04EF:
			*normals = cyrillic_small_letter_u_with_macron;
			return 2;
		case 0x04F0:
			*normals = cyrillic_capital_letter_u_with_diaeresis;
			return 2;
		case 0x04F1:
			*normals = cyrillic_small_letter_u_with_diaeresis;
			return 2;
		case 0x04F2:
			*normals = cyrillic_capital_letter_u_with_double_acute;
			return 2;
		case 0x04F3:
			*normals = cyrillic_small_letter_u_with_double_acute;
			return 2;
		case 0x04F4:
			*normals = cyrillic_capital_letter_che_with_diaeresis;
			return 2;
		case 0x04F5:
			*normals = cyrillic_small_letter_che_with_diaeresis;
			return 2;
		case 0x04F8:
			*normals = cyrillic_capital_letter_yeru_with_diaeresis;
			return 2;
		case 0x04F9:
			*normals = cyrillic_small_letter_yeru_with_diaeresis;
			return 2;
		case 0x0587:
			*normals = armenian_small_ligature_ech_yiwn;
			return 2;
		case 0x0622:
			*normals = arabic_letter_alef_with_madda_above;
			return 2;
		case 0x0623:
			*normals = arabic_letter_alef_with_hamza_above;
			return 2;
		case 0x0624:
			*normals = arabic_letter_waw_with_hamza_above;
			return 2;
		case 0x0625:
			*normals = arabic_letter_alef_with_hamza_below;
			return 2;
		case 0x0626:
			*normals = arabic_letter_yeh_with_hamza_above;
			return 2;
		case 0x0675:
			*normals = arabic_letter_high_hamza_alef;
			return 2;
		case 0x0676:
			*normals = arabic_letter_high_hamza_waw;
			return 2;
		case 0x0677:
			*normals = arabic_letter_u_with_hamza_above;
			return 2;
		case 0x0678:
			*normals = arabic_letter_high_hamza_yeh;
			return 2;
		case 0x06C0:
			*normals = arabic_letter_heh_with_yeh_above;
			return 2;
		case 0x06C2:
			*normals = arabic_letter_heh_goal_with_hamza_above;
			return 2;
		case 0x06D3:
			*normals = arabic_letter_yeh_barree_with_hamza_above;
			return 2;
		case 0x0929:
			*normals = devanagari_letter_nnna;
			return 2;
		case 0x0931:
			*normals = devanagari_letter_rra;
			return 2;
		case 0x0934:
			*normals = devanagari_letter_llla;
			return 2;
		case 0x0958:
			*normals = devanagari_letter_qa;
			return 2;
		case 0x0959:
			*normals = devanagari_letter_khha;
			return 2;
		case 0x095A:
			*normals = devanagari_letter_ghha;
			return 2;
		case 0x095B:
			*normals = devanagari_letter_za;
			return 2;
		case 0x095C:
			*normals = devanagari_letter_dddha;
			return 2;
		case 0x095D:
			*normals = devanagari_letter_rha;
			return 2;
		case 0x095E:
			*normals = devanagari_letter_fa;
			return 2;
		case 0x095F:
			*normals = devanagari_letter_yya;
			return 2;
		case 0x09CB:
			*normals = bengali_vowel_sign_o;
			return 2;
		case 0x09CC:
			*normals = bengali_vowel_sign_au;
			return 2;
		case 0x09DC:
			*normals = bengali_letter_rra;
			return 2;
		case 0x09DD:
			*normals = bengali_letter_rha;
			return 2;
		case 0x09DF:
			*normals = bengali_letter_yya;
			return 2;
		case 0x0A33:
			*normals = gurmukhi_letter_lla;
			return 2;
		case 0x0A36:
			*normals = gurmukhi_letter_sha;
			return 2;
		case 0x0A59:
			*normals = gurmukhi_letter_khha;
			return 2;
		case 0x0A5A:
			*normals = gurmukhi_letter_ghha;
			return 2;
		case 0x0A5B:
			*normals = gurmukhi_letter_za;
			return 2;
		case 0x0A5E:
			*normals = gurmukhi_letter_fa;
			return 2;
		case 0x0B48:
			*normals = oriya_vowel_sign_ai;
			return 2;
		case 0x0B4B:
			*normals = oriya_vowel_sign_o;
			return 2;
		case 0x0B4C:
			*normals = oriya_vowel_sign_au;
			return 2;
		case 0x0B5C:
			*normals = oriya_letter_rra;
			return 2;
		case 0x0B5D:
			*normals = oriya_letter_rha;
			return 2;
		case 0x0B94:
			*normals = tamil_letter_au;
			return 2;
		case 0x0BCA:
			*normals = tamil_vowel_sign_o;
			return 2;
		case 0x0BCB:
			*normals = tamil_vowel_sign_oo;
			return 2;
		case 0x0BCC:
			*normals = tamil_vowel_sign_au;
			return 2;
		case 0x0C48:
			*normals = telugu_vowel_sign_ai;
			return 2;
		case 0x0CC0:
			*normals = kannada_vowel_sign_ii;
			return 2;
		case 0x0CC7:
			*normals = kannada_vowel_sign_ee;
			return 2;
		case 0x0CC8:
			*normals = kannada_vowel_sign_ai;
			return 2;
		case 0x0CCA:
			*normals = kannada_vowel_sign_o;
			return 2;
		case 0x0CCB:
			*normals = kannada_vowel_sign_oo;
			return 2;
		case 0x0D4A:
			*normals = malayalam_vowel_sign_o;
			return 2;
		case 0x0D4B:
			*normals = malayalam_vowel_sign_oo;
			return 2;
		case 0x0D4C:
			*normals = malayalam_vowel_sign_au;
			return 2;
		case 0x0DDA:
			*normals = sinhala_vowel_sign_diga_kombuva;
			return 2;
		case 0x0DDC:
			*normals = sinhala_vowel_sign_kombuva_haa_aela_pilla;
			return 2;
		case 0x0DDD:
			*normals = sinhala_vowel_sign_kombuva_haa_diga_aela_pilla;
			return 2;
		case 0x0DDE:
			*normals = sinhala_vowel_sign_kombuva_haa_gayanukitta;
			return 2;
		case 0x0E33:
			*normals = thai_character_sara_am;
			return 2;
		case 0x0EB3:
			*normals = lao_vowel_sign_am;
			return 2;
		case 0x0EDC:
			*normals = lao_ho_no;
			return 2;
		case 0x0EDD:
			*normals = lao_ho_mo;
			return 2;
		case 0x0F0C:
			*normals = tibetan_mark_delimiter_tsheg_bstar;
			return 1;
		case 0x0F43:
			*normals = tibetan_letter_gha;
			return 2;
		case 0x0F4D:
			*normals = tibetan_letter_ddha;
			return 2;
		case 0x0F52:
			*normals = tibetan_letter_dha;
			return 2;
		case 0x0F57:
			*normals = tibetan_letter_bha;
			return 2;
		case 0x0F5C:
			*normals = tibetan_letter_dzha;
			return 2;
		case 0x0F69:
			*normals = tibetan_letter_kssa;
			return 2;
		case 0x0F73:
			*normals = tibetan_vowel_sign_ii;
			return 2;
		case 0x0F75:
			*normals = tibetan_vowel_sign_uu;
			return 2;
		case 0x0F76:
			*normals = tibetan_vowel_sign_vocalic_r;
			return 2;
		case 0x0F77:
			*normals = tibetan_vowel_sign_vocalic_rr;
			return 2;
		case 0x0F78:
			*normals = tibetan_vowel_sign_vocalic_l;
			return 2;
		case 0x0F79:
			*normals = tibetan_vowel_sign_vocalic_ll;
			return 2;
		case 0x0F81:
			*normals = tibetan_vowel_sign_reversed_ii;
			return 2;
		case 0x0F93:
			*normals = tibetan_subjoined_letter_gha;
			return 2;
		case 0x0F9D:
			*normals = tibetan_subjoined_letter_ddha;
			return 2;
		case 0x0FA2:
			*normals = tibetan_subjoined_letter_dha;
			return 2;
		case 0x0FA7:
			*normals = tibetan_subjoined_letter_bha;
			return 2;
		case 0x0FAC:
			*normals = tibetan_subjoined_letter_dzha;
			return 2;
		case 0x0FB9:
			*normals = tibetan_subjoined_letter_kssa;
			return 2;
		case 0x1026:
			*normals = myanmar_letter_uu;
			return 2;
		case 0x10FC:
			*normals = modifier_letter_georgian_nar;
			return 1;
		case 0x1B06:
			*normals = balinese_letter_akara_tedung;
			return 2;
		case 0x1B08:
			*normals = balinese_letter_ikara_tedung;
			return 2;
		case 0x1B0A:
			*normals = balinese_letter_ukara_tedung;
			return 2;
		case 0x1B0C:
			*normals = balinese_letter_ra_repa_tedung;
			return 2;
		case 0x1B0E:
			*normals = balinese_letter_la_lenga_tedung;
			return 2;
		case 0x1B12:
			*normals = balinese_letter_okara_tedung;
			return 2;
		case 0x1B3B:
			*normals = balinese_vowel_sign_ra_repa_tedung;
			return 2;
		case 0x1B3D:
			*normals = balinese_vowel_sign_la_lenga_tedung;
			return 2;
		case 0x1B40:
			*normals = balinese_vowel_sign_taling_tedung;
			return 2;
		case 0x1B41:
			*normals = balinese_vowel_sign_taling_repa_tedung;
			return 2;
		case 0x1B43:
			*normals = balinese_vowel_sign_pepet_tedung;
			return 2;
		case 0x1D2C:
			*normals = modifier_letter_capital_a;
			return 1;
		case 0x1D2D:
			*normals = modifier_letter_capital_ae;
			return 1;
		case 0x1D2E:
			*normals = modifier_letter_capital_b;
			return 1;
		case 0x1D30:
			*normals = modifier_letter_capital_d;
			return 1;
		case 0x1D31:
			*normals = modifier_letter_capital_e;
			return 1;
		case 0x1D32:
			*normals = modifier_letter_capital_reversed_e;
			return 1;
		case 0x1D33:
			*normals = modifier_letter_capital_g;
			return 1;
		case 0x1D34:
			*normals = modifier_letter_capital_h;
			return 1;
		case 0x1D35:
			*normals = modifier_letter_capital_i;
			return 1;
		case 0x1D36:
			*normals = modifier_letter_capital_j;
			return 1;
		case 0x1D37:
			*normals = modifier_letter_capital_k;
			return 1;
		case 0x1D38:
			*normals = modifier_letter_capital_l;
			return 1;
		case 0x1D39:
			*normals = modifier_letter_capital_m;
			return 1;
		case 0x1D3A:
			*normals = modifier_letter_capital_n;
			return 1;
		case 0x1D3C:
			*normals = modifier_letter_capital_o;
			return 1;
		case 0x1D3D:
			*normals = modifier_letter_capital_ou;
			return 1;
		case 0x1D3E:
			*normals = modifier_letter_capital_p;
			return 1;
		case 0x1D3F:
			*normals = modifier_letter_capital_r;
			return 1;
		case 0x1D40:
			*normals = modifier_letter_capital_t;
			return 1;
		case 0x1D41:
			*normals = modifier_letter_capital_u;
			return 1;
		case 0x1D42:
			*normals = modifier_letter_capital_w;
			return 1;
		case 0x1D43:
			*normals = modifier_letter_small_a;
			return 1;
		case 0x1D44:
			*normals = modifier_letter_small_turned_a;
			return 1;
		case 0x1D45:
			*normals = modifier_letter_small_alpha;
			return 1;
		case 0x1D46:
			*normals = modifier_letter_small_turned_ae;
			return 1;
		case 0x1D47:
			*normals = modifier_letter_small_b;
			return 1;
		case 0x1D48:
			*normals = modifier_letter_small_d;
			return 1;
		case 0x1D49:
			*normals = modifier_letter_small_e;
			return 1;
		case 0x1D4A:
			*normals = modifier_letter_small_schwa;
			return 1;
		case 0x1D4B:
			*normals = modifier_letter_small_open_e;
			return 1;
		case 0x1D4C:
			*normals = modifier_letter_small_turned_open_e;
			return 1;
		case 0x1D4D:
			*normals = modifier_letter_small_g;
			return 1;
		case 0x1D4F:
			*normals = modifier_letter_small_k;
			return 1;
		case 0x1D50:
			*normals = modifier_letter_small_m;
			return 1;
		case 0x1D51:
			*normals = modifier_letter_small_eng;
			return 1;
		case 0x1D52:
			*normals = modifier_letter_small_o;
			return 1;
		case 0x1D53:
			*normals = modifier_letter_small_open_o;
			return 1;
		case 0x1D54:
			*normals = modifier_letter_small_top_half_o;
			return 1;
		case 0x1D55:
			*normals = modifier_letter_small_bottom_half_o;
			return 1;
		case 0x1D56:
			*normals = modifier_letter_small_p;
			return 1;
		case 0x1D57:
			*normals = modifier_letter_small_t;
			return 1;
		case 0x1D58:
			*normals = modifier_letter_small_u;
			return 1;
		case 0x1D59:
			*normals = modifier_letter_small_sideways_u;
			return 1;
		case 0x1D5A:
			*normals = modifier_letter_small_turned_m;
			return 1;
		case 0x1D5B:
			*normals = modifier_letter_small_v;
			return 1;
		case 0x1D5C:
			*normals = modifier_letter_small_ain;
			return 1;
		case 0x1D5D:
			*normals = modifier_letter_small_beta;
			return 1;
		case 0x1D5E:
			*normals = modifier_letter_small_greek_gamma;
			return 1;
		case 0x1D5F:
			*normals = modifier_letter_small_delta;
			return 1;
		case 0x1D60:
			*normals = modifier_letter_small_greek_phi;
			return 1;
		case 0x1D61:
			*normals = modifier_letter_small_chi;
			return 1;
		case 0x1D62:
			*normals = latin_subscript_small_letter_i;
			return 1;
		case 0x1D63:
			*normals = latin_subscript_small_letter_r;
			return 1;
		case 0x1D64:
			*normals = latin_subscript_small_letter_u;
			return 1;
		case 0x1D65:
			*normals = latin_subscript_small_letter_v;
			return 1;
		case 0x1D66:
			*normals = greek_subscript_small_letter_beta;
			return 1;
		case 0x1D67:
			*normals = greek_subscript_small_letter_gamma;
			return 1;
		case 0x1D68:
			*normals = greek_subscript_small_letter_rho;
			return 1;
		case 0x1D69:
			*normals = greek_subscript_small_letter_phi;
			return 1;
		case 0x1D6A:
			*normals = greek_subscript_small_letter_chi;
			return 1;
		case 0x1D78:
			*normals = modifier_letter_cyrillic_en;
			return 1;
		case 0x1D9B:
			*normals = modifier_letter_small_turned_alpha;
			return 1;
		case 0x1D9C:
			*normals = modifier_letter_small_c;
			return 1;
		case 0x1D9D:
			*normals = modifier_letter_small_c_with_curl;
			return 1;
		case 0x1D9E:
			*normals = modifier_letter_small_eth;
			return 1;
		case 0x1D9F:
			*normals = modifier_letter_small_reversed_open_e;
			return 1;
		case 0x1DA0:
			*normals = modifier_letter_small_f;
			return 1;
		case 0x1DA1:
			*normals = modifier_letter_small_dotless_j_with_stroke;
			return 1;
		case 0x1DA2:
			*normals = modifier_letter_small_script_g;
			return 1;
		case 0x1DA3:
			*normals = modifier_letter_small_turned_h;
			return 1;
		case 0x1DA4:
			*normals = modifier_letter_small_i_with_stroke;
			return 1;
		case 0x1DA5:
			*normals = modifier_letter_small_iota;
			return 1;
		case 0x1DA6:
			*normals = modifier_letter_small_capital_i;
			return 1;
		case 0x1DA7:
			*normals = modifier_letter_small_capital_i_with_stroke;
			return 1;
		case 0x1DA8:
			*normals = modifier_letter_small_j_with_crossed_tail;
			return 1;
		case 0x1DA9:
			*normals = modifier_letter_small_l_with_retroflex_hook;
			return 1;
		case 0x1DAA:
			*normals = modifier_letter_small_l_with_palatal_hook;
			return 1;
		case 0x1DAB:
			*normals = modifier_letter_small_capital_l;
			return 1;
		case 0x1DAC:
			*normals = modifier_letter_small_m_with_hook;
			return 1;
		case 0x1DAD:
			*normals = modifier_letter_small_turned_m_with_long_leg;
			return 1;
		case 0x1DAE:
			*normals = modifier_letter_small_n_with_left_hook;
			return 1;
		case 0x1DAF:
			*normals = modifier_letter_small_n_with_retroflex_hook;
			return 1;
		case 0x1DB0:
			*normals = modifier_letter_small_capital_n;
			return 1;
		case 0x1DB1:
			*normals = modifier_letter_small_barred_o;
			return 1;
		case 0x1DB2:
			*normals = modifier_letter_small_phi;
			return 1;
		case 0x1DB3:
			*normals = modifier_letter_small_s_with_hook;
			return 1;
		case 0x1DB4:
			*normals = modifier_letter_small_esh;
			return 1;
		case 0x1DB5:
			*normals = modifier_letter_small_t_with_palatal_hook;
			return 1;
		case 0x1DB6:
			*normals = modifier_letter_small_u_bar;
			return 1;
		case 0x1DB7:
			*normals = modifier_letter_small_upsilon;
			return 1;
		case 0x1DB8:
			*normals = modifier_letter_small_capital_u;
			return 1;
		case 0x1DB9:
			*normals = modifier_letter_small_v_with_hook;
			return 1;
		case 0x1DBA:
			*normals = modifier_letter_small_turned_v;
			return 1;
		case 0x1DBB:
			*normals = modifier_letter_small_z;
			return 1;
		case 0x1DBC:
			*normals = modifier_letter_small_z_with_retroflex_hook;
			return 1;
		case 0x1DBD:
			*normals = modifier_letter_small_z_with_curl;
			return 1;
		case 0x1DBE:
			*normals = modifier_letter_small_ezh;
			return 1;
		case 0x1DBF:
			*normals = modifier_letter_small_theta;
			return 1;
		case 0x1E00:
			*normals = latin_capital_letter_a_with_ring_below;
			return 2;
		case 0x1E01:
			*normals = latin_small_letter_a_with_ring_below;
			return 2;
		case 0x1E02:
			*normals = latin_capital_letter_b_with_dot_above;
			return 2;
		case 0x1E03:
			*normals = latin_small_letter_b_with_dot_above;
			return 2;
		case 0x1E04:
			*normals = latin_capital_letter_b_with_dot_below;
			return 2;
		case 0x1E05:
			*normals = latin_small_letter_b_with_dot_below;
			return 2;
		case 0x1E06:
			*normals = latin_capital_letter_b_with_line_below;
			return 2;
		case 0x1E07:
			*normals = latin_small_letter_b_with_line_below;
			return 2;
		case 0x1E08:
			*normals = latin_capital_letter_c_with_cedilla_and_acute;
			return 2;
		case 0x1E09:
			*normals = latin_small_letter_c_with_cedilla_and_acute;
			return 2;
		case 0x1E0A:
			*normals = latin_capital_letter_d_with_dot_above;
			return 2;
		case 0x1E0B:
			*normals = latin_small_letter_d_with_dot_above;
			return 2;
		case 0x1E0C:
			*normals = latin_capital_letter_d_with_dot_below;
			return 2;
		case 0x1E0D:
			*normals = latin_small_letter_d_with_dot_below;
			return 2;
		case 0x1E0E:
			*normals = latin_capital_letter_d_with_line_below;
			return 2;
		case 0x1E0F:
			*normals = latin_small_letter_d_with_line_below;
			return 2;
		case 0x1E10:
			*normals = latin_capital_letter_d_with_cedilla;
			return 2;
		case 0x1E11:
			*normals = latin_small_letter_d_with_cedilla;
			return 2;
		case 0x1E12:
			*normals = latin_capital_letter_d_with_circumflex_below;
			return 2;
		case 0x1E13:
			*normals = latin_small_letter_d_with_circumflex_below;
			return 2;
		case 0x1E14:
			*normals = latin_capital_letter_e_with_macron_and_grave;
			return 2;
		case 0x1E15:
			*normals = latin_small_letter_e_with_macron_and_grave;
			return 2;
		case 0x1E16:
			*normals = latin_capital_letter_e_with_macron_and_acute;
			return 2;
		case 0x1E17:
			*normals = latin_small_letter_e_with_macron_and_acute;
			return 2;
		case 0x1E18:
			*normals = latin_capital_letter_e_with_circumflex_below;
			return 2;
		case 0x1E19:
			*normals = latin_small_letter_e_with_circumflex_below;
			return 2;
		case 0x1E1A:
			*normals = latin_capital_letter_e_with_tilde_below;
			return 2;
		case 0x1E1B:
			*normals = latin_small_letter_e_with_tilde_below;
			return 2;
		case 0x1E1C:
			*normals = latin_capital_letter_e_with_cedilla_and_breve;
			return 2;
		case 0x1E1D:
			*normals = latin_small_letter_e_with_cedilla_and_breve;
			return 2;
		case 0x1E1E:
			*normals = latin_capital_letter_f_with_dot_above;
			return 2;
		case 0x1E1F:
			*normals = latin_small_letter_f_with_dot_above;
			return 2;
		case 0x1E20:
			*normals = latin_capital_letter_g_with_macron;
			return 2;
		case 0x1E21:
			*normals = latin_small_letter_g_with_macron;
			return 2;
		case 0x1E22:
			*normals = latin_capital_letter_h_with_dot_above;
			return 2;
		case 0x1E23:
			*normals = latin_small_letter_h_with_dot_above;
			return 2;
		case 0x1E24:
			*normals = latin_capital_letter_h_with_dot_below;
			return 2;
		case 0x1E25:
			*normals = latin_small_letter_h_with_dot_below;
			return 2;
		case 0x1E26:
			*normals = latin_capital_letter_h_with_diaeresis;
			return 2;
		case 0x1E27:
			*normals = latin_small_letter_h_with_diaeresis;
			return 2;
		case 0x1E28:
			*normals = latin_capital_letter_h_with_cedilla;
			return 2;
		case 0x1E29:
			*normals = latin_small_letter_h_with_cedilla;
			return 2;
		case 0x1E2A:
			*normals = latin_capital_letter_h_with_breve_below;
			return 2;
		case 0x1E2B:
			*normals = latin_small_letter_h_with_breve_below;
			return 2;
		case 0x1E2C:
			*normals = latin_capital_letter_i_with_tilde_below;
			return 2;
		case 0x1E2D:
			*normals = latin_small_letter_i_with_tilde_below;
			return 2;
		case 0x1E2E:
			*normals = latin_capital_letter_i_with_diaeresis_and_acute;
			return 2;
		case 0x1E2F:
			*normals = latin_small_letter_i_with_diaeresis_and_acute;
			return 2;
		case 0x1E30:
			*normals = latin_capital_letter_k_with_acute;
			return 2;
		case 0x1E31:
			*normals = latin_small_letter_k_with_acute;
			return 2;
		case 0x1E32:
			*normals = latin_capital_letter_k_with_dot_below;
			return 2;
		case 0x1E33:
			*normals = latin_small_letter_k_with_dot_below;
			return 2;
		case 0x1E34:
			*normals = latin_capital_letter_k_with_line_below;
			return 2;
		case 0x1E35:
			*normals = latin_small_letter_k_with_line_below;
			return 2;
		case 0x1E36:
			*normals = latin_capital_letter_l_with_dot_below;
			return 2;
		case 0x1E37:
			*normals = latin_small_letter_l_with_dot_below;
			return 2;
		case 0x1E38:
			*normals = latin_capital_letter_l_with_dot_below_and_macron;
			return 2;
		case 0x1E39:
			*normals = latin_small_letter_l_with_dot_below_and_macron;
			return 2;
		case 0x1E3A:
			*normals = latin_capital_letter_l_with_line_below;
			return 2;
		case 0x1E3B:
			*normals = latin_small_letter_l_with_line_below;
			return 2;
		case 0x1E3C:
			*normals = latin_capital_letter_l_with_circumflex_below;
			return 2;
		case 0x1E3D:
			*normals = latin_small_letter_l_with_circumflex_below;
			return 2;
		case 0x1E3E:
			*normals = latin_capital_letter_m_with_acute;
			return 2;
		case 0x1E3F:
			*normals = latin_small_letter_m_with_acute;
			return 2;
		case 0x1E40:
			*normals = latin_capital_letter_m_with_dot_above;
			return 2;
		case 0x1E41:
			*normals = latin_small_letter_m_with_dot_above;
			return 2;
		case 0x1E42:
			*normals = latin_capital_letter_m_with_dot_below;
			return 2;
		case 0x1E43:
			*normals = latin_small_letter_m_with_dot_below;
			return 2;
		case 0x1E44:
			*normals = latin_capital_letter_n_with_dot_above;
			return 2;
		case 0x1E45:
			*normals = latin_small_letter_n_with_dot_above;
			return 2;
		case 0x1E46:
			*normals = latin_capital_letter_n_with_dot_below;
			return 2;
		case 0x1E47:
			*normals = latin_small_letter_n_with_dot_below;
			return 2;
		case 0x1E48:
			*normals = latin_capital_letter_n_with_line_below;
			return 2;
		case 0x1E49:
			*normals = latin_small_letter_n_with_line_below;
			return 2;
		case 0x1E4A:
			*normals = latin_capital_letter_n_with_circumflex_below;
			return 2;
		case 0x1E4B:
			*normals = latin_small_letter_n_with_circumflex_below;
			return 2;
		case 0x1E4C:
			*normals = latin_capital_letter_o_with_tilde_and_acute;
			return 2;
		case 0x1E4D:
			*normals = latin_small_letter_o_with_tilde_and_acute;
			return 2;
		case 0x1E4E:
			*normals = latin_capital_letter_o_with_tilde_and_diaeresis;
			return 2;
		case 0x1E4F:
			*normals = latin_small_letter_o_with_tilde_and_diaeresis;
			return 2;
		case 0x1E50:
			*normals = latin_capital_letter_o_with_macron_and_grave;
			return 2;
		case 0x1E51:
			*normals = latin_small_letter_o_with_macron_and_grave;
			return 2;
		case 0x1E52:
			*normals = latin_capital_letter_o_with_macron_and_acute;
			return 2;
		case 0x1E53:
			*normals = latin_small_letter_o_with_macron_and_acute;
			return 2;
		case 0x1E54:
			*normals = latin_capital_letter_p_with_acute;
			return 2;
		case 0x1E55:
			*normals = latin_small_letter_p_with_acute;
			return 2;
		case 0x1E56:
			*normals = latin_capital_letter_p_with_dot_above;
			return 2;
		case 0x1E57:
			*normals = latin_small_letter_p_with_dot_above;
			return 2;
		case 0x1E58:
			*normals = latin_capital_letter_r_with_dot_above;
			return 2;
		case 0x1E59:
			*normals = latin_small_letter_r_with_dot_above;
			return 2;
		case 0x1E5A:
			*normals = latin_capital_letter_r_with_dot_below;
			return 2;
		case 0x1E5B:
			*normals = latin_small_letter_r_with_dot_below;
			return 2;
		case 0x1E5C:
			*normals = latin_capital_letter_r_with_dot_below_and_macron;
			return 2;
		case 0x1E5D:
			*normals = latin_small_letter_r_with_dot_below_and_macron;
			return 2;
		case 0x1E5E:
			*normals = latin_capital_letter_r_with_line_below;
			return 2;
		case 0x1E5F:
			*normals = latin_small_letter_r_with_line_below;
			return 2;
		case 0x1E60:
			*normals = latin_capital_letter_s_with_dot_above;
			return 2;
		case 0x1E61:
			*normals = latin_small_letter_s_with_dot_above;
			return 2;
		case 0x1E62:
			*normals = latin_capital_letter_s_with_dot_below;
			return 2;
		case 0x1E63:
			*normals = latin_small_letter_s_with_dot_below;
			return 2;
		case 0x1E64:
			*normals = latin_capital_letter_s_with_acute_and_dot_above;
			return 2;
		case 0x1E65:
			*normals = latin_small_letter_s_with_acute_and_dot_above;
			return 2;
		case 0x1E66:
			*normals = latin_capital_letter_s_with_caron_and_dot_above;
			return 2;
		case 0x1E67:
			*normals = latin_small_letter_s_with_caron_and_dot_above;
			return 2;
		case 0x1E68:
			*normals = latin_capital_letter_s_with_dot_below_and_dot_above;
			return 2;
		case 0x1E69:
			*normals = latin_small_letter_s_with_dot_below_and_dot_above;
			return 2;
		case 0x1E6A:
			*normals = latin_capital_letter_t_with_dot_above;
			return 2;
		case 0x1E6B:
			*normals = latin_small_letter_t_with_dot_above;
			return 2;
		case 0x1E6C:
			*normals = latin_capital_letter_t_with_dot_below;
			return 2;
		case 0x1E6D:
			*normals = latin_small_letter_t_with_dot_below;
			return 2;
		case 0x1E6E:
			*normals = latin_capital_letter_t_with_line_below;
			return 2;
		case 0x1E6F:
			*normals = latin_small_letter_t_with_line_below;
			return 2;
		case 0x1E70:
			*normals = latin_capital_letter_t_with_circumflex_below;
			return 2;
		case 0x1E71:
			*normals = latin_small_letter_t_with_circumflex_below;
			return 2;
		case 0x1E72:
			*normals = latin_capital_letter_u_with_diaeresis_below;
			return 2;
		case 0x1E73:
			*normals = latin_small_letter_u_with_diaeresis_below;
			return 2;
		case 0x1E74:
			*normals = latin_capital_letter_u_with_tilde_below;
			return 2;
		case 0x1E75:
			*normals = latin_small_letter_u_with_tilde_below;
			return 2;
		case 0x1E76:
			*normals = latin_capital_letter_u_with_circumflex_below;
			return 2;
		case 0x1E77:
			*normals = latin_small_letter_u_with_circumflex_below;
			return 2;
		case 0x1E78:
			*normals = latin_capital_letter_u_with_tilde_and_acute;
			return 2;
		case 0x1E79:
			*normals = latin_small_letter_u_with_tilde_and_acute;
			return 2;
		case 0x1E7A:
			*normals = latin_capital_letter_u_with_macron_and_diaeresis;
			return 2;
		case 0x1E7B:
			*normals = latin_small_letter_u_with_macron_and_diaeresis;
			return 2;
		case 0x1E7C:
			*normals = latin_capital_letter_v_with_tilde;
			return 2;
		case 0x1E7D:
			*normals = latin_small_letter_v_with_tilde;
			return 2;
		case 0x1E7E:
			*normals = latin_capital_letter_v_with_dot_below;
			return 2;
		case 0x1E7F:
			*normals = latin_small_letter_v_with_dot_below;
			return 2;
		case 0x1E80:
			*normals = latin_capital_letter_w_with_grave;
			return 2;
		case 0x1E81:
			*normals = latin_small_letter_w_with_grave;
			return 2;
		case 0x1E82:
			*normals = latin_capital_letter_w_with_acute;
			return 2;
		case 0x1E83:
			*normals = latin_small_letter_w_with_acute;
			return 2;
		case 0x1E84:
			*normals = latin_capital_letter_w_with_diaeresis;
			return 2;
		case 0x1E85:
			*normals = latin_small_letter_w_with_diaeresis;
			return 2;
		case 0x1E86:
			*normals = latin_capital_letter_w_with_dot_above;
			return 2;
		case 0x1E87:
			*normals = latin_small_letter_w_with_dot_above;
			return 2;
		case 0x1E88:
			*normals = latin_capital_letter_w_with_dot_below;
			return 2;
		case 0x1E89:
			*normals = latin_small_letter_w_with_dot_below;
			return 2;
		case 0x1E8A:
			*normals = latin_capital_letter_x_with_dot_above;
			return 2;
		case 0x1E8B:
			*normals = latin_small_letter_x_with_dot_above;
			return 2;
		case 0x1E8C:
			*normals = latin_capital_letter_x_with_diaeresis;
			return 2;
		case 0x1E8D:
			*normals = latin_small_letter_x_with_diaeresis;
			return 2;
		case 0x1E8E:
			*normals = latin_capital_letter_y_with_dot_above;
			return 2;
		case 0x1E8F:
			*normals = latin_small_letter_y_with_dot_above;
			return 2;
		case 0x1E90:
			*normals = latin_capital_letter_z_with_circumflex;
			return 2;
		case 0x1E91:
			*normals = latin_small_letter_z_with_circumflex;
			return 2;
		case 0x1E92:
			*normals = latin_capital_letter_z_with_dot_below;
			return 2;
		case 0x1E93:
			*normals = latin_small_letter_z_with_dot_below;
			return 2;
		case 0x1E94:
			*normals = latin_capital_letter_z_with_line_below;
			return 2;
		case 0x1E95:
			*normals = latin_small_letter_z_with_line_below;
			return 2;
		case 0x1E96:
			*normals = latin_small_letter_h_with_line_below;
			return 2;
		case 0x1E97:
			*normals = latin_small_letter_t_with_diaeresis;
			return 2;
		case 0x1E98:
			*normals = latin_small_letter_w_with_ring_above;
			return 2;
		case 0x1E99:
			*normals = latin_small_letter_y_with_ring_above;
			return 2;
		case 0x1E9A:
			*normals = latin_small_letter_a_with_right_half_ring;
			return 2;
		case 0x1E9B:
			*normals = latin_small_letter_long_s_with_dot_above;
			return 2;
		case 0x1EA0:
			*normals = latin_capital_letter_a_with_dot_below;
			return 2;
		case 0x1EA1:
			*normals = latin_small_letter_a_with_dot_below;
			return 2;
		case 0x1EA2:
			*normals = latin_capital_letter_a_with_hook_above;
			return 2;
		case 0x1EA3:
			*normals = latin_small_letter_a_with_hook_above;
			return 2;
		case 0x1EA4:
			*normals = latin_capital_letter_a_with_circumflex_and_acute;
			return 2;
		case 0x1EA5:
			*normals = latin_small_letter_a_with_circumflex_and_acute;
			return 2;
		case 0x1EA6:
			*normals = latin_capital_letter_a_with_circumflex_and_grave;
			return 2;
		case 0x1EA7:
			*normals = latin_small_letter_a_with_circumflex_and_grave;
			return 2;
		case 0x1EA8:
			*normals = latin_capital_letter_a_with_circumflex_and_hook_above;
			return 2;
		case 0x1EA9:
			*normals = latin_small_letter_a_with_circumflex_and_hook_above;
			return 2;
		case 0x1EAA:
			*normals = latin_capital_letter_a_with_circumflex_and_tilde;
			return 2;
		case 0x1EAB:
			*normals = latin_small_letter_a_with_circumflex_and_tilde;
			return 2;
		case 0x1EAC:
			*normals = latin_capital_letter_a_with_circumflex_and_dot_below;
			return 2;
		case 0x1EAD:
			*normals = latin_small_letter_a_with_circumflex_and_dot_below;
			return 2;
		case 0x1EAE:
			*normals = latin_capital_letter_a_with_breve_and_acute;
			return 2;
		case 0x1EAF:
			*normals = latin_small_letter_a_with_breve_and_acute;
			return 2;
		case 0x1EB0:
			*normals = latin_capital_letter_a_with_breve_and_grave;
			return 2;
		case 0x1EB1:
			*normals = latin_small_letter_a_with_breve_and_grave;
			return 2;
		case 0x1EB2:
			*normals = latin_capital_letter_a_with_breve_and_hook_above;
			return 2;
		case 0x1EB3:
			*normals = latin_small_letter_a_with_breve_and_hook_above;
			return 2;
		case 0x1EB4:
			*normals = latin_capital_letter_a_with_breve_and_tilde;
			return 2;
		case 0x1EB5:
			*normals = latin_small_letter_a_with_breve_and_tilde;
			return 2;
		case 0x1EB6:
			*normals = latin_capital_letter_a_with_breve_and_dot_below;
			return 2;
		case 0x1EB7:
			*normals = latin_small_letter_a_with_breve_and_dot_below;
			return 2;
		case 0x1EB8:
			*normals = latin_capital_letter_e_with_dot_below;
			return 2;
		case 0x1EB9:
			*normals = latin_small_letter_e_with_dot_below;
			return 2;
		case 0x1EBA:
			*normals = latin_capital_letter_e_with_hook_above;
			return 2;
		case 0x1EBB:
			*normals = latin_small_letter_e_with_hook_above;
			return 2;
		case 0x1EBC:
			*normals = latin_capital_letter_e_with_tilde;
			return 2;
		case 0x1EBD:
			*normals = latin_small_letter_e_with_tilde;
			return 2;
		case 0x1EBE:
			*normals = latin_capital_letter_e_with_circumflex_and_acute;
			return 2;
		case 0x1EBF:
			*normals = latin_small_letter_e_with_circumflex_and_acute;
			return 2;
		case 0x1EC0:
			*normals = latin_capital_letter_e_with_circumflex_and_grave;
			return 2;
		case 0x1EC1:
			*normals = latin_small_letter_e_with_circumflex_and_grave;
			return 2;
		case 0x1EC2:
			*normals = latin_capital_letter_e_with_circumflex_and_hook_above;
			return 2;
		case 0x1EC3:
			*normals = latin_small_letter_e_with_circumflex_and_hook_above;
			return 2;
		case 0x1EC4:
			*normals = latin_capital_letter_e_with_circumflex_and_tilde;
			return 2;
		case 0x1EC5:
			*normals = latin_small_letter_e_with_circumflex_and_tilde;
			return 2;
		case 0x1EC6:
			*normals = latin_capital_letter_e_with_circumflex_and_dot_below;
			return 2;
		case 0x1EC7:
			*normals = latin_small_letter_e_with_circumflex_and_dot_below;
			return 2;
		case 0x1EC8:
			*normals = latin_capital_letter_i_with_hook_above;
			return 2;
		case 0x1EC9:
			*normals = latin_small_letter_i_with_hook_above;
			return 2;
		case 0x1ECA:
			*normals = latin_capital_letter_i_with_dot_below;
			return 2;
		case 0x1ECB:
			*normals = latin_small_letter_i_with_dot_below;
			return 2;
		case 0x1ECC:
			*normals = latin_capital_letter_o_with_dot_below;
			return 2;
		case 0x1ECD:
			*normals = latin_small_letter_o_with_dot_below;
			return 2;
		case 0x1ECE:
			*normals = latin_capital_letter_o_with_hook_above;
			return 2;
		case 0x1ECF:
			*normals = latin_small_letter_o_with_hook_above;
			return 2;
		case 0x1ED0:
			*normals = latin_capital_letter_o_with_circumflex_and_acute;
			return 2;
		case 0x1ED1:
			*normals = latin_small_letter_o_with_circumflex_and_acute;
			return 2;
		case 0x1ED2:
			*normals = latin_capital_letter_o_with_circumflex_and_grave;
			return 2;
		case 0x1ED3:
			*normals = latin_small_letter_o_with_circumflex_and_grave;
			return 2;
		case 0x1ED4:
			*normals = latin_capital_letter_o_with_circumflex_and_hook_above;
			return 2;
		case 0x1ED5:
			*normals = latin_small_letter_o_with_circumflex_and_hook_above;
			return 2;
		case 0x1ED6:
			*normals = latin_capital_letter_o_with_circumflex_and_tilde;
			return 2;
		case 0x1ED7:
			*normals = latin_small_letter_o_with_circumflex_and_tilde;
			return 2;
		case 0x1ED8:
			*normals = latin_capital_letter_o_with_circumflex_and_dot_below;
			return 2;
		case 0x1ED9:
			*normals = latin_small_letter_o_with_circumflex_and_dot_below;
			return 2;
		case 0x1EDA:
			*normals = latin_capital_letter_o_with_horn_and_acute;
			return 2;
		case 0x1EDB:
			*normals = latin_small_letter_o_with_horn_and_acute;
			return 2;
		case 0x1EDC:
			*normals = latin_capital_letter_o_with_horn_and_grave;
			return 2;
		case 0x1EDD:
			*normals = latin_small_letter_o_with_horn_and_grave;
			return 2;
		case 0x1EDE:
			*normals = latin_capital_letter_o_with_horn_and_hook_above;
			return 2;
		case 0x1EDF:
			*normals = latin_small_letter_o_with_horn_and_hook_above;
			return 2;
		case 0x1EE0:
			*normals = latin_capital_letter_o_with_horn_and_tilde;
			return 2;
		case 0x1EE1:
			*normals = latin_small_letter_o_with_horn_and_tilde;
			return 2;
		case 0x1EE2:
			*normals = latin_capital_letter_o_with_horn_and_dot_below;
			return 2;
		case 0x1EE3:
			*normals = latin_small_letter_o_with_horn_and_dot_below;
			return 2;
		case 0x1EE4:
			*normals = latin_capital_letter_u_with_dot_below;
			return 2;
		case 0x1EE5:
			*normals = latin_small_letter_u_with_dot_below;
			return 2;
		case 0x1EE6:
			*normals = latin_capital_letter_u_with_hook_above;
			return 2;
		case 0x1EE7:
			*normals = latin_small_letter_u_with_hook_above;
			return 2;
		case 0x1EE8:
			*normals = latin_capital_letter_u_with_horn_and_acute;
			return 2;
		case 0x1EE9:
			*normals = latin_small_letter_u_with_horn_and_acute;
			return 2;
		case 0x1EEA:
			*normals = latin_capital_letter_u_with_horn_and_grave;
			return 2;
		case 0x1EEB:
			*normals = latin_small_letter_u_with_horn_and_grave;
			return 2;
		case 0x1EEC:
			*normals = latin_capital_letter_u_with_horn_and_hook_above;
			return 2;
		case 0x1EED:
			*normals = latin_small_letter_u_with_horn_and_hook_above;
			return 2;
		case 0x1EEE:
			*normals = latin_capital_letter_u_with_horn_and_tilde;
			return 2;
		case 0x1EEF:
			*normals = latin_small_letter_u_with_horn_and_tilde;
			return 2;
		case 0x1EF0:
			*normals = latin_capital_letter_u_with_horn_and_dot_below;
			return 2;
		case 0x1EF1:
			*normals = latin_small_letter_u_with_horn_and_dot_below;
			return 2;
		case 0x1EF2:
			*normals = latin_capital_letter_y_with_grave;
			return 2;
		case 0x1EF3:
			*normals = latin_small_letter_y_with_grave;
			return 2;
		case 0x1EF4:
			*normals = latin_capital_letter_y_with_dot_below;
			return 2;
		case 0x1EF5:
			*normals = latin_small_letter_y_with_dot_below;
			return 2;
		case 0x1EF6:
			*normals = latin_capital_letter_y_with_hook_above;
			return 2;
		case 0x1EF7:
			*normals = latin_small_letter_y_with_hook_above;
			return 2;
		case 0x1EF8:
			*normals = latin_capital_letter_y_with_tilde;
			return 2;
		case 0x1EF9:
			*normals = latin_small_letter_y_with_tilde;
			return 2;
		case 0x1F00:
			*normals = greek_small_letter_alpha_with_psili;
			return 2;
		case 0x1F01:
			*normals = greek_small_letter_alpha_with_dasia;
			return 2;
		case 0x1F02:
			*normals = greek_small_letter_alpha_with_psili_and_varia;
			return 2;
		case 0x1F03:
			*normals = greek_small_letter_alpha_with_dasia_and_varia;
			return 2;
		case 0x1F04:
			*normals = greek_small_letter_alpha_with_psili_and_oxia;
			return 2;
		case 0x1F05:
			*normals = greek_small_letter_alpha_with_dasia_and_oxia;
			return 2;
		case 0x1F06:
			*normals = greek_small_letter_alpha_with_psili_and_perispomeni;
			return 2;
		case 0x1F07:
			*normals = greek_small_letter_alpha_with_dasia_and_perispomeni;
			return 2;
		case 0x1F08:
			*normals = greek_capital_letter_alpha_with_psili;
			return 2;
		case 0x1F09:
			*normals = greek_capital_letter_alpha_with_dasia;
			return 2;
		case 0x1F0A:
			*normals = greek_capital_letter_alpha_with_psili_and_varia;
			return 2;
		case 0x1F0B:
			*normals = greek_capital_letter_alpha_with_dasia_and_varia;
			return 2;
		case 0x1F0C:
			*normals = greek_capital_letter_alpha_with_psili_and_oxia;
			return 2;
		case 0x1F0D:
			*normals = greek_capital_letter_alpha_with_dasia_and_oxia;
			return 2;
		case 0x1F0E:
			*normals = greek_capital_letter_alpha_with_psili_and_perispomeni;
			return 2;
		case 0x1F0F:
			*normals = greek_capital_letter_alpha_with_dasia_and_perispomeni;
			return 2;
		case 0x1F10:
			*normals = greek_small_letter_epsilon_with_psili;
			return 2;
		case 0x1F11:
			*normals = greek_small_letter_epsilon_with_dasia;
			return 2;
		case 0x1F12:
			*normals = greek_small_letter_epsilon_with_psili_and_varia;
			return 2;
		case 0x1F13:
			*normals = greek_small_letter_epsilon_with_dasia_and_varia;
			return 2;
		case 0x1F14:
			*normals = greek_small_letter_epsilon_with_psili_and_oxia;
			return 2;
		case 0x1F15:
			*normals = greek_small_letter_epsilon_with_dasia_and_oxia;
			return 2;
		case 0x1F18:
			*normals = greek_capital_letter_epsilon_with_psili;
			return 2;
		case 0x1F19:
			*normals = greek_capital_letter_epsilon_with_dasia;
			return 2;
		case 0x1F1A:
			*normals = greek_capital_letter_epsilon_with_psili_and_varia;
			return 2;
		case 0x1F1B:
			*normals = greek_capital_letter_epsilon_with_dasia_and_varia;
			return 2;
		case 0x1F1C:
			*normals = greek_capital_letter_epsilon_with_psili_and_oxia;
			return 2;
		case 0x1F1D:
			*normals = greek_capital_letter_epsilon_with_dasia_and_oxia;
			return 2;
		case 0x1F20:
			*normals = greek_small_letter_eta_with_psili;
			return 2;
		case 0x1F21:
			*normals = greek_small_letter_eta_with_dasia;
			return 2;
		case 0x1F22:
			*normals = greek_small_letter_eta_with_psili_and_varia;
			return 2;
		case 0x1F23:
			*normals = greek_small_letter_eta_with_dasia_and_varia;
			return 2;
		case 0x1F24:
			*normals = greek_small_letter_eta_with_psili_and_oxia;
			return 2;
		case 0x1F25:
			*normals = greek_small_letter_eta_with_dasia_and_oxia;
			return 2;
		case 0x1F26:
			*normals = greek_small_letter_eta_with_psili_and_perispomeni;
			return 2;
		case 0x1F27:
			*normals = greek_small_letter_eta_with_dasia_and_perispomeni;
			return 2;
		case 0x1F28:
			*normals = greek_capital_letter_eta_with_psili;
			return 2;
		case 0x1F29:
			*normals = greek_capital_letter_eta_with_dasia;
			return 2;
		case 0x1F2A:
			*normals = greek_capital_letter_eta_with_psili_and_varia;
			return 2;
		case 0x1F2B:
			*normals = greek_capital_letter_eta_with_dasia_and_varia;
			return 2;
		case 0x1F2C:
			*normals = greek_capital_letter_eta_with_psili_and_oxia;
			return 2;
		case 0x1F2D:
			*normals = greek_capital_letter_eta_with_dasia_and_oxia;
			return 2;
		case 0x1F2E:
			*normals = greek_capital_letter_eta_with_psili_and_perispomeni;
			return 2;
		case 0x1F2F:
			*normals = greek_capital_letter_eta_with_dasia_and_perispomeni;
			return 2;
		case 0x1F30:
			*normals = greek_small_letter_iota_with_psili;
			return 2;
		case 0x1F31:
			*normals = greek_small_letter_iota_with_dasia;
			return 2;
		case 0x1F32:
			*normals = greek_small_letter_iota_with_psili_and_varia;
			return 2;
		case 0x1F33:
			*normals = greek_small_letter_iota_with_dasia_and_varia;
			return 2;
		case 0x1F34:
			*normals = greek_small_letter_iota_with_psili_and_oxia;
			return 2;
		case 0x1F35:
			*normals = greek_small_letter_iota_with_dasia_and_oxia;
			return 2;
		case 0x1F36:
			*normals = greek_small_letter_iota_with_psili_and_perispomeni;
			return 2;
		case 0x1F37:
			*normals = greek_small_letter_iota_with_dasia_and_perispomeni;
			return 2;
		case 0x1F38:
			*normals = greek_capital_letter_iota_with_psili;
			return 2;
		case 0x1F39:
			*normals = greek_capital_letter_iota_with_dasia;
			return 2;
		case 0x1F3A:
			*normals = greek_capital_letter_iota_with_psili_and_varia;
			return 2;
		case 0x1F3B:
			*normals = greek_capital_letter_iota_with_dasia_and_varia;
			return 2;
		case 0x1F3C:
			*normals = greek_capital_letter_iota_with_psili_and_oxia;
			return 2;
		case 0x1F3D:
			*normals = greek_capital_letter_iota_with_dasia_and_oxia;
			return 2;
		case 0x1F3E:
			*normals = greek_capital_letter_iota_with_psili_and_perispomeni;
			return 2;
		case 0x1F3F:
			*normals = greek_capital_letter_iota_with_dasia_and_perispomeni;
			return 2;
		case 0x1F40:
			*normals = greek_small_letter_omicron_with_psili;
			return 2;
		case 0x1F41:
			*normals = greek_small_letter_omicron_with_dasia;
			return 2;
		case 0x1F42:
			*normals = greek_small_letter_omicron_with_psili_and_varia;
			return 2;
		case 0x1F43:
			*normals = greek_small_letter_omicron_with_dasia_and_varia;
			return 2;
		case 0x1F44:
			*normals = greek_small_letter_omicron_with_psili_and_oxia;
			return 2;
		case 0x1F45:
			*normals = greek_small_letter_omicron_with_dasia_and_oxia;
			return 2;
		case 0x1F48:
			*normals = greek_capital_letter_omicron_with_psili;
			return 2;
		case 0x1F49:
			*normals = greek_capital_letter_omicron_with_dasia;
			return 2;
		case 0x1F4A:
			*normals = greek_capital_letter_omicron_with_psili_and_varia;
			return 2;
		case 0x1F4B:
			*normals = greek_capital_letter_omicron_with_dasia_and_varia;
			return 2;
		case 0x1F4C:
			*normals = greek_capital_letter_omicron_with_psili_and_oxia;
			return 2;
		case 0x1F4D:
			*normals = greek_capital_letter_omicron_with_dasia_and_oxia;
			return 2;
		case 0x1F50:
			*normals = greek_small_letter_upsilon_with_psili;
			return 2;
		case 0x1F51:
			*normals = greek_small_letter_upsilon_with_dasia;
			return 2;
		case 0x1F52:
			*normals = greek_small_letter_upsilon_with_psili_and_varia;
			return 2;
		case 0x1F53:
			*normals = greek_small_letter_upsilon_with_dasia_and_varia;
			return 2;
		case 0x1F54:
			*normals = greek_small_letter_upsilon_with_psili_and_oxia;
			return 2;
		case 0x1F55:
			*normals = greek_small_letter_upsilon_with_dasia_and_oxia;
			return 2;
		case 0x1F56:
			*normals = greek_small_letter_upsilon_with_psili_and_perispomeni;
			return 2;
		case 0x1F57:
			*normals = greek_small_letter_upsilon_with_dasia_and_perispomeni;
			return 2;
		case 0x1F59:
			*normals = greek_capital_letter_upsilon_with_dasia;
			return 2;
		case 0x1F5B:
			*normals = greek_capital_letter_upsilon_with_dasia_and_varia;
			return 2;
		case 0x1F5D:
			*normals = greek_capital_letter_upsilon_with_dasia_and_oxia;
			return 2;
		case 0x1F5F:
			*normals = greek_capital_letter_upsilon_with_dasia_and_perispomeni;
			return 2;
		case 0x1F60:
			*normals = greek_small_letter_omega_with_psili;
			return 2;
		case 0x1F61:
			*normals = greek_small_letter_omega_with_dasia;
			return 2;
		case 0x1F62:
			*normals = greek_small_letter_omega_with_psili_and_varia;
			return 2;
		case 0x1F63:
			*normals = greek_small_letter_omega_with_dasia_and_varia;
			return 2;
		case 0x1F64:
			*normals = greek_small_letter_omega_with_psili_and_oxia;
			return 2;
		case 0x1F65:
			*normals = greek_small_letter_omega_with_dasia_and_oxia;
			return 2;
		case 0x1F66:
			*normals = greek_small_letter_omega_with_psili_and_perispomeni;
			return 2;
		case 0x1F67:
			*normals = greek_small_letter_omega_with_dasia_and_perispomeni;
			return 2;
		case 0x1F68:
			*normals = greek_capital_letter_omega_with_psili;
			return 2;
		case 0x1F69:
			*normals = greek_capital_letter_omega_with_dasia;
			return 2;
		case 0x1F6A:
			*normals = greek_capital_letter_omega_with_psili_and_varia;
			return 2;
		case 0x1F6B:
			*normals = greek_capital_letter_omega_with_dasia_and_varia;
			return 2;
		case 0x1F6C:
			*normals = greek_capital_letter_omega_with_psili_and_oxia;
			return 2;
		case 0x1F6D:
			*normals = greek_capital_letter_omega_with_dasia_and_oxia;
			return 2;
		case 0x1F6E:
			*normals = greek_capital_letter_omega_with_psili_and_perispomeni;
			return 2;
		case 0x1F6F:
			*normals = greek_capital_letter_omega_with_dasia_and_perispomeni;
			return 2;
		case 0x1F70:
			*normals = greek_small_letter_alpha_with_varia;
			return 2;
		case 0x1F71:
			*normals = greek_small_letter_alpha_with_oxia;
			return 1;
		case 0x1F72:
			*normals = greek_small_letter_epsilon_with_varia;
			return 2;
		case 0x1F73:
			*normals = greek_small_letter_epsilon_with_oxia;
			return 1;
		case 0x1F74:
			*normals = greek_small_letter_eta_with_varia;
			return 2;
		case 0x1F75:
			*normals = greek_small_letter_eta_with_oxia;
			return 1;
		case 0x1F76:
			*normals = greek_small_letter_iota_with_varia;
			return 2;
		case 0x1F77:
			*normals = greek_small_letter_iota_with_oxia;
			return 1;
		case 0x1F78:
			*normals = greek_small_letter_omicron_with_varia;
			return 2;
		case 0x1F79:
			*normals = greek_small_letter_omicron_with_oxia;
			return 1;
		case 0x1F7A:
			*normals = greek_small_letter_upsilon_with_varia;
			return 2;
		case 0x1F7B:
			*normals = greek_small_letter_upsilon_with_oxia;
			return 1;
		case 0x1F7C:
			*normals = greek_small_letter_omega_with_varia;
			return 2;
		case 0x1F7D:
			*normals = greek_small_letter_omega_with_oxia;
			return 1;
		case 0x1F80:
			*normals = greek_small_letter_alpha_with_psili_and_ypogegrammeni;
			return 2;
		case 0x1F81:
			*normals = greek_small_letter_alpha_with_dasia_and_ypogegrammeni;
			return 2;
		case 0x1F82:
			*normals = greek_small_letter_alpha_with_psili_and_varia_and_ypogegrammeni;
			return 2;
		case 0x1F83:
			*normals = greek_small_letter_alpha_with_dasia_and_varia_and_ypogegrammeni;
			return 2;
		case 0x1F84:
			*normals = greek_small_letter_alpha_with_psili_and_oxia_and_ypogegrammeni;
			return 2;
		case 0x1F85:
			*normals = greek_small_letter_alpha_with_dasia_and_oxia_and_ypogegrammeni;
			return 2;
		case 0x1F86:
			*normals = greek_small_letter_alpha_with_psili_and_perispomeni_and_ypogegrammeni;
			return 2;
		case 0x1F87:
			*normals = greek_small_letter_alpha_with_dasia_and_perispomeni_and_ypogegrammeni;
			return 2;
		case 0x1F88:
			*normals = greek_capital_letter_alpha_with_psili_and_prosgegrammeni;
			return 2;
		case 0x1F89:
			*normals = greek_capital_letter_alpha_with_dasia_and_prosgegrammeni;
			return 2;
		case 0x1F8A:
			*normals = greek_capital_letter_alpha_with_psili_and_varia_and_prosgegrammeni;
			return 2;
		case 0x1F8B:
			*normals = greek_capital_letter_alpha_with_dasia_and_varia_and_prosgegrammeni;
			return 2;
		case 0x1F8C:
			*normals = greek_capital_letter_alpha_with_psili_and_oxia_and_prosgegrammeni;
			return 2;
		case 0x1F8D:
			*normals = greek_capital_letter_alpha_with_dasia_and_oxia_and_prosgegrammeni;
			return 2;
		case 0x1F8E:
			*normals = greek_capital_letter_alpha_with_psili_and_perispomeni_and_prosgegrammeni;
			return 2;
		case 0x1F8F:
			*normals = greek_capital_letter_alpha_with_dasia_and_perispomeni_and_prosgegrammeni;
			return 2;
		case 0x1F90:
			*normals = greek_small_letter_eta_with_psili_and_ypogegrammeni;
			return 2;
		case 0x1F91:
			*normals = greek_small_letter_eta_with_dasia_and_ypogegrammeni;
			return 2;
		case 0x1F92:
			*normals = greek_small_letter_eta_with_psili_and_varia_and_ypogegrammeni;
			return 2;
		case 0x1F93:
			*normals = greek_small_letter_eta_with_dasia_and_varia_and_ypogegrammeni;
			return 2;
		case 0x1F94:
			*normals = greek_small_letter_eta_with_psili_and_oxia_and_ypogegrammeni;
			return 2;
		case 0x1F95:
			*normals = greek_small_letter_eta_with_dasia_and_oxia_and_ypogegrammeni;
			return 2;
		case 0x1F96:
			*normals = greek_small_letter_eta_with_psili_and_perispomeni_and_ypogegrammeni;
			return 2;
		case 0x1F97:
			*normals = greek_small_letter_eta_with_dasia_and_perispomeni_and_ypogegrammeni;
			return 2;
		case 0x1F98:
			*normals = greek_capital_letter_eta_with_psili_and_prosgegrammeni;
			return 2;
		case 0x1F99:
			*normals = greek_capital_letter_eta_with_dasia_and_prosgegrammeni;
			return 2;
		case 0x1F9A:
			*normals = greek_capital_letter_eta_with_psili_and_varia_and_prosgegrammeni;
			return 2;
		case 0x1F9B:
			*normals = greek_capital_letter_eta_with_dasia_and_varia_and_prosgegrammeni;
			return 2;
		case 0x1F9C:
			*normals = greek_capital_letter_eta_with_psili_and_oxia_and_prosgegrammeni;
			return 2;
		case 0x1F9D:
			*normals = greek_capital_letter_eta_with_dasia_and_oxia_and_prosgegrammeni;
			return 2;
		case 0x1F9E:
			*normals = greek_capital_letter_eta_with_psili_and_perispomeni_and_prosgegrammeni;
			return 2;
		case 0x1F9F:
			*normals = greek_capital_letter_eta_with_dasia_and_perispomeni_and_prosgegrammeni;
			return 2;
		case 0x1FA0:
			*normals = greek_small_letter_omega_with_psili_and_ypogegrammeni;
			return 2;
		case 0x1FA1:
			*normals = greek_small_letter_omega_with_dasia_and_ypogegrammeni;
			return 2;
		case 0x1FA2:
			*normals = greek_small_letter_omega_with_psili_and_varia_and_ypogegrammeni;
			return 2;
		case 0x1FA3:
			*normals = greek_small_letter_omega_with_dasia_and_varia_and_ypogegrammeni;
			return 2;
		case 0x1FA4:
			*normals = greek_small_letter_omega_with_psili_and_oxia_and_ypogegrammeni;
			return 2;
		case 0x1FA5:
			*normals = greek_small_letter_omega_with_dasia_and_oxia_and_ypogegrammeni;
			return 2;
		case 0x1FA6:
			*normals = greek_small_letter_omega_with_psili_and_perispomeni_and_ypogegrammeni;
			return 2;
		case 0x1FA7:
			*normals = greek_small_letter_omega_with_dasia_and_perispomeni_and_ypogegrammeni;
			return 2;
		case 0x1FA8:
			*normals = greek_capital_letter_omega_with_psili_and_prosgegrammeni;
			return 2;
		case 0x1FA9:
			*normals = greek_capital_letter_omega_with_dasia_and_prosgegrammeni;
			return 2;
		case 0x1FAA:
			*normals = greek_capital_letter_omega_with_psili_and_varia_and_prosgegrammeni;
			return 2;
		case 0x1FAB:
			*normals = greek_capital_letter_omega_with_dasia_and_varia_and_prosgegrammeni;
			return 2;
		case 0x1FAC:
			*normals = greek_capital_letter_omega_with_psili_and_oxia_and_prosgegrammeni;
			return 2;
		case 0x1FAD:
			*normals = greek_capital_letter_omega_with_dasia_and_oxia_and_prosgegrammeni;
			return 2;
		case 0x1FAE:
			*normals = greek_capital_letter_omega_with_psili_and_perispomeni_and_prosgegrammeni;
			return 2;
		case 0x1FAF:
			*normals = greek_capital_letter_omega_with_dasia_and_perispomeni_and_prosgegrammeni;
			return 2;
		case 0x1FB0:
			*normals = greek_small_letter_alpha_with_vrachy;
			return 2;
		case 0x1FB1:
			*normals = greek_small_letter_alpha_with_macron;
			return 2;
		case 0x1FB2:
			*normals = greek_small_letter_alpha_with_varia_and_ypogegrammeni;
			return 2;
		case 0x1FB3:
			*normals = greek_small_letter_alpha_with_ypogegrammeni;
			return 2;
		case 0x1FB4:
			*normals = greek_small_letter_alpha_with_oxia_and_ypogegrammeni;
			return 2;
		case 0x1FB6:
			*normals = greek_small_letter_alpha_with_perispomeni;
			return 2;
		case 0x1FB7:
			*normals = greek_small_letter_alpha_with_perispomeni_and_ypogegrammeni;
			return 2;
		case 0x1FB8:
			*normals = greek_capital_letter_alpha_with_vrachy;
			return 2;
		case 0x1FB9:
			*normals = greek_capital_letter_alpha_with_macron;
			return 2;
		case 0x1FBA:
			*normals = greek_capital_letter_alpha_with_varia;
			return 2;
		case 0x1FBB:
			*normals = greek_capital_letter_alpha_with_oxia;
			return 1;
		case 0x1FBC:
			*normals = greek_capital_letter_alpha_with_prosgegrammeni;
			return 2;
		case 0x1FBD:
			*normals = greek_koronis;
			return 2;
		case 0x1FBE:
			*normals = greek_prosgegrammeni;
			return 1;
		case 0x1FBF:
			*normals = greek_psili;
			return 2;
		case 0x1FC0:
			*normals = greek_perispomeni;
			return 2;
		case 0x1FC1:
			*normals = greek_dialytika_and_perispomeni;
			return 2;
		case 0x1FC2:
			*normals = greek_small_letter_eta_with_varia_and_ypogegrammeni;
			return 2;
		case 0x1FC3:
			*normals = greek_small_letter_eta_with_ypogegrammeni;
			return 2;
		case 0x1FC4:
			*normals = greek_small_letter_eta_with_oxia_and_ypogegrammeni;
			return 2;
		case 0x1FC6:
			*normals = greek_small_letter_eta_with_perispomeni;
			return 2;
		case 0x1FC7:
			*normals = greek_small_letter_eta_with_perispomeni_and_ypogegrammeni;
			return 2;
		case 0x1FC8:
			*normals = greek_capital_letter_epsilon_with_varia;
			return 2;
		case 0x1FC9:
			*normals = greek_capital_letter_epsilon_with_oxia;
			return 1;
		case 0x1FCA:
			*normals = greek_capital_letter_eta_with_varia;
			return 2;
		case 0x1FCB:
			*normals = greek_capital_letter_eta_with_oxia;
			return 1;
		case 0x1FCC:
			*normals = greek_capital_letter_eta_with_prosgegrammeni;
			return 2;
		case 0x1FCD:
			*normals = greek_psili_and_varia;
			return 2;
		case 0x1FCE:
			*normals = greek_psili_and_oxia;
			return 2;
		case 0x1FCF:
			*normals = greek_psili_and_perispomeni;
			return 2;
		case 0x1FD0:
			*normals = greek_small_letter_iota_with_vrachy;
			return 2;
		case 0x1FD1:
			*normals = greek_small_letter_iota_with_macron;
			return 2;
		case 0x1FD2:
			*normals = greek_small_letter_iota_with_dialytika_and_varia;
			return 2;
		case 0x1FD3:
			*normals = greek_small_letter_iota_with_dialytika_and_oxia;
			return 1;
		case 0x1FD6:
			*normals = greek_small_letter_iota_with_perispomeni;
			return 2;
		case 0x1FD7:
			*normals = greek_small_letter_iota_with_dialytika_and_perispomeni;
			return 2;
		case 0x1FD8:
			*normals = greek_capital_letter_iota_with_vrachy;
			return 2;
		case 0x1FD9:
			*normals = greek_capital_letter_iota_with_macron;
			return 2;
		case 0x1FDA:
			*normals = greek_capital_letter_iota_with_varia;
			return 2;
		case 0x1FDB:
			*normals = greek_capital_letter_iota_with_oxia;
			return 1;
		case 0x1FDD:
			*normals = greek_dasia_and_varia;
			return 2;
		case 0x1FDE:
			*normals = greek_dasia_and_oxia;
			return 2;
		case 0x1FDF:
			*normals = greek_dasia_and_perispomeni;
			return 2;
		case 0x1FE0:
			*normals = greek_small_letter_upsilon_with_vrachy;
			return 2;
		case 0x1FE1:
			*normals = greek_small_letter_upsilon_with_macron;
			return 2;
		case 0x1FE2:
			*normals = greek_small_letter_upsilon_with_dialytika_and_varia;
			return 2;
		case 0x1FE3:
			*normals = greek_small_letter_upsilon_with_dialytika_and_oxia;
			return 1;
		case 0x1FE4:
			*normals = greek_small_letter_rho_with_psili;
			return 2;
		case 0x1FE5:
			*normals = greek_small_letter_rho_with_dasia;
			return 2;
		case 0x1FE6:
			*normals = greek_small_letter_upsilon_with_perispomeni;
			return 2;
		case 0x1FE7:
			*normals = greek_small_letter_upsilon_with_dialytika_and_perispomeni;
			return 2;
		case 0x1FE8:
			*normals = greek_capital_letter_upsilon_with_vrachy;
			return 2;
		case 0x1FE9:
			*normals = greek_capital_letter_upsilon_with_macron;
			return 2;
		case 0x1FEA:
			*normals = greek_capital_letter_upsilon_with_varia;
			return 2;
		case 0x1FEB:
			*normals = greek_capital_letter_upsilon_with_oxia;
			return 1;
		case 0x1FEC:
			*normals = greek_capital_letter_rho_with_dasia;
			return 2;
		case 0x1FED:
			*normals = greek_dialytika_and_varia;
			return 2;
		case 0x1FEE:
			*normals = greek_dialytika_and_oxia;
			return 1;
		case 0x1FEF:
			*normals = greek_varia;
			return 1;
		case 0x1FF2:
			*normals = greek_small_letter_omega_with_varia_and_ypogegrammeni;
			return 2;
		case 0x1FF3:
			*normals = greek_small_letter_omega_with_ypogegrammeni;
			return 2;
		case 0x1FF4:
			*normals = greek_small_letter_omega_with_oxia_and_ypogegrammeni;
			return 2;
		case 0x1FF6:
			*normals = greek_small_letter_omega_with_perispomeni;
			return 2;
		case 0x1FF7:
			*normals = greek_small_letter_omega_with_perispomeni_and_ypogegrammeni;
			return 2;
		case 0x1FF8:
			*normals = greek_capital_letter_omicron_with_varia;
			return 2;
		case 0x1FF9:
			*normals = greek_capital_letter_omicron_with_oxia;
			return 1;
		case 0x1FFA:
			*normals = greek_capital_letter_omega_with_varia;
			return 2;
		case 0x1FFB:
			*normals = greek_capital_letter_omega_with_oxia;
			return 1;
		case 0x1FFC:
			*normals = greek_capital_letter_omega_with_prosgegrammeni;
			return 2;
		case 0x1FFD:
			*normals = greek_oxia;
			return 1;
		case 0x1FFE:
			*normals = greek_dasia;
			return 2;
		case 0x2000:
			*normals = en_quad;
			return 1;
		case 0x2001:
			*normals = em_quad;
			return 1;
		case 0x2002:
			*normals = en_space;
			return 1;
		case 0x2003:
			*normals = em_space;
			return 1;
		case 0x2004:
			*normals = three_per_em_space;
			return 1;
		case 0x2005:
			*normals = four_per_em_space;
			return 1;
		case 0x2006:
			*normals = six_per_em_space;
			return 1;
		case 0x2007:
			*normals = figure_space;
			return 1;
		case 0x2008:
			*normals = punctuation_space;
			return 1;
		case 0x2009:
			*normals = thin_space;
			return 1;
		case 0x200A:
			*normals = hair_space;
			return 1;
		case 0x2011:
			*normals = non_breaking_hyphen;
			return 1;
		case 0x2017:
			*normals = double_low_line;
			return 2;
		case 0x2024:
			*normals = one_dot_leader;
			return 1;
		case 0x2025:
			*normals = two_dot_leader;
			return 2;
		case 0x2026:
			*normals = horizontal_ellipsis;
			return 3;
		case 0x202F:
			*normals = narrow_no_break_space;
			return 1;
		case 0x2033:
			*normals = double_prime;
			return 2;
		case 0x2034:
			*normals = triple_prime;
			return 3;
		case 0x2036:
			*normals = reversed_double_prime;
			return 2;
		case 0x2037:
			*normals = reversed_triple_prime;
			return 3;
		case 0x203C:
			*normals = double_exclamation_mark;
			return 2;
		case 0x203E:
			*normals = overline;
			return 2;
		case 0x2047:
			*normals = double_question_mark;
			return 2;
		case 0x2048:
			*normals = question_exclamation_mark;
			return 2;
		case 0x2049:
			*normals = exclamation_question_mark;
			return 2;
		case 0x2057:
			*normals = quadruple_prime;
			return 4;
		case 0x205F:
			*normals = medium_mathematical_space;
			return 1;
		case 0x2070:
			*normals = superscript_zero;
			return 1;
		case 0x2071:
			*normals = superscript_latin_small_letter_i;
			return 1;
		case 0x2074:
			*normals = superscript_four;
			return 1;
		case 0x2075:
			*normals = superscript_five;
			return 1;
		case 0x2076:
			*normals = superscript_six;
			return 1;
		case 0x2077:
			*normals = superscript_seven;
			return 1;
		case 0x2078:
			*normals = superscript_eight;
			return 1;
		case 0x2079:
			*normals = superscript_nine;
			return 1;
		case 0x207A:
			*normals = superscript_plus_sign;
			return 1;
		case 0x207B:
			*normals = superscript_minus;
			return 1;
		case 0x207C:
			*normals = superscript_equals_sign;
			return 1;
		case 0x207D:
			*normals = superscript_left_parenthesis;
			return 1;
		case 0x207E:
			*normals = superscript_right_parenthesis;
			return 1;
		case 0x207F:
			*normals = superscript_latin_small_letter_n;
			return 1;
		case 0x2080:
			*normals = subscript_zero;
			return 1;
		case 0x2081:
			*normals = subscript_one;
			return 1;
		case 0x2082:
			*normals = subscript_two;
			return 1;
		case 0x2083:
			*normals = subscript_three;
			return 1;
		case 0x2084:
			*normals = subscript_four;
			return 1;
		case 0x2085:
			*normals = subscript_five;
			return 1;
		case 0x2086:
			*normals = subscript_six;
			return 1;
		case 0x2087:
			*normals = subscript_seven;
			return 1;
		case 0x2088:
			*normals = subscript_eight;
			return 1;
		case 0x2089:
			*normals = subscript_nine;
			return 1;
		case 0x208A:
			*normals = subscript_plus_sign;
			return 1;
		case 0x208B:
			*normals = subscript_minus;
			return 1;
		case 0x208C:
			*normals = subscript_equals_sign;
			return 1;
		case 0x208D:
			*normals = subscript_left_parenthesis;
			return 1;
		case 0x208E:
			*normals = subscript_right_parenthesis;
			return 1;
		case 0x2090:
			*normals = latin_subscript_small_letter_a;
			return 1;
		case 0x2091:
			*normals = latin_subscript_small_letter_e;
			return 1;
		case 0x2092:
			*normals = latin_subscript_small_letter_o;
			return 1;
		case 0x2093:
			*normals = latin_subscript_small_letter_x;
			return 1;
		case 0x2094:
			*normals = latin_subscript_small_letter_schwa;
			return 1;
		case 0x2095:
			*normals = latin_subscript_small_letter_h;
			return 1;
		case 0x2096:
			*normals = latin_subscript_small_letter_k;
			return 1;
		case 0x2097:
			*normals = latin_subscript_small_letter_l;
			return 1;
		case 0x2098:
			*normals = latin_subscript_small_letter_m;
			return 1;
		case 0x2099:
			*normals = latin_subscript_small_letter_n;
			return 1;
		case 0x209A:
			*normals = latin_subscript_small_letter_p;
			return 1;
		case 0x209B:
			*normals = latin_subscript_small_letter_s;
			return 1;
		case 0x209C:
			*normals = latin_subscript_small_letter_t;
			return 1;
		case 0x20A8:
			*normals = rupee_sign;
			return 2;
		case 0x2100:
			*normals = account_of;
			return 3;
		case 0x2101:
			*normals = addressed_to_the_subject;
			return 3;
		case 0x2102:
			*normals = double_struck_capital_c;
			return 1;
		case 0x2103:
			*normals = degree_celsius;
			return 2;
		case 0x2105:
			*normals = care_of;
			return 3;
		case 0x2106:
			*normals = cada_una;
			return 3;
		case 0x2107:
			*normals = euler_constant;
			return 1;
		case 0x2109:
			*normals = degree_fahrenheit;
			return 2;
		case 0x210A:
			*normals = script_small_g;
			return 1;
		case 0x210B:
			*normals = script_capital_h;
			return 1;
		case 0x210C:
			*normals = black_letter_capital_h;
			return 1;
		case 0x210D:
			*normals = double_struck_capital_h;
			return 1;
		case 0x210E:
			*normals = planck_constant;
			return 1;
		case 0x210F:
			*normals = planck_constant_over_two_pi;
			return 1;
		case 0x2110:
			*normals = script_capital_i;
			return 1;
		case 0x2111:
			*normals = black_letter_capital_i;
			return 1;
		case 0x2112:
			*normals = script_capital_l;
			return 1;
		case 0x2113:
			*normals = script_small_l;
			return 1;
		case 0x2115:
			*normals = double_struck_capital_n;
			return 1;
		case 0x2116:
			*normals = numero_sign;
			return 2;
		case 0x2119:
			*normals = double_struck_capital_p;
			return 1;
		case 0x211A:
			*normals = double_struck_capital_q;
			return 1;
		case 0x211B:
			*normals = script_capital_r;
			return 1;
		case 0x211C:
			*normals = black_letter_capital_r;
			return 1;
		case 0x211D:
			*normals = double_struck_capital_r;
			return 1;
		case 0x2120:
			*normals = service_mark;
			return 2;
		case 0x2121:
			*normals = telephone_sign;
			return 3;
		case 0x2122:
			*normals = trade_mark_sign;
			return 2;
		case 0x2124:
			*normals = double_struck_capital_z;
			return 1;
		case 0x2126:
			*normals = ohm_sign;
			return 1;
		case 0x2128:
			*normals = black_letter_capital_z;
			return 1;
		case 0x212A:
			*normals = kelvin_sign;
			return 1;
		case 0x212B:
			*normals = angstrom_sign;
			return 1;
		case 0x212C:
			*normals = script_capital_b;
			return 1;
		case 0x212D:
			*normals = black_letter_capital_c;
			return 1;
		case 0x212F:
			*normals = script_small_e;
			return 1;
		case 0x2130:
			*normals = script_capital_e;
			return 1;
		case 0x2131:
			*normals = script_capital_f;
			return 1;
		case 0x2133:
			*normals = script_capital_m;
			return 1;
		case 0x2134:
			*normals = script_small_o;
			return 1;
		case 0x2135:
			*normals = alef_symbol;
			return 1;
		case 0x2136:
			*normals = bet_symbol;
			return 1;
		case 0x2137:
			*normals = gimel_symbol;
			return 1;
		case 0x2138:
			*normals = dalet_symbol;
			return 1;
		case 0x2139:
			*normals = information_source;
			return 1;
		case 0x213B:
			*normals = facsimile_sign;
			return 3;
		case 0x213C:
			*normals = double_struck_small_pi;
			return 1;
		case 0x213D:
			*normals = double_struck_small_gamma;
			return 1;
		case 0x213E:
			*normals = double_struck_capital_gamma;
			return 1;
		case 0x213F:
			*normals = double_struck_capital_pi;
			return 1;
		case 0x2140:
			*normals = double_struck_n_ary_summation;
			return 1;
		case 0x2145:
			*normals = double_struck_italic_capital_d;
			return 1;
		case 0x2146:
			*normals = double_struck_italic_small_d;
			return 1;
		case 0x2147:
			*normals = double_struck_italic_small_e;
			return 1;
		case 0x2148:
			*normals = double_struck_italic_small_i;
			return 1;
		case 0x2149:
			*normals = double_struck_italic_small_j;
			return 1;
		case 0x2150:
			*normals = vulgar_fraction_one_seventh;
			return 3;
		case 0x2151:
			*normals = vulgar_fraction_one_ninth;
			return 3;
		case 0x2152:
			*normals = vulgar_fraction_one_tenth;
			return 4;
		case 0x2153:
			*normals = vulgar_fraction_one_third;
			return 3;
		case 0x2154:
			*normals = vulgar_fraction_two_thirds;
			return 3;
		case 0x2155:
			*normals = vulgar_fraction_one_fifth;
			return 3;
		case 0x2156:
			*normals = vulgar_fraction_two_fifths;
			return 3;
		case 0x2157:
			*normals = vulgar_fraction_three_fifths;
			return 3;
		case 0x2158:
			*normals = vulgar_fraction_four_fifths;
			return 3;
		case 0x2159:
			*normals = vulgar_fraction_one_sixth;
			return 3;
		case 0x215A:
			*normals = vulgar_fraction_five_sixths;
			return 3;
		case 0x215B:
			*normals = vulgar_fraction_one_eighth;
			return 3;
		case 0x215C:
			*normals = vulgar_fraction_three_eighths;
			return 3;
		case 0x215D:
			*normals = vulgar_fraction_five_eighths;
			return 3;
		case 0x215E:
			*normals = vulgar_fraction_seven_eighths;
			return 3;
		case 0x215F:
			*normals = fraction_numerator_one;
			return 2;
		case 0x2160:
			*normals = roman_numeral_one;
			return 1;
		case 0x2161:
			*normals = roman_numeral_two;
			return 2;
		case 0x2162:
			*normals = roman_numeral_three;
			return 3;
		case 0x2163:
			*normals = roman_numeral_four;
			return 2;
		case 0x2164:
			*normals = roman_numeral_five;
			return 1;
		case 0x2165:
			*normals = roman_numeral_six;
			return 2;
		case 0x2166:
			*normals = roman_numeral_seven;
			return 3;
		case 0x2167:
			*normals = roman_numeral_eight;
			return 4;
		case 0x2168:
			*normals = roman_numeral_nine;
			return 2;
		case 0x2169:
			*normals = roman_numeral_ten;
			return 1;
		case 0x216A:
			*normals = roman_numeral_eleven;
			return 2;
		case 0x216B:
			*normals = roman_numeral_twelve;
			return 3;
		case 0x216C:
			*normals = roman_numeral_fifty;
			return 1;
		case 0x216D:
			*normals = roman_numeral_one_hundred;
			return 1;
		case 0x216E:
			*normals = roman_numeral_five_hundred;
			return 1;
		case 0x216F:
			*normals = roman_numeral_one_thousand;
			return 1;
		case 0x2170:
			*normals = small_roman_numeral_one;
			return 1;
		case 0x2171:
			*normals = small_roman_numeral_two;
			return 2;
		case 0x2172:
			*normals = small_roman_numeral_three;
			return 3;
		case 0x2173:
			*normals = small_roman_numeral_four;
			return 2;
		case 0x2174:
			*normals = small_roman_numeral_five;
			return 1;
		case 0x2175:
			*normals = small_roman_numeral_six;
			return 2;
		case 0x2176:
			*normals = small_roman_numeral_seven;
			return 3;
		case 0x2177:
			*normals = small_roman_numeral_eight;
			return 4;
		case 0x2178:
			*normals = small_roman_numeral_nine;
			return 2;
		case 0x2179:
			*normals = small_roman_numeral_ten;
			return 1;
		case 0x217A:
			*normals = small_roman_numeral_eleven;
			return 2;
		case 0x217B:
			*normals = small_roman_numeral_twelve;
			return 3;
		case 0x217C:
			*normals = small_roman_numeral_fifty;
			return 1;
		case 0x217D:
			*normals = small_roman_numeral_one_hundred;
			return 1;
		case 0x217E:
			*normals = small_roman_numeral_five_hundred;
			return 1;
		case 0x217F:
			*normals = small_roman_numeral_one_thousand;
			return 1;
		case 0x2189:
			*normals = vulgar_fraction_zero_thirds;
			return 3;
		case 0x219A:
			*normals = leftwards_arrow_with_stroke;
			return 2;
		case 0x219B:
			*normals = rightwards_arrow_with_stroke;
			return 2;
		case 0x21AE:
			*normals = left_right_arrow_with_stroke;
			return 2;
		case 0x21CD:
			*normals = leftwards_double_arrow_with_stroke;
			return 2;
		case 0x21CE:
			*normals = left_right_double_arrow_with_stroke;
			return 2;
		case 0x21CF:
			*normals = rightwards_double_arrow_with_stroke;
			return 2;
		case 0x2204:
			*normals = there_does_not_exist;
			return 2;
		case 0x2209:
			*normals = not_an_element_of;
			return 2;
		case 0x220C:
			*normals = does_not_contain_as_member;
			return 2;
		case 0x2224:
			*normals = does_not_divide;
			return 2;
		case 0x2226:
			*normals = not_parallel_to;
			return 2;
		case 0x222C:
			*normals = double_integral;
			return 2;
		case 0x222D:
			*normals = triple_integral;
			return 3;
		case 0x222F:
			*normals = surface_integral;
			return 2;
		case 0x2230:
			*normals = volume_integral;
			return 3;
		case 0x2241:
			*normals = not_tilde;
			return 2;
		case 0x2244:
			*normals = not_asymptotically_equal_to;
			return 2;
		case 0x2247:
			*normals = neither_approximately_nor_actually_equal_to;
			return 2;
		case 0x2249:
			*normals = not_almost_equal_to;
			return 2;
		case 0x2260:
			*normals = not_equal_to;
			return 2;
		case 0x2262:
			*normals = not_identical_to;
			return 2;
		case 0x226D:
			*normals = not_equivalent_to;
			return 2;
		case 0x226E:
			*normals = not_less_than;
			return 2;
		case 0x226F:
			*normals = not_greater_than;
			return 2;
		case 0x2270:
			*normals = neither_less_than_nor_equal_to;
			return 2;
		case 0x2271:
			*normals = neither_greater_than_nor_equal_to;
			return 2;
		case 0x2274:
			*normals = neither_less_than_nor_equivalent_to;
			return 2;
		case 0x2275:
			*normals = neither_greater_than_nor_equivalent_to;
			return 2;
		case 0x2278:
			*normals = neither_less_than_nor_greater_than;
			return 2;
		case 0x2279:
			*normals = neither_greater_than_nor_less_than;
			return 2;
		case 0x2280:
			*normals = does_not_precede;
			return 2;
		case 0x2281:
			*normals = does_not_succeed;
			return 2;
		case 0x2284:
			*normals = not_a_subset_of;
			return 2;
		case 0x2285:
			*normals = not_a_superset_of;
			return 2;
		case 0x2288:
			*normals = neither_a_subset_of_nor_equal_to;
			return 2;
		case 0x2289:
			*normals = neither_a_superset_of_nor_equal_to;
			return 2;
		case 0x22AC:
			*normals = does_not_prove;
			return 2;
		case 0x22AD:
			*normals = not_true;
			return 2;
		case 0x22AE:
			*normals = does_not_force;
			return 2;
		case 0x22AF:
			*normals = negated_double_vertical_bar_double_right_turnstile;
			return 2;
		case 0x22E0:
			*normals = does_not_precede_or_equal;
			return 2;
		case 0x22E1:
			*normals = does_not_succeed_or_equal;
			return 2;
		case 0x22E2:
			*normals = not_square_image_of_or_equal_to;
			return 2;
		case 0x22E3:
			*normals = not_square_original_of_or_equal_to;
			return 2;
		case 0x22EA:
			*normals = not_normal_subgroup_of;
			return 2;
		case 0x22EB:
			*normals = does_not_contain_as_normal_subgroup;
			return 2;
		case 0x22EC:
			*normals = not_normal_subgroup_of_or_equal_to;
			return 2;
		case 0x22ED:
			*normals = does_not_contain_as_normal_subgroup_or_equal;
			return 2;
		case 0x2329:
			*normals = left_pointing_angle_bracket;
			return 1;
		case 0x232A:
			*normals = right_pointing_angle_bracket;
			return 1;
		case 0x2460:
			*normals = circled_digit_one;
			return 1;
		case 0x2461:
			*normals = circled_digit_two;
			return 1;
		case 0x2462:
			*normals = circled_digit_three;
			return 1;
		case 0x2463:
			*normals = circled_digit_four;
			return 1;
		case 0x2464:
			*normals = circled_digit_five;
			return 1;
		case 0x2465:
			*normals = circled_digit_six;
			return 1;
		case 0x2466:
			*normals = circled_digit_seven;
			return 1;
		case 0x2467:
			*normals = circled_digit_eight;
			return 1;
		case 0x2468:
			*normals = circled_digit_nine;
			return 1;
		case 0x2469:
			*normals = circled_number_ten;
			return 2;
		case 0x246A:
			*normals = circled_number_eleven;
			return 2;
		case 0x246B:
			*normals = circled_number_twelve;
			return 2;
		case 0x246C:
			*normals = circled_number_thirteen;
			return 2;
		case 0x246D:
			*normals = circled_number_fourteen;
			return 2;
		case 0x246E:
			*normals = circled_number_fifteen;
			return 2;
		case 0x246F:
			*normals = circled_number_sixteen;
			return 2;
		case 0x2470:
			*normals = circled_number_seventeen;
			return 2;
		case 0x2471:
			*normals = circled_number_eighteen;
			return 2;
		case 0x2472:
			*normals = circled_number_nineteen;
			return 2;
		case 0x2473:
			*normals = circled_number_twenty;
			return 2;
		case 0x2474:
			*normals = parenthesized_digit_one;
			return 3;
		case 0x2475:
			*normals = parenthesized_digit_two;
			return 3;
		case 0x2476:
			*normals = parenthesized_digit_three;
			return 3;
		case 0x2477:
			*normals = parenthesized_digit_four;
			return 3;
		case 0x2478:
			*normals = parenthesized_digit_five;
			return 3;
		case 0x2479:
			*normals = parenthesized_digit_six;
			return 3;
		case 0x247A:
			*normals = parenthesized_digit_seven;
			return 3;
		case 0x247B:
			*normals = parenthesized_digit_eight;
			return 3;
		case 0x247C:
			*normals = parenthesized_digit_nine;
			return 3;
		case 0x247D:
			*normals = parenthesized_number_ten;
			return 4;
		case 0x247E:
			*normals = parenthesized_number_eleven;
			return 4;
		case 0x247F:
			*normals = parenthesized_number_twelve;
			return 4;
		case 0x2480:
			*normals = parenthesized_number_thirteen;
			return 4;
		case 0x2481:
			*normals = parenthesized_number_fourteen;
			return 4;
		case 0x2482:
			*normals = parenthesized_number_fifteen;
			return 4;
		case 0x2483:
			*normals = parenthesized_number_sixteen;
			return 4;
		case 0x2484:
			*normals = parenthesized_number_seventeen;
			return 4;
		case 0x2485:
			*normals = parenthesized_number_eighteen;
			return 4;
		case 0x2486:
			*normals = parenthesized_number_nineteen;
			return 4;
		case 0x2487:
			*normals = parenthesized_number_twenty;
			return 4;
		case 0x2488:
			*normals = digit_one_full_stop;
			return 2;
		case 0x2489:
			*normals = digit_two_full_stop;
			return 2;
		case 0x248A:
			*normals = digit_three_full_stop;
			return 2;
		case 0x248B:
			*normals = digit_four_full_stop;
			return 2;
		case 0x248C:
			*normals = digit_five_full_stop;
			return 2;
		case 0x248D:
			*normals = digit_six_full_stop;
			return 2;
		case 0x248E:
			*normals = digit_seven_full_stop;
			return 2;
		case 0x248F:
			*normals = digit_eight_full_stop;
			return 2;
		case 0x2490:
			*normals = digit_nine_full_stop;
			return 2;
		case 0x2491:
			*normals = number_ten_full_stop;
			return 3;
		case 0x2492:
			*normals = number_eleven_full_stop;
			return 3;
		case 0x2493:
			*normals = number_twelve_full_stop;
			return 3;
		case 0x2494:
			*normals = number_thirteen_full_stop;
			return 3;
		case 0x2495:
			*normals = number_fourteen_full_stop;
			return 3;
		case 0x2496:
			*normals = number_fifteen_full_stop;
			return 3;
		case 0x2497:
			*normals = number_sixteen_full_stop;
			return 3;
		case 0x2498:
			*normals = number_seventeen_full_stop;
			return 3;
		case 0x2499:
			*normals = number_eighteen_full_stop;
			return 3;
		case 0x249A:
			*normals = number_nineteen_full_stop;
			return 3;
		case 0x249B:
			*normals = number_twenty_full_stop;
			return 3;
		case 0x249C:
			*normals = parenthesized_latin_small_letter_a;
			return 3;
		case 0x249D:
			*normals = parenthesized_latin_small_letter_b;
			return 3;
		case 0x249E:
			*normals = parenthesized_latin_small_letter_c;
			return 3;
		case 0x249F:
			*normals = parenthesized_latin_small_letter_d;
			return 3;
		case 0x24A0:
			*normals = parenthesized_latin_small_letter_e;
			return 3;
		case 0x24A1:
			*normals = parenthesized_latin_small_letter_f;
			return 3;
		case 0x24A2:
			*normals = parenthesized_latin_small_letter_g;
			return 3;
		case 0x24A3:
			*normals = parenthesized_latin_small_letter_h;
			return 3;
		case 0x24A4:
			*normals = parenthesized_latin_small_letter_i;
			return 3;
		case 0x24A5:
			*normals = parenthesized_latin_small_letter_j;
			return 3;
		case 0x24A6:
			*normals = parenthesized_latin_small_letter_k;
			return 3;
		case 0x24A7:
			*normals = parenthesized_latin_small_letter_l;
			return 3;
		case 0x24A8:
			*normals = parenthesized_latin_small_letter_m;
			return 3;
		case 0x24A9:
			*normals = parenthesized_latin_small_letter_n;
			return 3;
		case 0x24AA:
			*normals = parenthesized_latin_small_letter_o;
			return 3;
		case 0x24AB:
			*normals = parenthesized_latin_small_letter_p;
			return 3;
		case 0x24AC:
			*normals = parenthesized_latin_small_letter_q;
			return 3;
		case 0x24AD:
			*normals = parenthesized_latin_small_letter_r;
			return 3;
		case 0x24AE:
			*normals = parenthesized_latin_small_letter_s;
			return 3;
		case 0x24AF:
			*normals = parenthesized_latin_small_letter_t;
			return 3;
		case 0x24B0:
			*normals = parenthesized_latin_small_letter_u;
			return 3;
		case 0x24B1:
			*normals = parenthesized_latin_small_letter_v;
			return 3;
		case 0x24B2:
			*normals = parenthesized_latin_small_letter_w;
			return 3;
		case 0x24B3:
			*normals = parenthesized_latin_small_letter_x;
			return 3;
		case 0x24B4:
			*normals = parenthesized_latin_small_letter_y;
			return 3;
		case 0x24B5:
			*normals = parenthesized_latin_small_letter_z;
			return 3;
		case 0x24B6:
			*normals = circled_latin_capital_letter_a;
			return 1;
		case 0x24B7:
			*normals = circled_latin_capital_letter_b;
			return 1;
		case 0x24B8:
			*normals = circled_latin_capital_letter_c;
			return 1;
		case 0x24B9:
			*normals = circled_latin_capital_letter_d;
			return 1;
		case 0x24BA:
			*normals = circled_latin_capital_letter_e;
			return 1;
		case 0x24BB:
			*normals = circled_latin_capital_letter_f;
			return 1;
		case 0x24BC:
			*normals = circled_latin_capital_letter_g;
			return 1;
		case 0x24BD:
			*normals = circled_latin_capital_letter_h;
			return 1;
		case 0x24BE:
			*normals = circled_latin_capital_letter_i;
			return 1;
		case 0x24BF:
			*normals = circled_latin_capital_letter_j;
			return 1;
		case 0x24C0:
			*normals = circled_latin_capital_letter_k;
			return 1;
		case 0x24C1:
			*normals = circled_latin_capital_letter_l;
			return 1;
		case 0x24C2:
			*normals = circled_latin_capital_letter_m;
			return 1;
		case 0x24C3:
			*normals = circled_latin_capital_letter_n;
			return 1;
		case 0x24C4:
			*normals = circled_latin_capital_letter_o;
			return 1;
		case 0x24C5:
			*normals = circled_latin_capital_letter_p;
			return 1;
		case 0x24C6:
			*normals = circled_latin_capital_letter_q;
			return 1;
		case 0x24C7:
			*normals = circled_latin_capital_letter_r;
			return 1;
		case 0x24C8:
			*normals = circled_latin_capital_letter_s;
			return 1;
		case 0x24C9:
			*normals = circled_latin_capital_letter_t;
			return 1;
		case 0x24CA:
			*normals = circled_latin_capital_letter_u;
			return 1;
		case 0x24CB:
			*normals = circled_latin_capital_letter_v;
			return 1;
		case 0x24CC:
			*normals = circled_latin_capital_letter_w;
			return 1;
		case 0x24CD:
			*normals = circled_latin_capital_letter_x;
			return 1;
		case 0x24CE:
			*normals = circled_latin_capital_letter_y;
			return 1;
		case 0x24CF:
			*normals = circled_latin_capital_letter_z;
			return 1;
		case 0x24D0:
			*normals = circled_latin_small_letter_a;
			return 1;
		case 0x24D1:
			*normals = circled_latin_small_letter_b;
			return 1;
		case 0x24D2:
			*normals = circled_latin_small_letter_c;
			return 1;
		case 0x24D3:
			*normals = circled_latin_small_letter_d;
			return 1;
		case 0x24D4:
			*normals = circled_latin_small_letter_e;
			return 1;
		case 0x24D5:
			*normals = circled_latin_small_letter_f;
			return 1;
		case 0x24D6:
			*normals = circled_latin_small_letter_g;
			return 1;
		case 0x24D7:
			*normals = circled_latin_small_letter_h;
			return 1;
		case 0x24D8:
			*normals = circled_latin_small_letter_i;
			return 1;
		case 0x24D9:
			*normals = circled_latin_small_letter_j;
			return 1;
		case 0x24DA:
			*normals = circled_latin_small_letter_k;
			return 1;
		case 0x24DB:
			*normals = circled_latin_small_letter_l;
			return 1;
		case 0x24DC:
			*normals = circled_latin_small_letter_m;
			return 1;
		case 0x24DD:
			*normals = circled_latin_small_letter_n;
			return 1;
		case 0x24DE:
			*normals = circled_latin_small_letter_o;
			return 1;
		case 0x24DF:
			*normals = circled_latin_small_letter_p;
			return 1;
		case 0x24E0:
			*normals = circled_latin_small_letter_q;
			return 1;
		case 0x24E1:
			*normals = circled_latin_small_letter_r;
			return 1;
		case 0x24E2:
			*normals = circled_latin_small_letter_s;
			return 1;
		case 0x24E3:
			*normals = circled_latin_small_letter_t;
			return 1;
		case 0x24E4:
			*normals = circled_latin_small_letter_u;
			return 1;
		case 0x24E5:
			*normals = circled_latin_small_letter_v;
			return 1;
		case 0x24E6:
			*normals = circled_latin_small_letter_w;
			return 1;
		case 0x24E7:
			*normals = circled_latin_small_letter_x;
			return 1;
		case 0x24E8:
			*normals = circled_latin_small_letter_y;
			return 1;
		case 0x24E9:
			*normals = circled_latin_small_letter_z;
			return 1;
		case 0x24EA:
			*normals = circled_digit_zero;
			return 1;
		case 0x2A0C:
			*normals = quadruple_integral_operator;
			return 4;
		case 0x2A74:
			*normals = double_colon_equal;
			return 3;
		case 0x2A75:
			*normals = two_consecutive_equals_signs;
			return 2;
		case 0x2A76:
			*normals = three_consecutive_equals_signs;
			return 3;
		case 0x2ADC:
			*normals = forking;
			return 2;
		case 0x2C7C:
			*normals = latin_subscript_small_letter_j;
			return 1;
		case 0x2C7D:
			*normals = modifier_letter_capital_v;
			return 1;
		case 0x2D6F:
			*normals = tifinagh_modifier_letter_labialization_mark;
			return 1;
		case 0x2E9F:
			*normals = cjk_radical_mother;
			return 1;
		case 0x2EF3:
			*normals = cjk_radical_c_simplified_turtle;
			return 1;
		case 0x2F00:
			*normals = kangxi_radical_one;
			return 1;
		case 0x2F01:
			*normals = kangxi_radical_line;
			return 1;
		case 0x2F02:
			*normals = kangxi_radical_dot;
			return 1;
		case 0x2F03:
			*normals = kangxi_radical_slash;
			return 1;
		case 0x2F04:
			*normals = kangxi_radical_second;
			return 1;
		case 0x2F05:
			*normals = kangxi_radical_hook;
			return 1;
		case 0x2F06:
			*normals = kangxi_radical_two;
			return 1;
		case 0x2F07:
			*normals = kangxi_radical_lid;
			return 1;
		case 0x2F08:
			*normals = kangxi_radical_man;
			return 1;
		case 0x2F09:
			*normals = kangxi_radical_legs;
			return 1;
		case 0x2F0A:
			*normals = kangxi_radical_enter;
			return 1;
		case 0x2F0B:
			*normals = kangxi_radical_eight;
			return 1;
		case 0x2F0C:
			*normals = kangxi_radical_down_box;
			return 1;
		case 0x2F0D:
			*normals = kangxi_radical_cover;
			return 1;
		case 0x2F0E:
			*normals = kangxi_radical_ice;
			return 1;
		case 0x2F0F:
			*normals = kangxi_radical_table;
			return 1;
		case 0x2F10:
			*normals = kangxi_radical_open_box;
			return 1;
		case 0x2F11:
			*normals = kangxi_radical_knife;
			return 1;
		case 0x2F12:
			*normals = kangxi_radical_power;
			return 1;
		case 0x2F13:
			*normals = kangxi_radical_wrap;
			return 1;
		case 0x2F14:
			*normals = kangxi_radical_spoon;
			return 1;
		case 0x2F15:
			*normals = kangxi_radical_right_open_box;
			return 1;
		case 0x2F16:
			*normals = kangxi_radical_hiding_enclosure;
			return 1;
		case 0x2F17:
			*normals = kangxi_radical_ten;
			return 1;
		case 0x2F18:
			*normals = kangxi_radical_divination;
			return 1;
		case 0x2F19:
			*normals = kangxi_radical_seal;
			return 1;
		case 0x2F1A:
			*normals = kangxi_radical_cliff;
			return 1;
		case 0x2F1B:
			*normals = kangxi_radical_private;
			return 1;
		case 0x2F1C:
			*normals = kangxi_radical_again;
			return 1;
		case 0x2F1D:
			*normals = kangxi_radical_mouth;
			return 1;
		case 0x2F1E:
			*normals = kangxi_radical_enclosure;
			return 1;
		case 0x2F1F:
			*normals = kangxi_radical_earth;
			return 1;
		case 0x2F20:
			*normals = kangxi_radical_scholar;
			return 1;
		case 0x2F21:
			*normals = kangxi_radical_go;
			return 1;
		case 0x2F22:
			*normals = kangxi_radical_go_slowly;
			return 1;
		case 0x2F23:
			*normals = kangxi_radical_evening;
			return 1;
		case 0x2F24:
			*normals = kangxi_radical_big;
			return 1;
		case 0x2F25:
			*normals = kangxi_radical_woman;
			return 1;
		case 0x2F26:
			*normals = kangxi_radical_child;
			return 1;
		case 0x2F27:
			*normals = kangxi_radical_roof;
			return 1;
		case 0x2F28:
			*normals = kangxi_radical_inch;
			return 1;
		case 0x2F29:
			*normals = kangxi_radical_small;
			return 1;
		case 0x2F2A:
			*normals = kangxi_radical_lame;
			return 1;
		case 0x2F2B:
			*normals = kangxi_radical_corpse;
			return 1;
		case 0x2F2C:
			*normals = kangxi_radical_sprout;
			return 1;
		case 0x2F2D:
			*normals = kangxi_radical_mountain;
			return 1;
		case 0x2F2E:
			*normals = kangxi_radical_river;
			return 1;
		case 0x2F2F:
			*normals = kangxi_radical_work;
			return 1;
		case 0x2F30:
			*normals = kangxi_radical_oneself;
			return 1;
		case 0x2F31:
			*normals = kangxi_radical_turban;
			return 1;
		case 0x2F32:
			*normals = kangxi_radical_dry;
			return 1;
		case 0x2F33:
			*normals = kangxi_radical_short_thread;
			return 1;
		case 0x2F34:
			*normals = kangxi_radical_dotted_cliff;
			return 1;
		case 0x2F35:
			*normals = kangxi_radical_long_stride;
			return 1;
		case 0x2F36:
			*normals = kangxi_radical_two_hands;
			return 1;
		case 0x2F37:
			*normals = kangxi_radical_shoot;
			return 1;
		case 0x2F38:
			*normals = kangxi_radical_bow;
			return 1;
		case 0x2F39:
			*normals = kangxi_radical_snout;
			return 1;
		case 0x2F3A:
			*normals = kangxi_radical_bristle;
			return 1;
		case 0x2F3B:
			*normals = kangxi_radical_step;
			return 1;
		case 0x2F3C:
			*normals = kangxi_radical_heart;
			return 1;
		case 0x2F3D:
			*normals = kangxi_radical_halberd;
			return 1;
		case 0x2F3E:
			*normals = kangxi_radical_door;
			return 1;
		case 0x2F3F:
			*normals = kangxi_radical_hand;
			return 1;
		case 0x2F40:
			*normals = kangxi_radical_branch;
			return 1;
		case 0x2F41:
			*normals = kangxi_radical_rap;
			return 1;
		case 0x2F42:
			*normals = kangxi_radical_script;
			return 1;
		case 0x2F43:
			*normals = kangxi_radical_dipper;
			return 1;
		case 0x2F44:
			*normals = kangxi_radical_axe;
			return 1;
		case 0x2F45:
			*normals = kangxi_radical_square;
			return 1;
		case 0x2F46:
			*normals = kangxi_radical_not;
			return 1;
		case 0x2F47:
			*normals = kangxi_radical_sun;
			return 1;
		case 0x2F48:
			*normals = kangxi_radical_say;
			return 1;
		case 0x2F49:
			*normals = kangxi_radical_moon;
			return 1;
		case 0x2F4A:
			*normals = kangxi_radical_tree;
			return 1;
		case 0x2F4B:
			*normals = kangxi_radical_lack;
			return 1;
		case 0x2F4C:
			*normals = kangxi_radical_stop;
			return 1;
		case 0x2F4D:
			*normals = kangxi_radical_death;
			return 1;
		case 0x2F4E:
			*normals = kangxi_radical_weapon;
			return 1;
		case 0x2F4F:
			*normals = kangxi_radical_do_not;
			return 1;
		case 0x2F50:
			*normals = kangxi_radical_compare;
			return 1;
		case 0x2F51:
			*normals = kangxi_radical_fur;
			return 1;
		case 0x2F52:
			*normals = kangxi_radical_clan;
			return 1;
		case 0x2F53:
			*normals = kangxi_radical_steam;
			return 1;
		case 0x2F54:
			*normals = kangxi_radical_water;
			return 1;
		case 0x2F55:
			*normals = kangxi_radical_fire;
			return 1;
		case 0x2F56:
			*normals = kangxi_radical_claw;
			return 1;
		case 0x2F57:
			*normals = kangxi_radical_father;
			return 1;
		case 0x2F58:
			*normals = kangxi_radical_double_x;
			return 1;
		case 0x2F59:
			*normals = kangxi_radical_half_tree_trunk;
			return 1;
		case 0x2F5A:
			*normals = kangxi_radical_slice;
			return 1;
		case 0x2F5B:
			*normals = kangxi_radical_fang;
			return 1;
		case 0x2F5C:
			*normals = kangxi_radical_cow;
			return 1;
		case 0x2F5D:
			*normals = kangxi_radical_dog;
			return 1;
		case 0x2F5E:
			*normals = kangxi_radical_profound;
			return 1;
		case 0x2F5F:
			*normals = kangxi_radical_jade;
			return 1;
		case 0x2F60:
			*normals = kangxi_radical_melon;
			return 1;
		case 0x2F61:
			*normals = kangxi_radical_tile;
			return 1;
		case 0x2F62:
			*normals = kangxi_radical_sweet;
			return 1;
		case 0x2F63:
			*normals = kangxi_radical_life;
			return 1;
		case 0x2F64:
			*normals = kangxi_radical_use;
			return 1;
		case 0x2F65:
			*normals = kangxi_radical_field;
			return 1;
		case 0x2F66:
			*normals = kangxi_radical_bolt_of_cloth;
			return 1;
		case 0x2F67:
			*normals = kangxi_radical_sickness;
			return 1;
		case 0x2F68:
			*normals = kangxi_radical_dotted_tent;
			return 1;
		case 0x2F69:
			*normals = kangxi_radical_white;
			return 1;
		case 0x2F6A:
			*normals = kangxi_radical_skin;
			return 1;
		case 0x2F6B:
			*normals = kangxi_radical_dish;
			return 1;
		case 0x2F6C:
			*normals = kangxi_radical_eye;
			return 1;
		case 0x2F6D:
			*normals = kangxi_radical_spear;
			return 1;
		case 0x2F6E:
			*normals = kangxi_radical_arrow;
			return 1;
		case 0x2F6F:
			*normals = kangxi_radical_stone;
			return 1;
		case 0x2F70:
			*normals = kangxi_radical_spirit;
			return 1;
		case 0x2F71:
			*normals = kangxi_radical_track;
			return 1;
		case 0x2F72:
			*normals = kangxi_radical_grain;
			return 1;
		case 0x2F73:
			*normals = kangxi_radical_cave;
			return 1;
		case 0x2F74:
			*normals = kangxi_radical_stand;
			return 1;
		case 0x2F75:
			*normals = kangxi_radical_bamboo;
			return 1;
		case 0x2F76:
			*normals = kangxi_radical_rice;
			return 1;
		case 0x2F77:
			*normals = kangxi_radical_silk;
			return 1;
		case 0x2F78:
			*normals = kangxi_radical_jar;
			return 1;
		case 0x2F79:
			*normals = kangxi_radical_net;
			return 1;
		case 0x2F7A:
			*normals = kangxi_radical_sheep;
			return 1;
		case 0x2F7B:
			*normals = kangxi_radical_feather;
			return 1;
		case 0x2F7C:
			*normals = kangxi_radical_old;
			return 1;
		case 0x2F7D:
			*normals = kangxi_radical_and;
			return 1;
		case 0x2F7E:
			*normals = kangxi_radical_plow;
			return 1;
		case 0x2F7F:
			*normals = kangxi_radical_ear;
			return 1;
		case 0x2F80:
			*normals = kangxi_radical_brush;
			return 1;
		case 0x2F81:
			*normals = kangxi_radical_meat;
			return 1;
		case 0x2F82:
			*normals = kangxi_radical_minister;
			return 1;
		case 0x2F83:
			*normals = kangxi_radical_self;
			return 1;
		case 0x2F84:
			*normals = kangxi_radical_arrive;
			return 1;
		case 0x2F85:
			*normals = kangxi_radical_mortar;
			return 1;
		case 0x2F86:
			*normals = kangxi_radical_tongue;
			return 1;
		case 0x2F87:
			*normals = kangxi_radical_oppose;
			return 1;
		case 0x2F88:
			*normals = kangxi_radical_boat;
			return 1;
		case 0x2F89:
			*normals = kangxi_radical_stopping;
			return 1;
		case 0x2F8A:
			*normals = kangxi_radical_color;
			return 1;
		case 0x2F8B:
			*normals = kangxi_radical_grass;
			return 1;
		case 0x2F8C:
			*normals = kangxi_radical_tiger;
			return 1;
		case 0x2F8D:
			*normals = kangxi_radical_insect;
			return 1;
		case 0x2F8E:
			*normals = kangxi_radical_blood;
			return 1;
		case 0x2F8F:
			*normals = kangxi_radical_walk_enclosure;
			return 1;
		case 0x2F90:
			*normals = kangxi_radical_clothes;
			return 1;
		case 0x2F91:
			*normals = kangxi_radical_west;
			return 1;
		case 0x2F92:
			*normals = kangxi_radical_see;
			return 1;
		case 0x2F93:
			*normals = kangxi_radical_horn;
			return 1;
		case 0x2F94:
			*normals = kangxi_radical_speech;
			return 1;
		case 0x2F95:
			*normals = kangxi_radical_valley;
			return 1;
		case 0x2F96:
			*normals = kangxi_radical_bean;
			return 1;
		case 0x2F97:
			*normals = kangxi_radical_pig;
			return 1;
		case 0x2F98:
			*normals = kangxi_radical_badger;
			return 1;
		case 0x2F99:
			*normals = kangxi_radical_shell;
			return 1;
		case 0x2F9A:
			*normals = kangxi_radical_red;
			return 1;
		case 0x2F9B:
			*normals = kangxi_radical_run;
			return 1;
		case 0x2F9C:
			*normals = kangxi_radical_foot;
			return 1;
		case 0x2F9D:
			*normals = kangxi_radical_body;
			return 1;
		case 0x2F9E:
			*normals = kangxi_radical_cart;
			return 1;
		case 0x2F9F:
			*normals = kangxi_radical_bitter;
			return 1;
		case 0x2FA0:
			*normals = kangxi_radical_morning;
			return 1;
		case 0x2FA1:
			*normals = kangxi_radical_walk;
			return 1;
		case 0x2FA2:
			*normals = kangxi_radical_city;
			return 1;
		case 0x2FA3:
			*normals = kangxi_radical_wine;
			return 1;
		case 0x2FA4:
			*normals = kangxi_radical_distinguish;
			return 1;
		case 0x2FA5:
			*normals = kangxi_radical_village;
			return 1;
		case 0x2FA6:
			*normals = kangxi_radical_gold;
			return 1;
		case 0x2FA7:
			*normals = kangxi_radical_long;
			return 1;
		case 0x2FA8:
			*normals = kangxi_radical_gate;
			return 1;
		case 0x2FA9:
			*normals = kangxi_radical_mound;
			return 1;
		case 0x2FAA:
			*normals = kangxi_radical_slave;
			return 1;
		case 0x2FAB:
			*normals = kangxi_radical_short_tailed_bird;
			return 1;
		case 0x2FAC:
			*normals = kangxi_radical_rain;
			return 1;
		case 0x2FAD:
			*normals = kangxi_radical_blue;
			return 1;
		case 0x2FAE:
			*normals = kangxi_radical_wrong;
			return 1;
		case 0x2FAF:
			*normals = kangxi_radical_face;
			return 1;
		case 0x2FB0:
			*normals = kangxi_radical_leather;
			return 1;
		case 0x2FB1:
			*normals = kangxi_radical_tanned_leather;
			return 1;
		case 0x2FB2:
			*normals = kangxi_radical_leek;
			return 1;
		case 0x2FB3:
			*normals = kangxi_radical_sound;
			return 1;
		case 0x2FB4:
			*normals = kangxi_radical_leaf;
			return 1;
		case 0x2FB5:
			*normals = kangxi_radical_wind;
			return 1;
		case 0x2FB6:
			*normals = kangxi_radical_fly;
			return 1;
		case 0x2FB7:
			*normals = kangxi_radical_eat;
			return 1;
		case 0x2FB8:
			*normals = kangxi_radical_head;
			return 1;
		case 0x2FB9:
			*normals = kangxi_radical_fragrant;
			return 1;
		case 0x2FBA:
			*normals = kangxi_radical_horse;
			return 1;
		case 0x2FBB:
			*normals = kangxi_radical_bone;
			return 1;
		case 0x2FBC:
			*normals = kangxi_radical_tall;
			return 1;
		case 0x2FBD:
			*normals = kangxi_radical_hair;
			return 1;
		case 0x2FBE:
			*normals = kangxi_radical_fight;
			return 1;
		case 0x2FBF:
			*normals = kangxi_radical_sacrificial_wine;
			return 1;
		case 0x2FC0:
			*normals = kangxi_radical_cauldron;
			return 1;
		case 0x2FC1:
			*normals = kangxi_radical_ghost;
			return 1;
		case 0x2FC2:
			*normals = kangxi_radical_fish;
			return 1;
		case 0x2FC3:
			*normals = kangxi_radical_bird;
			return 1;
		case 0x2FC4:
			*normals = kangxi_radical_salt;
			return 1;
		case 0x2FC5:
			*normals = kangxi_radical_deer;
			return 1;
		case 0x2FC6:
			*normals = kangxi_radical_wheat;
			return 1;
		case 0x2FC7:
			*normals = kangxi_radical_hemp;
			return 1;
		case 0x2FC8:
			*normals = kangxi_radical_yellow;
			return 1;
		case 0x2FC9:
			*normals = kangxi_radical_millet;
			return 1;
		case 0x2FCA:
			*normals = kangxi_radical_black;
			return 1;
		case 0x2FCB:
			*normals = kangxi_radical_embroidery;
			return 1;
		case 0x2FCC:
			*normals = kangxi_radical_frog;
			return 1;
		case 0x2FCD:
			*normals = kangxi_radical_tripod;
			return 1;
		case 0x2FCE:
			*normals = kangxi_radical_drum;
			return 1;
		case 0x2FCF:
			*normals = kangxi_radical_rat;
			return 1;
		case 0x2FD0:
			*normals = kangxi_radical_nose;
			return 1;
		case 0x2FD1:
			*normals = kangxi_radical_even;
			return 1;
		case 0x2FD2:
			*normals = kangxi_radical_tooth;
			return 1;
		case 0x2FD3:
			*normals = kangxi_radical_dragon;
			return 1;
		case 0x2FD4:
			*normals = kangxi_radical_turtle;
			return 1;
		case 0x2FD5:
			*normals = kangxi_radical_flute;
			return 1;
		case 0x3000:
			*normals = ideographic_space;
			return 1;
		case 0x3036:
			*normals = circled_postal_mark;
			return 1;
		case 0x3038:
			*normals = hangzhou_numeral_ten;
			return 1;
		case 0x3039:
			*normals = hangzhou_numeral_twenty;
			return 1;
		case 0x303A:
			*normals = hangzhou_numeral_thirty;
			return 1;
		case 0x304C:
			*normals = hiragana_letter_ga;
			return 2;
		case 0x304E:
			*normals = hiragana_letter_gi;
			return 2;
		case 0x3050:
			*normals = hiragana_letter_gu;
			return 2;
		case 0x3052:
			*normals = hiragana_letter_ge;
			return 2;
		case 0x3054:
			*normals = hiragana_letter_go;
			return 2;
		case 0x3056:
			*normals = hiragana_letter_za;
			return 2;
		case 0x3058:
			*normals = hiragana_letter_zi;
			return 2;
		case 0x305A:
			*normals = hiragana_letter_zu;
			return 2;
		case 0x305C:
			*normals = hiragana_letter_ze;
			return 2;
		case 0x305E:
			*normals = hiragana_letter_zo;
			return 2;
		case 0x3060:
			*normals = hiragana_letter_da;
			return 2;
		case 0x3062:
			*normals = hiragana_letter_di;
			return 2;
		case 0x3065:
			*normals = hiragana_letter_du;
			return 2;
		case 0x3067:
			*normals = hiragana_letter_de;
			return 2;
		case 0x3069:
			*normals = hiragana_letter_do;
			return 2;
		case 0x3070:
			*normals = hiragana_letter_ba;
			return 2;
		case 0x3071:
			*normals = hiragana_letter_pa;
			return 2;
		case 0x3073:
			*normals = hiragana_letter_bi;
			return 2;
		case 0x3074:
			*normals = hiragana_letter_pi;
			return 2;
		case 0x3076:
			*normals = hiragana_letter_bu;
			return 2;
		case 0x3077:
			*normals = hiragana_letter_pu;
			return 2;
		case 0x3079:
			*normals = hiragana_letter_be;
			return 2;
		case 0x307A:
			*normals = hiragana_letter_pe;
			return 2;
		case 0x307C:
			*normals = hiragana_letter_bo;
			return 2;
		case 0x307D:
			*normals = hiragana_letter_po;
			return 2;
		case 0x3094:
			*normals = hiragana_letter_vu;
			return 2;
		case 0x309B:
			*normals = katakana_hiragana_voiced_sound_mark;
			return 2;
		case 0x309C:
			*normals = katakana_hiragana_semi_voiced_sound_mark;
			return 2;
		case 0x309E:
			*normals = hiragana_voiced_iteration_mark;
			return 2;
		case 0x309F:
			*normals = hiragana_digraph_yori;
			return 2;
		case 0x30AC:
			*normals = katakana_letter_ga;
			return 2;
		case 0x30AE:
			*normals = katakana_letter_gi;
			return 2;
		case 0x30B0:
			*normals = katakana_letter_gu;
			return 2;
		case 0x30B2:
			*normals = katakana_letter_ge;
			return 2;
		case 0x30B4:
			*normals = katakana_letter_go;
			return 2;
		case 0x30B6:
			*normals = katakana_letter_za;
			return 2;
		case 0x30B8:
			*normals = katakana_letter_zi;
			return 2;
		case 0x30BA:
			*normals = katakana_letter_zu;
			return 2;
		case 0x30BC:
			*normals = katakana_letter_ze;
			return 2;
		case 0x30BE:
			*normals = katakana_letter_zo;
			return 2;
		case 0x30C0:
			*normals = katakana_letter_da;
			return 2;
		case 0x30C2:
			*normals = katakana_letter_di;
			return 2;
		case 0x30C5:
			*normals = katakana_letter_du;
			return 2;
		case 0x30C7:
			*normals = katakana_letter_de;
			return 2;
		case 0x30C9:
			*normals = katakana_letter_do;
			return 2;
		case 0x30D0:
			*normals = katakana_letter_ba;
			return 2;
		case 0x30D1:
			*normals = katakana_letter_pa;
			return 2;
		case 0x30D3:
			*normals = katakana_letter_bi;
			return 2;
		case 0x30D4:
			*normals = katakana_letter_pi;
			return 2;
		case 0x30D6:
			*normals = katakana_letter_bu;
			return 2;
		case 0x30D7:
			*normals = katakana_letter_pu;
			return 2;
		case 0x30D9:
			*normals = katakana_letter_be;
			return 2;
		case 0x30DA:
			*normals = katakana_letter_pe;
			return 2;
		case 0x30DC:
			*normals = katakana_letter_bo;
			return 2;
		case 0x30DD:
			*normals = katakana_letter_po;
			return 2;
		case 0x30F4:
			*normals = katakana_letter_vu;
			return 2;
		case 0x30F7:
			*normals = katakana_letter_va;
			return 2;
		case 0x30F8:
			*normals = katakana_letter_vi;
			return 2;
		case 0x30F9:
			*normals = katakana_letter_ve;
			return 2;
		case 0x30FA:
			*normals = katakana_letter_vo;
			return 2;
		case 0x30FE:
			*normals = katakana_voiced_iteration_mark;
			return 2;
		case 0x30FF:
			*normals = katakana_digraph_koto;
			return 2;
		case 0x3131:
			*normals = hangul_letter_kiyeok;
			return 1;
		case 0x3132:
			*normals = hangul_letter_ssangkiyeok;
			return 1;
		case 0x3133:
			*normals = hangul_letter_kiyeok_sios;
			return 1;
		case 0x3134:
			*normals = hangul_letter_nieun;
			return 1;
		case 0x3135:
			*normals = hangul_letter_nieun_cieuc;
			return 1;
		case 0x3136:
			*normals = hangul_letter_nieun_hieuh;
			return 1;
		case 0x3137:
			*normals = hangul_letter_tikeut;
			return 1;
		case 0x3138:
			*normals = hangul_letter_ssangtikeut;
			return 1;
		case 0x3139:
			*normals = hangul_letter_rieul;
			return 1;
		case 0x313A:
			*normals = hangul_letter_rieul_kiyeok;
			return 1;
		case 0x313B:
			*normals = hangul_letter_rieul_mieum;
			return 1;
		case 0x313C:
			*normals = hangul_letter_rieul_pieup;
			return 1;
		case 0x313D:
			*normals = hangul_letter_rieul_sios;
			return 1;
		case 0x313E:
			*normals = hangul_letter_rieul_thieuth;
			return 1;
		case 0x313F:
			*normals = hangul_letter_rieul_phieuph;
			return 1;
		case 0x3140:
			*normals = hangul_letter_rieul_hieuh;
			return 1;
		case 0x3141:
			*normals = hangul_letter_mieum;
			return 1;
		case 0x3142:
			*normals = hangul_letter_pieup;
			return 1;
		case 0x3143:
			*normals = hangul_letter_ssangpieup;
			return 1;
		case 0x3144:
			*normals = hangul_letter_pieup_sios;
			return 1;
		case 0x3145:
			*normals = hangul_letter_sios;
			return 1;
		case 0x3146:
			*normals = hangul_letter_ssangsios;
			return 1;
		case 0x3147:
			*normals = hangul_letter_ieung;
			return 1;
		case 0x3148:
			*normals = hangul_letter_cieuc;
			return 1;
		case 0x3149:
			*normals = hangul_letter_ssangcieuc;
			return 1;
		case 0x314A:
			*normals = hangul_letter_chieuch;
			return 1;
		case 0x314B:
			*normals = hangul_letter_khieukh;
			return 1;
		case 0x314C:
			*normals = hangul_letter_thieuth;
			return 1;
		case 0x314D:
			*normals = hangul_letter_phieuph;
			return 1;
		case 0x314E:
			*normals = hangul_letter_hieuh;
			return 1;
		case 0x314F:
			*normals = hangul_letter_a;
			return 1;
		case 0x3150:
			*normals = hangul_letter_ae;
			return 1;
		case 0x3151:
			*normals = hangul_letter_ya;
			return 1;
		case 0x3152:
			*normals = hangul_letter_yae;
			return 1;
		case 0x3153:
			*normals = hangul_letter_eo;
			return 1;
		case 0x3154:
			*normals = hangul_letter_e;
			return 1;
		case 0x3155:
			*normals = hangul_letter_yeo;
			return 1;
		case 0x3156:
			*normals = hangul_letter_ye;
			return 1;
		case 0x3157:
			*normals = hangul_letter_o;
			return 1;
		case 0x3158:
			*normals = hangul_letter_wa;
			return 1;
		case 0x3159:
			*normals = hangul_letter_wae;
			return 1;
		case 0x315A:
			*normals = hangul_letter_oe;
			return 1;
		case 0x315B:
			*normals = hangul_letter_yo;
			return 1;
		case 0x315C:
			*normals = hangul_letter_u;
			return 1;
		case 0x315D:
			*normals = hangul_letter_weo;
			return 1;
		case 0x315E:
			*normals = hangul_letter_we;
			return 1;
		case 0x315F:
			*normals = hangul_letter_wi;
			return 1;
		case 0x3160:
			*normals = hangul_letter_yu;
			return 1;
		case 0x3161:
			*normals = hangul_letter_eu;
			return 1;
		case 0x3162:
			*normals = hangul_letter_yi;
			return 1;
		case 0x3163:
			*normals = hangul_letter_i;
			return 1;
		case 0x3164:
			*normals = hangul_filler;
			return 1;
		case 0x3165:
			*normals = hangul_letter_ssangnieun;
			return 1;
		case 0x3166:
			*normals = hangul_letter_nieun_tikeut;
			return 1;
		case 0x3167:
			*normals = hangul_letter_nieun_sios;
			return 1;
		case 0x3168:
			*normals = hangul_letter_nieun_pansios;
			return 1;
		case 0x3169:
			*normals = hangul_letter_rieul_kiyeok_sios;
			return 1;
		case 0x316A:
			*normals = hangul_letter_rieul_tikeut;
			return 1;
		case 0x316B:
			*normals = hangul_letter_rieul_pieup_sios;
			return 1;
		case 0x316C:
			*normals = hangul_letter_rieul_pansios;
			return 1;
		case 0x316D:
			*normals = hangul_letter_rieul_yeorinhieuh;
			return 1;
		case 0x316E:
			*normals = hangul_letter_mieum_pieup;
			return 1;
		case 0x316F:
			*normals = hangul_letter_mieum_sios;
			return 1;
		case 0x3170:
			*normals = hangul_letter_mieum_pansios;
			return 1;
		case 0x3171:
			*normals = hangul_letter_kapyeounmieum;
			return 1;
		case 0x3172:
			*normals = hangul_letter_pieup_kiyeok;
			return 1;
		case 0x3173:
			*normals = hangul_letter_pieup_tikeut;
			return 1;
		case 0x3174:
			*normals = hangul_letter_pieup_sios_kiyeok;
			return 1;
		case 0x3175:
			*normals = hangul_letter_pieup_sios_tikeut;
			return 1;
		case 0x3176:
			*normals = hangul_letter_pieup_cieuc;
			return 1;
		case 0x3177:
			*normals = hangul_letter_pieup_thieuth;
			return 1;
		case 0x3178:
			*normals = hangul_letter_kapyeounpieup;
			return 1;
		case 0x3179:
			*normals = hangul_letter_kapyeounssangpieup;
			return 1;
		case 0x317A:
			*normals = hangul_letter_sios_kiyeok;
			return 1;
		case 0x317B:
			*normals = hangul_letter_sios_nieun;
			return 1;
		case 0x317C:
			*normals = hangul_letter_sios_tikeut;
			return 1;
		case 0x317D:
			*normals = hangul_letter_sios_pieup;
			return 1;
		case 0x317E:
			*normals = hangul_letter_sios_cieuc;
			return 1;
		case 0x317F:
			*normals = hangul_letter_pansios;
			return 1;
		case 0x3180:
			*normals = hangul_letter_ssangieung;
			return 1;
		case 0x3181:
			*normals = hangul_letter_yesieung;
			return 1;
		case 0x3182:
			*normals = hangul_letter_yesieung_sios;
			return 1;
		case 0x3183:
			*normals = hangul_letter_yesieung_pansios;
			return 1;
		case 0x3184:
			*normals = hangul_letter_kapyeounphieuph;
			return 1;
		case 0x3185:
			*normals = hangul_letter_ssanghieuh;
			return 1;
		case 0x3186:
			*normals = hangul_letter_yeorinhieuh;
			return 1;
		case 0x3187:
			*normals = hangul_letter_yo_ya;
			return 1;
		case 0x3188:
			*normals = hangul_letter_yo_yae;
			return 1;
		case 0x3189:
			*normals = hangul_letter_yo_i;
			return 1;
		case 0x318A:
			*normals = hangul_letter_yu_yeo;
			return 1;
		case 0x318B:
			*normals = hangul_letter_yu_ye;
			return 1;
		case 0x318C:
			*normals = hangul_letter_yu_i;
			return 1;
		case 0x318D:
			*normals = hangul_letter_araea;
			return 1;
		case 0x318E:
			*normals = hangul_letter_araeae;
			return 1;
		case 0x3192:
			*normals = ideographic_annotation_one_mark;
			return 1;
		case 0x3193:
			*normals = ideographic_annotation_two_mark;
			return 1;
		case 0x3194:
			*normals = ideographic_annotation_three_mark;
			return 1;
		case 0x3195:
			*normals = ideographic_annotation_four_mark;
			return 1;
		case 0x3196:
			*normals = ideographic_annotation_top_mark;
			return 1;
		case 0x3197:
			*normals = ideographic_annotation_middle_mark;
			return 1;
		case 0x3198:
			*normals = ideographic_annotation_bottom_mark;
			return 1;
		case 0x3199:
			*normals = ideographic_annotation_first_mark;
			return 1;
		case 0x319A:
			*normals = ideographic_annotation_second_mark;
			return 1;
		case 0x319B:
			*normals = ideographic_annotation_third_mark;
			return 1;
		case 0x319C:
			*normals = ideographic_annotation_fourth_mark;
			return 1;
		case 0x319D:
			*normals = ideographic_annotation_heaven_mark;
			return 1;
		case 0x319E:
			*normals = ideographic_annotation_earth_mark;
			return 1;
		case 0x319F:
			*normals = ideographic_annotation_man_mark;
			return 1;
		case 0x3200:
			*normals = parenthesized_hangul_kiyeok;
			return 3;
		case 0x3201:
			*normals = parenthesized_hangul_nieun;
			return 3;
		case 0x3202:
			*normals = parenthesized_hangul_tikeut;
			return 3;
		case 0x3203:
			*normals = parenthesized_hangul_rieul;
			return 3;
		case 0x3204:
			*normals = parenthesized_hangul_mieum;
			return 3;
		case 0x3205:
			*normals = parenthesized_hangul_pieup;
			return 3;
		case 0x3206:
			*normals = parenthesized_hangul_sios;
			return 3;
		case 0x3207:
			*normals = parenthesized_hangul_ieung;
			return 3;
		case 0x3208:
			*normals = parenthesized_hangul_cieuc;
			return 3;
		case 0x3209:
			*normals = parenthesized_hangul_chieuch;
			return 3;
		case 0x320A:
			*normals = parenthesized_hangul_khieukh;
			return 3;
		case 0x320B:
			*normals = parenthesized_hangul_thieuth;
			return 3;
		case 0x320C:
			*normals = parenthesized_hangul_phieuph;
			return 3;
		case 0x320D:
			*normals = parenthesized_hangul_hieuh;
			return 3;
		case 0x320E:
			*normals = parenthesized_hangul_kiyeok_a;
			return 4;
		case 0x320F:
			*normals = parenthesized_hangul_nieun_a;
			return 4;
		case 0x3210:
			*normals = parenthesized_hangul_tikeut_a;
			return 4;
		case 0x3211:
			*normals = parenthesized_hangul_rieul_a;
			return 4;
		case 0x3212:
			*normals = parenthesized_hangul_mieum_a;
			return 4;
		case 0x3213:
			*normals = parenthesized_hangul_pieup_a;
			return 4;
		case 0x3214:
			*normals = parenthesized_hangul_sios_a;
			return 4;
		case 0x3215:
			*normals = parenthesized_hangul_ieung_a;
			return 4;
		case 0x3216:
			*normals = parenthesized_hangul_cieuc_a;
			return 4;
		case 0x3217:
			*normals = parenthesized_hangul_chieuch_a;
			return 4;
		case 0x3218:
			*normals = parenthesized_hangul_khieukh_a;
			return 4;
		case 0x3219:
			*normals = parenthesized_hangul_thieuth_a;
			return 4;
		case 0x321A:
			*normals = parenthesized_hangul_phieuph_a;
			return 4;
		case 0x321B:
			*normals = parenthesized_hangul_hieuh_a;
			return 4;
		case 0x321C:
			*normals = parenthesized_hangul_cieuc_u;
			return 4;
		case 0x321D:
			*normals = parenthesized_korean_character_ojeon;
			return 7;
		case 0x321E:
			*normals = parenthesized_korean_character_o_hu;
			return 6;
		case 0x3220:
			*normals = parenthesized_ideograph_one;
			return 3;
		case 0x3221:
			*normals = parenthesized_ideograph_two;
			return 3;
		case 0x3222:
			*normals = parenthesized_ideograph_three;
			return 3;
		case 0x3223:
			*normals = parenthesized_ideograph_four;
			return 3;
		case 0x3224:
			*normals = parenthesized_ideograph_five;
			return 3;
		case 0x3225:
			*normals = parenthesized_ideograph_six;
			return 3;
		case 0x3226:
			*normals = parenthesized_ideograph_seven;
			return 3;
		case 0x3227:
			*normals = parenthesized_ideograph_eight;
			return 3;
		case 0x3228:
			*normals = parenthesized_ideograph_nine;
			return 3;
		case 0x3229:
			*normals = parenthesized_ideograph_ten;
			return 3;
		case 0x322A:
			*normals = parenthesized_ideograph_moon;
			return 3;
		case 0x322B:
			*normals = parenthesized_ideograph_fire;
			return 3;
		case 0x322C:
			*normals = parenthesized_ideograph_water;
			return 3;
		case 0x322D:
			*normals = parenthesized_ideograph_wood;
			return 3;
		case 0x322E:
			*normals = parenthesized_ideograph_metal;
			return 3;
		case 0x322F:
			*normals = parenthesized_ideograph_earth;
			return 3;
		case 0x3230:
			*normals = parenthesized_ideograph_sun;
			return 3;
		case 0x3231:
			*normals = parenthesized_ideograph_stock;
			return 3;
		case 0x3232:
			*normals = parenthesized_ideograph_have;
			return 3;
		case 0x3233:
			*normals = parenthesized_ideograph_society;
			return 3;
		case 0x3234:
			*normals = parenthesized_ideograph_name;
			return 3;
		case 0x3235:
			*normals = parenthesized_ideograph_special;
			return 3;
		case 0x3236:
			*normals = parenthesized_ideograph_financial;
			return 3;
		case 0x3237:
			*normals = parenthesized_ideograph_congratulation;
			return 3;
		case 0x3238:
			*normals = parenthesized_ideograph_labor;
			return 3;
		case 0x3239:
			*normals = parenthesized_ideograph_represent;
			return 3;
		case 0x323A:
			*normals = parenthesized_ideograph_call;
			return 3;
		case 0x323B:
			*normals = parenthesized_ideograph_study;
			return 3;
		case 0x323C:
			*normals = parenthesized_ideograph_supervise;
			return 3;
		case 0x323D:
			*normals = parenthesized_ideograph_enterprise;
			return 3;
		case 0x323E:
			*normals = parenthesized_ideograph_resource;
			return 3;
		case 0x323F:
			*normals = parenthesized_ideograph_alliance;
			return 3;
		case 0x3240:
			*normals = parenthesized_ideograph_festival;
			return 3;
		case 0x3241:
			*normals = parenthesized_ideograph_rest;
			return 3;
		case 0x3242:
			*normals = parenthesized_ideograph_self;
			return 3;
		case 0x3243:
			*normals = parenthesized_ideograph_reach;
			return 3;
		case 0x3244:
			*normals = circled_ideograph_question;
			return 1;
		case 0x3245:
			*normals = circled_ideograph_kindergarten;
			return 1;
		case 0x3246:
			*normals = circled_ideograph_school;
			return 1;
		case 0x3247:
			*normals = circled_ideograph_koto;
			return 1;
		case 0x3250:
			*normals = partnership_sign;
			return 3;
		case 0x3251:
			*normals = circled_number_twenty_one;
			return 2;
		case 0x3252:
			*normals = circled_number_twenty_two;
			return 2;
		case 0x3253:
			*normals = circled_number_twenty_three;
			return 2;
		case 0x3254:
			*normals = circled_number_twenty_four;
			return 2;
		case 0x3255:
			*normals = circled_number_twenty_five;
			return 2;
		case 0x3256:
			*normals = circled_number_twenty_six;
			return 2;
		case 0x3257:
			*normals = circled_number_twenty_seven;
			return 2;
		case 0x3258:
			*normals = circled_number_twenty_eight;
			return 2;
		case 0x3259:
			*normals = circled_number_twenty_nine;
			return 2;
		case 0x325A:
			*normals = circled_number_thirty;
			return 2;
		case 0x325B:
			*normals = circled_number_thirty_one;
			return 2;
		case 0x325C:
			*normals = circled_number_thirty_two;
			return 2;
		case 0x325D:
			*normals = circled_number_thirty_three;
			return 2;
		case 0x325E:
			*normals = circled_number_thirty_four;
			return 2;
		case 0x325F:
			*normals = circled_number_thirty_five;
			return 2;
		case 0x3260:
			*normals = circled_hangul_kiyeok;
			return 1;
		case 0x3261:
			*normals = circled_hangul_nieun;
			return 1;
		case 0x3262:
			*normals = circled_hangul_tikeut;
			return 1;
		case 0x3263:
			*normals = circled_hangul_rieul;
			return 1;
		case 0x3264:
			*normals = circled_hangul_mieum;
			return 1;
		case 0x3265:
			*normals = circled_hangul_pieup;
			return 1;
		case 0x3266:
			*normals = circled_hangul_sios;
			return 1;
		case 0x3267:
			*normals = circled_hangul_ieung;
			return 1;
		case 0x3268:
			*normals = circled_hangul_cieuc;
			return 1;
		case 0x3269:
			*normals = circled_hangul_chieuch;
			return 1;
		case 0x326A:
			*normals = circled_hangul_khieukh;
			return 1;
		case 0x326B:
			*normals = circled_hangul_thieuth;
			return 1;
		case 0x326C:
			*normals = circled_hangul_phieuph;
			return 1;
		case 0x326D:
			*normals = circled_hangul_hieuh;
			return 1;
		case 0x326E:
			*normals = circled_hangul_kiyeok_a;
			return 2;
		case 0x326F:
			*normals = circled_hangul_nieun_a;
			return 2;
		case 0x3270:
			*normals = circled_hangul_tikeut_a;
			return 2;
		case 0x3271:
			*normals = circled_hangul_rieul_a;
			return 2;
		case 0x3272:
			*normals = circled_hangul_mieum_a;
			return 2;
		case 0x3273:
			*normals = circled_hangul_pieup_a;
			return 2;
		case 0x3274:
			*normals = circled_hangul_sios_a;
			return 2;
		case 0x3275:
			*normals = circled_hangul_ieung_a;
			return 2;
		case 0x3276:
			*normals = circled_hangul_cieuc_a;
			return 2;
		case 0x3277:
			*normals = circled_hangul_chieuch_a;
			return 2;
		case 0x3278:
			*normals = circled_hangul_khieukh_a;
			return 2;
		case 0x3279:
			*normals = circled_hangul_thieuth_a;
			return 2;
		case 0x327A:
			*normals = circled_hangul_phieuph_a;
			return 2;
		case 0x327B:
			*normals = circled_hangul_hieuh_a;
			return 2;
		case 0x327C:
			*normals = circled_korean_character_chamko;
			return 5;
		case 0x327D:
			*normals = circled_korean_character_jueui;
			return 4;
		case 0x327E:
			*normals = circled_hangul_ieung_u;
			return 2;
		case 0x3280:
			*normals = circled_ideograph_one;
			return 1;
		case 0x3281:
			*normals = circled_ideograph_two;
			return 1;
		case 0x3282:
			*normals = circled_ideograph_three;
			return 1;
		case 0x3283:
			*normals = circled_ideograph_four;
			return 1;
		case 0x3284:
			*normals = circled_ideograph_five;
			return 1;
		case 0x3285:
			*normals = circled_ideograph_six;
			return 1;
		case 0x3286:
			*normals = circled_ideograph_seven;
			return 1;
		case 0x3287:
			*normals = circled_ideograph_eight;
			return 1;
		case 0x3288:
			*normals = circled_ideograph_nine;
			return 1;
		case 0x3289:
			*normals = circled_ideograph_ten;
			return 1;
		case 0x328A:
			*normals = circled_ideograph_moon;
			return 1;
		case 0x328B:
			*normals = circled_ideograph_fire;
			return 1;
		case 0x328C:
			*normals = circled_ideograph_water;
			return 1;
		case 0x328D:
			*normals = circled_ideograph_wood;
			return 1;
		case 0x328E:
			*normals = circled_ideograph_metal;
			return 1;
		case 0x328F:
			*normals = circled_ideograph_earth;
			return 1;
		case 0x3290:
			*normals = circled_ideograph_sun;
			return 1;
		case 0x3291:
			*normals = circled_ideograph_stock;
			return 1;
		case 0x3292:
			*normals = circled_ideograph_have;
			return 1;
		case 0x3293:
			*normals = circled_ideograph_society;
			return 1;
		case 0x3294:
			*normals = circled_ideograph_name;
			return 1;
		case 0x3295:
			*normals = circled_ideograph_special;
			return 1;
		case 0x3296:
			*normals = circled_ideograph_financial;
			return 1;
		case 0x3297:
			*normals = circled_ideograph_congratulation;
			return 1;
		case 0x3298:
			*normals = circled_ideograph_labor;
			return 1;
		case 0x3299:
			*normals = circled_ideograph_secret;
			return 1;
		case 0x329A:
			*normals = circled_ideograph_male;
			return 1;
		case 0x329B:
			*normals = circled_ideograph_female;
			return 1;
		case 0x329C:
			*normals = circled_ideograph_suitable;
			return 1;
		case 0x329D:
			*normals = circled_ideograph_excellent;
			return 1;
		case 0x329E:
			*normals = circled_ideograph_print;
			return 1;
		case 0x329F:
			*normals = circled_ideograph_attention;
			return 1;
		case 0x32A0:
			*normals = circled_ideograph_item;
			return 1;
		case 0x32A1:
			*normals = circled_ideograph_rest;
			return 1;
		case 0x32A2:
			*normals = circled_ideograph_copy;
			return 1;
		case 0x32A3:
			*normals = circled_ideograph_correct;
			return 1;
		case 0x32A4:
			*normals = circled_ideograph_high;
			return 1;
		case 0x32A5:
			*normals = circled_ideograph_centre;
			return 1;
		case 0x32A6:
			*normals = circled_ideograph_low;
			return 1;
		case 0x32A7:
			*normals = circled_ideograph_left;
			return 1;
		case 0x32A8:
			*normals = circled_ideograph_right;
			return 1;
		case 0x32A9:
			*normals = circled_ideograph_medicine;
			return 1;
		case 0x32AA:
			*normals = circled_ideograph_religion;
			return 1;
		case 0x32AB:
			*normals = circled_ideograph_study;
			return 1;
		case 0x32AC:
			*normals = circled_ideograph_supervise;
			return 1;
		case 0x32AD:
			*normals = circled_ideograph_enterprise;
			return 1;
		case 0x32AE:
			*normals = circled_ideograph_resource;
			return 1;
		case 0x32AF:
			*normals = circled_ideograph_alliance;
			return 1;
		case 0x32B0:
			*normals = circled_ideograph_night;
			return 1;
		case 0x32B1:
			*normals = circled_number_thirty_six;
			return 2;
		case 0x32B2:
			*normals = circled_number_thirty_seven;
			return 2;
		case 0x32B3:
			*normals = circled_number_thirty_eight;
			return 2;
		case 0x32B4:
			*normals = circled_number_thirty_nine;
			return 2;
		case 0x32B5:
			*normals = circled_number_forty;
			return 2;
		case 0x32B6:
			*normals = circled_number_forty_one;
			return 2;
		case 0x32B7:
			*normals = circled_number_forty_two;
			return 2;
		case 0x32B8:
			*normals = circled_number_forty_three;
			return 2;
		case 0x32B9:
			*normals = circled_number_forty_four;
			return 2;
		case 0x32BA:
			*normals = circled_number_forty_five;
			return 2;
		case 0x32BB:
			*normals = circled_number_forty_six;
			return 2;
		case 0x32BC:
			*normals = circled_number_forty_seven;
			return 2;
		case 0x32BD:
			*normals = circled_number_forty_eight;
			return 2;
		case 0x32BE:
			*normals = circled_number_forty_nine;
			return 2;
		case 0x32BF:
			*normals = circled_number_fifty;
			return 2;
		case 0x32C0:
			*normals = ideographic_telegraph_symbol_for_january;
			return 2;
		case 0x32C1:
			*normals = ideographic_telegraph_symbol_for_february;
			return 2;
		case 0x32C2:
			*normals = ideographic_telegraph_symbol_for_march;
			return 2;
		case 0x32C3:
			*normals = ideographic_telegraph_symbol_for_april;
			return 2;
		case 0x32C4:
			*normals = ideographic_telegraph_symbol_for_may;
			return 2;
		case 0x32C5:
			*normals = ideographic_telegraph_symbol_for_june;
			return 2;
		case 0x32C6:
			*normals = ideographic_telegraph_symbol_for_july;
			return 2;
		case 0x32C7:
			*normals = ideographic_telegraph_symbol_for_august;
			return 2;
		case 0x32C8:
			*normals = ideographic_telegraph_symbol_for_september;
			return 2;
		case 0x32C9:
			*normals = ideographic_telegraph_symbol_for_october;
			return 3;
		case 0x32CA:
			*normals = ideographic_telegraph_symbol_for_november;
			return 3;
		case 0x32CB:
			*normals = ideographic_telegraph_symbol_for_december;
			return 3;
		case 0x32CC:
			*normals = square_hg;
			return 2;
		case 0x32CD:
			*normals = square_erg;
			return 3;
		case 0x32CE:
			*normals = square_ev;
			return 2;
		case 0x32CF:
			*normals = limited_liability_sign;
			return 3;
		case 0x32D0:
			*normals = circled_katakana_a;
			return 1;
		case 0x32D1:
			*normals = circled_katakana_i;
			return 1;
		case 0x32D2:
			*normals = circled_katakana_u;
			return 1;
		case 0x32D3:
			*normals = circled_katakana_e;
			return 1;
		case 0x32D4:
			*normals = circled_katakana_o;
			return 1;
		case 0x32D5:
			*normals = circled_katakana_ka;
			return 1;
		case 0x32D6:
			*normals = circled_katakana_ki;
			return 1;
		case 0x32D7:
			*normals = circled_katakana_ku;
			return 1;
		case 0x32D8:
			*normals = circled_katakana_ke;
			return 1;
		case 0x32D9:
			*normals = circled_katakana_ko;
			return 1;
		case 0x32DA:
			*normals = circled_katakana_sa;
			return 1;
		case 0x32DB:
			*normals = circled_katakana_si;
			return 1;
		case 0x32DC:
			*normals = circled_katakana_su;
			return 1;
		case 0x32DD:
			*normals = circled_katakana_se;
			return 1;
		case 0x32DE:
			*normals = circled_katakana_so;
			return 1;
		case 0x32DF:
			*normals = circled_katakana_ta;
			return 1;
		case 0x32E0:
			*normals = circled_katakana_ti;
			return 1;
		case 0x32E1:
			*normals = circled_katakana_tu;
			return 1;
		case 0x32E2:
			*normals = circled_katakana_te;
			return 1;
		case 0x32E3:
			*normals = circled_katakana_to;
			return 1;
		case 0x32E4:
			*normals = circled_katakana_na;
			return 1;
		case 0x32E5:
			*normals = circled_katakana_ni;
			return 1;
		case 0x32E6:
			*normals = circled_katakana_nu;
			return 1;
		case 0x32E7:
			*normals = circled_katakana_ne;
			return 1;
		case 0x32E8:
			*normals = circled_katakana_no;
			return 1;
		case 0x32E9:
			*normals = circled_katakana_ha;
			return 1;
		case 0x32EA:
			*normals = circled_katakana_hi;
			return 1;
		case 0x32EB:
			*normals = circled_katakana_hu;
			return 1;
		case 0x32EC:
			*normals = circled_katakana_he;
			return 1;
		case 0x32ED:
			*normals = circled_katakana_ho;
			return 1;
		case 0x32EE:
			*normals = circled_katakana_ma;
			return 1;
		case 0x32EF:
			*normals = circled_katakana_mi;
			return 1;
		case 0x32F0:
			*normals = circled_katakana_mu;
			return 1;
		case 0x32F1:
			*normals = circled_katakana_me;
			return 1;
		case 0x32F2:
			*normals = circled_katakana_mo;
			return 1;
		case 0x32F3:
			*normals = circled_katakana_ya;
			return 1;
		case 0x32F4:
			*normals = circled_katakana_yu;
			return 1;
		case 0x32F5:
			*normals = circled_katakana_yo;
			return 1;
		case 0x32F6:
			*normals = circled_katakana_ra;
			return 1;
		case 0x32F7:
			*normals = circled_katakana_ri;
			return 1;
		case 0x32F8:
			*normals = circled_katakana_ru;
			return 1;
		case 0x32F9:
			*normals = circled_katakana_re;
			return 1;
		case 0x32FA:
			*normals = circled_katakana_ro;
			return 1;
		case 0x32FB:
			*normals = circled_katakana_wa;
			return 1;
		case 0x32FC:
			*normals = circled_katakana_wi;
			return 1;
		case 0x32FD:
			*normals = circled_katakana_we;
			return 1;
		case 0x32FE:
			*normals = circled_katakana_wo;
			return 1;
		case 0x32FF:
			*normals = square_era_name_reiwa;
			return 2;
		case 0x3300:
			*normals = square_apaato;
			return 4;
		case 0x3301:
			*normals = square_aruhua;
			return 4;
		case 0x3302:
			*normals = square_anpea;
			return 4;
		case 0x3303:
			*normals = square_aaru;
			return 3;
		case 0x3304:
			*normals = square_iningu;
			return 4;
		case 0x3305:
			*normals = square_inti;
			return 3;
		case 0x3306:
			*normals = square_uon;
			return 3;
		case 0x3307:
			*normals = square_esukuudo;
			return 5;
		case 0x3308:
			*normals = square_eekaa;
			return 4;
		case 0x3309:
			*normals = square_onsu;
			return 3;
		case 0x330A:
			*normals = square_oomu;
			return 3;
		case 0x330B:
			*normals = square_kairi;
			return 3;
		case 0x330C:
			*normals = square_karatto;
			return 4;
		case 0x330D:
			*normals = square_karorii;
			return 4;
		case 0x330E:
			*normals = square_garon;
			return 3;
		case 0x330F:
			*normals = square_ganma;
			return 3;
		case 0x3310:
			*normals = square_giga;
			return 2;
		case 0x3311:
			*normals = square_ginii;
			return 3;
		case 0x3312:
			*normals = square_kyurii;
			return 4;
		case 0x3313:
			*normals = square_girudaa;
			return 4;
		case 0x3314:
			*normals = square_kiro;
			return 2;
		case 0x3315:
			*normals = square_kiroguramu;
			return 5;
		case 0x3316:
			*normals = square_kiromeetoru;
			return 6;
		case 0x3317:
			*normals = square_kirowatto;
			return 5;
		case 0x3318:
			*normals = square_guramu;
			return 3;
		case 0x3319:
			*normals = square_guramuton;
			return 5;
		case 0x331A:
			*normals = square_kuruzeiro;
			return 5;
		case 0x331B:
			*normals = square_kuroone;
			return 4;
		case 0x331C:
			*normals = square_keesu;
			return 3;
		case 0x331D:
			*normals = square_koruna;
			return 3;
		case 0x331E:
			*normals = square_koopo;
			return 3;
		case 0x331F:
			*normals = square_saikuru;
			return 4;
		case 0x3320:
			*normals = square_santiimu;
			return 5;
		case 0x3321:
			*normals = square_siringu;
			return 4;
		case 0x3322:
			*normals = square_senti;
			return 3;
		case 0x3323:
			*normals = square_sento;
			return 3;
		case 0x3324:
			*normals = square_daasu;
			return 3;
		case 0x3325:
			*normals = square_desi;
			return 2;
		case 0x3326:
			*normals = square_doru;
			return 2;
		case 0x3327:
			*normals = square_ton;
			return 2;
		case 0x3328:
			*normals = square_nano;
			return 2;
		case 0x3329:
			*normals = square_notto;
			return 3;
		case 0x332A:
			*normals = square_haitu;
			return 3;
		case 0x332B:
			*normals = square_paasento;
			return 5;
		case 0x332C:
			*normals = square_paatu;
			return 3;
		case 0x332D:
			*normals = square_baareru;
			return 4;
		case 0x332E:
			*normals = square_piasutoru;
			return 5;
		case 0x332F:
			*normals = square_pikuru;
			return 3;
		case 0x3330:
			*normals = square_piko;
			return 2;
		case 0x3331:
			*normals = square_biru;
			return 2;
		case 0x3332:
			*normals = square_huaraddo;
			return 5;
		case 0x3333:
			*normals = square_huiito;
			return 4;
		case 0x3334:
			*normals = square_bussyeru;
			return 5;
		case 0x3335:
			*normals = square_huran;
			return 3;
		case 0x3336:
			*normals = square_hekutaaru;
			return 5;
		case 0x3337:
			*normals = square_peso;
			return 2;
		case 0x3338:
			*normals = square_penihi;
			return 3;
		case 0x3339:
			*normals = square_herutu;
			return 3;
		case 0x333A:
			*normals = square_pensu;
			return 3;
		case 0x333B:
			*normals = square_peezi;
			return 3;
		case 0x333C:
			*normals = square_beeta;
			return 3;
		case 0x333D:
			*normals = square_pointo;
			return 4;
		case 0x333E:
			*normals = square_boruto;
			return 3;
		case 0x333F:
			*normals = square_hon;
			return 2;
		case 0x3340:
			*normals = square_pondo;
			return 3;
		case 0x3341:
			*normals = square_hooru;
			return 3;
		case 0x3342:
			*normals = square_hoon;
			return 3;
		case 0x3343:
			*normals = square_maikuro;
			return 4;
		case 0x3344:
			*normals = square_mairu;
			return 3;
		case 0x3345:
			*normals = square_mahha;
			return 3;
		case 0x3346:
			*normals = square_maruku;
			return 3;
		case 0x3347:
			*normals = square_mansyon;
			return 5;
		case 0x3348:
			*normals = square_mikuron;
			return 4;
		case 0x3349:
			*normals = square_miri;
			return 2;
		case 0x334A:
			*normals = square_miribaaru;
			return 5;
		case 0x334B:
			*normals = square_mega;
			return 2;
		case 0x334C:
			*normals = square_megaton;
			return 4;
		case 0x334D:
			*normals = square_meetoru;
			return 4;
		case 0x334E:
			*normals = square_yaado;
			return 3;
		case 0x334F:
			*normals = square_yaaru;
			return 3;
		case 0x3350:
			*normals = square_yuan;
			return 3;
		case 0x3351:
			*normals = square_rittoru;
			return 4;
		case 0x3352:
			*normals = square_rira;
			return 2;
		case 0x3353:
			*normals = square_rupii;
			return 3;
		case 0x3354:
			*normals = square_ruuburu;
			return 4;
		case 0x3355:
			*normals = square_remu;
			return 2;
		case 0x3356:
			*normals = square_rentogen;
			return 5;
		case 0x3357:
			*normals = square_watto;
			return 3;
		case 0x3358:
			*normals = ideographic_telegraph_symbol_for_hour_zero;
			return 2;
		case 0x3359:
			*normals = ideographic_telegraph_symbol_for_hour_one;
			return 2;
		case 0x335A:
			*normals = ideographic_telegraph_symbol_for_hour_two;
			return 2;
		case 0x335B:
			*normals = ideographic_telegraph_symbol_for_hour_three;
			return 2;
		case 0x335C:
			*normals = ideographic_telegraph_symbol_for_hour_four;
			return 2;
		case 0x335D:
			*normals = ideographic_telegraph_symbol_for_hour_five;
			return 2;
		case 0x335E:
			*normals = ideographic_telegraph_symbol_for_hour_six;
			return 2;
		case 0x335F:
			*normals = ideographic_telegraph_symbol_for_hour_seven;
			return 2;
		case 0x3360:
			*normals = ideographic_telegraph_symbol_for_hour_eight;
			return 2;
		case 0x3361:
			*normals = ideographic_telegraph_symbol_for_hour_nine;
			return 2;
		case 0x3362:
			*normals = ideographic_telegraph_symbol_for_hour_ten;
			return 3;
		case 0x3363:
			*normals = ideographic_telegraph_symbol_for_hour_eleven;
			return 3;
		case 0x3364:
			*normals = ideographic_telegraph_symbol_for_hour_twelve;
			return 3;
		case 0x3365:
			*normals = ideographic_telegraph_symbol_for_hour_thirteen;
			return 3;
		case 0x3366:
			*normals = ideographic_telegraph_symbol_for_hour_fourteen;
			return 3;
		case 0x3367:
			*normals = ideographic_telegraph_symbol_for_hour_fifteen;
			return 3;
		case 0x3368:
			*normals = ideographic_telegraph_symbol_for_hour_sixteen;
			return 3;
		case 0x3369:
			*normals = ideographic_telegraph_symbol_for_hour_seventeen;
			return 3;
		case 0x336A:
			*normals = ideographic_telegraph_symbol_for_hour_eighteen;
			return 3;
		case 0x336B:
			*normals = ideographic_telegraph_symbol_for_hour_nineteen;
			return 3;
		case 0x336C:
			*normals = ideographic_telegraph_symbol_for_hour_twenty;
			return 3;
		case 0x336D:
			*normals = ideographic_telegraph_symbol_for_hour_twenty_one;
			return 3;
		case 0x336E:
			*normals = ideographic_telegraph_symbol_for_hour_twenty_two;
			return 3;
		case 0x336F:
			*normals = ideographic_telegraph_symbol_for_hour_twenty_three;
			return 3;
		case 0x3370:
			*normals = ideographic_telegraph_symbol_for_hour_twenty_four;
			return 3;
		case 0x3371:
			*normals = square_hpa;
			return 3;
		case 0x3372:
			*normals = square_da;
			return 2;
		case 0x3373:
			*normals = square_au;
			return 2;
		case 0x3374:
			*normals = square_bar;
			return 3;
		case 0x3375:
			*normals = square_ov;
			return 2;
		case 0x3376:
			*normals = square_pc;
			return 2;
		case 0x3377:
			*normals = square_dm;
			return 2;
		case 0x3378:
			*normals = square_dm_squared;
			return 3;
		case 0x3379:
			*normals = square_dm_cubed;
			return 3;
		case 0x337A:
			*normals = square_iu;
			return 2;
		case 0x337B:
			*normals = square_era_name_heisei;
			return 2;
		case 0x337C:
			*normals = square_era_name_syouwa;
			return 2;
		case 0x337D:
			*normals = square_era_name_taisyou;
			return 2;
		case 0x337E:
			*normals = square_era_name_meizi;
			return 2;
		case 0x337F:
			*normals = square_corporation;
			return 4;
		case 0x3380:
			*normals = square_pa_amps;
			return 2;
		case 0x3381:
			*normals = square_na;
			return 2;
		case 0x3382:
			*normals = square_mu_a;
			return 2;
		case 0x3383:
			*normals = square_ma;
			return 2;
		case 0x3384:
			*normals = square_ka;
			return 2;
		case 0x3385:
			*normals = square_kb;
			return 2;
		case 0x3386:
			*normals = square_mb;
			return 2;
		case 0x3387:
			*normals = square_gb;
			return 2;
		case 0x3388:
			*normals = square_cal;
			return 3;
		case 0x3389:
			*normals = square_kcal;
			return 4;
		case 0x338A:
			*normals = square_pf;
			return 2;
		case 0x338B:
			*normals = square_nf;
			return 2;
		case 0x338C:
			*normals = square_mu_f;
			return 2;
		case 0x338D:
			*normals = square_mu_g;
			return 2;
		case 0x338E:
			*normals = square_mg;
			return 2;
		case 0x338F:
			*normals = square_kg;
			return 2;
		case 0x3390:
			*normals = square_hz;
			return 2;
		case 0x3391:
			*normals = square_khz;
			return 3;
		case 0x3392:
			*normals = square_mhz;
			return 3;
		case 0x3393:
			*normals = square_ghz;
			return 3;
		case 0x3394:
			*normals = square_thz;
			return 3;
		case 0x3395:
			*normals = square_mu_l;
			return 2;
		case 0x3396:
			*normals = square_ml;
			return 2;
		case 0x3397:
			*normals = square_dl;
			return 2;
		case 0x3398:
			*normals = square_kl;
			return 2;
		case 0x3399:
			*normals = square_fm;
			return 2;
		case 0x339A:
			*normals = square_nm;
			return 2;
		case 0x339B:
			*normals = square_mu_m;
			return 2;
		case 0x339C:
			*normals = square_mm;
			return 2;
		case 0x339D:
			*normals = square_cm;
			return 2;
		case 0x339E:
			*normals = square_km;
			return 2;
		case 0x339F:
			*normals = square_mm_squared;
			return 3;
		case 0x33A0:
			*normals = square_cm_squared;
			return 3;
		case 0x33A1:
			*normals = square_m_squared;
			return 2;
		case 0x33A2:
			*normals = square_km_squared;
			return 3;
		case 0x33A3:
			*normals = square_mm_cubed;
			return 3;
		case 0x33A4:
			*normals = square_cm_cubed;
			return 3;
		case 0x33A5:
			*normals = square_m_cubed;
			return 2;
		case 0x33A6:
			*normals = square_km_cubed;
			return 3;
		case 0x33A7:
			*normals = square_m_over_s;
			return 3;
		case 0x33A8:
			*normals = square_m_over_s_squared;
			return 4;
		case 0x33A9:
			*normals = square_pa;
			return 2;
		case 0x33AA:
			*normals = square_kpa;
			return 3;
		case 0x33AB:
			*normals = square_mpa;
			return 3;
		case 0x33AC:
			*normals = square_gpa;
			return 3;
		case 0x33AD:
			*normals = square_rad;
			return 3;
		case 0x33AE:
			*normals = square_rad_over_s;
			return 5;
		case 0x33AF:
			*normals = square_rad_over_s_squared;
			return 6;
		case 0x33B0:
			*normals = square_ps;
			return 2;
		case 0x33B1:
			*normals = square_ns;
			return 2;
		case 0x33B2:
			*normals = square_mu_s;
			return 2;
		case 0x33B3:
			*normals = square_ms;
			return 2;
		case 0x33B4:
			*normals = square_pv;
			return 2;
		case 0x33B5:
			*normals = square_nv;
			return 2;
		case 0x33B6:
			*normals = square_mu_v;
			return 2;
		case 0x33B7:
			*normals = square_mv;
			return 2;
		case 0x33B8:
			*normals = square_kv;
			return 2;
		case 0x33B9:
			*normals = square_mv_mega;
			return 2;
		case 0x33BA:
			*normals = square_pw;
			return 2;
		case 0x33BB:
			*normals = square_nw;
			return 2;
		case 0x33BC:
			*normals = square_mu_w;
			return 2;
		case 0x33BD:
			*normals = square_mw;
			return 2;
		case 0x33BE:
			*normals = square_kw;
			return 2;
		case 0x33BF:
			*normals = square_mw_mega;
			return 2;
		case 0x33C0:
			*normals = square_k_ohm;
			return 2;
		case 0x33C1:
			*normals = square_m_ohm;
			return 2;
		case 0x33C2:
			*normals = square_am;
			return 4;
		case 0x33C3:
			*normals = square_bq;
			return 2;
		case 0x33C4:
			*normals = square_cc;
			return 2;
		case 0x33C5:
			*normals = square_cd;
			return 2;
		case 0x33C6:
			*normals = square_c_over_kg;
			return 4;
		case 0x33C7:
			*normals = square_co;
			return 3;
		case 0x33C8:
			*normals = square_db;
			return 2;
		case 0x33C9:
			*normals = square_gy;
			return 2;
		case 0x33CA:
			*normals = square_ha;
			return 2;
		case 0x33CB:
			*normals = square_hp;
			return 2;
		case 0x33CC:
			*normals = square_in;
			return 2;
		case 0x33CD:
			*normals = square_kk;
			return 2;
		case 0x33CE:
			*normals = square_km_capital;
			return 2;
		case 0x33CF:
			*normals = square_kt;
			return 2;
		case 0x33D0:
			*normals = square_lm;
			return 2;
		case 0x33D1:
			*normals = square_ln;
			return 2;
		case 0x33D2:
			*normals = square_log;
			return 3;
		case 0x33D3:
			*normals = square_lx;
			return 2;
		case 0x33D4:
			*normals = square_mb_small;
			return 2;
		case 0x33D5:
			*normals = square_mil;
			return 3;
		case 0x33D6:
			*normals = square_mol;
			return 3;
		case 0x33D7:
			*normals = square_ph;
			return 2;
		case 0x33D8:
			*normals = square_pm;
			return 4;
		case 0x33D9:
			*normals = square_ppm;
			return 3;
		case 0x33DA:
			*normals = square_pr;
			return 2;
		case 0x33DB:
			*normals = square_sr;
			return 2;
		case 0x33DC:
			*normals = square_sv;
			return 2;
		case 0x33DD:
			*normals = square_wb;
			return 2;
		case 0x33DE:
			*normals = square_v_over_m;
			return 3;
		case 0x33DF:
			*normals = square_a_over_m;
			return 3;
		case 0x33E0:
			*normals = ideographic_telegraph_symbol_for_day_one;
			return 2;
		case 0x33E1:
			*normals = ideographic_telegraph_symbol_for_day_two;
			return 2;
		case 0x33E2:
			*normals = ideographic_telegraph_symbol_for_day_three;
			return 2;
		case 0x33E3:
			*normals = ideographic_telegraph_symbol_for_day_four;
			return 2;
		case 0x33E4:
			*normals = ideographic_telegraph_symbol_for_day_five;
			return 2;
		case 0x33E5:
			*normals = ideographic_telegraph_symbol_for_day_six;
			return 2;
		case 0x33E6:
			*normals = ideographic_telegraph_symbol_for_day_seven;
			return 2;
		case 0x33E7:
			*normals = ideographic_telegraph_symbol_for_day_eight;
			return 2;
		case 0x33E8:
			*normals = ideographic_telegraph_symbol_for_day_nine;
			return 2;
		case 0x33E9:
			*normals = ideographic_telegraph_symbol_for_day_ten;
			return 3;
		case 0x33EA:
			*normals = ideographic_telegraph_symbol_for_day_eleven;
			return 3;
		case 0x33EB:
			*normals = ideographic_telegraph_symbol_for_day_twelve;
			return 3;
		case 0x33EC:
			*normals = ideographic_telegraph_symbol_for_day_thirteen;
			return 3;
		case 0x33ED:
			*normals = ideographic_telegraph_symbol_for_day_fourteen;
			return 3;
		case 0x33EE:
			*normals = ideographic_telegraph_symbol_for_day_fifteen;
			return 3;
		case 0x33EF:
			*normals = ideographic_telegraph_symbol_for_day_sixteen;
			return 3;
		case 0x33F0:
			*normals = ideographic_telegraph_symbol_for_day_seventeen;
			return 3;
		case 0x33F1:
			*normals = ideographic_telegraph_symbol_for_day_eighteen;
			return 3;
		case 0x33F2:
			*normals = ideographic_telegraph_symbol_for_day_nineteen;
			return 3;
		case 0x33F3:
			*normals = ideographic_telegraph_symbol_for_day_twenty;
			return 3;
		case 0x33F4:
			*normals = ideographic_telegraph_symbol_for_day_twenty_one;
			return 3;
		case 0x33F5:
			*normals = ideographic_telegraph_symbol_for_day_twenty_two;
			return 3;
		case 0x33F6:
			*normals = ideographic_telegraph_symbol_for_day_twenty_three;
			return 3;
		case 0x33F7:
			*normals = ideographic_telegraph_symbol_for_day_twenty_four;
			return 3;
		case 0x33F8:
			*normals = ideographic_telegraph_symbol_for_day_twenty_five;
			return 3;
		case 0x33F9:
			*normals = ideographic_telegraph_symbol_for_day_twenty_six;
			return 3;
		case 0x33FA:
			*normals = ideographic_telegraph_symbol_for_day_twenty_seven;
			return 3;
		case 0x33FB:
			*normals = ideographic_telegraph_symbol_for_day_twenty_eight;
			return 3;
		case 0x33FC:
			*normals = ideographic_telegraph_symbol_for_day_twenty_nine;
			return 3;
		case 0x33FD:
			*normals = ideographic_telegraph_symbol_for_day_thirty;
			return 3;
		case 0x33FE:
			*normals = ideographic_telegraph_symbol_for_day_thirty_one;
			return 3;
		case 0x33FF:
			*normals = square_gal;
			return 3;
		case 0xA69C:
			*normals = modifier_letter_cyrillic_hard_sign;
			return 1;
		case 0xA69D:
			*normals = modifier_letter_cyrillic_soft_sign;
			return 1;
		case 0xA770:
			*normals = modifier_letter_us;
			return 1;
		case 0xA7F8:
			*normals = modifier_letter_capital_h_with_stroke;
			return 1;
		case 0xA7F9:
			*normals = modifier_letter_small_ligature_oe;
			return 1;
		case 0xAB5C:
			*normals = modifier_letter_small_heng;
			return 1;
		case 0xAB5D:
			*normals = modifier_letter_small_l_with_inverted_lazy_s;
			return 1;
		case 0xAB5E:
			*normals = modifier_letter_small_l_with_middle_tilde;
			return 1;
		case 0xAB5F:
			*normals = modifier_letter_small_u_with_left_hook;
			return 1;
		case 0xAB69:
			*normals = modifier_letter_small_turned_w;
			return 1;
		case 0xF900:
			*normals = cjk_compatibility_ideograph_f900;
			return 1;
		case 0xF901:
			*normals = cjk_compatibility_ideograph_f901;
			return 1;
		case 0xF902:
			*normals = cjk_compatibility_ideograph_f902;
			return 1;
		case 0xF903:
			*normals = cjk_compatibility_ideograph_f903;
			return 1;
		case 0xF904:
			*normals = cjk_compatibility_ideograph_f904;
			return 1;
		case 0xF905:
			*normals = cjk_compatibility_ideograph_f905;
			return 1;
		case 0xF906:
			*normals = cjk_compatibility_ideograph_f906;
			return 1;
		case 0xF907:
			*normals = cjk_compatibility_ideograph_f907;
			return 1;
		case 0xF908:
			*normals = cjk_compatibility_ideograph_f908;
			return 1;
		case 0xF909:
			*normals = cjk_compatibility_ideograph_f909;
			return 1;
		case 0xF90A:
			*normals = cjk_compatibility_ideograph_f90a;
			return 1;
		case 0xF90B:
			*normals = cjk_compatibility_ideograph_f90b;
			return 1;
		case 0xF90C:
			*normals = cjk_compatibility_ideograph_f90c;
			return 1;
		case 0xF90D:
			*normals = cjk_compatibility_ideograph_f90d;
			return 1;
		case 0xF90E:
			*normals = cjk_compatibility_ideograph_f90e;
			return 1;
		case 0xF90F:
			*normals = cjk_compatibility_ideograph_f90f;
			return 1;
		case 0xF910:
			*normals = cjk_compatibility_ideograph_f910;
			return 1;
		case 0xF911:
			*normals = cjk_compatibility_ideograph_f911;
			return 1;
		case 0xF912:
			*normals = cjk_compatibility_ideograph_f912;
			return 1;
		case 0xF913:
			*normals = cjk_compatibility_ideograph_f913;
			return 1;
		case 0xF914:
			*normals = cjk_compatibility_ideograph_f914;
			return 1;
		case 0xF915:
			*normals = cjk_compatibility_ideograph_f915;
			return 1;
		case 0xF916:
			*normals = cjk_compatibility_ideograph_f916;
			return 1;
		case 0xF917:
			*normals = cjk_compatibility_ideograph_f917;
			return 1;
		case 0xF918:
			*normals = cjk_compatibility_ideograph_f918;
			return 1;
		case 0xF919:
			*normals = cjk_compatibility_ideograph_f919;
			return 1;
		case 0xF91A:
			*normals = cjk_compatibility_ideograph_f91a;
			return 1;
		case 0xF91B:
			*normals = cjk_compatibility_ideograph_f91b;
			return 1;
		case 0xF91C:
			*normals = cjk_compatibility_ideograph_f91c;
			return 1;
		case 0xF91D:
			*normals = cjk_compatibility_ideograph_f91d;
			return 1;
		case 0xF91E:
			*normals = cjk_compatibility_ideograph_f91e;
			return 1;
		case 0xF91F:
			*normals = cjk_compatibility_ideograph_f91f;
			return 1;
		case 0xF920:
			*normals = cjk_compatibility_ideograph_f920;
			return 1;
		case 0xF921:
			*normals = cjk_compatibility_ideograph_f921;
			return 1;
		case 0xF922:
			*normals = cjk_compatibility_ideograph_f922;
			return 1;
		case 0xF923:
			*normals = cjk_compatibility_ideograph_f923;
			return 1;
		case 0xF924:
			*normals = cjk_compatibility_ideograph_f924;
			return 1;
		case 0xF925:
			*normals = cjk_compatibility_ideograph_f925;
			return 1;
		case 0xF926:
			*normals = cjk_compatibility_ideograph_f926;
			return 1;
		case 0xF927:
			*normals = cjk_compatibility_ideograph_f927;
			return 1;
		case 0xF928:
			*normals = cjk_compatibility_ideograph_f928;
			return 1;
		case 0xF929:
			*normals = cjk_compatibility_ideograph_f929;
			return 1;
		case 0xF92A:
			*normals = cjk_compatibility_ideograph_f92a;
			return 1;
		case 0xF92B:
			*normals = cjk_compatibility_ideograph_f92b;
			return 1;
		case 0xF92C:
			*normals = cjk_compatibility_ideograph_f92c;
			return 1;
		case 0xF92D:
			*normals = cjk_compatibility_ideograph_f92d;
			return 1;
		case 0xF92E:
			*normals = cjk_compatibility_ideograph_f92e;
			return 1;
		case 0xF92F:
			*normals = cjk_compatibility_ideograph_f92f;
			return 1;
		case 0xF930:
			*normals = cjk_compatibility_ideograph_f930;
			return 1;
		case 0xF931:
			*normals = cjk_compatibility_ideograph_f931;
			return 1;
		case 0xF932:
			*normals = cjk_compatibility_ideograph_f932;
			return 1;
		case 0xF933:
			*normals = cjk_compatibility_ideograph_f933;
			return 1;
		case 0xF934:
			*normals = cjk_compatibility_ideograph_f934;
			return 1;
		case 0xF935:
			*normals = cjk_compatibility_ideograph_f935;
			return 1;
		case 0xF936:
			*normals = cjk_compatibility_ideograph_f936;
			return 1;
		case 0xF937:
			*normals = cjk_compatibility_ideograph_f937;
			return 1;
		case 0xF938:
			*normals = cjk_compatibility_ideograph_f938;
			return 1;
		case 0xF939:
			*normals = cjk_compatibility_ideograph_f939;
			return 1;
		case 0xF93A:
			*normals = cjk_compatibility_ideograph_f93a;
			return 1;
		case 0xF93B:
			*normals = cjk_compatibility_ideograph_f93b;
			return 1;
		case 0xF93C:
			*normals = cjk_compatibility_ideograph_f93c;
			return 1;
		case 0xF93D:
			*normals = cjk_compatibility_ideograph_f93d;
			return 1;
		case 0xF93E:
			*normals = cjk_compatibility_ideograph_f93e;
			return 1;
		case 0xF93F:
			*normals = cjk_compatibility_ideograph_f93f;
			return 1;
		case 0xF940:
			*normals = cjk_compatibility_ideograph_f940;
			return 1;
		case 0xF941:
			*normals = cjk_compatibility_ideograph_f941;
			return 1;
		case 0xF942:
			*normals = cjk_compatibility_ideograph_f942;
			return 1;
		case 0xF943:
			*normals = cjk_compatibility_ideograph_f943;
			return 1;
		case 0xF944:
			*normals = cjk_compatibility_ideograph_f944;
			return 1;
		case 0xF945:
			*normals = cjk_compatibility_ideograph_f945;
			return 1;
		case 0xF946:
			*normals = cjk_compatibility_ideograph_f946;
			return 1;
		case 0xF947:
			*normals = cjk_compatibility_ideograph_f947;
			return 1;
		case 0xF948:
			*normals = cjk_compatibility_ideograph_f948;
			return 1;
		case 0xF949:
			*normals = cjk_compatibility_ideograph_f949;
			return 1;
		case 0xF94A:
			*normals = cjk_compatibility_ideograph_f94a;
			return 1;
		case 0xF94B:
			*normals = cjk_compatibility_ideograph_f94b;
			return 1;
		case 0xF94C:
			*normals = cjk_compatibility_ideograph_f94c;
			return 1;
		case 0xF94D:
			*normals = cjk_compatibility_ideograph_f94d;
			return 1;
		case 0xF94E:
			*normals = cjk_compatibility_ideograph_f94e;
			return 1;
		case 0xF94F:
			*normals = cjk_compatibility_ideograph_f94f;
			return 1;
		case 0xF950:
			*normals = cjk_compatibility_ideograph_f950;
			return 1;
		case 0xF951:
			*normals = cjk_compatibility_ideograph_f951;
			return 1;
		case 0xF952:
			*normals = cjk_compatibility_ideograph_f952;
			return 1;
		case 0xF953:
			*normals = cjk_compatibility_ideograph_f953;
			return 1;
		case 0xF954:
			*normals = cjk_compatibility_ideograph_f954;
			return 1;
		case 0xF955:
			*normals = cjk_compatibility_ideograph_f955;
			return 1;
		case 0xF956:
			*normals = cjk_compatibility_ideograph_f956;
			return 1;
		case 0xF957:
			*normals = cjk_compatibility_ideograph_f957;
			return 1;
		case 0xF958:
			*normals = cjk_compatibility_ideograph_f958;
			return 1;
		case 0xF959:
			*normals = cjk_compatibility_ideograph_f959;
			return 1;
		case 0xF95A:
			*normals = cjk_compatibility_ideograph_f95a;
			return 1;
		case 0xF95B:
			*normals = cjk_compatibility_ideograph_f95b;
			return 1;
		case 0xF95C:
			*normals = cjk_compatibility_ideograph_f95c;
			return 1;
		case 0xF95D:
			*normals = cjk_compatibility_ideograph_f95d;
			return 1;
		case 0xF95E:
			*normals = cjk_compatibility_ideograph_f95e;
			return 1;
		case 0xF95F:
			*normals = cjk_compatibility_ideograph_f95f;
			return 1;
		case 0xF960:
			*normals = cjk_compatibility_ideograph_f960;
			return 1;
		case 0xF961:
			*normals = cjk_compatibility_ideograph_f961;
			return 1;
		case 0xF962:
			*normals = cjk_compatibility_ideograph_f962;
			return 1;
		case 0xF963:
			*normals = cjk_compatibility_ideograph_f963;
			return 1;
		case 0xF964:
			*normals = cjk_compatibility_ideograph_f964;
			return 1;
		case 0xF965:
			*normals = cjk_compatibility_ideograph_f965;
			return 1;
		case 0xF966:
			*normals = cjk_compatibility_ideograph_f966;
			return 1;
		case 0xF967:
			*normals = cjk_compatibility_ideograph_f967;
			return 1;
		case 0xF968:
			*normals = cjk_compatibility_ideograph_f968;
			return 1;
		case 0xF969:
			*normals = cjk_compatibility_ideograph_f969;
			return 1;
		case 0xF96A:
			*normals = cjk_compatibility_ideograph_f96a;
			return 1;
		case 0xF96B:
			*normals = cjk_compatibility_ideograph_f96b;
			return 1;
		case 0xF96C:
			*normals = cjk_compatibility_ideograph_f96c;
			return 1;
		case 0xF96D:
			*normals = cjk_compatibility_ideograph_f96d;
			return 1;
		case 0xF96E:
			*normals = cjk_compatibility_ideograph_f96e;
			return 1;
		case 0xF96F:
			*normals = cjk_compatibility_ideograph_f96f;
			return 1;
		case 0xF970:
			*normals = cjk_compatibility_ideograph_f970;
			return 1;
		case 0xF971:
			*normals = cjk_compatibility_ideograph_f971;
			return 1;
		case 0xF972:
			*normals = cjk_compatibility_ideograph_f972;
			return 1;
		case 0xF973:
			*normals = cjk_compatibility_ideograph_f973;
			return 1;
		case 0xF974:
			*normals = cjk_compatibility_ideograph_f974;
			return 1;
		case 0xF975:
			*normals = cjk_compatibility_ideograph_f975;
			return 1;
		case 0xF976:
			*normals = cjk_compatibility_ideograph_f976;
			return 1;
		case 0xF977:
			*normals = cjk_compatibility_ideograph_f977;
			return 1;
		case 0xF978:
			*normals = cjk_compatibility_ideograph_f978;
			return 1;
		case 0xF979:
			*normals = cjk_compatibility_ideograph_f979;
			return 1;
		case 0xF97A:
			*normals = cjk_compatibility_ideograph_f97a;
			return 1;
		case 0xF97B:
			*normals = cjk_compatibility_ideograph_f97b;
			return 1;
		case 0xF97C:
			*normals = cjk_compatibility_ideograph_f97c;
			return 1;
		case 0xF97D:
			*normals = cjk_compatibility_ideograph_f97d;
			return 1;
		case 0xF97E:
			*normals = cjk_compatibility_ideograph_f97e;
			return 1;
		case 0xF97F:
			*normals = cjk_compatibility_ideograph_f97f;
			return 1;
		case 0xF980:
			*normals = cjk_compatibility_ideograph_f980;
			return 1;
		case 0xF981:
			*normals = cjk_compatibility_ideograph_f981;
			return 1;
		case 0xF982:
			*normals = cjk_compatibility_ideograph_f982;
			return 1;
		case 0xF983:
			*normals = cjk_compatibility_ideograph_f983;
			return 1;
		case 0xF984:
			*normals = cjk_compatibility_ideograph_f984;
			return 1;
		case 0xF985:
			*normals = cjk_compatibility_ideograph_f985;
			return 1;
		case 0xF986:
			*normals = cjk_compatibility_ideograph_f986;
			return 1;
		case 0xF987:
			*normals = cjk_compatibility_ideograph_f987;
			return 1;
		case 0xF988:
			*normals = cjk_compatibility_ideograph_f988;
			return 1;
		case 0xF989:
			*normals = cjk_compatibility_ideograph_f989;
			return 1;
		case 0xF98A:
			*normals = cjk_compatibility_ideograph_f98a;
			return 1;
		case 0xF98B:
			*normals = cjk_compatibility_ideograph_f98b;
			return 1;
		case 0xF98C:
			*normals = cjk_compatibility_ideograph_f98c;
			return 1;
		case 0xF98D:
			*normals = cjk_compatibility_ideograph_f98d;
			return 1;
		case 0xF98E:
			*normals = cjk_compatibility_ideograph_f98e;
			return 1;
		case 0xF98F:
			*normals = cjk_compatibility_ideograph_f98f;
			return 1;
		case 0xF990:
			*normals = cjk_compatibility_ideograph_f990;
			return 1;
		case 0xF991:
			*normals = cjk_compatibility_ideograph_f991;
			return 1;
		case 0xF992:
			*normals = cjk_compatibility_ideograph_f992;
			return 1;
		case 0xF993:
			*normals = cjk_compatibility_ideograph_f993;
			return 1;
		case 0xF994:
			*normals = cjk_compatibility_ideograph_f994;
			return 1;
		case 0xF995:
			*normals = cjk_compatibility_ideograph_f995;
			return 1;
		case 0xF996:
			*normals = cjk_compatibility_ideograph_f996;
			return 1;
		case 0xF997:
			*normals = cjk_compatibility_ideograph_f997;
			return 1;
		case 0xF998:
			*normals = cjk_compatibility_ideograph_f998;
			return 1;
		case 0xF999:
			*normals = cjk_compatibility_ideograph_f999;
			return 1;
		case 0xF99A:
			*normals = cjk_compatibility_ideograph_f99a;
			return 1;
		case 0xF99B:
			*normals = cjk_compatibility_ideograph_f99b;
			return 1;
		case 0xF99C:
			*normals = cjk_compatibility_ideograph_f99c;
			return 1;
		case 0xF99D:
			*normals = cjk_compatibility_ideograph_f99d;
			return 1;
		case 0xF99E:
			*normals = cjk_compatibility_ideograph_f99e;
			return 1;
		case 0xF99F:
			*normals = cjk_compatibility_ideograph_f99f;
			return 1;
		case 0xF9A0:
			*normals = cjk_compatibility_ideograph_f9a0;
			return 1;
		case 0xF9A1:
			*normals = cjk_compatibility_ideograph_f9a1;
			return 1;
		case 0xF9A2:
			*normals = cjk_compatibility_ideograph_f9a2;
			return 1;
		case 0xF9A3:
			*normals = cjk_compatibility_ideograph_f9a3;
			return 1;
		case 0xF9A4:
			*normals = cjk_compatibility_ideograph_f9a4;
			return 1;
		case 0xF9A5:
			*normals = cjk_compatibility_ideograph_f9a5;
			return 1;
		case 0xF9A6:
			*normals = cjk_compatibility_ideograph_f9a6;
			return 1;
		case 0xF9A7:
			*normals = cjk_compatibility_ideograph_f9a7;
			return 1;
		case 0xF9A8:
			*normals = cjk_compatibility_ideograph_f9a8;
			return 1;
		case 0xF9A9:
			*normals = cjk_compatibility_ideograph_f9a9;
			return 1;
		case 0xF9AA:
			*normals = cjk_compatibility_ideograph_f9aa;
			return 1;
		case 0xF9AB:
			*normals = cjk_compatibility_ideograph_f9ab;
			return 1;
		case 0xF9AC:
			*normals = cjk_compatibility_ideograph_f9ac;
			return 1;
		case 0xF9AD:
			*normals = cjk_compatibility_ideograph_f9ad;
			return 1;
		case 0xF9AE:
			*normals = cjk_compatibility_ideograph_f9ae;
			return 1;
		case 0xF9AF:
			*normals = cjk_compatibility_ideograph_f9af;
			return 1;
		case 0xF9B0:
			*normals = cjk_compatibility_ideograph_f9b0;
			return 1;
		case 0xF9B1:
			*normals = cjk_compatibility_ideograph_f9b1;
			return 1;
		case 0xF9B2:
			*normals = cjk_compatibility_ideograph_f9b2;
			return 1;
		case 0xF9B3:
			*normals = cjk_compatibility_ideograph_f9b3;
			return 1;
		case 0xF9B4:
			*normals = cjk_compatibility_ideograph_f9b4;
			return 1;
		case 0xF9B5:
			*normals = cjk_compatibility_ideograph_f9b5;
			return 1;
		case 0xF9B6:
			*normals = cjk_compatibility_ideograph_f9b6;
			return 1;
		case 0xF9B7:
			*normals = cjk_compatibility_ideograph_f9b7;
			return 1;
		case 0xF9B8:
			*normals = cjk_compatibility_ideograph_f9b8;
			return 1;
		case 0xF9B9:
			*normals = cjk_compatibility_ideograph_f9b9;
			return 1;
		case 0xF9BA:
			*normals = cjk_compatibility_ideograph_f9ba;
			return 1;
		case 0xF9BB:
			*normals = cjk_compatibility_ideograph_f9bb;
			return 1;
		case 0xF9BC:
			*normals = cjk_compatibility_ideograph_f9bc;
			return 1;
		case 0xF9BD:
			*normals = cjk_compatibility_ideograph_f9bd;
			return 1;
		case 0xF9BE:
			*normals = cjk_compatibility_ideograph_f9be;
			return 1;
		case 0xF9BF:
			*normals = cjk_compatibility_ideograph_f9bf;
			return 1;
		case 0xF9C0:
			*normals = cjk_compatibility_ideograph_f9c0;
			return 1;
		case 0xF9C1:
			*normals = cjk_compatibility_ideograph_f9c1;
			return 1;
		case 0xF9C2:
			*normals = cjk_compatibility_ideograph_f9c2;
			return 1;
		case 0xF9C3:
			*normals = cjk_compatibility_ideograph_f9c3;
			return 1;
		case 0xF9C4:
			*normals = cjk_compatibility_ideograph_f9c4;
			return 1;
		case 0xF9C5:
			*normals = cjk_compatibility_ideograph_f9c5;
			return 1;
		case 0xF9C6:
			*normals = cjk_compatibility_ideograph_f9c6;
			return 1;
		case 0xF9C7:
			*normals = cjk_compatibility_ideograph_f9c7;
			return 1;
		case 0xF9C8:
			*normals = cjk_compatibility_ideograph_f9c8;
			return 1;
		case 0xF9C9:
			*normals = cjk_compatibility_ideograph_f9c9;
			return 1;
		case 0xF9CA:
			*normals = cjk_compatibility_ideograph_f9ca;
			return 1;
		case 0xF9CB:
			*normals = cjk_compatibility_ideograph_f9cb;
			return 1;
		case 0xF9CC:
			*normals = cjk_compatibility_ideograph_f9cc;
			return 1;
		case 0xF9CD:
			*normals = cjk_compatibility_ideograph_f9cd;
			return 1;
		case 0xF9CE:
			*normals = cjk_compatibility_ideograph_f9ce;
			return 1;
		case 0xF9CF:
			*normals = cjk_compatibility_ideograph_f9cf;
			return 1;
		case 0xF9D0:
			*normals = cjk_compatibility_ideograph_f9d0;
			return 1;
		case 0xF9D1:
			*normals = cjk_compatibility_ideograph_f9d1;
			return 1;
		case 0xF9D2:
			*normals = cjk_compatibility_ideograph_f9d2;
			return 1;
		case 0xF9D3:
			*normals = cjk_compatibility_ideograph_f9d3;
			return 1;
		case 0xF9D4:
			*normals = cjk_compatibility_ideograph_f9d4;
			return 1;
		case 0xF9D5:
			*normals = cjk_compatibility_ideograph_f9d5;
			return 1;
		case 0xF9D6:
			*normals = cjk_compatibility_ideograph_f9d6;
			return 1;
		case 0xF9D7:
			*normals = cjk_compatibility_ideograph_f9d7;
			return 1;
		case 0xF9D8:
			*normals = cjk_compatibility_ideograph_f9d8;
			return 1;
		case 0xF9D9:
			*normals = cjk_compatibility_ideograph_f9d9;
			return 1;
		case 0xF9DA:
			*normals = cjk_compatibility_ideograph_f9da;
			return 1;
		case 0xF9DB:
			*normals = cjk_compatibility_ideograph_f9db;
			return 1;
		case 0xF9DC:
			*normals = cjk_compatibility_ideograph_f9dc;
			return 1;
		case 0xF9DD:
			*normals = cjk_compatibility_ideograph_f9dd;
			return 1;
		case 0xF9DE:
			*normals = cjk_compatibility_ideograph_f9de;
			return 1;
		case 0xF9DF:
			*normals = cjk_compatibility_ideograph_f9df;
			return 1;
		case 0xF9E0:
			*normals = cjk_compatibility_ideograph_f9e0;
			return 1;
		case 0xF9E1:
			*normals = cjk_compatibility_ideograph_f9e1;
			return 1;
		case 0xF9E2:
			*normals = cjk_compatibility_ideograph_f9e2;
			return 1;
		case 0xF9E3:
			*normals = cjk_compatibility_ideograph_f9e3;
			return 1;
		case 0xF9E4:
			*normals = cjk_compatibility_ideograph_f9e4;
			return 1;
		case 0xF9E5:
			*normals = cjk_compatibility_ideograph_f9e5;
			return 1;
		case 0xF9E6:
			*normals = cjk_compatibility_ideograph_f9e6;
			return 1;
		case 0xF9E7:
			*normals = cjk_compatibility_ideograph_f9e7;
			return 1;
		case 0xF9E8:
			*normals = cjk_compatibility_ideograph_f9e8;
			return 1;
		case 0xF9E9:
			*normals = cjk_compatibility_ideograph_f9e9;
			return 1;
		case 0xF9EA:
			*normals = cjk_compatibility_ideograph_f9ea;
			return 1;
		case 0xF9EB:
			*normals = cjk_compatibility_ideograph_f9eb;
			return 1;
		case 0xF9EC:
			*normals = cjk_compatibility_ideograph_f9ec;
			return 1;
		case 0xF9ED:
			*normals = cjk_compatibility_ideograph_f9ed;
			return 1;
		case 0xF9EE:
			*normals = cjk_compatibility_ideograph_f9ee;
			return 1;
		case 0xF9EF:
			*normals = cjk_compatibility_ideograph_f9ef;
			return 1;
		case 0xF9F0:
			*normals = cjk_compatibility_ideograph_f9f0;
			return 1;
		case 0xF9F1:
			*normals = cjk_compatibility_ideograph_f9f1;
			return 1;
		case 0xF9F2:
			*normals = cjk_compatibility_ideograph_f9f2;
			return 1;
		case 0xF9F3:
			*normals = cjk_compatibility_ideograph_f9f3;
			return 1;
		case 0xF9F4:
			*normals = cjk_compatibility_ideograph_f9f4;
			return 1;
		case 0xF9F5:
			*normals = cjk_compatibility_ideograph_f9f5;
			return 1;
		case 0xF9F6:
			*normals = cjk_compatibility_ideograph_f9f6;
			return 1;
		case 0xF9F7:
			*normals = cjk_compatibility_ideograph_f9f7;
			return 1;
		case 0xF9F8:
			*normals = cjk_compatibility_ideograph_f9f8;
			return 1;
		case 0xF9F9:
			*normals = cjk_compatibility_ideograph_f9f9;
			return 1;
		case 0xF9FA:
			*normals = cjk_compatibility_ideograph_f9fa;
			return 1;
		case 0xF9FB:
			*normals = cjk_compatibility_ideograph_f9fb;
			return 1;
		case 0xF9FC:
			*normals = cjk_compatibility_ideograph_f9fc;
			return 1;
		case 0xF9FD:
			*normals = cjk_compatibility_ideograph_f9fd;
			return 1;
		case 0xF9FE:
			*normals = cjk_compatibility_ideograph_f9fe;
			return 1;
		case 0xF9FF:
			*normals = cjk_compatibility_ideograph_f9ff;
			return 1;
		case 0xFA00:
			*normals = cjk_compatibility_ideograph_fa00;
			return 1;
		case 0xFA01:
			*normals = cjk_compatibility_ideograph_fa01;
			return 1;
		case 0xFA02:
			*normals = cjk_compatibility_ideograph_fa02;
			return 1;
		case 0xFA03:
			*normals = cjk_compatibility_ideograph_fa03;
			return 1;
		case 0xFA04:
			*normals = cjk_compatibility_ideograph_fa04;
			return 1;
		case 0xFA05:
			*normals = cjk_compatibility_ideograph_fa05;
			return 1;
		case 0xFA06:
			*normals = cjk_compatibility_ideograph_fa06;
			return 1;
		case 0xFA07:
			*normals = cjk_compatibility_ideograph_fa07;
			return 1;
		case 0xFA08:
			*normals = cjk_compatibility_ideograph_fa08;
			return 1;
		case 0xFA09:
			*normals = cjk_compatibility_ideograph_fa09;
			return 1;
		case 0xFA0A:
			*normals = cjk_compatibility_ideograph_fa0a;
			return 1;
		case 0xFA0B:
			*normals = cjk_compatibility_ideograph_fa0b;
			return 1;
		case 0xFA0C:
			*normals = cjk_compatibility_ideograph_fa0c;
			return 1;
		case 0xFA0D:
			*normals = cjk_compatibility_ideograph_fa0d;
			return 1;
		case 0xFA10:
			*normals = cjk_compatibility_ideograph_fa10;
			return 1;
		case 0xFA12:
			*normals = cjk_compatibility_ideograph_fa12;
			return 1;
		case 0xFA15:
			*normals = cjk_compatibility_ideograph_fa15;
			return 1;
		case 0xFA16:
			*normals = cjk_compatibility_ideograph_fa16;
			return 1;
		case 0xFA17:
			*normals = cjk_compatibility_ideograph_fa17;
			return 1;
		case 0xFA18:
			*normals = cjk_compatibility_ideograph_fa18;
			return 1;
		case 0xFA19:
			*normals = cjk_compatibility_ideograph_fa19;
			return 1;
		case 0xFA1A:
			*normals = cjk_compatibility_ideograph_fa1a;
			return 1;
		case 0xFA1B:
			*normals = cjk_compatibility_ideograph_fa1b;
			return 1;
		case 0xFA1C:
			*normals = cjk_compatibility_ideograph_fa1c;
			return 1;
		case 0xFA1D:
			*normals = cjk_compatibility_ideograph_fa1d;
			return 1;
		case 0xFA1E:
			*normals = cjk_compatibility_ideograph_fa1e;
			return 1;
		case 0xFA20:
			*normals = cjk_compatibility_ideograph_fa20;
			return 1;
		case 0xFA22:
			*normals = cjk_compatibility_ideograph_fa22;
			return 1;
		case 0xFA25:
			*normals = cjk_compatibility_ideograph_fa25;
			return 1;
		case 0xFA26:
			*normals = cjk_compatibility_ideograph_fa26;
			return 1;
		case 0xFA2A:
			*normals = cjk_compatibility_ideograph_fa2a;
			return 1;
		case 0xFA2B:
			*normals = cjk_compatibility_ideograph_fa2b;
			return 1;
		case 0xFA2C:
			*normals = cjk_compatibility_ideograph_fa2c;
			return 1;
		case 0xFA2D:
			*normals = cjk_compatibility_ideograph_fa2d;
			return 1;
		case 0xFA2E:
			*normals = cjk_compatibility_ideograph_fa2e;
			return 1;
		case 0xFA2F:
			*normals = cjk_compatibility_ideograph_fa2f;
			return 1;
		case 0xFA30:
			*normals = cjk_compatibility_ideograph_fa30;
			return 1;
		case 0xFA31:
			*normals = cjk_compatibility_ideograph_fa31;
			return 1;
		case 0xFA32:
			*normals = cjk_compatibility_ideograph_fa32;
			return 1;
		case 0xFA33:
			*normals = cjk_compatibility_ideograph_fa33;
			return 1;
		case 0xFA34:
			*normals = cjk_compatibility_ideograph_fa34;
			return 1;
		case 0xFA35:
			*normals = cjk_compatibility_ideograph_fa35;
			return 1;
		case 0xFA36:
			*normals = cjk_compatibility_ideograph_fa36;
			return 1;
		case 0xFA37:
			*normals = cjk_compatibility_ideograph_fa37;
			return 1;
		case 0xFA38:
			*normals = cjk_compatibility_ideograph_fa38;
			return 1;
		case 0xFA39:
			*normals = cjk_compatibility_ideograph_fa39;
			return 1;
		case 0xFA3A:
			*normals = cjk_compatibility_ideograph_fa3a;
			return 1;
		case 0xFA3B:
			*normals = cjk_compatibility_ideograph_fa3b;
			return 1;
		case 0xFA3C:
			*normals = cjk_compatibility_ideograph_fa3c;
			return 1;
		case 0xFA3D:
			*normals = cjk_compatibility_ideograph_fa3d;
			return 1;
		case 0xFA3E:
			*normals = cjk_compatibility_ideograph_fa3e;
			return 1;
		case 0xFA3F:
			*normals = cjk_compatibility_ideograph_fa3f;
			return 1;
		case 0xFA40:
			*normals = cjk_compatibility_ideograph_fa40;
			return 1;
		case 0xFA41:
			*normals = cjk_compatibility_ideograph_fa41;
			return 1;
		case 0xFA42:
			*normals = cjk_compatibility_ideograph_fa42;
			return 1;
		case 0xFA43:
			*normals = cjk_compatibility_ideograph_fa43;
			return 1;
		case 0xFA44:
			*normals = cjk_compatibility_ideograph_fa44;
			return 1;
		case 0xFA45:
			*normals = cjk_compatibility_ideograph_fa45;
			return 1;
		case 0xFA46:
			*normals = cjk_compatibility_ideograph_fa46;
			return 1;
		case 0xFA47:
			*normals = cjk_compatibility_ideograph_fa47;
			return 1;
		case 0xFA48:
			*normals = cjk_compatibility_ideograph_fa48;
			return 1;
		case 0xFA49:
			*normals = cjk_compatibility_ideograph_fa49;
			return 1;
		case 0xFA4A:
			*normals = cjk_compatibility_ideograph_fa4a;
			return 1;
		case 0xFA4B:
			*normals = cjk_compatibility_ideograph_fa4b;
			return 1;
		case 0xFA4C:
			*normals = cjk_compatibility_ideograph_fa4c;
			return 1;
		case 0xFA4D:
			*normals = cjk_compatibility_ideograph_fa4d;
			return 1;
		case 0xFA4E:
			*normals = cjk_compatibility_ideograph_fa4e;
			return 1;
		case 0xFA4F:
			*normals = cjk_compatibility_ideograph_fa4f;
			return 1;
		case 0xFA50:
			*normals = cjk_compatibility_ideograph_fa50;
			return 1;
		case 0xFA51:
			*normals = cjk_compatibility_ideograph_fa51;
			return 1;
		case 0xFA52:
			*normals = cjk_compatibility_ideograph_fa52;
			return 1;
		case 0xFA53:
			*normals = cjk_compatibility_ideograph_fa53;
			return 1;
		case 0xFA54:
			*normals = cjk_compatibility_ideograph_fa54;
			return 1;
		case 0xFA55:
			*normals = cjk_compatibility_ideograph_fa55;
			return 1;
		case 0xFA56:
			*normals = cjk_compatibility_ideograph_fa56;
			return 1;
		case 0xFA57:
			*normals = cjk_compatibility_ideograph_fa57;
			return 1;
		case 0xFA58:
			*normals = cjk_compatibility_ideograph_fa58;
			return 1;
		case 0xFA59:
			*normals = cjk_compatibility_ideograph_fa59;
			return 1;
		case 0xFA5A:
			*normals = cjk_compatibility_ideograph_fa5a;
			return 1;
		case 0xFA5B:
			*normals = cjk_compatibility_ideograph_fa5b;
			return 1;
		case 0xFA5C:
			*normals = cjk_compatibility_ideograph_fa5c;
			return 1;
		case 0xFA5D:
			*normals = cjk_compatibility_ideograph_fa5d;
			return 1;
		case 0xFA5E:
			*normals = cjk_compatibility_ideograph_fa5e;
			return 1;
		case 0xFA5F:
			*normals = cjk_compatibility_ideograph_fa5f;
			return 1;
		case 0xFA60:
			*normals = cjk_compatibility_ideograph_fa60;
			return 1;
		case 0xFA61:
			*normals = cjk_compatibility_ideograph_fa61;
			return 1;
		case 0xFA62:
			*normals = cjk_compatibility_ideograph_fa62;
			return 1;
		case 0xFA63:
			*normals = cjk_compatibility_ideograph_fa63;
			return 1;
		case 0xFA64:
			*normals = cjk_compatibility_ideograph_fa64;
			return 1;
		case 0xFA65:
			*normals = cjk_compatibility_ideograph_fa65;
			return 1;
		case 0xFA66:
			*normals = cjk_compatibility_ideograph_fa66;
			return 1;
		case 0xFA67:
			*normals = cjk_compatibility_ideograph_fa67;
			return 1;
		case 0xFA68:
			*normals = cjk_compatibility_ideograph_fa68;
			return 1;
		case 0xFA69:
			*normals = cjk_compatibility_ideograph_fa69;
			return 1;
		case 0xFA6A:
			*normals = cjk_compatibility_ideograph_fa6a;
			return 1;
		case 0xFA6B:
			*normals = cjk_compatibility_ideograph_fa6b;
			return 1;
		case 0xFA6C:
			*normals = cjk_compatibility_ideograph_fa6c;
			return 1;
		case 0xFA6D:
			*normals = cjk_compatibility_ideograph_fa6d;
			return 1;
		case 0xFA70:
			*normals = cjk_compatibility_ideograph_fa70;
			return 1;
		case 0xFA71:
			*normals = cjk_compatibility_ideograph_fa71;
			return 1;
		case 0xFA72:
			*normals = cjk_compatibility_ideograph_fa72;
			return 1;
		case 0xFA73:
			*normals = cjk_compatibility_ideograph_fa73;
			return 1;
		case 0xFA74:
			*normals = cjk_compatibility_ideograph_fa74;
			return 1;
		case 0xFA75:
			*normals = cjk_compatibility_ideograph_fa75;
			return 1;
		case 0xFA76:
			*normals = cjk_compatibility_ideograph_fa76;
			return 1;
		case 0xFA77:
			*normals = cjk_compatibility_ideograph_fa77;
			return 1;
		case 0xFA78:
			*normals = cjk_compatibility_ideograph_fa78;
			return 1;
		case 0xFA79:
			*normals = cjk_compatibility_ideograph_fa79;
			return 1;
		case 0xFA7A:
			*normals = cjk_compatibility_ideograph_fa7a;
			return 1;
		case 0xFA7B:
			*normals = cjk_compatibility_ideograph_fa7b;
			return 1;
		case 0xFA7C:
			*normals = cjk_compatibility_ideograph_fa7c;
			return 1;
		case 0xFA7D:
			*normals = cjk_compatibility_ideograph_fa7d;
			return 1;
		case 0xFA7E:
			*normals = cjk_compatibility_ideograph_fa7e;
			return 1;
		case 0xFA7F:
			*normals = cjk_compatibility_ideograph_fa7f;
			return 1;
		case 0xFA80:
			*normals = cjk_compatibility_ideograph_fa80;
			return 1;
		case 0xFA81:
			*normals = cjk_compatibility_ideograph_fa81;
			return 1;
		case 0xFA82:
			*normals = cjk_compatibility_ideograph_fa82;
			return 1;
		case 0xFA83:
			*normals = cjk_compatibility_ideograph_fa83;
			return 1;
		case 0xFA84:
			*normals = cjk_compatibility_ideograph_fa84;
			return 1;
		case 0xFA85:
			*normals = cjk_compatibility_ideograph_fa85;
			return 1;
		case 0xFA86:
			*normals = cjk_compatibility_ideograph_fa86;
			return 1;
		case 0xFA87:
			*normals = cjk_compatibility_ideograph_fa87;
			return 1;
		case 0xFA88:
			*normals = cjk_compatibility_ideograph_fa88;
			return 1;
		case 0xFA89:
			*normals = cjk_compatibility_ideograph_fa89;
			return 1;
		case 0xFA8A:
			*normals = cjk_compatibility_ideograph_fa8a;
			return 1;
		case 0xFA8B:
			*normals = cjk_compatibility_ideograph_fa8b;
			return 1;
		case 0xFA8C:
			*normals = cjk_compatibility_ideograph_fa8c;
			return 1;
		case 0xFA8D:
			*normals = cjk_compatibility_ideograph_fa8d;
			return 1;
		case 0xFA8E:
			*normals = cjk_compatibility_ideograph_fa8e;
			return 1;
		case 0xFA8F:
			*normals = cjk_compatibility_ideograph_fa8f;
			return 1;
		case 0xFA90:
			*normals = cjk_compatibility_ideograph_fa90;
			return 1;
		case 0xFA91:
			*normals = cjk_compatibility_ideograph_fa91;
			return 1;
		case 0xFA92:
			*normals = cjk_compatibility_ideograph_fa92;
			return 1;
		case 0xFA93:
			*normals = cjk_compatibility_ideograph_fa93;
			return 1;
		case 0xFA94:
			*normals = cjk_compatibility_ideograph_fa94;
			return 1;
		case 0xFA95:
			*normals = cjk_compatibility_ideograph_fa95;
			return 1;
		case 0xFA96:
			*normals = cjk_compatibility_ideograph_fa96;
			return 1;
		case 0xFA97:
			*normals = cjk_compatibility_ideograph_fa97;
			return 1;
		case 0xFA98:
			*normals = cjk_compatibility_ideograph_fa98;
			return 1;
		case 0xFA99:
			*normals = cjk_compatibility_ideograph_fa99;
			return 1;
		case 0xFA9A:
			*normals = cjk_compatibility_ideograph_fa9a;
			return 1;
		case 0xFA9B:
			*normals = cjk_compatibility_ideograph_fa9b;
			return 1;
		case 0xFA9C:
			*normals = cjk_compatibility_ideograph_fa9c;
			return 1;
		case 0xFA9D:
			*normals = cjk_compatibility_ideograph_fa9d;
			return 1;
		case 0xFA9E:
			*normals = cjk_compatibility_ideograph_fa9e;
			return 1;
		case 0xFA9F:
			*normals = cjk_compatibility_ideograph_fa9f;
			return 1;
		case 0xFAA0:
			*normals = cjk_compatibility_ideograph_faa0;
			return 1;
		case 0xFAA1:
			*normals = cjk_compatibility_ideograph_faa1;
			return 1;
		case 0xFAA2:
			*normals = cjk_compatibility_ideograph_faa2;
			return 1;
		case 0xFAA3:
			*normals = cjk_compatibility_ideograph_faa3;
			return 1;
		case 0xFAA4:
			*normals = cjk_compatibility_ideograph_faa4;
			return 1;
		case 0xFAA5:
			*normals = cjk_compatibility_ideograph_faa5;
			return 1;
		case 0xFAA6:
			*normals = cjk_compatibility_ideograph_faa6;
			return 1;
		case 0xFAA7:
			*normals = cjk_compatibility_ideograph_faa7;
			return 1;
		case 0xFAA8:
			*normals = cjk_compatibility_ideograph_faa8;
			return 1;
		case 0xFAA9:
			*normals = cjk_compatibility_ideograph_faa9;
			return 1;
		case 0xFAAA:
			*normals = cjk_compatibility_ideograph_faaa;
			return 1;
		case 0xFAAB:
			*normals = cjk_compatibility_ideograph_faab;
			return 1;
		case 0xFAAC:
			*normals = cjk_compatibility_ideograph_faac;
			return 1;
		case 0xFAAD:
			*normals = cjk_compatibility_ideograph_faad;
			return 1;
		case 0xFAAE:
			*normals = cjk_compatibility_ideograph_faae;
			return 1;
		case 0xFAAF:
			*normals = cjk_compatibility_ideograph_faaf;
			return 1;
		case 0xFAB0:
			*normals = cjk_compatibility_ideograph_fab0;
			return 1;
		case 0xFAB1:
			*normals = cjk_compatibility_ideograph_fab1;
			return 1;
		case 0xFAB2:
			*normals = cjk_compatibility_ideograph_fab2;
			return 1;
		case 0xFAB3:
			*normals = cjk_compatibility_ideograph_fab3;
			return 1;
		case 0xFAB4:
			*normals = cjk_compatibility_ideograph_fab4;
			return 1;
		case 0xFAB5:
			*normals = cjk_compatibility_ideograph_fab5;
			return 1;
		case 0xFAB6:
			*normals = cjk_compatibility_ideograph_fab6;
			return 1;
		case 0xFAB7:
			*normals = cjk_compatibility_ideograph_fab7;
			return 1;
		case 0xFAB8:
			*normals = cjk_compatibility_ideograph_fab8;
			return 1;
		case 0xFAB9:
			*normals = cjk_compatibility_ideograph_fab9;
			return 1;
		case 0xFABA:
			*normals = cjk_compatibility_ideograph_faba;
			return 1;
		case 0xFABB:
			*normals = cjk_compatibility_ideograph_fabb;
			return 1;
		case 0xFABC:
			*normals = cjk_compatibility_ideograph_fabc;
			return 1;
		case 0xFABD:
			*normals = cjk_compatibility_ideograph_fabd;
			return 1;
		case 0xFABE:
			*normals = cjk_compatibility_ideograph_fabe;
			return 1;
		case 0xFABF:
			*normals = cjk_compatibility_ideograph_fabf;
			return 1;
		case 0xFAC0:
			*normals = cjk_compatibility_ideograph_fac0;
			return 1;
		case 0xFAC1:
			*normals = cjk_compatibility_ideograph_fac1;
			return 1;
		case 0xFAC2:
			*normals = cjk_compatibility_ideograph_fac2;
			return 1;
		case 0xFAC3:
			*normals = cjk_compatibility_ideograph_fac3;
			return 1;
		case 0xFAC4:
			*normals = cjk_compatibility_ideograph_fac4;
			return 1;
		case 0xFAC5:
			*normals = cjk_compatibility_ideograph_fac5;
			return 1;
		case 0xFAC6:
			*normals = cjk_compatibility_ideograph_fac6;
			return 1;
		case 0xFAC7:
			*normals = cjk_compatibility_ideograph_fac7;
			return 1;
		case 0xFAC8:
			*normals = cjk_compatibility_ideograph_fac8;
			return 1;
		case 0xFAC9:
			*normals = cjk_compatibility_ideograph_fac9;
			return 1;
		case 0xFACA:
			*normals = cjk_compatibility_ideograph_faca;
			return 1;
		case 0xFACB:
			*normals = cjk_compatibility_ideograph_facb;
			return 1;
		case 0xFACC:
			*normals = cjk_compatibility_ideograph_facc;
			return 1;
		case 0xFACD:
			*normals = cjk_compatibility_ideograph_facd;
			return 1;
		case 0xFACE:
			*normals = cjk_compatibility_ideograph_face;
			return 1;
		case 0xFACF:
			*normals = cjk_compatibility_ideograph_facf;
			return 1;
		case 0xFAD0:
			*normals = cjk_compatibility_ideograph_fad0;
			return 1;
		case 0xFAD1:
			*normals = cjk_compatibility_ideograph_fad1;
			return 1;
		case 0xFAD2:
			*normals = cjk_compatibility_ideograph_fad2;
			return 1;
		case 0xFAD3:
			*normals = cjk_compatibility_ideograph_fad3;
			return 1;
		case 0xFAD4:
			*normals = cjk_compatibility_ideograph_fad4;
			return 1;
		case 0xFAD5:
			*normals = cjk_compatibility_ideograph_fad5;
			return 1;
		case 0xFAD6:
			*normals = cjk_compatibility_ideograph_fad6;
			return 1;
		case 0xFAD7:
			*normals = cjk_compatibility_ideograph_fad7;
			return 1;
		case 0xFAD8:
			*normals = cjk_compatibility_ideograph_fad8;
			return 1;
		case 0xFAD9:
			*normals = cjk_compatibility_ideograph_fad9;
			return 1;
		case 0xFB00:
			*normals = latin_small_ligature_ff;
			return 2;
		case 0xFB01:
			*normals = latin_small_ligature_fi;
			return 2;
		case 0xFB02:
			*normals = latin_small_ligature_fl;
			return 2;
		case 0xFB03:
			*normals = latin_small_ligature_ffi;
			return 3;
		case 0xFB04:
			*normals = latin_small_ligature_ffl;
			return 3;
		case 0xFB05:
			*normals = latin_small_ligature_long_s_t;
			return 2;
		case 0xFB06:
			*normals = latin_small_ligature_st;
			return 2;
		case 0xFB13:
			*normals = armenian_small_ligature_men_now;
			return 2;
		case 0xFB14:
			*normals = armenian_small_ligature_men_ech;
			return 2;
		case 0xFB15:
			*normals = armenian_small_ligature_men_ini;
			return 2;
		case 0xFB16:
			*normals = armenian_small_ligature_vew_now;
			return 2;
		case 0xFB17:
			*normals = armenian_small_ligature_men_xeh;
			return 2;
		case 0xFB1D:
			*normals = hebrew_letter_yod_with_hiriq;
			return 2;
		case 0xFB1F:
			*normals = hebrew_ligature_yiddish_yod_yod_patah;
			return 2;
		case 0xFB20:
			*normals = hebrew_letter_alternative_ayin;
			return 1;
		case 0xFB21:
			*normals = hebrew_letter_wide_alef;
			return 1;
		case 0xFB22:
			*normals = hebrew_letter_wide_dalet;
			return 1;
		case 0xFB23:
			*normals = hebrew_letter_wide_he;
			return 1;
		case 0xFB24:
			*normals = hebrew_letter_wide_kaf;
			return 1;
		case 0xFB25:
			*normals = hebrew_letter_wide_lamed;
			return 1;
		case 0xFB26:
			*normals = hebrew_letter_wide_final_mem;
			return 1;
		case 0xFB27:
			*normals = hebrew_letter_wide_resh;
			return 1;
		case 0xFB28:
			*normals = hebrew_letter_wide_tav;
			return 1;
		case 0xFB29:
			*normals = hebrew_letter_alternative_plus_sign;
			return 1;
		case 0xFB2A:
			*normals = hebrew_letter_shin_with_shin_dot;
			return 2;
		case 0xFB2B:
			*normals = hebrew_letter_shin_with_sin_dot;
			return 2;
		case 0xFB2C:
			*normals = hebrew_letter_shin_with_dagesh_and_shin_dot;
			return 2;
		case 0xFB2D:
			*normals = hebrew_letter_shin_with_dagesh_and_sin_dot;
			return 2;
		case 0xFB2E:
			*normals = hebrew_letter_alef_with_patah;
			return 2;
		case 0xFB2F:
			*normals = hebrew_letter_alef_with_qamats;
			return 2;
		case 0xFB30:
			*normals = hebrew_letter_alef_with_mapiq;
			return 2;
		case 0xFB31:
			*normals = hebrew_letter_bet_with_dagesh;
			return 2;
		case 0xFB32:
			*normals = hebrew_letter_gimel_with_dagesh;
			return 2;
		case 0xFB33:
			*normals = hebrew_letter_dalet_with_dagesh;
			return 2;
		case 0xFB34:
			*normals = hebrew_letter_he_with_mapiq;
			return 2;
		case 0xFB35:
			*normals = hebrew_letter_vav_with_dagesh;
			return 2;
		case 0xFB36:
			*normals = hebrew_letter_zayin_with_dagesh;
			return 2;
		case 0xFB38:
			*normals = hebrew_letter_tet_with_dagesh;
			return 2;
		case 0xFB39:
			*normals = hebrew_letter_yod_with_dagesh;
			return 2;
		case 0xFB3A:
			*normals = hebrew_letter_final_kaf_with_dagesh;
			return 2;
		case 0xFB3B:
			*normals = hebrew_letter_kaf_with_dagesh;
			return 2;
		case 0xFB3C:
			*normals = hebrew_letter_lamed_with_dagesh;
			return 2;
		case 0xFB3E:
			*normals = hebrew_letter_mem_with_dagesh;
			return 2;
		case 0xFB40:
			*normals = hebrew_letter_nun_with_dagesh;
			return 2;
		case 0xFB41:
			*normals = hebrew_letter_samekh_with_dagesh;
			return 2;
		case 0xFB43:
			*normals = hebrew_letter_final_pe_with_dagesh;
			return 2;
		case 0xFB44:
			*normals = hebrew_letter_pe_with_dagesh;
			return 2;
		case 0xFB46:
			*normals = hebrew_letter_tsadi_with_dagesh;
			return 2;
		case 0xFB47:
			*normals = hebrew_letter_qof_with_dagesh;
			return 2;
		case 0xFB48:
			*normals = hebrew_letter_resh_with_dagesh;
			return 2;
		case 0xFB49:
			*normals = hebrew_letter_shin_with_dagesh;
			return 2;
		case 0xFB4A:
			*normals = hebrew_letter_tav_with_dagesh;
			return 2;
		case 0xFB4B:
			*normals = hebrew_letter_vav_with_holam;
			return 2;
		case 0xFB4C:
			*normals = hebrew_letter_bet_with_rafe;
			return 2;
		case 0xFB4D:
			*normals = hebrew_letter_kaf_with_rafe;
			return 2;
		case 0xFB4E:
			*normals = hebrew_letter_pe_with_rafe;
			return 2;
		case 0xFB4F:
			*normals = hebrew_ligature_alef_lamed;
			return 2;
		case 0xFB50:
			*normals = arabic_letter_alef_wasla_isolated_form;
			return 1;
		case 0xFB51:
			*normals = arabic_letter_alef_wasla_final_form;
			return 1;
		case 0xFB52:
			*normals = arabic_letter_beeh_isolated_form;
			return 1;
		case 0xFB53:
			*normals = arabic_letter_beeh_final_form;
			return 1;
		case 0xFB54:
			*normals = arabic_letter_beeh_initial_form;
			return 1;
		case 0xFB55:
			*normals = arabic_letter_beeh_medial_form;
			return 1;
		case 0xFB56:
			*normals = arabic_letter_peh_isolated_form;
			return 1;
		case 0xFB57:
			*normals = arabic_letter_peh_final_form;
			return 1;
		case 0xFB58:
			*normals = arabic_letter_peh_initial_form;
			return 1;
		case 0xFB59:
			*normals = arabic_letter_peh_medial_form;
			return 1;
		case 0xFB5A:
			*normals = arabic_letter_beheh_isolated_form;
			return 1;
		case 0xFB5B:
			*normals = arabic_letter_beheh_final_form;
			return 1;
		case 0xFB5C:
			*normals = arabic_letter_beheh_initial_form;
			return 1;
		case 0xFB5D:
			*normals = arabic_letter_beheh_medial_form;
			return 1;
		case 0xFB5E:
			*normals = arabic_letter_tteheh_isolated_form;
			return 1;
		case 0xFB5F:
			*normals = arabic_letter_tteheh_final_form;
			return 1;
		case 0xFB60:
			*normals = arabic_letter_tteheh_initial_form;
			return 1;
		case 0xFB61:
			*normals = arabic_letter_tteheh_medial_form;
			return 1;
		case 0xFB62:
			*normals = arabic_letter_teheh_isolated_form;
			return 1;
		case 0xFB63:
			*normals = arabic_letter_teheh_final_form;
			return 1;
		case 0xFB64:
			*normals = arabic_letter_teheh_initial_form;
			return 1;
		case 0xFB65:
			*normals = arabic_letter_teheh_medial_form;
			return 1;
		case 0xFB66:
			*normals = arabic_letter_tteh_isolated_form;
			return 1;
		case 0xFB67:
			*normals = arabic_letter_tteh_final_form;
			return 1;
		case 0xFB68:
			*normals = arabic_letter_tteh_initial_form;
			return 1;
		case 0xFB69:
			*normals = arabic_letter_tteh_medial_form;
			return 1;
		case 0xFB6A:
			*normals = arabic_letter_veh_isolated_form;
			return 1;
		case 0xFB6B:
			*normals = arabic_letter_veh_final_form;
			return 1;
		case 0xFB6C:
			*normals = arabic_letter_veh_initial_form;
			return 1;
		case 0xFB6D:
			*normals = arabic_letter_veh_medial_form;
			return 1;
		case 0xFB6E:
			*normals = arabic_letter_peheh_isolated_form;
			return 1;
		case 0xFB6F:
			*normals = arabic_letter_peheh_final_form;
			return 1;
		case 0xFB70:
			*normals = arabic_letter_peheh_initial_form;
			return 1;
		case 0xFB71:
			*normals = arabic_letter_peheh_medial_form;
			return 1;
		case 0xFB72:
			*normals = arabic_letter_dyeh_isolated_form;
			return 1;
		case 0xFB73:
			*normals = arabic_letter_dyeh_final_form;
			return 1;
		case 0xFB74:
			*normals = arabic_letter_dyeh_initial_form;
			return 1;
		case 0xFB75:
			*normals = arabic_letter_dyeh_medial_form;
			return 1;
		case 0xFB76:
			*normals = arabic_letter_nyeh_isolated_form;
			return 1;
		case 0xFB77:
			*normals = arabic_letter_nyeh_final_form;
			return 1;
		case 0xFB78:
			*normals = arabic_letter_nyeh_initial_form;
			return 1;
		case 0xFB79:
			*normals = arabic_letter_nyeh_medial_form;
			return 1;
		case 0xFB7A:
			*normals = arabic_letter_tcheh_isolated_form;
			return 1;
		case 0xFB7B:
			*normals = arabic_letter_tcheh_final_form;
			return 1;
		case 0xFB7C:
			*normals = arabic_letter_tcheh_initial_form;
			return 1;
		case 0xFB7D:
			*normals = arabic_letter_tcheh_medial_form;
			return 1;
		case 0xFB7E:
			*normals = arabic_letter_tcheheh_isolated_form;
			return 1;
		case 0xFB7F:
			*normals = arabic_letter_tcheheh_final_form;
			return 1;
		case 0xFB80:
			*normals = arabic_letter_tcheheh_initial_form;
			return 1;
		case 0xFB81:
			*normals = arabic_letter_tcheheh_medial_form;
			return 1;
		case 0xFB82:
			*normals = arabic_letter_ddahal_isolated_form;
			return 1;
		case 0xFB83:
			*normals = arabic_letter_ddahal_final_form;
			return 1;
		case 0xFB84:
			*normals = arabic_letter_dahal_isolated_form;
			return 1;
		case 0xFB85:
			*normals = arabic_letter_dahal_final_form;
			return 1;
		case 0xFB86:
			*normals = arabic_letter_dul_isolated_form;
			return 1;
		case 0xFB87:
			*normals = arabic_letter_dul_final_form;
			return 1;
		case 0xFB88:
			*normals = arabic_letter_ddal_isolated_form;
			return 1;
		case 0xFB89:
			*normals = arabic_letter_ddal_final_form;
			return 1;
		case 0xFB8A:
			*normals = arabic_letter_jeh_isolated_form;
			return 1;
		case 0xFB8B:
			*normals = arabic_letter_jeh_final_form;
			return 1;
		case 0xFB8C:
			*normals = arabic_letter_rreh_isolated_form;
			return 1;
		case 0xFB8D:
			*normals = arabic_letter_rreh_final_form;
			return 1;
		case 0xFB8E:
			*normals = arabic_letter_keheh_isolated_form;
			return 1;
		case 0xFB8F:
			*normals = arabic_letter_keheh_final_form;
			return 1;
		case 0xFB90:
			*normals = arabic_letter_keheh_initial_form;
			return 1;
		case 0xFB91:
			*normals = arabic_letter_keheh_medial_form;
			return 1;
		case 0xFB92:
			*normals = arabic_letter_gaf_isolated_form;
			return 1;
		case 0xFB93:
			*normals = arabic_letter_gaf_final_form;
			return 1;
		case 0xFB94:
			*normals = arabic_letter_gaf_initial_form;
			return 1;
		case 0xFB95:
			*normals = arabic_letter_gaf_medial_form;
			return 1;
		case 0xFB96:
			*normals = arabic_letter_gueh_isolated_form;
			return 1;
		case 0xFB97:
			*normals = arabic_letter_gueh_final_form;
			return 1;
		case 0xFB98:
			*normals = arabic_letter_gueh_initial_form;
			return 1;
		case 0xFB99:
			*normals = arabic_letter_gueh_medial_form;
			return 1;
		case 0xFB9A:
			*normals = arabic_letter_ngoeh_isolated_form;
			return 1;
		case 0xFB9B:
			*normals = arabic_letter_ngoeh_final_form;
			return 1;
		case 0xFB9C:
			*normals = arabic_letter_ngoeh_initial_form;
			return 1;
		case 0xFB9D:
			*normals = arabic_letter_ngoeh_medial_form;
			return 1;
		case 0xFB9E:
			*normals = arabic_letter_noon_ghunna_isolated_form;
			return 1;
		case 0xFB9F:
			*normals = arabic_letter_noon_ghunna_final_form;
			return 1;
		case 0xFBA0:
			*normals = arabic_letter_rnoon_isolated_form;
			return 1;
		case 0xFBA1:
			*normals = arabic_letter_rnoon_final_form;
			return 1;
		case 0xFBA2:
			*normals = arabic_letter_rnoon_initial_form;
			return 1;
		case 0xFBA3:
			*normals = arabic_letter_rnoon_medial_form;
			return 1;
		case 0xFBA4:
			*normals = arabic_letter_heh_with_yeh_above_isolated_form;
			return 1;
		case 0xFBA5:
			*normals = arabic_letter_heh_with_yeh_above_final_form;
			return 1;
		case 0xFBA6:
			*normals = arabic_letter_heh_goal_isolated_form;
			return 1;
		case 0xFBA7:
			*normals = arabic_letter_heh_goal_final_form;
			return 1;
		case 0xFBA8:
			*normals = arabic_letter_heh_goal_initial_form;
			return 1;
		case 0xFBA9:
			*normals = arabic_letter_heh_goal_medial_form;
			return 1;
		case 0xFBAA:
			*normals = arabic_letter_heh_doachashmee_isolated_form;
			return 1;
		case 0xFBAB:
			*normals = arabic_letter_heh_doachashmee_final_form;
			return 1;
		case 0xFBAC:
			*normals = arabic_letter_heh_doachashmee_initial_form;
			return 1;
		case 0xFBAD:
			*normals = arabic_letter_heh_doachashmee_medial_form;
			return 1;
		case 0xFBAE:
			*normals = arabic_letter_yeh_barree_isolated_form;
			return 1;
		case 0xFBAF:
			*normals = arabic_letter_yeh_barree_final_form;
			return 1;
		case 0xFBB0:
			*normals = arabic_letter_yeh_barree_with_hamza_above_isolated_form;
			return 1;
		case 0xFBB1:
			*normals = arabic_letter_yeh_barree_with_hamza_above_final_form;
			return 1;
		case 0xFBD3:
			*normals = arabic_letter_ng_isolated_form;
			return 1;
		case 0xFBD4:
			*normals = arabic_letter_ng_final_form;
			return 1;
		case 0xFBD5:
			*normals = arabic_letter_ng_initial_form;
			return 1;
		case 0xFBD6:
			*normals = arabic_letter_ng_medial_form;
			return 1;
		case 0xFBD7:
			*normals = arabic_letter_u_isolated_form;
			return 1;
		case 0xFBD8:
			*normals = arabic_letter_u_final_form;
			return 1;
		case 0xFBD9:
			*normals = arabic_letter_oe_isolated_form;
			return 1;
		case 0xFBDA:
			*normals = arabic_letter_oe_final_form;
			return 1;
		case 0xFBDB:
			*normals = arabic_letter_yu_isolated_form;
			return 1;
		case 0xFBDC:
			*normals = arabic_letter_yu_final_form;
			return 1;
		case 0xFBDD:
			*normals = arabic_letter_u_with_hamza_above_isolated_form;
			return 1;
		case 0xFBDE:
			*normals = arabic_letter_ve_isolated_form;
			return 1;
		case 0xFBDF:
			*normals = arabic_letter_ve_final_form;
			return 1;
		case 0xFBE0:
			*normals = arabic_letter_kirghiz_oe_isolated_form;
			return 1;
		case 0xFBE1:
			*normals = arabic_letter_kirghiz_oe_final_form;
			return 1;
		case 0xFBE2:
			*normals = arabic_letter_kirghiz_yu_isolated_form;
			return 1;
		case 0xFBE3:
			*normals = arabic_letter_kirghiz_yu_final_form;
			return 1;
		case 0xFBE4:
			*normals = arabic_letter_e_isolated_form;
			return 1;
		case 0xFBE5:
			*normals = arabic_letter_e_final_form;
			return 1;
		case 0xFBE6:
			*normals = arabic_letter_e_initial_form;
			return 1;
		case 0xFBE7:
			*normals = arabic_letter_e_medial_form;
			return 1;
		case 0xFBE8:
			*normals = arabic_letter_uighur_kazakh_kirghiz_alef_maksura_initial_form;
			return 1;
		case 0xFBE9:
			*normals = arabic_letter_uighur_kazakh_kirghiz_alef_maksura_medial_form;
			return 1;
		case 0xFBEA:
			*normals = arabic_ligature_yeh_with_hamza_above_with_alef_isolated_form;
			return 2;
		case 0xFBEB:
			*normals = arabic_ligature_yeh_with_hamza_above_with_alef_final_form;
			return 2;
		case 0xFBEC:
			*normals = arabic_ligature_yeh_with_hamza_above_with_ae_isolated_form;
			return 2;
		case 0xFBED:
			*normals = arabic_ligature_yeh_with_hamza_above_with_ae_final_form;
			return 2;
		case 0xFBEE:
			*normals = arabic_ligature_yeh_with_hamza_above_with_waw_isolated_form;
			return 2;
		case 0xFBEF:
			*normals = arabic_ligature_yeh_with_hamza_above_with_waw_final_form;
			return 2;
		case 0xFBF0:
			*normals = arabic_ligature_yeh_with_hamza_above_with_u_isolated_form;
			return 2;
		case 0xFBF1:
			*normals = arabic_ligature_yeh_with_hamza_above_with_u_final_form;
			return 2;
		case 0xFBF2:
			*normals = arabic_ligature_yeh_with_hamza_above_with_oe_isolated_form;
			return 2;
		case 0xFBF3:
			*normals = arabic_ligature_yeh_with_hamza_above_with_oe_final_form;
			return 2;
		case 0xFBF4:
			*normals = arabic_ligature_yeh_with_hamza_above_with_yu_isolated_form;
			return 2;
		case 0xFBF5:
			*normals = arabic_ligature_yeh_with_hamza_above_with_yu_final_form;
			return 2;
		case 0xFBF6:
			*normals = arabic_ligature_yeh_with_hamza_above_with_e_isolated_form;
			return 2;
		case 0xFBF7:
			*normals = arabic_ligature_yeh_with_hamza_above_with_e_final_form;
			return 2;
		case 0xFBF8:
			*normals = arabic_ligature_yeh_with_hamza_above_with_e_initial_form;
			return 2;
		case 0xFBF9:
			*normals = arabic_ligature_uighur_kirghiz_yeh_with_hamza_above_with_alef_maksura_isolated_form;
			return 2;
		case 0xFBFA:
			*normals = arabic_ligature_uighur_kirghiz_yeh_with_hamza_above_with_alef_maksura_final_form;
			return 2;
		case 0xFBFB:
			*normals = arabic_ligature_uighur_kirghiz_yeh_with_hamza_above_with_alef_maksura_initial_form;
			return 2;
		case 0xFBFC:
			*normals = arabic_letter_farsi_yeh_isolated_form;
			return 1;
		case 0xFBFD:
			*normals = arabic_letter_farsi_yeh_final_form;
			return 1;
		case 0xFBFE:
			*normals = arabic_letter_farsi_yeh_initial_form;
			return 1;
		case 0xFBFF:
			*normals = arabic_letter_farsi_yeh_medial_form;
			return 1;
		case 0xFC00:
			*normals = arabic_ligature_yeh_with_hamza_above_with_jeem_isolated_form;
			return 2;
		case 0xFC01:
			*normals = arabic_ligature_yeh_with_hamza_above_with_hah_isolated_form;
			return 2;
		case 0xFC02:
			*normals = arabic_ligature_yeh_with_hamza_above_with_meem_isolated_form;
			return 2;
		case 0xFC03:
			*normals = arabic_ligature_yeh_with_hamza_above_with_alef_maksura_isolated_form;
			return 2;
		case 0xFC04:
			*normals = arabic_ligature_yeh_with_hamza_above_with_yeh_isolated_form;
			return 2;
		case 0xFC05:
			*normals = arabic_ligature_beh_with_jeem_isolated_form;
			return 2;
		case 0xFC06:
			*normals = arabic_ligature_beh_with_hah_isolated_form;
			return 2;
		case 0xFC07:
			*normals = arabic_ligature_beh_with_khah_isolated_form;
			return 2;
		case 0xFC08:
			*normals = arabic_ligature_beh_with_meem_isolated_form;
			return 2;
		case 0xFC09:
			*normals = arabic_ligature_beh_with_alef_maksura_isolated_form;
			return 2;
		case 0xFC0A:
			*normals = arabic_ligature_beh_with_yeh_isolated_form;
			return 2;
		case 0xFC0B:
			*normals = arabic_ligature_teh_with_jeem_isolated_form;
			return 2;
		case 0xFC0C:
			*normals = arabic_ligature_teh_with_hah_isolated_form;
			return 2;
		case 0xFC0D:
			*normals = arabic_ligature_teh_with_khah_isolated_form;
			return 2;
		case 0xFC0E:
			*normals = arabic_ligature_teh_with_meem_isolated_form;
			return 2;
		case 0xFC0F:
			*normals = arabic_ligature_teh_with_alef_maksura_isolated_form;
			return 2;
		case 0xFC10:
			*normals = arabic_ligature_teh_with_yeh_isolated_form;
			return 2;
		case 0xFC11:
			*normals = arabic_ligature_theh_with_jeem_isolated_form;
			return 2;
		case 0xFC12:
			*normals = arabic_ligature_theh_with_meem_isolated_form;
			return 2;
		case 0xFC13:
			*normals = arabic_ligature_theh_with_alef_maksura_isolated_form;
			return 2;
		case 0xFC14:
			*normals = arabic_ligature_theh_with_yeh_isolated_form;
			return 2;
		case 0xFC15:
			*normals = arabic_ligature_jeem_with_hah_isolated_form;
			return 2;
		case 0xFC16:
			*normals = arabic_ligature_jeem_with_meem_isolated_form;
			return 2;
		case 0xFC17:
			*normals = arabic_ligature_hah_with_jeem_isolated_form;
			return 2;
		case 0xFC18:
			*normals = arabic_ligature_hah_with_meem_isolated_form;
			return 2;
		case 0xFC19:
			*normals = arabic_ligature_khah_with_jeem_isolated_form;
			return 2;
		case 0xFC1A:
			*normals = arabic_ligature_khah_with_hah_isolated_form;
			return 2;
		case 0xFC1B:
			*normals = arabic_ligature_khah_with_meem_isolated_form;
			return 2;
		case 0xFC1C:
			*normals = arabic_ligature_seen_with_jeem_isolated_form;
			return 2;
		case 0xFC1D:
			*normals = arabic_ligature_seen_with_hah_isolated_form;
			return 2;
		case 0xFC1E:
			*normals = arabic_ligature_seen_with_khah_isolated_form;
			return 2;
		case 0xFC1F:
			*normals = arabic_ligature_seen_with_meem_isolated_form;
			return 2;
		case 0xFC20:
			*normals = arabic_ligature_sad_with_hah_isolated_form;
			return 2;
		case 0xFC21:
			*normals = arabic_ligature_sad_with_meem_isolated_form;
			return 2;
		case 0xFC22:
			*normals = arabic_ligature_dad_with_jeem_isolated_form;
			return 2;
		case 0xFC23:
			*normals = arabic_ligature_dad_with_hah_isolated_form;
			return 2;
		case 0xFC24:
			*normals = arabic_ligature_dad_with_khah_isolated_form;
			return 2;
		case 0xFC25:
			*normals = arabic_ligature_dad_with_meem_isolated_form;
			return 2;
		case 0xFC26:
			*normals = arabic_ligature_tah_with_hah_isolated_form;
			return 2;
		case 0xFC27:
			*normals = arabic_ligature_tah_with_meem_isolated_form;
			return 2;
		case 0xFC28:
			*normals = arabic_ligature_zah_with_meem_isolated_form;
			return 2;
		case 0xFC29:
			*normals = arabic_ligature_ain_with_jeem_isolated_form;
			return 2;
		case 0xFC2A:
			*normals = arabic_ligature_ain_with_meem_isolated_form;
			return 2;
		case 0xFC2B:
			*normals = arabic_ligature_ghain_with_jeem_isolated_form;
			return 2;
		case 0xFC2C:
			*normals = arabic_ligature_ghain_with_meem_isolated_form;
			return 2;
		case 0xFC2D:
			*normals = arabic_ligature_feh_with_jeem_isolated_form;
			return 2;
		case 0xFC2E:
			*normals = arabic_ligature_feh_with_hah_isolated_form;
			return 2;
		case 0xFC2F:
			*normals = arabic_ligature_feh_with_khah_isolated_form;
			return 2;
		case 0xFC30:
			*normals = arabic_ligature_feh_with_meem_isolated_form;
			return 2;
		case 0xFC31:
			*normals = arabic_ligature_feh_with_alef_maksura_isolated_form;
			return 2;
		case 0xFC32:
			*normals = arabic_ligature_feh_with_yeh_isolated_form;
			return 2;
		case 0xFC33:
			*normals = arabic_ligature_qaf_with_hah_isolated_form;
			return 2;
		case 0xFC34:
			*normals = arabic_ligature_qaf_with_meem_isolated_form;
			return 2;
		case 0xFC35:
			*normals = arabic_ligature_qaf_with_alef_maksura_isolated_form;
			return 2;
		case 0xFC36:
			*normals = arabic_ligature_qaf_with_yeh_isolated_form;
			return 2;
		case 0xFC37:
			*normals = arabic_ligature_kaf_with_alef_isolated_form;
			return 2;
		case 0xFC38:
			*normals = arabic_ligature_kaf_with_jeem_isolated_form;
			return 2;
		case 0xFC39:
			*normals = arabic_ligature_kaf_with_hah_isolated_form;
			return 2;
		case 0xFC3A:
			*normals = arabic_ligature_kaf_with_khah_isolated_form;
			return 2;
		case 0xFC3B:
			*normals = arabic_ligature_kaf_with_lam_isolated_form;
			return 2;
		case 0xFC3C:
			*normals = arabic_ligature_kaf_with_meem_isolated_form;
			return 2;
		case 0xFC3D:
			*normals = arabic_ligature_kaf_with_alef_maksura_isolated_form;
			return 2;
		case 0xFC3E:
			*normals = arabic_ligature_kaf_with_yeh_isolated_form;
			return 2;
		case 0xFC3F:
			*normals = arabic_ligature_lam_with_jeem_isolated_form;
			return 2;
		case 0xFC40:
			*normals = arabic_ligature_lam_with_hah_isolated_form;
			return 2;
		case 0xFC41:
			*normals = arabic_ligature_lam_with_khah_isolated_form;
			return 2;
		case 0xFC42:
			*normals = arabic_ligature_lam_with_meem_isolated_form;
			return 2;
		case 0xFC43:
			*normals = arabic_ligature_lam_with_alef_maksura_isolated_form;
			return 2;
		case 0xFC44:
			*normals = arabic_ligature_lam_with_yeh_isolated_form;
			return 2;
		case 0xFC45:
			*normals = arabic_ligature_meem_with_jeem_isolated_form;
			return 2;
		case 0xFC46:
			*normals = arabic_ligature_meem_with_hah_isolated_form;
			return 2;
		case 0xFC47:
			*normals = arabic_ligature_meem_with_khah_isolated_form;
			return 2;
		case 0xFC48:
			*normals = arabic_ligature_meem_with_meem_isolated_form;
			return 2;
		case 0xFC49:
			*normals = arabic_ligature_meem_with_alef_maksura_isolated_form;
			return 2;
		case 0xFC4A:
			*normals = arabic_ligature_meem_with_yeh_isolated_form;
			return 2;
		case 0xFC4B:
			*normals = arabic_ligature_noon_with_jeem_isolated_form;
			return 2;
		case 0xFC4C:
			*normals = arabic_ligature_noon_with_hah_isolated_form;
			return 2;
		case 0xFC4D:
			*normals = arabic_ligature_noon_with_khah_isolated_form;
			return 2;
		case 0xFC4E:
			*normals = arabic_ligature_noon_with_meem_isolated_form;
			return 2;
		case 0xFC4F:
			*normals = arabic_ligature_noon_with_alef_maksura_isolated_form;
			return 2;
		case 0xFC50:
			*normals = arabic_ligature_noon_with_yeh_isolated_form;
			return 2;
		case 0xFC51:
			*normals = arabic_ligature_heh_with_jeem_isolated_form;
			return 2;
		case 0xFC52:
			*normals = arabic_ligature_heh_with_meem_isolated_form;
			return 2;
		case 0xFC53:
			*normals = arabic_ligature_heh_with_alef_maksura_isolated_form;
			return 2;
		case 0xFC54:
			*normals = arabic_ligature_heh_with_yeh_isolated_form;
			return 2;
		case 0xFC55:
			*normals = arabic_ligature_yeh_with_jeem_isolated_form;
			return 2;
		case 0xFC56:
			*normals = arabic_ligature_yeh_with_hah_isolated_form;
			return 2;
		case 0xFC57:
			*normals = arabic_ligature_yeh_with_khah_isolated_form;
			return 2;
		case 0xFC58:
			*normals = arabic_ligature_yeh_with_meem_isolated_form;
			return 2;
		case 0xFC59:
			*normals = arabic_ligature_yeh_with_alef_maksura_isolated_form;
			return 2;
		case 0xFC5A:
			*normals = arabic_ligature_yeh_with_yeh_isolated_form;
			return 2;
		case 0xFC5B:
			*normals = arabic_ligature_thal_with_superscript_alef_isolated_form;
			return 2;
		case 0xFC5C:
			*normals = arabic_ligature_reh_with_superscript_alef_isolated_form;
			return 2;
		case 0xFC5D:
			*normals = arabic_ligature_alef_maksura_with_superscript_alef_isolated_form;
			return 2;
		case 0xFC5E:
			*normals = arabic_ligature_shadda_with_dammatan_isolated_form;
			return 3;
		case 0xFC5F:
			*normals = arabic_ligature_shadda_with_kasratan_isolated_form;
			return 3;
		case 0xFC60:
			*normals = arabic_ligature_shadda_with_fatha_isolated_form;
			return 3;
		case 0xFC61:
			*normals = arabic_ligature_shadda_with_damma_isolated_form;
			return 3;
		case 0xFC62:
			*normals = arabic_ligature_shadda_with_kasra_isolated_form;
			return 3;
		case 0xFC63:
			*normals = arabic_ligature_shadda_with_superscript_alef_isolated_form;
			return 3;
		case 0xFC64:
			*normals = arabic_ligature_yeh_with_hamza_above_with_reh_final_form;
			return 2;
		case 0xFC65:
			*normals = arabic_ligature_yeh_with_hamza_above_with_zain_final_form;
			return 2;
		case 0xFC66:
			*normals = arabic_ligature_yeh_with_hamza_above_with_meem_final_form;
			return 2;
		case 0xFC67:
			*normals = arabic_ligature_yeh_with_hamza_above_with_noon_final_form;
			return 2;
		case 0xFC68:
			*normals = arabic_ligature_yeh_with_hamza_above_with_alef_maksura_final_form;
			return 2;
		case 0xFC69:
			*normals = arabic_ligature_yeh_with_hamza_above_with_yeh_final_form;
			return 2;
		case 0xFC6A:
			*normals = arabic_ligature_beh_with_reh_final_form;
			return 2;
		case 0xFC6B:
			*normals = arabic_ligature_beh_with_zain_final_form;
			return 2;
		case 0xFC6C:
			*normals = arabic_ligature_beh_with_meem_final_form;
			return 2;
		case 0xFC6D:
			*normals = arabic_ligature_beh_with_noon_final_form;
			return 2;
		case 0xFC6E:
			*normals = arabic_ligature_beh_with_alef_maksura_final_form;
			return 2;
		case 0xFC6F:
			*normals = arabic_ligature_beh_with_yeh_final_form;
			return 2;
		case 0xFC70:
			*normals = arabic_ligature_teh_with_reh_final_form;
			return 2;
		case 0xFC71:
			*normals = arabic_ligature_teh_with_zain_final_form;
			return 2;
		case 0xFC72:
			*normals = arabic_ligature_teh_with_meem_final_form;
			return 2;
		case 0xFC73:
			*normals = arabic_ligature_teh_with_noon_final_form;
			return 2;
		case 0xFC74:
			*normals = arabic_ligature_teh_with_alef_maksura_final_form;
			return 2;
		case 0xFC75:
			*normals = arabic_ligature_teh_with_yeh_final_form;
			return 2;
		case 0xFC76:
			*normals = arabic_ligature_theh_with_reh_final_form;
			return 2;
		case 0xFC77:
			*normals = arabic_ligature_theh_with_zain_final_form;
			return 2;
		case 0xFC78:
			*normals = arabic_ligature_theh_with_meem_final_form;
			return 2;
		case 0xFC79:
			*normals = arabic_ligature_theh_with_noon_final_form;
			return 2;
		case 0xFC7A:
			*normals = arabic_ligature_theh_with_alef_maksura_final_form;
			return 2;
		case 0xFC7B:
			*normals = arabic_ligature_theh_with_yeh_final_form;
			return 2;
		case 0xFC7C:
			*normals = arabic_ligature_feh_with_alef_maksura_final_form;
			return 2;
		case 0xFC7D:
			*normals = arabic_ligature_feh_with_yeh_final_form;
			return 2;
		case 0xFC7E:
			*normals = arabic_ligature_qaf_with_alef_maksura_final_form;
			return 2;
		case 0xFC7F:
			*normals = arabic_ligature_qaf_with_yeh_final_form;
			return 2;
		case 0xFC80:
			*normals = arabic_ligature_kaf_with_alef_final_form;
			return 2;
		case 0xFC81:
			*normals = arabic_ligature_kaf_with_lam_final_form;
			return 2;
		case 0xFC82:
			*normals = arabic_ligature_kaf_with_meem_final_form;
			return 2;
		case 0xFC83:
			*normals = arabic_ligature_kaf_with_alef_maksura_final_form;
			return 2;
		case 0xFC84:
			*normals = arabic_ligature_kaf_with_yeh_final_form;
			return 2;
		case 0xFC85:
			*normals = arabic_ligature_lam_with_meem_final_form;
			return 2;
		case 0xFC86:
			*normals = arabic_ligature_lam_with_alef_maksura_final_form;
			return 2;
		case 0xFC87:
			*normals = arabic_ligature_lam_with_yeh_final_form;
			return 2;
		case 0xFC88:
			*normals = arabic_ligature_meem_with_alef_final_form;
			return 2;
		case 0xFC89:
			*normals = arabic_ligature_meem_with_meem_final_form;
			return 2;
		case 0xFC8A:
			*normals = arabic_ligature_noon_with_reh_final_form;
			return 2;
		case 0xFC8B:
			*normals = arabic_ligature_noon_with_zain_final_form;
			return 2;
		case 0xFC8C:
			*normals = arabic_ligature_noon_with_meem_final_form;
			return 2;
		case 0xFC8D:
			*normals = arabic_ligature_noon_with_noon_final_form;
			return 2;
		case 0xFC8E:
			*normals = arabic_ligature_noon_with_alef_maksura_final_form;
			return 2;
		case 0xFC8F:
			*normals = arabic_ligature_noon_with_yeh_final_form;
			return 2;
		case 0xFC90:
			*normals = arabic_ligature_alef_maksura_with_superscript_alef_final_form;
			return 2;
		case 0xFC91:
			*normals = arabic_ligature_yeh_with_reh_final_form;
			return 2;
		case 0xFC92:
			*normals = arabic_ligature_yeh_with_zain_final_form;
			return 2;
		case 0xFC93:
			*normals = arabic_ligature_yeh_with_meem_final_form;
			return 2;
		case 0xFC94:
			*normals = arabic_ligature_yeh_with_noon_final_form;
			return 2;
		case 0xFC95:
			*normals = arabic_ligature_yeh_with_alef_maksura_final_form;
			return 2;
		case 0xFC96:
			*normals = arabic_ligature_yeh_with_yeh_final_form;
			return 2;
		case 0xFC97:
			*normals = arabic_ligature_yeh_with_hamza_above_with_jeem_initial_form;
			return 2;
		case 0xFC98:
			*normals = arabic_ligature_yeh_with_hamza_above_with_hah_initial_form;
			return 2;
		case 0xFC99:
			*normals = arabic_ligature_yeh_with_hamza_above_with_khah_initial_form;
			return 2;
		case 0xFC9A:
			*normals = arabic_ligature_yeh_with_hamza_above_with_meem_initial_form;
			return 2;
		case 0xFC9B:
			*normals = arabic_ligature_yeh_with_hamza_above_with_heh_initial_form;
			return 2;
		case 0xFC9C:
			*normals = arabic_ligature_beh_with_jeem_initial_form;
			return 2;
		case 0xFC9D:
			*normals = arabic_ligature_beh_with_hah_initial_form;
			return 2;
		case 0xFC9E:
			*normals = arabic_ligature_beh_with_khah_initial_form;
			return 2;
		case 0xFC9F:
			*normals = arabic_ligature_beh_with_meem_initial_form;
			return 2;
		case 0xFCA0:
			*normals = arabic_ligature_beh_with_heh_initial_form;
			return 2;
		case 0xFCA1:
			*normals = arabic_ligature_teh_with_jeem_initial_form;
			return 2;
		case 0xFCA2:
			*normals = arabic_ligature_teh_with_hah_initial_form;
			return 2;
		case 0xFCA3:
			*normals = arabic_ligature_teh_with_khah_initial_form;
			return 2;
		case 0xFCA4:
			*normals = arabic_ligature_teh_with_meem_initial_form;
			return 2;
		case 0xFCA5:
			*normals = arabic_ligature_teh_with_heh_initial_form;
			return 2;
		case 0xFCA6:
			*normals = arabic_ligature_theh_with_meem_initial_form;
			return 2;
		case 0xFCA7:
			*normals = arabic_ligature_jeem_with_hah_initial_form;
			return 2;
		case 0xFCA8:
			*normals = arabic_ligature_jeem_with_meem_initial_form;
			return 2;
		case 0xFCA9:
			*normals = arabic_ligature_hah_with_jeem_initial_form;
			return 2;
		case 0xFCAA:
			*normals = arabic_ligature_hah_with_meem_initial_form;
			return 2;
		case 0xFCAB:
			*normals = arabic_ligature_khah_with_jeem_initial_form;
			return 2;
		case 0xFCAC:
			*normals = arabic_ligature_khah_with_meem_initial_form;
			return 2;
		case 0xFCAD:
			*normals = arabic_ligature_seen_with_jeem_initial_form;
			return 2;
		case 0xFCAE:
			*normals = arabic_ligature_seen_with_hah_initial_form;
			return 2;
		case 0xFCAF:
			*normals = arabic_ligature_seen_with_khah_initial_form;
			return 2;
		case 0xFCB0:
			*normals = arabic_ligature_seen_with_meem_initial_form;
			return 2;
		case 0xFCB1:
			*normals = arabic_ligature_sad_with_hah_initial_form;
			return 2;
		case 0xFCB2:
			*normals = arabic_ligature_sad_with_khah_initial_form;
			return 2;
		case 0xFCB3:
			*normals = arabic_ligature_sad_with_meem_initial_form;
			return 2;
		case 0xFCB4:
			*normals = arabic_ligature_dad_with_jeem_initial_form;
			return 2;
		case 0xFCB5:
			*normals = arabic_ligature_dad_with_hah_initial_form;
			return 2;
		case 0xFCB6:
			*normals = arabic_ligature_dad_with_khah_initial_form;
			return 2;
		case 0xFCB7:
			*normals = arabic_ligature_dad_with_meem_initial_form;
			return 2;
		case 0xFCB8:
			*normals = arabic_ligature_tah_with_hah_initial_form;
			return 2;
		case 0xFCB9:
			*normals = arabic_ligature_zah_with_meem_initial_form;
			return 2;
		case 0xFCBA:
			*normals = arabic_ligature_ain_with_jeem_initial_form;
			return 2;
		case 0xFCBB:
			*normals = arabic_ligature_ain_with_meem_initial_form;
			return 2;
		case 0xFCBC:
			*normals = arabic_ligature_ghain_with_jeem_initial_form;
			return 2;
		case 0xFCBD:
			*normals = arabic_ligature_ghain_with_meem_initial_form;
			return 2;
		case 0xFCBE:
			*normals = arabic_ligature_feh_with_jeem_initial_form;
			return 2;
		case 0xFCBF:
			*normals = arabic_ligature_feh_with_hah_initial_form;
			return 2;
		case 0xFCC0:
			*normals = arabic_ligature_feh_with_khah_initial_form;
			return 2;
		case 0xFCC1:
			*normals = arabic_ligature_feh_with_meem_initial_form;
			return 2;
		case 0xFCC2:
			*normals = arabic_ligature_qaf_with_hah_initial_form;
			return 2;
		case 0xFCC3:
			*normals = arabic_ligature_qaf_with_meem_initial_form;
			return 2;
		case 0xFCC4:
			*normals = arabic_ligature_kaf_with_jeem_initial_form;
			return 2;
		case 0xFCC5:
			*normals = arabic_ligature_kaf_with_hah_initial_form;
			return 2;
		case 0xFCC6:
			*normals = arabic_ligature_kaf_with_khah_initial_form;
			return 2;
		case 0xFCC7:
			*normals = arabic_ligature_kaf_with_lam_initial_form;
			return 2;
		case 0xFCC8:
			*normals = arabic_ligature_kaf_with_meem_initial_form;
			return 2;
		case 0xFCC9:
			*normals = arabic_ligature_lam_with_jeem_initial_form;
			return 2;
		case 0xFCCA:
			*normals = arabic_ligature_lam_with_hah_initial_form;
			return 2;
		case 0xFCCB:
			*normals = arabic_ligature_lam_with_khah_initial_form;
			return 2;
		case 0xFCCC:
			*normals = arabic_ligature_lam_with_meem_initial_form;
			return 2;
		case 0xFCCD:
			*normals = arabic_ligature_lam_with_heh_initial_form;
			return 2;
		case 0xFCCE:
			*normals = arabic_ligature_meem_with_jeem_initial_form;
			return 2;
		case 0xFCCF:
			*normals = arabic_ligature_meem_with_hah_initial_form;
			return 2;
		case 0xFCD0:
			*normals = arabic_ligature_meem_with_khah_initial_form;
			return 2;
		case 0xFCD1:
			*normals = arabic_ligature_meem_with_meem_initial_form;
			return 2;
		case 0xFCD2:
			*normals = arabic_ligature_noon_with_jeem_initial_form;
			return 2;
		case 0xFCD3:
			*normals = arabic_ligature_noon_with_hah_initial_form;
			return 2;
		case 0xFCD4:
			*normals = arabic_ligature_noon_with_khah_initial_form;
			return 2;
		case 0xFCD5:
			*normals = arabic_ligature_noon_with_meem_initial_form;
			return 2;
		case 0xFCD6:
			*normals = arabic_ligature_noon_with_heh_initial_form;
			return 2;
		case 0xFCD7:
			*normals = arabic_ligature_heh_with_jeem_initial_form;
			return 2;
		case 0xFCD8:
			*normals = arabic_ligature_heh_with_meem_initial_form;
			return 2;
		case 0xFCD9:
			*normals = arabic_ligature_heh_with_superscript_alef_initial_form;
			return 2;
		case 0xFCDA:
			*normals = arabic_ligature_yeh_with_jeem_initial_form;
			return 2;
		case 0xFCDB:
			*normals = arabic_ligature_yeh_with_hah_initial_form;
			return 2;
		case 0xFCDC:
			*normals = arabic_ligature_yeh_with_khah_initial_form;
			return 2;
		case 0xFCDD:
			*normals = arabic_ligature_yeh_with_meem_initial_form;
			return 2;
		case 0xFCDE:
			*normals = arabic_ligature_yeh_with_heh_initial_form;
			return 2;
		case 0xFCDF:
			*normals = arabic_ligature_yeh_with_hamza_above_with_meem_medial_form;
			return 2;
		case 0xFCE0:
			*normals = arabic_ligature_yeh_with_hamza_above_with_heh_medial_form;
			return 2;
		case 0xFCE1:
			*normals = arabic_ligature_beh_with_meem_medial_form;
			return 2;
		case 0xFCE2:
			*normals = arabic_ligature_beh_with_heh_medial_form;
			return 2;
		case 0xFCE3:
			*normals = arabic_ligature_teh_with_meem_medial_form;
			return 2;
		case 0xFCE4:
			*normals = arabic_ligature_teh_with_heh_medial_form;
			return 2;
		case 0xFCE5:
			*normals = arabic_ligature_theh_with_meem_medial_form;
			return 2;
		case 0xFCE6:
			*normals = arabic_ligature_theh_with_heh_medial_form;
			return 2;
		case 0xFCE7:
			*normals = arabic_ligature_seen_with_meem_medial_form;
			return 2;
		case 0xFCE8:
			*normals = arabic_ligature_seen_with_heh_medial_form;
			return 2;
		case 0xFCE9:
			*normals = arabic_ligature_sheen_with_meem_medial_form;
			return 2;
		case 0xFCEA:
			*normals = arabic_ligature_sheen_with_heh_medial_form;
			return 2;
		case 0xFCEB:
			*normals = arabic_ligature_kaf_with_lam_medial_form;
			return 2;
		case 0xFCEC:
			*normals = arabic_ligature_kaf_with_meem_medial_form;
			return 2;
		case 0xFCED:
			*normals = arabic_ligature_lam_with_meem_medial_form;
			return 2;
		case 0xFCEE:
			*normals = arabic_ligature_noon_with_meem_medial_form;
			return 2;
		case 0xFCEF:
			*normals = arabic_ligature_noon_with_heh_medial_form;
			return 2;
		case 0xFCF0:
			*normals = arabic_ligature_yeh_with_meem_medial_form;
			return 2;
		case 0xFCF1:
			*normals = arabic_ligature_yeh_with_heh_medial_form;
			return 2;
		case 0xFCF2:
			*normals = arabic_ligature_shadda_with_fatha_medial_form;
			return 3;
		case 0xFCF3:
			*normals = arabic_ligature_shadda_with_damma_medial_form;
			return 3;
		case 0xFCF4:
			*normals = arabic_ligature_shadda_with_kasra_medial_form;
			return 3;
		case 0xFCF5:
			*normals = arabic_ligature_tah_with_alef_maksura_isolated_form;
			return 2;
		case 0xFCF6:
			*normals = arabic_ligature_tah_with_yeh_isolated_form;
			return 2;
		case 0xFCF7:
			*normals = arabic_ligature_ain_with_alef_maksura_isolated_form;
			return 2;
		case 0xFCF8:
			*normals = arabic_ligature_ain_with_yeh_isolated_form;
			return 2;
		case 0xFCF9:
			*normals = arabic_ligature_ghain_with_alef_maksura_isolated_form;
			return 2;
		case 0xFCFA:
			*normals = arabic_ligature_ghain_with_yeh_isolated_form;
			return 2;
		case 0xFCFB:
			*normals = arabic_ligature_seen_with_alef_maksura_isolated_form;
			return 2;
		case 0xFCFC:
			*normals = arabic_ligature_seen_with_yeh_isolated_form;
			return 2;
		case 0xFCFD:
			*normals = arabic_ligature_sheen_with_alef_maksura_isolated_form;
			return 2;
		case 0xFCFE:
			*normals = arabic_ligature_sheen_with_yeh_isolated_form;
			return 2;
		case 0xFCFF:
			*normals = arabic_ligature_hah_with_alef_maksura_isolated_form;
			return 2;
		case 0xFD00:
			*normals = arabic_ligature_hah_with_yeh_isolated_form;
			return 2;
		case 0xFD01:
			*normals = arabic_ligature_jeem_with_alef_maksura_isolated_form;
			return 2;
		case 0xFD02:
			*normals = arabic_ligature_jeem_with_yeh_isolated_form;
			return 2;
		case 0xFD03:
			*normals = arabic_ligature_khah_with_alef_maksura_isolated_form;
			return 2;
		case 0xFD04:
			*normals = arabic_ligature_khah_with_yeh_isolated_form;
			return 2;
		case 0xFD05:
			*normals = arabic_ligature_sad_with_alef_maksura_isolated_form;
			return 2;
		case 0xFD06:
			*normals = arabic_ligature_sad_with_yeh_isolated_form;
			return 2;
		case 0xFD07:
			*normals = arabic_ligature_dad_with_alef_maksura_isolated_form;
			return 2;
		case 0xFD08:
			*normals = arabic_ligature_dad_with_yeh_isolated_form;
			return 2;
		case 0xFD09:
			*normals = arabic_ligature_sheen_with_jeem_isolated_form;
			return 2;
		case 0xFD0A:
			*normals = arabic_ligature_sheen_with_hah_isolated_form;
			return 2;
		case 0xFD0B:
			*normals = arabic_ligature_sheen_with_khah_isolated_form;
			return 2;
		case 0xFD0C:
			*normals = arabic_ligature_sheen_with_meem_isolated_form;
			return 2;
		case 0xFD0D:
			*normals = arabic_ligature_sheen_with_reh_isolated_form;
			return 2;
		case 0xFD0E:
			*normals = arabic_ligature_seen_with_reh_isolated_form;
			return 2;
		case 0xFD0F:
			*normals = arabic_ligature_sad_with_reh_isolated_form;
			return 2;
		case 0xFD10:
			*normals = arabic_ligature_dad_with_reh_isolated_form;
			return 2;
		case 0xFD11:
			*normals = arabic_ligature_tah_with_alef_maksura_final_form;
			return 2;
		case 0xFD12:
			*normals = arabic_ligature_tah_with_yeh_final_form;
			return 2;
		case 0xFD13:
			*normals = arabic_ligature_ain_with_alef_maksura_final_form;
			return 2;
		case 0xFD14:
			*normals = arabic_ligature_ain_with_yeh_final_form;
			return 2;
		case 0xFD15:
			*normals = arabic_ligature_ghain_with_alef_maksura_final_form;
			return 2;
		case 0xFD16:
			*normals = arabic_ligature_ghain_with_yeh_final_form;
			return 2;
		case 0xFD17:
			*normals = arabic_ligature_seen_with_alef_maksura_final_form;
			return 2;
		case 0xFD18:
			*normals = arabic_ligature_seen_with_yeh_final_form;
			return 2;
		case 0xFD19:
			*normals = arabic_ligature_sheen_with_alef_maksura_final_form;
			return 2;
		case 0xFD1A:
			*normals = arabic_ligature_sheen_with_yeh_final_form;
			return 2;
		case 0xFD1B:
			*normals = arabic_ligature_hah_with_alef_maksura_final_form;
			return 2;
		case 0xFD1C:
			*normals = arabic_ligature_hah_with_yeh_final_form;
			return 2;
		case 0xFD1D:
			*normals = arabic_ligature_jeem_with_alef_maksura_final_form;
			return 2;
		case 0xFD1E:
			*normals = arabic_ligature_jeem_with_yeh_final_form;
			return 2;
		case 0xFD1F:
			*normals = arabic_ligature_khah_with_alef_maksura_final_form;
			return 2;
		case 0xFD20:
			*normals = arabic_ligature_khah_with_yeh_final_form;
			return 2;
		case 0xFD21:
			*normals = arabic_ligature_sad_with_alef_maksura_final_form;
			return 2;
		case 0xFD22:
			*normals = arabic_ligature_sad_with_yeh_final_form;
			return 2;
		case 0xFD23:
			*normals = arabic_ligature_dad_with_alef_maksura_final_form;
			return 2;
		case 0xFD24:
			*normals = arabic_ligature_dad_with_yeh_final_form;
			return 2;
		case 0xFD25:
			*normals = arabic_ligature_sheen_with_jeem_final_form;
			return 2;
		case 0xFD26:
			*normals = arabic_ligature_sheen_with_hah_final_form;
			return 2;
		case 0xFD27:
			*normals = arabic_ligature_sheen_with_khah_final_form;
			return 2;
		case 0xFD28:
			*normals = arabic_ligature_sheen_with_meem_final_form;
			return 2;
		case 0xFD29:
			*normals = arabic_ligature_sheen_with_reh_final_form;
			return 2;
		case 0xFD2A:
			*normals = arabic_ligature_seen_with_reh_final_form;
			return 2;
		case 0xFD2B:
			*normals = arabic_ligature_sad_with_reh_final_form;
			return 2;
		case 0xFD2C:
			*normals = arabic_ligature_dad_with_reh_final_form;
			return 2;
		case 0xFD2D:
			*normals = arabic_ligature_sheen_with_jeem_initial_form;
			return 2;
		case 0xFD2E:
			*normals = arabic_ligature_sheen_with_hah_initial_form;
			return 2;
		case 0xFD2F:
			*normals = arabic_ligature_sheen_with_khah_initial_form;
			return 2;
		case 0xFD30:
			*normals = arabic_ligature_sheen_with_meem_initial_form;
			return 2;
		case 0xFD31:
			*normals = arabic_ligature_seen_with_heh_initial_form;
			return 2;
		case 0xFD32:
			*normals = arabic_ligature_sheen_with_heh_initial_form;
			return 2;
		case 0xFD33:
			*normals = arabic_ligature_tah_with_meem_initial_form;
			return 2;
		case 0xFD34:
			*normals = arabic_ligature_seen_with_jeem_medial_form;
			return 2;
		case 0xFD35:
			*normals = arabic_ligature_seen_with_hah_medial_form;
			return 2;
		case 0xFD36:
			*normals = arabic_ligature_seen_with_khah_medial_form;
			return 2;
		case 0xFD37:
			*normals = arabic_ligature_sheen_with_jeem_medial_form;
			return 2;
		case 0xFD38:
			*normals = arabic_ligature_sheen_with_hah_medial_form;
			return 2;
		case 0xFD39:
			*normals = arabic_ligature_sheen_with_khah_medial_form;
			return 2;
		case 0xFD3A:
			*normals = arabic_ligature_tah_with_meem_medial_form;
			return 2;
		case 0xFD3B:
			*normals = arabic_ligature_zah_with_meem_medial_form;
			return 2;
		case 0xFD3C:
			*normals = arabic_ligature_alef_with_fathatan_final_form;
			return 2;
		case 0xFD3D:
			*normals = arabic_ligature_alef_with_fathatan_isolated_form;
			return 2;
		case 0xFD50:
			*normals = arabic_ligature_teh_with_jeem_with_meem_initial_form;
			return 3;
		case 0xFD51:
			*normals = arabic_ligature_teh_with_hah_with_jeem_final_form;
			return 3;
		case 0xFD52:
			*normals = arabic_ligature_teh_with_hah_with_jeem_initial_form;
			return 3;
		case 0xFD53:
			*normals = arabic_ligature_teh_with_hah_with_meem_initial_form;
			return 3;
		case 0xFD54:
			*normals = arabic_ligature_teh_with_khah_with_meem_initial_form;
			return 3;
		case 0xFD55:
			*normals = arabic_ligature_teh_with_meem_with_jeem_initial_form;
			return 3;
		case 0xFD56:
			*normals = arabic_ligature_teh_with_meem_with_hah_initial_form;
			return 3;
		case 0xFD57:
			*normals = arabic_ligature_teh_with_meem_with_khah_initial_form;
			return 3;
		case 0xFD58:
			*normals = arabic_ligature_jeem_with_meem_with_hah_final_form;
			return 3;
		case 0xFD59:
			*normals = arabic_ligature_jeem_with_meem_with_hah_initial_form;
			return 3;
		case 0xFD5A:
			*normals = arabic_ligature_hah_with_meem_with_yeh_final_form;
			return 3;
		case 0xFD5B:
			*normals = arabic_ligature_hah_with_meem_with_alef_maksura_final_form;
			return 3;
		case 0xFD5C:
			*normals = arabic_ligature_seen_with_hah_with_jeem_initial_form;
			return 3;
		case 0xFD5D:
			*normals = arabic_ligature_seen_with_jeem_with_hah_initial_form;
			return 3;
		case 0xFD5E:
			*normals = arabic_ligature_seen_with_jeem_with_alef_maksura_final_form;
			return 3;
		case 0xFD5F:
			*normals = arabic_ligature_seen_with_meem_with_hah_final_form;
			return 3;
		case 0xFD60:
			*normals = arabic_ligature_seen_with_meem_with_hah_initial_form;
			return 3;
		case 0xFD61:
			*normals = arabic_ligature_seen_with_meem_with_jeem_initial_form;
			return 3;
		case 0xFD62:
			*normals = arabic_ligature_seen_with_meem_with_meem_final_form;
			return 3;
		case 0xFD63:
			*normals = arabic_ligature_seen_with_meem_with_meem_initial_form;
			return 3;
		case 0xFD64:
			*normals = arabic_ligature_sad_with_hah_with_hah_final_form;
			return 3;
		case 0xFD65:
			*normals = arabic_ligature_sad_with_hah_with_hah_initial_form;
			return 3;
		case 0xFD66:
			*normals = arabic_ligature_sad_with_meem_with_meem_final_form;
			return 3;
		case 0xFD67:
			*normals = arabic_ligature_sheen_with_hah_with_meem_final_form;
			return 3;
		case 0xFD68:
			*normals = arabic_ligature_sheen_with_hah_with_meem_initial_form;
			return 3;
		case 0xFD69:
			*normals = arabic_ligature_sheen_with_jeem_with_yeh_final_form;
			return 3;
		case 0xFD6A:
			*normals = arabic_ligature_sheen_with_meem_with_khah_final_form;
			return 3;
		case 0xFD6B:
			*normals = arabic_ligature_sheen_with_meem_with_khah_initial_form;
			return 3;
		case 0xFD6C:
			*normals = arabic_ligature_sheen_with_meem_with_meem_final_form;
			return 3;
		case 0xFD6D:
			*normals = arabic_ligature_sheen_with_meem_with_meem_initial_form;
			return 3;
		case 0xFD6E:
			*normals = arabic_ligature_dad_with_hah_with_alef_maksura_final_form;
			return 3;
		case 0xFD6F:
			*normals = arabic_ligature_dad_with_khah_with_meem_final_form;
			return 3;
		case 0xFD70:
			*normals = arabic_ligature_dad_with_khah_with_meem_initial_form;
			return 3;
		case 0xFD71:
			*normals = arabic_ligature_tah_with_meem_with_hah_final_form;
			return 3;
		case 0xFD72:
			*normals = arabic_ligature_tah_with_meem_with_hah_initial_form;
			return 3;
		case 0xFD73:
			*normals = arabic_ligature_tah_with_meem_with_meem_initial_form;
			return 3;
		case 0xFD74:
			*normals = arabic_ligature_tah_with_meem_with_yeh_final_form;
			return 3;
		case 0xFD75:
			*normals = arabic_ligature_ain_with_jeem_with_meem_final_form;
			return 3;
		case 0xFD76:
			*normals = arabic_ligature_ain_with_meem_with_meem_final_form;
			return 3;
		case 0xFD77:
			*normals = arabic_ligature_ain_with_meem_with_meem_initial_form;
			return 3;
		case 0xFD78:
			*normals = arabic_ligature_ain_with_meem_with_alef_maksura_final_form;
			return 3;
		case 0xFD79:
			*normals = arabic_ligature_ghain_with_meem_with_meem_final_form;
			return 3;
		case 0xFD7A:
			*normals = arabic_ligature_ghain_with_meem_with_yeh_final_form;
			return 3;
		case 0xFD7B:
			*normals = arabic_ligature_ghain_with_meem_with_alef_maksura_final_form;
			return 3;
		case 0xFD7C:
			*normals = arabic_ligature_feh_with_khah_with_meem_final_form;
			return 3;
		case 0xFD7D:
			*normals = arabic_ligature_feh_with_khah_with_meem_initial_form;
			return 3;
		case 0xFD7E:
			*normals = arabic_ligature_qaf_with_meem_with_hah_final_form;
			return 3;
		case 0xFD7F:
			*normals = arabic_ligature_qaf_with_meem_with_meem_final_form;
			return 3;
		case 0xFD80:
			*normals = arabic_ligature_lam_with_hah_with_meem_final_form;
			return 3;
		case 0xFD81:
			*normals = arabic_ligature_lam_with_hah_with_yeh_final_form;
			return 3;
		case 0xFD82:
			*normals = arabic_ligature_lam_with_hah_with_alef_maksura_final_form;
			return 3;
		case 0xFD83:
			*normals = arabic_ligature_lam_with_jeem_with_jeem_initial_form;
			return 3;
		case 0xFD84:
			*normals = arabic_ligature_lam_with_jeem_with_jeem_final_form;
			return 3;
		case 0xFD85:
			*normals = arabic_ligature_lam_with_khah_with_meem_final_form;
			return 3;
		case 0xFD86:
			*normals = arabic_ligature_lam_with_khah_with_meem_initial_form;
			return 3;
		case 0xFD87:
			*normals = arabic_ligature_lam_with_meem_with_hah_final_form;
			return 3;
		case 0xFD88:
			*normals = arabic_ligature_lam_with_meem_with_hah_initial_form;
			return 3;
		case 0xFD89:
			*normals = arabic_ligature_meem_with_hah_with_jeem_initial_form;
			return 3;
		case 0xFD8A:
			*normals = arabic_ligature_meem_with_hah_with_meem_initial_form;
			return 3;
		case 0xFD8B:
			*normals = arabic_ligature_meem_with_hah_with_yeh_final_form;
			return 3;
		case 0xFD8C:
			*normals = arabic_ligature_meem_with_jeem_with_hah_initial_form;
			return 3;
		case 0xFD8D:
			*normals = arabic_ligature_meem_with_jeem_with_meem_initial_form;
			return 3;
		case 0xFD8E:
			*normals = arabic_ligature_meem_with_khah_with_jeem_initial_form;
			return 3;
		case 0xFD8F:
			*normals = arabic_ligature_meem_with_khah_with_meem_initial_form;
			return 3;
		case 0xFD92:
			*normals = arabic_ligature_meem_with_jeem_with_khah_initial_form;
			return 3;
		case 0xFD93:
			*normals = arabic_ligature_heh_with_meem_with_jeem_initial_form;
			return 3;
		case 0xFD94:
			*normals = arabic_ligature_heh_with_meem_with_meem_initial_form;
			return 3;
		case 0xFD95:
			*normals = arabic_ligature_noon_with_hah_with_meem_initial_form;
			return 3;
		case 0xFD96:
			*normals = arabic_ligature_noon_with_hah_with_alef_maksura_final_form;
			return 3;
		case 0xFD97:
			*normals = arabic_ligature_noon_with_jeem_with_meem_final_form;
			return 3;
		case 0xFD98:
			*normals = arabic_ligature_noon_with_jeem_with_meem_initial_form;
			return 3;
		case 0xFD99:
			*normals = arabic_ligature_noon_with_jeem_with_alef_maksura_final_form;
			return 3;
		case 0xFD9A:
			*normals = arabic_ligature_noon_with_meem_with_yeh_final_form;
			return 3;
		case 0xFD9B:
			*normals = arabic_ligature_noon_with_meem_with_alef_maksura_final_form;
			return 3;
		case 0xFD9C:
			*normals = arabic_ligature_yeh_with_meem_with_meem_final_form;
			return 3;
		case 0xFD9D:
			*normals = arabic_ligature_yeh_with_meem_with_meem_initial_form;
			return 3;
		case 0xFD9E:
			*normals = arabic_ligature_beh_with_khah_with_yeh_final_form;
			return 3;
		case 0xFD9F:
			*normals = arabic_ligature_teh_with_jeem_with_yeh_final_form;
			return 3;
		case 0xFDA0:
			*normals = arabic_ligature_teh_with_jeem_with_alef_maksura_final_form;
			return 3;
		case 0xFDA1:
			*normals = arabic_ligature_teh_with_khah_with_yeh_final_form;
			return 3;
		case 0xFDA2:
			*normals = arabic_ligature_teh_with_khah_with_alef_maksura_final_form;
			return 3;
		case 0xFDA3:
			*normals = arabic_ligature_teh_with_meem_with_yeh_final_form;
			return 3;
		case 0xFDA4:
			*normals = arabic_ligature_teh_with_meem_with_alef_maksura_final_form;
			return 3;
		case 0xFDA5:
			*normals = arabic_ligature_jeem_with_meem_with_yeh_final_form;
			return 3;
		case 0xFDA6:
			*normals = arabic_ligature_jeem_with_hah_with_alef_maksura_final_form;
			return 3;
		case 0xFDA7:
			*normals = arabic_ligature_jeem_with_meem_with_alef_maksura_final_form;
			return 3;
		case 0xFDA8:
			*normals = arabic_ligature_seen_with_khah_with_alef_maksura_final_form;
			return 3;
		case 0xFDA9:
			*normals = arabic_ligature_sad_with_hah_with_yeh_final_form;
			return 3;
		case 0xFDAA:
			*normals = arabic_ligature_sheen_with_hah_with_yeh_final_form;
			return 3;
		case 0xFDAB:
			*normals = arabic_ligature_dad_with_hah_with_yeh_final_form;
			return 3;
		case 0xFDAC:
			*normals = arabic_ligature_lam_with_jeem_with_yeh_final_form;
			return 3;
		case 0xFDAD:
			*normals = arabic_ligature_lam_with_meem_with_yeh_final_form;
			return 3;
		case 0xFDAE:
			*normals = arabic_ligature_yeh_with_hah_with_yeh_final_form;
			return 3;
		case 0xFDAF:
			*normals = arabic_ligature_yeh_with_jeem_with_yeh_final_form;
			return 3;
		case 0xFDB0:
			*normals = arabic_ligature_yeh_with_meem_with_yeh_final_form;
			return 3;
		case 0xFDB1:
			*normals = arabic_ligature_meem_with_meem_with_yeh_final_form;
			return 3;
		case 0xFDB2:
			*normals = arabic_ligature_qaf_with_meem_with_yeh_final_form;
			return 3;
		case 0xFDB3:
			*normals = arabic_ligature_noon_with_hah_with_yeh_final_form;
			return 3;
		case 0xFDB4:
			*normals = arabic_ligature_qaf_with_meem_with_hah_initial_form;
			return 3;
		case 0xFDB5:
			*normals = arabic_ligature_lam_with_hah_with_meem_initial_form;
			return 3;
		case 0xFDB6:
			*normals = arabic_ligature_ain_with_meem_with_yeh_final_form;
			return 3;
		case 0xFDB7:
			*normals = arabic_ligature_kaf_with_meem_with_yeh_final_form;
			return 3;
		case 0xFDB8:
			*normals = arabic_ligature_noon_with_jeem_with_hah_initial_form;
			return 3;
		case 0xFDB9:
			*normals = arabic_ligature_meem_with_khah_with_yeh_final_form;
			return 3;
		case 0xFDBA:
			*normals = arabic_ligature_lam_with_jeem_with_meem_initial_form;
			return 3;
		case 0xFDBB:
			*normals = arabic_ligature_kaf_with_meem_with_meem_final_form;
			return 3;
		case 0xFDBC:
			*normals = arabic_ligature_lam_with_jeem_with_meem_final_form;
			return 3;
		case 0xFDBD:
			*normals = arabic_ligature_noon_with_jeem_with_hah_final_form;
			return 3;
		case 0xFDBE:
			*normals = arabic_ligature_jeem_with_hah_with_yeh_final_form;
			return 3;
		case 0xFDBF:
			*normals = arabic_ligature_hah_with_jeem_with_yeh_final_form;
			return 3;
		case 0xFDC0:
			*normals = arabic_ligature_meem_with_jeem_with_yeh_final_form;
			return 3;
		case 0xFDC1:
			*normals = arabic_ligature_feh_with_meem_with_yeh_final_form;
			return 3;
		case 0xFDC2:
			*normals = arabic_ligature_beh_with_hah_with_yeh_final_form;
			return 3;
		case 0xFDC3:
			*normals = arabic_ligature_kaf_with_meem_with_meem_initial_form;
			return 3;
		case 0xFDC4:
			*normals = arabic_ligature_ain_with_jeem_with_meem_initial_form;
			return 3;
		case 0xFDC5:
			*normals = arabic_ligature_sad_with_meem_with_meem_initial_form;
			return 3;
		case 0xFDC6:
			*normals = arabic_ligature_seen_with_khah_with_yeh_final_form;
			return 3;
		case 0xFDC7:
			*normals = arabic_ligature_noon_with_jeem_with_yeh_final_form;
			return 3;
		case 0xFDF0:
			*normals = arabic_ligature_salla_used_as_koranic_stop_sign_isolated_form;
			return 3;
		case 0xFDF1:
			*normals = arabic_ligature_qala_used_as_koranic_stop_sign_isolated_form;
			return 3;
		case 0xFDF2:
			*normals = arabic_ligature_allah_isolated_form;
			return 4;
		case 0xFDF3:
			*normals = arabic_ligature_akbar_isolated_form;
			return 4;
		case 0xFDF4:
			*normals = arabic_ligature_mohammad_isolated_form;
			return 4;
		case 0xFDF5:
			*normals = arabic_ligature_salam_isolated_form;
			return 4;
		case 0xFDF6:
			*normals = arabic_ligature_rasoul_isolated_form;
			return 4;
		case 0xFDF7:
			*normals = arabic_ligature_alayhe_isolated_form;
			return 4;
		case 0xFDF8:
			*normals = arabic_ligature_wasallam_isolated_form;
			return 4;
		case 0xFDF9:
			*normals = arabic_ligature_salla_isolated_form;
			return 3;
		case 0xFDFA:
			*normals = arabic_ligature_sallallahou_alayhe_wasallam;
			return 18;
		case 0xFDFB:
			*normals = arabic_ligature_jallajalalouhou;
			return 8;
		case 0xFDFC:
			*normals = rial_sign;
			return 4;
		case 0xFE10:
			*normals = presentation_form_for_vertical_comma;
			return 1;
		case 0xFE11:
			*normals = presentation_form_for_vertical_ideographic_comma;
			return 1;
		case 0xFE12:
			*normals = presentation_form_for_vertical_ideographic_full_stop;
			return 1;
		case 0xFE13:
			*normals = presentation_form_for_vertical_colon;
			return 1;
		case 0xFE14:
			*normals = presentation_form_for_vertical_semicolon;
			return 1;
		case 0xFE15:
			*normals = presentation_form_for_vertical_exclamation_mark;
			return 1;
		case 0xFE16:
			*normals = presentation_form_for_vertical_question_mark;
			return 1;
		case 0xFE17:
			*normals = presentation_form_for_vertical_left_white_lenticular_bracket;
			return 1;
		case 0xFE18:
			*normals = presentation_form_for_vertical_right_white_lenticular_brakcet;
			return 1;
		case 0xFE19:
			*normals = presentation_form_for_vertical_horizontal_ellipsis;
			return 1;
		case 0xFE30:
			*normals = presentation_form_for_vertical_two_dot_leader;
			return 1;
		case 0xFE31:
			*normals = presentation_form_for_vertical_em_dash;
			return 1;
		case 0xFE32:
			*normals = presentation_form_for_vertical_en_dash;
			return 1;
		case 0xFE33:
			*normals = presentation_form_for_vertical_low_line;
			return 1;
		case 0xFE34:
			*normals = presentation_form_for_vertical_wavy_low_line;
			return 1;
		case 0xFE35:
			*normals = presentation_form_for_vertical_left_parenthesis;
			return 1;
		case 0xFE36:
			*normals = presentation_form_for_vertical_right_parenthesis;
			return 1;
		case 0xFE37:
			*normals = presentation_form_for_vertical_left_curly_bracket;
			return 1;
		case 0xFE38:
			*normals = presentation_form_for_vertical_right_curly_bracket;
			return 1;
		case 0xFE39:
			*normals = presentation_form_for_vertical_left_tortoise_shell_bracket;
			return 1;
		case 0xFE3A:
			*normals = presentation_form_for_vertical_right_tortoise_shell_bracket;
			return 1;
		case 0xFE3B:
			*normals = presentation_form_for_vertical_left_black_lenticular_bracket;
			return 1;
		case 0xFE3C:
			*normals = presentation_form_for_vertical_right_black_lenticular_bracket;
			return 1;
		case 0xFE3D:
			*normals = presentation_form_for_vertical_left_double_angle_bracket;
			return 1;
		case 0xFE3E:
			*normals = presentation_form_for_vertical_right_double_angle_bracket;
			return 1;
		case 0xFE3F:
			*normals = presentation_form_for_vertical_left_angle_bracket;
			return 1;
		case 0xFE40:
			*normals = presentation_form_for_vertical_right_angle_bracket;
			return 1;
		case 0xFE41:
			*normals = presentation_form_for_vertical_left_corner_bracket;
			return 1;
		case 0xFE42:
			*normals = presentation_form_for_vertical_right_corner_bracket;
			return 1;
		case 0xFE43:
			*normals = presentation_form_for_vertical_left_white_corner_bracket;
			return 1;
		case 0xFE44:
			*normals = presentation_form_for_vertical_right_white_corner_bracket;
			return 1;
		case 0xFE47:
			*normals = presentation_form_for_vertical_left_square_bracket;
			return 1;
		case 0xFE48:
			*normals = presentation_form_for_vertical_right_square_bracket;
			return 1;
		case 0xFE49:
			*normals = dashed_overline;
			return 1;
		case 0xFE4A:
			*normals = centreline_overline;
			return 1;
		case 0xFE4B:
			*normals = wavy_overline;
			return 1;
		case 0xFE4C:
			*normals = double_wavy_overline;
			return 1;
		case 0xFE4D:
			*normals = dashed_low_line;
			return 1;
		case 0xFE4E:
			*normals = centreline_low_line;
			return 1;
		case 0xFE4F:
			*normals = wavy_low_line;
			return 1;
		case 0xFE50:
			*normals = small_comma;
			return 1;
		case 0xFE51:
			*normals = small_ideographic_comma;
			return 1;
		case 0xFE52:
			*normals = small_full_stop;
			return 1;
		case 0xFE54:
			*normals = small_semicolon;
			return 1;
		case 0xFE55:
			*normals = small_colon;
			return 1;
		case 0xFE56:
			*normals = small_question_mark;
			return 1;
		case 0xFE57:
			*normals = small_exclamation_mark;
			return 1;
		case 0xFE58:
			*normals = small_em_dash;
			return 1;
		case 0xFE59:
			*normals = small_left_parenthesis;
			return 1;
		case 0xFE5A:
			*normals = small_right_parenthesis;
			return 1;
		case 0xFE5B:
			*normals = small_left_curly_bracket;
			return 1;
		case 0xFE5C:
			*normals = small_right_curly_bracket;
			return 1;
		case 0xFE5D:
			*normals = small_left_tortoise_shell_bracket;
			return 1;
		case 0xFE5E:
			*normals = small_right_tortoise_shell_bracket;
			return 1;
		case 0xFE5F:
			*normals = small_number_sign;
			return 1;
		case 0xFE60:
			*normals = small_ampersand;
			return 1;
		case 0xFE61:
			*normals = small_asterisk;
			return 1;
		case 0xFE62:
			*normals = small_plus_sign;
			return 1;
		case 0xFE63:
			*normals = small_hyphen_minus;
			return 1;
		case 0xFE64:
			*normals = small_less_than_sign;
			return 1;
		case 0xFE65:
			*normals = small_greater_than_sign;
			return 1;
		case 0xFE66:
			*normals = small_equals_sign;
			return 1;
		case 0xFE68:
			*normals = small_reverse_solidus;
			return 1;
		case 0xFE69:
			*normals = small_dollar_sign;
			return 1;
		case 0xFE6A:
			*normals = small_percent_sign;
			return 1;
		case 0xFE6B:
			*normals = small_commercial_at;
			return 1;
		case 0xFE70:
			*normals = arabic_fathatan_isolated_form;
			return 2;
		case 0xFE71:
			*normals = arabic_tatweel_with_fathatan_above;
			return 2;
		case 0xFE72:
			*normals = arabic_dammatan_isolated_form;
			return 2;
		case 0xFE74:
			*normals = arabic_kasratan_isolated_form;
			return 2;
		case 0xFE76:
			*normals = arabic_fatha_isolated_form;
			return 2;
		case 0xFE77:
			*normals = arabic_fatha_medial_form;
			return 2;
		case 0xFE78:
			*normals = arabic_damma_isolated_form;
			return 2;
		case 0xFE79:
			*normals = arabic_damma_medial_form;
			return 2;
		case 0xFE7A:
			*normals = arabic_kasra_isolated_form;
			return 2;
		case 0xFE7B:
			*normals = arabic_kasra_medial_form;
			return 2;
		case 0xFE7C:
			*normals = arabic_shadda_isolated_form;
			return 2;
		case 0xFE7D:
			*normals = arabic_shadda_medial_form;
			return 2;
		case 0xFE7E:
			*normals = arabic_sukun_isolated_form;
			return 2;
		case 0xFE7F:
			*normals = arabic_sukun_medial_form;
			return 2;
		case 0xFE80:
			*normals = arabic_letter_hamza_isolated_form;
			return 1;
		case 0xFE81:
			*normals = arabic_letter_alef_with_madda_above_isolated_form;
			return 1;
		case 0xFE82:
			*normals = arabic_letter_alef_with_madda_above_final_form;
			return 1;
		case 0xFE83:
			*normals = arabic_letter_alef_with_hamza_above_isolated_form;
			return 1;
		case 0xFE84:
			*normals = arabic_letter_alef_with_hamza_above_final_form;
			return 1;
		case 0xFE85:
			*normals = arabic_letter_waw_with_hamza_above_isolated_form;
			return 1;
		case 0xFE86:
			*normals = arabic_letter_waw_with_hamza_above_final_form;
			return 1;
		case 0xFE87:
			*normals = arabic_letter_alef_with_hamza_below_isolated_form;
			return 1;
		case 0xFE88:
			*normals = arabic_letter_alef_with_hamza_below_final_form;
			return 1;
		case 0xFE89:
			*normals = arabic_letter_yeh_with_hamza_above_isolated_form;
			return 1;
		case 0xFE8A:
			*normals = arabic_letter_yeh_with_hamza_above_final_form;
			return 1;
		case 0xFE8B:
			*normals = arabic_letter_yeh_with_hamza_above_initial_form;
			return 1;
		case 0xFE8C:
			*normals = arabic_letter_yeh_with_hamza_above_medial_form;
			return 1;
		case 0xFE8D:
			*normals = arabic_letter_alef_isolated_form;
			return 1;
		case 0xFE8E:
			*normals = arabic_letter_alef_final_form;
			return 1;
		case 0xFE8F:
			*normals = arabic_letter_beh_isolated_form;
			return 1;
		case 0xFE90:
			*normals = arabic_letter_beh_final_form;
			return 1;
		case 0xFE91:
			*normals = arabic_letter_beh_initial_form;
			return 1;
		case 0xFE92:
			*normals = arabic_letter_beh_medial_form;
			return 1;
		case 0xFE93:
			*normals = arabic_letter_teh_marbuta_isolated_form;
			return 1;
		case 0xFE94:
			*normals = arabic_letter_teh_marbuta_final_form;
			return 1;
		case 0xFE95:
			*normals = arabic_letter_teh_isolated_form;
			return 1;
		case 0xFE96:
			*normals = arabic_letter_teh_final_form;
			return 1;
		case 0xFE97:
			*normals = arabic_letter_teh_initial_form;
			return 1;
		case 0xFE98:
			*normals = arabic_letter_teh_medial_form;
			return 1;
		case 0xFE99:
			*normals = arabic_letter_theh_isolated_form;
			return 1;
		case 0xFE9A:
			*normals = arabic_letter_theh_final_form;
			return 1;
		case 0xFE9B:
			*normals = arabic_letter_theh_initial_form;
			return 1;
		case 0xFE9C:
			*normals = arabic_letter_theh_medial_form;
			return 1;
		case 0xFE9D:
			*normals = arabic_letter_jeem_isolated_form;
			return 1;
		case 0xFE9E:
			*normals = arabic_letter_jeem_final_form;
			return 1;
		case 0xFE9F:
			*normals = arabic_letter_jeem_initial_form;
			return 1;
		case 0xFEA0:
			*normals = arabic_letter_jeem_medial_form;
			return 1;
		case 0xFEA1:
			*normals = arabic_letter_hah_isolated_form;
			return 1;
		case 0xFEA2:
			*normals = arabic_letter_hah_final_form;
			return 1;
		case 0xFEA3:
			*normals = arabic_letter_hah_initial_form;
			return 1;
		case 0xFEA4:
			*normals = arabic_letter_hah_medial_form;
			return 1;
		case 0xFEA5:
			*normals = arabic_letter_khah_isolated_form;
			return 1;
		case 0xFEA6:
			*normals = arabic_letter_khah_final_form;
			return 1;
		case 0xFEA7:
			*normals = arabic_letter_khah_initial_form;
			return 1;
		case 0xFEA8:
			*normals = arabic_letter_khah_medial_form;
			return 1;
		case 0xFEA9:
			*normals = arabic_letter_dal_isolated_form;
			return 1;
		case 0xFEAA:
			*normals = arabic_letter_dal_final_form;
			return 1;
		case 0xFEAB:
			*normals = arabic_letter_thal_isolated_form;
			return 1;
		case 0xFEAC:
			*normals = arabic_letter_thal_final_form;
			return 1;
		case 0xFEAD:
			*normals = arabic_letter_reh_isolated_form;
			return 1;
		case 0xFEAE:
			*normals = arabic_letter_reh_final_form;
			return 1;
		case 0xFEAF:
			*normals = arabic_letter_zain_isolated_form;
			return 1;
		case 0xFEB0:
			*normals = arabic_letter_zain_final_form;
			return 1;
		case 0xFEB1:
			*normals = arabic_letter_seen_isolated_form;
			return 1;
		case 0xFEB2:
			*normals = arabic_letter_seen_final_form;
			return 1;
		case 0xFEB3:
			*normals = arabic_letter_seen_initial_form;
			return 1;
		case 0xFEB4:
			*normals = arabic_letter_seen_medial_form;
			return 1;
		case 0xFEB5:
			*normals = arabic_letter_sheen_isolated_form;
			return 1;
		case 0xFEB6:
			*normals = arabic_letter_sheen_final_form;
			return 1;
		case 0xFEB7:
			*normals = arabic_letter_sheen_initial_form;
			return 1;
		case 0xFEB8:
			*normals = arabic_letter_sheen_medial_form;
			return 1;
		case 0xFEB9:
			*normals = arabic_letter_sad_isolated_form;
			return 1;
		case 0xFEBA:
			*normals = arabic_letter_sad_final_form;
			return 1;
		case 0xFEBB:
			*normals = arabic_letter_sad_initial_form;
			return 1;
		case 0xFEBC:
			*normals = arabic_letter_sad_medial_form;
			return 1;
		case 0xFEBD:
			*normals = arabic_letter_dad_isolated_form;
			return 1;
		case 0xFEBE:
			*normals = arabic_letter_dad_final_form;
			return 1;
		case 0xFEBF:
			*normals = arabic_letter_dad_initial_form;
			return 1;
		case 0xFEC0:
			*normals = arabic_letter_dad_medial_form;
			return 1;
		case 0xFEC1:
			*normals = arabic_letter_tah_isolated_form;
			return 1;
		case 0xFEC2:
			*normals = arabic_letter_tah_final_form;
			return 1;
		case 0xFEC3:
			*normals = arabic_letter_tah_initial_form;
			return 1;
		case 0xFEC4:
			*normals = arabic_letter_tah_medial_form;
			return 1;
		case 0xFEC5:
			*normals = arabic_letter_zah_isolated_form;
			return 1;
		case 0xFEC6:
			*normals = arabic_letter_zah_final_form;
			return 1;
		case 0xFEC7:
			*normals = arabic_letter_zah_initial_form;
			return 1;
		case 0xFEC8:
			*normals = arabic_letter_zah_medial_form;
			return 1;
		case 0xFEC9:
			*normals = arabic_letter_ain_isolated_form;
			return 1;
		case 0xFECA:
			*normals = arabic_letter_ain_final_form;
			return 1;
		case 0xFECB:
			*normals = arabic_letter_ain_initial_form;
			return 1;
		case 0xFECC:
			*normals = arabic_letter_ain_medial_form;
			return 1;
		case 0xFECD:
			*normals = arabic_letter_ghain_isolated_form;
			return 1;
		case 0xFECE:
			*normals = arabic_letter_ghain_final_form;
			return 1;
		case 0xFECF:
			*normals = arabic_letter_ghain_initial_form;
			return 1;
		case 0xFED0:
			*normals = arabic_letter_ghain_medial_form;
			return 1;
		case 0xFED1:
			*normals = arabic_letter_feh_isolated_form;
			return 1;
		case 0xFED2:
			*normals = arabic_letter_feh_final_form;
			return 1;
		case 0xFED3:
			*normals = arabic_letter_feh_initial_form;
			return 1;
		case 0xFED4:
			*normals = arabic_letter_feh_medial_form;
			return 1;
		case 0xFED5:
			*normals = arabic_letter_qaf_isolated_form;
			return 1;
		case 0xFED6:
			*normals = arabic_letter_qaf_final_form;
			return 1;
		case 0xFED7:
			*normals = arabic_letter_qaf_initial_form;
			return 1;
		case 0xFED8:
			*normals = arabic_letter_qaf_medial_form;
			return 1;
		case 0xFED9:
			*normals = arabic_letter_kaf_isolated_form;
			return 1;
		case 0xFEDA:
			*normals = arabic_letter_kaf_final_form;
			return 1;
		case 0xFEDB:
			*normals = arabic_letter_kaf_initial_form;
			return 1;
		case 0xFEDC:
			*normals = arabic_letter_kaf_medial_form;
			return 1;
		case 0xFEDD:
			*normals = arabic_letter_lam_isolated_form;
			return 1;
		case 0xFEDE:
			*normals = arabic_letter_lam_final_form;
			return 1;
		case 0xFEDF:
			*normals = arabic_letter_lam_initial_form;
			return 1;
		case 0xFEE0:
			*normals = arabic_letter_lam_medial_form;
			return 1;
		case 0xFEE1:
			*normals = arabic_letter_meem_isolated_form;
			return 1;
		case 0xFEE2:
			*normals = arabic_letter_meem_final_form;
			return 1;
		case 0xFEE3:
			*normals = arabic_letter_meem_initial_form;
			return 1;
		case 0xFEE4:
			*normals = arabic_letter_meem_medial_form;
			return 1;
		case 0xFEE5:
			*normals = arabic_letter_noon_isolated_form;
			return 1;
		case 0xFEE6:
			*normals = arabic_letter_noon_final_form;
			return 1;
		case 0xFEE7:
			*normals = arabic_letter_noon_initial_form;
			return 1;
		case 0xFEE8:
			*normals = arabic_letter_noon_medial_form;
			return 1;
		case 0xFEE9:
			*normals = arabic_letter_heh_isolated_form;
			return 1;
		case 0xFEEA:
			*normals = arabic_letter_heh_final_form;
			return 1;
		case 0xFEEB:
			*normals = arabic_letter_heh_initial_form;
			return 1;
		case 0xFEEC:
			*normals = arabic_letter_heh_medial_form;
			return 1;
		case 0xFEED:
			*normals = arabic_letter_waw_isolated_form;
			return 1;
		case 0xFEEE:
			*normals = arabic_letter_waw_final_form;
			return 1;
		case 0xFEEF:
			*normals = arabic_letter_alef_maksura_isolated_form;
			return 1;
		case 0xFEF0:
			*normals = arabic_letter_alef_maksura_final_form;
			return 1;
		case 0xFEF1:
			*normals = arabic_letter_yeh_isolated_form;
			return 1;
		case 0xFEF2:
			*normals = arabic_letter_yeh_final_form;
			return 1;
		case 0xFEF3:
			*normals = arabic_letter_yeh_initial_form;
			return 1;
		case 0xFEF4:
			*normals = arabic_letter_yeh_medial_form;
			return 1;
		case 0xFEF5:
			*normals = arabic_ligature_lam_with_alef_with_madda_above_isolated_form;
			return 2;
		case 0xFEF6:
			*normals = arabic_ligature_lam_with_alef_with_madda_above_final_form;
			return 2;
		case 0xFEF7:
			*normals = arabic_ligature_lam_with_alef_with_hamza_above_isolated_form;
			return 2;
		case 0xFEF8:
			*normals = arabic_ligature_lam_with_alef_with_hamza_above_final_form;
			return 2;
		case 0xFEF9:
			*normals = arabic_ligature_lam_with_alef_with_hamza_below_isolated_form;
			return 2;
		case 0xFEFA:
			*normals = arabic_ligature_lam_with_alef_with_hamza_below_final_form;
			return 2;
		case 0xFEFB:
			*normals = arabic_ligature_lam_with_alef_isolated_form;
			return 2;
		case 0xFEFC:
			*normals = arabic_ligature_lam_with_alef_final_form;
			return 2;
		case 0xFF01:
			*normals = fullwidth_exclamation_mark;
			return 1;
		case 0xFF02:
			*normals = fullwidth_quotation_mark;
			return 1;
		case 0xFF03:
			*normals = fullwidth_number_sign;
			return 1;
		case 0xFF04:
			*normals = fullwidth_dollar_sign;
			return 1;
		case 0xFF05:
			*normals = fullwidth_percent_sign;
			return 1;
		case 0xFF06:
			*normals = fullwidth_ampersand;
			return 1;
		case 0xFF07:
			*normals = fullwidth_apostrophe;
			return 1;
		case 0xFF08:
			*normals = fullwidth_left_parenthesis;
			return 1;
		case 0xFF09:
			*normals = fullwidth_right_parenthesis;
			return 1;
		case 0xFF0A:
			*normals = fullwidth_asterisk;
			return 1;
		case 0xFF0B:
			*normals = fullwidth_plus_sign;
			return 1;
		case 0xFF0C:
			*normals = fullwidth_comma;
			return 1;
		case 0xFF0D:
			*normals = fullwidth_hyphen_minus;
			return 1;
		case 0xFF0E:
			*normals = fullwidth_full_stop;
			return 1;
		case 0xFF0F:
			*normals = fullwidth_solidus;
			return 1;
		case 0xFF10:
			*normals = fullwidth_digit_zero;
			return 1;
		case 0xFF11:
			*normals = fullwidth_digit_one;
			return 1;
		case 0xFF12:
			*normals = fullwidth_digit_two;
			return 1;
		case 0xFF13:
			*normals = fullwidth_digit_three;
			return 1;
		case 0xFF14:
			*normals = fullwidth_digit_four;
			return 1;
		case 0xFF15:
			*normals = fullwidth_digit_five;
			return 1;
		case 0xFF16:
			*normals = fullwidth_digit_six;
			return 1;
		case 0xFF17:
			*normals = fullwidth_digit_seven;
			return 1;
		case 0xFF18:
			*normals = fullwidth_digit_eight;
			return 1;
		case 0xFF19:
			*normals = fullwidth_digit_nine;
			return 1;
		case 0xFF1A:
			*normals = fullwidth_colon;
			return 1;
		case 0xFF1B:
			*normals = fullwidth_semicolon;
			return 1;
		case 0xFF1C:
			*normals = fullwidth_less_than_sign;
			return 1;
		case 0xFF1D:
			*normals = fullwidth_equals_sign;
			return 1;
		case 0xFF1E:
			*normals = fullwidth_greater_than_sign;
			return 1;
		case 0xFF1F:
			*normals = fullwidth_question_mark;
			return 1;
		case 0xFF20:
			*normals = fullwidth_commercial_at;
			return 1;
		case 0xFF21:
			*normals = fullwidth_latin_capital_letter_a;
			return 1;
		case 0xFF22:
			*normals = fullwidth_latin_capital_letter_b;
			return 1;
		case 0xFF23:
			*normals = fullwidth_latin_capital_letter_c;
			return 1;
		case 0xFF24:
			*normals = fullwidth_latin_capital_letter_d;
			return 1;
		case 0xFF25:
			*normals = fullwidth_latin_capital_letter_e;
			return 1;
		case 0xFF26:
			*normals = fullwidth_latin_capital_letter_f;
			return 1;
		case 0xFF27:
			*normals = fullwidth_latin_capital_letter_g;
			return 1;
		case 0xFF28:
			*normals = fullwidth_latin_capital_letter_h;
			return 1;
		case 0xFF29:
			*normals = fullwidth_latin_capital_letter_i;
			return 1;
		case 0xFF2A:
			*normals = fullwidth_latin_capital_letter_j;
			return 1;
		case 0xFF2B:
			*normals = fullwidth_latin_capital_letter_k;
			return 1;
		case 0xFF2C:
			*normals = fullwidth_latin_capital_letter_l;
			return 1;
		case 0xFF2D:
			*normals = fullwidth_latin_capital_letter_m;
			return 1;
		case 0xFF2E:
			*normals = fullwidth_latin_capital_letter_n;
			return 1;
		case 0xFF2F:
			*normals = fullwidth_latin_capital_letter_o;
			return 1;
		case 0xFF30:
			*normals = fullwidth_latin_capital_letter_p;
			return 1;
		case 0xFF31:
			*normals = fullwidth_latin_capital_letter_q;
			return 1;
		case 0xFF32:
			*normals = fullwidth_latin_capital_letter_r;
			return 1;
		case 0xFF33:
			*normals = fullwidth_latin_capital_letter_s;
			return 1;
		case 0xFF34:
			*normals = fullwidth_latin_capital_letter_t;
			return 1;
		case 0xFF35:
			*normals = fullwidth_latin_capital_letter_u;
			return 1;
		case 0xFF36:
			*normals = fullwidth_latin_capital_letter_v;
			return 1;
		case 0xFF37:
			*normals = fullwidth_latin_capital_letter_w;
			return 1;
		case 0xFF38:
			*normals = fullwidth_latin_capital_letter_x;
			return 1;
		case 0xFF39:
			*normals = fullwidth_latin_capital_letter_y;
			return 1;
		case 0xFF3A:
			*normals = fullwidth_latin_capital_letter_z;
			return 1;
		case 0xFF3B:
			*normals = fullwidth_left_square_bracket;
			return 1;
		case 0xFF3C:
			*normals = fullwidth_reverse_solidus;
			return 1;
		case 0xFF3D:
			*normals = fullwidth_right_square_bracket;
			return 1;
		case 0xFF3E:
			*normals = fullwidth_circumflex_accent;
			return 1;
		case 0xFF3F:
			*normals = fullwidth_low_line;
			return 1;
		case 0xFF40:
			*normals = fullwidth_grave_accent;
			return 1;
		case 0xFF41:
			*normals = fullwidth_latin_small_letter_a;
			return 1;
		case 0xFF42:
			*normals = fullwidth_latin_small_letter_b;
			return 1;
		case 0xFF43:
			*normals = fullwidth_latin_small_letter_c;
			return 1;
		case 0xFF44:
			*normals = fullwidth_latin_small_letter_d;
			return 1;
		case 0xFF45:
			*normals = fullwidth_latin_small_letter_e;
			return 1;
		case 0xFF46:
			*normals = fullwidth_latin_small_letter_f;
			return 1;
		case 0xFF47:
			*normals = fullwidth_latin_small_letter_g;
			return 1;
		case 0xFF48:
			*normals = fullwidth_latin_small_letter_h;
			return 1;
		case 0xFF49:
			*normals = fullwidth_latin_small_letter_i;
			return 1;
		case 0xFF4A:
			*normals = fullwidth_latin_small_letter_j;
			return 1;
		case 0xFF4B:
			*normals = fullwidth_latin_small_letter_k;
			return 1;
		case 0xFF4C:
			*normals = fullwidth_latin_small_letter_l;
			return 1;
		case 0xFF4D:
			*normals = fullwidth_latin_small_letter_m;
			return 1;
		case 0xFF4E:
			*normals = fullwidth_latin_small_letter_n;
			return 1;
		case 0xFF4F:
			*normals = fullwidth_latin_small_letter_o;
			return 1;
		case 0xFF50:
			*normals = fullwidth_latin_small_letter_p;
			return 1;
		case 0xFF51:
			*normals = fullwidth_latin_small_letter_q;
			return 1;
		case 0xFF52:
			*normals = fullwidth_latin_small_letter_r;
			return 1;
		case 0xFF53:
			*normals = fullwidth_latin_small_letter_s;
			return 1;
		case 0xFF54:
			*normals = fullwidth_latin_small_letter_t;
			return 1;
		case 0xFF55:
			*normals = fullwidth_latin_small_letter_u;
			return 1;
		case 0xFF56:
			*normals = fullwidth_latin_small_letter_v;
			return 1;
		case 0xFF57:
			*normals = fullwidth_latin_small_letter_w;
			return 1;
		case 0xFF58:
			*normals = fullwidth_latin_small_letter_x;
			return 1;
		case 0xFF59:
			*normals = fullwidth_latin_small_letter_y;
			return 1;
		case 0xFF5A:
			*normals = fullwidth_latin_small_letter_z;
			return 1;
		case 0xFF5B:
			*normals = fullwidth_left_curly_bracket;
			return 1;
		case 0xFF5C:
			*normals = fullwidth_vertical_line;
			return 1;
		case 0xFF5D:
			*normals = fullwidth_right_curly_bracket;
			return 1;
		case 0xFF5E:
			*normals = fullwidth_tilde;
			return 1;
		case 0xFF5F:
			*normals = fullwidth_left_white_parenthesis;
			return 1;
		case 0xFF60:
			*normals = fullwidth_right_white_parenthesis;
			return 1;
		case 0xFF61:
			*normals = halfwidth_ideographic_full_stop;
			return 1;
		case 0xFF62:
			*normals = halfwidth_left_corner_bracket;
			return 1;
		case 0xFF63:
			*normals = halfwidth_right_corner_bracket;
			return 1;
		case 0xFF64:
			*normals = halfwidth_ideographic_comma;
			return 1;
		case 0xFF65:
			*normals = halfwidth_katakana_middle_dot;
			return 1;
		case 0xFF66:
			*normals = halfwidth_katakana_letter_wo;
			return 1;
		case 0xFF67:
			*normals = halfwidth_katakana_letter_small_a;
			return 1;
		case 0xFF68:
			*normals = halfwidth_katakana_letter_small_i;
			return 1;
		case 0xFF69:
			*normals = halfwidth_katakana_letter_small_u;
			return 1;
		case 0xFF6A:
			*normals = halfwidth_katakana_letter_small_e;
			return 1;
		case 0xFF6B:
			*normals = halfwidth_katakana_letter_small_o;
			return 1;
		case 0xFF6C:
			*normals = halfwidth_katakana_letter_small_ya;
			return 1;
		case 0xFF6D:
			*normals = halfwidth_katakana_letter_small_yu;
			return 1;
		case 0xFF6E:
			*normals = halfwidth_katakana_letter_small_yo;
			return 1;
		case 0xFF6F:
			*normals = halfwidth_katakana_letter_small_tu;
			return 1;
		case 0xFF70:
			*normals = halfwidth_katakana_hiragana_prolonged_sound_mark;
			return 1;
		case 0xFF71:
			*normals = halfwidth_katakana_letter_a;
			return 1;
		case 0xFF72:
			*normals = halfwidth_katakana_letter_i;
			return 1;
		case 0xFF73:
			*normals = halfwidth_katakana_letter_u;
			return 1;
		case 0xFF74:
			*normals = halfwidth_katakana_letter_e;
			return 1;
		case 0xFF75:
			*normals = halfwidth_katakana_letter_o;
			return 1;
		case 0xFF76:
			*normals = halfwidth_katakana_letter_ka;
			return 1;
		case 0xFF77:
			*normals = halfwidth_katakana_letter_ki;
			return 1;
		case 0xFF78:
			*normals = halfwidth_katakana_letter_ku;
			return 1;
		case 0xFF79:
			*normals = halfwidth_katakana_letter_ke;
			return 1;
		case 0xFF7A:
			*normals = halfwidth_katakana_letter_ko;
			return 1;
		case 0xFF7B:
			*normals = halfwidth_katakana_letter_sa;
			return 1;
		case 0xFF7C:
			*normals = halfwidth_katakana_letter_si;
			return 1;
		case 0xFF7D:
			*normals = halfwidth_katakana_letter_su;
			return 1;
		case 0xFF7E:
			*normals = halfwidth_katakana_letter_se;
			return 1;
		case 0xFF7F:
			*normals = halfwidth_katakana_letter_so;
			return 1;
		case 0xFF80:
			*normals = halfwidth_katakana_letter_ta;
			return 1;
		case 0xFF81:
			*normals = halfwidth_katakana_letter_ti;
			return 1;
		case 0xFF82:
			*normals = halfwidth_katakana_letter_tu;
			return 1;
		case 0xFF83:
			*normals = halfwidth_katakana_letter_te;
			return 1;
		case 0xFF84:
			*normals = halfwidth_katakana_letter_to;
			return 1;
		case 0xFF85:
			*normals = halfwidth_katakana_letter_na;
			return 1;
		case 0xFF86:
			*normals = halfwidth_katakana_letter_ni;
			return 1;
		case 0xFF87:
			*normals = halfwidth_katakana_letter_nu;
			return 1;
		case 0xFF88:
			*normals = halfwidth_katakana_letter_ne;
			return 1;
		case 0xFF89:
			*normals = halfwidth_katakana_letter_no;
			return 1;
		case 0xFF8A:
			*normals = halfwidth_katakana_letter_ha;
			return 1;
		case 0xFF8B:
			*normals = halfwidth_katakana_letter_hi;
			return 1;
		case 0xFF8C:
			*normals = halfwidth_katakana_letter_hu;
			return 1;
		case 0xFF8D:
			*normals = halfwidth_katakana_letter_he;
			return 1;
		case 0xFF8E:
			*normals = halfwidth_katakana_letter_ho;
			return 1;
		case 0xFF8F:
			*normals = halfwidth_katakana_letter_ma;
			return 1;
		case 0xFF90:
			*normals = halfwidth_katakana_letter_mi;
			return 1;
		case 0xFF91:
			*normals = halfwidth_katakana_letter_mu;
			return 1;
		case 0xFF92:
			*normals = halfwidth_katakana_letter_me;
			return 1;
		case 0xFF93:
			*normals = halfwidth_katakana_letter_mo;
			return 1;
		case 0xFF94:
			*normals = halfwidth_katakana_letter_ya;
			return 1;
		case 0xFF95:
			*normals = halfwidth_katakana_letter_yu;
			return 1;
		case 0xFF96:
			*normals = halfwidth_katakana_letter_yo;
			return 1;
		case 0xFF97:
			*normals = halfwidth_katakana_letter_ra;
			return 1;
		case 0xFF98:
			*normals = halfwidth_katakana_letter_ri;
			return 1;
		case 0xFF99:
			*normals = halfwidth_katakana_letter_ru;
			return 1;
		case 0xFF9A:
			*normals = halfwidth_katakana_letter_re;
			return 1;
		case 0xFF9B:
			*normals = halfwidth_katakana_letter_ro;
			return 1;
		case 0xFF9C:
			*normals = halfwidth_katakana_letter_wa;
			return 1;
		case 0xFF9D:
			*normals = halfwidth_katakana_letter_n;
			return 1;
		case 0xFF9E:
			*normals = halfwidth_katakana_voiced_sound_mark;
			return 1;
		case 0xFF9F:
			*normals = halfwidth_katakana_semi_voiced_sound_mark;
			return 1;
		case 0xFFA0:
			*normals = halfwidth_hangul_filler;
			return 1;
		case 0xFFA1:
			*normals = halfwidth_hangul_letter_kiyeok;
			return 1;
		case 0xFFA2:
			*normals = halfwidth_hangul_letter_ssangkiyeok;
			return 1;
		case 0xFFA3:
			*normals = halfwidth_hangul_letter_kiyeok_sios;
			return 1;
		case 0xFFA4:
			*normals = halfwidth_hangul_letter_nieun;
			return 1;
		case 0xFFA5:
			*normals = halfwidth_hangul_letter_nieun_cieuc;
			return 1;
		case 0xFFA6:
			*normals = halfwidth_hangul_letter_nieun_hieuh;
			return 1;
		case 0xFFA7:
			*normals = halfwidth_hangul_letter_tikeut;
			return 1;
		case 0xFFA8:
			*normals = halfwidth_hangul_letter_ssangtikeut;
			return 1;
		case 0xFFA9:
			*normals = halfwidth_hangul_letter_rieul;
			return 1;
		case 0xFFAA:
			*normals = halfwidth_hangul_letter_rieul_kiyeok;
			return 1;
		case 0xFFAB:
			*normals = halfwidth_hangul_letter_rieul_mieum;
			return 1;
		case 0xFFAC:
			*normals = halfwidth_hangul_letter_rieul_pieup;
			return 1;
		case 0xFFAD:
			*normals = halfwidth_hangul_letter_rieul_sios;
			return 1;
		case 0xFFAE:
			*normals = halfwidth_hangul_letter_rieul_thieuth;
			return 1;
		case 0xFFAF:
			*normals = halfwidth_hangul_letter_rieul_phieuph;
			return 1;
		case 0xFFB0:
			*normals = halfwidth_hangul_letter_rieul_hieuh;
			return 1;
		case 0xFFB1:
			*normals = halfwidth_hangul_letter_mieum;
			return 1;
		case 0xFFB2:
			*normals = halfwidth_hangul_letter_pieup;
			return 1;
		case 0xFFB3:
			*normals = halfwidth_hangul_letter_ssangpieup;
			return 1;
		case 0xFFB4:
			*normals = halfwidth_hangul_letter_pieup_sios;
			return 1;
		case 0xFFB5:
			*normals = halfwidth_hangul_letter_sios;
			return 1;
		case 0xFFB6:
			*normals = halfwidth_hangul_letter_ssangsios;
			return 1;
		case 0xFFB7:
			*normals = halfwidth_hangul_letter_ieung;
			return 1;
		case 0xFFB8:
			*normals = halfwidth_hangul_letter_cieuc;
			return 1;
		case 0xFFB9:
			*normals = halfwidth_hangul_letter_ssangcieuc;
			return 1;
		case 0xFFBA:
			*normals = halfwidth_hangul_letter_chieuch;
			return 1;
		case 0xFFBB:
			*normals = halfwidth_hangul_letter_khieukh;
			return 1;
		case 0xFFBC:
			*normals = halfwidth_hangul_letter_thieuth;
			return 1;
		case 0xFFBD:
			*normals = halfwidth_hangul_letter_phieuph;
			return 1;
		case 0xFFBE:
			*normals = halfwidth_hangul_letter_hieuh;
			return 1;
		case 0xFFC2:
			*normals = halfwidth_hangul_letter_a;
			return 1;
		case 0xFFC3:
			*normals = halfwidth_hangul_letter_ae;
			return 1;
		case 0xFFC4:
			*normals = halfwidth_hangul_letter_ya;
			return 1;
		case 0xFFC5:
			*normals = halfwidth_hangul_letter_yae;
			return 1;
		case 0xFFC6:
			*normals = halfwidth_hangul_letter_eo;
			return 1;
		case 0xFFC7:
			*normals = halfwidth_hangul_letter_e;
			return 1;
		case 0xFFCA:
			*normals = halfwidth_hangul_letter_yeo;
			return 1;
		case 0xFFCB:
			*normals = halfwidth_hangul_letter_ye;
			return 1;
		case 0xFFCC:
			*normals = halfwidth_hangul_letter_o;
			return 1;
		case 0xFFCD:
			*normals = halfwidth_hangul_letter_wa;
			return 1;
		case 0xFFCE:
			*normals = halfwidth_hangul_letter_wae;
			return 1;
		case 0xFFCF:
			*normals = halfwidth_hangul_letter_oe;
			return 1;
		case 0xFFD2:
			*normals = halfwidth_hangul_letter_yo;
			return 1;
		case 0xFFD3:
			*normals = halfwidth_hangul_letter_u;
			return 1;
		case 0xFFD4:
			*normals = halfwidth_hangul_letter_weo;
			return 1;
		case 0xFFD5:
			*normals = halfwidth_hangul_letter_we;
			return 1;
		case 0xFFD6:
			*normals = halfwidth_hangul_letter_wi;
			return 1;
		case 0xFFD7:
			*normals = halfwidth_hangul_letter_yu;
			return 1;
		case 0xFFDA:
			*normals = halfwidth_hangul_letter_eu;
			return 1;
		case 0xFFDB:
			*normals = halfwidth_hangul_letter_yi;
			return 1;
		case 0xFFDC:
			*normals = halfwidth_hangul_letter_i;
			return 1;
		case 0xFFE0:
			*normals = fullwidth_cent_sign;
			return 1;
		case 0xFFE1:
			*normals = fullwidth_pound_sign;
			return 1;
		case 0xFFE2:
			*normals = fullwidth_not_sign;
			return 1;
		case 0xFFE3:
			*normals = fullwidth_macron;
			return 1;
		case 0xFFE4:
			*normals = fullwidth_broken_bar;
			return 1;
		case 0xFFE5:
			*normals = fullwidth_yen_sign;
			return 1;
		case 0xFFE6:
			*normals = fullwidth_won_sign;
			return 1;
		case 0xFFE8:
			*normals = halfwidth_forms_light_vertical;
			return 1;
		case 0xFFE9:
			*normals = halfwidth_leftwards_arrow;
			return 1;
		case 0xFFEA:
			*normals = halfwidth_upwards_arrow;
			return 1;
		case 0xFFEB:
			*normals = halfwidth_rightwards_arrow;
			return 1;
		case 0xFFEC:
			*normals = halfwidth_downwards_arrow;
			return 1;
		case 0xFFED:
			*normals = halfwidth_black_square;
			return 1;
		case 0xFFEE:
			*normals = halfwidth_white_circle;
			return 1;
		case 0x1109A:
			*normals = kaithi_letter_dddha;
			return 2;
		case 0x1109C:
			*normals = kaithi_letter_rha;
			return 2;
		case 0x110AB:
			*normals = kaithi_letter_va;
			return 2;
		case 0x1112E:
			*normals = chakma_vowel_sign_o;
			return 2;
		case 0x1112F:
			*normals = chakma_vowel_sign_au;
			return 2;
		case 0x1134B:
			*normals = grantha_vowel_sign_oo;
			return 2;
		case 0x1134C:
			*normals = grantha_vowel_sign_au;
			return 2;
		case 0x114BB:
			*normals = tirhuta_vowel_sign_ai;
			return 2;
		case 0x114BC:
			*normals = tirhuta_vowel_sign_o;
			return 2;
		case 0x114BE:
			*normals = tirhuta_vowel_sign_au;
			return 2;
		case 0x115BA:
			*normals = siddham_vowel_sign_o;
			return 2;
		case 0x115BB:
			*normals = siddham_vowel_sign_au;
			return 2;
		case 0x11938:
			*normals = dives_akuru_vowel_sign_o;
			return 2;
		case 0x1D15E:
			*normals = musical_symbol_half_note;
			return 2;
		case 0x1D15F:
			*normals = musical_symbol_quarter_note;
			return 2;
		case 0x1D160:
			*normals = musical_symbol_eighth_note;
			return 2;
		case 0x1D161:
			*normals = musical_symbol_sixteenth_note;
			return 2;
		case 0x1D162:
			*normals = musical_symbol_thirty_second_note;
			return 2;
		case 0x1D163:
			*normals = musical_symbol_sixty_fourth_note;
			return 2;
		case 0x1D164:
			*normals = musical_symbol_one_hundred_twenty_eighth_note;
			return 2;
		case 0x1D1BB:
			*normals = musical_symbol_minima;
			return 2;
		case 0x1D1BC:
			*normals = musical_symbol_minima_black;
			return 2;
		case 0x1D1BD:
			*normals = musical_symbol_semiminima_white;
			return 2;
		case 0x1D1BE:
			*normals = musical_symbol_semiminima_black;
			return 2;
		case 0x1D1BF:
			*normals = musical_symbol_fusa_white;
			return 2;
		case 0x1D1C0:
			*normals = musical_symbol_fusa_black;
			return 2;
		case 0x1D400:
			*normals = mathematical_bold_capital_a;
			return 1;
		case 0x1D401:
			*normals = mathematical_bold_capital_b;
			return 1;
		case 0x1D402:
			*normals = mathematical_bold_capital_c;
			return 1;
		case 0x1D403:
			*normals = mathematical_bold_capital_d;
			return 1;
		case 0x1D404:
			*normals = mathematical_bold_capital_e;
			return 1;
		case 0x1D405:
			*normals = mathematical_bold_capital_f;
			return 1;
		case 0x1D406:
			*normals = mathematical_bold_capital_g;
			return 1;
		case 0x1D407:
			*normals = mathematical_bold_capital_h;
			return 1;
		case 0x1D408:
			*normals = mathematical_bold_capital_i;
			return 1;
		case 0x1D409:
			*normals = mathematical_bold_capital_j;
			return 1;
		case 0x1D40A:
			*normals = mathematical_bold_capital_k;
			return 1;
		case 0x1D40B:
			*normals = mathematical_bold_capital_l;
			return 1;
		case 0x1D40C:
			*normals = mathematical_bold_capital_m;
			return 1;
		case 0x1D40D:
			*normals = mathematical_bold_capital_n;
			return 1;
		case 0x1D40E:
			*normals = mathematical_bold_capital_o;
			return 1;
		case 0x1D40F:
			*normals = mathematical_bold_capital_p;
			return 1;
		case 0x1D410:
			*normals = mathematical_bold_capital_q;
			return 1;
		case 0x1D411:
			*normals = mathematical_bold_capital_r;
			return 1;
		case 0x1D412:
			*normals = mathematical_bold_capital_s;
			return 1;
		case 0x1D413:
			*normals = mathematical_bold_capital_t;
			return 1;
		case 0x1D414:
			*normals = mathematical_bold_capital_u;
			return 1;
		case 0x1D415:
			*normals = mathematical_bold_capital_v;
			return 1;
		case 0x1D416:
			*normals = mathematical_bold_capital_w;
			return 1;
		case 0x1D417:
			*normals = mathematical_bold_capital_x;
			return 1;
		case 0x1D418:
			*normals = mathematical_bold_capital_y;
			return 1;
		case 0x1D419:
			*normals = mathematical_bold_capital_z;
			return 1;
		case 0x1D41A:
			*normals = mathematical_bold_small_a;
			return 1;
		case 0x1D41B:
			*normals = mathematical_bold_small_b;
			return 1;
		case 0x1D41C:
			*normals = mathematical_bold_small_c;
			return 1;
		case 0x1D41D:
			*normals = mathematical_bold_small_d;
			return 1;
		case 0x1D41E:
			*normals = mathematical_bold_small_e;
			return 1;
		case 0x1D41F:
			*normals = mathematical_bold_small_f;
			return 1;
		case 0x1D420:
			*normals = mathematical_bold_small_g;
			return 1;
		case 0x1D421:
			*normals = mathematical_bold_small_h;
			return 1;
		case 0x1D422:
			*normals = mathematical_bold_small_i;
			return 1;
		case 0x1D423:
			*normals = mathematical_bold_small_j;
			return 1;
		case 0x1D424:
			*normals = mathematical_bold_small_k;
			return 1;
		case 0x1D425:
			*normals = mathematical_bold_small_l;
			return 1;
		case 0x1D426:
			*normals = mathematical_bold_small_m;
			return 1;
		case 0x1D427:
			*normals = mathematical_bold_small_n;
			return 1;
		case 0x1D428:
			*normals = mathematical_bold_small_o;
			return 1;
		case 0x1D429:
			*normals = mathematical_bold_small_p;
			return 1;
		case 0x1D42A:
			*normals = mathematical_bold_small_q;
			return 1;
		case 0x1D42B:
			*normals = mathematical_bold_small_r;
			return 1;
		case 0x1D42C:
			*normals = mathematical_bold_small_s;
			return 1;
		case 0x1D42D:
			*normals = mathematical_bold_small_t;
			return 1;
		case 0x1D42E:
			*normals = mathematical_bold_small_u;
			return 1;
		case 0x1D42F:
			*normals = mathematical_bold_small_v;
			return 1;
		case 0x1D430:
			*normals = mathematical_bold_small_w;
			return 1;
		case 0x1D431:
			*normals = mathematical_bold_small_x;
			return 1;
		case 0x1D432:
			*normals = mathematical_bold_small_y;
			return 1;
		case 0x1D433:
			*normals = mathematical_bold_small_z;
			return 1;
		case 0x1D434:
			*normals = mathematical_italic_capital_a;
			return 1;
		case 0x1D435:
			*normals = mathematical_italic_capital_b;
			return 1;
		case 0x1D436:
			*normals = mathematical_italic_capital_c;
			return 1;
		case 0x1D437:
			*normals = mathematical_italic_capital_d;
			return 1;
		case 0x1D438:
			*normals = mathematical_italic_capital_e;
			return 1;
		case 0x1D439:
			*normals = mathematical_italic_capital_f;
			return 1;
		case 0x1D43A:
			*normals = mathematical_italic_capital_g;
			return 1;
		case 0x1D43B:
			*normals = mathematical_italic_capital_h;
			return 1;
		case 0x1D43C:
			*normals = mathematical_italic_capital_i;
			return 1;
		case 0x1D43D:
			*normals = mathematical_italic_capital_j;
			return 1;
		case 0x1D43E:
			*normals = mathematical_italic_capital_k;
			return 1;
		case 0x1D43F:
			*normals = mathematical_italic_capital_l;
			return 1;
		case 0x1D440:
			*normals = mathematical_italic_capital_m;
			return 1;
		case 0x1D441:
			*normals = mathematical_italic_capital_n;
			return 1;
		case 0x1D442:
			*normals = mathematical_italic_capital_o;
			return 1;
		case 0x1D443:
			*normals = mathematical_italic_capital_p;
			return 1;
		case 0x1D444:
			*normals = mathematical_italic_capital_q;
			return 1;
		case 0x1D445:
			*normals = mathematical_italic_capital_r;
			return 1;
		case 0x1D446:
			*normals = mathematical_italic_capital_s;
			return 1;
		case 0x1D447:
			*normals = mathematical_italic_capital_t;
			return 1;
		case 0x1D448:
			*normals = mathematical_italic_capital_u;
			return 1;
		case 0x1D449:
			*normals = mathematical_italic_capital_v;
			return 1;
		case 0x1D44A:
			*normals = mathematical_italic_capital_w;
			return 1;
		case 0x1D44B:
			*normals = mathematical_italic_capital_x;
			return 1;
		case 0x1D44C:
			*normals = mathematical_italic_capital_y;
			return 1;
		case 0x1D44D:
			*normals = mathematical_italic_capital_z;
			return 1;
		case 0x1D44E:
			*normals = mathematical_italic_small_a;
			return 1;
		case 0x1D44F:
			*normals = mathematical_italic_small_b;
			return 1;
		case 0x1D450:
			*normals = mathematical_italic_small_c;
			return 1;
		case 0x1D451:
			*normals = mathematical_italic_small_d;
			return 1;
		case 0x1D452:
			*normals = mathematical_italic_small_e;
			return 1;
		case 0x1D453:
			*normals = mathematical_italic_small_f;
			return 1;
		case 0x1D454:
			*normals = mathematical_italic_small_g;
			return 1;
		case 0x1D456:
			*normals = mathematical_italic_small_i;
			return 1;
		case 0x1D457:
			*normals = mathematical_italic_small_j;
			return 1;
		case 0x1D458:
			*normals = mathematical_italic_small_k;
			return 1;
		case 0x1D459:
			*normals = mathematical_italic_small_l;
			return 1;
		case 0x1D45A:
			*normals = mathematical_italic_small_m;
			return 1;
		case 0x1D45B:
			*normals = mathematical_italic_small_n;
			return 1;
		case 0x1D45C:
			*normals = mathematical_italic_small_o;
			return 1;
		case 0x1D45D:
			*normals = mathematical_italic_small_p;
			return 1;
		case 0x1D45E:
			*normals = mathematical_italic_small_q;
			return 1;
		case 0x1D45F:
			*normals = mathematical_italic_small_r;
			return 1;
		case 0x1D460:
			*normals = mathematical_italic_small_s;
			return 1;
		case 0x1D461:
			*normals = mathematical_italic_small_t;
			return 1;
		case 0x1D462:
			*normals = mathematical_italic_small_u;
			return 1;
		case 0x1D463:
			*normals = mathematical_italic_small_v;
			return 1;
		case 0x1D464:
			*normals = mathematical_italic_small_w;
			return 1;
		case 0x1D465:
			*normals = mathematical_italic_small_x;
			return 1;
		case 0x1D466:
			*normals = mathematical_italic_small_y;
			return 1;
		case 0x1D467:
			*normals = mathematical_italic_small_z;
			return 1;
		case 0x1D468:
			*normals = mathematical_bold_italic_capital_a;
			return 1;
		case 0x1D469:
			*normals = mathematical_bold_italic_capital_b;
			return 1;
		case 0x1D46A:
			*normals = mathematical_bold_italic_capital_c;
			return 1;
		case 0x1D46B:
			*normals = mathematical_bold_italic_capital_d;
			return 1;
		case 0x1D46C:
			*normals = mathematical_bold_italic_capital_e;
			return 1;
		case 0x1D46D:
			*normals = mathematical_bold_italic_capital_f;
			return 1;
		case 0x1D46E:
			*normals = mathematical_bold_italic_capital_g;
			return 1;
		case 0x1D46F:
			*normals = mathematical_bold_italic_capital_h;
			return 1;
		case 0x1D470:
			*normals = mathematical_bold_italic_capital_i;
			return 1;
		case 0x1D471:
			*normals = mathematical_bold_italic_capital_j;
			return 1;
		case 0x1D472:
			*normals = mathematical_bold_italic_capital_k;
			return 1;
		case 0x1D473:
			*normals = mathematical_bold_italic_capital_l;
			return 1;
		case 0x1D474:
			*normals = mathematical_bold_italic_capital_m;
			return 1;
		case 0x1D475:
			*normals = mathematical_bold_italic_capital_n;
			return 1;
		case 0x1D476:
			*normals = mathematical_bold_italic_capital_o;
			return 1;
		case 0x1D477:
			*normals = mathematical_bold_italic_capital_p;
			return 1;
		case 0x1D478:
			*normals = mathematical_bold_italic_capital_q;
			return 1;
		case 0x1D479:
			*normals = mathematical_bold_italic_capital_r;
			return 1;
		case 0x1D47A:
			*normals = mathematical_bold_italic_capital_s;
			return 1;
		case 0x1D47B:
			*normals = mathematical_bold_italic_capital_t;
			return 1;
		case 0x1D47C:
			*normals = mathematical_bold_italic_capital_u;
			return 1;
		case 0x1D47D:
			*normals = mathematical_bold_italic_capital_v;
			return 1;
		case 0x1D47E:
			*normals = mathematical_bold_italic_capital_w;
			return 1;
		case 0x1D47F:
			*normals = mathematical_bold_italic_capital_x;
			return 1;
		case 0x1D480:
			*normals = mathematical_bold_italic_capital_y;
			return 1;
		case 0x1D481:
			*normals = mathematical_bold_italic_capital_z;
			return 1;
		case 0x1D482:
			*normals = mathematical_bold_italic_small_a;
			return 1;
		case 0x1D483:
			*normals = mathematical_bold_italic_small_b;
			return 1;
		case 0x1D484:
			*normals = mathematical_bold_italic_small_c;
			return 1;
		case 0x1D485:
			*normals = mathematical_bold_italic_small_d;
			return 1;
		case 0x1D486:
			*normals = mathematical_bold_italic_small_e;
			return 1;
		case 0x1D487:
			*normals = mathematical_bold_italic_small_f;
			return 1;
		case 0x1D488:
			*normals = mathematical_bold_italic_small_g;
			return 1;
		case 0x1D489:
			*normals = mathematical_bold_italic_small_h;
			return 1;
		case 0x1D48A:
			*normals = mathematical_bold_italic_small_i;
			return 1;
		case 0x1D48B:
			*normals = mathematical_bold_italic_small_j;
			return 1;
		case 0x1D48C:
			*normals = mathematical_bold_italic_small_k;
			return 1;
		case 0x1D48D:
			*normals = mathematical_bold_italic_small_l;
			return 1;
		case 0x1D48E:
			*normals = mathematical_bold_italic_small_m;
			return 1;
		case 0x1D48F:
			*normals = mathematical_bold_italic_small_n;
			return 1;
		case 0x1D490:
			*normals = mathematical_bold_italic_small_o;
			return 1;
		case 0x1D491:
			*normals = mathematical_bold_italic_small_p;
			return 1;
		case 0x1D492:
			*normals = mathematical_bold_italic_small_q;
			return 1;
		case 0x1D493:
			*normals = mathematical_bold_italic_small_r;
			return 1;
		case 0x1D494:
			*normals = mathematical_bold_italic_small_s;
			return 1;
		case 0x1D495:
			*normals = mathematical_bold_italic_small_t;
			return 1;
		case 0x1D496:
			*normals = mathematical_bold_italic_small_u;
			return 1;
		case 0x1D497:
			*normals = mathematical_bold_italic_small_v;
			return 1;
		case 0x1D498:
			*normals = mathematical_bold_italic_small_w;
			return 1;
		case 0x1D499:
			*normals = mathematical_bold_italic_small_x;
			return 1;
		case 0x1D49A:
			*normals = mathematical_bold_italic_small_y;
			return 1;
		case 0x1D49B:
			*normals = mathematical_bold_italic_small_z;
			return 1;
		case 0x1D49C:
			*normals = mathematical_script_capital_a;
			return 1;
		case 0x1D49E:
			*normals = mathematical_script_capital_c;
			return 1;
		case 0x1D49F:
			*normals = mathematical_script_capital_d;
			return 1;
		case 0x1D4A2:
			*normals = mathematical_script_capital_g;
			return 1;
		case 0x1D4A5:
			*normals = mathematical_script_capital_j;
			return 1;
		case 0x1D4A6:
			*normals = mathematical_script_capital_k;
			return 1;
		case 0x1D4A9:
			*normals = mathematical_script_capital_n;
			return 1;
		case 0x1D4AA:
			*normals = mathematical_script_capital_o;
			return 1;
		case 0x1D4AB:
			*normals = mathematical_script_capital_p;
			return 1;
		case 0x1D4AC:
			*normals = mathematical_script_capital_q;
			return 1;
		case 0x1D4AE:
			*normals = mathematical_script_capital_s;
			return 1;
		case 0x1D4AF:
			*normals = mathematical_script_capital_t;
			return 1;
		case 0x1D4B0:
			*normals = mathematical_script_capital_u;
			return 1;
		case 0x1D4B1:
			*normals = mathematical_script_capital_v;
			return 1;
		case 0x1D4B2:
			*normals = mathematical_script_capital_w;
			return 1;
		case 0x1D4B3:
			*normals = mathematical_script_capital_x;
			return 1;
		case 0x1D4B4:
			*normals = mathematical_script_capital_y;
			return 1;
		case 0x1D4B5:
			*normals = mathematical_script_capital_z;
			return 1;
		case 0x1D4B6:
			*normals = mathematical_script_small_a;
			return 1;
		case 0x1D4B7:
			*normals = mathematical_script_small_b;
			return 1;
		case 0x1D4B8:
			*normals = mathematical_script_small_c;
			return 1;
		case 0x1D4B9:
			*normals = mathematical_script_small_d;
			return 1;
		case 0x1D4BB:
			*normals = mathematical_script_small_f;
			return 1;
		case 0x1D4BD:
			*normals = mathematical_script_small_h;
			return 1;
		case 0x1D4BE:
			*normals = mathematical_script_small_i;
			return 1;
		case 0x1D4BF:
			*normals = mathematical_script_small_j;
			return 1;
		case 0x1D4C0:
			*normals = mathematical_script_small_k;
			return 1;
		case 0x1D4C1:
			*normals = mathematical_script_small_l;
			return 1;
		case 0x1D4C2:
			*normals = mathematical_script_small_m;
			return 1;
		case 0x1D4C3:
			*normals = mathematical_script_small_n;
			return 1;
		case 0x1D4C5:
			*normals = mathematical_script_small_p;
			return 1;
		case 0x1D4C6:
			*normals = mathematical_script_small_q;
			return 1;
		case 0x1D4C7:
			*normals = mathematical_script_small_r;
			return 1;
		case 0x1D4C8:
			*normals = mathematical_script_small_s;
			return 1;
		case 0x1D4C9:
			*normals = mathematical_script_small_t;
			return 1;
		case 0x1D4CA:
			*normals = mathematical_script_small_u;
			return 1;
		case 0x1D4CB:
			*normals = mathematical_script_small_v;
			return 1;
		case 0x1D4CC:
			*normals = mathematical_script_small_w;
			return 1;
		case 0x1D4CD:
			*normals = mathematical_script_small_x;
			return 1;
		case 0x1D4CE:
			*normals = mathematical_script_small_y;
			return 1;
		case 0x1D4CF:
			*normals = mathematical_script_small_z;
			return 1;
		case 0x1D4D0:
			*normals = mathematical_bold_script_capital_a;
			return 1;
		case 0x1D4D1:
			*normals = mathematical_bold_script_capital_b;
			return 1;
		case 0x1D4D2:
			*normals = mathematical_bold_script_capital_c;
			return 1;
		case 0x1D4D3:
			*normals = mathematical_bold_script_capital_d;
			return 1;
		case 0x1D4D4:
			*normals = mathematical_bold_script_capital_e;
			return 1;
		case 0x1D4D5:
			*normals = mathematical_bold_script_capital_f;
			return 1;
		case 0x1D4D6:
			*normals = mathematical_bold_script_capital_g;
			return 1;
		case 0x1D4D7:
			*normals = mathematical_bold_script_capital_h;
			return 1;
		case 0x1D4D8:
			*normals = mathematical_bold_script_capital_i;
			return 1;
		case 0x1D4D9:
			*normals = mathematical_bold_script_capital_j;
			return 1;
		case 0x1D4DA:
			*normals = mathematical_bold_script_capital_k;
			return 1;
		case 0x1D4DB:
			*normals = mathematical_bold_script_capital_l;
			return 1;
		case 0x1D4DC:
			*normals = mathematical_bold_script_capital_m;
			return 1;
		case 0x1D4DD:
			*normals = mathematical_bold_script_capital_n;
			return 1;
		case 0x1D4DE:
			*normals = mathematical_bold_script_capital_o;
			return 1;
		case 0x1D4DF:
			*normals = mathematical_bold_script_capital_p;
			return 1;
		case 0x1D4E0:
			*normals = mathematical_bold_script_capital_q;
			return 1;
		case 0x1D4E1:
			*normals = mathematical_bold_script_capital_r;
			return 1;
		case 0x1D4E2:
			*normals = mathematical_bold_script_capital_s;
			return 1;
		case 0x1D4E3:
			*normals = mathematical_bold_script_capital_t;
			return 1;
		case 0x1D4E4:
			*normals = mathematical_bold_script_capital_u;
			return 1;
		case 0x1D4E5:
			*normals = mathematical_bold_script_capital_v;
			return 1;
		case 0x1D4E6:
			*normals = mathematical_bold_script_capital_w;
			return 1;
		case 0x1D4E7:
			*normals = mathematical_bold_script_capital_x;
			return 1;
		case 0x1D4E8:
			*normals = mathematical_bold_script_capital_y;
			return 1;
		case 0x1D4E9:
			*normals = mathematical_bold_script_capital_z;
			return 1;
		case 0x1D4EA:
			*normals = mathematical_bold_script_small_a;
			return 1;
		case 0x1D4EB:
			*normals = mathematical_bold_script_small_b;
			return 1;
		case 0x1D4EC:
			*normals = mathematical_bold_script_small_c;
			return 1;
		case 0x1D4ED:
			*normals = mathematical_bold_script_small_d;
			return 1;
		case 0x1D4EE:
			*normals = mathematical_bold_script_small_e;
			return 1;
		case 0x1D4EF:
			*normals = mathematical_bold_script_small_f;
			return 1;
		case 0x1D4F0:
			*normals = mathematical_bold_script_small_g;
			return 1;
		case 0x1D4F1:
			*normals = mathematical_bold_script_small_h;
			return 1;
		case 0x1D4F2:
			*normals = mathematical_bold_script_small_i;
			return 1;
		case 0x1D4F3:
			*normals = mathematical_bold_script_small_j;
			return 1;
		case 0x1D4F4:
			*normals = mathematical_bold_script_small_k;
			return 1;
		case 0x1D4F5:
			*normals = mathematical_bold_script_small_l;
			return 1;
		case 0x1D4F6:
			*normals = mathematical_bold_script_small_m;
			return 1;
		case 0x1D4F7:
			*normals = mathematical_bold_script_small_n;
			return 1;
		case 0x1D4F8:
			*normals = mathematical_bold_script_small_o;
			return 1;
		case 0x1D4F9:
			*normals = mathematical_bold_script_small_p;
			return 1;
		case 0x1D4FA:
			*normals = mathematical_bold_script_small_q;
			return 1;
		case 0x1D4FB:
			*normals = mathematical_bold_script_small_r;
			return 1;
		case 0x1D4FC:
			*normals = mathematical_bold_script_small_s;
			return 1;
		case 0x1D4FD:
			*normals = mathematical_bold_script_small_t;
			return 1;
		case 0x1D4FE:
			*normals = mathematical_bold_script_small_u;
			return 1;
		case 0x1D4FF:
			*normals = mathematical_bold_script_small_v;
			return 1;
		case 0x1D500:
			*normals = mathematical_bold_script_small_w;
			return 1;
		case 0x1D501:
			*normals = mathematical_bold_script_small_x;
			return 1;
		case 0x1D502:
			*normals = mathematical_bold_script_small_y;
			return 1;
		case 0x1D503:
			*normals = mathematical_bold_script_small_z;
			return 1;
		case 0x1D504:
			*normals = mathematical_fraktur_capital_a;
			return 1;
		case 0x1D505:
			*normals = mathematical_fraktur_capital_b;
			return 1;
		case 0x1D507:
			*normals = mathematical_fraktur_capital_d;
			return 1;
		case 0x1D508:
			*normals = mathematical_fraktur_capital_e;
			return 1;
		case 0x1D509:
			*normals = mathematical_fraktur_capital_f;
			return 1;
		case 0x1D50A:
			*normals = mathematical_fraktur_capital_g;
			return 1;
		case 0x1D50D:
			*normals = mathematical_fraktur_capital_j;
			return 1;
		case 0x1D50E:
			*normals = mathematical_fraktur_capital_k;
			return 1;
		case 0x1D50F:
			*normals = mathematical_fraktur_capital_l;
			return 1;
		case 0x1D510:
			*normals = mathematical_fraktur_capital_m;
			return 1;
		case 0x1D511:
			*normals = mathematical_fraktur_capital_n;
			return 1;
		case 0x1D512:
			*normals = mathematical_fraktur_capital_o;
			return 1;
		case 0x1D513:
			*normals = mathematical_fraktur_capital_p;
			return 1;
		case 0x1D514:
			*normals = mathematical_fraktur_capital_q;
			return 1;
		case 0x1D516:
			*normals = mathematical_fraktur_capital_s;
			return 1;
		case 0x1D517:
			*normals = mathematical_fraktur_capital_t;
			return 1;
		case 0x1D518:
			*normals = mathematical_fraktur_capital_u;
			return 1;
		case 0x1D519:
			*normals = mathematical_fraktur_capital_v;
			return 1;
		case 0x1D51A:
			*normals = mathematical_fraktur_capital_w;
			return 1;
		case 0x1D51B:
			*normals = mathematical_fraktur_capital_x;
			return 1;
		case 0x1D51C:
			*normals = mathematical_fraktur_capital_y;
			return 1;
		case 0x1D51E:
			*normals = mathematical_fraktur_small_a;
			return 1;
		case 0x1D51F:
			*normals = mathematical_fraktur_small_b;
			return 1;
		case 0x1D520:
			*normals = mathematical_fraktur_small_c;
			return 1;
		case 0x1D521:
			*normals = mathematical_fraktur_small_d;
			return 1;
		case 0x1D522:
			*normals = mathematical_fraktur_small_e;
			return 1;
		case 0x1D523:
			*normals = mathematical_fraktur_small_f;
			return 1;
		case 0x1D524:
			*normals = mathematical_fraktur_small_g;
			return 1;
		case 0x1D525:
			*normals = mathematical_fraktur_small_h;
			return 1;
		case 0x1D526:
			*normals = mathematical_fraktur_small_i;
			return 1;
		case 0x1D527:
			*normals = mathematical_fraktur_small_j;
			return 1;
		case 0x1D528:
			*normals = mathematical_fraktur_small_k;
			return 1;
		case 0x1D529:
			*normals = mathematical_fraktur_small_l;
			return 1;
		case 0x1D52A:
			*normals = mathematical_fraktur_small_m;
			return 1;
		case 0x1D52B:
			*normals = mathematical_fraktur_small_n;
			return 1;
		case 0x1D52C:
			*normals = mathematical_fraktur_small_o;
			return 1;
		case 0x1D52D:
			*normals = mathematical_fraktur_small_p;
			return 1;
		case 0x1D52E:
			*normals = mathematical_fraktur_small_q;
			return 1;
		case 0x1D52F:
			*normals = mathematical_fraktur_small_r;
			return 1;
		case 0x1D530:
			*normals = mathematical_fraktur_small_s;
			return 1;
		case 0x1D531:
			*normals = mathematical_fraktur_small_t;
			return 1;
		case 0x1D532:
			*normals = mathematical_fraktur_small_u;
			return 1;
		case 0x1D533:
			*normals = mathematical_fraktur_small_v;
			return 1;
		case 0x1D534:
			*normals = mathematical_fraktur_small_w;
			return 1;
		case 0x1D535:
			*normals = mathematical_fraktur_small_x;
			return 1;
		case 0x1D536:
			*normals = mathematical_fraktur_small_y;
			return 1;
		case 0x1D537:
			*normals = mathematical_fraktur_small_z;
			return 1;
		case 0x1D538:
			*normals = mathematical_double_struck_capital_a;
			return 1;
		case 0x1D539:
			*normals = mathematical_double_struck_capital_b;
			return 1;
		case 0x1D53B:
			*normals = mathematical_double_struck_capital_d;
			return 1;
		case 0x1D53C:
			*normals = mathematical_double_struck_capital_e;
			return 1;
		case 0x1D53D:
			*normals = mathematical_double_struck_capital_f;
			return 1;
		case 0x1D53E:
			*normals = mathematical_double_struck_capital_g;
			return 1;
		case 0x1D540:
			*normals = mathematical_double_struck_capital_i;
			return 1;
		case 0x1D541:
			*normals = mathematical_double_struck_capital_j;
			return 1;
		case 0x1D542:
			*normals = mathematical_double_struck_capital_k;
			return 1;
		case 0x1D543:
			*normals = mathematical_double_struck_capital_l;
			return 1;
		case 0x1D544:
			*normals = mathematical_double_struck_capital_m;
			return 1;
		case 0x1D546:
			*normals = mathematical_double_struck_capital_o;
			return 1;
		case 0x1D54A:
			*normals = mathematical_double_struck_capital_s;
			return 1;
		case 0x1D54B:
			*normals = mathematical_double_struck_capital_t;
			return 1;
		case 0x1D54C:
			*normals = mathematical_double_struck_capital_u;
			return 1;
		case 0x1D54D:
			*normals = mathematical_double_struck_capital_v;
			return 1;
		case 0x1D54E:
			*normals = mathematical_double_struck_capital_w;
			return 1;
		case 0x1D54F:
			*normals = mathematical_double_struck_capital_x;
			return 1;
		case 0x1D550:
			*normals = mathematical_double_struck_capital_y;
			return 1;
		case 0x1D552:
			*normals = mathematical_double_struck_small_a;
			return 1;
		case 0x1D553:
			*normals = mathematical_double_struck_small_b;
			return 1;
		case 0x1D554:
			*normals = mathematical_double_struck_small_c;
			return 1;
		case 0x1D555:
			*normals = mathematical_double_struck_small_d;
			return 1;
		case 0x1D556:
			*normals = mathematical_double_struck_small_e;
			return 1;
		case 0x1D557:
			*normals = mathematical_double_struck_small_f;
			return 1;
		case 0x1D558:
			*normals = mathematical_double_struck_small_g;
			return 1;
		case 0x1D559:
			*normals = mathematical_double_struck_small_h;
			return 1;
		case 0x1D55A:
			*normals = mathematical_double_struck_small_i;
			return 1;
		case 0x1D55B:
			*normals = mathematical_double_struck_small_j;
			return 1;
		case 0x1D55C:
			*normals = mathematical_double_struck_small_k;
			return 1;
		case 0x1D55D:
			*normals = mathematical_double_struck_small_l;
			return 1;
		case 0x1D55E:
			*normals = mathematical_double_struck_small_m;
			return 1;
		case 0x1D55F:
			*normals = mathematical_double_struck_small_n;
			return 1;
		case 0x1D560:
			*normals = mathematical_double_struck_small_o;
			return 1;
		case 0x1D561:
			*normals = mathematical_double_struck_small_p;
			return 1;
		case 0x1D562:
			*normals = mathematical_double_struck_small_q;
			return 1;
		case 0x1D563:
			*normals = mathematical_double_struck_small_r;
			return 1;
		case 0x1D564:
			*normals = mathematical_double_struck_small_s;
			return 1;
		case 0x1D565:
			*normals = mathematical_double_struck_small_t;
			return 1;
		case 0x1D566:
			*normals = mathematical_double_struck_small_u;
			return 1;
		case 0x1D567:
			*normals = mathematical_double_struck_small_v;
			return 1;
		case 0x1D568:
			*normals = mathematical_double_struck_small_w;
			return 1;
		case 0x1D569:
			*normals = mathematical_double_struck_small_x;
			return 1;
		case 0x1D56A:
			*normals = mathematical_double_struck_small_y;
			return 1;
		case 0x1D56B:
			*normals = mathematical_double_struck_small_z;
			return 1;
		case 0x1D56C:
			*normals = mathematical_bold_fraktur_capital_a;
			return 1;
		case 0x1D56D:
			*normals = mathematical_bold_fraktur_capital_b;
			return 1;
		case 0x1D56E:
			*normals = mathematical_bold_fraktur_capital_c;
			return 1;
		case 0x1D56F:
			*normals = mathematical_bold_fraktur_capital_d;
			return 1;
		case 0x1D570:
			*normals = mathematical_bold_fraktur_capital_e;
			return 1;
		case 0x1D571:
			*normals = mathematical_bold_fraktur_capital_f;
			return 1;
		case 0x1D572:
			*normals = mathematical_bold_fraktur_capital_g;
			return 1;
		case 0x1D573:
			*normals = mathematical_bold_fraktur_capital_h;
			return 1;
		case 0x1D574:
			*normals = mathematical_bold_fraktur_capital_i;
			return 1;
		case 0x1D575:
			*normals = mathematical_bold_fraktur_capital_j;
			return 1;
		case 0x1D576:
			*normals = mathematical_bold_fraktur_capital_k;
			return 1;
		case 0x1D577:
			*normals = mathematical_bold_fraktur_capital_l;
			return 1;
		case 0x1D578:
			*normals = mathematical_bold_fraktur_capital_m;
			return 1;
		case 0x1D579:
			*normals = mathematical_bold_fraktur_capital_n;
			return 1;
		case 0x1D57A:
			*normals = mathematical_bold_fraktur_capital_o;
			return 1;
		case 0x1D57B:
			*normals = mathematical_bold_fraktur_capital_p;
			return 1;
		case 0x1D57C:
			*normals = mathematical_bold_fraktur_capital_q;
			return 1;
		case 0x1D57D:
			*normals = mathematical_bold_fraktur_capital_r;
			return 1;
		case 0x1D57E:
			*normals = mathematical_bold_fraktur_capital_s;
			return 1;
		case 0x1D57F:
			*normals = mathematical_bold_fraktur_capital_t;
			return 1;
		case 0x1D580:
			*normals = mathematical_bold_fraktur_capital_u;
			return 1;
		case 0x1D581:
			*normals = mathematical_bold_fraktur_capital_v;
			return 1;
		case 0x1D582:
			*normals = mathematical_bold_fraktur_capital_w;
			return 1;
		case 0x1D583:
			*normals = mathematical_bold_fraktur_capital_x;
			return 1;
		case 0x1D584:
			*normals = mathematical_bold_fraktur_capital_y;
			return 1;
		case 0x1D585:
			*normals = mathematical_bold_fraktur_capital_z;
			return 1;
		case 0x1D586:
			*normals = mathematical_bold_fraktur_small_a;
			return 1;
		case 0x1D587:
			*normals = mathematical_bold_fraktur_small_b;
			return 1;
		case 0x1D588:
			*normals = mathematical_bold_fraktur_small_c;
			return 1;
		case 0x1D589:
			*normals = mathematical_bold_fraktur_small_d;
			return 1;
		case 0x1D58A:
			*normals = mathematical_bold_fraktur_small_e;
			return 1;
		case 0x1D58B:
			*normals = mathematical_bold_fraktur_small_f;
			return 1;
		case 0x1D58C:
			*normals = mathematical_bold_fraktur_small_g;
			return 1;
		case 0x1D58D:
			*normals = mathematical_bold_fraktur_small_h;
			return 1;
		case 0x1D58E:
			*normals = mathematical_bold_fraktur_small_i;
			return 1;
		case 0x1D58F:
			*normals = mathematical_bold_fraktur_small_j;
			return 1;
		case 0x1D590:
			*normals = mathematical_bold_fraktur_small_k;
			return 1;
		case 0x1D591:
			*normals = mathematical_bold_fraktur_small_l;
			return 1;
		case 0x1D592:
			*normals = mathematical_bold_fraktur_small_m;
			return 1;
		case 0x1D593:
			*normals = mathematical_bold_fraktur_small_n;
			return 1;
		case 0x1D594:
			*normals = mathematical_bold_fraktur_small_o;
			return 1;
		case 0x1D595:
			*normals = mathematical_bold_fraktur_small_p;
			return 1;
		case 0x1D596:
			*normals = mathematical_bold_fraktur_small_q;
			return 1;
		case 0x1D597:
			*normals = mathematical_bold_fraktur_small_r;
			return 1;
		case 0x1D598:
			*normals = mathematical_bold_fraktur_small_s;
			return 1;
		case 0x1D599:
			*normals = mathematical_bold_fraktur_small_t;
			return 1;
		case 0x1D59A:
			*normals = mathematical_bold_fraktur_small_u;
			return 1;
		case 0x1D59B:
			*normals = mathematical_bold_fraktur_small_v;
			return 1;
		case 0x1D59C:
			*normals = mathematical_bold_fraktur_small_w;
			return 1;
		case 0x1D59D:
			*normals = mathematical_bold_fraktur_small_x;
			return 1;
		case 0x1D59E:
			*normals = mathematical_bold_fraktur_small_y;
			return 1;
		case 0x1D59F:
			*normals = mathematical_bold_fraktur_small_z;
			return 1;
		case 0x1D5A0:
			*normals = mathematical_sans_serif_capital_a;
			return 1;
		case 0x1D5A1:
			*normals = mathematical_sans_serif_capital_b;
			return 1;
		case 0x1D5A2:
			*normals = mathematical_sans_serif_capital_c;
			return 1;
		case 0x1D5A3:
			*normals = mathematical_sans_serif_capital_d;
			return 1;
		case 0x1D5A4:
			*normals = mathematical_sans_serif_capital_e;
			return 1;
		case 0x1D5A5:
			*normals = mathematical_sans_serif_capital_f;
			return 1;
		case 0x1D5A6:
			*normals = mathematical_sans_serif_capital_g;
			return 1;
		case 0x1D5A7:
			*normals = mathematical_sans_serif_capital_h;
			return 1;
		case 0x1D5A8:
			*normals = mathematical_sans_serif_capital_i;
			return 1;
		case 0x1D5A9:
			*normals = mathematical_sans_serif_capital_j;
			return 1;
		case 0x1D5AA:
			*normals = mathematical_sans_serif_capital_k;
			return 1;
		case 0x1D5AB:
			*normals = mathematical_sans_serif_capital_l;
			return 1;
		case 0x1D5AC:
			*normals = mathematical_sans_serif_capital_m;
			return 1;
		case 0x1D5AD:
			*normals = mathematical_sans_serif_capital_n;
			return 1;
		case 0x1D5AE:
			*normals = mathematical_sans_serif_capital_o;
			return 1;
		case 0x1D5AF:
			*normals = mathematical_sans_serif_capital_p;
			return 1;
		case 0x1D5B0:
			*normals = mathematical_sans_serif_capital_q;
			return 1;
		case 0x1D5B1:
			*normals = mathematical_sans_serif_capital_r;
			return 1;
		case 0x1D5B2:
			*normals = mathematical_sans_serif_capital_s;
			return 1;
		case 0x1D5B3:
			*normals = mathematical_sans_serif_capital_t;
			return 1;
		case 0x1D5B4:
			*normals = mathematical_sans_serif_capital_u;
			return 1;
		case 0x1D5B5:
			*normals = mathematical_sans_serif_capital_v;
			return 1;
		case 0x1D5B6:
			*normals = mathematical_sans_serif_capital_w;
			return 1;
		case 0x1D5B7:
			*normals = mathematical_sans_serif_capital_x;
			return 1;
		case 0x1D5B8:
			*normals = mathematical_sans_serif_capital_y;
			return 1;
		case 0x1D5B9:
			*normals = mathematical_sans_serif_capital_z;
			return 1;
		case 0x1D5BA:
			*normals = mathematical_sans_serif_small_a;
			return 1;
		case 0x1D5BB:
			*normals = mathematical_sans_serif_small_b;
			return 1;
		case 0x1D5BC:
			*normals = mathematical_sans_serif_small_c;
			return 1;
		case 0x1D5BD:
			*normals = mathematical_sans_serif_small_d;
			return 1;
		case 0x1D5BE:
			*normals = mathematical_sans_serif_small_e;
			return 1;
		case 0x1D5BF:
			*normals = mathematical_sans_serif_small_f;
			return 1;
		case 0x1D5C0:
			*normals = mathematical_sans_serif_small_g;
			return 1;
		case 0x1D5C1:
			*normals = mathematical_sans_serif_small_h;
			return 1;
		case 0x1D5C2:
			*normals = mathematical_sans_serif_small_i;
			return 1;
		case 0x1D5C3:
			*normals = mathematical_sans_serif_small_j;
			return 1;
		case 0x1D5C4:
			*normals = mathematical_sans_serif_small_k;
			return 1;
		case 0x1D5C5:
			*normals = mathematical_sans_serif_small_l;
			return 1;
		case 0x1D5C6:
			*normals = mathematical_sans_serif_small_m;
			return 1;
		case 0x1D5C7:
			*normals = mathematical_sans_serif_small_n;
			return 1;
		case 0x1D5C8:
			*normals = mathematical_sans_serif_small_o;
			return 1;
		case 0x1D5C9:
			*normals = mathematical_sans_serif_small_p;
			return 1;
		case 0x1D5CA:
			*normals = mathematical_sans_serif_small_q;
			return 1;
		case 0x1D5CB:
			*normals = mathematical_sans_serif_small_r;
			return 1;
		case 0x1D5CC:
			*normals = mathematical_sans_serif_small_s;
			return 1;
		case 0x1D5CD:
			*normals = mathematical_sans_serif_small_t;
			return 1;
		case 0x1D5CE:
			*normals = mathematical_sans_serif_small_u;
			return 1;
		case 0x1D5CF:
			*normals = mathematical_sans_serif_small_v;
			return 1;
		case 0x1D5D0:
			*normals = mathematical_sans_serif_small_w;
			return 1;
		case 0x1D5D1:
			*normals = mathematical_sans_serif_small_x;
			return 1;
		case 0x1D5D2:
			*normals = mathematical_sans_serif_small_y;
			return 1;
		case 0x1D5D3:
			*normals = mathematical_sans_serif_small_z;
			return 1;
		case 0x1D5D4:
			*normals = mathematical_sans_serif_bold_capital_a;
			return 1;
		case 0x1D5D5:
			*normals = mathematical_sans_serif_bold_capital_b;
			return 1;
		case 0x1D5D6:
			*normals = mathematical_sans_serif_bold_capital_c;
			return 1;
		case 0x1D5D7:
			*normals = mathematical_sans_serif_bold_capital_d;
			return 1;
		case 0x1D5D8:
			*normals = mathematical_sans_serif_bold_capital_e;
			return 1;
		case 0x1D5D9:
			*normals = mathematical_sans_serif_bold_capital_f;
			return 1;
		case 0x1D5DA:
			*normals = mathematical_sans_serif_bold_capital_g;
			return 1;
		case 0x1D5DB:
			*normals = mathematical_sans_serif_bold_capital_h;
			return 1;
		case 0x1D5DC:
			*normals = mathematical_sans_serif_bold_capital_i;
			return 1;
		case 0x1D5DD:
			*normals = mathematical_sans_serif_bold_capital_j;
			return 1;
		case 0x1D5DE:
			*normals = mathematical_sans_serif_bold_capital_k;
			return 1;
		case 0x1D5DF:
			*normals = mathematical_sans_serif_bold_capital_l;
			return 1;
		case 0x1D5E0:
			*normals = mathematical_sans_serif_bold_capital_m;
			return 1;
		case 0x1D5E1:
			*normals = mathematical_sans_serif_bold_capital_n;
			return 1;
		case 0x1D5E2:
			*normals = mathematical_sans_serif_bold_capital_o;
			return 1;
		case 0x1D5E3:
			*normals = mathematical_sans_serif_bold_capital_p;
			return 1;
		case 0x1D5E4:
			*normals = mathematical_sans_serif_bold_capital_q;
			return 1;
		case 0x1D5E5:
			*normals = mathematical_sans_serif_bold_capital_r;
			return 1;
		case 0x1D5E6:
			*normals = mathematical_sans_serif_bold_capital_s;
			return 1;
		case 0x1D5E7:
			*normals = mathematical_sans_serif_bold_capital_t;
			return 1;
		case 0x1D5E8:
			*normals = mathematical_sans_serif_bold_capital_u;
			return 1;
		case 0x1D5E9:
			*normals = mathematical_sans_serif_bold_capital_v;
			return 1;
		case 0x1D5EA:
			*normals = mathematical_sans_serif_bold_capital_w;
			return 1;
		case 0x1D5EB:
			*normals = mathematical_sans_serif_bold_capital_x;
			return 1;
		case 0x1D5EC:
			*normals = mathematical_sans_serif_bold_capital_y;
			return 1;
		case 0x1D5ED:
			*normals = mathematical_sans_serif_bold_capital_z;
			return 1;
		case 0x1D5EE:
			*normals = mathematical_sans_serif_bold_small_a;
			return 1;
		case 0x1D5EF:
			*normals = mathematical_sans_serif_bold_small_b;
			return 1;
		case 0x1D5F0:
			*normals = mathematical_sans_serif_bold_small_c;
			return 1;
		case 0x1D5F1:
			*normals = mathematical_sans_serif_bold_small_d;
			return 1;
		case 0x1D5F2:
			*normals = mathematical_sans_serif_bold_small_e;
			return 1;
		case 0x1D5F3:
			*normals = mathematical_sans_serif_bold_small_f;
			return 1;
		case 0x1D5F4:
			*normals = mathematical_sans_serif_bold_small_g;
			return 1;
		case 0x1D5F5:
			*normals = mathematical_sans_serif_bold_small_h;
			return 1;
		case 0x1D5F6:
			*normals = mathematical_sans_serif_bold_small_i;
			return 1;
		case 0x1D5F7:
			*normals = mathematical_sans_serif_bold_small_j;
			return 1;
		case 0x1D5F8:
			*normals = mathematical_sans_serif_bold_small_k;
			return 1;
		case 0x1D5F9:
			*normals = mathematical_sans_serif_bold_small_l;
			return 1;
		case 0x1D5FA:
			*normals = mathematical_sans_serif_bold_small_m;
			return 1;
		case 0x1D5FB:
			*normals = mathematical_sans_serif_bold_small_n;
			return 1;
		case 0x1D5FC:
			*normals = mathematical_sans_serif_bold_small_o;
			return 1;
		case 0x1D5FD:
			*normals = mathematical_sans_serif_bold_small_p;
			return 1;
		case 0x1D5FE:
			*normals = mathematical_sans_serif_bold_small_q;
			return 1;
		case 0x1D5FF:
			*normals = mathematical_sans_serif_bold_small_r;
			return 1;
		case 0x1D600:
			*normals = mathematical_sans_serif_bold_small_s;
			return 1;
		case 0x1D601:
			*normals = mathematical_sans_serif_bold_small_t;
			return 1;
		case 0x1D602:
			*normals = mathematical_sans_serif_bold_small_u;
			return 1;
		case 0x1D603:
			*normals = mathematical_sans_serif_bold_small_v;
			return 1;
		case 0x1D604:
			*normals = mathematical_sans_serif_bold_small_w;
			return 1;
		case 0x1D605:
			*normals = mathematical_sans_serif_bold_small_x;
			return 1;
		case 0x1D606:
			*normals = mathematical_sans_serif_bold_small_y;
			return 1;
		case 0x1D607:
			*normals = mathematical_sans_serif_bold_small_z;
			return 1;
		case 0x1D608:
			*normals = mathematical_sans_serif_italic_capital_a;
			return 1;
		case 0x1D609:
			*normals = mathematical_sans_serif_italic_capital_b;
			return 1;
		case 0x1D60A:
			*normals = mathematical_sans_serif_italic_capital_c;
			return 1;
		case 0x1D60B:
			*normals = mathematical_sans_serif_italic_capital_d;
			return 1;
		case 0x1D60C:
			*normals = mathematical_sans_serif_italic_capital_e;
			return 1;
		case 0x1D60D:
			*normals = mathematical_sans_serif_italic_capital_f;
			return 1;
		case 0x1D60E:
			*normals = mathematical_sans_serif_italic_capital_g;
			return 1;
		case 0x1D60F:
			*normals = mathematical_sans_serif_italic_capital_h;
			return 1;
		case 0x1D610:
			*normals = mathematical_sans_serif_italic_capital_i;
			return 1;
		case 0x1D611:
			*normals = mathematical_sans_serif_italic_capital_j;
			return 1;
		case 0x1D612:
			*normals = mathematical_sans_serif_italic_capital_k;
			return 1;
		case 0x1D613:
			*normals = mathematical_sans_serif_italic_capital_l;
			return 1;
		case 0x1D614:
			*normals = mathematical_sans_serif_italic_capital_m;
			return 1;
		case 0x1D615:
			*normals = mathematical_sans_serif_italic_capital_n;
			return 1;
		case 0x1D616:
			*normals = mathematical_sans_serif_italic_capital_o;
			return 1;
		case 0x1D617:
			*normals = mathematical_sans_serif_italic_capital_p;
			return 1;
		case 0x1D618:
			*normals = mathematical_sans_serif_italic_capital_q;
			return 1;
		case 0x1D619:
			*normals = mathematical_sans_serif_italic_capital_r;
			return 1;
		case 0x1D61A:
			*normals = mathematical_sans_serif_italic_capital_s;
			return 1;
		case 0x1D61B:
			*normals = mathematical_sans_serif_italic_capital_t;
			return 1;
		case 0x1D61C:
			*normals = mathematical_sans_serif_italic_capital_u;
			return 1;
		case 0x1D61D:
			*normals = mathematical_sans_serif_italic_capital_v;
			return 1;
		case 0x1D61E:
			*normals = mathematical_sans_serif_italic_capital_w;
			return 1;
		case 0x1D61F:
			*normals = mathematical_sans_serif_italic_capital_x;
			return 1;
		case 0x1D620:
			*normals = mathematical_sans_serif_italic_capital_y;
			return 1;
		case 0x1D621:
			*normals = mathematical_sans_serif_italic_capital_z;
			return 1;
		case 0x1D622:
			*normals = mathematical_sans_serif_italic_small_a;
			return 1;
		case 0x1D623:
			*normals = mathematical_sans_serif_italic_small_b;
			return 1;
		case 0x1D624:
			*normals = mathematical_sans_serif_italic_small_c;
			return 1;
		case 0x1D625:
			*normals = mathematical_sans_serif_italic_small_d;
			return 1;
		case 0x1D626:
			*normals = mathematical_sans_serif_italic_small_e;
			return 1;
		case 0x1D627:
			*normals = mathematical_sans_serif_italic_small_f;
			return 1;
		case 0x1D628:
			*normals = mathematical_sans_serif_italic_small_g;
			return 1;
		case 0x1D629:
			*normals = mathematical_sans_serif_italic_small_h;
			return 1;
		case 0x1D62A:
			*normals = mathematical_sans_serif_italic_small_i;
			return 1;
		case 0x1D62B:
			*normals = mathematical_sans_serif_italic_small_j;
			return 1;
		case 0x1D62C:
			*normals = mathematical_sans_serif_italic_small_k;
			return 1;
		case 0x1D62D:
			*normals = mathematical_sans_serif_italic_small_l;
			return 1;
		case 0x1D62E:
			*normals = mathematical_sans_serif_italic_small_m;
			return 1;
		case 0x1D62F:
			*normals = mathematical_sans_serif_italic_small_n;
			return 1;
		case 0x1D630:
			*normals = mathematical_sans_serif_italic_small_o;
			return 1;
		case 0x1D631:
			*normals = mathematical_sans_serif_italic_small_p;
			return 1;
		case 0x1D632:
			*normals = mathematical_sans_serif_italic_small_q;
			return 1;
		case 0x1D633:
			*normals = mathematical_sans_serif_italic_small_r;
			return 1;
		case 0x1D634:
			*normals = mathematical_sans_serif_italic_small_s;
			return 1;
		case 0x1D635:
			*normals = mathematical_sans_serif_italic_small_t;
			return 1;
		case 0x1D636:
			*normals = mathematical_sans_serif_italic_small_u;
			return 1;
		case 0x1D637:
			*normals = mathematical_sans_serif_italic_small_v;
			return 1;
		case 0x1D638:
			*normals = mathematical_sans_serif_italic_small_w;
			return 1;
		case 0x1D639:
			*normals = mathematical_sans_serif_italic_small_x;
			return 1;
		case 0x1D63A:
			*normals = mathematical_sans_serif_italic_small_y;
			return 1;
		case 0x1D63B:
			*normals = mathematical_sans_serif_italic_small_z;
			return 1;
		case 0x1D63C:
			*normals = mathematical_sans_serif_bold_italic_capital_a;
			return 1;
		case 0x1D63D:
			*normals = mathematical_sans_serif_bold_italic_capital_b;
			return 1;
		case 0x1D63E:
			*normals = mathematical_sans_serif_bold_italic_capital_c;
			return 1;
		case 0x1D63F:
			*normals = mathematical_sans_serif_bold_italic_capital_d;
			return 1;
		case 0x1D640:
			*normals = mathematical_sans_serif_bold_italic_capital_e;
			return 1;
		case 0x1D641:
			*normals = mathematical_sans_serif_bold_italic_capital_f;
			return 1;
		case 0x1D642:
			*normals = mathematical_sans_serif_bold_italic_capital_g;
			return 1;
		case 0x1D643:
			*normals = mathematical_sans_serif_bold_italic_capital_h;
			return 1;
		case 0x1D644:
			*normals = mathematical_sans_serif_bold_italic_capital_i;
			return 1;
		case 0x1D645:
			*normals = mathematical_sans_serif_bold_italic_capital_j;
			return 1;
		case 0x1D646:
			*normals = mathematical_sans_serif_bold_italic_capital_k;
			return 1;
		case 0x1D647:
			*normals = mathematical_sans_serif_bold_italic_capital_l;
			return 1;
		case 0x1D648:
			*normals = mathematical_sans_serif_bold_italic_capital_m;
			return 1;
		case 0x1D649:
			*normals = mathematical_sans_serif_bold_italic_capital_n;
			return 1;
		case 0x1D64A:
			*normals = mathematical_sans_serif_bold_italic_capital_o;
			return 1;
		case 0x1D64B:
			*normals = mathematical_sans_serif_bold_italic_capital_p;
			return 1;
		case 0x1D64C:
			*normals = mathematical_sans_serif_bold_italic_capital_q;
			return 1;
		case 0x1D64D:
			*normals = mathematical_sans_serif_bold_italic_capital_r;
			return 1;
		case 0x1D64E:
			*normals = mathematical_sans_serif_bold_italic_capital_s;
			return 1;
		case 0x1D64F:
			*normals = mathematical_sans_serif_bold_italic_capital_t;
			return 1;
		case 0x1D650:
			*normals = mathematical_sans_serif_bold_italic_capital_u;
			return 1;
		case 0x1D651:
			*normals = mathematical_sans_serif_bold_italic_capital_v;
			return 1;
		case 0x1D652:
			*normals = mathematical_sans_serif_bold_italic_capital_w;
			return 1;
		case 0x1D653:
			*normals = mathematical_sans_serif_bold_italic_capital_x;
			return 1;
		case 0x1D654:
			*normals = mathematical_sans_serif_bold_italic_capital_y;
			return 1;
		case 0x1D655:
			*normals = mathematical_sans_serif_bold_italic_capital_z;
			return 1;
		case 0x1D656:
			*normals = mathematical_sans_serif_bold_italic_small_a;
			return 1;
		case 0x1D657:
			*normals = mathematical_sans_serif_bold_italic_small_b;
			return 1;
		case 0x1D658:
			*normals = mathematical_sans_serif_bold_italic_small_c;
			return 1;
		case 0x1D659:
			*normals = mathematical_sans_serif_bold_italic_small_d;
			return 1;
		case 0x1D65A:
			*normals = mathematical_sans_serif_bold_italic_small_e;
			return 1;
		case 0x1D65B:
			*normals = mathematical_sans_serif_bold_italic_small_f;
			return 1;
		case 0x1D65C:
			*normals = mathematical_sans_serif_bold_italic_small_g;
			return 1;
		case 0x1D65D:
			*normals = mathematical_sans_serif_bold_italic_small_h;
			return 1;
		case 0x1D65E:
			*normals = mathematical_sans_serif_bold_italic_small_i;
			return 1;
		case 0x1D65F:
			*normals = mathematical_sans_serif_bold_italic_small_j;
			return 1;
		case 0x1D660:
			*normals = mathematical_sans_serif_bold_italic_small_k;
			return 1;
		case 0x1D661:
			*normals = mathematical_sans_serif_bold_italic_small_l;
			return 1;
		case 0x1D662:
			*normals = mathematical_sans_serif_bold_italic_small_m;
			return 1;
		case 0x1D663:
			*normals = mathematical_sans_serif_bold_italic_small_n;
			return 1;
		case 0x1D664:
			*normals = mathematical_sans_serif_bold_italic_small_o;
			return 1;
		case 0x1D665:
			*normals = mathematical_sans_serif_bold_italic_small_p;
			return 1;
		case 0x1D666:
			*normals = mathematical_sans_serif_bold_italic_small_q;
			return 1;
		case 0x1D667:
			*normals = mathematical_sans_serif_bold_italic_small_r;
			return 1;
		case 0x1D668:
			*normals = mathematical_sans_serif_bold_italic_small_s;
			return 1;
		case 0x1D669:
			*normals = mathematical_sans_serif_bold_italic_small_t;
			return 1;
		case 0x1D66A:
			*normals = mathematical_sans_serif_bold_italic_small_u;
			return 1;
		case 0x1D66B:
			*normals = mathematical_sans_serif_bold_italic_small_v;
			return 1;
		case 0x1D66C:
			*normals = mathematical_sans_serif_bold_italic_small_w;
			return 1;
		case 0x1D66D:
			*normals = mathematical_sans_serif_bold_italic_small_x;
			return 1;
		case 0x1D66E:
			*normals = mathematical_sans_serif_bold_italic_small_y;
			return 1;
		case 0x1D66F:
			*normals = mathematical_sans_serif_bold_italic_small_z;
			return 1;
		case 0x1D670:
			*normals = mathematical_monospace_capital_a;
			return 1;
		case 0x1D671:
			*normals = mathematical_monospace_capital_b;
			return 1;
		case 0x1D672:
			*normals = mathematical_monospace_capital_c;
			return 1;
		case 0x1D673:
			*normals = mathematical_monospace_capital_d;
			return 1;
		case 0x1D674:
			*normals = mathematical_monospace_capital_e;
			return 1;
		case 0x1D675:
			*normals = mathematical_monospace_capital_f;
			return 1;
		case 0x1D676:
			*normals = mathematical_monospace_capital_g;
			return 1;
		case 0x1D677:
			*normals = mathematical_monospace_capital_h;
			return 1;
		case 0x1D678:
			*normals = mathematical_monospace_capital_i;
			return 1;
		case 0x1D679:
			*normals = mathematical_monospace_capital_j;
			return 1;
		case 0x1D67A:
			*normals = mathematical_monospace_capital_k;
			return 1;
		case 0x1D67B:
			*normals = mathematical_monospace_capital_l;
			return 1;
		case 0x1D67C:
			*normals = mathematical_monospace_capital_m;
			return 1;
		case 0x1D67D:
			*normals = mathematical_monospace_capital_n;
			return 1;
		case 0x1D67E:
			*normals = mathematical_monospace_capital_o;
			return 1;
		case 0x1D67F:
			*normals = mathematical_monospace_capital_p;
			return 1;
		case 0x1D680:
			*normals = mathematical_monospace_capital_q;
			return 1;
		case 0x1D681:
			*normals = mathematical_monospace_capital_r;
			return 1;
		case 0x1D682:
			*normals = mathematical_monospace_capital_s;
			return 1;
		case 0x1D683:
			*normals = mathematical_monospace_capital_t;
			return 1;
		case 0x1D684:
			*normals = mathematical_monospace_capital_u;
			return 1;
		case 0x1D685:
			*normals = mathematical_monospace_capital_v;
			return 1;
		case 0x1D686:
			*normals = mathematical_monospace_capital_w;
			return 1;
		case 0x1D687:
			*normals = mathematical_monospace_capital_x;
			return 1;
		case 0x1D688:
			*normals = mathematical_monospace_capital_y;
			return 1;
		case 0x1D689:
			*normals = mathematical_monospace_capital_z;
			return 1;
		case 0x1D68A:
			*normals = mathematical_monospace_small_a;
			return 1;
		case 0x1D68B:
			*normals = mathematical_monospace_small_b;
			return 1;
		case 0x1D68C:
			*normals = mathematical_monospace_small_c;
			return 1;
		case 0x1D68D:
			*normals = mathematical_monospace_small_d;
			return 1;
		case 0x1D68E:
			*normals = mathematical_monospace_small_e;
			return 1;
		case 0x1D68F:
			*normals = mathematical_monospace_small_f;
			return 1;
		case 0x1D690:
			*normals = mathematical_monospace_small_g;
			return 1;
		case 0x1D691:
			*normals = mathematical_monospace_small_h;
			return 1;
		case 0x1D692:
			*normals = mathematical_monospace_small_i;
			return 1;
		case 0x1D693:
			*normals = mathematical_monospace_small_j;
			return 1;
		case 0x1D694:
			*normals = mathematical_monospace_small_k;
			return 1;
		case 0x1D695:
			*normals = mathematical_monospace_small_l;
			return 1;
		case 0x1D696:
			*normals = mathematical_monospace_small_m;
			return 1;
		case 0x1D697:
			*normals = mathematical_monospace_small_n;
			return 1;
		case 0x1D698:
			*normals = mathematical_monospace_small_o;
			return 1;
		case 0x1D699:
			*normals = mathematical_monospace_small_p;
			return 1;
		case 0x1D69A:
			*normals = mathematical_monospace_small_q;
			return 1;
		case 0x1D69B:
			*normals = mathematical_monospace_small_r;
			return 1;
		case 0x1D69C:
			*normals = mathematical_monospace_small_s;
			return 1;
		case 0x1D69D:
			*normals = mathematical_monospace_small_t;
			return 1;
		case 0x1D69E:
			*normals = mathematical_monospace_small_u;
			return 1;
		case 0x1D69F:
			*normals = mathematical_monospace_small_v;
			return 1;
		case 0x1D6A0:
			*normals = mathematical_monospace_small_w;
			return 1;
		case 0x1D6A1:
			*normals = mathematical_monospace_small_x;
			return 1;
		case 0x1D6A2:
			*normals = mathematical_monospace_small_y;
			return 1;
		case 0x1D6A3:
			*normals = mathematical_monospace_small_z;
			return 1;
		case 0x1D6A4:
			*normals = mathematical_italic_small_dotless_i;
			return 1;
		case 0x1D6A5:
			*normals = mathematical_italic_small_dotless_j;
			return 1;
		case 0x1D6A8:
			*normals = mathematical_bold_capital_alpha;
			return 1;
		case 0x1D6A9:
			*normals = mathematical_bold_capital_beta;
			return 1;
		case 0x1D6AA:
			*normals = mathematical_bold_capital_gamma;
			return 1;
		case 0x1D6AB:
			*normals = mathematical_bold_capital_delta;
			return 1;
		case 0x1D6AC:
			*normals = mathematical_bold_capital_epsilon;
			return 1;
		case 0x1D6AD:
			*normals = mathematical_bold_capital_zeta;
			return 1;
		case 0x1D6AE:
			*normals = mathematical_bold_capital_eta;
			return 1;
		case 0x1D6AF:
			*normals = mathematical_bold_capital_theta;
			return 1;
		case 0x1D6B0:
			*normals = mathematical_bold_capital_iota;
			return 1;
		case 0x1D6B1:
			*normals = mathematical_bold_capital_kappa;
			return 1;
		case 0x1D6B2:
			*normals = mathematical_bold_capital_lamda;
			return 1;
		case 0x1D6B3:
			*normals = mathematical_bold_capital_mu;
			return 1;
		case 0x1D6B4:
			*normals = mathematical_bold_capital_nu;
			return 1;
		case 0x1D6B5:
			*normals = mathematical_bold_capital_xi;
			return 1;
		case 0x1D6B6:
			*normals = mathematical_bold_capital_omicron;
			return 1;
		case 0x1D6B7:
			*normals = mathematical_bold_capital_pi;
			return 1;
		case 0x1D6B8:
			*normals = mathematical_bold_capital_rho;
			return 1;
		case 0x1D6B9:
			*normals = mathematical_bold_capital_theta_symbol;
			return 1;
		case 0x1D6BA:
			*normals = mathematical_bold_capital_sigma;
			return 1;
		case 0x1D6BB:
			*normals = mathematical_bold_capital_tau;
			return 1;
		case 0x1D6BC:
			*normals = mathematical_bold_capital_upsilon;
			return 1;
		case 0x1D6BD:
			*normals = mathematical_bold_capital_phi;
			return 1;
		case 0x1D6BE:
			*normals = mathematical_bold_capital_chi;
			return 1;
		case 0x1D6BF:
			*normals = mathematical_bold_capital_psi;
			return 1;
		case 0x1D6C0:
			*normals = mathematical_bold_capital_omega;
			return 1;
		case 0x1D6C1:
			*normals = mathematical_bold_nabla;
			return 1;
		case 0x1D6C2:
			*normals = mathematical_bold_small_alpha;
			return 1;
		case 0x1D6C3:
			*normals = mathematical_bold_small_beta;
			return 1;
		case 0x1D6C4:
			*normals = mathematical_bold_small_gamma;
			return 1;
		case 0x1D6C5:
			*normals = mathematical_bold_small_delta;
			return 1;
		case 0x1D6C6:
			*normals = mathematical_bold_small_epsilon;
			return 1;
		case 0x1D6C7:
			*normals = mathematical_bold_small_zeta;
			return 1;
		case 0x1D6C8:
			*normals = mathematical_bold_small_eta;
			return 1;
		case 0x1D6C9:
			*normals = mathematical_bold_small_theta;
			return 1;
		case 0x1D6CA:
			*normals = mathematical_bold_small_iota;
			return 1;
		case 0x1D6CB:
			*normals = mathematical_bold_small_kappa;
			return 1;
		case 0x1D6CC:
			*normals = mathematical_bold_small_lamda;
			return 1;
		case 0x1D6CD:
			*normals = mathematical_bold_small_mu;
			return 1;
		case 0x1D6CE:
			*normals = mathematical_bold_small_nu;
			return 1;
		case 0x1D6CF:
			*normals = mathematical_bold_small_xi;
			return 1;
		case 0x1D6D0:
			*normals = mathematical_bold_small_omicron;
			return 1;
		case 0x1D6D1:
			*normals = mathematical_bold_small_pi;
			return 1;
		case 0x1D6D2:
			*normals = mathematical_bold_small_rho;
			return 1;
		case 0x1D6D3:
			*normals = mathematical_bold_small_final_sigma;
			return 1;
		case 0x1D6D4:
			*normals = mathematical_bold_small_sigma;
			return 1;
		case 0x1D6D5:
			*normals = mathematical_bold_small_tau;
			return 1;
		case 0x1D6D6:
			*normals = mathematical_bold_small_upsilon;
			return 1;
		case 0x1D6D7:
			*normals = mathematical_bold_small_phi;
			return 1;
		case 0x1D6D8:
			*normals = mathematical_bold_small_chi;
			return 1;
		case 0x1D6D9:
			*normals = mathematical_bold_small_psi;
			return 1;
		case 0x1D6DA:
			*normals = mathematical_bold_small_omega;
			return 1;
		case 0x1D6DB:
			*normals = mathematical_bold_partial_differential;
			return 1;
		case 0x1D6DC:
			*normals = mathematical_bold_epsilon_symbol;
			return 1;
		case 0x1D6DD:
			*normals = mathematical_bold_theta_symbol;
			return 1;
		case 0x1D6DE:
			*normals = mathematical_bold_kappa_symbol;
			return 1;
		case 0x1D6DF:
			*normals = mathematical_bold_phi_symbol;
			return 1;
		case 0x1D6E0:
			*normals = mathematical_bold_rho_symbol;
			return 1;
		case 0x1D6E1:
			*normals = mathematical_bold_pi_symbol;
			return 1;
		case 0x1D6E2:
			*normals = mathematical_italic_capital_alpha;
			return 1;
		case 0x1D6E3:
			*normals = mathematical_italic_capital_beta;
			return 1;
		case 0x1D6E4:
			*normals = mathematical_italic_capital_gamma;
			return 1;
		case 0x1D6E5:
			*normals = mathematical_italic_capital_delta;
			return 1;
		case 0x1D6E6:
			*normals = mathematical_italic_capital_epsilon;
			return 1;
		case 0x1D6E7:
			*normals = mathematical_italic_capital_zeta;
			return 1;
		case 0x1D6E8:
			*normals = mathematical_italic_capital_eta;
			return 1;
		case 0x1D6E9:
			*normals = mathematical_italic_capital_theta;
			return 1;
		case 0x1D6EA:
			*normals = mathematical_italic_capital_iota;
			return 1;
		case 0x1D6EB:
			*normals = mathematical_italic_capital_kappa;
			return 1;
		case 0x1D6EC:
			*normals = mathematical_italic_capital_lamda;
			return 1;
		case 0x1D6ED:
			*normals = mathematical_italic_capital_mu;
			return 1;
		case 0x1D6EE:
			*normals = mathematical_italic_capital_nu;
			return 1;
		case 0x1D6EF:
			*normals = mathematical_italic_capital_xi;
			return 1;
		case 0x1D6F0:
			*normals = mathematical_italic_capital_omicron;
			return 1;
		case 0x1D6F1:
			*normals = mathematical_italic_capital_pi;
			return 1;
		case 0x1D6F2:
			*normals = mathematical_italic_capital_rho;
			return 1;
		case 0x1D6F3:
			*normals = mathematical_italic_capital_theta_symbol;
			return 1;
		case 0x1D6F4:
			*normals = mathematical_italic_capital_sigma;
			return 1;
		case 0x1D6F5:
			*normals = mathematical_italic_capital_tau;
			return 1;
		case 0x1D6F6:
			*normals = mathematical_italic_capital_upsilon;
			return 1;
		case 0x1D6F7:
			*normals = mathematical_italic_capital_phi;
			return 1;
		case 0x1D6F8:
			*normals = mathematical_italic_capital_chi;
			return 1;
		case 0x1D6F9:
			*normals = mathematical_italic_capital_psi;
			return 1;
		case 0x1D6FA:
			*normals = mathematical_italic_capital_omega;
			return 1;
		case 0x1D6FB:
			*normals = mathematical_italic_nabla;
			return 1;
		case 0x1D6FC:
			*normals = mathematical_italic_small_alpha;
			return 1;
		case 0x1D6FD:
			*normals = mathematical_italic_small_beta;
			return 1;
		case 0x1D6FE:
			*normals = mathematical_italic_small_gamma;
			return 1;
		case 0x1D6FF:
			*normals = mathematical_italic_small_delta;
			return 1;
		case 0x1D700:
			*normals = mathematical_italic_small_epsilon;
			return 1;
		case 0x1D701:
			*normals = mathematical_italic_small_zeta;
			return 1;
		case 0x1D702:
			*normals = mathematical_italic_small_eta;
			return 1;
		case 0x1D703:
			*normals = mathematical_italic_small_theta;
			return 1;
		case 0x1D704:
			*normals = mathematical_italic_small_iota;
			return 1;
		case 0x1D705:
			*normals = mathematical_italic_small_kappa;
			return 1;
		case 0x1D706:
			*normals = mathematical_italic_small_lamda;
			return 1;
		case 0x1D707:
			*normals = mathematical_italic_small_mu;
			return 1;
		case 0x1D708:
			*normals = mathematical_italic_small_nu;
			return 1;
		case 0x1D709:
			*normals = mathematical_italic_small_xi;
			return 1;
		case 0x1D70A:
			*normals = mathematical_italic_small_omicron;
			return 1;
		case 0x1D70B:
			*normals = mathematical_italic_small_pi;
			return 1;
		case 0x1D70C:
			*normals = mathematical_italic_small_rho;
			return 1;
		case 0x1D70D:
			*normals = mathematical_italic_small_final_sigma;
			return 1;
		case 0x1D70E:
			*normals = mathematical_italic_small_sigma;
			return 1;
		case 0x1D70F:
			*normals = mathematical_italic_small_tau;
			return 1;
		case 0x1D710:
			*normals = mathematical_italic_small_upsilon;
			return 1;
		case 0x1D711:
			*normals = mathematical_italic_small_phi;
			return 1;
		case 0x1D712:
			*normals = mathematical_italic_small_chi;
			return 1;
		case 0x1D713:
			*normals = mathematical_italic_small_psi;
			return 1;
		case 0x1D714:
			*normals = mathematical_italic_small_omega;
			return 1;
		case 0x1D715:
			*normals = mathematical_italic_partial_differential;
			return 1;
		case 0x1D716:
			*normals = mathematical_italic_epsilon_symbol;
			return 1;
		case 0x1D717:
			*normals = mathematical_italic_theta_symbol;
			return 1;
		case 0x1D718:
			*normals = mathematical_italic_kappa_symbol;
			return 1;
		case 0x1D719:
			*normals = mathematical_italic_phi_symbol;
			return 1;
		case 0x1D71A:
			*normals = mathematical_italic_rho_symbol;
			return 1;
		case 0x1D71B:
			*normals = mathematical_italic_pi_symbol;
			return 1;
		case 0x1D71C:
			*normals = mathematical_bold_italic_capital_alpha;
			return 1;
		case 0x1D71D:
			*normals = mathematical_bold_italic_capital_beta;
			return 1;
		case 0x1D71E:
			*normals = mathematical_bold_italic_capital_gamma;
			return 1;
		case 0x1D71F:
			*normals = mathematical_bold_italic_capital_delta;
			return 1;
		case 0x1D720:
			*normals = mathematical_bold_italic_capital_epsilon;
			return 1;
		case 0x1D721:
			*normals = mathematical_bold_italic_capital_zeta;
			return 1;
		case 0x1D722:
			*normals = mathematical_bold_italic_capital_eta;
			return 1;
		case 0x1D723:
			*normals = mathematical_bold_italic_capital_theta;
			return 1;
		case 0x1D724:
			*normals = mathematical_bold_italic_capital_iota;
			return 1;
		case 0x1D725:
			*normals = mathematical_bold_italic_capital_kappa;
			return 1;
		case 0x1D726:
			*normals = mathematical_bold_italic_capital_lamda;
			return 1;
		case 0x1D727:
			*normals = mathematical_bold_italic_capital_mu;
			return 1;
		case 0x1D728:
			*normals = mathematical_bold_italic_capital_nu;
			return 1;
		case 0x1D729:
			*normals = mathematical_bold_italic_capital_xi;
			return 1;
		case 0x1D72A:
			*normals = mathematical_bold_italic_capital_omicron;
			return 1;
		case 0x1D72B:
			*normals = mathematical_bold_italic_capital_pi;
			return 1;
		case 0x1D72C:
			*normals = mathematical_bold_italic_capital_rho;
			return 1;
		case 0x1D72D:
			*normals = mathematical_bold_italic_capital_theta_symbol;
			return 1;
		case 0x1D72E:
			*normals = mathematical_bold_italic_capital_sigma;
			return 1;
		case 0x1D72F:
			*normals = mathematical_bold_italic_capital_tau;
			return 1;
		case 0x1D730:
			*normals = mathematical_bold_italic_capital_upsilon;
			return 1;
		case 0x1D731:
			*normals = mathematical_bold_italic_capital_phi;
			return 1;
		case 0x1D732:
			*normals = mathematical_bold_italic_capital_chi;
			return 1;
		case 0x1D733:
			*normals = mathematical_bold_italic_capital_psi;
			return 1;
		case 0x1D734:
			*normals = mathematical_bold_italic_capital_omega;
			return 1;
		case 0x1D735:
			*normals = mathematical_bold_italic_nabla;
			return 1;
		case 0x1D736:
			*normals = mathematical_bold_italic_small_alpha;
			return 1;
		case 0x1D737:
			*normals = mathematical_bold_italic_small_beta;
			return 1;
		case 0x1D738:
			*normals = mathematical_bold_italic_small_gamma;
			return 1;
		case 0x1D739:
			*normals = mathematical_bold_italic_small_delta;
			return 1;
		case 0x1D73A:
			*normals = mathematical_bold_italic_small_epsilon;
			return 1;
		case 0x1D73B:
			*normals = mathematical_bold_italic_small_zeta;
			return 1;
		case 0x1D73C:
			*normals = mathematical_bold_italic_small_eta;
			return 1;
		case 0x1D73D:
			*normals = mathematical_bold_italic_small_theta;
			return 1;
		case 0x1D73E:
			*normals = mathematical_bold_italic_small_iota;
			return 1;
		case 0x1D73F:
			*normals = mathematical_bold_italic_small_kappa;
			return 1;
		case 0x1D740:
			*normals = mathematical_bold_italic_small_lamda;
			return 1;
		case 0x1D741:
			*normals = mathematical_bold_italic_small_mu;
			return 1;
		case 0x1D742:
			*normals = mathematical_bold_italic_small_nu;
			return 1;
		case 0x1D743:
			*normals = mathematical_bold_italic_small_xi;
			return 1;
		case 0x1D744:
			*normals = mathematical_bold_italic_small_omicron;
			return 1;
		case 0x1D745:
			*normals = mathematical_bold_italic_small_pi;
			return 1;
		case 0x1D746:
			*normals = mathematical_bold_italic_small_rho;
			return 1;
		case 0x1D747:
			*normals = mathematical_bold_italic_small_final_sigma;
			return 1;
		case 0x1D748:
			*normals = mathematical_bold_italic_small_sigma;
			return 1;
		case 0x1D749:
			*normals = mathematical_bold_italic_small_tau;
			return 1;
		case 0x1D74A:
			*normals = mathematical_bold_italic_small_upsilon;
			return 1;
		case 0x1D74B:
			*normals = mathematical_bold_italic_small_phi;
			return 1;
		case 0x1D74C:
			*normals = mathematical_bold_italic_small_chi;
			return 1;
		case 0x1D74D:
			*normals = mathematical_bold_italic_small_psi;
			return 1;
		case 0x1D74E:
			*normals = mathematical_bold_italic_small_omega;
			return 1;
		case 0x1D74F:
			*normals = mathematical_bold_italic_partial_differential;
			return 1;
		case 0x1D750:
			*normals = mathematical_bold_italic_epsilon_symbol;
			return 1;
		case 0x1D751:
			*normals = mathematical_bold_italic_theta_symbol;
			return 1;
		case 0x1D752:
			*normals = mathematical_bold_italic_kappa_symbol;
			return 1;
		case 0x1D753:
			*normals = mathematical_bold_italic_phi_symbol;
			return 1;
		case 0x1D754:
			*normals = mathematical_bold_italic_rho_symbol;
			return 1;
		case 0x1D755:
			*normals = mathematical_bold_italic_pi_symbol;
			return 1;
		case 0x1D756:
			*normals = mathematical_sans_serif_bold_capital_alpha;
			return 1;
		case 0x1D757:
			*normals = mathematical_sans_serif_bold_capital_beta;
			return 1;
		case 0x1D758:
			*normals = mathematical_sans_serif_bold_capital_gamma;
			return 1;
		case 0x1D759:
			*normals = mathematical_sans_serif_bold_capital_delta;
			return 1;
		case 0x1D75A:
			*normals = mathematical_sans_serif_bold_capital_epsilon;
			return 1;
		case 0x1D75B:
			*normals = mathematical_sans_serif_bold_capital_zeta;
			return 1;
		case 0x1D75C:
			*normals = mathematical_sans_serif_bold_capital_eta;
			return 1;
		case 0x1D75D:
			*normals = mathematical_sans_serif_bold_capital_theta;
			return 1;
		case 0x1D75E:
			*normals = mathematical_sans_serif_bold_capital_iota;
			return 1;
		case 0x1D75F:
			*normals = mathematical_sans_serif_bold_capital_kappa;
			return 1;
		case 0x1D760:
			*normals = mathematical_sans_serif_bold_capital_lamda;
			return 1;
		case 0x1D761:
			*normals = mathematical_sans_serif_bold_capital_mu;
			return 1;
		case 0x1D762:
			*normals = mathematical_sans_serif_bold_capital_nu;
			return 1;
		case 0x1D763:
			*normals = mathematical_sans_serif_bold_capital_xi;
			return 1;
		case 0x1D764:
			*normals = mathematical_sans_serif_bold_capital_omicron;
			return 1;
		case 0x1D765:
			*normals = mathematical_sans_serif_bold_capital_pi;
			return 1;
		case 0x1D766:
			*normals = mathematical_sans_serif_bold_capital_rho;
			return 1;
		case 0x1D767:
			*normals = mathematical_sans_serif_bold_capital_theta_symbol;
			return 1;
		case 0x1D768:
			*normals = mathematical_sans_serif_bold_capital_sigma;
			return 1;
		case 0x1D769:
			*normals = mathematical_sans_serif_bold_capital_tau;
			return 1;
		case 0x1D76A:
			*normals = mathematical_sans_serif_bold_capital_upsilon;
			return 1;
		case 0x1D76B:
			*normals = mathematical_sans_serif_bold_capital_phi;
			return 1;
		case 0x1D76C:
			*normals = mathematical_sans_serif_bold_capital_chi;
			return 1;
		case 0x1D76D:
			*normals = mathematical_sans_serif_bold_capital_psi;
			return 1;
		case 0x1D76E:
			*normals = mathematical_sans_serif_bold_capital_omega;
			return 1;
		case 0x1D76F:
			*normals = mathematical_sans_serif_bold_nabla;
			return 1;
		case 0x1D770:
			*normals = mathematical_sans_serif_bold_small_alpha;
			return 1;
		case 0x1D771:
			*normals = mathematical_sans_serif_bold_small_beta;
			return 1;
		case 0x1D772:
			*normals = mathematical_sans_serif_bold_small_gamma;
			return 1;
		case 0x1D773:
			*normals = mathematical_sans_serif_bold_small_delta;
			return 1;
		case 0x1D774:
			*normals = mathematical_sans_serif_bold_small_epsilon;
			return 1;
		case 0x1D775:
			*normals = mathematical_sans_serif_bold_small_zeta;
			return 1;
		case 0x1D776:
			*normals = mathematical_sans_serif_bold_small_eta;
			return 1;
		case 0x1D777:
			*normals = mathematical_sans_serif_bold_small_theta;
			return 1;
		case 0x1D778:
			*normals = mathematical_sans_serif_bold_small_iota;
			return 1;
		case 0x1D779:
			*normals = mathematical_sans_serif_bold_small_kappa;
			return 1;
		case 0x1D77A:
			*normals = mathematical_sans_serif_bold_small_lamda;
			return 1;
		case 0x1D77B:
			*normals = mathematical_sans_serif_bold_small_mu;
			return 1;
		case 0x1D77C:
			*normals = mathematical_sans_serif_bold_small_nu;
			return 1;
		case 0x1D77D:
			*normals = mathematical_sans_serif_bold_small_xi;
			return 1;
		case 0x1D77E:
			*normals = mathematical_sans_serif_bold_small_omicron;
			return 1;
		case 0x1D77F:
			*normals = mathematical_sans_serif_bold_small_pi;
			return 1;
		case 0x1D780:
			*normals = mathematical_sans_serif_bold_small_rho;
			return 1;
		case 0x1D781:
			*normals = mathematical_sans_serif_bold_small_final_sigma;
			return 1;
		case 0x1D782:
			*normals = mathematical_sans_serif_bold_small_sigma;
			return 1;
		case 0x1D783:
			*normals = mathematical_sans_serif_bold_small_tau;
			return 1;
		case 0x1D784:
			*normals = mathematical_sans_serif_bold_small_upsilon;
			return 1;
		case 0x1D785:
			*normals = mathematical_sans_serif_bold_small_phi;
			return 1;
		case 0x1D786:
			*normals = mathematical_sans_serif_bold_small_chi;
			return 1;
		case 0x1D787:
			*normals = mathematical_sans_serif_bold_small_psi;
			return 1;
		case 0x1D788:
			*normals = mathematical_sans_serif_bold_small_omega;
			return 1;
		case 0x1D789:
			*normals = mathematical_sans_serif_bold_partial_differential;
			return 1;
		case 0x1D78A:
			*normals = mathematical_sans_serif_bold_epsilon_symbol;
			return 1;
		case 0x1D78B:
			*normals = mathematical_sans_serif_bold_theta_symbol;
			return 1;
		case 0x1D78C:
			*normals = mathematical_sans_serif_bold_kappa_symbol;
			return 1;
		case 0x1D78D:
			*normals = mathematical_sans_serif_bold_phi_symbol;
			return 1;
		case 0x1D78E:
			*normals = mathematical_sans_serif_bold_rho_symbol;
			return 1;
		case 0x1D78F:
			*normals = mathematical_sans_serif_bold_pi_symbol;
			return 1;
		case 0x1D790:
			*normals = mathematical_sans_serif_bold_italic_capital_alpha;
			return 1;
		case 0x1D791:
			*normals = mathematical_sans_serif_bold_italic_capital_beta;
			return 1;
		case 0x1D792:
			*normals = mathematical_sans_serif_bold_italic_capital_gamma;
			return 1;
		case 0x1D793:
			*normals = mathematical_sans_serif_bold_italic_capital_delta;
			return 1;
		case 0x1D794:
			*normals = mathematical_sans_serif_bold_italic_capital_epsilon;
			return 1;
		case 0x1D795:
			*normals = mathematical_sans_serif_bold_italic_capital_zeta;
			return 1;
		case 0x1D796:
			*normals = mathematical_sans_serif_bold_italic_capital_eta;
			return 1;
		case 0x1D797:
			*normals = mathematical_sans_serif_bold_italic_capital_theta;
			return 1;
		case 0x1D798:
			*normals = mathematical_sans_serif_bold_italic_capital_iota;
			return 1;
		case 0x1D799:
			*normals = mathematical_sans_serif_bold_italic_capital_kappa;
			return 1;
		case 0x1D79A:
			*normals = mathematical_sans_serif_bold_italic_capital_lamda;
			return 1;
		case 0x1D79B:
			*normals = mathematical_sans_serif_bold_italic_capital_mu;
			return 1;
		case 0x1D79C:
			*normals = mathematical_sans_serif_bold_italic_capital_nu;
			return 1;
		case 0x1D79D:
			*normals = mathematical_sans_serif_bold_italic_capital_xi;
			return 1;
		case 0x1D79E:
			*normals = mathematical_sans_serif_bold_italic_capital_omicron;
			return 1;
		case 0x1D79F:
			*normals = mathematical_sans_serif_bold_italic_capital_pi;
			return 1;
		case 0x1D7A0:
			*normals = mathematical_sans_serif_bold_italic_capital_rho;
			return 1;
		case 0x1D7A1:
			*normals = mathematical_sans_serif_bold_italic_capital_theta_symbol;
			return 1;
		case 0x1D7A2:
			*normals = mathematical_sans_serif_bold_italic_capital_sigma;
			return 1;
		case 0x1D7A3:
			*normals = mathematical_sans_serif_bold_italic_capital_tau;
			return 1;
		case 0x1D7A4:
			*normals = mathematical_sans_serif_bold_italic_capital_upsilon;
			return 1;
		case 0x1D7A5:
			*normals = mathematical_sans_serif_bold_italic_capital_phi;
			return 1;
		case 0x1D7A6:
			*normals = mathematical_sans_serif_bold_italic_capital_chi;
			return 1;
		case 0x1D7A7:
			*normals = mathematical_sans_serif_bold_italic_capital_psi;
			return 1;
		case 0x1D7A8:
			*normals = mathematical_sans_serif_bold_italic_capital_omega;
			return 1;
		case 0x1D7A9:
			*normals = mathematical_sans_serif_bold_italic_nabla;
			return 1;
		case 0x1D7AA:
			*normals = mathematical_sans_serif_bold_italic_small_alpha;
			return 1;
		case 0x1D7AB:
			*normals = mathematical_sans_serif_bold_italic_small_beta;
			return 1;
		case 0x1D7AC:
			*normals = mathematical_sans_serif_bold_italic_small_gamma;
			return 1;
		case 0x1D7AD:
			*normals = mathematical_sans_serif_bold_italic_small_delta;
			return 1;
		case 0x1D7AE:
			*normals = mathematical_sans_serif_bold_italic_small_epsilon;
			return 1;
		case 0x1D7AF:
			*normals = mathematical_sans_serif_bold_italic_small_zeta;
			return 1;
		case 0x1D7B0:
			*normals = mathematical_sans_serif_bold_italic_small_eta;
			return 1;
		case 0x1D7B1:
			*normals = mathematical_sans_serif_bold_italic_small_theta;
			return 1;
		case 0x1D7B2:
			*normals = mathematical_sans_serif_bold_italic_small_iota;
			return 1;
		case 0x1D7B3:
			*normals = mathematical_sans_serif_bold_italic_small_kappa;
			return 1;
		case 0x1D7B4:
			*normals = mathematical_sans_serif_bold_italic_small_lamda;
			return 1;
		case 0x1D7B5:
			*normals = mathematical_sans_serif_bold_italic_small_mu;
			return 1;
		case 0x1D7B6:
			*normals = mathematical_sans_serif_bold_italic_small_nu;
			return 1;
		case 0x1D7B7:
			*normals = mathematical_sans_serif_bold_italic_small_xi;
			return 1;
		case 0x1D7B8:
			*normals = mathematical_sans_serif_bold_italic_small_omicron;
			return 1;
		case 0x1D7B9:
			*normals = mathematical_sans_serif_bold_italic_small_pi;
			return 1;
		case 0x1D7BA:
			*normals = mathematical_sans_serif_bold_italic_small_rho;
			return 1;
		case 0x1D7BB:
			*normals = mathematical_sans_serif_bold_italic_small_final_sigma;
			return 1;
		case 0x1D7BC:
			*normals = mathematical_sans_serif_bold_italic_small_sigma;
			return 1;
		case 0x1D7BD:
			*normals = mathematical_sans_serif_bold_italic_small_tau;
			return 1;
		case 0x1D7BE:
			*normals = mathematical_sans_serif_bold_italic_small_upsilon;
			return 1;
		case 0x1D7BF:
			*normals = mathematical_sans_serif_bold_italic_small_phi;
			return 1;
		case 0x1D7C0:
			*normals = mathematical_sans_serif_bold_italic_small_chi;
			return 1;
		case 0x1D7C1:
			*normals = mathematical_sans_serif_bold_italic_small_psi;
			return 1;
		case 0x1D7C2:
			*normals = mathematical_sans_serif_bold_italic_small_omega;
			return 1;
		case 0x1D7C3:
			*normals = mathematical_sans_serif_bold_italic_partial_differential;
			return 1;
		case 0x1D7C4:
			*normals = mathematical_sans_serif_bold_italic_epsilon_symbol;
			return 1;
		case 0x1D7C5:
			*normals = mathematical_sans_serif_bold_italic_theta_symbol;
			return 1;
		case 0x1D7C6:
			*normals = mathematical_sans_serif_bold_italic_kappa_symbol;
			return 1;
		case 0x1D7C7:
			*normals = mathematical_sans_serif_bold_italic_phi_symbol;
			return 1;
		case 0x1D7C8:
			*normals = mathematical_sans_serif_bold_italic_rho_symbol;
			return 1;
		case 0x1D7C9:
			*normals = mathematical_sans_serif_bold_italic_pi_symbol;
			return 1;
		case 0x1D7CA:
			*normals = mathematical_bold_capital_digamma;
			return 1;
		case 0x1D7CB:
			*normals = mathematical_bold_small_digamma;
			return 1;
		case 0x1D7CE:
			*normals = mathematical_bold_digit_zero;
			return 1;
		case 0x1D7CF:
			*normals = mathematical_bold_digit_one;
			return 1;
		case 0x1D7D0:
			*normals = mathematical_bold_digit_two;
			return 1;
		case 0x1D7D1:
			*normals = mathematical_bold_digit_three;
			return 1;
		case 0x1D7D2:
			*normals = mathematical_bold_digit_four;
			return 1;
		case 0x1D7D3:
			*normals = mathematical_bold_digit_five;
			return 1;
		case 0x1D7D4:
			*normals = mathematical_bold_digit_six;
			return 1;
		case 0x1D7D5:
			*normals = mathematical_bold_digit_seven;
			return 1;
		case 0x1D7D6:
			*normals = mathematical_bold_digit_eight;
			return 1;
		case 0x1D7D7:
			*normals = mathematical_bold_digit_nine;
			return 1;
		case 0x1D7D8:
			*normals = mathematical_double_struck_digit_zero;
			return 1;
		case 0x1D7D9:
			*normals = mathematical_double_struck_digit_one;
			return 1;
		case 0x1D7DA:
			*normals = mathematical_double_struck_digit_two;
			return 1;
		case 0x1D7DB:
			*normals = mathematical_double_struck_digit_three;
			return 1;
		case 0x1D7DC:
			*normals = mathematical_double_struck_digit_four;
			return 1;
		case 0x1D7DD:
			*normals = mathematical_double_struck_digit_five;
			return 1;
		case 0x1D7DE:
			*normals = mathematical_double_struck_digit_six;
			return 1;
		case 0x1D7DF:
			*normals = mathematical_double_struck_digit_seven;
			return 1;
		case 0x1D7E0:
			*normals = mathematical_double_struck_digit_eight;
			return 1;
		case 0x1D7E1:
			*normals = mathematical_double_struck_digit_nine;
			return 1;
		case 0x1D7E2:
			*normals = mathematical_sans_serif_digit_zero;
			return 1;
		case 0x1D7E3:
			*normals = mathematical_sans_serif_digit_one;
			return 1;
		case 0x1D7E4:
			*normals = mathematical_sans_serif_digit_two;
			return 1;
		case 0x1D7E5:
			*normals = mathematical_sans_serif_digit_three;
			return 1;
		case 0x1D7E6:
			*normals = mathematical_sans_serif_digit_four;
			return 1;
		case 0x1D7E7:
			*normals = mathematical_sans_serif_digit_five;
			return 1;
		case 0x1D7E8:
			*normals = mathematical_sans_serif_digit_six;
			return 1;
		case 0x1D7E9:
			*normals = mathematical_sans_serif_digit_seven;
			return 1;
		case 0x1D7EA:
			*normals = mathematical_sans_serif_digit_eight;
			return 1;
		case 0x1D7EB:
			*normals = mathematical_sans_serif_digit_nine;
			return 1;
		case 0x1D7EC:
			*normals = mathematical_sans_serif_bold_digit_zero;
			return 1;
		case 0x1D7ED:
			*normals = mathematical_sans_serif_bold_digit_one;
			return 1;
		case 0x1D7EE:
			*normals = mathematical_sans_serif_bold_digit_two;
			return 1;
		case 0x1D7EF:
			*normals = mathematical_sans_serif_bold_digit_three;
			return 1;
		case 0x1D7F0:
			*normals = mathematical_sans_serif_bold_digit_four;
			return 1;
		case 0x1D7F1:
			*normals = mathematical_sans_serif_bold_digit_five;
			return 1;
		case 0x1D7F2:
			*normals = mathematical_sans_serif_bold_digit_six;
			return 1;
		case 0x1D7F3:
			*normals = mathematical_sans_serif_bold_digit_seven;
			return 1;
		case 0x1D7F4:
			*normals = mathematical_sans_serif_bold_digit_eight;
			return 1;
		case 0x1D7F5:
			*normals = mathematical_sans_serif_bold_digit_nine;
			return 1;
		case 0x1D7F6:
			*normals = mathematical_monospace_digit_zero;
			return 1;
		case 0x1D7F7:
			*normals = mathematical_monospace_digit_one;
			return 1;
		case 0x1D7F8:
			*normals = mathematical_monospace_digit_two;
			return 1;
		case 0x1D7F9:
			*normals = mathematical_monospace_digit_three;
			return 1;
		case 0x1D7FA:
			*normals = mathematical_monospace_digit_four;
			return 1;
		case 0x1D7FB:
			*normals = mathematical_monospace_digit_five;
			return 1;
		case 0x1D7FC:
			*normals = mathematical_monospace_digit_six;
			return 1;
		case 0x1D7FD:
			*normals = mathematical_monospace_digit_seven;
			return 1;
		case 0x1D7FE:
			*normals = mathematical_monospace_digit_eight;
			return 1;
		case 0x1D7FF:
			*normals = mathematical_monospace_digit_nine;
			return 1;
		case 0x1EE00:
			*normals = arabic_mathematical_alef;
			return 1;
		case 0x1EE01:
			*normals = arabic_mathematical_beh;
			return 1;
		case 0x1EE02:
			*normals = arabic_mathematical_jeem;
			return 1;
		case 0x1EE03:
			*normals = arabic_mathematical_dal;
			return 1;
		case 0x1EE05:
			*normals = arabic_mathematical_waw;
			return 1;
		case 0x1EE06:
			*normals = arabic_mathematical_zain;
			return 1;
		case 0x1EE07:
			*normals = arabic_mathematical_hah;
			return 1;
		case 0x1EE08:
			*normals = arabic_mathematical_tah;
			return 1;
		case 0x1EE09:
			*normals = arabic_mathematical_yeh;
			return 1;
		case 0x1EE0A:
			*normals = arabic_mathematical_kaf;
			return 1;
		case 0x1EE0B:
			*normals = arabic_mathematical_lam;
			return 1;
		case 0x1EE0C:
			*normals = arabic_mathematical_meem;
			return 1;
		case 0x1EE0D:
			*normals = arabic_mathematical_noon;
			return 1;
		case 0x1EE0E:
			*normals = arabic_mathematical_seen;
			return 1;
		case 0x1EE0F:
			*normals = arabic_mathematical_ain;
			return 1;
		case 0x1EE10:
			*normals = arabic_mathematical_feh;
			return 1;
		case 0x1EE11:
			*normals = arabic_mathematical_sad;
			return 1;
		case 0x1EE12:
			*normals = arabic_mathematical_qaf;
			return 1;
		case 0x1EE13:
			*normals = arabic_mathematical_reh;
			return 1;
		case 0x1EE14:
			*normals = arabic_mathematical_sheen;
			return 1;
		case 0x1EE15:
			*normals = arabic_mathematical_teh;
			return 1;
		case 0x1EE16:
			*normals = arabic_mathematical_theh;
			return 1;
		case 0x1EE17:
			*normals = arabic_mathematical_khah;
			return 1;
		case 0x1EE18:
			*normals = arabic_mathematical_thal;
			return 1;
		case 0x1EE19:
			*normals = arabic_mathematical_dad;
			return 1;
		case 0x1EE1A:
			*normals = arabic_mathematical_zah;
			return 1;
		case 0x1EE1B:
			*normals = arabic_mathematical_ghain;
			return 1;
		case 0x1EE1C:
			*normals = arabic_mathematical_dotless_beh;
			return 1;
		case 0x1EE1D:
			*normals = arabic_mathematical_dotless_noon;
			return 1;
		case 0x1EE1E:
			*normals = arabic_mathematical_dotless_feh;
			return 1;
		case 0x1EE1F:
			*normals = arabic_mathematical_dotless_qaf;
			return 1;
		case 0x1EE21:
			*normals = arabic_mathematical_initial_beh;
			return 1;
		case 0x1EE22:
			*normals = arabic_mathematical_initial_jeem;
			return 1;
		case 0x1EE24:
			*normals = arabic_mathematical_initial_heh;
			return 1;
		case 0x1EE27:
			*normals = arabic_mathematical_initial_hah;
			return 1;
		case 0x1EE29:
			*normals = arabic_mathematical_initial_yeh;
			return 1;
		case 0x1EE2A:
			*normals = arabic_mathematical_initial_kaf;
			return 1;
		case 0x1EE2B:
			*normals = arabic_mathematical_initial_lam;
			return 1;
		case 0x1EE2C:
			*normals = arabic_mathematical_initial_meem;
			return 1;
		case 0x1EE2D:
			*normals = arabic_mathematical_initial_noon;
			return 1;
		case 0x1EE2E:
			*normals = arabic_mathematical_initial_seen;
			return 1;
		case 0x1EE2F:
			*normals = arabic_mathematical_initial_ain;
			return 1;
		case 0x1EE30:
			*normals = arabic_mathematical_initial_feh;
			return 1;
		case 0x1EE31:
			*normals = arabic_mathematical_initial_sad;
			return 1;
		case 0x1EE32:
			*normals = arabic_mathematical_initial_qaf;
			return 1;
		case 0x1EE34:
			*normals = arabic_mathematical_initial_sheen;
			return 1;
		case 0x1EE35:
			*normals = arabic_mathematical_initial_teh;
			return 1;
		case 0x1EE36:
			*normals = arabic_mathematical_initial_theh;
			return 1;
		case 0x1EE37:
			*normals = arabic_mathematical_initial_khah;
			return 1;
		case 0x1EE39:
			*normals = arabic_mathematical_initial_dad;
			return 1;
		case 0x1EE3B:
			*normals = arabic_mathematical_initial_ghain;
			return 1;
		case 0x1EE42:
			*normals = arabic_mathematical_tailed_jeem;
			return 1;
		case 0x1EE47:
			*normals = arabic_mathematical_tailed_hah;
			return 1;
		case 0x1EE49:
			*normals = arabic_mathematical_tailed_yeh;
			return 1;
		case 0x1EE4B:
			*normals = arabic_mathematical_tailed_lam;
			return 1;
		case 0x1EE4D:
			*normals = arabic_mathematical_tailed_noon;
			return 1;
		case 0x1EE4E:
			*normals = arabic_mathematical_tailed_seen;
			return 1;
		case 0x1EE4F:
			*normals = arabic_mathematical_tailed_ain;
			return 1;
		case 0x1EE51:
			*normals = arabic_mathematical_tailed_sad;
			return 1;
		case 0x1EE52:
			*normals = arabic_mathematical_tailed_qaf;
			return 1;
		case 0x1EE54:
			*normals = arabic_mathematical_tailed_sheen;
			return 1;
		case 0x1EE57:
			*normals = arabic_mathematical_tailed_khah;
			return 1;
		case 0x1EE59:
			*normals = arabic_mathematical_tailed_dad;
			return 1;
		case 0x1EE5B:
			*normals = arabic_mathematical_tailed_ghain;
			return 1;
		case 0x1EE5D:
			*normals = arabic_mathematical_tailed_dotless_noon;
			return 1;
		case 0x1EE5F:
			*normals = arabic_mathematical_tailed_dotless_qaf;
			return 1;
		case 0x1EE61:
			*normals = arabic_mathematical_stretched_beh;
			return 1;
		case 0x1EE62:
			*normals = arabic_mathematical_stretched_jeem;
			return 1;
		case 0x1EE64:
			*normals = arabic_mathematical_stretched_heh;
			return 1;
		case 0x1EE67:
			*normals = arabic_mathematical_stretched_hah;
			return 1;
		case 0x1EE68:
			*normals = arabic_mathematical_stretched_tah;
			return 1;
		case 0x1EE69:
			*normals = arabic_mathematical_stretched_yeh;
			return 1;
		case 0x1EE6A:
			*normals = arabic_mathematical_stretched_kaf;
			return 1;
		case 0x1EE6C:
			*normals = arabic_mathematical_stretched_meem;
			return 1;
		case 0x1EE6D:
			*normals = arabic_mathematical_stretched_noon;
			return 1;
		case 0x1EE6E:
			*normals = arabic_mathematical_stretched_seen;
			return 1;
		case 0x1EE6F:
			*normals = arabic_mathematical_stretched_ain;
			return 1;
		case 0x1EE70:
			*normals = arabic_mathematical_stretched_feh;
			return 1;
		case 0x1EE71:
			*normals = arabic_mathematical_stretched_sad;
			return 1;
		case 0x1EE72:
			*normals = arabic_mathematical_stretched_qaf;
			return 1;
		case 0x1EE74:
			*normals = arabic_mathematical_stretched_sheen;
			return 1;
		case 0x1EE75:
			*normals = arabic_mathematical_stretched_teh;
			return 1;
		case 0x1EE76:
			*normals = arabic_mathematical_stretched_theh;
			return 1;
		case 0x1EE77:
			*normals = arabic_mathematical_stretched_khah;
			return 1;
		case 0x1EE79:
			*normals = arabic_mathematical_stretched_dad;
			return 1;
		case 0x1EE7A:
			*normals = arabic_mathematical_stretched_zah;
			return 1;
		case 0x1EE7B:
			*normals = arabic_mathematical_stretched_ghain;
			return 1;
		case 0x1EE7C:
			*normals = arabic_mathematical_stretched_dotless_beh;
			return 1;
		case 0x1EE7E:
			*normals = arabic_mathematical_stretched_dotless_feh;
			return 1;
		case 0x1EE80:
			*normals = arabic_mathematical_looped_alef;
			return 1;
		case 0x1EE81:
			*normals = arabic_mathematical_looped_beh;
			return 1;
		case 0x1EE82:
			*normals = arabic_mathematical_looped_jeem;
			return 1;
		case 0x1EE83:
			*normals = arabic_mathematical_looped_dal;
			return 1;
		case 0x1EE84:
			*normals = arabic_mathematical_looped_heh;
			return 1;
		case 0x1EE85:
			*normals = arabic_mathematical_looped_waw;
			return 1;
		case 0x1EE86:
			*normals = arabic_mathematical_looped_zain;
			return 1;
		case 0x1EE87:
			*normals = arabic_mathematical_looped_hah;
			return 1;
		case 0x1EE88:
			*normals = arabic_mathematical_looped_tah;
			return 1;
		case 0x1EE89:
			*normals = arabic_mathematical_looped_yeh;
			return 1;
		case 0x1EE8B:
			*normals = arabic_mathematical_looped_lam;
			return 1;
		case 0x1EE8C:
			*normals = arabic_mathematical_looped_meem;
			return 1;
		case 0x1EE8D:
			*normals = arabic_mathematical_looped_noon;
			return 1;
		case 0x1EE8E:
			*normals = arabic_mathematical_looped_seen;
			return 1;
		case 0x1EE8F:
			*normals = arabic_mathematical_looped_ain;
			return 1;
		case 0x1EE90:
			*normals = arabic_mathematical_looped_feh;
			return 1;
		case 0x1EE91:
			*normals = arabic_mathematical_looped_sad;
			return 1;
		case 0x1EE92:
			*normals = arabic_mathematical_looped_qaf;
			return 1;
		case 0x1EE93:
			*normals = arabic_mathematical_looped_reh;
			return 1;
		case 0x1EE94:
			*normals = arabic_mathematical_looped_sheen;
			return 1;
		case 0x1EE95:
			*normals = arabic_mathematical_looped_teh;
			return 1;
		case 0x1EE96:
			*normals = arabic_mathematical_looped_theh;
			return 1;
		case 0x1EE97:
			*normals = arabic_mathematical_looped_khah;
			return 1;
		case 0x1EE98:
			*normals = arabic_mathematical_looped_thal;
			return 1;
		case 0x1EE99:
			*normals = arabic_mathematical_looped_dad;
			return 1;
		case 0x1EE9A:
			*normals = arabic_mathematical_looped_zah;
			return 1;
		case 0x1EE9B:
			*normals = arabic_mathematical_looped_ghain;
			return 1;
		case 0x1EEA1:
			*normals = arabic_mathematical_double_struck_beh;
			return 1;
		case 0x1EEA2:
			*normals = arabic_mathematical_double_struck_jeem;
			return 1;
		case 0x1EEA3:
			*normals = arabic_mathematical_double_struck_dal;
			return 1;
		case 0x1EEA5:
			*normals = arabic_mathematical_double_struck_waw;
			return 1;
		case 0x1EEA6:
			*normals = arabic_mathematical_double_struck_zain;
			return 1;
		case 0x1EEA7:
			*normals = arabic_mathematical_double_struck_hah;
			return 1;
		case 0x1EEA8:
			*normals = arabic_mathematical_double_struck_tah;
			return 1;
		case 0x1EEA9:
			*normals = arabic_mathematical_double_struck_yeh;
			return 1;
		case 0x1EEAB:
			*normals = arabic_mathematical_double_struck_lam;
			return 1;
		case 0x1EEAC:
			*normals = arabic_mathematical_double_struck_meem;
			return 1;
		case 0x1EEAD:
			*normals = arabic_mathematical_double_struck_noon;
			return 1;
		case 0x1EEAE:
			*normals = arabic_mathematical_double_struck_seen;
			return 1;
		case 0x1EEAF:
			*normals = arabic_mathematical_double_struck_ain;
			return 1;
		case 0x1EEB0:
			*normals = arabic_mathematical_double_struck_feh;
			return 1;
		case 0x1EEB1:
			*normals = arabic_mathematical_double_struck_sad;
			return 1;
		case 0x1EEB2:
			*normals = arabic_mathematical_double_struck_qaf;
			return 1;
		case 0x1EEB3:
			*normals = arabic_mathematical_double_struck_reh;
			return 1;
		case 0x1EEB4:
			*normals = arabic_mathematical_double_struck_sheen;
			return 1;
		case 0x1EEB5:
			*normals = arabic_mathematical_double_struck_teh;
			return 1;
		case 0x1EEB6:
			*normals = arabic_mathematical_double_struck_theh;
			return 1;
		case 0x1EEB7:
			*normals = arabic_mathematical_double_struck_khah;
			return 1;
		case 0x1EEB8:
			*normals = arabic_mathematical_double_struck_thal;
			return 1;
		case 0x1EEB9:
			*normals = arabic_mathematical_double_struck_dad;
			return 1;
		case 0x1EEBA:
			*normals = arabic_mathematical_double_struck_zah;
			return 1;
		case 0x1EEBB:
			*normals = arabic_mathematical_double_struck_ghain;
			return 1;
		case 0x1F100:
			*normals = digit_zero_full_stop;
			return 2;
		case 0x1F101:
			*normals = digit_zero_comma;
			return 2;
		case 0x1F102:
			*normals = digit_one_comma;
			return 2;
		case 0x1F103:
			*normals = digit_two_comma;
			return 2;
		case 0x1F104:
			*normals = digit_three_comma;
			return 2;
		case 0x1F105:
			*normals = digit_four_comma;
			return 2;
		case 0x1F106:
			*normals = digit_five_comma;
			return 2;
		case 0x1F107:
			*normals = digit_six_comma;
			return 2;
		case 0x1F108:
			*normals = digit_seven_comma;
			return 2;
		case 0x1F109:
			*normals = digit_eight_comma;
			return 2;
		case 0x1F10A:
			*normals = digit_nine_comma;
			return 2;
		case 0x1F110:
			*normals = parenthesized_latin_capital_letter_a;
			return 3;
		case 0x1F111:
			*normals = parenthesized_latin_capital_letter_b;
			return 3;
		case 0x1F112:
			*normals = parenthesized_latin_capital_letter_c;
			return 3;
		case 0x1F113:
			*normals = parenthesized_latin_capital_letter_d;
			return 3;
		case 0x1F114:
			*normals = parenthesized_latin_capital_letter_e;
			return 3;
		case 0x1F115:
			*normals = parenthesized_latin_capital_letter_f;
			return 3;
		case 0x1F116:
			*normals = parenthesized_latin_capital_letter_g;
			return 3;
		case 0x1F117:
			*normals = parenthesized_latin_capital_letter_h;
			return 3;
		case 0x1F118:
			*normals = parenthesized_latin_capital_letter_i;
			return 3;
		case 0x1F119:
			*normals = parenthesized_latin_capital_letter_j;
			return 3;
		case 0x1F11A:
			*normals = parenthesized_latin_capital_letter_k;
			return 3;
		case 0x1F11B:
			*normals = parenthesized_latin_capital_letter_l;
			return 3;
		case 0x1F11C:
			*normals = parenthesized_latin_capital_letter_m;
			return 3;
		case 0x1F11D:
			*normals = parenthesized_latin_capital_letter_n;
			return 3;
		case 0x1F11E:
			*normals = parenthesized_latin_capital_letter_o;
			return 3;
		case 0x1F11F:
			*normals = parenthesized_latin_capital_letter_p;
			return 3;
		case 0x1F120:
			*normals = parenthesized_latin_capital_letter_q;
			return 3;
		case 0x1F121:
			*normals = parenthesized_latin_capital_letter_r;
			return 3;
		case 0x1F122:
			*normals = parenthesized_latin_capital_letter_s;
			return 3;
		case 0x1F123:
			*normals = parenthesized_latin_capital_letter_t;
			return 3;
		case 0x1F124:
			*normals = parenthesized_latin_capital_letter_u;
			return 3;
		case 0x1F125:
			*normals = parenthesized_latin_capital_letter_v;
			return 3;
		case 0x1F126:
			*normals = parenthesized_latin_capital_letter_w;
			return 3;
		case 0x1F127:
			*normals = parenthesized_latin_capital_letter_x;
			return 3;
		case 0x1F128:
			*normals = parenthesized_latin_capital_letter_y;
			return 3;
		case 0x1F129:
			*normals = parenthesized_latin_capital_letter_z;
			return 3;
		case 0x1F12A:
			*normals = tortoise_shell_bracketed_latin_capital_letter_s;
			return 3;
		case 0x1F12B:
			*normals = circled_italic_latin_capital_letter_c;
			return 1;
		case 0x1F12C:
			*normals = circled_italic_latin_capital_letter_r;
			return 1;
		case 0x1F12D:
			*normals = circled_cd;
			return 2;
		case 0x1F12E:
			*normals = circled_wz;
			return 2;
		case 0x1F130:
			*normals = squared_latin_capital_letter_a;
			return 1;
		case 0x1F131:
			*normals = squared_latin_capital_letter_b;
			return 1;
		case 0x1F132:
			*normals = squared_latin_capital_letter_c;
			return 1;
		case 0x1F133:
			*normals = squared_latin_capital_letter_d;
			return 1;
		case 0x1F134:
			*normals = squared_latin_capital_letter_e;
			return 1;
		case 0x1F135:
			*normals = squared_latin_capital_letter_f;
			return 1;
		case 0x1F136:
			*normals = squared_latin_capital_letter_g;
			return 1;
		case 0x1F137:
			*normals = squared_latin_capital_letter_h;
			return 1;
		case 0x1F138:
			*normals = squared_latin_capital_letter_i;
			return 1;
		case 0x1F139:
			*normals = squared_latin_capital_letter_j;
			return 1;
		case 0x1F13A:
			*normals = squared_latin_capital_letter_k;
			return 1;
		case 0x1F13B:
			*normals = squared_latin_capital_letter_l;
			return 1;
		case 0x1F13C:
			*normals = squared_latin_capital_letter_m;
			return 1;
		case 0x1F13D:
			*normals = squared_latin_capital_letter_n;
			return 1;
		case 0x1F13E:
			*normals = squared_latin_capital_letter_o;
			return 1;
		case 0x1F13F:
			*normals = squared_latin_capital_letter_p;
			return 1;
		case 0x1F140:
			*normals = squared_latin_capital_letter_q;
			return 1;
		case 0x1F141:
			*normals = squared_latin_capital_letter_r;
			return 1;
		case 0x1F142:
			*normals = squared_latin_capital_letter_s;
			return 1;
		case 0x1F143:
			*normals = squared_latin_capital_letter_t;
			return 1;
		case 0x1F144:
			*normals = squared_latin_capital_letter_u;
			return 1;
		case 0x1F145:
			*normals = squared_latin_capital_letter_v;
			return 1;
		case 0x1F146:
			*normals = squared_latin_capital_letter_w;
			return 1;
		case 0x1F147:
			*normals = squared_latin_capital_letter_x;
			return 1;
		case 0x1F148:
			*normals = squared_latin_capital_letter_y;
			return 1;
		case 0x1F149:
			*normals = squared_latin_capital_letter_z;
			return 1;
		case 0x1F14A:
			*normals = squared_hv;
			return 2;
		case 0x1F14B:
			*normals = squared_mv;
			return 2;
		case 0x1F14C:
			*normals = squared_sd;
			return 2;
		case 0x1F14D:
			*normals = squared_ss;
			return 2;
		case 0x1F14E:
			*normals = squared_ppv;
			return 3;
		case 0x1F14F:
			*normals = squared_wc;
			return 2;
		case 0x1F16A:
			*normals = raised_mc_sign;
			return 2;
		case 0x1F16B:
			*normals = raised_md_sign;
			return 2;
		case 0x1F16C:
			*normals = raised_mr_sign;
			return 2;
		case 0x1F190:
			*normals = square_dj;
			return 2;
		case 0x1F200:
			*normals = square_hiragana_hoka;
			return 2;
		case 0x1F201:
			*normals = squared_katakana_koko;
			return 2;
		case 0x1F202:
			*normals = squared_katakana_sa;
			return 1;
		case 0x1F210:
			*normals = squared_cjk_unified_ideograph_624b;
			return 1;
		case 0x1F211:
			*normals = squared_cjk_unified_ideograph_5b57;
			return 1;
		case 0x1F212:
			*normals = squared_cjk_unified_ideograph_53cc;
			return 1;
		case 0x1F213:
			*normals = squared_katakana_de;
			return 1;
		case 0x1F214:
			*normals = squared_cjk_unified_ideograph_4e8c;
			return 1;
		case 0x1F215:
			*normals = squared_cjk_unified_ideograph_591a;
			return 1;
		case 0x1F216:
			*normals = squared_cjk_unified_ideograph_89e3;
			return 1;
		case 0x1F217:
			*normals = squared_cjk_unified_ideograph_5929;
			return 1;
		case 0x1F218:
			*normals = squared_cjk_unified_ideograph_4ea4;
			return 1;
		case 0x1F219:
			*normals = squared_cjk_unified_ideograph_6620;
			return 1;
		case 0x1F21A:
			*normals = squared_cjk_unified_ideograph_7121;
			return 1;
		case 0x1F21B:
			*normals = squared_cjk_unified_ideograph_6599;
			return 1;
		case 0x1F21C:
			*normals = squared_cjk_unified_ideograph_524d;
			return 1;
		case 0x1F21D:
			*normals = squared_cjk_unified_ideograph_5f8c;
			return 1;
		case 0x1F21E:
			*normals = squared_cjk_unified_ideograph_518d;
			return 1;
		case 0x1F21F:
			*normals = squared_cjk_unified_ideograph_65b0;
			return 1;
		case 0x1F220:
			*normals = squared_cjk_unified_ideograph_521d;
			return 1;
		case 0x1F221:
			*normals = squared_cjk_unified_ideograph_7d42;
			return 1;
		case 0x1F222:
			*normals = squared_cjk_unified_ideograph_751f;
			return 1;
		case 0x1F223:
			*normals = squared_cjk_unified_ideograph_8ca9;
			return 1;
		case 0x1F224:
			*normals = squared_cjk_unified_ideograph_58f0;
			return 1;
		case 0x1F225:
			*normals = squared_cjk_unified_ideograph_5439;
			return 1;
		case 0x1F226:
			*normals = squared_cjk_unified_ideograph_6f14;
			return 1;
		case 0x1F227:
			*normals = squared_cjk_unified_ideograph_6295;
			return 1;
		case 0x1F228:
			*normals = squared_cjk_unified_ideograph_6355;
			return 1;
		case 0x1F229:
			*normals = squared_cjk_unified_ideograph_4e00;
			return 1;
		case 0x1F22A:
			*normals = squared_cjk_unified_ideograph_4e09;
			return 1;
		case 0x1F22B:
			*normals = squared_cjk_unified_ideograph_904a;
			return 1;
		case 0x1F22C:
			*normals = squared_cjk_unified_ideograph_5de6;
			return 1;
		case 0x1F22D:
			*normals = squared_cjk_unified_ideograph_4e2d;
			return 1;
		case 0x1F22E:
			*normals = squared_cjk_unified_ideograph_53f3;
			return 1;
		case 0x1F22F:
			*normals = squared_cjk_unified_ideograph_6307;
			return 1;
		case 0x1F230:
			*normals = squared_cjk_unified_ideograph_8d70;
			return 1;
		case 0x1F231:
			*normals = squared_cjk_unified_ideograph_6253;
			return 1;
		case 0x1F232:
			*normals = squared_cjk_unified_ideograph_7981;
			return 1;
		case 0x1F233:
			*normals = squared_cjk_unified_ideograph_7a7a;
			return 1;
		case 0x1F234:
			*normals = squared_cjk_unified_ideograph_5408;
			return 1;
		case 0x1F235:
			*normals = squared_cjk_unified_ideograph_6e80;
			return 1;
		case 0x1F236:
			*normals = squared_cjk_unified_ideograph_6709;
			return 1;
		case 0x1F237:
			*normals = squared_cjk_unified_ideograph_6708;
			return 1;
		case 0x1F238:
			*normals = squared_cjk_unified_ideograph_7533;
			return 1;
		case 0x1F239:
			*normals = squared_cjk_unified_ideograph_5272;
			return 1;
		case 0x1F23A:
			*normals = squared_cjk_unified_ideograph_55b6;
			return 1;
		case 0x1F23B:
			*normals = squared_cjk_unified_ideograph_914d;
			return 1;
		case 0x1F240:
			*normals = tortoise_shell_bracketed_cjk_unified_ideograph_672c;
			return 3;
		case 0x1F241:
			*normals = tortoise_shell_bracketed_cjk_unified_ideograph_4e09;
			return 3;
		case 0x1F242:
			*normals = tortoise_shell_bracketed_cjk_unified_ideograph_4e8c;
			return 3;
		case 0x1F243:
			*normals = tortoise_shell_bracketed_cjk_unified_ideograph_5b89;
			return 3;
		case 0x1F244:
			*normals = tortoise_shell_bracketed_cjk_unified_ideograph_70b9;
			return 3;
		case 0x1F245:
			*normals = tortoise_shell_bracketed_cjk_unified_ideograph_6253;
			return 3;
		case 0x1F246:
			*normals = tortoise_shell_bracketed_cjk_unified_ideograph_76d7;
			return 3;
		case 0x1F247:
			*normals = tortoise_shell_bracketed_cjk_unified_ideograph_52dd;
			return 3;
		case 0x1F248:
			*normals = tortoise_shell_bracketed_cjk_unified_ideograph_6557;
			return 3;
		case 0x1F250:
			*normals = circled_ideograph_advantage;
			return 1;
		case 0x1F251:
			*normals = circled_ideograph_accept;
			return 1;
		case 0x1FBF0:
			*normals = segmented_digit_zero;
			return 1;
		case 0x1FBF1:
			*normals = segmented_digit_one;
			return 1;
		case 0x1FBF2:
			*normals = segmented_digit_two;
			return 1;
		case 0x1FBF3:
			*normals = segmented_digit_three;
			return 1;
		case 0x1FBF4:
			*normals = segmented_digit_four;
			return 1;
		case 0x1FBF5:
			*normals = segmented_digit_five;
			return 1;
		case 0x1FBF6:
			*normals = segmented_digit_six;
			return 1;
		case 0x1FBF7:
			*normals = segmented_digit_seven;
			return 1;
		case 0x1FBF8:
			*normals = segmented_digit_eight;
			return 1;
		case 0x1FBF9:
			*normals = segmented_digit_nine;
			return 1;
		case 0x2F800:
			*normals = cjk_compatibility_ideograph_2f800;
			return 1;
		case 0x2F801:
			*normals = cjk_compatibility_ideograph_2f801;
			return 1;
		case 0x2F802:
			*normals = cjk_compatibility_ideograph_2f802;
			return 1;
		case 0x2F803:
			*normals = cjk_compatibility_ideograph_2f803;
			return 1;
		case 0x2F804:
			*normals = cjk_compatibility_ideograph_2f804;
			return 1;
		case 0x2F805:
			*normals = cjk_compatibility_ideograph_2f805;
			return 1;
		case 0x2F806:
			*normals = cjk_compatibility_ideograph_2f806;
			return 1;
		case 0x2F807:
			*normals = cjk_compatibility_ideograph_2f807;
			return 1;
		case 0x2F808:
			*normals = cjk_compatibility_ideograph_2f808;
			return 1;
		case 0x2F809:
			*normals = cjk_compatibility_ideograph_2f809;
			return 1;
		case 0x2F80A:
			*normals = cjk_compatibility_ideograph_2f80a;
			return 1;
		case 0x2F80B:
			*normals = cjk_compatibility_ideograph_2f80b;
			return 1;
		case 0x2F80C:
			*normals = cjk_compatibility_ideograph_2f80c;
			return 1;
		case 0x2F80D:
			*normals = cjk_compatibility_ideograph_2f80d;
			return 1;
		case 0x2F80E:
			*normals = cjk_compatibility_ideograph_2f80e;
			return 1;
		case 0x2F80F:
			*normals = cjk_compatibility_ideograph_2f80f;
			return 1;
		case 0x2F810:
			*normals = cjk_compatibility_ideograph_2f810;
			return 1;
		case 0x2F811:
			*normals = cjk_compatibility_ideograph_2f811;
			return 1;
		case 0x2F812:
			*normals = cjk_compatibility_ideograph_2f812;
			return 1;
		case 0x2F813:
			*normals = cjk_compatibility_ideograph_2f813;
			return 1;
		case 0x2F814:
			*normals = cjk_compatibility_ideograph_2f814;
			return 1;
		case 0x2F815:
			*normals = cjk_compatibility_ideograph_2f815;
			return 1;
		case 0x2F816:
			*normals = cjk_compatibility_ideograph_2f816;
			return 1;
		case 0x2F817:
			*normals = cjk_compatibility_ideograph_2f817;
			return 1;
		case 0x2F818:
			*normals = cjk_compatibility_ideograph_2f818;
			return 1;
		case 0x2F819:
			*normals = cjk_compatibility_ideograph_2f819;
			return 1;
		case 0x2F81A:
			*normals = cjk_compatibility_ideograph_2f81a;
			return 1;
		case 0x2F81B:
			*normals = cjk_compatibility_ideograph_2f81b;
			return 1;
		case 0x2F81C:
			*normals = cjk_compatibility_ideograph_2f81c;
			return 1;
		case 0x2F81D:
			*normals = cjk_compatibility_ideograph_2f81d;
			return 1;
		case 0x2F81E:
			*normals = cjk_compatibility_ideograph_2f81e;
			return 1;
		case 0x2F81F:
			*normals = cjk_compatibility_ideograph_2f81f;
			return 1;
		case 0x2F820:
			*normals = cjk_compatibility_ideograph_2f820;
			return 1;
		case 0x2F821:
			*normals = cjk_compatibility_ideograph_2f821;
			return 1;
		case 0x2F822:
			*normals = cjk_compatibility_ideograph_2f822;
			return 1;
		case 0x2F823:
			*normals = cjk_compatibility_ideograph_2f823;
			return 1;
		case 0x2F824:
			*normals = cjk_compatibility_ideograph_2f824;
			return 1;
		case 0x2F825:
			*normals = cjk_compatibility_ideograph_2f825;
			return 1;
		case 0x2F826:
			*normals = cjk_compatibility_ideograph_2f826;
			return 1;
		case 0x2F827:
			*normals = cjk_compatibility_ideograph_2f827;
			return 1;
		case 0x2F828:
			*normals = cjk_compatibility_ideograph_2f828;
			return 1;
		case 0x2F829:
			*normals = cjk_compatibility_ideograph_2f829;
			return 1;
		case 0x2F82A:
			*normals = cjk_compatibility_ideograph_2f82a;
			return 1;
		case 0x2F82B:
			*normals = cjk_compatibility_ideograph_2f82b;
			return 1;
		case 0x2F82C:
			*normals = cjk_compatibility_ideograph_2f82c;
			return 1;
		case 0x2F82D:
			*normals = cjk_compatibility_ideograph_2f82d;
			return 1;
		case 0x2F82E:
			*normals = cjk_compatibility_ideograph_2f82e;
			return 1;
		case 0x2F82F:
			*normals = cjk_compatibility_ideograph_2f82f;
			return 1;
		case 0x2F830:
			*normals = cjk_compatibility_ideograph_2f830;
			return 1;
		case 0x2F831:
			*normals = cjk_compatibility_ideograph_2f831;
			return 1;
		case 0x2F832:
			*normals = cjk_compatibility_ideograph_2f832;
			return 1;
		case 0x2F833:
			*normals = cjk_compatibility_ideograph_2f833;
			return 1;
		case 0x2F834:
			*normals = cjk_compatibility_ideograph_2f834;
			return 1;
		case 0x2F835:
			*normals = cjk_compatibility_ideograph_2f835;
			return 1;
		case 0x2F836:
			*normals = cjk_compatibility_ideograph_2f836;
			return 1;
		case 0x2F837:
			*normals = cjk_compatibility_ideograph_2f837;
			return 1;
		case 0x2F838:
			*normals = cjk_compatibility_ideograph_2f838;
			return 1;
		case 0x2F839:
			*normals = cjk_compatibility_ideograph_2f839;
			return 1;
		case 0x2F83A:
			*normals = cjk_compatibility_ideograph_2f83a;
			return 1;
		case 0x2F83B:
			*normals = cjk_compatibility_ideograph_2f83b;
			return 1;
		case 0x2F83C:
			*normals = cjk_compatibility_ideograph_2f83c;
			return 1;
		case 0x2F83D:
			*normals = cjk_compatibility_ideograph_2f83d;
			return 1;
		case 0x2F83E:
			*normals = cjk_compatibility_ideograph_2f83e;
			return 1;
		case 0x2F83F:
			*normals = cjk_compatibility_ideograph_2f83f;
			return 1;
		case 0x2F840:
			*normals = cjk_compatibility_ideograph_2f840;
			return 1;
		case 0x2F841:
			*normals = cjk_compatibility_ideograph_2f841;
			return 1;
		case 0x2F842:
			*normals = cjk_compatibility_ideograph_2f842;
			return 1;
		case 0x2F843:
			*normals = cjk_compatibility_ideograph_2f843;
			return 1;
		case 0x2F844:
			*normals = cjk_compatibility_ideograph_2f844;
			return 1;
		case 0x2F845:
			*normals = cjk_compatibility_ideograph_2f845;
			return 1;
		case 0x2F846:
			*normals = cjk_compatibility_ideograph_2f846;
			return 1;
		case 0x2F847:
			*normals = cjk_compatibility_ideograph_2f847;
			return 1;
		case 0x2F848:
			*normals = cjk_compatibility_ideograph_2f848;
			return 1;
		case 0x2F849:
			*normals = cjk_compatibility_ideograph_2f849;
			return 1;
		case 0x2F84A:
			*normals = cjk_compatibility_ideograph_2f84a;
			return 1;
		case 0x2F84B:
			*normals = cjk_compatibility_ideograph_2f84b;
			return 1;
		case 0x2F84C:
			*normals = cjk_compatibility_ideograph_2f84c;
			return 1;
		case 0x2F84D:
			*normals = cjk_compatibility_ideograph_2f84d;
			return 1;
		case 0x2F84E:
			*normals = cjk_compatibility_ideograph_2f84e;
			return 1;
		case 0x2F84F:
			*normals = cjk_compatibility_ideograph_2f84f;
			return 1;
		case 0x2F850:
			*normals = cjk_compatibility_ideograph_2f850;
			return 1;
		case 0x2F851:
			*normals = cjk_compatibility_ideograph_2f851;
			return 1;
		case 0x2F852:
			*normals = cjk_compatibility_ideograph_2f852;
			return 1;
		case 0x2F853:
			*normals = cjk_compatibility_ideograph_2f853;
			return 1;
		case 0x2F854:
			*normals = cjk_compatibility_ideograph_2f854;
			return 1;
		case 0x2F855:
			*normals = cjk_compatibility_ideograph_2f855;
			return 1;
		case 0x2F856:
			*normals = cjk_compatibility_ideograph_2f856;
			return 1;
		case 0x2F857:
			*normals = cjk_compatibility_ideograph_2f857;
			return 1;
		case 0x2F858:
			*normals = cjk_compatibility_ideograph_2f858;
			return 1;
		case 0x2F859:
			*normals = cjk_compatibility_ideograph_2f859;
			return 1;
		case 0x2F85A:
			*normals = cjk_compatibility_ideograph_2f85a;
			return 1;
		case 0x2F85B:
			*normals = cjk_compatibility_ideograph_2f85b;
			return 1;
		case 0x2F85C:
			*normals = cjk_compatibility_ideograph_2f85c;
			return 1;
		case 0x2F85D:
			*normals = cjk_compatibility_ideograph_2f85d;
			return 1;
		case 0x2F85E:
			*normals = cjk_compatibility_ideograph_2f85e;
			return 1;
		case 0x2F85F:
			*normals = cjk_compatibility_ideograph_2f85f;
			return 1;
		case 0x2F860:
			*normals = cjk_compatibility_ideograph_2f860;
			return 1;
		case 0x2F861:
			*normals = cjk_compatibility_ideograph_2f861;
			return 1;
		case 0x2F862:
			*normals = cjk_compatibility_ideograph_2f862;
			return 1;
		case 0x2F863:
			*normals = cjk_compatibility_ideograph_2f863;
			return 1;
		case 0x2F864:
			*normals = cjk_compatibility_ideograph_2f864;
			return 1;
		case 0x2F865:
			*normals = cjk_compatibility_ideograph_2f865;
			return 1;
		case 0x2F866:
			*normals = cjk_compatibility_ideograph_2f866;
			return 1;
		case 0x2F867:
			*normals = cjk_compatibility_ideograph_2f867;
			return 1;
		case 0x2F868:
			*normals = cjk_compatibility_ideograph_2f868;
			return 1;
		case 0x2F869:
			*normals = cjk_compatibility_ideograph_2f869;
			return 1;
		case 0x2F86A:
			*normals = cjk_compatibility_ideograph_2f86a;
			return 1;
		case 0x2F86B:
			*normals = cjk_compatibility_ideograph_2f86b;
			return 1;
		case 0x2F86C:
			*normals = cjk_compatibility_ideograph_2f86c;
			return 1;
		case 0x2F86D:
			*normals = cjk_compatibility_ideograph_2f86d;
			return 1;
		case 0x2F86E:
			*normals = cjk_compatibility_ideograph_2f86e;
			return 1;
		case 0x2F86F:
			*normals = cjk_compatibility_ideograph_2f86f;
			return 1;
		case 0x2F870:
			*normals = cjk_compatibility_ideograph_2f870;
			return 1;
		case 0x2F871:
			*normals = cjk_compatibility_ideograph_2f871;
			return 1;
		case 0x2F872:
			*normals = cjk_compatibility_ideograph_2f872;
			return 1;
		case 0x2F873:
			*normals = cjk_compatibility_ideograph_2f873;
			return 1;
		case 0x2F874:
			*normals = cjk_compatibility_ideograph_2f874;
			return 1;
		case 0x2F875:
			*normals = cjk_compatibility_ideograph_2f875;
			return 1;
		case 0x2F876:
			*normals = cjk_compatibility_ideograph_2f876;
			return 1;
		case 0x2F877:
			*normals = cjk_compatibility_ideograph_2f877;
			return 1;
		case 0x2F878:
			*normals = cjk_compatibility_ideograph_2f878;
			return 1;
		case 0x2F879:
			*normals = cjk_compatibility_ideograph_2f879;
			return 1;
		case 0x2F87A:
			*normals = cjk_compatibility_ideograph_2f87a;
			return 1;
		case 0x2F87B:
			*normals = cjk_compatibility_ideograph_2f87b;
			return 1;
		case 0x2F87C:
			*normals = cjk_compatibility_ideograph_2f87c;
			return 1;
		case 0x2F87D:
			*normals = cjk_compatibility_ideograph_2f87d;
			return 1;
		case 0x2F87E:
			*normals = cjk_compatibility_ideograph_2f87e;
			return 1;
		case 0x2F87F:
			*normals = cjk_compatibility_ideograph_2f87f;
			return 1;
		case 0x2F880:
			*normals = cjk_compatibility_ideograph_2f880;
			return 1;
		case 0x2F881:
			*normals = cjk_compatibility_ideograph_2f881;
			return 1;
		case 0x2F882:
			*normals = cjk_compatibility_ideograph_2f882;
			return 1;
		case 0x2F883:
			*normals = cjk_compatibility_ideograph_2f883;
			return 1;
		case 0x2F884:
			*normals = cjk_compatibility_ideograph_2f884;
			return 1;
		case 0x2F885:
			*normals = cjk_compatibility_ideograph_2f885;
			return 1;
		case 0x2F886:
			*normals = cjk_compatibility_ideograph_2f886;
			return 1;
		case 0x2F887:
			*normals = cjk_compatibility_ideograph_2f887;
			return 1;
		case 0x2F888:
			*normals = cjk_compatibility_ideograph_2f888;
			return 1;
		case 0x2F889:
			*normals = cjk_compatibility_ideograph_2f889;
			return 1;
		case 0x2F88A:
			*normals = cjk_compatibility_ideograph_2f88a;
			return 1;
		case 0x2F88B:
			*normals = cjk_compatibility_ideograph_2f88b;
			return 1;
		case 0x2F88C:
			*normals = cjk_compatibility_ideograph_2f88c;
			return 1;
		case 0x2F88D:
			*normals = cjk_compatibility_ideograph_2f88d;
			return 1;
		case 0x2F88E:
			*normals = cjk_compatibility_ideograph_2f88e;
			return 1;
		case 0x2F88F:
			*normals = cjk_compatibility_ideograph_2f88f;
			return 1;
		case 0x2F890:
			*normals = cjk_compatibility_ideograph_2f890;
			return 1;
		case 0x2F891:
			*normals = cjk_compatibility_ideograph_2f891;
			return 1;
		case 0x2F892:
			*normals = cjk_compatibility_ideograph_2f892;
			return 1;
		case 0x2F893:
			*normals = cjk_compatibility_ideograph_2f893;
			return 1;
		case 0x2F894:
			*normals = cjk_compatibility_ideograph_2f894;
			return 1;
		case 0x2F895:
			*normals = cjk_compatibility_ideograph_2f895;
			return 1;
		case 0x2F896:
			*normals = cjk_compatibility_ideograph_2f896;
			return 1;
		case 0x2F897:
			*normals = cjk_compatibility_ideograph_2f897;
			return 1;
		case 0x2F898:
			*normals = cjk_compatibility_ideograph_2f898;
			return 1;
		case 0x2F899:
			*normals = cjk_compatibility_ideograph_2f899;
			return 1;
		case 0x2F89A:
			*normals = cjk_compatibility_ideograph_2f89a;
			return 1;
		case 0x2F89B:
			*normals = cjk_compatibility_ideograph_2f89b;
			return 1;
		case 0x2F89C:
			*normals = cjk_compatibility_ideograph_2f89c;
			return 1;
		case 0x2F89D:
			*normals = cjk_compatibility_ideograph_2f89d;
			return 1;
		case 0x2F89E:
			*normals = cjk_compatibility_ideograph_2f89e;
			return 1;
		case 0x2F89F:
			*normals = cjk_compatibility_ideograph_2f89f;
			return 1;
		case 0x2F8A0:
			*normals = cjk_compatibility_ideograph_2f8a0;
			return 1;
		case 0x2F8A1:
			*normals = cjk_compatibility_ideograph_2f8a1;
			return 1;
		case 0x2F8A2:
			*normals = cjk_compatibility_ideograph_2f8a2;
			return 1;
		case 0x2F8A3:
			*normals = cjk_compatibility_ideograph_2f8a3;
			return 1;
		case 0x2F8A4:
			*normals = cjk_compatibility_ideograph_2f8a4;
			return 1;
		case 0x2F8A5:
			*normals = cjk_compatibility_ideograph_2f8a5;
			return 1;
		case 0x2F8A6:
			*normals = cjk_compatibility_ideograph_2f8a6;
			return 1;
		case 0x2F8A7:
			*normals = cjk_compatibility_ideograph_2f8a7;
			return 1;
		case 0x2F8A8:
			*normals = cjk_compatibility_ideograph_2f8a8;
			return 1;
		case 0x2F8A9:
			*normals = cjk_compatibility_ideograph_2f8a9;
			return 1;
		case 0x2F8AA:
			*normals = cjk_compatibility_ideograph_2f8aa;
			return 1;
		case 0x2F8AB:
			*normals = cjk_compatibility_ideograph_2f8ab;
			return 1;
		case 0x2F8AC:
			*normals = cjk_compatibility_ideograph_2f8ac;
			return 1;
		case 0x2F8AD:
			*normals = cjk_compatibility_ideograph_2f8ad;
			return 1;
		case 0x2F8AE:
			*normals = cjk_compatibility_ideograph_2f8ae;
			return 1;
		case 0x2F8AF:
			*normals = cjk_compatibility_ideograph_2f8af;
			return 1;
		case 0x2F8B0:
			*normals = cjk_compatibility_ideograph_2f8b0;
			return 1;
		case 0x2F8B1:
			*normals = cjk_compatibility_ideograph_2f8b1;
			return 1;
		case 0x2F8B2:
			*normals = cjk_compatibility_ideograph_2f8b2;
			return 1;
		case 0x2F8B3:
			*normals = cjk_compatibility_ideograph_2f8b3;
			return 1;
		case 0x2F8B4:
			*normals = cjk_compatibility_ideograph_2f8b4;
			return 1;
		case 0x2F8B5:
			*normals = cjk_compatibility_ideograph_2f8b5;
			return 1;
		case 0x2F8B6:
			*normals = cjk_compatibility_ideograph_2f8b6;
			return 1;
		case 0x2F8B7:
			*normals = cjk_compatibility_ideograph_2f8b7;
			return 1;
		case 0x2F8B8:
			*normals = cjk_compatibility_ideograph_2f8b8;
			return 1;
		case 0x2F8B9:
			*normals = cjk_compatibility_ideograph_2f8b9;
			return 1;
		case 0x2F8BA:
			*normals = cjk_compatibility_ideograph_2f8ba;
			return 1;
		case 0x2F8BB:
			*normals = cjk_compatibility_ideograph_2f8bb;
			return 1;
		case 0x2F8BC:
			*normals = cjk_compatibility_ideograph_2f8bc;
			return 1;
		case 0x2F8BD:
			*normals = cjk_compatibility_ideograph_2f8bd;
			return 1;
		case 0x2F8BE:
			*normals = cjk_compatibility_ideograph_2f8be;
			return 1;
		case 0x2F8BF:
			*normals = cjk_compatibility_ideograph_2f8bf;
			return 1;
		case 0x2F8C0:
			*normals = cjk_compatibility_ideograph_2f8c0;
			return 1;
		case 0x2F8C1:
			*normals = cjk_compatibility_ideograph_2f8c1;
			return 1;
		case 0x2F8C2:
			*normals = cjk_compatibility_ideograph_2f8c2;
			return 1;
		case 0x2F8C3:
			*normals = cjk_compatibility_ideograph_2f8c3;
			return 1;
		case 0x2F8C4:
			*normals = cjk_compatibility_ideograph_2f8c4;
			return 1;
		case 0x2F8C5:
			*normals = cjk_compatibility_ideograph_2f8c5;
			return 1;
		case 0x2F8C6:
			*normals = cjk_compatibility_ideograph_2f8c6;
			return 1;
		case 0x2F8C7:
			*normals = cjk_compatibility_ideograph_2f8c7;
			return 1;
		case 0x2F8C8:
			*normals = cjk_compatibility_ideograph_2f8c8;
			return 1;
		case 0x2F8C9:
			*normals = cjk_compatibility_ideograph_2f8c9;
			return 1;
		case 0x2F8CA:
			*normals = cjk_compatibility_ideograph_2f8ca;
			return 1;
		case 0x2F8CB:
			*normals = cjk_compatibility_ideograph_2f8cb;
			return 1;
		case 0x2F8CC:
			*normals = cjk_compatibility_ideograph_2f8cc;
			return 1;
		case 0x2F8CD:
			*normals = cjk_compatibility_ideograph_2f8cd;
			return 1;
		case 0x2F8CE:
			*normals = cjk_compatibility_ideograph_2f8ce;
			return 1;
		case 0x2F8CF:
			*normals = cjk_compatibility_ideograph_2f8cf;
			return 1;
		case 0x2F8D0:
			*normals = cjk_compatibility_ideograph_2f8d0;
			return 1;
		case 0x2F8D1:
			*normals = cjk_compatibility_ideograph_2f8d1;
			return 1;
		case 0x2F8D2:
			*normals = cjk_compatibility_ideograph_2f8d2;
			return 1;
		case 0x2F8D3:
			*normals = cjk_compatibility_ideograph_2f8d3;
			return 1;
		case 0x2F8D4:
			*normals = cjk_compatibility_ideograph_2f8d4;
			return 1;
		case 0x2F8D5:
			*normals = cjk_compatibility_ideograph_2f8d5;
			return 1;
		case 0x2F8D6:
			*normals = cjk_compatibility_ideograph_2f8d6;
			return 1;
		case 0x2F8D7:
			*normals = cjk_compatibility_ideograph_2f8d7;
			return 1;
		case 0x2F8D8:
			*normals = cjk_compatibility_ideograph_2f8d8;
			return 1;
		case 0x2F8D9:
			*normals = cjk_compatibility_ideograph_2f8d9;
			return 1;
		case 0x2F8DA:
			*normals = cjk_compatibility_ideograph_2f8da;
			return 1;
		case 0x2F8DB:
			*normals = cjk_compatibility_ideograph_2f8db;
			return 1;
		case 0x2F8DC:
			*normals = cjk_compatibility_ideograph_2f8dc;
			return 1;
		case 0x2F8DD:
			*normals = cjk_compatibility_ideograph_2f8dd;
			return 1;
		case 0x2F8DE:
			*normals = cjk_compatibility_ideograph_2f8de;
			return 1;
		case 0x2F8DF:
			*normals = cjk_compatibility_ideograph_2f8df;
			return 1;
		case 0x2F8E0:
			*normals = cjk_compatibility_ideograph_2f8e0;
			return 1;
		case 0x2F8E1:
			*normals = cjk_compatibility_ideograph_2f8e1;
			return 1;
		case 0x2F8E2:
			*normals = cjk_compatibility_ideograph_2f8e2;
			return 1;
		case 0x2F8E3:
			*normals = cjk_compatibility_ideograph_2f8e3;
			return 1;
		case 0x2F8E4:
			*normals = cjk_compatibility_ideograph_2f8e4;
			return 1;
		case 0x2F8E5:
			*normals = cjk_compatibility_ideograph_2f8e5;
			return 1;
		case 0x2F8E6:
			*normals = cjk_compatibility_ideograph_2f8e6;
			return 1;
		case 0x2F8E7:
			*normals = cjk_compatibility_ideograph_2f8e7;
			return 1;
		case 0x2F8E8:
			*normals = cjk_compatibility_ideograph_2f8e8;
			return 1;
		case 0x2F8E9:
			*normals = cjk_compatibility_ideograph_2f8e9;
			return 1;
		case 0x2F8EA:
			*normals = cjk_compatibility_ideograph_2f8ea;
			return 1;
		case 0x2F8EB:
			*normals = cjk_compatibility_ideograph_2f8eb;
			return 1;
		case 0x2F8EC:
			*normals = cjk_compatibility_ideograph_2f8ec;
			return 1;
		case 0x2F8ED:
			*normals = cjk_compatibility_ideograph_2f8ed;
			return 1;
		case 0x2F8EE:
			*normals = cjk_compatibility_ideograph_2f8ee;
			return 1;
		case 0x2F8EF:
			*normals = cjk_compatibility_ideograph_2f8ef;
			return 1;
		case 0x2F8F0:
			*normals = cjk_compatibility_ideograph_2f8f0;
			return 1;
		case 0x2F8F1:
			*normals = cjk_compatibility_ideograph_2f8f1;
			return 1;
		case 0x2F8F2:
			*normals = cjk_compatibility_ideograph_2f8f2;
			return 1;
		case 0x2F8F3:
			*normals = cjk_compatibility_ideograph_2f8f3;
			return 1;
		case 0x2F8F4:
			*normals = cjk_compatibility_ideograph_2f8f4;
			return 1;
		case 0x2F8F5:
			*normals = cjk_compatibility_ideograph_2f8f5;
			return 1;
		case 0x2F8F6:
			*normals = cjk_compatibility_ideograph_2f8f6;
			return 1;
		case 0x2F8F7:
			*normals = cjk_compatibility_ideograph_2f8f7;
			return 1;
		case 0x2F8F8:
			*normals = cjk_compatibility_ideograph_2f8f8;
			return 1;
		case 0x2F8F9:
			*normals = cjk_compatibility_ideograph_2f8f9;
			return 1;
		case 0x2F8FA:
			*normals = cjk_compatibility_ideograph_2f8fa;
			return 1;
		case 0x2F8FB:
			*normals = cjk_compatibility_ideograph_2f8fb;
			return 1;
		case 0x2F8FC:
			*normals = cjk_compatibility_ideograph_2f8fc;
			return 1;
		case 0x2F8FD:
			*normals = cjk_compatibility_ideograph_2f8fd;
			return 1;
		case 0x2F8FE:
			*normals = cjk_compatibility_ideograph_2f8fe;
			return 1;
		case 0x2F8FF:
			*normals = cjk_compatibility_ideograph_2f8ff;
			return 1;
		case 0x2F900:
			*normals = cjk_compatibility_ideograph_2f900;
			return 1;
		case 0x2F901:
			*normals = cjk_compatibility_ideograph_2f901;
			return 1;
		case 0x2F902:
			*normals = cjk_compatibility_ideograph_2f902;
			return 1;
		case 0x2F903:
			*normals = cjk_compatibility_ideograph_2f903;
			return 1;
		case 0x2F904:
			*normals = cjk_compatibility_ideograph_2f904;
			return 1;
		case 0x2F905:
			*normals = cjk_compatibility_ideograph_2f905;
			return 1;
		case 0x2F906:
			*normals = cjk_compatibility_ideograph_2f906;
			return 1;
		case 0x2F907:
			*normals = cjk_compatibility_ideograph_2f907;
			return 1;
		case 0x2F908:
			*normals = cjk_compatibility_ideograph_2f908;
			return 1;
		case 0x2F909:
			*normals = cjk_compatibility_ideograph_2f909;
			return 1;
		case 0x2F90A:
			*normals = cjk_compatibility_ideograph_2f90a;
			return 1;
		case 0x2F90B:
			*normals = cjk_compatibility_ideograph_2f90b;
			return 1;
		case 0x2F90C:
			*normals = cjk_compatibility_ideograph_2f90c;
			return 1;
		case 0x2F90D:
			*normals = cjk_compatibility_ideograph_2f90d;
			return 1;
		case 0x2F90E:
			*normals = cjk_compatibility_ideograph_2f90e;
			return 1;
		case 0x2F90F:
			*normals = cjk_compatibility_ideograph_2f90f;
			return 1;
		case 0x2F910:
			*normals = cjk_compatibility_ideograph_2f910;
			return 1;
		case 0x2F911:
			*normals = cjk_compatibility_ideograph_2f911;
			return 1;
		case 0x2F912:
			*normals = cjk_compatibility_ideograph_2f912;
			return 1;
		case 0x2F913:
			*normals = cjk_compatibility_ideograph_2f913;
			return 1;
		case 0x2F914:
			*normals = cjk_compatibility_ideograph_2f914;
			return 1;
		case 0x2F915:
			*normals = cjk_compatibility_ideograph_2f915;
			return 1;
		case 0x2F916:
			*normals = cjk_compatibility_ideograph_2f916;
			return 1;
		case 0x2F917:
			*normals = cjk_compatibility_ideograph_2f917;
			return 1;
		case 0x2F918:
			*normals = cjk_compatibility_ideograph_2f918;
			return 1;
		case 0x2F919:
			*normals = cjk_compatibility_ideograph_2f919;
			return 1;
		case 0x2F91A:
			*normals = cjk_compatibility_ideograph_2f91a;
			return 1;
		case 0x2F91B:
			*normals = cjk_compatibility_ideograph_2f91b;
			return 1;
		case 0x2F91C:
			*normals = cjk_compatibility_ideograph_2f91c;
			return 1;
		case 0x2F91D:
			*normals = cjk_compatibility_ideograph_2f91d;
			return 1;
		case 0x2F91E:
			*normals = cjk_compatibility_ideograph_2f91e;
			return 1;
		case 0x2F91F:
			*normals = cjk_compatibility_ideograph_2f91f;
			return 1;
		case 0x2F920:
			*normals = cjk_compatibility_ideograph_2f920;
			return 1;
		case 0x2F921:
			*normals = cjk_compatibility_ideograph_2f921;
			return 1;
		case 0x2F922:
			*normals = cjk_compatibility_ideograph_2f922;
			return 1;
		case 0x2F923:
			*normals = cjk_compatibility_ideograph_2f923;
			return 1;
		case 0x2F924:
			*normals = cjk_compatibility_ideograph_2f924;
			return 1;
		case 0x2F925:
			*normals = cjk_compatibility_ideograph_2f925;
			return 1;
		case 0x2F926:
			*normals = cjk_compatibility_ideograph_2f926;
			return 1;
		case 0x2F927:
			*normals = cjk_compatibility_ideograph_2f927;
			return 1;
		case 0x2F928:
			*normals = cjk_compatibility_ideograph_2f928;
			return 1;
		case 0x2F929:
			*normals = cjk_compatibility_ideograph_2f929;
			return 1;
		case 0x2F92A:
			*normals = cjk_compatibility_ideograph_2f92a;
			return 1;
		case 0x2F92B:
			*normals = cjk_compatibility_ideograph_2f92b;
			return 1;
		case 0x2F92C:
			*normals = cjk_compatibility_ideograph_2f92c;
			return 1;
		case 0x2F92D:
			*normals = cjk_compatibility_ideograph_2f92d;
			return 1;
		case 0x2F92E:
			*normals = cjk_compatibility_ideograph_2f92e;
			return 1;
		case 0x2F92F:
			*normals = cjk_compatibility_ideograph_2f92f;
			return 1;
		case 0x2F930:
			*normals = cjk_compatibility_ideograph_2f930;
			return 1;
		case 0x2F931:
			*normals = cjk_compatibility_ideograph_2f931;
			return 1;
		case 0x2F932:
			*normals = cjk_compatibility_ideograph_2f932;
			return 1;
		case 0x2F933:
			*normals = cjk_compatibility_ideograph_2f933;
			return 1;
		case 0x2F934:
			*normals = cjk_compatibility_ideograph_2f934;
			return 1;
		case 0x2F935:
			*normals = cjk_compatibility_ideograph_2f935;
			return 1;
		case 0x2F936:
			*normals = cjk_compatibility_ideograph_2f936;
			return 1;
		case 0x2F937:
			*normals = cjk_compatibility_ideograph_2f937;
			return 1;
		case 0x2F938:
			*normals = cjk_compatibility_ideograph_2f938;
			return 1;
		case 0x2F939:
			*normals = cjk_compatibility_ideograph_2f939;
			return 1;
		case 0x2F93A:
			*normals = cjk_compatibility_ideograph_2f93a;
			return 1;
		case 0x2F93B:
			*normals = cjk_compatibility_ideograph_2f93b;
			return 1;
		case 0x2F93C:
			*normals = cjk_compatibility_ideograph_2f93c;
			return 1;
		case 0x2F93D:
			*normals = cjk_compatibility_ideograph_2f93d;
			return 1;
		case 0x2F93E:
			*normals = cjk_compatibility_ideograph_2f93e;
			return 1;
		case 0x2F93F:
			*normals = cjk_compatibility_ideograph_2f93f;
			return 1;
		case 0x2F940:
			*normals = cjk_compatibility_ideograph_2f940;
			return 1;
		case 0x2F941:
			*normals = cjk_compatibility_ideograph_2f941;
			return 1;
		case 0x2F942:
			*normals = cjk_compatibility_ideograph_2f942;
			return 1;
		case 0x2F943:
			*normals = cjk_compatibility_ideograph_2f943;
			return 1;
		case 0x2F944:
			*normals = cjk_compatibility_ideograph_2f944;
			return 1;
		case 0x2F945:
			*normals = cjk_compatibility_ideograph_2f945;
			return 1;
		case 0x2F946:
			*normals = cjk_compatibility_ideograph_2f946;
			return 1;
		case 0x2F947:
			*normals = cjk_compatibility_ideograph_2f947;
			return 1;
		case 0x2F948:
			*normals = cjk_compatibility_ideograph_2f948;
			return 1;
		case 0x2F949:
			*normals = cjk_compatibility_ideograph_2f949;
			return 1;
		case 0x2F94A:
			*normals = cjk_compatibility_ideograph_2f94a;
			return 1;
		case 0x2F94B:
			*normals = cjk_compatibility_ideograph_2f94b;
			return 1;
		case 0x2F94C:
			*normals = cjk_compatibility_ideograph_2f94c;
			return 1;
		case 0x2F94D:
			*normals = cjk_compatibility_ideograph_2f94d;
			return 1;
		case 0x2F94E:
			*normals = cjk_compatibility_ideograph_2f94e;
			return 1;
		case 0x2F94F:
			*normals = cjk_compatibility_ideograph_2f94f;
			return 1;
		case 0x2F950:
			*normals = cjk_compatibility_ideograph_2f950;
			return 1;
		case 0x2F951:
			*normals = cjk_compatibility_ideograph_2f951;
			return 1;
		case 0x2F952:
			*normals = cjk_compatibility_ideograph_2f952;
			return 1;
		case 0x2F953:
			*normals = cjk_compatibility_ideograph_2f953;
			return 1;
		case 0x2F954:
			*normals = cjk_compatibility_ideograph_2f954;
			return 1;
		case 0x2F955:
			*normals = cjk_compatibility_ideograph_2f955;
			return 1;
		case 0x2F956:
			*normals = cjk_compatibility_ideograph_2f956;
			return 1;
		case 0x2F957:
			*normals = cjk_compatibility_ideograph_2f957;
			return 1;
		case 0x2F958:
			*normals = cjk_compatibility_ideograph_2f958;
			return 1;
		case 0x2F959:
			*normals = cjk_compatibility_ideograph_2f959;
			return 1;
		case 0x2F95A:
			*normals = cjk_compatibility_ideograph_2f95a;
			return 1;
		case 0x2F95B:
			*normals = cjk_compatibility_ideograph_2f95b;
			return 1;
		case 0x2F95C:
			*normals = cjk_compatibility_ideograph_2f95c;
			return 1;
		case 0x2F95D:
			*normals = cjk_compatibility_ideograph_2f95d;
			return 1;
		case 0x2F95E:
			*normals = cjk_compatibility_ideograph_2f95e;
			return 1;
		case 0x2F95F:
			*normals = cjk_compatibility_ideograph_2f95f;
			return 1;
		case 0x2F960:
			*normals = cjk_compatibility_ideograph_2f960;
			return 1;
		case 0x2F961:
			*normals = cjk_compatibility_ideograph_2f961;
			return 1;
		case 0x2F962:
			*normals = cjk_compatibility_ideograph_2f962;
			return 1;
		case 0x2F963:
			*normals = cjk_compatibility_ideograph_2f963;
			return 1;
		case 0x2F964:
			*normals = cjk_compatibility_ideograph_2f964;
			return 1;
		case 0x2F965:
			*normals = cjk_compatibility_ideograph_2f965;
			return 1;
		case 0x2F966:
			*normals = cjk_compatibility_ideograph_2f966;
			return 1;
		case 0x2F967:
			*normals = cjk_compatibility_ideograph_2f967;
			return 1;
		case 0x2F968:
			*normals = cjk_compatibility_ideograph_2f968;
			return 1;
		case 0x2F969:
			*normals = cjk_compatibility_ideograph_2f969;
			return 1;
		case 0x2F96A:
			*normals = cjk_compatibility_ideograph_2f96a;
			return 1;
		case 0x2F96B:
			*normals = cjk_compatibility_ideograph_2f96b;
			return 1;
		case 0x2F96C:
			*normals = cjk_compatibility_ideograph_2f96c;
			return 1;
		case 0x2F96D:
			*normals = cjk_compatibility_ideograph_2f96d;
			return 1;
		case 0x2F96E:
			*normals = cjk_compatibility_ideograph_2f96e;
			return 1;
		case 0x2F96F:
			*normals = cjk_compatibility_ideograph_2f96f;
			return 1;
		case 0x2F970:
			*normals = cjk_compatibility_ideograph_2f970;
			return 1;
		case 0x2F971:
			*normals = cjk_compatibility_ideograph_2f971;
			return 1;
		case 0x2F972:
			*normals = cjk_compatibility_ideograph_2f972;
			return 1;
		case 0x2F973:
			*normals = cjk_compatibility_ideograph_2f973;
			return 1;
		case 0x2F974:
			*normals = cjk_compatibility_ideograph_2f974;
			return 1;
		case 0x2F975:
			*normals = cjk_compatibility_ideograph_2f975;
			return 1;
		case 0x2F976:
			*normals = cjk_compatibility_ideograph_2f976;
			return 1;
		case 0x2F977:
			*normals = cjk_compatibility_ideograph_2f977;
			return 1;
		case 0x2F978:
			*normals = cjk_compatibility_ideograph_2f978;
			return 1;
		case 0x2F979:
			*normals = cjk_compatibility_ideograph_2f979;
			return 1;
		case 0x2F97A:
			*normals = cjk_compatibility_ideograph_2f97a;
			return 1;
		case 0x2F97B:
			*normals = cjk_compatibility_ideograph_2f97b;
			return 1;
		case 0x2F97C:
			*normals = cjk_compatibility_ideograph_2f97c;
			return 1;
		case 0x2F97D:
			*normals = cjk_compatibility_ideograph_2f97d;
			return 1;
		case 0x2F97E:
			*normals = cjk_compatibility_ideograph_2f97e;
			return 1;
		case 0x2F97F:
			*normals = cjk_compatibility_ideograph_2f97f;
			return 1;
		case 0x2F980:
			*normals = cjk_compatibility_ideograph_2f980;
			return 1;
		case 0x2F981:
			*normals = cjk_compatibility_ideograph_2f981;
			return 1;
		case 0x2F982:
			*normals = cjk_compatibility_ideograph_2f982;
			return 1;
		case 0x2F983:
			*normals = cjk_compatibility_ideograph_2f983;
			return 1;
		case 0x2F984:
			*normals = cjk_compatibility_ideograph_2f984;
			return 1;
		case 0x2F985:
			*normals = cjk_compatibility_ideograph_2f985;
			return 1;
		case 0x2F986:
			*normals = cjk_compatibility_ideograph_2f986;
			return 1;
		case 0x2F987:
			*normals = cjk_compatibility_ideograph_2f987;
			return 1;
		case 0x2F988:
			*normals = cjk_compatibility_ideograph_2f988;
			return 1;
		case 0x2F989:
			*normals = cjk_compatibility_ideograph_2f989;
			return 1;
		case 0x2F98A:
			*normals = cjk_compatibility_ideograph_2f98a;
			return 1;
		case 0x2F98B:
			*normals = cjk_compatibility_ideograph_2f98b;
			return 1;
		case 0x2F98C:
			*normals = cjk_compatibility_ideograph_2f98c;
			return 1;
		case 0x2F98D:
			*normals = cjk_compatibility_ideograph_2f98d;
			return 1;
		case 0x2F98E:
			*normals = cjk_compatibility_ideograph_2f98e;
			return 1;
		case 0x2F98F:
			*normals = cjk_compatibility_ideograph_2f98f;
			return 1;
		case 0x2F990:
			*normals = cjk_compatibility_ideograph_2f990;
			return 1;
		case 0x2F991:
			*normals = cjk_compatibility_ideograph_2f991;
			return 1;
		case 0x2F992:
			*normals = cjk_compatibility_ideograph_2f992;
			return 1;
		case 0x2F993:
			*normals = cjk_compatibility_ideograph_2f993;
			return 1;
		case 0x2F994:
			*normals = cjk_compatibility_ideograph_2f994;
			return 1;
		case 0x2F995:
			*normals = cjk_compatibility_ideograph_2f995;
			return 1;
		case 0x2F996:
			*normals = cjk_compatibility_ideograph_2f996;
			return 1;
		case 0x2F997:
			*normals = cjk_compatibility_ideograph_2f997;
			return 1;
		case 0x2F998:
			*normals = cjk_compatibility_ideograph_2f998;
			return 1;
		case 0x2F999:
			*normals = cjk_compatibility_ideograph_2f999;
			return 1;
		case 0x2F99A:
			*normals = cjk_compatibility_ideograph_2f99a;
			return 1;
		case 0x2F99B:
			*normals = cjk_compatibility_ideograph_2f99b;
			return 1;
		case 0x2F99C:
			*normals = cjk_compatibility_ideograph_2f99c;
			return 1;
		case 0x2F99D:
			*normals = cjk_compatibility_ideograph_2f99d;
			return 1;
		case 0x2F99E:
			*normals = cjk_compatibility_ideograph_2f99e;
			return 1;
		case 0x2F99F:
			*normals = cjk_compatibility_ideograph_2f99f;
			return 1;
		case 0x2F9A0:
			*normals = cjk_compatibility_ideograph_2f9a0;
			return 1;
		case 0x2F9A1:
			*normals = cjk_compatibility_ideograph_2f9a1;
			return 1;
		case 0x2F9A2:
			*normals = cjk_compatibility_ideograph_2f9a2;
			return 1;
		case 0x2F9A3:
			*normals = cjk_compatibility_ideograph_2f9a3;
			return 1;
		case 0x2F9A4:
			*normals = cjk_compatibility_ideograph_2f9a4;
			return 1;
		case 0x2F9A5:
			*normals = cjk_compatibility_ideograph_2f9a5;
			return 1;
		case 0x2F9A6:
			*normals = cjk_compatibility_ideograph_2f9a6;
			return 1;
		case 0x2F9A7:
			*normals = cjk_compatibility_ideograph_2f9a7;
			return 1;
		case 0x2F9A8:
			*normals = cjk_compatibility_ideograph_2f9a8;
			return 1;
		case 0x2F9A9:
			*normals = cjk_compatibility_ideograph_2f9a9;
			return 1;
		case 0x2F9AA:
			*normals = cjk_compatibility_ideograph_2f9aa;
			return 1;
		case 0x2F9AB:
			*normals = cjk_compatibility_ideograph_2f9ab;
			return 1;
		case 0x2F9AC:
			*normals = cjk_compatibility_ideograph_2f9ac;
			return 1;
		case 0x2F9AD:
			*normals = cjk_compatibility_ideograph_2f9ad;
			return 1;
		case 0x2F9AE:
			*normals = cjk_compatibility_ideograph_2f9ae;
			return 1;
		case 0x2F9AF:
			*normals = cjk_compatibility_ideograph_2f9af;
			return 1;
		case 0x2F9B0:
			*normals = cjk_compatibility_ideograph_2f9b0;
			return 1;
		case 0x2F9B1:
			*normals = cjk_compatibility_ideograph_2f9b1;
			return 1;
		case 0x2F9B2:
			*normals = cjk_compatibility_ideograph_2f9b2;
			return 1;
		case 0x2F9B3:
			*normals = cjk_compatibility_ideograph_2f9b3;
			return 1;
		case 0x2F9B4:
			*normals = cjk_compatibility_ideograph_2f9b4;
			return 1;
		case 0x2F9B5:
			*normals = cjk_compatibility_ideograph_2f9b5;
			return 1;
		case 0x2F9B6:
			*normals = cjk_compatibility_ideograph_2f9b6;
			return 1;
		case 0x2F9B7:
			*normals = cjk_compatibility_ideograph_2f9b7;
			return 1;
		case 0x2F9B8:
			*normals = cjk_compatibility_ideograph_2f9b8;
			return 1;
		case 0x2F9B9:
			*normals = cjk_compatibility_ideograph_2f9b9;
			return 1;
		case 0x2F9BA:
			*normals = cjk_compatibility_ideograph_2f9ba;
			return 1;
		case 0x2F9BB:
			*normals = cjk_compatibility_ideograph_2f9bb;
			return 1;
		case 0x2F9BC:
			*normals = cjk_compatibility_ideograph_2f9bc;
			return 1;
		case 0x2F9BD:
			*normals = cjk_compatibility_ideograph_2f9bd;
			return 1;
		case 0x2F9BE:
			*normals = cjk_compatibility_ideograph_2f9be;
			return 1;
		case 0x2F9BF:
			*normals = cjk_compatibility_ideograph_2f9bf;
			return 1;
		case 0x2F9C0:
			*normals = cjk_compatibility_ideograph_2f9c0;
			return 1;
		case 0x2F9C1:
			*normals = cjk_compatibility_ideograph_2f9c1;
			return 1;
		case 0x2F9C2:
			*normals = cjk_compatibility_ideograph_2f9c2;
			return 1;
		case 0x2F9C3:
			*normals = cjk_compatibility_ideograph_2f9c3;
			return 1;
		case 0x2F9C4:
			*normals = cjk_compatibility_ideograph_2f9c4;
			return 1;
		case 0x2F9C5:
			*normals = cjk_compatibility_ideograph_2f9c5;
			return 1;
		case 0x2F9C6:
			*normals = cjk_compatibility_ideograph_2f9c6;
			return 1;
		case 0x2F9C7:
			*normals = cjk_compatibility_ideograph_2f9c7;
			return 1;
		case 0x2F9C8:
			*normals = cjk_compatibility_ideograph_2f9c8;
			return 1;
		case 0x2F9C9:
			*normals = cjk_compatibility_ideograph_2f9c9;
			return 1;
		case 0x2F9CA:
			*normals = cjk_compatibility_ideograph_2f9ca;
			return 1;
		case 0x2F9CB:
			*normals = cjk_compatibility_ideograph_2f9cb;
			return 1;
		case 0x2F9CC:
			*normals = cjk_compatibility_ideograph_2f9cc;
			return 1;
		case 0x2F9CD:
			*normals = cjk_compatibility_ideograph_2f9cd;
			return 1;
		case 0x2F9CE:
			*normals = cjk_compatibility_ideograph_2f9ce;
			return 1;
		case 0x2F9CF:
			*normals = cjk_compatibility_ideograph_2f9cf;
			return 1;
		case 0x2F9D0:
			*normals = cjk_compatibility_ideograph_2f9d0;
			return 1;
		case 0x2F9D1:
			*normals = cjk_compatibility_ideograph_2f9d1;
			return 1;
		case 0x2F9D2:
			*normals = cjk_compatibility_ideograph_2f9d2;
			return 1;
		case 0x2F9D3:
			*normals = cjk_compatibility_ideograph_2f9d3;
			return 1;
		case 0x2F9D4:
			*normals = cjk_compatibility_ideograph_2f9d4;
			return 1;
		case 0x2F9D5:
			*normals = cjk_compatibility_ideograph_2f9d5;
			return 1;
		case 0x2F9D6:
			*normals = cjk_compatibility_ideograph_2f9d6;
			return 1;
		case 0x2F9D7:
			*normals = cjk_compatibility_ideograph_2f9d7;
			return 1;
		case 0x2F9D8:
			*normals = cjk_compatibility_ideograph_2f9d8;
			return 1;
		case 0x2F9D9:
			*normals = cjk_compatibility_ideograph_2f9d9;
			return 1;
		case 0x2F9DA:
			*normals = cjk_compatibility_ideograph_2f9da;
			return 1;
		case 0x2F9DB:
			*normals = cjk_compatibility_ideograph_2f9db;
			return 1;
		case 0x2F9DC:
			*normals = cjk_compatibility_ideograph_2f9dc;
			return 1;
		case 0x2F9DD:
			*normals = cjk_compatibility_ideograph_2f9dd;
			return 1;
		case 0x2F9DE:
			*normals = cjk_compatibility_ideograph_2f9de;
			return 1;
		case 0x2F9DF:
			*normals = cjk_compatibility_ideograph_2f9df;
			return 1;
		case 0x2F9E0:
			*normals = cjk_compatibility_ideograph_2f9e0;
			return 1;
		case 0x2F9E1:
			*normals = cjk_compatibility_ideograph_2f9e1;
			return 1;
		case 0x2F9E2:
			*normals = cjk_compatibility_ideograph_2f9e2;
			return 1;
		case 0x2F9E3:
			*normals = cjk_compatibility_ideograph_2f9e3;
			return 1;
		case 0x2F9E4:
			*normals = cjk_compatibility_ideograph_2f9e4;
			return 1;
		case 0x2F9E5:
			*normals = cjk_compatibility_ideograph_2f9e5;
			return 1;
		case 0x2F9E6:
			*normals = cjk_compatibility_ideograph_2f9e6;
			return 1;
		case 0x2F9E7:
			*normals = cjk_compatibility_ideograph_2f9e7;
			return 1;
		case 0x2F9E8:
			*normals = cjk_compatibility_ideograph_2f9e8;
			return 1;
		case 0x2F9E9:
			*normals = cjk_compatibility_ideograph_2f9e9;
			return 1;
		case 0x2F9EA:
			*normals = cjk_compatibility_ideograph_2f9ea;
			return 1;
		case 0x2F9EB:
			*normals = cjk_compatibility_ideograph_2f9eb;
			return 1;
		case 0x2F9EC:
			*normals = cjk_compatibility_ideograph_2f9ec;
			return 1;
		case 0x2F9ED:
			*normals = cjk_compatibility_ideograph_2f9ed;
			return 1;
		case 0x2F9EE:
			*normals = cjk_compatibility_ideograph_2f9ee;
			return 1;
		case 0x2F9EF:
			*normals = cjk_compatibility_ideograph_2f9ef;
			return 1;
		case 0x2F9F0:
			*normals = cjk_compatibility_ideograph_2f9f0;
			return 1;
		case 0x2F9F1:
			*normals = cjk_compatibility_ideograph_2f9f1;
			return 1;
		case 0x2F9F2:
			*normals = cjk_compatibility_ideograph_2f9f2;
			return 1;
		case 0x2F9F3:
			*normals = cjk_compatibility_ideograph_2f9f3;
			return 1;
		case 0x2F9F4:
			*normals = cjk_compatibility_ideograph_2f9f4;
			return 1;
		case 0x2F9F5:
			*normals = cjk_compatibility_ideograph_2f9f5;
			return 1;
		case 0x2F9F6:
			*normals = cjk_compatibility_ideograph_2f9f6;
			return 1;
		case 0x2F9F7:
			*normals = cjk_compatibility_ideograph_2f9f7;
			return 1;
		case 0x2F9F8:
			*normals = cjk_compatibility_ideograph_2f9f8;
			return 1;
		case 0x2F9F9:
			*normals = cjk_compatibility_ideograph_2f9f9;
			return 1;
		case 0x2F9FA:
			*normals = cjk_compatibility_ideograph_2f9fa;
			return 1;
		case 0x2F9FB:
			*normals = cjk_compatibility_ideograph_2f9fb;
			return 1;
		case 0x2F9FC:
			*normals = cjk_compatibility_ideograph_2f9fc;
			return 1;
		case 0x2F9FD:
			*normals = cjk_compatibility_ideograph_2f9fd;
			return 1;
		case 0x2F9FE:
			*normals = cjk_compatibility_ideograph_2f9fe;
			return 1;
		case 0x2F9FF:
			*normals = cjk_compatibility_ideograph_2f9ff;
			return 1;
		case 0x2FA00:
			*normals = cjk_compatibility_ideograph_2fa00;
			return 1;
		case 0x2FA01:
			*normals = cjk_compatibility_ideograph_2fa01;
			return 1;
		case 0x2FA02:
			*normals = cjk_compatibility_ideograph_2fa02;
			return 1;
		case 0x2FA03:
			*normals = cjk_compatibility_ideograph_2fa03;
			return 1;
		case 0x2FA04:
			*normals = cjk_compatibility_ideograph_2fa04;
			return 1;
		case 0x2FA05:
			*normals = cjk_compatibility_ideograph_2fa05;
			return 1;
		case 0x2FA06:
			*normals = cjk_compatibility_ideograph_2fa06;
			return 1;
		case 0x2FA07:
			*normals = cjk_compatibility_ideograph_2fa07;
			return 1;
		case 0x2FA08:
			*normals = cjk_compatibility_ideograph_2fa08;
			return 1;
		case 0x2FA09:
			*normals = cjk_compatibility_ideograph_2fa09;
			return 1;
		case 0x2FA0A:
			*normals = cjk_compatibility_ideograph_2fa0a;
			return 1;
		case 0x2FA0B:
			*normals = cjk_compatibility_ideograph_2fa0b;
			return 1;
		case 0x2FA0C:
			*normals = cjk_compatibility_ideograph_2fa0c;
			return 1;
		case 0x2FA0D:
			*normals = cjk_compatibility_ideograph_2fa0d;
			return 1;
		case 0x2FA0E:
			*normals = cjk_compatibility_ideograph_2fa0e;
			return 1;
		case 0x2FA0F:
			*normals = cjk_compatibility_ideograph_2fa0f;
			return 1;
		case 0x2FA10:
			*normals = cjk_compatibility_ideograph_2fa10;
			return 1;
		case 0x2FA11:
			*normals = cjk_compatibility_ideograph_2fa11;
			return 1;
		case 0x2FA12:
			*normals = cjk_compatibility_ideograph_2fa12;
			return 1;
		case 0x2FA13:
			*normals = cjk_compatibility_ideograph_2fa13;
			return 1;
		case 0x2FA14:
			*normals = cjk_compatibility_ideograph_2fa14;
			return 1;
		case 0x2FA15:
			*normals = cjk_compatibility_ideograph_2fa15;
			return 1;
		case 0x2FA16:
			*normals = cjk_compatibility_ideograph_2fa16;
			return 1;
		case 0x2FA17:
			*normals = cjk_compatibility_ideograph_2fa17;
			return 1;
		case 0x2FA18:
			*normals = cjk_compatibility_ideograph_2fa18;
			return 1;
		case 0x2FA19:
			*normals = cjk_compatibility_ideograph_2fa19;
			return 1;
		case 0x2FA1A:
			*normals = cjk_compatibility_ideograph_2fa1a;
			return 1;
		case 0x2FA1B:
			*normals = cjk_compatibility_ideograph_2fa1b;
			return 1;
		case 0x2FA1C:
			*normals = cjk_compatibility_ideograph_2fa1c;
			return 1;
		case 0x2FA1D:
			*normals = cjk_compatibility_ideograph_2fa1d;
			return 1;
	}
	return 0;
}

